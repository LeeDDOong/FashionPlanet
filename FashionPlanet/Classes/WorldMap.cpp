#include "Global.h"
XSENDMACHINE xSendMachine_FP;

XIMG imgLuluPangLobby[10];
XIMG imgLuluPang;

XLULUPANG xLuluPang;
XLULUPANGLOBBY xLuluPangLobby;
XLULUPANGRANK xLuluPangRank;
XLULUPANGMODEL xLuluPangModel[LULUPANGSETTINGMAX];

XFITTING_FP xFitting_FP;
XFASHIONLIST_FP xFashionList_FP;
XFRIEND_FP xFriend_FP;

XAUTOPRODUCT xAutoProduct;
XAUTOSELL xAutoSell;
XWORLDMAP xWorldMap;
XPRODUCTIONMENULATESTSAVE xProductionMenuLatestSave;
XSELLSLOTSAVE xSellSlotSave;
XRTF *xRtfMain;
XRTFQUEUE xRtfQueue;
XRTF xRtfDemo;
XRIVAL xRival;
XEVENTQUEST xEventQuest;
XEVENTQUESTUI xEventQuestUi;
XOPTION xOption;
XOBJ xObj;
XMAP xMap;
XLOADIMG xloadImg;
XHELPINFO xHelpInfo;
XHELPINFO xHelpInfoCenter;
XDRAWOBJCENTER xDrawObjCenter;
XLINKINFO xLinkInfo;
XNETEVENTPHOTOURL xNetEventPhotoUrl;
XBLINKEFF2 xBlinkEff2[BLINK2EFFMAX];
XFLOORWALLTILEERRQUEUE xFloorWallTileErrQueue;
XJEWELQUEST xJewelQuest;
XBUFF xBuff;
XG9 xG9;
XAMULETSETTING xAmuletSetting;
XAMULET xAmulet;
XCLUBLIST xClubList;
XCLUBSEARCH xClubSearch;
XCLUBMAKE xClubMake;
XCASHGIFT xCashGift;
XMILEAGEDATA xMileageData;
XMILEAGESHOP xMileageShop;
XMILEAGESHOPINFO xMileageShopInfo;
XSAVENOTICEPOPUP xSaveNoticePopup;
XPROFILEPHOTOURL xProfilePhotoUrl;
XRIVALWORLDMAP xRivalWorldMap;
XPRODUCTIONMENULATEST xProductionMenuLatest;
XRIVALGUEST xRivalGuest;
XHELPLIST xHelpList;
XFASTSCROLL xFastScroll;
XJEWELRESULT xJewelResult;
XJEWEL xJewel;
XCLUBLOBBY xClubLobby;
XCLUBJOINMEMBER xClubJoinMember;
XFASHIONWEEKITEM xFashionWeekItem[FASHIONDATATYPEMAX][FASHIONDATAMAX];
XCLUBSHOP xClubShop;
XCLUBNAMEMODIFY xClubNameModify;
XCLUBICONSHOP xClubIconShop;
XMILEAGEUI xMileageUi;
XSELLTABLEUPDATA xSellTableUpdata;
XVOTELIST xVoteList;
XKAKAO xKakao;
XSELECTTILE xSelectTileOne;
XOBJSORT xObjSort[4];
XTREND xTrend;
XBALANCEDATA xBalanceData;
XSERVERSELL xServerSell;
XFIRE xFire[FIREMAX];
XBALANCE xBalance;
XFASHIONSHOWSERVER xFashionShowServer[FASHIONSHOWSERVERMAX];
XSOCIALPROFILE xSocialProfile;
XACCESSBONUS xAccessBonus;
XTUTOLIMIT xTutoLimit;
EXTERNALWALL xExternalWall;
EXTERNALWALLDATA xExternalWallData;
XMODELMAINSLOT xModelMainSlot[MODELMAINSLOTMAX];
XMODELMAINSLOT xModelMainSlotFRIEND[MODELMAINSLOTMAX];
XWASTE xWaste;
XPACKAGEDATA xPackageData[PACKAGEDATAMAX];
XCLUBHISTORY xClubHistory;

XSALESHOP xSaleShop;
XMODELSKILL xModelSkill;
XCOLLECTION xCollection;
XFASHIONSTUDIO xFashionStudio;


XINSHOPPER xInShopPer;
XLVUP xLvUp;
XNPCSET xNpcSet;
XSONGSET xSongSet;
XSHOP xShop;
XCARDATA xCarData[CARDATAMAX];
XCAR xCar;
XCARPARK xCarPark[CARKPARKMAX];
XORDER xOrder;

XFRIEND xFriend;
XFRIENDDATA xFriendData[FRIENDMAX];
XFRIENDMAP xFriendMap;
XMAIL xMail;
XMINIPROFILE xMiniProfile;
XGIFTSHOP xGiftShop;
XNPC xNpc[NPCMAX];
XTUTOINFO xTutoInfo;
XSTAFFMAKE xStaffMake;
XMODELFITTING xModelFitting;
XPRODUCTION xProduction;
XPRODUCTIONMENU xProductionMenu;
XQUESTMAIN xQuestMain;
XQUESTTUTO xQuestTuto;
XQUESTINFO xQuestInfo;
XQUESTDATAMAIN xQuestDataMain[QUESTMAINMAX];
XQUESTDATANORMAL xQuestDataNormal[QUESTNORMALMAX];
XWINNERMODEL xWinnerModel;
XDROPICON xDropIcon[DROPICONMAX];
XFASHIONDROP xFashionDrop;
XCOLORPAPER xColorPaper[COLORPAPERMAX];
XSPOTLIGHT xSpotLight;
XEXTENSIONSHOP xExtensionShop;
XNOTICEWORLDMAP xNoticeWorldMap;
XCHAIRINFO xChairInfo[FLOORMAX];
XLOCK xLock;
XMODELEFF xModelEff;
XSLEEPTIME xSleepTime;
XJEWELUI xJewelUi;
XBLINKEFF xBlinkEff;

XNOTICE xNotice;
XEFF xEff[EFFMAX];
XMINIGAME xMiniGame;
XHAIRDATA xHairData[HAIRDATAMAX];
XFACEDATA xFaceData[FACEDATAMAX];
XWORLDMAPNPC xWorldMapNpc[WORLDMAPNPCMAX];
XWORLDMAPCAR xWorldMapCar[WORLDMAPCARMAX];
XSHOPASSISTANT xShopAssistant[FLOORMAX][SHOPASSISTANTMAX];
XPAYMENTASSISTANT xPaymentAssistant[FLOORMAX];
XSTATICNPC xStaticNpc[STATICNPCMAX];
XMODELNPC xModelNpc[MODELNPCMAX];
XSHOPNPC xShopNpc[SHOPNPCMAX];
XFASHOINDATA xFashionData[FASHIONDATATYPEMAX][FASHIONDATAMAX];
XINVENTORYFASHION xInventoryFashion;
XEVENTQUEUE xEventQueue;
XEVENTQUEUENET xEventQueueNet;

XCATALOG xCatalog;
XSELL xSell;
XBONUSEFF xBonusEff[BONUSEFFMAX];
XEVENTBOX xEventBox[FLOORMAX];


XFASHIONSHOWLIGHT xFashionShowLight[FASHIONSHOWLIGHTMAX];
XSELLTABLE xSellTableInfo[FLOORMAX][SELLTABLEINFOMAX];

XFITTINGROOMINFO xFittingRoomInfo[FLOORMAX];
XPAYMENTINFO xPayMentInfo[FLOORMAX];
XSHOWWINDOWINFO xShowWindowInfo[FLOORMAX][SHOWWINDOWINFOMAX];

XFITTING xFitting;
XSTAFF xStaff;
XPROFILE xProfile;

XMODELDATA xModelData[MODELDATAMAX];
XMODELD xModel;


XINVENTORYMODEL xInventoryModel[INVENTORYMODELMAX];
XINVENTORYMODEL xInventoryModel_FRIEND[INVENTORYMODELMAX];
XMODELUPGRADE xModelUpGrade;



XFASHIONSHOW xFashionShow;
XFASHIONSHOWINFO xFashionShowInfo;

XTRENDMAKERMODELINFO xTrendMakerModelInfo;

XRUNWAY xRunWay;

XPRODUCTIONLIST xProductionList;

XFLASHEFF xFlashEff[FLASHEFF];
XRUNWAYEFF xRunWayEff;
XRUNWAYMINIGAME xRunWayMiniGame[RUNWAYMINIGAMEMAX];


XDEBUG xDebug;

XPREPAY xPrePay;

XPACKAGEPOPUP xPackagePopup;
XHOTDEAL xHotDeal;
XFASHIONWEEKLOBBY xFashionWeekLobby;
XRIVALINFO xRivalInfo;
XCLUB xClub;
XCLUBDONATION xClubDonation[128];
XCHANGECLUBICON xChangeClubIcon;
XCLUBBOOK xClubBook;
XCLUBITEM xClubItem[128];
XCLUBSHOPGIFT xClubShopGift;
XCLUBSTORAGE xClubStorage;
XFASHIONWEEKRANK xFashionWeekRank;
XFASHIONWEEKSETTING xFashionWeekSetting;
XFASHIONWEEK xFashionWeek;
XFASHIONWEEKMODEL xFashionWeekModel[FASHIONWEEKSETTINGMAX];
XPRODUCTION_FP xProduction_FP;
XFASHIONDATA_FP xFashionData_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX];
XCATALOG_FP xCatalog_FP;
XGREENHOUSE_FP xGreenHouse_FP;

////////////////////////////////////////////////////////////////////////////////////////
//헤어,메이크업 데이터 LJW 2018.02.01
XHAIRMAKEUP xHairMakeUp;
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
//레이어 데이터 LJW 2018.02.01
XLAYER xLayer;
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
//내 캐릭터 LJW 2018.02.12
XMYCHARACTER xMyCharacter;
////////////////////////////////////////////////////////////////////////////////////////

XIMG imgTest[10];
XIMG imgProduction[30];
XIMG imgProductionTitle;
/////////////////
//메인 UI
XIMG imgWealth;
XIMG imgMenu;
XIMG imgMenuIcon1;
XIMG imgMenuIcon2;
XIMG imgMainExpWarmth;
XIMG imgBarExp;
XIMG imgBarWarmth;
XIMG imgProfile;
XIMG imgPhoto[10];
XIMG imgNonProfile;
XIMG imgBarEmpty;
XIMG imgWealthIcon[5];
XIMG imgBtnYesNo;
XIMG imgBtn;
/////////////////
//인테리어 편집 UI
XIMG imgInteriorBuild[20];
/////////////////
//우편함
XIMG imgMail[30];
/////////////////
//회원가입 KBY 201.2.23


/////////////////

XIMG imgProductionBg;
XIMG imgClubCostIcon;
XIMG imgClubPointIcon;
XIMG imgClubScoreIcon;
XIMG imgClubFitting[5];
XIMG imgFashionWeek[30];
XIMG imgClubMenu[10];
XIMG imgClubUi[5];
XIMG imgClubBook[10];
XIMG imgMasterUi[10];
XIMG imgClubLobbyTab[10];
XIMG imgClubLobby[15];
XIMG imgClubDonation[10];
XIMG imgChangeClubIcon[10];
XIMG imgClubMake[5];
XIMG imgClubList[10];
XIMG imgClubIcon[CLUBICONMAX];
XIMG imgClubItem[CLUBITEMMAX];
XIMG imgClubShop[10];
XIMG imgClubNameModify[10];
XIMG imgClubIconShop[20];
XIMG imgClubShopGift[20];
XIMG imgClubWealth;
XIMG imgClubStorage[20];
XIMG imgAmuletSlot[2][5];
XIMG imgAmuletSetting[15];
XIMG imgAmuletIcon[32];
XIMG imgAmuletBg[32];
XIMG imgAmuletUiIcon[32];

XIMG imgJewelResult[10];
XIMG imgFastScroll;
XIMG imgJewelBuffBg[10];
XIMG imgJewelIcon[64];
XIMG imgJewelQuestType[20];
XIMG imgJewelQuest[16];
XIMG imgJewelQuestTab[2];
XIMG imgMyShopRefresh[3];
XIMG imgFriendList[5];
XIMG imgHelpListIcon;
XIMG imgHelpList[10];
XIMG imgMyShop[2];
XIMG imgRivalUi[15];
XIMG imgRivalGuest[15];

XIMG imgRivalResult[10];
XIMG imgCafeIcon;
XIMG imgFriendDelBtn2;
XIMG imgProductionLatest;
XIMG imgProductionMenuExitIcon;
XIMG imgFriendMaxIcon;
XIMG imgRival[10];
XIMG imgRivalInfo[10];
XIMG imgRivalWorldMap[10];



XIMG imgRivalWorldMapSlot[32];
XIMG imgRivalTitle[32];
XIMG imgRivalBuilding[32];
XIMG imgRivalNpc[32];
XIMG imgRivalNpcIcon[32];



XIMG imgLoginTime;
XIMG imgBlinkEff2;
XIMG imgDressCodeEff[5];
XIMG imgHotDealUi[5];
XIMG imgHotDeal[10];
XIMG imgNewDancerEff[5];

XIMG imgCastingAIcon;
XIMG imgCastingSIcon;
XIMG imgCastingASIcon;

XIMG imgEventQuestUi[10];
XIMG imgEventQuest[15];
XIMG imgEventQuestIcon[128];
XIMG imgEventQuestBg[128];

XIMG imgPackage[64];
XIMG imgPackagePopup[PACKAGEDATAMAX];
XIMG imgPackageUiIcon[PACKAGEDATAMAX];


XIMG imgPrePayUi[5];
XIMG imgPrePay[5];
XIMG imgMileageIcon[5];
XIMG imgMileageUi[10];
XIMG imgWebView[5];
XIMG imgMileageShop[10];
XIMG imgCashEvent;


XIMG imgBuffIcon[10];
XIMG imgBuffObj[10];

XIMG imgSaleShop[5];
XIMG imgCashShop[5];
XIMG imgSelectSongSlot;
XIMG imgBestRunway[10];
XIMG imgShopOutLine[5];
XIMG imgAccessBonusBg[10];
XIMG imgAccessBonusIcon[5];
XIMG imgAccessBonusSlot[5];

XIMG imgModelName[100][4];
XIMG imgModelMainGiftIcon[5];


XIMG imgAliceShockBg;
XIMG imgAliceShockIcon;
XIMG imgAliceShockSlot;
XIMG imgAliceShockArrow;



XIMG imgExternalWallIcon[20];



XIMG imgTodaySocialFashionBg;

XIMG imgStaffMakeBg;
XIMG imgStaffMake[5];
XIMG imgQuestIcon[80];


XIMG imgFriendOrderBg;
XIMG imgFriendOrderItemBg;
XIMG imgFriendOrderSelectSlot;
XIMG imgFriend[FRIENDMAX];
XIMG imgCar[CARDATAMAX][2];
XIMG imgShopMusicIcon;
XIMG imgShopPremiumIcon[CASHSHOPICONMAX];
XIMG imgShopMoneyIcon[CASHSHOPICONMAX];
XIMG imgShopBg;
XIMG imgCouponBg;
XIMG imgShopTabIcon;
XIMG imgShopTab;
XIMG imgTrendTypeNum;

XIMG imgGiftExpIcon;
XIMG imgGiftGoldIcon;
XIMG imgGiftLookIcon;
XIMG imgGiftCandyIcon;
XIMG imgGiftModelCastingCAIcon;
XIMG imgGiftModelCastingBSIcon;
XIMG imgGiftTrendHangerIcon;
XIMG imgGiftTrendAccessoryIcon;
XIMG imgGiftPangTimesReset;



XIMG imgNotice[10];
XIMG imgMiniGameIcon[20];
XIMG imgExternalWall[3];
XIMG imgExternalWallS[10];
XIMG imgExternalWallChange[FLOORMAX];
XIMG imgExternalWallSChange;

XIMG imgLvUp[10];



XIMG imgHair[HAIRDATAMAX][20][2][2];		//[헤어코드][두상번호][pos][2]
XIMG imgHairF[HAIRDATAMAX][2];		//[헤어코드][2]
XIMG imgHairF_Model[HAIRDATAMAX][2];		//[헤어코드][2]
XIMG imgHair_Model[HAIRDATAMAX][20][2][2];		//[헤어코드][두상번호][pos][2]
XIMG imgHair_Npc[HAIRDATAMAX][20][2][2];		//[헤어코드][두상번호][pos][2]


M_Boolean isImgHair[HAIRDATAMAX];
M_Boolean isImgHair_Model[HAIRDATAMAX];
M_Boolean isImgHair_Npc[HAIRDATAMAX];

XIMG imgFace[FACEDATAMAX][FACETYPEMAX][20][2];		//[표정코드][표정액팅][두상번호][pos][2]
XIMG imgFace_Model[FACEDATAMAX][FACETYPEMAX][20][2];		//[표정코드][표정액팅][두상번호][pos][2]
XIMG imgFace_Npc[FACEDATAMAX][FACETYPEMAX][20][2];		//[표정코드][표정액팅][두상번호][pos][2]
XIMG imgFaceF[FACEDATAMAX];		//[표정코드][표정액팅][두상번호][pos][2]
XIMG imgFaceF_Model[FACEDATAMAX];		//[표정코드][표정액팅][두상번호][pos][2]
M_Boolean isImgFace[FACEDATAMAX];
M_Boolean isImgFace_Model[FACEDATAMAX];
M_Boolean isImgFace_Npc[FACEDATAMAX];

//////////////////////////////////////////////////////
//헤어, 얼굴표정 이미지 추가 LJW 2018.02.08
M_Boolean isImgHair_FP[HAIRDATAMAX];
M_Boolean isImgHairBig_FP[HAIRDATAMAX];
M_Boolean isImgFace_FP[FACEDATAMAX];
M_Boolean isImgFaceBig_FP[FACEDATAMAX];
XIMG imgHair_FP[HAIRDATAMAX][2][2];//[헤어코드][방향][헤어파일]
XIMG imgHairBig_FP[HAIRDATAMAX][2][2];//[헤어코드][방향][헤어파일]
XIMG imgFace_FP[HAIRDATAMAX];
XIMG imgFaceBig_FP[HAIRDATAMAX];
//////////////////////////////////////////////////////


XIMG imgActBodySub[ACTLAYERMAX][2];
XIMG imgActBody[ACTLAYERMAX][2];
XIMG imgFittingBodyStaff[2][ACTLAYERMAX];
XIMG imgFittingBody[2][ACTLAYERMAX];
XIMG imgFittingBodyBlack3Sub[2];
XIMG imgFittingBodyBlack[2][ACTLAYERMAX];
M_Boolean isFreeFittingF[FASHIONDATATYPEMAX][FASHIONDATAMAX];
M_Boolean isFreeFittingF_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX];
M_Boolean isImgFittingF[FASHIONDATATYPEMAX][FASHIONDATAMAX];
M_Boolean isImgFittingF_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX];

XIMG imgFittingF0[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingFInOut0[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingF1[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingFInOut1[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingF2[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingFInOut2[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingF3[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingFInOut3[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingF4[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingFInOut4[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingF5[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingFInOut5[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingF6[FASHIONDATAMAX][ACTLAYERMAX][20];
XIMG imgFittingFInOut6[FASHIONDATAMAX][ACTLAYERMAX][20];

XIMG imgFittingItem[FASHIONDATATYPEMAX][FASHIONDATAMAX];

XIMG imgFittingFBackPack[FASHIONDATAMAX];


XIMG imgFittingBg[5];

XIMG imgFittingF_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX];
XIMG imgFittingItem_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX];




XIMG imgRivalComingSoon[10];
XIMG imgMapBg;

M_Boolean isImgFLayer[FASHIONDATATYPEMAX][FASHIONDATAMAX];
XIMG imgFLayer[FASHIONDATATYPEMAX][FASHIONDATAMAX][FASHIONDATALAYERMAX][2];
XIMG imgFLayerSub[FASHIONDATATYPEMAX][FASHIONDATAMAX][FASHIONDATALAYERMAX][2];

M_Boolean isImgFLayerBig_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX];
M_Boolean isImgFLayer_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX];
XIMG ImgFLayerBig_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX][FASHIONDATALAYERMAX][2];
XIMG ImgFLayer_FP[FASHIONDATATYPEMAX][FASHIONDATAMAX][FASHIONDATALAYERMAX][2];

XIMG imgThemaIconB[32];


XIMG imgStaticNpc[20][2][40];

XIMG imgFormer[10];
XIMG imgMerchin[20];


XIMG imgFitting[20];//옷장
XIMG imgfriendList[30];//친구행성

XIMG imgWorldMapRocketEFF[2];//0:연기,1:불꽃
XIMG imgWorldMapRocket[BUILDINGMAX];//로켓
XIMG imgWorldMapRocketBottom[BUILDINGMAX];//로켓 발사대
XIMG imgWorldMapVinylHouse[BUILDINGMAX];//비닐하우스
XIMG imgWorldMapStorage[BUILDINGMAX];//창고
XIMG imgWorldMapAntenna[BUILDINGMAX];//안테나

///////////////////////////////////////////
//온실 이미지
XIMG imgGreenHouse[30];
XIMG imgFlower[128][4];
XIMG imgSlotLv[GREENHOUSESLOT_LV_MAX];
XIMG imgSpinningWheel[30];

///////////////////////////////////////////
//상점 이미지
XIMG imgShop[30];
XIMG imgInterior_FP[INTERIORSLOTBMAX][INTERIORSLOTSMAX];

///////////////////////////////////////////
//전송기UI 이미지
XIMG imgSendMachine_DisplayArrow;
XIMG imgSendMachine_Controler;
XIMG imgSendMachine_Display;
XIMG imgSendMachine_Num;
XIMG imgSendMachine_Rail;
XIMG imgSendMachine_RailRabbit;
XIMG imgSendMachine_Slot[5];
XIMG imgSendMachine_Sticker[7];
XIMG imgSendMachine_StorageTitle;
XIMG imgSendMachine_Title;
XIMG imgSendMachine_BG;
XIMG imgSendMachine_BtnExit;
XIMG imgSendMachine_Storage[4];
XIMG imgSendMachine_BtnArrow[2];
XIMG imgSendMachine_Lock;
XIMG imgSendMachine_BtnUpgrade;

///////////////////////////////////////////
//캐릭터 레이어 시스템 LJW 2018.02.08
XIMG imgLayer[40][2];
bool isLayer[40][2];
///////////////////////////////////////////

///////////////////////////////////////////
//온실
XGREENHOUSE_MATERIALDATA_FP xGreenHouse_MaterialData_FP;

///////////////////////////////////////////
//물레
XSPINNING_MATERIALDATA_FP xSPinning_MaterialData_FP;
XSPINNING_FP xSpinning_FP;
///////////////////////////////////////////
//Variable
XCHS xChs;
////////////////////////////////////////////
//당근
XCALCCARROT xCalcCarrot;
////////////////////////////////////////////
//상점
XSHOP_FP xShop_FP;

////////////////////////////////////////////
XFORMER xFormer;

XINTERIOR xInterior;

XSWITCH xSwitchWorldMapUi;
XSWITCH xSwitchWorldMapUi_Up;
XWORLDMAPUI xWorldMapUi;
XINVENTORYINTERIOR xInventoryInterior;
XSAVE xSave;
XSAVEKAKAO xSaveKakao;
XSAVEKAKAO xSaveKakaoApp;
XSAVEKAKAOHELP xSaveKakaoHelp;
XSAVETEMP xSaveTemp;

XDRAGSCROLL xDragScrollDeliverySlot;
XDRAGSCROLL xDragScrollSellSelectItemSlot;

XDRAGSCROLL xDragScrollProductionSlot;
XDRAGSCROLL xDragScrollFriendSlot;
XDRAGSCROLL xDragScrollCarStorageSlot;

XDRAGSCROLL xDragScrollInteriorS;

XDRAGSCROLL xDragScrollCatalogS;
XDRAGSCROLL xDragScrollFittingS;

XTOUCH xTouchLink;
XTOUCH xTouchFriendMapRandom;
XTOUCH xTouchFriendMapAdd;
XTOUCH xTouchFriendMapPre;
XTOUCH xTouchFriendMapNext;
XTOUCH xTouchFriendMapMail;
XTOUCH xTouchFriendMapMail2;
XTOUCH xTouchFriendMapModel;

XTOUCH xTouchOrderMakeBtn[10];
XTOUCH xTouchEventIcon;
XTOUCH xTouchWorldMapFashionShow;
XTOUCH xTouchWorldMapKakao;
XTOUCH xTouchDelivery[20];
XTOUCH xTouchWorldMapTired;
XTOUCH xTouchFittingMenu[4];
XTOUCH xTouchFittingReset;
XTOUCH xTouchFittingSave;
XTOUCH xTouchGenderLeft;
XTOUCH xTouchGenderRight;

XTOUCH xTouchSellInput;

XTOUCH xTouchSellSelectItemSlot[10];
XTOUCH xTouchSellSelectItemSlotInfo[10];
XTOUCH xTouchSellCancel[SELLSLOTMAX];
XTOUCH xTouchSellFast[SELLSLOTMAX];
XTOUCH xTouchSellSlot[SELLSLOTMAX];

XTOUCH xTouchSelectBtn;
XTOUCH xTouchMake;
XTOUCH xTouchBuy;
XTOUCH xTouchAllBuy;

XTOUCH xTouchProductionFastCash;
XTOUCH xTouchProductionPush;
XTOUCH xTouchProductionCancel;


XTOUCH xTouchTrendSlot[TRENDMAX];


XTOUCH xTouchBuildIconExit;
XTOUCH xTouchBuildIconShop;
XTOUCH xTouchInteriorTabB[8];
XTOUCH xTouchInteriorTabS[12];
XTOUCH xTouchInteriorS[32];
XTOUCH xTouchCatalogTabB[5];
XTOUCH xTouchCatalogTabS[12];
XTOUCH xTouchCatalogS[10];


XTOUCH xTouchCatalogDel[10];
XTOUCH xTouchCatalogSInfo[10];
XTOUCH xTouchCatalogSYes[10];
XTOUCH xTouchCatalogSNo[10];

XTOUCH xTouchFittingTabB[15];
XTOUCH xTouchFittingS[10];

XTOUCH xTouchInteriorBtn[4][2];

XTOUCH xTouchBuildIconOk;
XTOUCH xTouchBuildIconClr;
XTOUCH xTouchBuildIconMove;
XTOUCH xTouchBuildIconMoveObj;
XTOUCH xTouchBuildIconInven;
XTOUCH xTouchBuildIconRot;

///////////////////////////////////////////
//인테리어 체크 여부
bool isTouchBuildIconOk;
bool isTouchBuildIconClr;
bool isTouchBuildIconMove;
bool isTouchBuildIconMoveObj;
bool isTouchBuildIconInven;
bool isTouchBuildIconRot;
///////////////////////////////////////////

///////////////////////////////////////////
//사진 등록 터치 여부
bool isTouchPhotoSelect;
bool isTouchPhotoDel;
bool isTouchPhotoClr;
///////////////////////////////////////////

XTOUCH xTouchScrollOk;
XTOUCH xTouchScrollStepUp;
XTOUCH xTouchScrollStepDown;

XTOUCH xTouchWorldMapFriendIcon;
XTOUCH xTouchWorldMapMainMenuIcon;
XTOUCH xTouchWorldMapCashIcon;
XTOUCH xTouchWorldMapMoneyIcon;
XTOUCH xTouchWorldMapItemShop;
XTOUCH xTouchWorldMapCandyIcon;


XTOUCH xTouchWorldMapTrendIcon;
XTOUCH xTouchWorldMapInShopPerIcon;
XTOUCH xTouchPlayerInfoIcon;

XTOUCH xTouchRocket;

XTOUCH xTouchGreenHouse;
XTOUCH xTouchSpinningWheel;

void initWorldMap()
{
	int i;
	
	initWorldMapRocket();
	
	xMap.nowFloor = xMap.totalFloor-1;
	xMap.shopPointW = 8+xMap.extension;
	xMap.shopPointH = 8+xMap.extension;
	
	setFontSize(11);
		
	for(int i=0;i<OBJMAX;i++)
		for(int j=0;j<OBJDATAMAX;j++)
			xObj.isImgUse[i][j] = FALSE;
	
	for(int imgType=0;imgType<FASHIONDATATYPEMAX;imgType++)
		for(int imgList=0;imgList<FASHIONDATAMAX;imgList++)
			isFreeFittingF[imgType][imgList] = FALSE;
				
	
	xNoticeWorldMap.nowPopupNum = nextNoticePopup(DONT);
	
	if(xNoticeWorldMap.nowPopupNum != DONT && xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == FALSE && xWorldMap.isFriendMap == FALSE)
	{
		worldMapNoticeFreeLoad(TRUE);
		xNoticeWorldMap.isOneDay = FALSE;
		xWorldMap.state = WORLDMAP_STATE_NOTICEPOPUP;
	}
	else
	{
		xWorldMap.state = WORLDMAP_STATE_PLAY;
		xInterior.buildModeTime64 = DONT;
	}
	
	//LJW 월드맵 진입시 공지팝업 및 네이버카페 호출 막기
	xWorldMap.state = WORLDMAP_STATE_PLAY;

	xFriendMap.isPlay = FALSE;
	
	if(xWorldMap.isStartClet == TRUE)
	{
		
        xJewelQuest.selectTab = 1;
        
		xWorldMap.isStartClet = FALSE;
				
		xInShopPer.isSellTime = TRUE;
		xWorldMap.isTodaySocial = TRUE;
		xWorldMap.isTodayRunway = TRUE;
		
		setMapData(1000);
		if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
		{
			xInventoryFashion.isOpen[xMap.type][xMap.listNum] = TRUE;
			////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
			///////////////////////////////////////////////////
		}
		setMapData(2000);
		if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
		{
			xInventoryFashion.isOpen[xMap.type][xMap.listNum] = TRUE;
			////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
			///////////////////////////////////////////////////
		}
		
		if(xExternalWallData.isOpen[0] == FALSE)
		{
			xExternalWallData.isOpen[0] = TRUE;
			////////////////////////////////////////////
			xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:설정,1:구입
			xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_EXTERNALWALL, FALSE);
			///////////////////////////////////////////
		}
		
		
		if(xCarPark[0].carNum == DONT)
		{
			int carParkSlot = 0;
			xCarPark[carParkSlot].state = 0;
			xCarPark[carParkSlot].carNum = 3;
			xCarPark[carParkSlot].endTime = 0;
			xCarPark[carParkSlot].orderKey = 0;
			
			///////////////////////////////////////////////////////////////
			xEventQueueNet.slotNum[xEventQueueNet.totalNum] = carParkSlot;
			xEventQueueNet.key[xEventQueueNet.totalNum] = xCarPark[carParkSlot].orderKey;
			xEventQueueNet.code[xEventQueueNet.totalNum] = xCarPark[carParkSlot].carNum;
			xEventQueueNet.action[xEventQueueNet.totalNum] = xCarPark[carParkSlot].state;
			xEventQueueNet.time[xEventQueueNet.totalNum] = xCarPark[carParkSlot].endTime;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CARPARK, FALSE);
			//////////////////////////////////////////////////////////////
		}
		//기본차량은 오픈상태
		if(xCar.isOpen[3] == FALSE)
		{
			xCar.isOpen[3] = TRUE;
		}
						
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETPMDATA, TRUE);
		initKakaoAppInviteAuto();
				
		getSprintfArea(strTempS,xSaveTemp.area);
		sprintf(strTempB,"%d",xSaveTemp.age);
		
		char strSex[64];
		sprintf(strSex, "%s",xSaveTemp.sex == 0?"여자":"남자");		
		setFiveRocksUser(xKakaoData.xUserInfo.strUserId,xSaveTemp.lv.oriData,xSaveTemp.friendNum,VER,strSex,strTempS,strTempB);
		
		////////////////////////////////////////////////////////////////////////
		xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
		xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETPUSH, TRUE);
		////////////////////////////////////////////////////////////////////////
								
		if(xG9.isOpen == TRUE || xWorldMap.isOpen_CASH10000 == TRUE)
		{
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//셀렉트(만원이벤트 지급과 g9이벤트 참여여부얻어오기)
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_G9EVENT, TRUE);
			///////////////////////////////////////////////////////////////////
		}
	}
	
	//모델
	xModel.listTabNum = DONT;
	xCatalog.selectTabList = DONT;
				
	for(int i=0;i<BONUSEFFMAX;i++)
		xBonusEff[i].state = BONUSEFF_STATE_DONT;
	
	//패션쇼장불빛
	for(i=0;i<WORLDMAPNPCMAX;i++)
		xWorldMapNpc[i].state = WORLDMAPNPC_STATE_DONT;
	
	for(i=0;i<WORLDMAPCARMAX;i++)
		xWorldMapCar[i].state = WORLDMAPCAR_STATE_DONT;
	
	xMap.speedTable[0] = 0.25f;
	xMap.speedTable[1] = 0.5f;
	xMap.speedTable[2] = 1.0f;
	xMap.speedTable[3] = 2.0f;
	xMap.speedTable[4] = 4.0f;
	xMap.speedTable[5] = 8.0f;
	
	/*
	xMap.speedTable[0] = 8.0f;
	xMap.speedTable[1] = 8.0f;
	xMap.speedTable[2] = 8.0f;
	xMap.speedTable[3] = 8.0f;
	xMap.speedTable[4] = 8.0f;
	xMap.speedTable[5] = 8.0f;
	 */

	xLvUp.interiorInfoCode = DONT;
	xLvUp.productionInfoCode = DONT;
		
	//makeShopAssistant(); //LJW 샵직원 삭제 2018.02.12
	
    /////////////////////////////////////////////////
    ////스위치 버튼 개수 변동 KBY
	xWorldMapUi.totalNum = 7;
	
	
	//스위치 초기화
	xSwitchWorldMapUi.state = SWITCH_STATE_OFF;
	xSwitchWorldMapUi.anyCnt = 0;
	xSwitchWorldMapUi_Up.state = SWITCH_STATE_OFF;
	xSwitchWorldMapUi_Up.anyCnt = 0;
		
	initDragScroll();
	setBuildCheck();

	for(int floor=0;floor<xMap.totalFloor;floor++)
		checkMapDataAstar(MAP_TYPE_OBJ,floor);
	
	for(int type=0;type<OBJMAX;type++)
		for(int listNum=0;listNum<OBJDATAMAX;listNum++)
			xObj.isImgUse[type][listNum] = FALSE;
	
	initMenuOut();

	npcSet();
				
	xMap.totalFloor = 1;
	
	if(xWorldMap.isFriendMap == TRUE && xFriendData[xFriendMap.selectDataSlotNum].isPM == TRUE)
	{
		setQuest(31, 1, DONT);
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_7_RESULT:
				xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
	}
	
	if(xWorldMap.isFriendMap == TRUE)
	{
		makeWaste();
		setFiveRocksCustom("친구샵","방문","NULL","NULL",1);
		xFriendData[xFriendMap.selectDataSlotNum].isKakao = checkKakaoFriend(xFriendData[xFriendMap.selectDataSlotNum].strKakaoId);
	}

	xSellTableUpdata.sellUpdataTime = 0;
	
	if(xWorldMap.isFriendMap == FALSE)
	{
		xOrder.totalNumRecv = 0;
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ORDERRECVLIST, FALSE);
	}
	
	xOrder.totalNumListDataFriend = 0;
	xOrder.totalNumListData = 0;
	xOrder.isNetLoad = FALSE;
	addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
				
	for(int i=0;i<DROPICONMAX;i++)
		xDropIcon[i].state = DROPICON_STATE_DONT;
		
	
	
	for(int i=0;i<FASHIONDROPMAX;i++)
	{
		xFashionDrop.state[i] = FASHIONDROP_STATE_DONT;
	}
	
	xWorldMap.isExternal = FALSE;
	xMap.totalFloor = 1;
	
	if(xMap.isOpen[0] == TRUE)
		xMap.totalFloor++;
	if(xMap.isOpen[1] == TRUE)
		xMap.totalFloor++;
	xMap.nowFloor = xMap.totalFloor-1;
	
	
	makeModelShopNpc();
	
	
	xWorldMap.isFriendMapFloorInfo = FALSE;
	if(xMap.totalFloor > 1)
		xWorldMap.isFriendMapFloorInfo = TRUE;
		
	
	xWorldMap.initCnt = 0;
		
	
    
    
    xWorldMap.isLoginInit = TRUE;
	
		
	//////////////////////////////////////////////////////////////////////////////////////////
	if(xWorldMap.isFriendMap == FALSE)
	{
		xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
		
		xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
		xEventQueueNet.slotNum[xEventQueueNet.totalNum] = 0;
		
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
		
		xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
		xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
		xEventQueueNet.slotNum[xEventQueueNet.totalNum] = 0;
		
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GIFTLIST, TRUE);
		checkSocialDay();
        
        xEventQuest.isNetLoad = true;
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_EVENTQUESTMAINLIST, TRUE);
        
        xEventQueueNet.questType[xEventQueueNet.totalNum] = -1;
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_EVENTQUESTDETAILLIST, TRUE);
        
//        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_HOTDEALMAINLIST, TRUE);
        
        xRival.isNetLoad = true;
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RIVALLIST, TRUE);
        
        
        if(xAmulet.isOpen == true)
        {
            xJewelQuest.isNetLoad = false;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_JEWELQUESTLIST, TRUE);
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AMULETBUYLIST, TRUE);
        }
	}
    
    if(xAmulet.isOpen == true)
    {
        xAmulet.isNetLoad = false;
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AMULETLIST, TRUE);
    }
    
    
	////////////////////////////////////////////////////////////////////////////////////////
	xWorldMap.isSocialProfile = FALSE;
		
	for(int i=0;i<MODELMAINSLOTMAX;i++)
		xModelMainSlot[i].ingAnyCnt = 999;
	
	xWorldMap.isSubLoading = FALSE;
	xWorldMap.subLoadingAntCnt = 0;
	
	
	freeImg(&imgExternalWallS[0]);
	freeImg(&imgExternalWallS[1]);
	freeImg(&imgExternalWallS[2]);
	freeImg(&imgExternalWallS[3]);
	freeImg(&imgExternalWallS[4]);
	freeImg(&imgExternalWallS[5]);
	freeImg(&imgExternalWallS[6]);
	freeImg(&imgExternalWall[0]);
	freeImg(&imgExternalWall[1]);
	
	xnet.heartBitTime22 = xCalendar.nowTime;
	xWorldMap.npcSpeakPer = 50;
	
    
	//좌표계,스케일 초기화
	xMap.pointCx = cx;
	xMap.pointCy = cy-((xMap.totalTileY+xMap.totalTileX)*TILEH/4);
	xMap.pointX = xMap.pointCx;
	xMap.pointY = xMap.pointCy-100;
	
	if(xMap.totalFloor == 2)
	{
		xMap.pointY = -570;
		xWorldMap.fscale = 0.773f;
	}
	else
	{
		switch(xMap.extension)
		{
		case 0:
			xMap.pointY = -539;
			xWorldMap.fscale = 1.260f;
			break;
		case 1:
			xMap.pointY = -549;
			xWorldMap.fscale = 1.260f;
			break;
		case 2:
			xMap.pointY = -569;
			xWorldMap.fscale = 1.260f;
			break;
		case 3:
			xMap.pointY = -586;
			xWorldMap.fscale = 1.179;
			break;
		case 4:
			xMap.pointY = -597;
			xWorldMap.fscale = 1.114f;
			break;
		case 5:
			xMap.pointY = -614;
			xWorldMap.fscale = 1.054f;
			break;
		case 6:
			xMap.pointY = -635;
			xWorldMap.fscale = 0.998f;
			break;
		case 7:
			xMap.pointY = -644;
			xWorldMap.fscale = 0.942f;
			break;
		}
	}
	
	
	
	xCalendar.gameInfoCheckTime = xCalendar.nowTime;
	
	
	int startYMDS = checkYMDS(xProductionMenu.startYY,
							  xProductionMenu.startMM,
							  xProductionMenu.startDD,
							  xProductionMenu.startHH);
	int endYMDS = checkYMDS(xProductionMenu.endYY,
							xProductionMenu.endMM,
							xProductionMenu.endDD,
							xProductionMenu.endHH);
	
	if(startYMDS <= 0 && endYMDS > 0)
	{
	}
	else
	{
		xProductionMenu.isSlotSaleEventOpen = FALSE;
	}
    
    
    //블링크 최고하
    for(int k=0;k<MODELDATAMAX;k++)
    {
        xModel.blinkEffAnyCnt_sex[k] = ranDom(0, 50);
    }
    
    for(int k=0;k<FITTINGSLOTSMAX;k++)
    {
        xFitting.blinkEffAnyCnt_trend[k] = ranDom(0, 50);
        xFitting.blinkEffAnyCnt_color[k] = ranDom(0, 50);
        xFitting.blinkEffAnyCnt_concept[k] = ranDom(0, 50);
    }
    
    naverGameUserId(xSaveTemp.strNickName);
    xPackagePopup.uiShowRemainTime = -100;
    
    
    for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
    {
        xFashionWeekModel[k].modelKey = DONT;
        xFashionWeekModel[k].studioSlotNum = DONT;
    }
    
    
    for(int i=0;i<FORMERMAX;i++)
    {
        xFormer.xData[i].ingAnyCnt=999;
    }
    
    
    
    
    /*

    xWorldMap.state = WORLDMAP_STATE_CLUBLOBBY;
    xClubLobby.selectMenu = 1;
    initFashionWeekLobby();
    clubLobbyFreeLoad(true);
    fashionWeekFreeLoad(true);
    
    
    xWorldMap.state = WORLDMAP_STATE_PANG;
    initPang();
    loadPangImg();
     */

    
	xAutoProduct.time = xCalendar.nowTime;
    
    xFitting_FP.selectTabB=-1;
    xFitting_FP.isinfo=false;
    
    xFriend_FP.selectTabB=0;
	
    
	makeMyCharacter();
    

    isTouchBuildIconOk=false;
    isTouchBuildIconClr=false;
    isTouchBuildIconMove=false;
    isTouchBuildIconMoveObj=false;
    isTouchBuildIconInven=false;
    isTouchBuildIconRot=false;
    
    isTouchPhotoSelect=false;
    isTouchPhotoDel=false;
    isTouchPhotoClr=false;
//    xEventQueueNet.end_time[xEventQueueNet.totalNum]=xCalendar.nowTime;
//    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETCARROT, TRUE);
    
//    for(int k=0;k<PRODUCTIONMAX;k++)
//    {
//        xProduction_FP.xData[k].totalSlot=0;
//    }
    
//    loadImg("100_back.png", &imgTest[0]);
//    loadImg("100_front.png", &imgTest[1]);
//    loadImg("200_back.png", &imgTest[2]);
//    loadImg("200_front.png", &imgTest[3]);
//    loadImg("100_front_shape.png",&imgTest[4]);
//	sleepAutoProduct();
}


void staffMakeFreeLoad(M_Boolean isLoad)
{
	//스태프생성
	if(isLoad == TRUE)
	{
		loadImg("staffmakebg.png", &imgStaffMakeBg);
		loadImg("staffmake0.png", &imgStaffMake[0]);
	}
	else
	{
		freeImg(&imgStaffMakeBg);
		freeImg(&imgStaffMake[0]);
	}
}



void stateStaffMake(int type,int inType)
{
	
	staffMakeFreeLoad(TRUE);
	xWorldMap.state = WORLDMAP_STATE_STAFFMAKE;
	xStaffMake.type = type;
	xStaffMake.inType = inType;
		
	XFACE xFaceTemp[2];
	XFITTINGLAYER xFTemp[2];
	
	//여자
	xNetStaff.layer[0] = STAFF0_HAIRCODE;	//헤어
	xNetStaff.layer[1] = STAFF0_FACECODE;		//표정
	xNetStaff.layer[2] = STAFF0_FASHIONCODE0;//상의
	xNetStaff.layer[3] = STAFF0_FASHIONCODE1;//하의
	xNetStaff.layer[4] = STAFF0_FASHIONCODE2;//원피스
	xNetStaff.layer[5] = STAFF0_FASHIONCODE3;//구두
			
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
		xFTemp[0].code[ff] = DONT;
	
	for(int f=2;f<6;f++)
	{
		if(xNetStaff.layer[f] != DONT)
		{
			setMapData(xNetStaff.layer[f]);//xMap.rever,xMap.type,xMap.listNum 구하기
			xFTemp[0].code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
		}
	}
	
	xFaceTemp[0].hairNum = xNetStaff.layer[0];
	xFaceTemp[0].faceNum = xNetStaff.layer[1];
	xFaceTemp[0].faceType = 0;
	
	//남자
	xNetStaff.layer[0] = STAFF1_HAIRCODE;	//헤어
	xNetStaff.layer[1] = STAFF1_FACECODE;		//표정
	xNetStaff.layer[2] = STAFF1_FASHIONCODE0;//상의
	xNetStaff.layer[3] = STAFF1_FASHIONCODE1;//하의
	xNetStaff.layer[4] = STAFF1_FASHIONCODE2;//원피스
	xNetStaff.layer[5] = STAFF1_FASHIONCODE3;//구두
	
    for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
		xFTemp[1].code[ff] = DONT;
	
	for(int f=2;f<6;f++)
	{
		if(xNetStaff.layer[f] != DONT)
		{
			setMapData(xNetStaff.layer[f]);//xMap.rever,xMap.type,xMap.listNum 구하기
			xFTemp[1].code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
		}
	}
	
	xFaceTemp[1].hairNum = xNetStaff.layer[0];
	xFaceTemp[1].faceNum = xNetStaff.layer[1];
	xFaceTemp[1].faceType = 0;
	
	xStaffMake.sex = 0;
	memcpy(&xStaffMake.xF[xStaffMake.sex], &xFTemp[xStaffMake.sex], sizeof(xFTemp[xStaffMake.sex]));
	memcpy(&xStaffMake.xFace[xStaffMake.sex], &xFaceTemp[xStaffMake.sex], sizeof(xFaceTemp[xStaffMake.sex]));
	xStaffMake.sex = 1;
	memcpy(&xStaffMake.xF[xStaffMake.sex], &xFTemp[xStaffMake.sex], sizeof(xFTemp[xStaffMake.sex]));
	memcpy(&xStaffMake.xFace[xStaffMake.sex], &xFaceTemp[xStaffMake.sex], sizeof(xFaceTemp[xStaffMake.sex]));
				
	switch(type)
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
		if(inType == STAFFMAKE_INTYPE_INIT)
		{
			sprintf(xStaffMake.strName, "%s","1층계산");
			xStaffMake.sex = 0;
		}
		else
		{
			sprintf(xStaffMake.strName, "%s",xPaymentAssistant[0].strName);
			xStaffMake.sex = xPaymentAssistant[0].gender;
			memcpy(&xStaffMake.xF[xStaffMake.sex], &xPaymentAssistant[0].xF, sizeof(xStaffMake.xF[xStaffMake.sex]));
			memcpy(&xStaffMake.xFace[xStaffMake.sex], &xPaymentAssistant[0].xFace, sizeof(xStaffMake.xFace[xStaffMake.sex]));
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		if(inType == STAFFMAKE_INTYPE_INIT)
		{
			sprintf(xStaffMake.strName, "%s","1층점원");
			xStaffMake.sex = 1;
		}
		else
		{
			sprintf(xStaffMake.strName, "%s",xShopAssistant[0][0].strName);
			xStaffMake.sex = xShopAssistant[0][0].gender;
			memcpy(&xStaffMake.xF[xStaffMake.sex], &xShopAssistant[0][0].xF, sizeof(xStaffMake.xF[xStaffMake.sex]));
			memcpy(&xStaffMake.xFace[xStaffMake.sex], &xShopAssistant[0][0].xFace, sizeof(xStaffMake.xFace[xStaffMake.sex]));
		}
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
		if(inType == STAFFMAKE_INTYPE_INIT)
		{
			sprintf(xStaffMake.strName, "%s","2층계산");
			xStaffMake.sex = 0;
		}
		else
		{
			sprintf(xStaffMake.strName, "%s",xPaymentAssistant[1].strName);
			xStaffMake.sex = xPaymentAssistant[1].gender;
			memcpy(&xStaffMake.xF[xStaffMake.sex], &xPaymentAssistant[1].xF, sizeof(xStaffMake.xF[xStaffMake.sex]));
			memcpy(&xStaffMake.xFace[xStaffMake.sex], &xPaymentAssistant[1].xFace, sizeof(xStaffMake.xFace[xStaffMake.sex]));
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		if(inType == STAFFMAKE_INTYPE_INIT)
		{
			sprintf(xStaffMake.strName, "%s","2층점원");
			xStaffMake.sex = 1;
			xShopAssistant[1][0].gender = xStaffMake.sex;
			memcpy(&xShopAssistant[1][0].xF, &xFTemp[xStaffMake.sex], sizeof(xFTemp[xStaffMake.sex]));
			memcpy(&xShopAssistant[1][0].xFace, &xFaceTemp[xStaffMake.sex], sizeof(xFaceTemp[xStaffMake.sex]));
		}
		else
		{
			sprintf(xStaffMake.strName, "%s",xShopAssistant[1][0].strName);
			xStaffMake.sex = xShopAssistant[1][0].gender;
			memcpy(&xStaffMake.xF[xStaffMake.sex], &xShopAssistant[1][0].xF, sizeof(xStaffMake.xF[xStaffMake.sex]));
			memcpy(&xStaffMake.xFace[xStaffMake.sex], &xShopAssistant[1][0].xFace, sizeof(xStaffMake.xFace[xStaffMake.sex]));
		}
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		if(inType == STAFFMAKE_INTYPE_INIT)
		{
			sprintf(xStaffMake.strName, "%s","3층계산");
			xStaffMake.sex = 0;
		}
		else
		{
			sprintf(xStaffMake.strName, "%s",xPaymentAssistant[2].strName);
			xStaffMake.sex = xPaymentAssistant[2].gender;
			memcpy(&xStaffMake.xF[xStaffMake.sex], &xPaymentAssistant[2].xF, sizeof(xStaffMake.xF[xStaffMake.sex]));
			memcpy(&xStaffMake.xFace[xStaffMake.sex], &xPaymentAssistant[2].xFace, sizeof(xStaffMake.xFace[xStaffMake.sex]));
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		if(inType == STAFFMAKE_INTYPE_INIT)
		{
			sprintf(xStaffMake.strName, "%s","3층점원");
			xStaffMake.sex = 1;
			xShopAssistant[2][0].gender = xStaffMake.sex;
			memcpy(&xShopAssistant[2][0].xF, &xFTemp[xStaffMake.sex], sizeof(xFTemp[xStaffMake.sex]));
			memcpy(&xShopAssistant[2][0].xFace, &xFaceTemp[xStaffMake.sex], sizeof(xFaceTemp[xStaffMake.sex]));
		}
		else
		{
			sprintf(xStaffMake.strName, "%s",xShopAssistant[2][0].strName);
			xStaffMake.sex = xShopAssistant[2][0].gender;
			memcpy(&xStaffMake.xF[xStaffMake.sex], &xShopAssistant[2][0].xF, sizeof(xStaffMake.xF[xStaffMake.sex]));
			memcpy(&xStaffMake.xFace[xStaffMake.sex], &xShopAssistant[2][0].xFace, sizeof(xStaffMake.xFace[xStaffMake.sex]));
		}
		break;
	}
}


void prcTrend()
{
	xTrend.lv[0] = 0;
	xTrend.lv[1] = 21;
	for(int i=0;i<TRENDMAX;i++)
		if(xSaveTemp.lv.oriData >= xTrend.lv[i])
			xTrend.isOpen[i] = TRUE;
	
	if(xWorldMap.state == WORLDMAP_STATE_PLAY)
	{
		if(xLock.isLock[LOCK_TYPE_ORDER] == FALSE && xSaveTemp.orderAmDay != xCalendar.nowDay && xCalendar.nowHour >= 12 && xCalendar.nowHour <= 12)
		{
			xSaveTemp.orderAmDay = xCalendar.nowDay;
			addOrderNpc();
			////////////////////////////////////////////////////////////
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
			////////////////////////////////////////////////////////////
		}
		else if(xLock.isLock[LOCK_TYPE_ORDER] == FALSE && xSaveTemp.orderPmDay != xCalendar.nowDay && xCalendar.nowHour >= 18 && xCalendar.nowHour <= 18)
		{
			xSaveTemp.orderPmDay = xCalendar.nowDay;
			addOrderNpc();
			////////////////////////////////////////////////////////////
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
			////////////////////////////////////////////////////////////
		}
		
		if(xWorldMap.isTuto == FALSE && xLock.isLock[LOCK_TYPE_TREND] == FALSE)
		{
			if(xSaveTemp.trendAmDay != xCalendar.nowDay && xCalendar.nowHour >= 10 && xCalendar.nowHour <= 10)
			{
				xSaveTemp.trendAmDay = xCalendar.nowDay;
				if(xTrend.isOpen[1] == FALSE)
					setTrendTemp(0,0);
				else
					setTrendTemp(ranDom(0, 1),0);
				playSnd(SND_TREND_POPUP);
				trendFreeLoad(TRUE);
				xWorldMap.isTrend = TRUE;
				xWorldMap.trendInType = 0;	//0오전1오후2그외
				xTrend.state = TREND_STATE_NEW;
				////////////////////////////////////////////////////////////
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
				////////////////////////////////////////////////////////////
			}
			else if(xSaveTemp.trendPmDay != xCalendar.nowDay && xCalendar.nowHour >= 20 && xCalendar.nowHour <= 20)
			{
				xSaveTemp.trendPmDay = xCalendar.nowDay;
				if(xTrend.isOpen[1] == FALSE)
					setTrendTemp(0,0);
				else
					setTrendTemp(ranDom(0, 1),0);
				playSnd(SND_TREND_POPUP);
				trendFreeLoad(TRUE);
				xWorldMap.isTrend = TRUE;
				xWorldMap.trendInType = 1;	//0오전1오후2그외
				xTrend.state = TREND_STATE_NEW;
				////////////////////////////////////////////////////////////
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
				////////////////////////////////////////////////////////////
			}
		}
	}
	
	
	xTrend.totalNum = 0;
	for(int i=0;i<TRENDMAX;i++)
	{
		if(xTrend.itemCode[i] != DONT)
		{
			if(xTrend.endTime[i] - xCalendar.nowTime <= 0)
			{
				//종료 처리
				xTrend.itemCode[i] = DONT;				
			}
			else
				xTrend.totalNum++;
		}
	}
	
	
		
}

void addTrend(int slot)
{
	xTrend.endTime[slot] = xCalendar.nowTime+xTrend.timeTemp+(xTrend.timeTemp*xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_TIME]/100);
	xTrend.itemCode[slot] = xTrend.itemCodeTemp;

	xTrend.per[slot] = xTrend.perTemp;
				
	////////////////////////////////////////////////////////////
	xEventQueueNet.slotNum[xEventQueueNet.totalNum] = slot;
	xEventQueueNet.open[xEventQueueNet.totalNum] =  1;
	xEventQueueNet.code[xEventQueueNet.totalNum] = xTrend.itemCode[slot];
	xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//사용안함
	xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xTrend.per[slot];
	xEventQueueNet.time[xEventQueueNet.totalNum] = xTrend.endTime[slot];
	xEventQueueNet.sex[xEventQueueNet.totalNum] = xTrend.per[slot];
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_TREND, TRUE);
	////////////////////////////////////////////////////////////
}


void loginInit()
{
	if(xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == FALSE && xWorldMap.isFriendMap == FALSE && xWorldMap.isLvUp == FALSE)
	{
	}
	else
		return;
	
	xWorldMap.isLoginInit = FALSE;
    
    
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETDEVICEID, FALSE);

    bool isGiftList = false;
    for(int k=0;k<xEventQueueNet.totalNum;k++)
    {
        if(xEventQueueNet.type[k] == NETQUEUE_TYPE_GIFTLIST)
        {
            isGiftList = true;
            break;
        }
    }

    if(isGiftList == false)
    {
        xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
        xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
        xEventQueueNet.slotNum[xEventQueueNet.totalNum] = 0;        
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GIFTLIST, FALSE);
    }

    prcInShopPer();
	
	//개당판매초
	float sellTime = getSellTime();
	
		
	//마지막 판매 시간체크
	M_Int64 exitTime = DONT;
	
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		resetSellTableInfo(floor);
		for(int ss=0;ss<xSell.totalTotal[floor];ss++)
		{
			setMapData(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].interiorCode);
						
			for(int k=0;k<xObj.xObjData[xMap.type][xMap.listNum].slot;k++)
			{
				if(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].code != DONT)
				{
                    
                    //printf("xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].flowTime>>%d\n",xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].flowTime);
					//종료시간 구하기(제일 마지막에 판매된 물품시간으로 판단)
					if(exitTime < xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].flowTime)
                    {
						exitTime = xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].flowTime;
                    }
				}
			}
		}
	}
	
	//판매갯수 : 지난시간 / 개당판매초
	int sellNum = 0;
	
	M_Int64 sleepTime;
	M_Boolean isPrc = FALSE;
	if(exitTime != DONT)
	{
		sleepTime = xCalendar.nowTime - exitTime;
        //추가
        sleepTime = exitTime;
        
        
		
		sleepTime -= 20;
		if(sleepTime < 0)
			sleepTime = 0;
		
		sellNum = sleepTime/sellTime;
	}
    
	xServerSell.sellNumMax = sellNum;
	if(sellNum > 0)
	{
		xServerSell.sellNum = 0;
		xServerSell.sleepTime = sleepTime;
		xServerSell.sellTime = sellTime;
	}
    
    /*
    printf("%d(판매갯수) = %ld(지난시간)/ %f(1개판매초)\n",sellNum,sleepTime,sellTime);
    printf("%d(판매갯수) = %ld(지난시간)/ %f(1개판매초)\n",sellNum,sleepTime,sellTime);
    printf("%d(판매갯수) = %ld(지난시간)/ %f(1개판매초)\n",sellNum,sleepTime,sellTime);
    printf("%d(판매갯수) = %ld(지난시간)/ %f(1개판매초)\n",sellNum,sleepTime,sellTime);
    printf("%d(판매갯수) = %ld(지난시간)/ %f(1개판매초)\n",sellNum,sleepTime,sellTime);
    printf("%d(판매갯수) = %ld(지난시간)/ %f(1개판매초)\n",sellNum,sleepTime,sellTime);
    */
		
	if(sellNum > 0)
	{
		do
		{
			isPrc = FALSE;
			for(int floor=0;floor<xMap.totalFloor;floor++)
			{
				resetSellTableInfo(floor);
				for(int ss=0;ss<xSell.totalTotal[floor];ss++)
				{
					setMapData(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].interiorCode);
					
					for(int k=0;k<xObj.xObjData[xMap.type][xMap.listNum].slot;k++)
					{
						if(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].code != DONT)
						{
							if(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].num > 0)
							{
								if(ranDom(0, 100) < 40)
								{
									xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].num--;
									xServerSell.sellNum++;
									--sellNum;
								}
								isPrc = TRUE;
								if(sellNum <= 0)
									isPrc = FALSE;
							}
						}
					}
				}
			}
		} while (isPrc);
	}
	
	
	if(xServerSell.sellNumMax != sellNum)
		xServerSell.isState = TRUE;
				

	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		resetSellTableInfo(floor);
		for(int ss=0;ss<xSell.totalTotal[floor];ss++)
		{
			setMapData(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].interiorCode);
			
			for(int k=0;k<xObj.xObjData[xMap.type][xMap.listNum].slot;k++)
			{
				if(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].code != DONT)
				{
                    xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].flowTime = 0;
					xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].isUpdata = TRUE;
				}
			}
		}
	}
	
	//정보 업데이트
	////////////////////////////////////////////////////////////////////////////
	xSellTableUpdata.sellUpdataTime = SELLTABLEUPDATATIME;
	/////////////////////////////////////////////////////////////////////////////
}

void initMenuOut()
{
	resetDoor();
	
	for(int i=0;i<SHOPNPCMAX;i++)
		xShopNpc[i].state = SHOPNPC_STATE_DONT;

	int startX = xWorldMap.doorMakeX - xMap.shopPointX;
	int startY = xWorldMap.doorMakeY - xMap.shopPointY;
	int endX;
	int endY;
	
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		resetChair(floor);
		for(int i=0;i<xChairInfo[floor].totalNum;i++)
		{
			xChairInfo[floor].isAstarErr[i] = FALSE;
			setMapData(xChairInfo[floor].interiorCode[i]);
			
			if(xMap.rever == 0)
			{
				for(int h=0;h < xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
				{
					endX = xChairInfo[floor].x[i]-xMap.shopPointX+1;
					endY = xChairInfo[floor].y[i]-xMap.shopPointY+h;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xChairInfo[floor].isAstarErr[i] = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xChairInfo[floor].isAstarErr[i] = TRUE;
						break;
					}
				}
			}
			else
			{
				for(int w=0;w < xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
				{
					endX = xChairInfo[floor].x[i]-xMap.shopPointX+w;
					endY = xChairInfo[floor].y[i]-xMap.shopPointY+1;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xChairInfo[floor].isAstarErr[i] = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xChairInfo[floor].isAstarErr[i] = TRUE;
						break;
					}
				}
			}
		}
	}
		
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		resetFittingRoomInfo(floor);
		for(int ff=0;ff<FITTINGROOMINFOMAX;ff++)
		{
			xFittingRoomInfo[floor].state[ff] = FITTINGROOMINFO_STATE_WAIT;
		}
		
		for(int ff=0;ff<SHOWWINDOWINFOMAX;ff++)
		{
			xShowWindowInfo[floor][ff].state = SHOWWINDOWINFO_STATE_WAIT;

		}
		resetFittingRoomInfo(floor);
		
		xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_WAIT;
		xPaymentAssistant[floor].totalSlot = 0;
	}
			
	//판매대 사용유무 결정
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		resetSellTableInfo(floor);
		
		for(int ss=0;ss<xSell.totalTotal[floor];ss++)
		{
			setMapData(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].interiorCode);
			
			xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].isAstarErr = FALSE;
			if(xMap.rever == 0)
			{
				for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
				{
					endX = xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].x-xMap.shopPointX+1;
					endY = xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].y-xMap.shopPointY+h;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].isAstarErr = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].isAstarErr = TRUE;
						break;
					}
				}
			}
			else
			{
				for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
				{
					endX = xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].x-xMap.shopPointX+w;
					endY = xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].y-xMap.shopPointY+1;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].isAstarErr = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].isAstarErr = TRUE;
						break;
					}
				}
			}
		}
	}

	//피팅룸 사용유무 결정
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		for(int ss=0;ss<xFittingRoomInfo[floor].totalNumAll;ss++)
		{
			setMapData(xFittingRoomInfo[floor].codeNum[ss]);
			xFittingRoomInfo[floor].isAstarErr[ss] = FALSE;
			if(xMap.rever == 0)
			{
				for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
				{
					endX = xFittingRoomInfo[floor].x[ss]-xMap.shopPointX+1;
					endY = xFittingRoomInfo[floor].y[ss]-xMap.shopPointY+h;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xFittingRoomInfo[floor].isAstarErr[ss] = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xFittingRoomInfo[floor].isAstarErr[ss] = TRUE;
						break;
					}
				}
			}
			else
			{
				for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
				{
					endX = xFittingRoomInfo[floor].x[ss]-xMap.shopPointX+w;
					endY = xFittingRoomInfo[floor].y[ss]-xMap.shopPointY+1;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xFittingRoomInfo[floor].isAstarErr[ss] = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xFittingRoomInfo[floor].isAstarErr[ss] = TRUE;
						break;
					}
				}
			}
		}
	}

	//쇼윈도 사용유무결정
	resetShowWindowInfo();
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		for(int ss=0;ss<xFitting.totalShowWindow[floor];ss++)
		{
			setMapData(xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].interiorCode);
			xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].isAstarErr = FALSE;
			if(xMap.rever == 0)
			{
				for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
				{
					endX = xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].x-xMap.shopPointX+2;
					endY = xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].y-xMap.shopPointY+h;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].isAstarErr = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].isAstarErr = TRUE;
						break;
					}
				}
			}
			else
			{
				for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
				{
					endX = xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].x-xMap.shopPointX+w;
					endY = xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].y-xMap.shopPointY+2;
					if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
					{
						xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].isAstarErr = TRUE;
						break;
					}
					else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
					{
						xShowWindowInfo[floor][xFitting.showWindowSlotNum[floor][ss]].isAstarErr = TRUE;
						break;
					}
				}
			}		
		}
	}

	//계산대
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		resetPayMentInfo(floor);
		setMapData(xPayMentInfo[floor].codeNum);
		xPayMentInfo[floor].isAstarErr = FALSE;
		if(xMap.rever == 0)
		{
			for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
			{
				endX = xPayMentInfo[floor].x-xMap.shopPointX+1;
				endY = xPayMentInfo[floor].y-xMap.shopPointY+h;
				if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
				{
					xPayMentInfo[floor].isAstarErr = TRUE;
					break;
				}
				else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
				{
					xPayMentInfo[floor].isAstarErr = TRUE;
					break;
				}
			}
		}
		else
		{
			for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
			{
				endX = xPayMentInfo[floor].x-xMap.shopPointX+w;
				endY = xPayMentInfo[floor].y-xMap.shopPointY+1;
				if(xMap.shopData[floor][MAP_TYPE_OBJ][endX][endY] == TRUE)
				{
					xPayMentInfo[floor].isAstarErr = TRUE;
					break;
				}
				else if(setAstar(startX,startY,endX,endY , MAP_TYPE_OBJ,floor) == FALSE)
				{
					xPayMentInfo[floor].isAstarErr = TRUE;
					break;
				}
			}
		}
	}
		
	//인테리어 이미지 해제 하기
	freeInterior();
}


void freeInterior()
{
	
	for(int type=0;type<OBJMAX;type++)
	{
		for(int listNum=0;listNum<OBJDATAMAX;listNum++)
		{
			if(xObj.isImgUse[type][listNum] == FALSE && xObj.img[type][listNum].texture != NULL)

			{
				freeImg(&xObj.img[type][listNum]);
				
				switch(type)
				{
				case INTERIOR_TYPE_WALLTILE:		//벽지일 경우 추가 로딩
					freeImg(&xObj.imgWallTop[listNum]);
					break;
				case INTERIOR_TYPE_FITTINGROOM:		//피팅룸일경우 열리는경우까지 로딩해준
					freeImg(&xObj.imgFittingRoomOpen[listNum]);
					break;
				case INTERIOR_TYPE_SHOWWINDOW:		//쇼윈도우는 뚜껑
					freeImg(&xObj.imgShowWindowTop[listNum]);
					break;
				case INTERIOR_TYPE_HANGER:			//옷걸이일경우 추가이미지 로딩해준다
					freeImg(&xObj.imgHangerLayer[listNum]);
					break;
				case INTERIOR_TYPE_ACCESSORY:		//진열일경우 추가이미지 로딩해준다
					freeImg(&xObj.imgAccessoryLayer[listNum][0]);
					freeImg(&xObj.imgAccessoryLayer[listNum][1]);
					freeImg(&xObj.imgAccessoryLayer[listNum][2]);
					break;
				case INTERIOR_TYPE_DOOR:
					freeImg(&xObj.imgDoorOpen[listNum]);
					break;
				}
			}
		}
	}
		
	for(int i=0;i<OBJMAX;i++)
		for(int j=0;j<OBJDATAMAX;j++)
			xObj.isImgUse[i][j] = FALSE;
}

void freeFashion()
{
	int fashionType;
	int fashionList;
				
	//판매슬롯 검사	
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		for(int i=0;i<xSell.totalTotal[floor];i++)
		{
			for(int j=0;j<SELLSLOTMAX;j++)
			{
				if(xSellTableInfo[floor][i].xSlot[j].code != DONT)
				{
					fashionType = xSellTableInfo[floor][i].xSlot[j].code/1000;
					fashionList = xSellTableInfo[floor][i].xSlot[j].code%1000;
					isFreeFittingF[fashionType][fashionList] = TRUE;
				}
			}
		}
	}
		
	for(int imgType=0;imgType<FASHIONDATATYPEMAX;imgType++)
	{
		for(int imgList=0;imgList<FASHIONDATAMAX;imgList++)
		{
			if(isImgFittingF[imgType][imgList] == TRUE && isFreeFittingF[imgType][imgList] == FALSE)
			{
				isImgFittingF[imgType][imgList] = FALSE;
								
				freeImg(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingF(imgType,imgList,12,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingF(imgType,imgList,13,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer));
				
				freeImg(getImgFittingFInOut(imgType,imgList,1,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingFInOut(imgType,imgList,3,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingFInOut(imgType,imgList,5,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingFInOut(imgType,imgList,6,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingFInOut(imgType,imgList,11,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingFInOut(imgType,imgList,12,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingFInOut(imgType,imgList,13,xFashionData[imgType][imgList].layer));
				freeImg(getImgFittingFInOut(imgType,imgList,17,xFashionData[imgType][imgList].layer));
				
				if(imgType == F_TYPE_BAG)
				{
					freeImg(&imgFittingFBackPack[imgList]);
				}
				
				freeImg(&imgFittingItem[imgType][imgList]);
			}
		}
	}
	
	for(int imgType=0;imgType<FASHIONDATATYPEMAX;imgType++)
		for(int imgList=0;imgList<FASHIONDATAMAX;imgList++)
			isFreeFittingF[imgType][imgList] = FALSE;
			
	for(int i=0;i<FACEDATAMAX;i++)
		freeImg(&imgFaceF[i]);
	
	for(int i=0;i<HAIRDATAMAX;i++)
	{
		freeImg(&imgHairF[i][0]);
		freeImg(&imgHairF[i][1]);
	}
}

void faceHairImgFree()
{
	for(int i=0;i<xModel.totalRanDomSlot;i++)
	{
		freeImg(&imgHairF_Model[xModel.ranDomSlot[i]][0]);
		freeImg(&imgHairF_Model[xModel.ranDomSlot[i]][1]);
		freeImg(&imgFaceF_Model[xModel.ranDomSlot[i]]);
	}
}

void freeFashionFLayer()
{
	for(int imgType=0;imgType<FASHIONDATATYPEMAX;imgType++)
	{
		for(int imgList=0;imgList<FASHIONDATAMAX;imgList++)
		{
			if(isImgFLayer[imgType][imgList] == TRUE)
			{
				isImgFLayer[imgType][imgList] = FALSE;
				for(int f=0;f<FASHIONDATALAYERMAX;f++)
				{
					//앞
					freeImg(&imgFLayer[imgType][imgList][f][ACT_FRONT]);
					freeImg(&imgFLayerSub[imgType][imgList][f][ACT_FRONT]);
					//뒤
					freeImg(&imgFLayer[imgType][imgList][f][ACT_BACK]);
				}
			}
		}
	}
}

void npcSet()
{
	int lv = 0;
	
	freeFashion();
	//freeFashionFLayer();
	
	xNpcSet.totalNum[0] = 0;
	xNpcSet.totalNum[1] = 0;
	
	/*
	if(xWorldMap.isFriendMap == TRUE)
		lv = xFriendMap.lv;
	else
		lv = xSaveTemp.lv.oriData;
	 */
	
	lv = xSaveTemp.lv.oriData;

	
	for(int i=0;i<xNpcSet.total;i++)
	{
		if(lv >= xNpcSet.lvMin[i] && lv <= xNpcSet.lvMax[i])
		{
			xNpcSet.slot[xNpcSet.gender[i]][xNpcSet.totalNum[xNpcSet.gender[i]]] = i;
			xNpcSet.totalNum[xNpcSet.gender[i]]++;
		}
	}
	
	
	//헤어
	int totalNum[2];
	int slot[2][64];
	totalNum[0] = 0;
	totalNum[1] = 0;
	
	for(int i=0;i<xWorldMap.totalHairData;i++)
	{
		if(xHairData[i].useType == 1)	//월드맵 헤어
		{
			slot[xHairData[i].gender][totalNum[xHairData[i].gender]] = i;
			totalNum[xHairData[i].gender]++;
		}
	}
	xNpcSet.hairTotalNum[0] = 10;
	xNpcSet.hairTotalNum[1] = 5;
	
	
	for(int i=0;i<xNpcSet.hairTotalNum[0];i++)
	{
		xNpcSet.hairCode[0][i] = slot[0][ranDom(0, totalNum[0]-1)];
		drawHair(0,0,xNpcSet.hairCode[0][i],0,0,0);
	}
	for(int i=0;i<xNpcSet.hairTotalNum[1];i++)
	{
		
		xNpcSet.hairCode[1][i] = slot[1][ranDom(0, totalNum[1]-1)];
		drawHair(0,0,xNpcSet.hairCode[1][i],0,0,0);
	}
}

void npcSetImgLoad(int k)
{
	XFITTINGLAYER xFTemp;
	
	for(int i=0;i<SPRIT_IMGLAYERMAX;i++)
		xFTemp.code[i] = DONT;
	
	for(int c=0;c<2;c++)
	{
		for(int i=0;i<xNpcSet.totalNum[c];i++)
		{
			if(xNpcSet.code[xNpcSet.slot[c][i]][k] != DONT)
			{
				setMapData(xNpcSet.code[xNpcSet.slot[c][i]][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
				xFTemp.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
				setSpritF(&xSpritDrawSub,&xFTemp,ACT_FRONT);
			}
		}
	}
}

void initDragScroll()
{
    xClubShop.xDragScroll.touchXpos = DONT;
    xClubShop.xDragScroll.touchYpos = DONT;
    xClubShop.xDragScroll.touchXposBefore = DONT;
    xClubShop.xDragScroll.touchYposBefore = DONT;
    xClubShop.xDragScroll.selectNum = 0;
    xClubShop.xDragScroll.pos = 0;
    xClubShop.xDragScroll.speed = 0;
    
    xClubStorage.xDragScroll.touchXpos = DONT;
    xClubStorage.xDragScroll.touchYpos = DONT;
    xClubStorage.xDragScroll.touchXposBefore = DONT;
    xClubStorage.xDragScroll.touchYposBefore = DONT;
    xClubStorage.xDragScroll.selectNum = 0;
    xClubStorage.xDragScroll.pos = 0;
    xClubStorage.xDragScroll.speed = 0;

    xClubShopGift.xDragScroll.touchXpos = DONT;
    xClubShopGift.xDragScroll.touchYpos = DONT;
    xClubShopGift.xDragScroll.touchXposBefore = DONT;
    xClubShopGift.xDragScroll.touchYposBefore = DONT;
    xClubShopGift.xDragScroll.selectNum = 0;
    xClubShopGift.xDragScroll.pos = 0;
    xClubShopGift.xDragScroll.speed = 0;
    
    
    xFashionWeekRank.xDragScroll.touchXpos = DONT;
    xFashionWeekRank.xDragScroll.touchYpos = DONT;
    xFashionWeekRank.xDragScroll.touchXposBefore = DONT;
    xFashionWeekRank.xDragScroll.touchYposBefore = DONT;
    xFashionWeekRank.xDragScroll.selectNum = 0;
    xFashionWeekRank.xDragScroll.pos = 0;
    xFashionWeekRank.xDragScroll.speed = 0;
    
    
    for(int k=0;k<3;k++)
    {
        xClubLobby.xDragScroll[k].touchXpos = DONT;
        xClubLobby.xDragScroll[k].touchYpos = DONT;
        xClubLobby.xDragScroll[k].touchXposBefore = DONT;
        xClubLobby.xDragScroll[k].touchYposBefore = DONT;
        xClubLobby.xDragScroll[k].selectNum = 0;
        xClubLobby.xDragScroll[k].pos = 0;
        xClubLobby.xDragScroll[k].speed = 0;
    }
    
    
    
    
    
    
    
    xClubLobby.xDragScrollHistory.touchXpos = DONT;
    xClubLobby.xDragScrollHistory.touchYpos = DONT;
    xClubLobby.xDragScrollHistory.touchXposBefore = DONT;
    xClubLobby.xDragScrollHistory.touchYposBefore = DONT;
    xClubLobby.xDragScrollHistory.selectNum = 0;
    xClubLobby.xDragScrollHistory.pos = 0;
    xClubLobby.xDragScrollHistory.speed = 0;
    
    
    
    
    xClubList.xDragScroll.touchXpos = DONT;
    xClubList.xDragScroll.touchYpos = DONT;
    xClubList.xDragScroll.touchXposBefore = DONT;
    xClubList.xDragScroll.touchYposBefore = DONT;
    xClubList.xDragScroll.selectNum = 0;
    xClubList.xDragScroll.pos = 0;
    xClubList.xDragScroll.speed = 0;
    
    
    
    xAmuletSetting.xDragScroll.touchXpos = DONT;
    xAmuletSetting.xDragScroll.touchYpos = DONT;
    xAmuletSetting.xDragScroll.touchXposBefore = DONT;
    xAmuletSetting.xDragScroll.touchYposBefore = DONT;
    xAmuletSetting.xDragScroll.selectNum = 0;
    xAmuletSetting.xDragScroll.pos = 0;
    xAmuletSetting.xDragScroll.speed = 0;
    
    
    
    
    
    xJewelQuest.xDragScroll.touchXpos = DONT;
    xJewelQuest.xDragScroll.touchYpos = DONT;
    xJewelQuest.xDragScroll.touchXposBefore = DONT;
    xJewelQuest.xDragScroll.touchYposBefore = DONT;
    xJewelQuest.xDragScroll.selectNum = 0;
    xJewelQuest.xDragScroll.pos = 0;
    xJewelQuest.xDragScroll.speed = 0;
    
    
    
    
    
    xHelpList.xDragScroll.touchXpos = DONT;
    xHelpList.xDragScroll.touchYpos = DONT;
    xHelpList.xDragScroll.touchXposBefore = DONT;
    xHelpList.xDragScroll.touchYposBefore = DONT;
    xHelpList.xDragScroll.selectNum = 0;
    xHelpList.xDragScroll.pos = 0;
    xHelpList.xDragScroll.speed = 0;
    
    
    
    
    xRivalWorldMap.xDragScroll.touchXpos = DONT;
    xRivalWorldMap.xDragScroll.touchYpos = DONT;
    xRivalWorldMap.xDragScroll.touchXposBefore = DONT;
    xRivalWorldMap.xDragScroll.touchYposBefore = DONT;
    xRivalWorldMap.xDragScroll.selectNum = 0;
    xRivalWorldMap.xDragScroll.pos = 0;
    xRivalWorldMap.xDragScroll.speed = 0;
    
    
    
    
    
    for(int k=0;k<EVENTQUESTMAX;k++)
    {
        xEventQuest.xDragScroll[k].touchXpos = DONT;
        xEventQuest.xDragScroll[k].touchYpos = DONT;
        xEventQuest.xDragScroll[k].touchXposBefore = DONT;
        xEventQuest.xDragScroll[k].touchYposBefore = DONT;
        xEventQuest.xDragScroll[k].selectNum = 0;
        xEventQuest.xDragScroll[k].pos = 0;
        xEventQuest.xDragScroll[k].speed = 0;
    }
    
    
    
    
    
    
    xEventQuest.xDragScrollTab.touchXpos = DONT;
    xEventQuest.xDragScrollTab.touchYpos = DONT;
    xEventQuest.xDragScrollTab.touchXposBefore = DONT;
    xEventQuest.xDragScrollTab.touchYposBefore = DONT;
    xEventQuest.xDragScrollTab.selectNum = 0;
    xEventQuest.xDragScrollTab.pos = 0;
    xEventQuest.xDragScrollTab.speed = 0;
    
    
    
    
    
    xMileageShopInfo.xDragScroll.touchXpos = DONT;
    xMileageShopInfo.xDragScroll.touchYpos = DONT;
    xMileageShopInfo.xDragScroll.touchXposBefore = DONT;
    xMileageShopInfo.xDragScroll.touchYposBefore = DONT;
    xMileageShopInfo.xDragScroll.selectNum = 0;
    xMileageShopInfo.xDragScroll.pos = 0;
    xMileageShopInfo.xDragScroll.speed = 0;
    
    
    
    
    xMileageShop.xDragScroll.touchXpos = DONT;
    xMileageShop.xDragScroll.touchYpos = DONT;
    xMileageShop.xDragScroll.touchXposBefore = DONT;
    xMileageShop.xDragScroll.touchYposBefore = DONT;
    xMileageShop.xDragScroll.selectNum = 0;
    xMileageShop.xDragScroll.pos = 0;
    xMileageShop.xDragScroll.speed = 0;

	
	
	
	xDragScrollFriendSlot.touchXpos = DONT;
	xDragScrollFriendSlot.touchYpos = DONT;
	xDragScrollFriendSlot.touchXposBefore = DONT;
	xDragScrollFriendSlot.touchYposBefore = DONT;
	xDragScrollFriendSlot.selectNum = 0;
	xDragScrollFriendSlot.pos = 0;
	xDragScrollFriendSlot.speed = 0;
	
	
	xCashGift.xDragScroll.touchXpos = DONT;
	xCashGift.xDragScroll.touchYpos = DONT;
	xCashGift.xDragScroll.touchXposBefore = DONT;
	xCashGift.xDragScroll.touchYposBefore = DONT;
	xCashGift.xDragScroll.selectNum = 0;
	xCashGift.xDragScroll.pos = 0;
	xCashGift.xDragScroll.speed = 0;
	
	xCollection.xDragScrollTheme.touchXpos = DONT;
	xCollection.xDragScrollTheme.touchYpos = DONT;
	xCollection.xDragScrollTheme.touchXposBefore = DONT;
	xCollection.xDragScrollTheme.touchYposBefore = DONT;
	xCollection.xDragScrollTheme.selectNum = 0;
	xCollection.xDragScrollTheme.pos = 0;
	xCollection.xDragScrollTheme.speed = 0;
	
	xCollection.xDragScroll.touchXpos = DONT;
	xCollection.xDragScroll.touchYpos = DONT;
	xCollection.xDragScroll.touchXposBefore = DONT;
	xCollection.xDragScroll.touchYposBefore = DONT;
	xCollection.xDragScroll.selectNum = 0;
	xCollection.xDragScroll.pos = 0;
	xCollection.xDragScroll.speed = 0;
	
	
	xSaleShop.xDragScroll.touchXpos = DONT;
	xSaleShop.xDragScroll.touchYpos = DONT;
	xSaleShop.xDragScroll.touchXposBefore = DONT;
	xSaleShop.xDragScroll.touchYposBefore = DONT;
	xSaleShop.xDragScroll.selectNum = 0;
	xSaleShop.xDragScroll.pos = 0;
	xSaleShop.xDragScroll.speed = 0;
	
	
	xModel.xDragScrollFriendShop.touchXpos = DONT;
	xModel.xDragScrollFriendShop.touchYpos = DONT;
	xModel.xDragScrollFriendShop.touchXposBefore = DONT;
	xModel.xDragScrollFriendShop.touchYposBefore = DONT;
	xModel.xDragScrollFriendShop.selectNum = 0;
	xModel.xDragScrollFriendShop.pos = 0;
	xModel.xDragScrollFriendShop.speed = 0;
	
	xFashionShow.xDragScrollSelectModel.touchXpos = DONT;
	xFashionShow.xDragScrollSelectModel.touchYpos = DONT;
	xFashionShow.xDragScrollSelectModel.touchXposBefore = DONT;
	xFashionShow.xDragScrollSelectModel.touchYposBefore = DONT;
	xFashionShow.xDragScrollSelectModel.selectNum = 0;
	xFashionShow.xDragScrollSelectModel.pos = 0;
	xFashionShow.xDragScrollSelectModel.speed = 0;
	
	
	
	xFashionShow.xDragScrollRank.touchXpos = DONT;
	xFashionShow.xDragScrollRank.touchYpos = DONT;
	xFashionShow.xDragScrollRank.touchXposBefore = DONT;
	xFashionShow.xDragScrollRank.touchYposBefore = DONT;
	xFashionShow.xDragScrollRank.selectNum = 0;
	xFashionShow.xDragScrollRank.pos = 0;
	xFashionShow.xDragScrollRank.speed = 0;
	
	xNoticeWorldMap.xDragScroll.touchXpos = DONT;
	xNoticeWorldMap.xDragScroll.touchYpos = DONT;
	xNoticeWorldMap.xDragScroll.touchXposBefore = DONT;
	xNoticeWorldMap.xDragScroll.touchYposBefore = DONT;
	xNoticeWorldMap.xDragScroll.selectNum = 0;
	xNoticeWorldMap.xDragScroll.pos = 0;
	xNoticeWorldMap.xDragScroll.speed = 0;
	
	
	xExtensionShop.xDragScroll.touchXpos = DONT;
	xExtensionShop.xDragScroll.touchYpos = DONT;
	xExtensionShop.xDragScroll.touchXposBefore = DONT;
	xExtensionShop.xDragScroll.touchYposBefore = DONT;
	xExtensionShop.xDragScroll.selectNum = 0;
	xExtensionShop.xDragScroll.pos = 0;
	xExtensionShop.xDragScroll.speed = 0;
	
	
	xOrder.xDragScroll.touchXpos = DONT;
	xOrder.xDragScroll.touchYpos = DONT;
	xOrder.xDragScroll.touchXposBefore = DONT;
	xOrder.xDragScroll.touchYposBefore = DONT;
	xOrder.xDragScroll.selectNum = 0;
	xOrder.xDragScroll.pos = 0;
	xOrder.xDragScroll.speed = 0;
	
	
	xInterior.xDragScrollTeam.touchXpos = DONT;
	xInterior.xDragScrollTeam.touchYpos = DONT;
	xInterior.xDragScrollTeam.touchXposBefore = DONT;
	xInterior.xDragScrollTeam.touchYposBefore = DONT;
	xInterior.xDragScrollTeam.selectNum = 0;
	xInterior.xDragScrollTeam.pos = 0;
	xInterior.xDragScrollTeam.speed = 0;
	
	xNotice.xDragScroll.touchXpos = DONT;
	xNotice.xDragScroll.touchYpos = DONT;
	xNotice.xDragScroll.touchXposBefore = DONT;
	xNotice.xDragScroll.touchYposBefore = DONT;
	xNotice.xDragScroll.selectNum = 0;
	xNotice.xDragScroll.pos = 0;
	xNotice.xDragScroll.speed = 0;
	
		
		
	xTrendMakerModelInfo.xDragScroll.touchXpos = DONT;
	xTrendMakerModelInfo.xDragScroll.touchYpos = DONT;
	xTrendMakerModelInfo.xDragScroll.touchXposBefore = DONT;
	xTrendMakerModelInfo.xDragScroll.touchYposBefore = DONT;
	xTrendMakerModelInfo.xDragScroll.selectNum = 0;
	xTrendMakerModelInfo.xDragScroll.pos = 0;
	xTrendMakerModelInfo.xDragScroll.speed = 0;
	

	
	xModelUpGrade.xDragScrollS.touchXpos = DONT;
	xModelUpGrade.xDragScrollS.touchYpos = DONT;
	xModelUpGrade.xDragScrollS.touchXposBefore = DONT;
	xModelUpGrade.xDragScrollS.touchYposBefore = DONT;
	xModelUpGrade.xDragScrollS.selectNum = 0;
	xModelUpGrade.xDragScrollS.pos = 0;
	xModelUpGrade.xDragScrollS.speed = 0;
	
	
	xModel.xDragScrollS.touchXpos = DONT;
	xModel.xDragScrollS.touchYpos = DONT;
	xModel.xDragScrollS.touchXposBefore = DONT;
	xModel.xDragScrollS.touchYposBefore = DONT;
	xModel.xDragScrollS.selectNum = 0;
	xModel.xDragScrollS.pos = 0;
	xModel.xDragScrollS.speed = 0;
	
	xQuestInfo.xDragScrollSlot.touchXpos = DONT;
	xQuestInfo.xDragScrollSlot.touchYpos = DONT;
	xQuestInfo.xDragScrollSlot.touchXposBefore = DONT;
	xQuestInfo.xDragScrollSlot.touchYposBefore = DONT;
	xQuestInfo.xDragScrollSlot.selectNum = 0;
	xQuestInfo.xDragScrollSlot.pos = 0;
	xQuestInfo.xDragScrollSlot.speed = 0;
	
	
	xGiftShop.xDragScroll.touchXpos = DONT;
	xGiftShop.xDragScroll.touchYpos = DONT;
	xGiftShop.xDragScroll.touchXposBefore = DONT;
	xGiftShop.xDragScroll.touchYposBefore = DONT;
	xGiftShop.xDragScroll.selectNum = 0;
	xGiftShop.xDragScroll.pos = 0;
	xGiftShop.xDragScroll.speed = 0;
	
	
	xMail.xDragScrollSlot.touchXpos = DONT;
	xMail.xDragScrollSlot.touchYpos = DONT;
	xMail.xDragScrollSlot.touchXposBefore = DONT;
	xMail.xDragScrollSlot.touchYposBefore = DONT;
	xMail.xDragScrollSlot.selectNum = 0;
	xMail.xDragScrollSlot.pos = 0;
	xMail.xDragScrollSlot.speed = 0;

	
	xFriend.xDragScrollOrderList.touchXpos = DONT;
	xFriend.xDragScrollOrderList.touchYpos = DONT;
	xFriend.xDragScrollOrderList.touchXposBefore = DONT;
	xFriend.xDragScrollOrderList.touchYposBefore = DONT;
	xFriend.xDragScrollOrderList.selectNum = 0;
	xFriend.xDragScrollOrderList.pos = 0;
	xFriend.xDragScrollOrderList.speed = 0;
	
	xFriend.xDragScrollRanDomList.touchXpos = DONT;
	xFriend.xDragScrollRanDomList.touchYpos = DONT;
	xFriend.xDragScrollRanDomList.touchXposBefore = DONT;
	xFriend.xDragScrollRanDomList.touchYposBefore = DONT;
	xFriend.xDragScrollRanDomList.selectNum = 0;
	xFriend.xDragScrollRanDomList.pos = 0;
	xFriend.xDragScrollRanDomList.speed = 0;	
	
	
	
	xDragScrollCarStorageSlot.touchXpos = DONT;
	xDragScrollCarStorageSlot.touchYpos = DONT;
	xDragScrollCarStorageSlot.touchXposBefore = DONT;
	xDragScrollCarStorageSlot.touchYposBefore = DONT;
	xDragScrollCarStorageSlot.selectNum = 0;
	xDragScrollCarStorageSlot.pos = 0;
	xDragScrollCarStorageSlot.speed = 0;
	
	xDragScrollDeliverySlot.touchXpos = DONT;
	xDragScrollDeliverySlot.touchYpos = DONT;
	xDragScrollDeliverySlot.touchXposBefore = DONT;
	xDragScrollDeliverySlot.touchYposBefore = DONT;
	xDragScrollDeliverySlot.selectNum = 0;
	xDragScrollDeliverySlot.pos = 0;
	xDragScrollDeliverySlot.speed = 0;
	
	xDragScrollDeliverySlot.touchXpos = DONT;
	xDragScrollDeliverySlot.touchYpos = DONT;
	xDragScrollDeliverySlot.touchXposBefore = DONT;
	xDragScrollDeliverySlot.touchYposBefore = DONT;
	xDragScrollDeliverySlot.selectNum = 0;
	xDragScrollDeliverySlot.pos = 0;
	xDragScrollDeliverySlot.speed = 0;
	
	xShop.xDragScroll.touchXpos = DONT;
	xShop.xDragScroll.touchYpos = DONT;
	xShop.xDragScroll.touchXposBefore = DONT;
	xShop.xDragScroll.touchYposBefore = DONT;
	xShop.xDragScroll.selectNum = 0;
	xShop.xDragScroll.pos = 0;
	xShop.xDragScroll.speed = 0;
	

	xMiniGame.xDragScroll.touchXpos = DONT;
	xMiniGame.xDragScroll.touchYpos = DONT;
	xMiniGame.xDragScroll.touchXposBefore = DONT;
	xMiniGame.xDragScroll.touchYposBefore = DONT;
	xMiniGame.xDragScroll.selectNum = 0;
	xMiniGame.xDragScroll.pos = 0;
	xMiniGame.xDragScroll.speed = 0;
	
		
	xDragScrollInteriorS.touchXpos = DONT;
	xDragScrollInteriorS.touchYpos = DONT;
	xDragScrollInteriorS.touchXposBefore = DONT;
	xDragScrollInteriorS.touchYposBefore = DONT;
	xDragScrollInteriorS.selectNum = 0;
	xDragScrollInteriorS.pos = 0;
	xDragScrollInteriorS.speed = 0;
	
	xDragScrollProductionSlot.touchXpos = DONT;
	xDragScrollProductionSlot.touchYpos = DONT;
	xDragScrollProductionSlot.touchXposBefore = DONT;
	xDragScrollProductionSlot.touchYposBefore = DONT;
	xDragScrollProductionSlot.selectNum = 0;
	xDragScrollProductionSlot.pos = 0;
	xDragScrollProductionSlot.speed = 0;
	
	
	xDragScrollCatalogS.touchXpos = DONT;
	xDragScrollCatalogS.touchYpos = DONT;
	xDragScrollCatalogS.touchXposBefore = DONT;
	xDragScrollCatalogS.touchYposBefore = DONT;
	xDragScrollCatalogS.selectNum = 0;
	xDragScrollCatalogS.pos = 0;
	xDragScrollCatalogS.speed = 0;
	
	xDragScrollSellSelectItemSlot.touchXpos = DONT;
	xDragScrollSellSelectItemSlot.touchYpos = DONT;
	xDragScrollSellSelectItemSlot.touchXposBefore = DONT;
	xDragScrollSellSelectItemSlot.touchYposBefore = DONT;
	xDragScrollSellSelectItemSlot.selectNum = 0;
	xDragScrollSellSelectItemSlot.pos = 0;
	xDragScrollSellSelectItemSlot.speed = 0;
	
	xDragScrollFittingS.touchXpos = DONT;
	xDragScrollFittingS.touchYpos = DONT;
	xDragScrollFittingS.touchXposBefore = DONT;
	xDragScrollFittingS.touchYposBefore = DONT;
	xDragScrollFittingS.selectNum = 0;
	xDragScrollFittingS.pos = 0;
	xDragScrollFittingS.speed = 0;
	
	xStaff.xDragScrollPopupItemSlot.touchXpos = DONT;
	xStaff.xDragScrollPopupItemSlot.touchYpos = DONT;
	xStaff.xDragScrollPopupItemSlot.touchXposBefore = DONT;
	xStaff.xDragScrollPopupItemSlot.touchYposBefore = DONT;
	xStaff.xDragScrollPopupItemSlot.selectNum = 0;
	xStaff.xDragScrollPopupItemSlot.pos = 0;
	xStaff.xDragScrollPopupItemSlot.speed = 0;
	
	xLvUp.xDragScroll.touchXpos = DONT;
	xLvUp.xDragScroll.touchYpos = DONT;
	xLvUp.xDragScroll.touchXposBefore = DONT;
	xLvUp.xDragScroll.touchYposBefore = DONT;
	xLvUp.xDragScroll.selectNum = 0;
	xLvUp.xDragScroll.pos = 0;
	xLvUp.xDragScroll.speed = 0;
    
    xProduction_FP.xDragScrollProductionS.touchXpos=DONT;
    xProduction_FP.xDragScrollProductionS.touchYpos=DONT;
    xProduction_FP.xDragScrollProductionS.touchXposBefore=DONT;
    xProduction_FP.xDragScrollProductionS.touchYposBefore=DONT;
    xProduction_FP.xDragScrollProductionS.selectNum=0;
    xProduction_FP.xDragScrollProductionS.pos=0;
    xProduction_FP.xDragScrollProductionS.speed=0;
    
}

void setMapPosScale(int type, int param1, int param2,int touchId)
{
	int movePointX;
	int movePointY;
	
	if(touchType == USER_POINT_PRESS_EVENT)
	{		
		//맵중심좌표 변경
		xMap.pointClipX = xTouch.xPos;
		xMap.pointClipY = xTouch.yPos;			
	}
	else if(touchType == USER_POINT_MOVE_EVENT)
	{
		//맵중심좌표 변경
		if(touchId == 0 && touchTotal == 1 && xMap.pointClipX != DONT)
		{
			//if(xWorldMap.fscale >= 0.35)
			movePointX = (xTouch.xPos - xMap.pointClipX)*(/*스코를속도*/1.6f+(1.0f-xWorldMap.fscale));
			movePointY = (xTouch.yPos - xMap.pointClipY)*(/*스코를속도*/1.6f+(1.0f-xWorldMap.fscale));
			xMap.pointX += movePointX;
			xMap.pointY += movePointY;
			xInterior.buildMapMoveXpos += movePointX;
			xInterior.buildMapMoveYpos += movePointY;
			xMap.pointClipX = xTouch.xPos;
			xMap.pointClipY = xTouch.yPos;
		}
	}
	else if(touchType == USER_POINT_RELEASE_EVENT)
	{		
		//맵중심좌표 변경
		xMap.pointClipX = DONT;
		xMap.pointClipY = DONT;
		touchScaleCnt = 0;
	}
	setScaleRotLimit();
}

void WorldMapCletEvent(int type, int param1, int param2,int touchId)
{
	M_Boolean isKeyEvent;
	int keyEventNum;
	
	M_Boolean isSelectSlot;
	int selectSlotNum;
	
	M_Boolean isSelectInteriorS;
	int selectInteriorSNum;
	
	M_Boolean isSelectCatalogS;
	int selectCatalogSNum;
		
	M_Boolean isSellSlot;
	int selectSellSlot;
	
	M_Boolean isSellSelectItemSlot;
	int selectSellSelectItemSlot;

    
    
    
    
#if(ISCHEAT == TRUE)
    //#if(SERVER_TYPE == SEVER_TYPE_DEV)
        //if(xWorldMap.isExternal == TRUE)
        {
            if(touchType == USER_POINT_PRESS_EVENT)
            {
                if(param1 < 50 && param2 > lcdH-50)
                {
                    /*
                    xHotDeal.isOpen = true;
                    xHotDeal.isReset = true;
                    xHotDeal.remainTime = 3000;
                    
                    initSecurity(&xSaveTemp.cash, 2000);
                     */
                    //
                    
                    /*
                    addOrderNpc();
                    int candy = 1;
                    
                    setTired(candy);
                    setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_CANDY, candy);
                    
                    setDropIcon(cx, cy,
                                ICON_TYPE_CANDY,candy,
                                DONT, 0,
                                DONT,0);
                    */
                }
            }
        }
    //#endif
#endif
    
    
    
    
    
	
	if(xGame.isHacking == TRUE)
	{
		return;
	}
	
	if(xWorldMap.isSubLoading == TRUE)
	{
		return;
	}
	
	if(xCarPark[xCar.selectCarPark].state == CARPARK_STATE_GO)
		return;
	
	if(xWorldMap.isExtensionEvent == TRUE || xWorldMap.isExtensionEvent_Tile == TRUE || xWorldMap.isExternalWall == TRUE)
		return;
			
	//키누름상태에서 상태 이동
	if(xWorldMap.isKeyReturn == TRUE && type == MH_KEY_RELEASEEVENT)
	{
		xWorldMap.isKeyReturn = FALSE;
		return;
	}
	else if(xWorldMap.isKeyReturn == TRUE)
	{
		return;
	}
	
	if(playState == PLAY_PLAY)
	{
		if(xFriendMap.isPlay == TRUE)
			return;
	}
		
	if(xWorldMap.isKakaoFriendMap_NET == TRUE)
		return;
				
	if(xOrder.isKakaoMessage_Net == TRUE)
		return;
    
    
    if(xEventQuest.isNetLoad == true || xRival.isNetLoad == true)
        return;
    
    
    
    
	
	//스케일 조정
	xTouchS.xPos = getWorldMapPosTouch(xTouch.xPos,cx);
	xTouchS.yPos = getWorldMapPosTouch(xTouch.yPos,cy);
		
	if(xWorldMap.isQuestResult == TRUE)
	{
		if(type == MH_KEY_PRESSEVENT)
		{
			if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{				
				playSnd(SND_MENU_OK);
				
				int point = 0;
				int exp = 0;
				int look = 0;
				int fame = 0;				
				
				for(int i=0;i<3;i++)
				{
					switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
					{
					case QUEST_TYPE_MAIN:
						switch(xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i])
						{
						case DONT:
							break;
						case 0:	//골드
							point+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						case 1:	//exp
							exp+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						case 2:	//look
							look+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						case 3:	//의상
								
								
							break;
						case 4:	//인테리어
								inputInventoryInterior(xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]);
								//////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.code[xEventQueueNet.totalNum] = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i];
								xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
								xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
								for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
								{
									if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
										xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
								}
								
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
								//////////////////////////////////////////////////////////////////////////////
							break;
						case 5:	//자동차
							xCar.isOpen[xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]] = TRUE;
							///////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i];
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CAR, TRUE);
							///////////////////////////////////////////////////////////////////
							break;
						case 6:	//모델
							break;
						case 7:	//명성도
							fame+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						}
						break;
					case QUEST_TYPE_NORMAL:
						switch(xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i])
						{
						case DONT:
							break;
						case 0:	//골드
							point+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						case 1:	//exp
							exp+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						case 2:	//look
							look+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						case 3:	//의상
							break;
						case 4:	//인테리어
							inputInventoryInterior(xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i];
							xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}								
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							break;
						case 5:	//자동차
							xCar.isOpen[xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]] = TRUE;
							///////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i];
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CAR, TRUE);
							///////////////////////////////////////////////////////////////////
							break;
						case 6:	//모델
							break;
						case 7:	//명성도
							fame+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
							break;
						}
						break;
					}
				}
				
				if(point > 0)
					setMoney(point);
				if(exp > 0)
					setExp(exp);
				if(look > 0)
					setCash(look);
				if(fame > 0)
					setFame(fame);
							
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
                
                int questTypeTemp = xQuestInfo.xSlot[xQuestInfo.selectSlot].type;
                
                
                
                
                
                
				switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
				{
				case QUEST_TYPE_MAIN:
                        
                    
                    switch(xQuestMain.nowNum)
                    {
                    case 4:
                    case 14:
                    case 23:
                    case 29:
                    case 36:
                    case 41:
                    case 45:
                    case 51:
                    case 55:
                    case 58:
                    case 61:
                    case 65:
                    case 68:
                    case 70:
                        sprintf(xRocks.strTemp, "%s(LV.%d)",xQuestDataMain[xQuestMain.nowNum].strTitle,xQuestDataMain[xQuestMain.nowNum].lv);
                        setFiveRocksCustom("퍼널분석",xRocks.strTemp,"NULL","NULL",1);
                        break;
                    }
                        
                        
					xQuestMain.nowNum++;
					
					xQuestMain.state = QUEST_STATE_WAIT;
					///////////////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.action[xEventQueueNet.totalNum]=1;		//0튜토리얼,1메인,2일반
					xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
											
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = point;
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = look;
					xEventQueueNet.layer[xEventQueueNet.totalNum][2] = exp;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
					///////////////////////////////////////////////////////////////////////////////////////
						
					for(int i=xQuestInfo.selectSlot;i<xQuestInfo.totalNum;i++)
					{
						xQuestInfo.xSlot[i].questNum = xQuestInfo.xSlot[i+1].questNum;
						xQuestInfo.xSlot[i].type = xQuestInfo.xSlot[i+1].type;
						xQuestInfo.xSlot[i].barAnyCnt = 0;
					}
					
					xQuestInfo.totalNum--;
												
					setFiveRocksCustom("퀘스트완료","총완료","메인","NULL",1);
						
					break;
				case QUEST_TYPE_NORMAL:
					xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].state = QUEST_STATE_RESULT;
					xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isClear = TRUE;
					for(int i=xQuestInfo.cleanNormal+1;i<xQuestInfo.totalNumNormal;i++)
					{
						if(xQuestDataNormal[i].state == QUEST_STATE_RESULT)
							xQuestInfo.cleanNormal = i;
						else
							break;
					}
					///////////////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.action[xEventQueueNet.totalNum]=2;		//0튜토리얼,1메인,2일반
					xEventQueueNet.slotNum[xEventQueueNet.totalNum]=xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum;		//일반퀘스트슬롯번호
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = point;
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = look;
					xEventQueueNet.layer[xEventQueueNet.totalNum][2] = exp;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
					///////////////////////////////////////////////////////////////////////////////////////
						
					for(int i=xQuestInfo.selectSlot;i<xQuestInfo.totalNum;i++)
					{
						xQuestInfo.xSlot[i].questNum = xQuestInfo.xSlot[i+1].questNum;
						xQuestInfo.xSlot[i].type = xQuestInfo.xSlot[i+1].type;
						xQuestInfo.xSlot[i].barAnyCnt = 0;
					}
					xQuestInfo.totalNum--;
					setFiveRocksCustom("퀘스트완료","총완료","서브","NULL",1);
					break;
				}
				
				if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
					xWorldMap.state = WORLDMAP_STATE_PLAY;
				xWorldMap.isQuestResult = FALSE;
				xWorldMap.isKeyReturn = TRUE;
                
                if(questTypeTemp == QUEST_TYPE_NORMAL && xSave.reviewState == 0)
                {
                    if(xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == FALSE && xWorldMap.isFriendMap == FALSE && xWorldMap.isLvUp == FALSE && xWorldMap.isTuto == false)
                    {
                        if(xWorldMap.state == WORLDMAP_STATE_PLAY && playState == PLAY_PLAY)
                        {
                            if(xQuestMain.nowNum > xWorldMap.reviewQuestNum)
                            {
                                xSave.reviewState = 1;
                                gameSave(SAVE_SLOT_GAME);
                                setPopup(POPUP_SHOP_REVIEWYESNO, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            }
                        }
                    }
                }
			}
			return;
		}
	}
	else if(playState == PLAY_PLAY && xWorldMap.isLvUp == TRUE)
	{
		keyLvUp(type, param1, param2);
		return;
	}
	
	if(xWorldMap.isTuto == TRUE)
	{
		switch(xQuestTuto.state)
		{
			case QUEST_TUTO_WAIT:
				if(xWorldMap.state != WORLDMAP_STATE_NOTICE && xWorldMap.state != WORLDMAP_STATE_NOTICEPOPUP && xWorldMap.state != WORLDMAP_STATE_SEVERSELL)
					return;
				break;
			case QUEST_TUTO_RESULT:
				xInterior.buildModeTime64 = DONT;
				return;
				break;
			case QUEST_TUTO_DIALOG:
				if(xDialog.next != DONT || xDialog.pageC < xDialog.pageT)
				{
					keyDialogTuto(type,param1,param2);
					xInterior.buildModeTime64 = DONT;
					
				}
				return;
			case QUEST_TUTO_SHOW:
			case QUEST_TUTO_KEY:
				
				if(xQuestTuto.state == QUEST_TUTO_SHOW)
				{
					if(touchType == USER_POINT_RELEASE_EVENT)
					{
						xInterior.buildModeTime64 = DONT;
						if(xQuestTuto.anyCnt <= 0)
							xQuestTuto.isTutoClean = TRUE;
					}
					return;
				}
				break;
		}
	}
	if(xWorldMap.isNewModel == TRUE)
	{
		if(type == MH_KEY_PRESSEVENT)
		{
			if(xWorldMap.newModelAnyCnt >= 70)
			{
				
								
				isSelectSlot = FALSE;
				selectSlotNum = 0;
				
				for(int i=0;i<xModelData[xModel.newModelCode].totalSkillNum;i++)
				{
					if(touchCheck(&xCollection.xTouchSkill[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isSelectSlot = TRUE;
						selectSlotNum = i;
						break;
					}
				}
				
				
				
				if(isSelectSlot == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xCollection.selectSkill != selectSlotNum)
						xCollection.selectSkill = selectSlotNum;
					else
						xCollection.selectSkill = DONT;
				}
				else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isNewModel = FALSE;
					xWorldMap.isKeyReturn = TRUE;
					
					if(xQuestTuto.state == QUEST_TUTO_KEY)
					{
						switch(xQuestTuto.nowNum)
						{
							case TUTO_22_MODELCASTING:
								xQuestTuto.isTutoClean = TRUE;
								break;
						}
					}
				}
			}
			return;
		}
	}
	else if(playState == PLAY_PLAY && xWorldMap.isTrend == TRUE)
	{
		keyTrend(type,param1,param2);
		return;
	}
    else if(playState == PLAY_PLAY && xPackagePopup.isPlay == true)
    {
        keyPackagePopup(type,param1,param2);
        return;
    }
	else if(playState == PLAY_PLAY && xWorldMap.isCashShop == TRUE)
	{
		if(xWorldMap.isNewModel == TRUE)
		{
			if(xWorldMap.newModelAnyCnt < NEWMODELANYCNTMAX)
			{
				return;
			}
		}
				
		
		
		if(type == MH_KEY_PRESSEVENT)
		{
			isKeyEvent = FALSE;
			for(int i=0;i<xShop.totalTabB;i++)
			{
				if(touchCheck(&xShop.xTouchTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					isKeyEvent = TRUE;
					keyEventNum = i;
					break;
				}
			}
			
			if(isKeyEvent == TRUE)
			{
				playSnd(SND_MENU_OK);
				if(xShop.selectTabB != keyEventNum)
					setShopTab(keyEventNum);
			}

			else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				shopImgFreeLoad(FALSE);
				xWorldMap.isCashShop = FALSE;
				xWorldMap.isKeyReturn = TRUE;
			}
			else if(xShop.selectTabB == SHOPTAB_TYPE_COUPON)
			{
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					int strByte = getStringByte(xShop.strCoupon);
					int kor = strByte/1000;
					int eng = strByte%1000;
					int korEng = kor+eng;
					
					
					
					
					if(korEng == 0)
					{
						setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
						sprintf(xPopup.strText, "쿠폰번호를\n입력해주세요.");
					}
					else
					{
						////////////////////////////////////////////
						sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xShop.strCoupon);
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_COUPON, FALSE);
						///////////////////////////////////////////
						memset(xShop.strCoupon, 0, sizeof(xShop.strCoupon));
					}
				}
				else if(touchCheck(&xShop.xTouchCoupon) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
                    setTextField(TEXTBOX_TYPE_COUPON, lcdW/2, lcdH+999, 200, 25);
				}
			}
			else
			{
				xWorldMap.isKeyReturn = TRUE;
				if(xShop.xDragScroll.pos == 0 && xShop.xDragScroll.speed == 0)
				{
					isSelectCatalogS = FALSE;
					selectCatalogSNum = 0;
					for(int i=0;i<8;i++)
					{
						
						if(touchCheck(&xShop.xTouchSelectSlot[i]) == TRUE)
						{
							isSelectCatalogS = TRUE;
							selectCatalogSNum = i;
							
							break;
						}
					}
					
					int totalCnt = 0;
					switch(xShop.selectTabB)
					{
					case SHOPTAB_TYPE_MONEY:
						totalCnt= xShop.totalMoneyTab;
						break;
					case SHOPTAB_TYPE_PREMIUM:
						totalCnt = SHOPTABPREMIUMMAX;
						break;
					case SHOPTAB_TYPE_MUSIC:
						totalCnt = xSongSet.totalSong;
						break;
					}
					if(selectCatalogSNum+(xShop.xDragScroll.selectNum*8) >= totalCnt)
						isSelectCatalogS = FALSE;
					
					
					if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xShop.xDragScroll.selectNum > 0)
					{
						xShop.xDragScroll.speed = 320;
					}
					else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xShop.xDragScroll.selectNum < xShop.xDragScroll.totalNum-1)
					{
						xShop.xDragScroll.speed = -320;
					}
					else if(isSelectCatalogS == TRUE)
					{

						playSnd(SND_MENU_OK);
						xShop.selectSlot = (selectCatalogSNum+xShop.xDragScroll.selectNum*8);
						
						switch(xShop.selectTabB)
						{
						case SHOPTAB_TYPE_MONEY:
							if(xShop.moneyType[xShop.selectSlot] == 0)
							{
								setPopup(POPUP_SHOP_BUYYESNOCASH, playState, playState, 0, DONT);
							}
							else
							{
								if(xSaveTemp.cash.oriData < xShop.moneyPrice[xShop.selectSlot].oriData)
									setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
								else
									setPopup(POPUP_SHOP_BUYYESNOGOLD, playState, playState, 0, DONT);
							}
							break;
						case SHOPTAB_TYPE_PREMIUM:
							if(xShop.premiumPriceType[xShop.selectSlot] == 1 && xSaveTemp.cash.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
							else if(xShop.premiumPriceType[xShop.selectSlot] == 0 && xSaveTemp.money.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
							else if(xShop.premiumPriceType[xShop.selectSlot] == 2 && xSaveTemp.tired.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_TIREDEMPTY, playState, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						case SHOPTAB_TYPE_MUSIC:
							if(xSongSet.selectSong == xShop.selectSlot)
							{
								//아무 변화 없음
							}
							else if(xSongSet.isSongOpen[xShop.selectSlot] == TRUE)
							{
								//구매한곡은 변경하시겠습니까?
								xSongSet.selectSongTemp = xSongSet.selectSong;
								xSongSet.selectSong = xShop.selectSlot;
								setPopup(POPUP_MUSIC_CHANGEYESNO, playState, playState, 0, DONT);
							}
							else
							{
								//구매안한곡은 구매하시겠습니까?
								xSongSet.selectSongTemp = xSongSet.selectSong;
								xSongSet.selectSong = xShop.selectSlot;
								setPopup(POPUP_MUSIC_BUYYESNO, playState, playState, 0, DONT);
							}
							break;
						}
					}
				}
			}
		}
		return;
	}
	else if(playState == PLAY_PLAY && xWorldMap.isCashGift == TRUE)
	{
		if(type == MH_KEY_PRESSEVENT)
		{
			if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isCashGift = FALSE;
				xWorldMap.isKeyReturn = TRUE;
				
				if(xWorldMap.state != WORLDMAP_STATE_MAIL)
				{
					if(xWorldMap.isMiniProfile == FALSE)
					{
						mailFreeLoad(FALSE);
					}
				}
			}
			else
				dragScrollKeyPrc(&xCashGift.xDragScroll,0);
		}
		else if(type == MH_KEY_RELEASEEVENT)
		{
			if(xCashGift.xDragScroll.touchXposBefore != DONT)
			{
				dragScrollKeyPrc(&xCashGift.xDragScroll,1);
			}
			else if(xCashGift.xDragScroll.speed == 0)
			{
				isKeyEvent = FALSE;
				keyEventNum = 0;
				
				for(int i=0;i<xCashGift.totalSlot;i++)
				{
					if(touchCheck(&xCashGift.xTouhSlot[i]) == TRUE)
					{
						isKeyEvent = TRUE;
						keyEventNum = i;
						break;
					}
				}				
				
				if(isKeyEvent == TRUE)
				{
					playSnd(SND_MENU_OK);
					xShop.selectSlot = keyEventNum;
					setPopup(POPUP_SHOP_BUYYESNOCASH, playState, playState, 0, DONT);
				}
			}
			xCashGift.xDragScroll.touchXpos = DONT;
			xCashGift.xDragScroll.touchYpos = DONT;
			xCashGift.xDragScroll.touchXposBefore = DONT;
			xCashGift.xDragScroll.touchYposBefore = DONT;
		}
		return;
	}
	else if(playState == PLAY_PLAY && xWorldMap.isMiniProfile == TRUE)
	{
		switch(xMiniProfile.state)
		{
		case MINIPROFILE_STATE_PROFILE:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isMiniProfile = FALSE;
					xWorldMap.isKeyReturn = TRUE;
				}
				else if(touchCheck(&xMiniProfile.xTouchFriendShopBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xFriendData[xMiniProfile.friendDataSlotNum].isFriend == 0)	//친구추가
					{
						/////////////////////////////////
						xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIEND, FALSE);
						////////////////////////////////
						xFriendData[xMiniProfile.friendDataSlotNum].isAdd = TRUE;
						xFriendData[xMiniProfile.friendDataSlotNum].isFriend = TRUE;
					}
					else
					{
						xWorldMap.isMiniProfile = FALSE;
						//친구샵 방문
						xFriendMap.selectDataSlotNum = xMiniProfile.friendDataSlotNum;
						xWorldMap.isFriendMap = TRUE;
						xFriendMap.isPlay = TRUE;
						xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
						xFriendMap.type = 0;//0:리스트1:랜덤2:메일
						xFriendMap.anyCnt = 0;
					}
					xWorldMap.isKeyReturn = TRUE;
				}
				else if(xWorldMap.isAppReview == FALSE && xFriendData[xMiniProfile.friendDataSlotNum].isFriend != 0 && touchCheck(&xMail.xTouchCashGiftBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					xWorldMap.isKeyReturn = TRUE;
					xCashGift.friendUserNum = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
					setCashGift();
				}
			}
			break;
		}
		return;
	}
	else if(xWorldMap.isSocialProfile == TRUE)
	{
		if(touchType == USER_POINT_PRESS_EVENT)
		{
			isKeyEvent = FALSE;
			keyEventNum = 0;
			
			
			for(int k=0;k<xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].totalSocialSlot;k++)
			{
				if(touchCheck(&xSocialProfile.xTouchSlot[k]) == TRUE)
				{
					isKeyEvent = TRUE;
					keyEventNum = k;
					break;
				}
			}
						
			if(isKeyEvent == TRUE)
			{
				playSnd(SND_MENU_OK);

				if(xFriendData[xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].xSocialSlot[keyEventNum].friendDataSlotNum].userNum != xNetData.userNum)
				{
					 xWorldMap.isMiniProfile = TRUE;
					 xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
					 mailFreeLoad(TRUE);
						
					 xMiniProfile.friendDataSlotNum = xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].xSocialSlot[keyEventNum].friendDataSlotNum;
					 /////////////////////////////////////////
					 xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
					 addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
					 /////////////////////////////////////////
				}
			
				
				xWorldMap.isKeyReturn = TRUE;
			}
			else if(touchType == USER_POINT_PRESS_EVENT)
			{
				xWorldMap.isSocialProfile = FALSE;
				xWorldMap.isKeyReturn = TRUE;
			}
		}
		return;
	}

	switch(playState)
	{
	case PLAY_DIALOG:
		keyDialog(type, param1, param2);
		break;
	case PLAY_MSG:
		keyPopup(type,param1,param2);
		break;
	case PLAY_PLAY:
		switch(xWorldMap.state)
		{
		case WORLDMAP_STATE_SENDMACHINE_FP:
			keySendMachine_FP(type,param1,param2);
			break;
		case WORLDMAP_STATE_MODELMAINGIFTINFO:
			if(type == MH_KEY_PRESSEVENT)
			{
				isSelectSlot = FALSE;
				selectSlotNum = 0;
				xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
				for(int i=0;i<xModelData[xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].code].totalSkillNum;i++)
				{
					if(touchCheck(&xCollection.xTouchSkill[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isSelectSlot = TRUE;
						selectSlotNum = i;
						break;
					}
				}
				
								
				
				if(isSelectSlot == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xCollection.selectSkill != selectSlotNum)
						xCollection.selectSkill = selectSlotNum;
					else
						xCollection.selectSkill = DONT;
				}
				else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
					xWorldMap.state = WORLDMAP_STATE_PLAY;
				}
                //매장에서 모델 터치후 즉시 완료 처리
				else if(touchCheck(&xModel.xTouchGiftFastCash) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_GIFTINFOCASH] == TRUE)
					{
						
					}
					else
					{
						setPopup(POPUP_MODELGIFTFASTCASHYESNO, playState, playState, 0, DONT);
					}
				}
			}
			break;
            case WORLDMAP_STATE_SALESHOP:

			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
					saleShopFreeLoad(FALSE);
				}
				else
					dragScrollKeyPrc(&xSaleShop.xDragScroll,0);

			}
			else if(type == MH_KEY_RELEASEEVENT)
			{
				if(xSaleShop.xDragScroll.touchXposBefore != DONT)
				{
					dragScrollKeyPrc(&xSaleShop.xDragScroll,1);
				}
				else
				{
					isKeyEvent = FALSE;
					keyEventNum = 0;
					
					for(int i=0;i<xSaleShop.totalNum;i++)
					{
						if(touchCheck(&xSaleShop.xTouchSlot[i]) == TRUE)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
					
					if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xSaleShop.selectSlot = keyEventNum;
						setMapData(xSaleShop.slotCode[xSaleShop.selectSlot]);
						
						if(xSaveTemp.cash.oriData < xSaleShop.slotSalePrice[xSaleShop.selectSlot])
							setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
						else
							setPopup(POPUP_SALESHOPBUYYESNO, playState, playState, 0, DONT);
							
					}
				}
				xSaleShop.xDragScroll.touchXpos = DONT;
				xSaleShop.xDragScroll.touchYpos = DONT;
				xSaleShop.xDragScroll.touchXposBefore = DONT;
				xSaleShop.xDragScroll.touchYposBefore = DONT;
			}
			break;
		case WORLDMAP_STATE_OPTION:
			if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				optionImgFreeLoad(FALSE);
				xWorldMap.state = WORLDMAP_STATE_PLAY;
				xWorldMap.isKeyReturn = TRUE;
				gameSave(SAVE_SLOT_GAME);

				xOrder.totalNumListDataFriend = 0;
				xOrder.totalNumListData = 0;
				xOrder.isNetLoad = FALSE;
				addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
			}
			else if(touchCheck(&xOption.xTouchTab[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xOption.selectTab = 0;
				xWorldMap.isKeyReturn = TRUE;
			}
			else if(touchCheck(&xOption.xTouchTab[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xOption.selectTab = 1;
				xWorldMap.isKeyReturn = TRUE;
			}
			else
			{
				switch(xOption.selectTab)
				{
				case 0:
					if(touchType == USER_POINT_PRESS_EVENT)
					{
						xOption.effBackup = xSave.effVol;
						xOption.bgmBackup = xSave.bgmVol;
					}
					if(touchCheck(&xOption.xTouch4inch) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xSave.is4inch = xSave.is4inch==TRUE?FALSE:TRUE;
						xWorldMap.isKeyReturn = TRUE;
						
						gameSave(SAVE_SLOT_GAME);
					}
					else if(touchCheck(&xOption.xTouchAccountDel) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
                        setPopup(POPUP_UNREGISTEREDYESNO, playState, playState, 0, DONT);
						
						xWorldMap.isKeyReturn = TRUE;
					}
					else if(touchCheck(&xOption.xTouchLogout) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
                        setPopup(POPUP_LOGOUTYESNO, playState, playState, 0, DONT);
						xWorldMap.isKeyReturn = TRUE;
					}
					else if(touchCheck(&xOption.xTouchHelp) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
//LJW 설정 > 문의하기 터치 막기!!!
//						playSnd(SND_MENU_OK);
//						xWorldMap.isKeyReturn = TRUE;
//						
//						char strUrl[256];
//						sprintf(strUrl, "http://cafe.naver.com/ilovefashionbluefi.cafe");
//                        startWebView(strUrl);
						
					}
					else if(touchCheck(&xOption.xTouchBgmVol) == TRUE)
					{
						if(xTouch.xPos < xOption.xTouchBgmVol.xPos)
							xTouch.xPos = xOption.xTouchBgmVol.xPos;
						else if(xTouch.xPos > xOption.xTouchBgmVol.xPos+xOption.xTouchBgmVol.wPos)
							xTouch.xPos = xOption.xTouchBgmVol.xPos+xOption.xTouchBgmVol.wPos;
						
						xSave.bgmVol = (xTouch.xPos-xOption.xTouchBgmVol.xPos)*100/xOption.xTouchBgmVol.wPos;
					}
					else if(touchCheck(&xOption.xTouchEffVol) == TRUE)
					{
						if(xTouch.xPos < xOption.xTouchEffVol.xPos)
							xTouch.xPos = xOption.xTouchEffVol.xPos;
						else if(xTouch.xPos > xOption.xTouchEffVol.xPos+xOption.xTouchEffVol.wPos)
							xTouch.xPos = xOption.xTouchEffVol.xPos+xOption.xTouchEffVol.wPos;
						
						xSave.effVol = (xTouch.xPos-xOption.xTouchEffVol.xPos)*100/xOption.xTouchEffVol.wPos;
						
						
					}
					if(touchType == USER_POINT_RELEASE_EVENT)
					{
						if(xOption.bgmBackup != xSave.bgmVol)
							stopSnd();
						if(xOption.effBackup != xSave.effVol)
							playSnd(SND_MENU_OK);
					}
					break;
				case 1:
					isKeyEvent = FALSE;
					for(int i=0;i<3;i++)
					{
						if(touchCheck(&xOption.xTouchOnOff[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
						
						
					if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xSave.isPushOnOff[keyEventNum] = xSave.isPushOnOff[keyEventNum] == FALSE ?TRUE:FALSE;
						
						if(keyEventNum == 2)
						{
                            nativeOnOffPush(xSave.isPushOnOff[2] == FALSE?0:1);
                            
                            /*
							//서버에 저장하기 추가
							////////////////////////////////////////////////////////////////////////
							xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
							xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETPUSH, TRUE);
							////////////////////////////////////////////////////////////////////////
                            */
						}
					}
					break;
				}
			}
			
			break;
		case WORLDMAP_STATE_ORDERRECVINFO:
			if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.state = WORLDMAP_STATE_PLAY;
				
				setMapData(xOrder.xSlotNumRecv[0].code);
				inputInventoryFashion((xMap.type*1000)+xMap.listNum, xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
				
				
				if(xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_RECV] > 0)
				{
					inputInventoryFashion((xMap.type*1000)+xMap.listNum, xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_RECV]);
				}
				
				
								
				//삭제 패킷 날리기
				////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.key[xEventQueueNet.totalNum] = xOrder.xSlotNumRecv[0].key;
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_DELRECVORDER, TRUE);
				////////////////////////////////////////////////////////////////////////////
				
				for(int i=0;i<xOrder.totalNumRecv-1;i++)
				{
					memcpy(&xOrder.xSlotNumRecv[i], &xOrder.xSlotNumRecv[i+1], sizeof(xOrder.xSlotNumRecv[i]));
				}
				xOrder.totalNumRecv--;
				
				////////////////////////////////////////////////////
				xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
				xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
				//패션수량추가
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
				///////////////////////////////////////////////////////
				xWorldMap.isKeyReturn = TRUE;
				setQuest(9, 1, DONT);
			}
			break;
		case WORLDMAP_STATE_FASHIONSHOWNEW:
			switch(xFashionShow.state)
			{
			case FASHIONSHOW_STATE_NOTICE_MAIN:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xFashionShow.xTouchRankTabSBtn[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xFashionShow.selectNoticeTab = 0;
					}
                    /*
					else if(touchCheck(&xFashionShow.xTouchRankTabSBtn[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xFashionShow.selectNoticeTab = 1;
					}
                     */
					else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xFashionShow.state = FASHIONSHOW_STATE_MAIN;
					}
				}
				break;
			case FASHIONSHOW_STATE_INFO:
				if(xFashionShowInfo.xRankSlot.rank != 0 && xFashionShowInfo.xRankSlot.userCode != xNetData.userNum && touchCheck(&xFashionShowInfo.xTouchBtn[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOFRIENDSHOP] == TRUE)
					{
						
					}
					else
					{
						xWorldMap.ranDomUserCode = xFashionShowInfo.xRankSlot.userCode;
						//유저넘버 슬롯번호 찾기
						int userNum = xWorldMap.ranDomUserCode;
						int slotNum = getFriendSlot(userNum);
												
						
						
						if(slotNum == DONT)
						{
							slotNum = addFriendData(userNum);
						}
						
						xFriendMap.selectDataSlotNum = slotNum;
						xWorldMap.isFriendMap = TRUE;
						xFriendMap.isPlay = TRUE;
						xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
						xFriendMap.anyCnt = 0;
						xFriendMap.type = 1;//0:리스트1:랜덤2:메일
						xFriendData[xFriendMap.selectDataSlotNum].todayOrder = TRUE;
						loadImgFreeImgFashionShow(FALSE);
					}
				}
				else if(xFashionShowInfo.xRankSlot.rank != 0 && touchCheck(&xFashionShowInfo.xTouchBtn[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOREPLAY] == TRUE)
					{
						
					}
					else
					{
						setQuest(45,1,DONT);
						xRunWay.inType = RUNWAY_INTYPE_REPLAY;
						xRunWay.nowModel = 0;
						xCollection.selectSkill = 0;
						xRunWay.state = RUNWAY_STATE_PLAY;
						xRunWay.anyCnt = 0;
						xRunWay.modelState[0] = RUNWAYMODEL_STATE_WAIT;
						xRunWay.modelState[1] = RUNWAYMODEL_STATE_WAIT;
						xRunWay.modelState[2] = RUNWAYMODEL_STATE_WAIT;
						xRunWay.modelState[3] = RUNWAYMODEL_STATE_WAIT;
						xRunWay.modelState[4] = RUNWAYMODEL_STATE_WAIT;
						xRunWay.modelAnyCnt[0] = 0;
						xRunWay.modelAnyCnt[1] = 0;
						xRunWay.modelAnyCnt[2] = 0;
						xRunWay.modelAnyCnt[3] = 0;
						xRunWay.modelAnyCnt[4] = 0;
						
						xRunWay.maxModel = 0;
						for(int i=0;i<xFashionShowInfo.xRankSlot.totalModel;i++)
						{
							xRunWay.modelCode[xRunWay.maxModel] = xFashionShowInfo.xRankSlot.modelCode[i];
							xRunWay.modelUpgrade[xRunWay.maxModel] = xFashionShowInfo.xRankSlot.modelUpgrade[i];
							memcpy(&xRunWay.xF_Model[xRunWay.maxModel],&xFashionShowInfo.xRankSlot.xF[i],sizeof(xRunWay.xF_Model[xRunWay.maxModel]));
							xRunWay.maxModel++;
						}
						setStateRunWay();
					}
				}
				else if(touchCheck(&xTouchClr) != TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOEXIT] == TRUE)
					{
						
					}
					else
					{
						xFashionShow.state = FASHIONSHOW_STATE_MAIN;
					}
				}
				break;
			case FASHIONSHOW_STATE_RESULTBONUS:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xFashionShow.state = FASHIONSHOW_STATE_MAIN;
										
					for(int i=0;i<xRunWay.totalModelBonus;i++)
					{
						int bonusPoint=0;
						switch(xRunWay.modelBonusType[i])
						{
						case 0:		//골드
							bonusPoint = xRunWay.modelBonusPoint[i];
							setMoney(bonusPoint);
							break;
						case 1:		//룩
							setCash(xRunWay.modelBonusPoint[i]);
							break;
						case 2:		//경험치
							bonusPoint = xRunWay.modelBonusPoint[i];
							setExp(bonusPoint);
							break;
						case 3:		//캔디
							setTired(xRunWay.modelBonusPoint[i]);
							break;
						}
					}
					////////////////////////////////////////////////////////////////////////
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
					////////////////////////////////////////////////////////////////////////
					checkFashionShowLicence(xRunWay.totalFashionShowScore);
					if(xFashionShow.totalFashionLicence > 0)
					{
						xFashionShow.state = FASHIONSHOW_STATE_LICENCEOPEN;
						xFashionShow.fashionLicenceAnyCnt = 0;
					}
				}
				break;
			case FASHIONSHOW_STATE_LICENCEOPEN:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					--xFashionShow.totalFashionLicence;
					if(xFashionShow.totalFashionLicence == 0)
					{
						xFashionShow.state = FASHIONSHOW_STATE_MAIN;
					}
					else
						xFashionShow.fashionLicenceAnyCnt = 0;
				}
				break;
			case FASHIONSHOW_STATE_RANKCHANGE:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xFashionShow.isRankChangeEvent = FALSE;
					xFashionShow.state = FASHIONSHOW_STATE_MAIN;
					for(int i=0;i<3;i++)
					{
						xFashionShow.xMyRankSlot[i].rank = 0;
						xFashionShow.xMyRankSlot[i].score = 0;
						
						xFashionShow.nowPageNumList[i] = 0;
						xFashionShow.totalRankList[i] = 0;
					}
					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
					{
						switch(xQuestTuto.nowNum)
						{
							case TUTO_23_FASHIONSHOWSTART:
								xQuestTuto.isTutoClean = TRUE;
								break;
						}
					}
					
					setRunWayResultBonus();
					
					if(xRunWay.totalModelBonus > 0)
					{
						xFashionShow.state = FASHIONSHOW_STATE_RESULTBONUS;
						xRunWay.modelBonusAnyCnt = 0;
					}
					else
					{
						checkFashionShowLicence(xRunWay.totalFashionShowScore);
						if(xFashionShow.totalFashionLicence > 0)
						{
							xFashionShow.state = FASHIONSHOW_STATE_LICENCEOPEN;
							xFashionShow.fashionLicenceAnyCnt = 0;
						}
					}
				}
				break;
			case FASHIONSHOW_STATE_RUNWAYRESULT:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					switch(xRunWay.inType)
					{
					case RUNWAY_INTYPE_PLAY:
						if(xFashionShow.isRankChangeEvent == TRUE)
						{
							xFashionShow.state = FASHIONSHOW_STATE_RANKCHANGE;
						}
						else
						{
							xFashionShow.state = FASHIONSHOW_STATE_MAIN;
							for(int i=0;i<3;i++)
							{
								xFashionShow.xMyRankSlot[i].rank = 0;
								xFashionShow.xMyRankSlot[i].score = 0;
								
								xFashionShow.nowPageNumList[i] = 0;
								xFashionShow.totalRankList[i] = 0;
							}
							if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
							{
								switch(xQuestTuto.nowNum)
								{
									case TUTO_23_FASHIONSHOWSTART:
										xQuestTuto.isTutoClean = TRUE;
										break;
								}
							}
							
							
							setRunWayResultBonus();
							if(xRunWay.totalModelBonus > 0)
							{
								xFashionShow.state = FASHIONSHOW_STATE_RESULTBONUS;
								xRunWay.modelBonusAnyCnt = 0;
							}
							else
							{
								checkFashionShowLicence(xRunWay.totalFashionShowScore);
								if(xFashionShow.totalFashionLicence > 0)
								{
									xFashionShow.state = FASHIONSHOW_STATE_LICENCEOPEN;
									xFashionShow.fashionLicenceAnyCnt = 0;
								}
							}

							
						}
						break;
					case RUNWAY_INTYPE_REPLAY:
						xFashionShow.state = FASHIONSHOW_STATE_INFO;
						break;
					}
				}
				break;
			case FASHIONSHOW_STATE_RUNWAY:
				isKeyEvent = FALSE;
				keyEventNum = 0;
										
				for(int i=0;i<RUNWAYMINIGAMEMAX;i++)
				{
					if(xRunWayMiniGame[i].state == RUNWAYMINIGAME_STATE_PLAY && touchCheck(&xRunWayMiniGame[i].xTouch) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isKeyEvent = TRUE;
						keyEventNum = i;
						break;
					}
				}
					
					
				{
				int modelCode = xRunWay.modelCode[xRunWay.nowModel];
				int totalRunwaySkill;
				totalRunwaySkill = 0;
				for(int i=0;i<xModelData[modelCode].totalSkillNum;i++)
				{
					switch(xModelData[modelCode].skillType[i])
					{
					case 20:
					case 21:
					case 22:
						//친구샵
						break;
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
					case 33:
					case 34:
					case 35:
					case 36:
					case 37:
					case 38:
					case 39:
					case 40:
					case 41:
					case 42:
					case 43:
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 50:
						//패션쇼
						totalRunwaySkill++;
						break;
					case 6:
					case 7:
						//내샵이지만 안보여줌
						break;
					default:
						//내샵
						break;
					}
				}
				
				isSelectSlot = FALSE;
				selectSlotNum = 0;
				for(int i=0;i<totalRunwaySkill;i++)
				{
					if(touchCheck(&xCollection.xTouchSkill[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isSelectSlot = TRUE;
						selectSlotNum = i;
						break;
					}
				}
				}
				
				if(isSelectSlot == TRUE)
				{
					playSnd(SND_MENU_OK);
					if(xCollection.selectSkill != selectSlotNum)
						xCollection.selectSkill = selectSlotNum;
					else
						xCollection.selectSkill = DONT;
				}
				else if(isKeyEvent == TRUE)
				{
					xRunWayMiniGame[keyEventNum].state = RUNWAYMINIGAME_STATE_END;
					xRunWayMiniGame[keyEventNum].anyCnt = 0;
					xRunWayMiniGame[keyEventNum].isOk = TRUE;
										
					int iconNum;
					switch(xRunWayMiniGame[keyEventNum].bonusType)
					{
					case 0:		//골드
						iconNum = ICON_TYPE_GOLD;
						break;
					case 1:		//룩
						iconNum = ICON_TYPE_LOOK;
						break;
					case 2:		//경험치
						iconNum = ICON_TYPE_EXP;
						break;
					case 3:		//캔디
						iconNum = ICON_TYPE_CANDY;
						break;
					}
					
					setBonus(xRunWayMiniGame[keyEventNum].x, xRunWayMiniGame[keyEventNum].y, iconNum, xRunWayMiniGame[keyEventNum].bonusPoint);
					setDropIcon(xRunWayMiniGame[keyEventNum].x, xRunWayMiniGame[keyEventNum].y,
								iconNum,0,
								iconNum,0,
								iconNum,0);
															
					xRunWayEff.isFlashFast = TRUE;
					xRunWayEff.flashAnyCnt = 0;
				}
				else if(touchCheck(&xRunWay.xTouchSkip) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SKIP] == TRUE)
					{
						
					}
					else
					{
						setFashionShowResult();
					}
				}
				break;
			case FASHIONSHOW_STATE_FITTING:
				if(touchType == USER_POINT_PRESS_EVENT)
				{
					isKeyEvent = FALSE;
					for(int i=0;i<FITTINGTABMAX;i++)
					{
						if(touchCheck(&xTouchFittingTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
					
					if(isKeyEvent == TRUE)
					{
						if(keyEventNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY0] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY1] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY2] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 3 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY3] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 4 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY4] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 5 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY5] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 6 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY6] == TRUE)
							isKeyEvent = FALSE;
					}
					
					if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xFitting.selectTabB = keyEventNum;
						setFittingTabChange();
					}
					else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						//넣어입기
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKIN] == TRUE)
						{
							
						}
						else
						{
							xFitting.xF[xFitting.gender].isInFitting = TRUE;
							xFitting.isInOutMenu = FALSE;
						}
						
					}
					else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						//빼입기
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKOUT] == TRUE)
						{
							
						}
						else
						{
							xFitting.xF[xFitting.gender].isInFitting = FALSE;
							xFitting.isInOutMenu = FALSE;
						}
						
					}
					else if(xFitting.isInOutMenu == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKOUT] == TRUE)
						{
							
						}
						else
						{
							xFitting.isInOutMenu = xFitting.isInOutMenu == FALSE;
							xFitting.inOutCnt = 0;
						}
						
					}
					else if(touchCheck(&xTouchFittingMenu[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKOUT] == TRUE)
						{
							
						}
						else
						{
							xFitting.isInOutMenu = xFitting.isInOutMenu == FALSE?TRUE:FALSE;
							xFitting.inOutCnt = 0;
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_EXIT] == TRUE)
						{
							
						}
						else
						{
							xFashionShow.state = FASHIONSHOW_STATE_SELECTMODEL;
                            
                            freeImg(&xPacker[PACKER_STATE_COLLECTION].img);
                            
                            
						}
					}
					else if(xFitting.totalNumS == 0 && touchCheck(&xTouchLink) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LINK] == TRUE)
						{
							
						}
						else
						{
							setStateProductionMenu();
							xCatalog.selectTabS = xFitting.selectTabB;
							setCatalogTabChange(xCatalog.selectTabS);
						}
					}
					else if(touchCheck(&xTouchFittingReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RESET] == TRUE)
						{
							
						}
						else
						{
							//실제 피팅 내용 쇼윈도에 적용하기
							for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
							{
								xFitting.xF[0].code[ff] = DONT;
								xFitting.xF[1].code[ff] = DONT;
							}
							//memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF,sizeof(xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF));
						}
					}
					else if(touchCheck(&xTouchFittingSave) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_SAVE] == TRUE)
						{
							
						}
						else
						{
							//실제 피팅 내용 쇼윈도에 적용하기
							if(getModelMainSlot(xInventoryModel[xModelFitting.inventoryNum].key) != DONT && checkXfLimit(&xFitting.xF[xFitting.gender]) == FALSE)
							{
								setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
								sprintf(xPopup.strText, "홍보모델은 상하의 또는 원피스를\n착용하셔야 이용가능합니다.");
							}
							else
							{
                                freeImg(&xPacker[PACKER_STATE_COLLECTION].img);
								xFashionShow.state = FASHIONSHOW_STATE_SELECTMODEL;
								memcpy(&xInventoryModel[xModelFitting.inventoryNum].xF,&xFitting.xF[xFitting.gender],sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
								/////////////////////////////////////////////////////////////////////
								int eslot = xModelFitting.inventoryNum;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 1;//0:신규,1:업데이트,2삭제
								xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
								xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
								xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
								for(int f=0;f<16;f++)
								{
									xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
								}
								
								xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
								
								xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInventoryModel[eslot].xF.isInFitting == FALSE?0:1;
								
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
								/////////////////////////////////////////////////////////////////////
								switch(xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex)
								{
								case 0:setFiveRocksCustom("모델피팅","피팅횟수","여자","NULL",1);break;
								case 1:setFiveRocksCustom("모델피팅","피팅횟수","남자","NULL",1);break;
								}
							}
						}
					}
					else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollFittingS.selectNum > 0)
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LEFT] == TRUE)
						{
							
						}
						else
						{
							xDragScrollFittingS.speed = 320;
						}
					}
					else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RIGHT] == TRUE)
						{
							
						}
						else
						{
							xDragScrollFittingS.speed = -320;
						}
					}
					else
					{
						
						if(xDragScrollFittingS.pos == 0 && xDragScrollFittingS.speed == 0)
						{
							isSelectCatalogS = FALSE;
							selectCatalogSNum = 0;
							for(int i=0;i<8;i++)
							{
								if(touchCheck(&xTouchFittingS[i]) == TRUE)
								{
									isSelectCatalogS = TRUE;
									selectCatalogSNum = i;
									break;
								}
							}
							if(selectCatalogSNum+(xDragScrollFittingS.selectNum*8) >= xFitting.totalNumS)
								isSelectCatalogS = FALSE;
							
							int selectFittingTemp = selectCatalogSNum+(xDragScrollFittingS.selectNum*8);
							

							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_FITTING] == TRUE)
							{
								isSelectCatalogS = FALSE;
							}
							
							if(isSelectCatalogS == TRUE)
							{
								playSnd(SND_FITTING);
								
								int totalLayer = 0;
								int layerInfo[20];
								int slotCode;
								M_Boolean isAdd = FALSE;
								for(int i=0;i<xFitting.totalNumS;i++)
								{
									slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
									setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
									
									isAdd = FALSE;
									for(int k=0;k<totalLayer;k++)
									{
										if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
										{
											isAdd = TRUE;
											break;
										}
										else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
										{
											isAdd = TRUE;
											for(int kk=totalLayer;kk>k;kk--)
											{
												layerInfo[kk] = layerInfo[kk-1];
											}
											layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
											totalLayer++;
											break;
										}
									}
									
									if(isAdd == FALSE)
									{
										layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
									}
								}
								
								xFitting.selectSlot = selectFittingTemp;
								setMapData(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
								//실제적인 처리를 해주자
								
								//선택된게 장착중일때는 바로 해제
								if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code)
								{
									xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = DONT;
									xFitting.selectSlot = DONT;
								}
								//선택된곳에 이미 다른레이어 존재
								else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
								{
									
								}
								else if(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].isModelUse == TRUE)
								{
									
								}
								//선택이 되어있다면 무언가 있다면 변경
								else if(xFitting.selectSlot == selectFittingTemp && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
								{
									xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
									xFitting.selectSlot = DONT;
								}
								else if(xFitting.xF[xFitting.gender].layeredNum >= (xModelData[xInventoryModel[xModelFitting.inventoryNum].code].layeredNum+getModelLayered(xModelFitting.inventoryNum,0)))
								{
									

									setPopup(POPUP_FITTING_LAYEREDERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
									xFitting.selectSlot = DONT;
								}
								//장착할려는 부위에 아무것도 없다면 바로 장착
								else if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == DONT)
								{
									xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
								}
								//선택이 안되어있다면 그냥 선택으로만
								else
								{
									xFitting.selectSlot = selectFittingTemp;
								}
							}
						}
					}
				}

				break;
			case FASHIONSHOW_STATE_DRESSCODE:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xFashionShow.state = FASHIONSHOW_STATE_SELECTMODEL;
					
					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_23_FASHIONSHOWDRESSCODE:
							xQuestTuto.isTutoClean = TRUE;
							break;
						}
					}
				}
				break;
			case FASHIONSHOW_STATE_SELECTMODEL:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_BACK] == TRUE)
						{
							
						}
						else
							xFashionShow.state = FASHIONSHOW_STATE_MAIN;
					}
					else if(touchCheck(&xFashionShow.xTouchDressCodeIcon) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_DRESSCODE] == TRUE)
						{
							
						}
						else
							xFashionShow.state = FASHIONSHOW_STATE_DRESSCODE;
					}
					else if(touchCheck(&xFashionShow.xTouchStartBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_START] == TRUE)
						{
							
						}
						else
						{
                            if(xFashionShow.remainCount <= 0)
                            {
                                setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
                                sprintf(xPopup.strText, "오늘은 더이상 입장하실수 없습니다.");
                            }
							else if(xFashionShow.isTodayFree == FALSE && xSaveTemp.tired.oriData < (xFashionShow.userTired.oriData-xModelSkill.bonusPer[MODELSKILL_TYPE_RUNWAY_CANDY]))
								setPopup(POPUP_TIREDEMPTY, playState, playState, 0, DONT);
							else
							{
								xRunWay.inType = RUNWAY_INTYPE_PLAY;
								xRunWay.nowModel = 0;
								xCollection.selectSkill = 0;
								xRunWay.state = RUNWAY_STATE_PLAY;
								xRunWay.anyCnt = 0;
								xRunWay.modelState[0] = RUNWAYMODEL_STATE_WAIT;
								xRunWay.modelState[1] = RUNWAYMODEL_STATE_WAIT;
								xRunWay.modelState[2] = RUNWAYMODEL_STATE_WAIT;
								xRunWay.modelState[3] = RUNWAYMODEL_STATE_WAIT;
								xRunWay.modelState[4] = RUNWAYMODEL_STATE_WAIT;
								xRunWay.modelAnyCnt[0] = 0;
								xRunWay.modelAnyCnt[1] = 0;
								xRunWay.modelAnyCnt[2] = 0;
								xRunWay.modelAnyCnt[3] = 0;
								xRunWay.modelAnyCnt[4] = 0;
								
								xRunWay.maxModel = 0;
								for(int s=0;s<FASHIONSHOW_SELECTMAX;s++)
								{
									if(xFashionShow.selectSlot[s] != DONT)
									{
										xRunWay.modelCode[xRunWay.maxModel] = xInventoryModel[xFashionShow.selectSlot[s]].code;
										xRunWay.modelUpgrade[xRunWay.maxModel] = xInventoryModel[xFashionShow.selectSlot[s]].upGrade;
										memcpy(&xRunWay.xF_Model[xRunWay.maxModel],&xInventoryModel[xFashionShow.selectSlot[s]].xF,sizeof(xRunWay.xF_Model[xRunWay.maxModel]));
										xRunWay.maxModel++;
									}
								}
								
								if(xRunWay.maxModel == 0)
								{
									setPopup(POPUP_RUNWAYSTARTERR, playState, playState, 0, DONT);
								}
								else
								{
									M_Boolean isCheck = FALSE;

									for(int modelI=0;modelI<xRunWay.maxModel;modelI++)
									{
										if(checkXfLimit(&xRunWay.xF_Model[modelI]) == FALSE)
											isCheck = TRUE;
									}
									
									if(isCheck == TRUE)
									{
										setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
										sprintf(xPopup.strText, "참가모델은 상하의 또는 원피스를\n착용하셔야 이용가능합니다.");
									}
									else
									{
										if(xFashionShow.isTodayFree == FALSE)
											setTired(-(xFashionShow.userTired.oriData-xModelSkill.bonusPer[MODELSKILL_TYPE_RUNWAY_CANDY]));
																				
										xFashionShow.isTodayFree = FALSE;
										
										////////////////////////////////////////////////////////////////////////
										addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
										////////////////////////////////////////////////////////////////////////
										setStateRunWay();
									}
								}
							}
						}
					}
					else
						dragScrollKeyPrc(&xFashionShow.xDragScrollSelectModel,0);
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xFashionShow.xDragScrollSelectModel.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xFashionShow.xDragScrollSelectModel,1);
					}
					else
					{
						isKeyEvent = FALSE;
						keyEventNum = 0;
						for(int i=0;i<5;i++)
						{
							if(touchCheck(&xFashionShow.xTouchSelectSlot[i]) == TRUE)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
								break;
							}
						}
						
						xFashionShow.selectModelSlot = keyEventNum+xFashionShow.xDragScrollSelectModel.selectNum;
						if(xFashionShow.selectModelSlot < 0 || xFashionShow.selectModelSlot >= xFashionShow.xDragScrollSelectModel.totalNum)
							isKeyEvent = FALSE;
						
						
						if(isKeyEvent == TRUE)
						{
							M_Boolean isSelect = FALSE;
							
							for(int s=0;s<FASHIONSHOW_SELECTMAX;s++)
							{
								if(xFashionShow.selectSlot[s] == xFashionShow.selectModelSlot)
								{
									isSelect = TRUE;
									break;
								}
							}
							
				
							if(isSelect == TRUE)
							{
								if(touchCheck(&xFashionShow.xTouchFittingSlot[keyEventNum]) == TRUE)
								{
									playSnd(SND_MENU_OK);
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_FITTING] == TRUE)
									{
										
									}
									else
									{
										//피팅
										xModel.inventoryNum = xFashionShow.selectModelSlot;
										xModelFitting.inventoryNum = xFashionShow.selectModelSlot;
									
										
										xFitting.gender = xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex;
										memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModelFitting.inventoryNum].xF,sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
										setFittingTabChange();
										xFashionShow.state = FASHIONSHOW_STATE_FITTING;
                                        
                                        setPacker(PACKER_STATE_COLLECTION);
									}
								}
								else
								{
									playSnd(SND_MENU_OK);
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SELECTMODEL] == TRUE)
									{
										
									}
									else
									{
										for(int s=0;s<FASHIONSHOW_SELECTMAX;s++)
										{
											if(xFashionShow.selectSlot[s] == xFashionShow.selectModelSlot)
												xFashionShow.selectSlot[s] = DONT;
										}
									}
								}
							}
							else
							{
								playSnd(SND_MENU_OK);
								for(int s=0;s<FASHIONSHOW_SELECTMAX;s++)
								{
									if(xFashionShow.selectSlot[s] == DONT)
									{
										xFashionShow.selectSlot[s] = xFashionShow.selectModelSlot;
										break;
									}
								}
							}
						}
					}
					xFashionShow.xDragScrollSelectModel.touchXpos = DONT;
					xFashionShow.xDragScrollSelectModel.touchYpos = DONT;
					xFashionShow.xDragScrollSelectModel.touchXposBefore = DONT;
					xFashionShow.xDragScrollSelectModel.touchYposBefore = DONT;
				}
				break;
			case FASHIONSHOW_STATE_MAIN:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(xFashionShow.selectRankTabS != 0 && touchCheck(&xFashionShow.xTouchRankTabSBtn[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_RANK0] == TRUE)
						{
							
						}
						else
						{
							xFashionShow.selectRankTabS = 0;
							xFashionShow.xDragScrollRank.selectNum = 0;
							xFashionShow.xDragScrollRank.pos = 0;
							xFashionShow.xDragScrollRank.speed = 0;
						}
					}
					else if(xFashionShow.selectRankTabS != 1 && touchCheck(&xFashionShow.xTouchRankTabSBtn[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_RANK1] == TRUE)
						{
							
						}
						else
						{
							xFashionShow.selectRankTabS = 1;
							xFashionShow.xDragScrollRank.selectNum = 0;
							xFashionShow.xDragScrollRank.pos = 0;
							xFashionShow.xDragScrollRank.speed = 0;
						}
					}
					else if(xFashionShow.selectRankTabS != 2 && touchCheck(&xFashionShow.xTouchRankTabSBtn[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_RANK2] == TRUE)
						{
							
						}
						else
						{
							xFashionShow.selectRankTabS = 2;
							xFashionShow.xDragScrollRank.selectNum = 0;
							xFashionShow.xDragScrollRank.pos = 0;
							xFashionShow.xDragScrollRank.speed = 0;
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_EXIT] == TRUE)
						{
							
						}
						else
						{
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							loadImgFreeImgFashionShow(FALSE);
						}
					}
					else if(touchCheck(&xFashionShow.xTouchNoticeBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_NOTICE] == TRUE)
						{
							
						}
						else
						{
							xFashionShow.state = FASHIONSHOW_STATE_NOTICE_MAIN;
						}
					}
					else if(touchCheck(&xFashionShow.xTouchStartBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_READBTN] == TRUE)
						{
							
						}
						else
						{
							if(xLock.isLock[LOCK_TYPE_FASHIONSHOW] == TRUE)
							{
								setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_FASHIONSHOW]);
							}
							else
							{
								xFashionShow.state = FASHIONSHOW_STATE_SELECTMODEL;
								
//								setModelList(DONT);
								
								if(xWorldMap.isTuto == TRUE)
									xFashionShow.isShowDressCode = FALSE;
								
								if(xFashionShow.isShowDressCode == FALSE)
								{
									xFashionShow.isShowDressCode = TRUE;
									xFashionShow.state = FASHIONSHOW_STATE_DRESSCODE;
								}
							}
						}
						
					}
					else
						dragScrollKeyPrc(&xFashionShow.xDragScrollRank,2);
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xFashionShow.xDragScrollRank.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xFashionShow.xDragScrollRank,3);
					}
					else
					{
						isKeyEvent = FALSE;
						keyEventNum = 0;
						for(int i=0;i<5;i++)
						{
							if(touchCheck(&xFashionShow.xTouchRankSlot[i]) == TRUE)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
							}
						}
						
						xFashionShow.selectRankSlot = keyEventNum+xFashionShow.xDragScrollRank.selectNum;
						if(xFashionShow.selectRankSlot < 0 || xFashionShow.selectRankSlot >= xFashionShow.xDragScrollRank.totalNum)
							isKeyEvent = FALSE;
						
						if(isKeyEvent)
						{
							if(touchCheck(&xFashionShow.xTouchRankBtn[0][keyEventNum]) == TRUE)
							{
								playSnd(SND_MENU_OK);
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFO] == TRUE)
								{
									
								}
								else
								{
									xFashionShow.state = FASHIONSHOW_STATE_INFO;
									xFashionShowInfo.xRankSlot.userCode = xFashionShow.xRankSlot[xFashionShow.selectRankTabS][xFashionShow.selectRankSlot].userCode;
									xFashionShowInfo.xRankSlot.friendDataNum = xFashionShow.xRankSlot[xFashionShow.selectRankTabS][xFashionShow.selectRankSlot].friendDataNum;
									xFashionShowInfo.xRankSlot.rank = 0;
									
									///////////////////////////////////////////////////////////////////////////////
									xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFashionShowInfo.xRankSlot.userCode;
									xEventQueueNet.action[xEventQueueNet.totalNum] = xFashionShow.selectRankTabS;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFASHIONSHOWINFO, TRUE);
									///////////////////////////////////////////////////////////////////////////////
								}
								
							}
							else if(xFashionShow.selectRankTabS == 0 && xFashionShow.xRankSlot[xFashionShow.selectRankTabS][xFashionShow.selectRankSlot].isVote == FALSE && touchCheck(&xFashionShow.xTouchRankBtn[1][keyEventNum]) == TRUE)
							{
								playSnd(SND_MENU_OK);
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_VOTE] == TRUE)
								{
									
								}
								else
								{
									setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
									sprintf(xPopup.strText, "추천을 완료했습니다.");
									
									
									xFashionShow.xRankSlot[xFashionShow.selectRankTabS][xFashionShow.selectRankSlot].isVote = TRUE;
									
									
									//전부 막자
									/*
									for(int i=0;i<FASHIONSHOWRANKMAX;i++)
									{
										xFashionShow.xRankSlot[0][i].isVote = TRUE;
										xFashionShow.xRankSlot[1][i].isVote = TRUE;
										xFashionShow.xRankSlot[2][i].isVote = TRUE;
									}
									*/
									
									for(int i=0;i<3;i++)
									{
										for(int r=0;r<xFashionShow.totalRankList[i];r++)
										{
											if(xFashionShow.xRankSlot[i][r].userCode == xFashionShow.xRankSlot[xFashionShow.selectRankTabS][xFashionShow.selectRankSlot].userCode)
											{
												xFashionShow.xRankSlot[i][r].vote++;
												xFashionShow.xRankSlot[i][r].isVote = TRUE;
											}
										}
									}
									
									addIsVote(xFashionShow.xRankSlot[xFashionShow.selectRankTabS][xFashionShow.selectRankSlot].userCode);
									///////////////////////////////////////////////////////////////////////////////
									xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFashionShow.xRankSlot[xFashionShow.selectRankTabS][xFashionShow.selectRankSlot].userCode;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_VOTE, FALSE);
									///////////////////////////////////////////////////////////////////////////////
									setQuest(44,1,DONT);
								}
							}
						}
					}
					xFashionShow.xDragScrollRank.touchXpos = DONT;
					xFashionShow.xDragScrollRank.touchYpos = DONT;
					xFashionShow.xDragScrollRank.touchXposBefore = DONT;
					xFashionShow.xDragScrollRank.touchYposBefore = DONT;
				}
				break;
			}
			
			break;
		case WORLDMAP_STATE_MODEL_FRIEND:
			switch(xModel.state)
			{
			case MODELCOLLECT_FRIEND_STATE_BUYPOPUP:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xModel.state = MODELCOLLECT_FRIEND_STATE_SHOP;
						xWorldMap.isKeyReturn = TRUE;
						
						
						for(int i=0;i<xModel.totalModelFriendShop;i++)
						{
							xModel.modelFriendShopSlot[i].isSelectV = FALSE;
						}

						
						if(xStaff.sellCash > xSaveTemp.cash.oriData)
						{
							setPopup(POPUP_CASHEMPTY, playState, playState,0, DONT);
						}
						else if(xStaff.sellGold > xSaveTemp.money.oriData)
						{
							setPopup(POPUP_MONEYEMPTY, playState, playState,0, DONT);
						}
						else
						{
							if(xStaff.sellGold > 0)
							{
								setMoney(-xStaff.sellGold);
								setBonus(xTouch.xPos,xTouch.yPos,ICON_TYPE_GOLD,-xStaff.sellGold);
							}
							if(xStaff.sellCash > 0)
							{
								xSaveTemp.buyCashStaffNum += xStaff.sellCashCnt;
								
								setCash(-xStaff.sellCash);
								setBonus(xTouch.xPos,xTouch.yPos-20,ICON_TYPE_LOOK,-xStaff.sellCash);
							}
							for(int ss=0;ss<xStaff.totalPopupItemSlot;ss++)
							{
								setMapData(xStaff.popupItemSlotCode[ss]);
								
								xInventoryFashion.isOpen[xMap.type][xMap.listNum] = TRUE;
								
								if(xFashionData[xMap.type][xMap.listNum].isStaff == 0)
								{
									xSave.fashionNew[xMap.type][xMap.listNum] = 1;	//0:보통 1:new보여주기 2:확인한상태 3:완료
									gameSave(SAVE_SLOT_GAME);
								}
								
								////////////////////////////////////////////////////
								xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
								xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
								///////////////////////////////////////////////////
							}
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xModel.state = MODELCOLLECT_FRIEND_STATE_SHOP;
						xWorldMap.isKeyReturn = TRUE;
					}
					else
					{
						dragScrollKeyPrc(&xStaff.xDragScrollPopupItemSlot,0);
					}
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xStaff.xDragScrollPopupItemSlot.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xStaff.xDragScrollPopupItemSlot,1);
					}
					xStaff.xDragScrollPopupItemSlot.touchXpos = DONT;
					xStaff.xDragScrollPopupItemSlot.touchYpos = DONT;
					xStaff.xDragScrollPopupItemSlot.touchXposBefore = DONT;
					xStaff.xDragScrollPopupItemSlot.touchYposBefore = DONT;
				}
				break;
			case MODELCOLLECT_FRIEND_STATE_SHOP:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xModel.state = MODELCOLLECT_FRIEND_STATE_MAIN;
					}
					else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xStaff.totalPopupItemSlot = 0;
						xStaff.sellCash = 0;
						xStaff.sellGold = 0;
						for(int i=0;i<xModel.totalModelFriendShop;i++)
						{
							setMapData(xModel.modelFriendShopSlot[i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
							if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
							{
								if(xSaveTemp.lv.oriData < xFashionData[xMap.type][xMap.listNum].lv)
								{
								}
								else if(xSaveTemp.fame.oriData < xFashionData[xMap.type][xMap.listNum].fame.oriData)
								{
								}
								else
								{
									if(xModel.modelFriendShopSlot[i].isSelectV == TRUE)
									{
										xStaff.popupItemSlotCode[xStaff.totalPopupItemSlot++] = xModel.modelFriendShopSlot[i].code;
										
										switch(xFashionData[xMap.type][xMap.listNum].priceType)
										{
										case 0:
											xStaff.sellGold += xFashionData[xMap.type][xMap.listNum].price.oriData;
											break;
										case 1:
											xStaff.sellCash += xFashionData[xMap.type][xMap.listNum].price.oriData;
											break;
										}
									}
								}
							}
						}
						
						if(xStaff.totalPopupItemSlot > 0)
							xModel.state = MODELCOLLECT_FRIEND_STATE_BUYPOPUP;
					}
					else if(touchCheck(&xModel.xTouchAllV) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						for(int i=0;i<xModel.totalModelFriendShop;i++)
						{
							setMapData(xModel.modelFriendShopSlot[i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
							if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE && xFashionData[xMap.type][xMap.listNum].isStaff != 2)
							{
								//0,1만가능하도록
								if(xFashionData[xMap.type][xMap.listNum].priceType < 2)
								{
									if(xSaveTemp.lv.oriData < xFashionData[xMap.type][xMap.listNum].lv)
									{
									}
									else if(xSaveTemp.fame.oriData < xFashionData[xMap.type][xMap.listNum].fame.oriData)
									{
										
									}
									else
									{
										xModel.modelFriendShopSlot[i].isSelectV = TRUE;
									}
								}
								
							}
						}
					}
					else
						dragScrollKeyPrc(&xModel.xDragScrollFriendShop,2);
					
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xModel.xDragScrollFriendShop.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xModel.xDragScrollFriendShop,3);
					}
					else
					{
												
					
						isKeyEvent = FALSE;
						keyEventNum = 0;
						
						for(int i=0;i<4;i++)
						{
							if(touchCheck(&xModel.xTouchBuyBtn[i]) == TRUE)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
								break;
							}
						}
						xModel.selectModelShopSlot = keyEventNum+xModel.xDragScrollFriendShop.selectNum;
						if(xModel.selectModelShopSlot < 0 || xModel.selectModelShopSlot >= xModel.xDragScrollFriendShop.totalNum)
							isKeyEvent = FALSE;
						if(isKeyEvent == TRUE)
						{
							xStaff.totalPopupItemSlot = 0;
							xStaff.sellCash = 0;
							xStaff.sellGold = 0;
							setMapData(xModel.modelFriendShopSlot[xModel.selectModelShopSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
							if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE && xFashionData[xMap.type][xMap.listNum].isStaff != 2)
							{
								//0,1만가능하도록
								if(xFashionData[xMap.type][xMap.listNum].priceType < 2)
								{
									if(xSaveTemp.lv.oriData < xFashionData[xMap.type][xMap.listNum].lv)
									{
									}
									else if(xSaveTemp.fame.oriData < xFashionData[xMap.type][xMap.listNum].fame.oriData)
									{
									}
									else
									{
										xStaff.popupItemSlotCode[xStaff.totalPopupItemSlot++] = xModel.modelFriendShopSlot[xModel.selectModelShopSlot].code;
										switch(xFashionData[xMap.type][xMap.listNum].priceType)
										{
										case 0:
											xStaff.sellGold += xFashionData[xMap.type][xMap.listNum].price.oriData;
											break;
										case 1:
											xStaff.sellCash += xFashionData[xMap.type][xMap.listNum].price.oriData;
											break;
										}
									}
								}
							}

							if(xStaff.totalPopupItemSlot > 0)
								xModel.state = MODELCOLLECT_FRIEND_STATE_BUYPOPUP;
						}
						if(isKeyEvent == FALSE)
						{
							isKeyEvent = FALSE;
							keyEventNum = 0;
							
							for(int i=0;i<4;i++)
							{
								if(touchCheck(&xModel.xTouchV[i]) == TRUE)
								{
									isKeyEvent = TRUE;
									keyEventNum = i;
									break;
								}
							}
							xModel.selectModelShopSlot = keyEventNum+xModel.xDragScrollFriendShop.selectNum;
							if(xModel.selectModelShopSlot < 0 || xModel.selectModelShopSlot >= xModel.xDragScrollFriendShop.totalNum)
								isKeyEvent = FALSE;
							if(isKeyEvent == TRUE)
							{
								setMapData(xModel.modelFriendShopSlot[xModel.selectModelShopSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
								if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE && xFashionData[xMap.type][xMap.listNum].isStaff != 2)
								{
									//0,1만가능하도록
									if(xFashionData[xMap.type][xMap.listNum].priceType < 2)
									{
										if(xSaveTemp.lv.oriData < xFashionData[xMap.type][xMap.listNum].lv)
										{
										}
										else if(xSaveTemp.fame.oriData < xFashionData[xMap.type][xMap.listNum].fame.oriData)
										{
										}
										else
										{
											playSnd(SND_MENU_OK);
											if(xModel.modelFriendShopSlot[xModel.selectModelShopSlot].isSelectV == FALSE)
												xModel.modelFriendShopSlot[xModel.selectModelShopSlot].isSelectV = TRUE;
											else
												xModel.modelFriendShopSlot[xModel.selectModelShopSlot].isSelectV = FALSE;
										}
									}
								}
							}
						}
					}
					xModel.xDragScrollFriendShop.touchXpos = DONT;
					xModel.xDragScrollFriendShop.touchYpos = DONT;
					xModel.xDragScrollFriendShop.touchXposBefore = DONT;
					xModel.xDragScrollFriendShop.touchYposBefore = DONT;
				}
				break;
			case MODELCOLLECT_FRIEND_STATE_MAIN:
				if(type == MH_KEY_PRESSEVENT)
				{
					isKeyEvent = FALSE;
					for(int i=0;i<MODELMAINSLOTMAX;i++)
					{
						if(touchCheck(&xModelMainSlot[i].xTouchSlot) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
															
					int isKeyVote = FALSE;
					int keyVoteNum = 0;
					for(int i=0;i<MODELMAINSLOTMAX;i++)
					{
						if(touchCheck(&xModel.xTouchFriendVote[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyVote = TRUE;
							keyVoteNum = i;
							break;
						}
					}
					
					
					if(isKeyVote == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xModel.selectMainSlot = keyVoteNum;
						if(xModelMainSlotFRIEND[xModel.selectMainSlot].state == MODELMAINSLOT_STATE_WAIT || xModelMainSlotFRIEND[xModel.selectMainSlot].state == MODELMAINSLOT_STATE_PLAY )
						{
							if(xFriendData[xModel.modelFriendDataSlotNum].isVote == FALSE)
							{
								
								
								
								if((xSaveTemp.socialModelVoteCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_MODELVOTE]) <= 0)
								{
									setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
									sprintf(xPopup.strText, "오늘 사용가능한 추천포인트를\n모두 사용하셨습니다.");
								}
								else
								{
									xModelMainSlotFRIEND[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNumFRIEND(xModelMainSlotFRIEND[xModel.selectMainSlot].modelKey);
									xModel.inventoryNum = xModelMainSlotFRIEND[xModel.selectMainSlot].inventoryNum;
									
									setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
									sprintf(xPopup.strText, "해당 모델을 추천하고\n캔디를 획득했습니다.");
									setTired(1);
									setQuest(98, 1, DONT);
									setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_CANDY, 1);
									////////////////////////////////////////////////////////
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
									////////////////////////////////////////////////////////
									xFriendData[xModel.modelFriendDataSlotNum].isVote = TRUE;
									xInventoryModel_FRIEND[xModel.inventoryNum].vote++;
									////////////////////////////////////////////
									xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xModel.modelFriendDataSlotNum].userNum;
									xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel_FRIEND[xModel.inventoryNum].key;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MODELVOTE, FALSE);
									///////////////////////////////////////////
									setQuest(49,1,DONT);
									xSaveTemp.socialModelVoteCnt--;
								}
							}
							else
								setPopup(POPUP_MODELVOTEERR, playState, playState, 0, DONT);
						}
							
					}
					else if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xModel.selectMainSlot = keyEventNum;
						if(xModelMainSlotFRIEND[xModel.selectMainSlot].state == MODELMAINSLOT_STATE_WAIT || xModelMainSlotFRIEND[xModel.selectMainSlot].state == MODELMAINSLOT_STATE_PLAY )
						{
							xModelMainSlotFRIEND[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNumFRIEND(xModelMainSlotFRIEND[xModel.selectMainSlot].modelKey);
							xModel.inventoryNum = xModelMainSlotFRIEND[xModel.selectMainSlot].inventoryNum;
							xModel.state = MODELCOLLECT_FRIEND_STATE_SHOP;
							
							xModel.totalModelFriendShop = 0;
							for(int f=0;f<16;f++)
							{
								if(xInventoryModel_FRIEND[xModel.inventoryNum].xF.code[f] != DONT)
								{
									xModel.modelFriendShopSlot[xModel.totalModelFriendShop].isInfoOpen = FALSE;
									xModel.modelFriendShopSlot[xModel.totalModelFriendShop].isSelectV = FALSE;
									xModel.modelFriendShopSlot[xModel.totalModelFriendShop].code = xInventoryModel_FRIEND[xModel.inventoryNum].xF.code[f];
									xModel.totalModelFriendShop++;
								}
							}
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						modelImgLoad(FALSE);
						friendListFreeLoad(TRUE);
						xWorldMap.state = WORLDMAP_STATE_PLAY;
						
						if(xQuestTuto.state == QUEST_TUTO_KEY)
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_18_RESULT:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
					}
				}
				break;
			}
			break;
		case WORLDMAP_STATE_MODEL:
			if(xModelUpGrade.isUpgrade == TRUE)
			{
				xWorldMap.isKeyReturn = TRUE;
				switch(xModelUpGrade.upgradeState)
				{
				case MODELUPGRADE_STATE_RESULT_SUCCESS:
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xModelUpGrade.isUpgrade = FALSE;
					}
					break;
				}
				return;
			}
				
			switch(xModel.state)
			{
			case MODELCOLLECT_STATE_MAININFO:
			case MODELCOLLECT_STATE_LISTINFO:
				isSelectSlot = FALSE;
				selectSlotNum = 0;
														
				for(int i=0;i<xModelData[xInventoryModel[xModel.infoInventoryNum].code].totalSkillNum;i++)
				{
					if(touchCheck(&xCollection.xTouchSkill[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isSelectSlot = TRUE;
						selectSlotNum = i;
						break;
					}
				}
					
				if(isSelectSlot == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xCollection.selectSkill != selectSlotNum)
						xCollection.selectSkill = selectSlotNum;
					else
						xCollection.selectSkill = DONT;
				}
				else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOEXIT] == TRUE)
					{
						
					}
					else
					{
						switch(xModel.state)
						{
						case MODELCOLLECT_STATE_MAININFO:
							xModel.state = MODELCOLLECT_STATE_MAIN;
							break;
						case MODELCOLLECT_STATE_LISTINFO:
							xModel.state = MODELCOLLECT_STATE_LIST;
							break;
						}
					}
				}
				else if(touchCheck(&xModel.xTouchInfoBtn[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOBTN0] == TRUE)
					{
						
					}
					else
					{
						xModel.fittingInState = xModel.state;
						xModel.state = MODELCOLLECT_STATE_FITTING;
						xModelFitting.inventoryNum = xModel.infoInventoryNum;
						xFitting.gender = xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex;
						memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModelFitting.inventoryNum].xF,sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
												
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_22_MODELFITTINGBTN:
							case TUTO_22_MODELFITTINGOK:
								xFitting.selectTabB = 1;
								break;
							}
						}
						setFittingTabChange();
					}
				}
				else if(touchCheck(&xModel.xTouchInfoBtn[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOBTN1] == TRUE)
					{
						
					}
					else
					{
						xModel.fittingInState = xModel.state;
						xModelUpGrade.inventoryNum = xModel.infoInventoryNum;
						if(xInventoryModel[xModelUpGrade.inventoryNum].upGrade >= xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax)
						{
							
							if(xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].grade == 3)
								xModelUpGrade.upgradeType = DONT;
							else
								xModelUpGrade.upgradeType = 1;
						}
						else
						{
							xModelUpGrade.upgradeType = 0;
						}
						
						
						//활동중인모델은 조합하실수 없습니다.
						if(xModelUpGrade.upgradeType == DONT)
						{
							setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
							sprintf(xPopup.strText, "최대수치까지\n모두 업그레이드 하셨습니다.");
						}
						else if(xModelUpGrade.upgradeType == 1 && getModelMainSlot(xInventoryModel[xModelUpGrade.inventoryNum].key) != DONT)
						{
							setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
							sprintf(xPopup.strText, "활동중인 모델은\n조합하실수 없습니다.");
						}
						else
						{
//							setModelUpGradeList(xModelUpGrade.inventoryNum);
							switch(xModel.state)
							{
							case MODELCOLLECT_STATE_MAININFO:
								xModel.state = MODELCOLLECT_STATE_MAINUPGRADE;
								break;
							case MODELCOLLECT_STATE_LISTINFO:
								xModel.state = MODELCOLLECT_STATE_LISTUPGRADE;
								break;
							}
							xModelUpGrade.selectSlot = DONT;
						}
					}
				}
				else if(touchCheck(&xModel.xTouchInfoBtn[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOBTN2] == TRUE)
					{
						
					}
					else
					{
						switch(xModel.state)
						{
						case MODELCOLLECT_STATE_MAININFO:
							//해제하기
							setPopup(POPUP_MODELMAIN_DEL, playState, playState, 0, DONT);
							break;
						case MODELCOLLECT_STATE_LISTINFO:
							//판매하기
							if(xModel.totalInventoryModel <= 1)
							{
								setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
								sprintf(xPopup.strText, "모델은 최소 1명이상\n보유하셔야합니다.");
							}
							else if(getModelMainSlot(xInventoryModel[xModel.infoInventoryNum].key) != DONT)
							{
								setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
								sprintf(xPopup.strText, "샵에서 활동중인 모델입니다.\n판매를 위해서는 홍보활동을\n해제하셔야 합니다.");
							}
							else
								setPopup(POPUP_MODEL_SELLYESNO, playState, playState, 0, DONT);
							break;
						}
					}
				}
				break;
			case MODELCOLLECT_STATE_MAIN:
				isKeyEvent = FALSE;
				for(int i=0;i<MODELMAINSLOTMAX;i++)
				{
					if(touchCheck(&xModelMainSlot[i].xTouchSlot) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isKeyEvent = TRUE;
						keyEventNum = i;
						break;
					}
				}
					
				if(isKeyEvent == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xModel.selectMainSlot = keyEventNum;
										
					
					switch(xModelMainSlot[xModel.selectMainSlot].state)
					{
					case MODELMAINSLOT_STATE_LOCK:
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_SALE] == TRUE)
						{
							
						}
						else
						{
							if(xSaveTemp.lv.oriData < xModelMainSlot[xModel.selectMainSlot].openLv)
								setPopup(POPUP_MODELMAIN_SLOTOPENCASH, playState, playState, 0, DONT);
							else
								setPopup(POPUP_MODELMAIN_SLOTOPENGOLD, playState, playState, 0, DONT);
						}
						break;
					case MODELMAINSLOT_STATE_EMPTY:
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_EMPTY] == TRUE)
						{
							
						}
						else
						{
							xModel.totalListNum = 0;
							for(int i=0;i<xModel.totalInventoryModel;i++)
							{
								M_Boolean isCheck = FALSE;
								for(int k=0;k<MODELMAINSLOTMAX;k++)
								{
									switch(xModelMainSlot[k].state)
									{
									case MODELMAINSLOT_STATE_WAIT:
									case MODELMAINSLOT_STATE_PLAY:
										xModelMainSlot[k].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[k].modelKey);
										if(xModelMainSlot[k].inventoryNum == i)
											isCheck = TRUE;
										break;
									}
									
								}
								if(isCheck == FALSE)
									xModel.listNumSlot[xModel.totalListNum++] = i;
							}
								
							if(xModel.totalListNum > 0)
							{
								xModel.state = MODELCOLLECT_STATE_SELECTMODEL;
							}
							else
							{
								setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
								sprintf(xPopup.strText, "활동가능한 모델이 없습니다.");
							}
						}
						break;
					case MODELMAINSLOT_STATE_WAIT:
							
						
						if(touchCheck(&xModelMainSlot[xModel.selectMainSlot].xTouchBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
							if(checkXfLimit(&xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].xF) == TRUE)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_WAIT] == TRUE)
								{
									
								}
								else
								{
									xModelMainSlot[xModel.selectMainSlot].ingAnyCnt = 999;
									
									xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
									xModelMainSlot[xModel.selectMainSlot].state = MODELMAINSLOT_STATE_PLAY;
									xModelMainSlot[xModel.selectMainSlot].endTime = xCalendar.nowTime+getModelGiftTime(xModelMainSlot[xModel.selectMainSlot].inventoryNum,0);
									////////////////////////////////////////////
									xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xModel.selectMainSlot;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODELMAIN, FALSE);
									///////////////////////////////////////////
								}
							}
							else
							{
								if(xWorldMap.isTuto == FALSE)
								{
									xModel.fittingInState = xModel.state;
									xModel.state = MODELCOLLECT_STATE_FITTING;
									xModelFitting.inventoryNum = xModelMainSlot[xModel.selectMainSlot].inventoryNum;
									xFitting.gender = xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex;
									memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModelFitting.inventoryNum].xF,sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
									setFittingTabChange();
								}
							}
						}
						else
						{
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFO] == TRUE)
							{
								
							}
							else
							{
								xModel.state = MODELCOLLECT_STATE_MAININFO;
								xCollection.selectSkill = DONT;
								xModel.infoInventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
							}
						}
						break;
					case MODELMAINSLOT_STATE_PLAY:
						if(touchCheck(&xModelMainSlot[xModel.selectMainSlot].xTouchBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
							if(checkXfLimit(&xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].xF) == TRUE)
							{
								
								int endTimeTemp = xModelMainSlot[xModel.selectMainSlot].endTime;
																
								
								if(xCalendar.nowTime > endTimeTemp)
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_SUCCESS] == TRUE)
									{
										
									}
									else
										xModel.state = MODELCOLLECT_STATE_MAINGIFTRESULT;
								}
								else
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_PLAY] == TRUE)
									{
										
									}
									else
									{
										xModel.state = MODELCOLLECT_STATE_MAINGIFTINFO;
										xCollection.selectSkill = DONT;
									}
								}
							}
							else
							{
								if(xWorldMap.isTuto == FALSE)
								{
									xModel.fittingInState = xModel.state;
									xModel.state = MODELCOLLECT_STATE_FITTING;
									xModelFitting.inventoryNum = xModelMainSlot[xModel.selectMainSlot].inventoryNum;
									xFitting.gender = xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex;
									memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModelFitting.inventoryNum].xF,sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
									setFittingTabChange();
								}
							}
						}
						else
						{
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFO] == TRUE)
							{
								
							}
							else
							{
								xModel.state = MODELCOLLECT_STATE_MAININFO;
								xCollection.selectSkill = DONT;
								xModel.infoInventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
							}
						}
						break;
					}
				}
				else if(touchCheck(&xModel.xTouchModelListBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_MODELLIST] == TRUE)
					{
						
					}
					else
					{
						xModel.totalListNum = 0;
						for(int i=0;i<xModel.totalInventoryModel;i++)
							xModel.listNumSlot[xModel.totalListNum++] = i;
						
						if(xModel.totalListNum > 0)
							xModel.state = MODELCOLLECT_STATE_LIST;
						else
						{
							setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
							sprintf(xPopup.strText, "보유하신 모델이 없습니다.");
						}
					}
				}
				else if(touchCheck(&xModel.xTouchHelpBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_HELP] == TRUE)
					{
					}
					else
					{
						xModel.state = MODELCOLLECT_STATE_HELP;
					}
					
				}
				else if(touchCheck(&xModel.xTouchCastingBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_CASTING] == TRUE)
					{
						
					}
					else
					{
						makeModelShopNpc();
						xModel.state = MODELCOLLECT_STATE_MAINCASTING;
					}
					
				}
				else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_EXIT] == TRUE)
					{
						
					}
					else
					{
						makeModelShopNpc();
						xWorldMap.state = WORLDMAP_STATE_PLAY;
						modelImgLoad(FALSE);
						freeFashion();
						
						xOrder.totalNumListDataFriend = 0;
						xOrder.totalNumListData = 0;
						xOrder.isNetLoad = FALSE;
						addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
					}
				}
				break;
			case MODELCOLLECT_STATE_MAINCASTING:
			case MODELCOLLECT_STATE_SELECTMODELCASTING:
			case MODELCOLLECT_STATE_LISTCASTING:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					switch(xModel.state)
					{
					case MODELCOLLECT_STATE_MAINCASTING:
						xModel.state = MODELCOLLECT_STATE_MAIN;
						break;
					case MODELCOLLECT_STATE_SELECTMODELCASTING:
						xModel.state = MODELCOLLECT_STATE_SELECTMODEL;
						break;
					case MODELCOLLECT_STATE_LISTCASTING:
						xModel.state = MODELCOLLECT_STATE_LIST;
						break;
					}
				}
				else if(touchCheck(&xModel.xTouchCasting[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_CASTING] == TRUE)
					{
						
					}
					else
					{
						xShop.selectSlot = 0;
						switch(xShop.premiumPriceType[xShop.selectSlot])
						{
						case 0:
							if(xWorldMap.isTuto == TRUE && xQuestTuto.nowNum == TUTO_22_MODELCASTING)
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							else if(xSaveTemp.money.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						case 1:
							if(xSaveTemp.cash.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						case 2:
							if(xSaveTemp.tired.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_TIREDEMPTY, playState, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						}
					}
				}
				else if(touchCheck(&xModel.xTouchCasting[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_CASTINGCASH] == TRUE)
					{
						
					}
					else
					{
						xShop.selectSlot = 1;
						switch(xShop.premiumPriceType[xShop.selectSlot])
						{
						case 0:
							if(xSaveTemp.money.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						case 1:
							if(xSaveTemp.cash.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						case 2:
							if(xSaveTemp.tired.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_TIREDEMPTY, playState, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						}
					}
				}
				break;
			case MODELCOLLECT_STATE_FITTING:
				if(touchType == USER_POINT_PRESS_EVENT)
				{
					isKeyEvent = FALSE;
					for(int i=0;i<FITTINGTABMAX;i++)
					{
						if(touchCheck(&xTouchFittingTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
					
					if(isKeyEvent == TRUE)
					{
						if(keyEventNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY0] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY1] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY2] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 3 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY3] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 4 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY4] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 5 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY5] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 6 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY6] == TRUE)
							isKeyEvent = FALSE;
					}
					
					
					if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xFitting.selectTabB = keyEventNum;
						setFittingTabChange();
					}
					else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKIN] == TRUE)
						{
							
						}
						else
						{
							//넣어입기
							xFitting.xF[xFitting.gender].isInFitting = TRUE;
							xFitting.isInOutMenu = FALSE;
							
						}
					}
					else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKOUT] == TRUE)
						{
							
						}
						else
						{
							//빼입기
							xFitting.xF[xFitting.gender].isInFitting = FALSE;
							xFitting.isInOutMenu = FALSE;
						}
						
					}
					else if(xFitting.isInOutMenu == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] == TRUE)
						{
							
						}
						else
						{
							xFitting.isInOutMenu = FALSE;
							xFitting.inOutCnt = 0;
						}
					}
					else if(touchCheck(&xTouchFittingMenu[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] == TRUE)
						{
							
						}
						else
						{
							xFitting.isInOutMenu  = xFitting.isInOutMenu == FALSE?TRUE:FALSE;
							xFitting.inOutCnt = 0;
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_EXIT] == TRUE)
						{
							
						}
						else
						{
							xModel.state = xModel.fittingInState;
//							sortModelList();
//							setModelList(xModel.listTabNum);
						}
					}
					else if(xFitting.totalNumS == 0 && touchCheck(&xTouchLink) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						setStateProductionMenu();
						xCatalog.selectTabS = xFitting.selectTabB;
						setCatalogTabChange(xCatalog.selectTabS);
					}
					else if(touchCheck(&xTouchFittingReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RESET] == TRUE)
						{
							
						}
						else
						{
							//실제 피팅 내용 쇼윈도에 적용하기
							for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
							{
								xFitting.xF[0].code[ff] = DONT;
								xFitting.xF[1].code[ff] = DONT;
							}
							
							//memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF,sizeof(xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF));
						}
					}
					else if(touchCheck(&xTouchFittingSave) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						
						
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_SAVE] == TRUE)
						{
							
						}
						else
						{
							if(getModelMainSlot(xInventoryModel[xModelFitting.inventoryNum].key) != DONT && checkXfLimit(&xFitting.xF[xFitting.gender]) == FALSE)
							{
								setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
								sprintf(xPopup.strText, "홍보모델은 상하의 또는 원피스를\n착용하셔야 이용가능합니다.");
							}
							else
							{
								xModel.state = xModel.fittingInState;
								//실제 피팅 내용 쇼윈도에 적용하기
								memcpy(&xInventoryModel[xModelFitting.inventoryNum].xF,&xFitting.xF[xFitting.gender],sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
								/////////////////////////////////////////////////////////////////////
								int eslot = xModelFitting.inventoryNum;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 1;//0:신규,1:업데이트,2삭제
								xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
								xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
								xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
								for(int f=0;f<16;f++)
								{
									xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
								}
								xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
								xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInventoryModel[eslot].xF.isInFitting==FALSE?0:1;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
								/////////////////////////////////////////////////////////////////////
								
								setQuest(15,1,DONT);
								
								//case 51://	여자 모델 %d명 피팅하기
								int prcTemp = 0;
								for(int i=0;i<xModel.totalInventoryModel;i++)
								{
									if(xModelData[xInventoryModel[i].code].sex == 0)
									{
										int layeredNum = 0;
										for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
										{
											if(xInventoryModel[i].xF.code[ff] != DONT)
												layeredNum++;
										}
										if(layeredNum > 0)
											prcTemp++;
									}
								}
								setQuest(51, prcTemp, DONT);
							}
						}
					}
					else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollFittingS.selectNum > 0)
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LEFT] == TRUE)
						{
							
						}
						else
							xDragScrollFittingS.speed = 320;
					}
					else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RIGHT] == TRUE)
						{
							
						}
						else
							xDragScrollFittingS.speed = -320;
					}
					else
					{
						
						if(xDragScrollFittingS.pos == 0 && xDragScrollFittingS.speed == 0)
						{							
							isSelectCatalogS = FALSE;
							selectCatalogSNum = 0;
							for(int i=0;i<8;i++)
							{
								if(touchCheck(&xTouchFittingS[i]) == TRUE)
								{
									isSelectCatalogS = TRUE;
									selectCatalogSNum = i;
									break;
								}
							}
							if(selectCatalogSNum+(xDragScrollFittingS.selectNum*8) >= xFitting.totalNumS)
								isSelectCatalogS = FALSE;
							
							int selectFittingTemp = selectCatalogSNum+(xDragScrollFittingS.selectNum*8);
							

							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_FITTING] == TRUE)
							{
								isSelectCatalogS = FALSE;
							}
							
							if(isSelectCatalogS == TRUE)
							{
								playSnd(SND_FITTING);
								int totalLayer = 0;
								int layerInfo[20];
								int slotCode;
								M_Boolean isAdd = FALSE;
								for(int i=0;i<xFitting.totalNumS;i++)
								{
									slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
									setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
									
									isAdd = FALSE;
									for(int k=0;k<totalLayer;k++)
									{
										if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
										{
											isAdd = TRUE;
											break;
										}
										else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
										{
											isAdd = TRUE;
											for(int kk=totalLayer;kk>k;kk--)
											{
												layerInfo[kk] = layerInfo[kk-1];
											}
											layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
											totalLayer++;
											break;
										}
									}
									
									if(isAdd == FALSE)
									{
										layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
									}
								}
								
								xFitting.selectSlot = selectFittingTemp;
								setMapData(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
								//실제적인 처리를 해주자
								
								//선택된게 장착중일때는 바로 해제
								if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code)
								{
									xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = DONT;
									xFitting.selectSlot = DONT;
								}
								//선택된곳에 이미 다른레이어 존재
								else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
								{
									
								}
								else if(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].isModelUse == TRUE)
								{
									
								}
								//선택이 되어있다면 무언가 있다면 변경
								else if(xFitting.selectSlot == selectFittingTemp && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
								{
									xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
									xFitting.selectSlot = DONT;
								}
								else if(xFitting.xF[xFitting.gender].layeredNum >= (xModelData[xInventoryModel[xModelFitting.inventoryNum].code].layeredNum+getModelLayered(xModelFitting.inventoryNum,0)))
								{
									setPopup(POPUP_FITTING_LAYEREDERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
									xFitting.selectSlot = DONT;
								}
								//장착할려는 부위에 아무것도 없다면 바로 장착
								else if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == DONT)
								{
									xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
								}
								//선택이 안되어있다면 그냥 선택으로만
								else
								{
									xFitting.selectSlot = selectFittingTemp;
								}
							}
						}
					}
				}				
				break;
			case MODELCOLLECT_STATE_HELP:
				if(type == MH_KEY_PRESSEVENT)
				{
					isKeyEvent = FALSE;
					for(int i=0;i<2;i++)
					{
						if(touchCheck(&xModel.xTouchHelpTab[i]) == TRUE)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
						}
					}
					
					if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xModel.selectHelpTab = keyEventNum;
					}
					else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xModel.state = MODELCOLLECT_STATE_MAIN;
					}
				}
				break;
			case MODELCOLLECT_STATE_MAINGIFTRESULT:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xModel.state = MODELCOLLECT_STATE_MAIN;
						
						
						xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
						int giftNum = getModelGiftNum(xModelMainSlot[xModel.selectMainSlot].inventoryNum,0);
						
						switch(xModelData[xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].code].giftType)
						{
						case MODEL_GIFTTYPE_GOLD:
							setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_GOLD, giftNum);
							setMoney(giftNum);
							setQuest(78, giftNum, DONT);
							break;
						case MODEL_GIFTTYPE_LOOK:
							setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_LOOK, giftNum);
							setCash(giftNum);
							break;
						case MODEL_GIFTTYPE_CANDY:
							setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_CANDY, giftNum);
							setTired(giftNum);
							setQuest(98, giftNum, DONT);
							break;
						case MODEL_GIFTTYPE_EXP:
							setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_EXP, giftNum);
							setExp(giftNum);
							setQuest(79, giftNum, DONT);
							break;
						}
						setQuest(91, 1, DONT);
						
						xModelMainSlot[xModel.selectMainSlot].state = MODELMAINSLOT_STATE_WAIT;
						////////////////////////////////////////////
						xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xModel.selectMainSlot;
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODELMAIN, FALSE);
						///////////////////////////////////////////
						////////////////////////////////////////////////////////////////////////
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
						////////////////////////////////////////////////////////////////////////
						setQuest(67,1,DONT);
					}
				}
				break;
			case MODELCOLLECT_STATE_MAINGIFTINFO:
				if(type == MH_KEY_PRESSEVENT)
				{
					
					isSelectSlot = FALSE;
					selectSlotNum = 0;
					xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
					
					for(int i=0;i<xModelData[xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].code].totalSkillNum;i++)
					{
						if(touchCheck(&xCollection.xTouchSkill[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isSelectSlot = TRUE;
							selectSlotNum = i;
							break;
						}
					}
					
					
					
					if(isSelectSlot == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						if(xCollection.selectSkill != selectSlotNum)
							xCollection.selectSkill = selectSlotNum;
						else
							xCollection.selectSkill = DONT;
					}
					else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xModel.state = MODELCOLLECT_STATE_MAIN;
						
					}
					else if(touchCheck(&xModel.xTouchGiftFastCash) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
											
						
						int endTime = xModelMainSlot[xModel.selectMainSlot].endTime - xCalendar.nowTime;
						int fastCash = getFastTimeCash(endTime);
						
						if(xSaveTemp.cash.oriData < fastCash)
						{
							setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
						}
						else
						{
							xModel.state = MODELCOLLECT_STATE_MAIN;
							
							setCash(-fastCash);
							setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_LOOK, fastCash);
							xModelMainSlot[xModel.selectMainSlot].endTime = xCalendar.nowTime-100;
							////////////////////////////////////////////
							xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xModel.selectMainSlot;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODELMAIN, FALSE);
							///////////////////////////////////////////
							///////////////////////////////////////////
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
							///////////////////////////////////////////
							setFiveRocksCustom("즉시완료","즉시완료횟수","모델즉시완료","NULL",1);
						}
					}
				}
				break;
			case MODELCOLLECT_STATE_MAINUPGRADE:
			case MODELCOLLECT_STATE_LISTUPGRADE:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						int per = 0;
						int price = 0;
						if(xModelUpGrade.selectSlot != DONT)
						{
//							per = getModelUpgradePer(xModelUpGrade.inventoryNum,xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]);
//							price = getModelUpgradePrice(xModelUpGrade.inventoryNum,xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]);
						}
						
						if(xSaveTemp.money.oriData < price)
						{
							setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
						}
						else
						{
							switch(xModelUpGrade.upgradeType)
							{
							case 0:
								if(xInventoryModel[xModelUpGrade.inventoryNum].upGrade < xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax && xModelUpGrade.selectSlot >= 0 && xModelUpGrade.selectSlot < xModelUpGrade.totalModelList)
								{
									xModelUpGrade.isUpgrade = TRUE;
									xModelUpGrade.anyCnt = 0;
									xModelUpGrade.upgradeState = MODELUPGRADE_STATE_SLOTMOVE;
								}
								break;
							case 1:
								if(xModelUpGrade.selectSlot >= 0 && xModelUpGrade.selectSlot < xModelUpGrade.totalModelList)
								{
									xModelUpGrade.isUpgrade = TRUE;
									xModelUpGrade.anyCnt = 0;
									xModelUpGrade.upgradeState = MODELUPGRADE_STATE_SLOTMOVE;
								}
								break;
							}
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
												
						switch(xModel.state)
						{
						case MODELCOLLECT_STATE_MAINUPGRADE:
							xModel.state = MODELCOLLECT_STATE_MAIN;
							break;
						case MODELCOLLECT_STATE_LISTUPGRADE:
							xModel.state = MODELCOLLECT_STATE_LIST;
							break;
						}
						xWorldMap.isKeyReturn = TRUE;
						xModel.inventoryNum = DONT;
						
//						sortModelList();
//						setModelList(xModel.listTabNum);
						
					}
					else
					{
						dragScrollKeyPrc(&xModelUpGrade.xDragScrollS,0);
					}
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xModelUpGrade.xDragScrollS.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xModelUpGrade.xDragScrollS,1);
					}
					else
					{
						isKeyEvent = FALSE;
						keyEventNum = 0;
						for(int i=0;i<4;i++)
						{
							if(touchCheck(&xModelUpGrade.xTouchSelectSlot[i]) == TRUE)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
							}
						}
												
						if(isKeyEvent == TRUE)
						{
							if(xModelUpGrade.selectSlot == keyEventNum+xModelUpGrade.xDragScrollS.selectNum)
								xModelUpGrade.selectSlot = DONT;
							else
								xModelUpGrade.selectSlot = keyEventNum+xModelUpGrade.xDragScrollS.selectNum;
							if(xModelUpGrade.selectSlot < 0 || xModelUpGrade.selectSlot >= xModelUpGrade.xDragScrollS.totalNum)
								xModelUpGrade.selectSlot = DONT;
								
						}
					}
					xModelUpGrade.xDragScrollS.touchXpos = DONT;
					xModelUpGrade.xDragScrollS.touchYpos = DONT;
					xModelUpGrade.xDragScrollS.touchXposBefore = DONT;
					xModelUpGrade.xDragScrollS.touchYposBefore = DONT;
				}
				break;
			case MODELCOLLECT_STATE_SELECTMODEL:
			case MODELCOLLECT_STATE_LIST:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xModel.xTouchCastingBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_CASTING] == TRUE)
						{
							
						}
						else
						{
						
							makeModelShopNpc();
							
							switch(xModel.state)
							{
							case MODELCOLLECT_STATE_SELECTMODEL:
								xModel.state = MODELCOLLECT_STATE_SELECTMODELCASTING;
								break;
							case MODELCOLLECT_STATE_LIST:
								xModel.state = MODELCOLLECT_STATE_LISTCASTING;
								break;
							}
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_SELECTMODELEXIT] == TRUE)
						{
							
						}
						else
						{
							xModel.state = MODELCOLLECT_STATE_MAIN;
						}
					}
					else
					{
						dragScrollKeyPrc(&xModel.xDragScrollS,0);
					}
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xModel.xDragScrollS.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xModel.xDragScrollS,1);
					}
					else
					{
						isKeyEvent = FALSE;
						keyEventNum = 0;
						
						for(int i=0;i<6;i++)
						{
							if(touchCheck(&xModel.xTouchSelectSlot[i]) == TRUE)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
								break;
							}
						}
						
						xModel.selectListSlot = keyEventNum+xModel.xDragScrollS.selectNum;
						
						if(xModel.selectListSlot < 0 || xModel.selectListSlot >= xModel.xDragScrollS.totalNum)
							isKeyEvent = FALSE;
						if(isKeyEvent == TRUE)
						{
							
							switch(xModel.state)
							{
							case MODELCOLLECT_STATE_SELECTMODEL:
								xModel.state = MODELCOLLECT_STATE_MAIN;
								xModelMainSlot[xModel.selectMainSlot].state = MODELMAINSLOT_STATE_WAIT;
								xModelMainSlot[xModel.selectMainSlot].modelKey = xInventoryModel[xModel.listNumSlot[xModel.selectListSlot]].key;
								////////////////////////////////////////////
								xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xModel.selectMainSlot;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODELMAIN, FALSE);
								///////////////////////////////////////////
								break;
							case MODELCOLLECT_STATE_LIST:
								xModel.state = MODELCOLLECT_STATE_LISTINFO;
								xCollection.selectSkill = DONT;
								xModel.infoInventoryNum = getModelKeyToSlotNum(xInventoryModel[xModel.listNumSlot[xModel.selectListSlot]].key);
								break;
							}
						}
					}
					xModel.xDragScrollS.touchXpos = DONT;
					xModel.xDragScrollS.touchYpos = DONT;
					xModel.xDragScrollS.touchXposBefore = DONT;
					xModel.xDragScrollS.touchYposBefore = DONT;
				}
				break;
			}
			break;
		case WORLDMAP_STATE_STAFFMAKE:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					
					int strByte = getStringByte(xStaffMake.strName);
					int kor = strByte/1000;
					int eng = strByte%1000;
					int korEng = kor+eng;
					
					//한글 1자~6자
					//영문 2자~8자
					
					M_Boolean isCheck = FALSE;
					if(kor > 0)
					{
						if(korEng < 1 || korEng > 6)
						{
							isCheck = TRUE;
						}
					}
					else
					{
						if(korEng < 2 || korEng > 8)
						{
							isCheck = TRUE;
						}
					}
					
					if(isCheck == TRUE)
					{
						setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
						sprintf(xPopup.strText, "한글(1~6),영문(2~8)제한");
					}
					else
					{
						
						if(xQuestTuto.state == QUEST_TUTO_KEY)
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_0_PAYMENT1F_MAKETOUCH:
							case TUTO_0_SHOPASSISTANT1F_MAKETOUCH:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
						
						staffMakeFreeLoad(FALSE);
						playSnd(SND_MENU_OK);
						xWorldMap.state = WORLDMAP_STATE_PLAY;
						switch(xStaffMake.type)
						{
						case STAFF_SLOT_PAYMENTASSISTANT_1F:
							sprintf(xPaymentAssistant[0].strName, "%s",xStaffMake.strName);
							xPaymentAssistant[0].gender = xStaffMake.sex;
							memcpy(&xPaymentAssistant[0].xF,&xStaffMake.xF[xStaffMake.sex],sizeof(xStaffMake.xF[xStaffMake.sex]));
							memcpy(&xPaymentAssistant[0].xFace,&xStaffMake.xFace[xStaffMake.sex],sizeof(xStaffMake.xFace[xStaffMake.sex]));
							break;
						case STAFF_SLOT_SHOPASSISTANT1_1F:
							sprintf(xShopAssistant[0][0].strName, "%s",xStaffMake.strName);
							xShopAssistant[0][0].gender = xStaffMake.sex;
							memcpy(&xShopAssistant[0][0].xF,&xStaffMake.xF[xStaffMake.sex],sizeof(xStaffMake.xF[xStaffMake.sex]));
							memcpy(&xShopAssistant[0][0].xFace,&xStaffMake.xFace[xStaffMake.sex],sizeof(xStaffMake.xFace[xStaffMake.sex]));
							break;
						case STAFF_SLOT_PAYMENTASSISTANT_2F:
							sprintf(xPaymentAssistant[1].strName, "%s",xStaffMake.strName);
							xPaymentAssistant[1].gender = xStaffMake.sex;
							memcpy(&xPaymentAssistant[1].xF,&xStaffMake.xF[xStaffMake.sex],sizeof(xStaffMake.xF[xStaffMake.sex]));
							memcpy(&xPaymentAssistant[1].xFace,&xStaffMake.xFace[xStaffMake.sex],sizeof(xStaffMake.xFace[xStaffMake.sex]));
							break;
						case STAFF_SLOT_SHOPASSISTANT1_2F:
							sprintf(xShopAssistant[1][0].strName, "%s",xStaffMake.strName);
							xShopAssistant[1][0].gender = xStaffMake.sex;
							memcpy(&xShopAssistant[1][0].xF,&xStaffMake.xF[xStaffMake.sex],sizeof(xStaffMake.xF[xStaffMake.sex]));
							memcpy(&xShopAssistant[1][0].xFace,&xStaffMake.xFace[xStaffMake.sex],sizeof(xStaffMake.xFace[xStaffMake.sex]));
							break;
						case STAFF_SLOT_PAYMENTASSISTANT_3F:
							sprintf(xPaymentAssistant[2].strName, "%s",xStaffMake.strName);
							xPaymentAssistant[2].gender = xStaffMake.sex;
							memcpy(&xPaymentAssistant[2].xF,&xStaffMake.xF[xStaffMake.sex],sizeof(xStaffMake.xF[xStaffMake.sex]));
							memcpy(&xPaymentAssistant[2].xFace,&xStaffMake.xFace[xStaffMake.sex],sizeof(xStaffMake.xFace[xStaffMake.sex]));
							break;
						case STAFF_SLOT_SHOPASSISTANT1_3F:
							sprintf(xShopAssistant[2][0].strName, "%s",xStaffMake.strName);
							xShopAssistant[2][0].gender = xStaffMake.sex;
							memcpy(&xShopAssistant[2][0].xF,&xStaffMake.xF[xStaffMake.sex],sizeof(xStaffMake.xF[xStaffMake.sex]));
							memcpy(&xShopAssistant[2][0].xFace,&xStaffMake.xFace[xStaffMake.sex],sizeof(xStaffMake.xFace[xStaffMake.sex]));
							break;
						}
						
						
						
						//////////////////////////////////////////////////////////////////////////////////					
						switch(xStaffMake.type)
						{
							case STAFF_SLOT_PAYMENTASSISTANT_1F:
								xEventQueueNet.floor[xEventQueueNet.totalNum] = 0;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xPaymentAssistant[0].strName);
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = xPaymentAssistant[0].xFace.hairNum;
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xPaymentAssistant[0].xFace.faceNum;
								
								for(int f=0;f<16;f++)
								{
									if(xPaymentAssistant[0].xF.code[f] != DONT)
									{
										switch(xPaymentAssistant[0].xF.code[f]/1000)
										{
										case 1://상의
											xEventQueueNet.layer[xEventQueueNet.totalNum][2] = xPaymentAssistant[0].xF.code[f];
											break;
										case 2://하의
											xEventQueueNet.layer[xEventQueueNet.totalNum][3] = xPaymentAssistant[0].xF.code[f];
											break;
										case 3://원피스
											xEventQueueNet.layer[xEventQueueNet.totalNum][4] = xPaymentAssistant[0].xF.code[f];
											break;
										case 4://신발
											xEventQueueNet.layer[xEventQueueNet.totalNum][5] = xPaymentAssistant[0].xF.code[f];
											break;
										}
									}
								}
								break;
							case STAFF_SLOT_SHOPASSISTANT1_1F:
								xEventQueueNet.floor[xEventQueueNet.totalNum] = 0;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xShopAssistant[0][0].strName);
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = xShopAssistant[0][0].xFace.hairNum;
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xShopAssistant[0][0].xFace.faceNum;
								for(int f=0;f<16;f++)
								{
									if(xShopAssistant[0][0].xF.code[f] != DONT)
									{
										switch(xShopAssistant[0][0].xF.code[f]/1000)
										{
											case 1://상의
												xEventQueueNet.layer[xEventQueueNet.totalNum][2] = xShopAssistant[0][0].xF.code[f];
												break;
											case 2://하의
												xEventQueueNet.layer[xEventQueueNet.totalNum][3] = xShopAssistant[0][0].xF.code[f];
												break;
											case 3://원피스
												xEventQueueNet.layer[xEventQueueNet.totalNum][4] = xShopAssistant[0][0].xF.code[f];
												break;
											case 4://신발
												xEventQueueNet.layer[xEventQueueNet.totalNum][5] = xShopAssistant[0][0].xF.code[f];
												break;
										}
									}
								}
								break;
							case STAFF_SLOT_PAYMENTASSISTANT_2F:
								xEventQueueNet.floor[xEventQueueNet.totalNum] = 1;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xPaymentAssistant[1].strName);
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = xPaymentAssistant[1].xFace.hairNum;
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xPaymentAssistant[1].xFace.faceNum;
								for(int f=0;f<16;f++)
								{
									if(xPaymentAssistant[1].xF.code[f] != DONT)
									{
										switch(xPaymentAssistant[1].xF.code[f]/1000)
										{
											case 1://상의
												xEventQueueNet.layer[xEventQueueNet.totalNum][2] = xPaymentAssistant[1].xF.code[f];
												break;
											case 2://하의
												xEventQueueNet.layer[xEventQueueNet.totalNum][3] = xPaymentAssistant[1].xF.code[f];
												break;
											case 3://원피스
												xEventQueueNet.layer[xEventQueueNet.totalNum][4] = xPaymentAssistant[1].xF.code[f];
												break;
											case 4://신발
												xEventQueueNet.layer[xEventQueueNet.totalNum][5] = xPaymentAssistant[1].xF.code[f];
												break;
										}
									}
								}
								break;
							case STAFF_SLOT_SHOPASSISTANT1_2F:
								xEventQueueNet.floor[xEventQueueNet.totalNum] = 1;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xShopAssistant[1][0].strName);
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = xShopAssistant[1][0].xFace.hairNum;
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xShopAssistant[1][0].xFace.faceNum;
								for(int f=0;f<16;f++)
								{
									if(xShopAssistant[1][0].xF.code[f] != DONT)
									{
										switch(xShopAssistant[1][0].xF.code[f]/1000)
										{
											case 1://상의
												xEventQueueNet.layer[xEventQueueNet.totalNum][2] = xShopAssistant[1][0].xF.code[f];
												break;
											case 2://하의
												xEventQueueNet.layer[xEventQueueNet.totalNum][3] = xShopAssistant[1][0].xF.code[f];
												break;
											case 3://원피스
												xEventQueueNet.layer[xEventQueueNet.totalNum][4] = xShopAssistant[1][0].xF.code[f];
												break;
											case 4://신발
												xEventQueueNet.layer[xEventQueueNet.totalNum][5] = xShopAssistant[1][0].xF.code[f];
												break;
										}
									}
								}
								break;
							case STAFF_SLOT_PAYMENTASSISTANT_3F:
								xEventQueueNet.floor[xEventQueueNet.totalNum] = 2;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xPaymentAssistant[2].strName);
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = xPaymentAssistant[2].xFace.hairNum;
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xPaymentAssistant[2].xFace.faceNum;
								for(int f=0;f<16;f++)
								{
									if(xPaymentAssistant[2].xF.code[f] != DONT)
									{
										switch(xPaymentAssistant[2].xF.code[f]/1000)
										{
											case 1://상의
												xEventQueueNet.layer[xEventQueueNet.totalNum][2] = xPaymentAssistant[2].xF.code[f];
												break;
											case 2://하의
												xEventQueueNet.layer[xEventQueueNet.totalNum][3] = xPaymentAssistant[2].xF.code[f];
												break;
											case 3://원피스
												xEventQueueNet.layer[xEventQueueNet.totalNum][4] = xPaymentAssistant[2].xF.code[f];
												break;
											case 4://신발
												xEventQueueNet.layer[xEventQueueNet.totalNum][5] = xPaymentAssistant[2].xF.code[f];
												break;
										}
									}
								}
								break;
							case STAFF_SLOT_SHOPASSISTANT1_3F:
								xEventQueueNet.floor[xEventQueueNet.totalNum] = 2;
								xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xShopAssistant[2][0].strName);
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = xShopAssistant[2][0].xFace.hairNum;
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xShopAssistant[2][0].xFace.faceNum;
								for(int f=0;f<16;f++)
								{
									if(xShopAssistant[2][0].xF.code[f] != DONT)
									{
										switch(xShopAssistant[2][0].xF.code[f]/1000)
										{
										case 1://상의
											xEventQueueNet.layer[xEventQueueNet.totalNum][2] = xShopAssistant[2][0].xF.code[f];
											break;
										case 2://하의
											xEventQueueNet.layer[xEventQueueNet.totalNum][3] = xShopAssistant[2][0].xF.code[f];
											break;
										case 3://원피스
											xEventQueueNet.layer[xEventQueueNet.totalNum][4] = xShopAssistant[2][0].xF.code[f];
											break;
										case 4://신발
											xEventQueueNet.layer[xEventQueueNet.totalNum][5] = xShopAssistant[2][0].xF.code[f];
											break;
										}
									}
								}
								break;
						}
											
						xEventQueueNet.sex[xEventQueueNet.totalNum] = xStaffMake.sex;
						xEventQueueNet.open[xEventQueueNet.totalNum] = 0;
						
						
						if(xEventQueueNet.layer[xEventQueueNet.totalNum][2] == 0)
							xEventQueueNet.layer[xEventQueueNet.totalNum][2] = DONT;
						if(xEventQueueNet.layer[xEventQueueNet.totalNum][3] == 0)
							xEventQueueNet.layer[xEventQueueNet.totalNum][3] = DONT;
						if(xEventQueueNet.layer[xEventQueueNet.totalNum][4] == 0)
							xEventQueueNet.layer[xEventQueueNet.totalNum][4] = DONT;
						if(xEventQueueNet.layer[xEventQueueNet.totalNum][5] == 0)
							xEventQueueNet.layer[xEventQueueNet.totalNum][5] = DONT;
						
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_STAFF, TRUE);
						//////////////////////////////////////////////////////////////////////////////////

						
					}
				}
				else if(touchCheck(&xStaffMake.xTouchName) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
                    
                    setTextField(TEXTBOX_TYPE_STAFFNAME, lcdW/2, lcdH+999, 200, 25);
                    
				}
				else if(touchCheck(&xStaffMake.xTouchSex[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xStaffMake.sex = 0;
				}
				else if(touchCheck(&xStaffMake.xTouchSex[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xStaffMake.sex = 1;					
				}
			}
			break;
		case WORLDMAP_STATE_QUESTINFO:
			switch(xQuestInfo.state)
			{
			case QUESTINFO_STATE_GIFTPOPUP:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xQuestInfo.state = QUESTINFO_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
				}
				break;
			case QUESTINFO_STATE_PLAY:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.state = WORLDMAP_STATE_PLAY;
						xWorldMap.isKeyReturn = TRUE;
					}
					else if(touchCheck(&xQuestInfo.xTouchGiftIcon) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						/*
						playSnd(SND_MENU_OK);
						xQuestInfo.state = QUESTINFO_STATE_GIFTPOPUP;
						xWorldMap.isKeyReturn = TRUE;
						 */
					}
					else if(touchCheck(&xQuestInfo.xTouchFastCash) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						int totalCheck = getQuestCheckTotalNum(xQuestInfo.selectSlot);
						M_Boolean isClear[3];
						isClear[0] = TRUE;
						isClear[1] = TRUE;
						isClear[2] = TRUE;
						int fastCash;
						
						for(int i=0;i<totalCheck;i++)
						{
							switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
							{
							case QUEST_TYPE_MAIN:
								isClear[i] = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[i];
								break;
							case QUEST_TYPE_NORMAL:
								isClear[i] = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[i];
								break;
							}
						}
						
						switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
						{
						case QUEST_TYPE_MAIN:
							fastCash = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].fastCash;
							break;
						case QUEST_TYPE_NORMAL:
							fastCash = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].fastCash;
							break;
						}
																		
						if(isClear[0] == TRUE && isClear[1] == TRUE && isClear[2] == TRUE)
						{
							//보상받기
							xWorldMap.isQuestResult = TRUE;
							playSnd(SND_QUEST_RESULT);
						}
						else if(fastCash > xSaveTemp.cash.oriData)
							setPopup(POPUP_CASHEMPTY, playState, playState, 0, fastCash);
						else if(fastCash > 0)
						{
							//캐쉬사용
							setPopup(POPUP_QUEST_FASTCASHYESNO, playState, playState, 0, fastCash);
						}						
					}
					else if(touchCheck(&xQuestInfo.xTouchMove[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						M_Boolean isClear;
						int questType;
						int questCode;
						switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
						{
						case QUEST_TYPE_MAIN:
							isClear = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[0];
							questType = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[0];
							questCode = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkCode[0];
							break;
						case QUEST_TYPE_NORMAL:
							isClear = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[0];
							questType = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[0];
							questCode = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkCode[0];
							break;
						}
						
						
						if(isClear == FALSE)
							questShortCut(questType, TRUE,questCode);
					}
					else if(touchCheck(&xQuestInfo.xTouchMove[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						M_Boolean isClear;
						int questType;
						int questCode;
						switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
						{
						case QUEST_TYPE_MAIN:
							isClear = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[1];
							questType = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[1];
							questCode = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkCode[1];
							break;
						case QUEST_TYPE_NORMAL:
							isClear = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[1];
							questType = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[1];
							questCode = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkCode[1];
							break;
						}
						
						if(isClear == FALSE)
							questShortCut(questType, TRUE,questCode);
					}
					else if(touchCheck(&xQuestInfo.xTouchMove[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						M_Boolean isClear;
						int questType;
						int questCode;
						switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
						{
						case QUEST_TYPE_MAIN:
							isClear = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[2];
							questType = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[2];
							questCode = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkCode[2];
							break;
						case QUEST_TYPE_NORMAL:
							isClear = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[2];
							questType = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[2];
							questCode = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkCode[2];
							break;
						}
						
						if(isClear == FALSE)
							questShortCut(questType, TRUE,questCode);
					}
				}
				break;
			}
			break;
		case WORLDMAP_STATE_MAIL:
			switch(xMail.state)
			{
			case MAIL_STATE_TEXTBOX:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xMail.state = MAIL_STATE_MAIN;
						
						if(strlen(xMail.strTextBox) > 0)
						{
							//메일리스트추가처리해주기
							/////////////////////////////////////////////////////
							if(xWorldMap.isFriendMap == FALSE)
								xEventQueueNet.key[xEventQueueNet.totalNum] = xNetData.userNum;
							else
								xEventQueueNet.key[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
							
							xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
							xEventQueueNet.action[xEventQueueNet.totalNum] = xMail.isSecret == TRUE?1:0;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMAIL, TRUE);
							/////////////////////////////////////////////////////
							
							if(xWorldMap.isFriendMap == TRUE)
								setQuest(27, 1, DONT);
							
							
							setFiveRocksCustom("방명록","글쓰기횟수","NULL","NULL",1);
						}
						xWorldMap.isKeyReturn = TRUE;
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xMail.state = MAIL_STATE_MAIN;
						xWorldMap.isKeyReturn = TRUE;
					}
				}
				break;
			case MAIL_STATE_GIFT_RESULT:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
                    playSnd(SND_MENU_OK);
                    xMail.state = MAIL_STATE_MAIN;
                    xWorldMap.isKeyReturn = TRUE;
				}
				break;
			case MAIL_STATE_MAIN:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						if(xWorldMap.isFriendMap == FALSE && xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_EXIT] == TRUE)
						{
						}
						else if(xWorldMap.isFriendMap == TRUE && xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_EXITFRIEND] == TRUE)
						{
						}
						else
						{
							mailFreeLoad(FALSE);
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							
							
							xOrder.totalNumListDataFriend = 0;
							xOrder.totalNumListData = 0;
							xOrder.isNetLoad = FALSE;
							addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
						}
					}
					else if((xMail.selectTab == 0||xMail.selectTab == 1) && touchCheck(&xMail.xTouchSendBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xWorldMap.isFriendMap == FALSE && xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_SEND] == TRUE)
						{
						}
						else if(xWorldMap.isFriendMap == TRUE && xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_SENDFRIEND] == TRUE)
						{
						}
						else
						{
							if(strlen(xMail.strTextBox) > 0)
							{
								//메일리스트추가처리해주기
								/////////////////////////////////////////////////////
								switch(xMail.selectTab)
								{
								case 0:
									if(xWorldMap.isFriendMap == FALSE)
										xEventQueueNet.key[xEventQueueNet.totalNum] = xNetData.userNum;
									else
										xEventQueueNet.key[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
									break;
								case 1:
										xEventQueueNet.key[xEventQueueNet.totalNum] = xMail.pmUserId;
									break;
								}
								xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
								xEventQueueNet.action[xEventQueueNet.totalNum] = xMail.isSecret == TRUE?1:0;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMAIL, TRUE);
								/////////////////////////////////////////////////////
								
								if(xWorldMap.isFriendMap == TRUE)
								{
									setQuest(27, 1, DONT);
									
									if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
									{
										switch(xQuestTuto.nowNum)
										{
										case TUTO_17_MAIL_FRIEND:
											xQuestTuto.isTutoClean = TRUE;
											break;
										}
									}
									
								}
							}
						}
					}
					else if((xMail.selectTab == 0||xMail.selectTab == 1) && touchCheck(&xMail.xTouchSecret) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xMail.isSecret == TRUE)
							xMail.isSecret = FALSE;
						else
							xMail.isSecret = TRUE;
					}
					else if((xMail.selectTab == 0||xMail.selectTab == 1) && touchCheck(&xMail.xTouchTextBox) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xWorldMap.isFriendMap == FALSE && xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_TEXTBOX] == TRUE)
						{
						}
						else if(xWorldMap.isFriendMap == TRUE && xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_TEXTBOXFRIEND] == TRUE)
						{
						}
						else
						{
                            setTextField(TEXTBOX_TYPE_MAIL, lcdW/2, lcdH+999, 200, 25);
						}
					}
					else if(xMail.selectTab != 1 && xWorldMap.isFriendMap == FALSE && touchCheck(&xMail.xTouchToday) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_TODAY] == TRUE)
						{
						}
						else
						{
                            setTextField(TEXTBOX_TYPE_MAILTODAY, lcdW/2, lcdH+999, 200, 25);
						}
					}
					else if(xWorldMap.isAppReview == FALSE && xWorldMap.isFriendMap == TRUE && touchCheck(&xMail.xTouchCashGiftBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						xWorldMap.isKeyReturn = TRUE;
						xCashGift.friendUserNum = xFriendData[xFriendMap.selectDataSlotNum].userNum;
						setCashGift();
					}
					else if(xWorldMap.isFriendMap == FALSE && xMail.selectTab != 0 && touchCheck(&xMail.xTouchTab[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						xWorldMap.isKeyReturn = TRUE;
						playSnd(SND_MENU_OK);
						xMail.selectTab = 0;
						xMail.totalMailSlot = 0;
						xMail.rowNum = 0;
						xMail.pageNum = 0;
					}
					else if(xWorldMap.isFriendMap == FALSE && xMail.selectTab != 1 && touchCheck(&xMail.xTouchTab[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xMail.selectTab = 1;
						xMail.totalMailSlot = 0;
						xMail.rowNum = 0;
						xMail.pageNum = 0;
					}
					else if(xWorldMap.isFriendMap == FALSE && xMail.selectTab != 2 && touchCheck(&xMail.xTouchTab[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_GIFTTAB] == TRUE)
						{
						}
						else
						{
							xMail.selectTab = 2;
							xMail.totalMailSlot = 0;
							xMail.rowNum = 0;
							xMail.pageNum = 0;
						}						
					}
					else
						dragScrollKeyPrc(&xMail.xDragScrollSlot,2);
					
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xMail.xDragScrollSlot.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xMail.xDragScrollSlot,3);
					}
					else
					{
						isKeyEvent = FALSE;
						keyEventNum = 0;
						
						switch(xMail.selectTab)
						{
						case 0:
						case 1:
							for(int i=0;i<3;i++)
							{
								//xTouchProFileBtn
								if(touchCheck(&xMail.xTouchDelBtn[i]) == TRUE)
								{
									isKeyEvent = TRUE;
									keyEventNum = i;
									break;
								}
							}
							break;
						case 2:
							for(int i=0;i<4;i++)
							{
								//xTouchProFileBtn
								if(touchCheck(&xMail.xTouchGiftBtn[i]) == TRUE)
								{
									isKeyEvent = TRUE;
									keyEventNum = i;
									break;
								}
							}
							break;
						}
												
						if(isKeyEvent == TRUE)
						{
							playSnd(SND_MENU_OK);
							int selectSlot = keyEventNum+xMail.xDragScrollSlot.selectNum;
							
							
							if(selectSlot < xMail.xDragScrollSlot.totalNum)
							{
								switch(xMail.selectTab)
								{
								case 0:
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_DEL] == TRUE)
									{
									}
									else
									{
										if(xWorldMap.isFriendMap == FALSE)
											setPopup(POPUP_MAIL_DELYESNO, playState, playState, 0, selectSlot);
										else
										{
											if(xFriendData[xMail.xMailSlot[selectSlot].friendDataSlotNum].userNum == xNetData.userNum)
												setPopup(POPUP_MAIL_DELYESNO, playState, playState, 0, selectSlot);
										}
									}
									break;
								case 1:
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_DEL] == TRUE)
									{
										
									}
									else
									{
										if(xFriendData[xMail.xMailSlot[selectSlot].friendDataSlotNum].userNum == xNetData.userNum)
											setPopup(POPUP_MAIL_DELYESNO, playState, playState, 0, selectSlot);
									}
									break;
								case 2:
                                        
									if(xMail.xMailSlot[selectSlot].isRecvOk == FALSE && xWorldMap.isNewModel == FALSE)
									{
                                        if(xMail.xMailSlot[selectSlot].giftType == 14 && xClub.fashionWeekPlayCount >= 10)
                                        {
                                            setPopup(POPUP_PANGTIMESMAXTIMESEXCEED, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                                        }
                                        else
                                        {

                                            xMail.xMailSlot[selectSlot].isRecvOk = TRUE;
                                            
                                            xMail.state = MAIL_STATE_GIFT_RESULT;
                                            xMail.selectSlot = selectSlot;
                                            xMail.bTemp=false;
                                            switch(xMail.xMailSlot[selectSlot].giftType)
                                            {
                                            case 0:	//의상 아이템
                                                setMapData(xMail.xMailSlot[selectSlot].giftValue.oriData);
                                                xInventoryFashion.isOpen[xMap.type][xMap.listNum] = TRUE;
                                                if(xFashionData[xMap.type][xMap.listNum].isStaff == 0)
                                                {
                                                    xSave.fashionNew[xMap.type][xMap.listNum] = 1;	//0:보통 1:new보여주기 2:확인한상태 3:완료
                                                    gameSave(SAVE_SLOT_GAME);
                                                }
                                                    
                                                inputInventoryFashion((xMap.type*1000)+xMap.listNum, xFashionData[xMap.type][xMap.listNum].makePoint);
                                                ////////////////////////////////////////////////////
                                                xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
                                                xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
                                                //패션수량추가
                                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
                                                //////////////////////////////////////////////////////
                                                break;
                                            case 1:	//인테리어
                                                //가구 넣어주기
                                                inputInventoryInterior(xMail.xMailSlot[selectSlot].giftValue.oriData);
                                                //////////////////////////////////////////////////////////////////////////////
                                                xEventQueueNet.code[xEventQueueNet.totalNum] = xMail.xMailSlot[selectSlot].giftValue.oriData;
                                                xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
                                                for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
                                                {
                                                    if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
                                                        xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
                                                }
                                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
                                                //////////////////////////////////////////////////////////////////////////////
                                                break;
                                            case 2:	//골드
                                                setMoney(xMail.xMailSlot[selectSlot].giftValue.oriData);
                                                break;
                                            case 3:	//룩
                                                setCash(xMail.xMailSlot[selectSlot].giftValue.oriData);
                                                if(xFriendData[xMail.xMailSlot[selectSlot].friendDataSlotNum].lv != 0)
                                                {
                                                    sprintf(xRocks.strTemp, "%s_%s_%d",xFriendData[xMail.xMailSlot[selectSlot].friendDataSlotNum].strNickName,xSaveTemp.strNickName,xMail.xMailSlot[selectSlot].giftValue.oriData);
                                                    setFiveRocksCustom("선물","선물받기",xRocks.strTemp,"NULL",1);
                                                }
                                                break;
                                            case 4:	//캔디(추가)
                                                setTired(xMail.xMailSlot[selectSlot].giftValue.oriData);
                                                break;
                                            case 5:	//일반 모델 캐스팅권(추가)
//                                                setNewModel(0);
                                                xMail.state = MAIL_STATE_MAIN;
                                                break;
                                            case 6:	//고급 모델 캐스팅권(추가)
//                                                setNewModel(1);
                                                xMail.state = MAIL_STATE_MAIN;
                                                break;
                                            case 7:	//유행 티켓(의상)
                                                xMail.state = MAIL_STATE_MAIN;
                                                setTrendTemp(0,1);
                                                playSnd(SND_TREND_POPUP);
                                                trendFreeLoad(TRUE);
                                                xWorldMap.isTrend = TRUE;
                                                xWorldMap.trendInType = 2;	//0오전1오후2그외
                                                xTrend.state = TREND_STATE_NEW;
                                                break;
                                            case 8:	//유행 티켓(잡화)
                                                xMail.state = MAIL_STATE_MAIN;
                                                setTrendTemp(1,1);
                                                playSnd(SND_TREND_POPUP);
                                                trendFreeLoad(TRUE);
                                                xWorldMap.isTrend = TRUE;
                                                xWorldMap.trendInType = 2;	//0오전1오후2그외
                                                xTrend.state = TREND_STATE_NEW;
                                                break;
                                            case 9:	//A급 모델 캐스팅권
//                                                setNewModel(3);
                                                xMail.state = MAIL_STATE_MAIN;
                                                break;
                                            case 10://S급 모델 캐스팅권
//                                                setNewModel(4);
                                                xMail.state = MAIL_STATE_MAIN;
                                                break;
                                            case 11://A~S급 모델 캐스팅권
//                                                setNewModel(2);
                                                xMail.state = MAIL_STATE_MAIN;
                                                break;
                                            case 12://경험치
                                                setExp(xMail.xMailSlot[selectSlot].giftValue.oriData);
                                                break;
                                            case 13://지정 모델 확정권
                                                xMail.giftModelCode = xMail.xMailSlot[selectSlot].giftValue.oriData;
//                                                setNewModel(5);
                                                xMail.state = MAIL_STATE_MAIN;
                                                break;
                                            case 14://허니팡 횟수 추가
                                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PANGTIMESRESET, TRUE);
                                                break;
                                            }
    //                                        //삭제하기
    //                                        /////////////////////////////////////////////////////////
    //                                        xEventQueueNet.key[xEventQueueNet.totalNum] = xMail.xMailSlot[selectSlot].key;
    //                                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_DELGIFT, TRUE);
    //                                        /////////////////////////////////////////////////////////
    //                                        ////////////////////////////////////////////////////////////
    //                                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
    //                                        ////////////////////////////////////////////////////////////
                                               //삭제하기
                                                /////////////////////////////////////////////////////////
                                                xEventQueueNet.key[xEventQueueNet.totalNum] = xMail.xMailSlot[selectSlot].key;
                                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_DELGIFT, TRUE);
                                                /////////////////////////////////////////////////////////
                                                ////////////////////////////////////////////////////////////
                                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
                                                ////////////////////////////////////////////////////////////
                                        }
									}
									break;
								}
							}							
						}
						else
						{
							isKeyEvent = FALSE;
							keyEventNum = 0;
							
							for(int i=0;i<3;i++)
							{
								if(touchCheck(&xMail.xTouchProFileBtn[i]) == TRUE)
								{
									isKeyEvent = TRUE;
									keyEventNum = i;
									break;
								}
							}
							
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_USERINFO] == TRUE)
							{
								isKeyEvent = FALSE;
							}
							
							if(isKeyEvent == TRUE)
							{								
								int selectSlot = keyEventNum+xMail.xDragScrollSlot.selectNum;
								if(selectSlot < xMail.xDragScrollSlot.totalNum)
								{
									playSnd(SND_MENU_OK);
									if(xFriendData[xMail.xMailSlot[selectSlot].friendDataSlotNum].userNum != xNetData.userNum)
									{
										xWorldMap.isMiniProfile = TRUE;
										xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
										xMiniProfile.friendDataSlotNum = xMail.xMailSlot[selectSlot].friendDataSlotNum;
										/////////////////////////////////////////
										xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
										addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
										/////////////////////////////////////////
									}
								}
							}
						}
					}
					xMail.xDragScrollSlot.touchXpos = DONT;
					xMail.xDragScrollSlot.touchYpos = DONT;
					xMail.xDragScrollSlot.touchXposBefore = DONT;
					xMail.xDragScrollSlot.touchYposBefore = DONT;
				}
				break;
			}
			break;
		case WORLDMAP_STATE_FRIENDORDERITEM:
			if(touchType == USER_POINT_PRESS_EVENT)
			{
				xWorldMap.isKeyReturn = TRUE;
				isSelectCatalogS = FALSE;
				selectCatalogSNum = 0;
				for(int i=0;i<7;i++)
				{
					if(touchCheck(&xTouchCatalogTabS[i]) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
					{
						isSelectCatalogS = TRUE;
						selectCatalogSNum = i;
						break;
					}
				}
				
				if(isSelectCatalogS == TRUE)
				{
					playSnd(SND_MENU_OK);
					xCatalog.selectTabS = selectCatalogSNum;
					setFriendOrderTab();
					xCatalog.selectSlot = DONT;
				}
				/*
				else if(touchCheck(&xModel.xTouchListTab[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xCatalog.isListOpen = (xCatalog.isListOpen == TRUE ? FALSE:TRUE);
					xWorldMap.isKeyReturn = TRUE;
				}
				else if(xCatalog.isListOpen == TRUE && touchCheck(&xModel.xTouchListTab[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xCatalog.isListOpen = FALSE;
					xCatalog.selectTabList = DONT;
					setFriendOrderTab();
				}
				else if(xCatalog.isListOpen == TRUE && touchCheck(&xModel.xTouchListTab[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xCatalog.isListOpen = FALSE;
					xCatalog.selectTabList = 0;
					setFriendOrderTab();
				}
				else if(xCatalog.isListOpen == TRUE && touchCheck(&xModel.xTouchListTab[4]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xCatalog.isListOpen = FALSE;
					xCatalog.selectTabList = 2;
					setFriendOrderTab();
				}
				*/
				else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					friendOrderItemFreeLoad(FALSE);
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
				}
				else
				{

					if(xDragScrollCatalogS.pos == 0 && xDragScrollCatalogS.speed == 0)
					{
						isSelectCatalogS = FALSE;
						selectCatalogSNum = 0;
						for(int i=0;i<8;i++)
						{
							if(touchCheck(&xTouchCatalogS[i]) == TRUE)
							{
								isSelectCatalogS = TRUE;
								selectCatalogSNum = i;
								
								break;
							}
						}
						if(selectCatalogSNum+(xDragScrollCatalogS.selectNum*8) >= xCatalog.totalSlotS)
							isSelectCatalogS = FALSE;
						
						if(isSelectCatalogS == TRUE)
						{
							playSnd(SND_MENU_OK);
							subTemp[1] = xCatalog.selectSlot;
							xCatalog.selectSlot = (selectCatalogSNum+xDragScrollCatalogS.selectNum*8);
							setMapData(xCatalog.xSlotS[xCatalog.selectSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
							
							if(subTemp[1] == xCatalog.selectSlot && touchCheck(&xTouchOrderMakeBtn[selectCatalogSNum]) == TRUE)
							{
								
								
								
								
								if(xSaveTemp.friendOrderNum+xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_SELECTITEM] <= 0)
								{
									setPopup(POPUP_ORDER_5LIMIT, playState, playState, 0, DONT);
								}
								else
								{
									xFriendData[xFriendMap.selectDataSlotNum].isKakao = checkKakaoFriend(xFriendData[xFriendMap.selectDataSlotNum].strKakaoId);
									if(xFriendData[xFriendMap.selectDataSlotNum].isKakao == TRUE)
									{
										//카톡친구
										setPopup(POPUP_KAKAOORDERITEM, playState, playState, 0, DONT);
									}
									else
									{
										orderSelectItemOk();
									}
								}
							}							
						}
						else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollCatalogS.selectNum > 0)
						{
							xDragScrollCatalogS.speed = 320;
						}
						else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollCatalogS.selectNum < xDragScrollCatalogS.totalNum-1)
						{
							xDragScrollCatalogS.speed = -320;
						}

					}
				}
			}
			break;
		case WORLDMAP_STATE_FRIENDORDER:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					friendOrderFreeLoad(FALSE);
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
				}
				else
					dragScrollKeyPrc(&xFriend.xDragScrollOrderList,2);
				
			}
			else if(type == MH_KEY_RELEASEEVENT)
			{
				if(xFriend.xDragScrollOrderList.touchXposBefore != DONT)
				{
					dragScrollKeyPrc(&xFriend.xDragScrollOrderList,3);
				}
				xFriend.xDragScrollOrderList.touchXpos = DONT;
				xFriend.xDragScrollOrderList.touchYpos = DONT;
				xFriend.xDragScrollOrderList.touchXposBefore = DONT;
				xFriend.xDragScrollOrderList.touchYposBefore = DONT;
			}
			break;
//		case WORLDMAP_STATE_FRIENDLIST:
//			switch(xFriend.state)
//			{
//			case FRIEND_STATE_ADD:
//				if(xFriend.isInvite == TRUE)
//				{
//					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
//					{
//						xFriend.isInvite = FALSE;
//					}
//					return;
//				}
//									
//				if(xKakaoData.inveiteKeyReturn == TRUE)
//					return;
//					
//				//추천친구
//				switch(xFriend.addFriendTab)
//				{
//				case 0:		// 추천친구
//					if(type == MH_KEY_PRESSEVENT)
//					{
//						
//						if(touchCheck(&xFriend.xTouchAddTab[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_FIND] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.totalNumListRanDom = 0;
//								xFriend.addFriendTab = 1;
//								xFriend.addState = FRIENDADD_STATE_PLAY;
//							}
//							
//							
//						}
//                        /*
//						else if(touchCheck(&xFriend.xTouchAddTab[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_KAKAOAPP] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 2;
//							}
//						}
//						else if(touchCheck(&xFriend.xTouchAddTab[3]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_KAKAO] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 3;
//							}
//						}
//                        */
//						else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_CLOSE] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.state = FRIEND_STATE_PLAY;
//								xFriend.totalNumList = 0;
//								xFriend.nowRowNumList = 0;
//								xFriend.nowPageNumList = 0;
//								xFriend.totalNumListFollow = 0;
//								xFriend.nowRowNumListFollow = 0;
//								xFriend.nowPageNumListFollow = 0;
//							}
//						}
//						else
//							dragScrollKeyPrc(&xFriend.xDragScrollRanDomList,2);							
//					}
//					else if(type == MH_KEY_RELEASEEVENT)
//					{
//						if(xFriend.xDragScrollRanDomList.touchXposBefore != DONT)
//						{
//							dragScrollKeyPrc(&xFriend.xDragScrollRanDomList,3);
//						}
//						else
//						{
//							isKeyEvent = FALSE;
//							keyEventNum = 0;
//							
//							for(int i=0;i<6;i++)
//							{
//								if(touchCheck(&xFriend.xTouchFriendAddBtn[i]) == TRUE)
//								{
//									isKeyEvent = TRUE;
//									keyEventNum = i;
//									break;
//								}
//							}
//							if(isKeyEvent == TRUE)
//							{
//								int selectSlot = keyEventNum+xFriend.xDragScrollRanDomList.selectNum;
//								
//								
//        
//								if(selectSlot >= 0 && selectSlot < xFriend.totalNumListRanDom)
//								{
//									playSnd(SND_MENU_OK);
//									if(xFriendData[xFriend.dataSlotNumListRanDom[selectSlot]].isAdd == FALSE)
//									{
//										if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_ADD] == TRUE)
//										{
//											
//										}
//										else
//										{
//											/////////////////////////////////
//											xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriend.dataSlotNumListRanDom[selectSlot]].userNum;
//											addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIEND, FALSE);
//											////////////////////////////////
//											xFriendData[xFriend.dataSlotNumListRanDom[selectSlot]].isAdd = TRUE;
//											
//											
//											if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//											{
//												if(xWorldMap.isFriendMap == FALSE)
//												{
//													switch(xQuestTuto.nowNum)
//													{
//													case TUTO_28_ADDFRIEND_ADDTOUCH:
//														xQuestTuto.isTutoClean = TRUE;
//														xQuestTuto.tempValue = xFriendData[xFriend.dataSlotNumListRanDom[selectSlot]].userNum;
//														break;
//													}
//												}
//											}
//										}
//									}
//								}
//							}
//						}
//						xFriend.xDragScrollRanDomList.touchXpos = DONT;
//						xFriend.xDragScrollRanDomList.touchYpos = DONT;
//						xFriend.xDragScrollRanDomList.touchXposBefore = DONT;
//						xFriend.xDragScrollRanDomList.touchYposBefore = DONT;
//					}
//					break;
//				case 1:		//친구검색
//					if(type == MH_KEY_PRESSEVENT)
//					{
//						if(touchCheck(&xFriend.xTouchAddTab[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							
//							
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_RECOMMEND] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 0;
//								xFriend.totalNumListRanDom = 0;
//								/////////////////////////////////////////////////////////////
//								xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:추천검색1:직접검색
//								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s","randomuser");
//								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDSEARCH, TRUE);
//								////////////////////////////////////////////////////////////
//							}
//						}
//                        /*
//						else if(touchCheck(&xFriend.xTouchAddTab[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_KAKAOAPP] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 2;
//							}
//						}
//						else if(touchCheck(&xFriend.xTouchAddTab[3]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_FIND] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 3;
//							}
//						}
//                        */
//						else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_CLOSE] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.state = FRIEND_STATE_PLAY;
//								xFriend.totalNumList = 0;
//								xFriend.nowRowNumList = 0;
//								xFriend.nowPageNumList = 0;
//								xFriend.totalNumListFollow = 0;
//								xFriend.nowRowNumListFollow = 0;
//								xFriend.nowPageNumListFollow = 0;
//							}
//						}
//						else if(touchCheck(&xFriend.xTouchTextBox) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//                            
//                            setTextField(TEXTBOX_TYPE_FRIENDID, lcdW/2, lcdH+999, 200, 25);
//                            
//						}
//						else if(touchCheck(&xFriend.xTouchSearch) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							/////////////////////////////////////////////////////////////
//							xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:추천검색1:직접검색
//							sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s",xFriend.strUserName);
//							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDSEARCH, TRUE);
//							////////////////////////////////////////////////////////////
//						}
//						else if(xFriend.totalNumListRanDom > 0 && touchCheck(&xFriend.xTouchFriendAddBtn[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							
//							if(xFriendData[xFriend.dataSlotNumListRanDom[0]].isAdd == FALSE)
//							{
//								playSnd(SND_MENU_OK);
//								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_ADD] == TRUE)
//								{
//									
//								}
//								else
//								{
//									/////////////////////////////////
//									xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriend.dataSlotNumListRanDom[0]].userNum;
//									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIEND, FALSE);
//									////////////////////////////////
//									xFriendData[xFriend.dataSlotNumListRanDom[0]].isAdd = TRUE;
//								}
//							}
//						}
//					}
//					break;
//				case 2:	//카카오친구관리
//					if(type == MH_KEY_PRESSEVENT)
//					{
//						if(touchCheck(&xFriend.xTouchAddTab[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_RECOMMEND] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 0;
//								xFriend.totalNumListRanDom = 0;
//								/////////////////////////////////////////////////////////////
//								xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:추천검색1:직접검색
//								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s","randomuser");
//								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDSEARCH, TRUE);
//								////////////////////////////////////////////////////////////
//							}
//						}
//						else if(touchCheck(&xFriend.xTouchAddTab[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_FIND] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 1;
//								xFriend.totalNumListRanDom = 0;
//								xFriend.addState = FRIENDADD_STATE_PLAY;
//							}
//						}
//                        /*
//						else if(touchCheck(&xFriend.xTouchAddTab[3]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_KAKAO] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 3;
//							}
//						}
//                        */
//						else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_CLOSE] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.state = FRIEND_STATE_PLAY;
//								xFriend.totalNumList = 0;
//								xFriend.nowRowNumList = 0;
//								xFriend.nowPageNumList = 0;
//								xFriend.totalNumListFollow = 0;
//								xFriend.nowRowNumListFollow = 0;
//								xFriend.nowPageNumListFollow = 0;
//							}
//						}
//						else
//							dragScrollKeyPrc(&xFriend.xDragScrollRanDomList,2);
//					}
//					else if(type == MH_KEY_RELEASEEVENT)
//					{
//						if(xFriend.xDragScrollRanDomList.touchXposBefore != DONT)
//						{
//							dragScrollKeyPrc(&xFriend.xDragScrollRanDomList,3);
//						}
//						else
//						{
//							isKeyEvent = FALSE;
//							keyEventNum = 0;
//							
//							for(int i=0;i<6;i++)
//							{
//								if(touchCheck(&xFriend.xTouchFriendAddBtn[i]) == TRUE)
//								{
//									isKeyEvent = TRUE;
//									keyEventNum = i;
//									break;
//								}
//							}
//
//							if(isKeyEvent == TRUE)
//							{
//								int selectSlot = keyEventNum+xFriend.xDragScrollRanDomList.selectNum;								
//								
//																
//								if(selectSlot >= 0 && selectSlot < xFriend.xDragScrollRanDomList.totalNum)
//								{
//									if(xFriendData[xKakaoData.xFriendInfoApp[selectSlot].friendNum].isAdd == FALSE)
//									{
//										xFriendData[xKakaoData.xFriendInfoApp[selectSlot].friendNum].isAdd = TRUE;
//										playSnd(SND_MENU_OK);
//										//친구등록 네트워크등록
//										/////////////////////////////////////////////////////////////
//										sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s",xFriendData[xKakaoData.xFriendInfoApp[selectSlot].friendNum].strKakaoId);
//										addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIENDID, TRUE);
//										////////////////////////////////////////////////////////////
//									}
//								}
//							}
//						}
//						xFriend.xDragScrollRanDomList.touchXpos = DONT;
//						xFriend.xDragScrollRanDomList.touchYpos = DONT;
//						xFriend.xDragScrollRanDomList.touchXposBefore = DONT;
//						xFriend.xDragScrollRanDomList.touchYposBefore = DONT;
//					}
//					break;
//				case 3:	//카카오톡친구초대
//					if(type == MH_KEY_PRESSEVENT)
//					{
//						if(touchCheck(&xFriend.xTouchAddTab[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_RECOMMEND] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 0;
//								xFriend.totalNumListRanDom = 0;
//								/////////////////////////////////////////////////////////////
//								xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:추천검색1:직접검색
//								sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s","randomuser");
//								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDSEARCH, TRUE);
//								////////////////////////////////////////////////////////////
//							}
//						}
//						else if(touchCheck(&xFriend.xTouchAddTab[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_FIND] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 1;
//								xFriend.totalNumListRanDom = 0;
//								xFriend.addState = FRIENDADD_STATE_PLAY;
//							}
//						}
//                        /*
//						else if(touchCheck(&xFriend.xTouchAddTab[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_KAKAOAPP] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.addFriendTab = 2;
//							}
//						}
//                        */
//						else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							playSnd(SND_MENU_OK);
//							xWorldMap.isKeyReturn = TRUE;
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_CLOSE] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xFriend.state = FRIEND_STATE_PLAY;
//								xFriend.totalNumList = 0;
//								xFriend.nowRowNumList = 0;
//								xFriend.nowPageNumList = 0;
//								xFriend.totalNumListFollow = 0;
//								xFriend.nowRowNumListFollow = 0;
//								xFriend.nowPageNumListFollow = 0;
//							}
//						}
//						else
//							dragScrollKeyPrc(&xFriend.xDragScrollRanDomList,2);
//					}
//					else if(type == MH_KEY_RELEASEEVENT)
//					{
//						if(xFriend.xDragScrollRanDomList.touchXposBefore != DONT)
//						{
//							dragScrollKeyPrc(&xFriend.xDragScrollRanDomList,3);
//						}
//						else
//						{
//							isKeyEvent = FALSE;
//							keyEventNum = 0;
//							
//							for(int i=0;i<6;i++)
//							{
//								if(touchCheck(&xFriend.xTouchFriendAddBtn[i]) == TRUE)
//								{
//									isKeyEvent = TRUE;
//									keyEventNum = i;
//									break;
//								}
//							}
//							
//							
//							
//							
//							
//							if(isKeyEvent == TRUE)
//							{
//								
//								int selectSlot = keyEventNum+xFriend.xDragScrollRanDomList.selectNum;
//								
//								
//								
//								
//								
//								
//								
//								if(selectSlot >= 0 && selectSlot < xFriend.xDragScrollRanDomList.totalNum)
//								{
//									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_ADD] == TRUE)
//									{
//										
//									}
//									else
//									{
//										
//										
//										if(xKakaoData.xFriendInfo[selectSlot].isInvite == FALSE)
//										{
//											playSnd(SND_MENU_OK);
//											xKakaoData.inveiteKakaoSlotNum = selectSlot;
//											setPopup(POPUP_KAKAOINVEITEYESNO, playState, playState, 0, DONT);											
//										}
//										else
//										{
//											
//											/*
//											 //테스트삼아
//											 kakaoDevSendMessage20_APP("88628863586313601", "패션타운 테스트입니다!!","shopmoneyicon0.png");
//											 //	//화정씨
//											 //88254944690806784	//한실장님
//											 */
//											
//										}
//									}
//								}
//							}
//						}
//						xFriend.xDragScrollRanDomList.touchXpos = DONT;
//						xFriend.xDragScrollRanDomList.touchYpos = DONT;
//						xFriend.xDragScrollRanDomList.touchXposBefore = DONT;
//						xFriend.xDragScrollRanDomList.touchYposBefore = DONT;
//					}
//					break;
//				}
//				break;
//			case FRIEND_STATE_PLAY:
//				if(type == MH_KEY_PRESSEVENT)
//				{
//					isKeyEvent = FALSE;
//					
//					for(int i=0;i<3;i++)
//					{
//						if(touchCheck(&xFriend.xTouchTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//						{
//							isKeyEvent = TRUE;
//							keyEventNum = i;
//						}
//					}
//					
//					if(isKeyEvent == TRUE)
//					{
//						playSnd(SND_MENU_OK);
//						xWorldMap.isKeyReturn = TRUE;
//						if(keyEventNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_LIST] == TRUE)
//						{
//							
//						}
//						else if((keyEventNum == 1||keyEventNum == 2) && xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FOLLOW] == TRUE)
//						{
//							
//						}
//						else
//						{
//							if(xFriend.selectTabB != keyEventNum)
//							{
//								xFriend.selectTabB = keyEventNum;
//								
//								xDragScrollFriendSlot.touchXpos = DONT;
//								xDragScrollFriendSlot.touchYpos = DONT;
//								xDragScrollFriendSlot.touchXposBefore = DONT;
//								xDragScrollFriendSlot.touchYposBefore = DONT;
//								xDragScrollFriendSlot.selectNum = 0;
//								xDragScrollFriendSlot.pos = 0;
//								xDragScrollFriendSlot.speed = 0;
//																				
//								xFriend.totalNumList = 0;
//								xFriend.nowRowNumList = 0;
//								xFriend.nowPageNumList = 0;
//								xFriend.totalNumListFollow = 0;
//								xFriend.nowRowNumListFollow = 0;
//								xFriend.nowPageNumListFollow = 0;
//							}
//						}
//					}
//					else if(xFriend.selectTabB == 0 && touchCheck(&xFriend.xTouchEditBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//					{
//						playSnd(SND_MENU_OK);
//						xWorldMap.isKeyReturn = TRUE;
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_EDIT] == TRUE)
//						{
//							
//						}
//						else
//						{
//							xFriend.isDelMode = (xFriend.isDelMode==TRUE?FALSE:TRUE);
//						}
//					}
//					else if(touchCheck(&xFriend.xTouchRandomBtn) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//					{
//						playSnd(SND_MENU_OK);
//						xWorldMap.isKeyReturn = TRUE;
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_RANDOM] == TRUE)
//						{
//							
//						}
//						else
//							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RANDOMFRIEND, TRUE);
//						
//					}
//					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//					{
//						playSnd(SND_MENU_OK);
//						xWorldMap.isKeyReturn = TRUE;
//						
//						if(xFriend.isDelMode == TRUE)
//						{
//							xFriend.isDelMode = FALSE;
//						}
//						else
//						{
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_CLOSE] == TRUE)
//							{
//								
//							}
//							else
//							{
//								friendListFreeLoad(FALSE);
//								xWorldMap.state = WORLDMAP_STATE_PLAY;
//																
//								xOrder.totalNumListDataFriend = 0;
//								xOrder.totalNumListData = 0;
//								xOrder.isNetLoad = FALSE;
//								addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
//								
//							}
//						}
//					}
//                    else if(keyFastScroll(type, param1, param2,touchId,0) == true || xTouch.yPos > lcdH-40)
//                    {
//                        
//                    }
//					else
//					{
//						dragScrollKeyPrc(&xDragScrollFriendSlot,0);
//					}
//				}
//				else if(type == MH_KEY_RELEASEEVENT)
//				{
//					if(xDragScrollFriendSlot.touchXposBefore != DONT)
//					{
//						dragScrollKeyPrc(&xDragScrollFriendSlot,1);
//					}
//					else
//					{
//						isKeyEvent = FALSE;
//						keyEventNum = 0;
//						int selectSlot;
//                        int isBookMark = false;
//                        
//                        
//						switch(xFriend.selectTabB)
//						{
//						case 0:
//                        case 2:
//							for(int i=0;i<16;i++)
//							{
//								if(xFriend.isDelMode == TRUE)
//								{
//									if(touchCheck(&xFriend.xTouchSelectDelBtn[i]) == TRUE)
//									{
//										isKeyEvent = TRUE;
//										keyEventNum = i;
//										break;
//									}
//								}
//								else
//								{
//									if(touchCheck(&xFriend.xTouchSelectSlot[i]) == TRUE)
//									{
//										isKeyEvent = TRUE;
//										keyEventNum = i;
//                                        
//                                        if(touchCheck(&xFriend.xTouchSelectBookMark[i]) == TRUE)
//                                        {
//                                            isBookMark = true;
//                                            
//                                        }
//										break;
//									}
//								}
//							}
//                            
//							selectSlot = keyEventNum+(xDragScrollFriendSlot.selectNum*2);
//							
//							if(selectSlot < 0|| selectSlot >= xDragScrollFriendSlot.totalNum)
//                            {
//                                isBookMark = false;
//								isKeyEvent = FALSE;
//                            }
//							if(isKeyEvent == TRUE)
//							{
//								playSnd(SND_MENU_OK);
//								if(xFriend.isDelMode == TRUE)
//								{
//									if(xFriend.dataSlotNumList[selectSlot] == DONT)
//									{
//										
//									}
//									else if(xFriendData[xFriend.dataSlotNumList[selectSlot]].isPM == TRUE)
//									{
//										
//									}
//									else if(xFriendData[xFriend.dataSlotNumList[selectSlot]].isAlliance == TRUE)
//									{
//										
//									}
//									else
//									{
//										int kakaoSlot = checkKakaoAppInvite(xFriendData[xFriend.dataSlotNumList[selectSlot]].strKakaoId);
//										if(kakaoSlot != DONT)
//										{
//											xSaveKakaoApp.isDel[kakaoSlot] = TRUE;
//											gameSave(SAVE_SLOT_KAKAOAPP);
//										}
//										
//										playSnd(SND_MENU_OK);
//										xFriendData[xFriend.dataSlotNumList[selectSlot]].isAdd = FALSE;
//										/////////////////////////////////
//										xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriend.dataSlotNumList[selectSlot]].userNum;
//										addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_DELFRIEND, FALSE);
//										////////////////////////////////
//										
//										for(int s=selectSlot;s<xFriend.totalNumList;s++)
//										{
//											xFriend.dataSlotNumList[s] = xFriend.dataSlotNumList[s+1];
//										}
//										xFriend.totalNumList--;
//									}
//
//								}
//                                else if(isBookMark == true)
//                                {
//                                    /////////////////////////////////////////////////////////////
//                                    if(xFriendData[xFriend.dataSlotNumList[selectSlot]].isBookMark == false)
//                                    {
//                                        xFriendData[xFriend.dataSlotNumList[selectSlot]].isBookMark = true;
//                                        xEventQueueNet.action[xEventQueueNet.totalNum] = 1; //(0:해제,1추가)
//                                    }
//                                    else
//                                    {
//                                        xFriendData[xFriend.dataSlotNumList[selectSlot]].isBookMark = false;
//                                        xEventQueueNet.action[xEventQueueNet.totalNum] = 0; //(0:해제,1추가)
//                                    }
//                                    xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriend.dataSlotNumList[selectSlot]].userNum;
//                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BOOKMARK, TRUE);
//                                    ////////////////////////////////////////////////////////////
//                                }
//								else
//								{
//									
//									//모델
//									if(xFriend.dataSlotNumList[selectSlot] == DONT)
//									{
//										if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_ADD] == TRUE)
//										{
//											
//										}
//										else
//										{
//											friendListAddFreeLoad(TRUE);
//											xFriend.state = FRIEND_STATE_ADD;
//											xFriend.addState = FRIENDADD_STATE_PLAY;
//											xFriend.addFriendTab = 0;
//											xFriend.totalNumListRanDom = 0;
//											/////////////////////////////////////////////////////////////
//											xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:추천검색1:직접검색
//											sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s","randomuser");
//											addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDSEARCH, TRUE);
//											////////////////////////////////////////////////////////////
//										}
//									}
//									else if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS_PM] == TRUE && xFriendData[xFriend.dataSlotNumList[selectSlot]].isPM == TRUE)
//									{
//										
//									}
//									else if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS] == TRUE && xFriendData[xFriend.dataSlotNumList[selectSlot]].isPM == FALSE)
//									{
//										
//									}
//									else
//									{
//										xFriend.selectSlot = selectSlot;
//										xFriendMap.selectDataSlotNum = xFriend.dataSlotNumList[xFriend.selectSlot];
//										xWorldMap.isFriendMap = TRUE;
//										xFriendMap.isPlay = TRUE;
//										xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
//										xFriendMap.type = 0;//0:리스트1:랜덤2:메일
//										xFriendMap.anyCnt = 0;
//									}
//								}
//							}
//							break;
//						case 1:
//								
//							for(int i=0;i<16;i++)
//							{
//								if(touchCheck(&xFriend.xTouchSelectSlot[i]) == TRUE)
//								{
//									isKeyEvent = TRUE;
//									keyEventNum = i;
//									break;
//								}
//							}
//							selectSlot = keyEventNum+(xDragScrollFriendSlot.selectNum*2);
//							
//							if(selectSlot < 0|| selectSlot >= xDragScrollFriendSlot.totalNum)
//								isKeyEvent = FALSE;
//																	
//							if(isKeyEvent == TRUE)
//							{
//								if(xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].isAdd == FALSE)
//								{
//									playSnd(SND_MENU_OK);
//									/////////////////////////////////
//									xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].userNum;
//									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIEND, FALSE);
//									////////////////////////////////
//									xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].isAdd = TRUE;
//								}
//							}
//							break;
//						}
//					}
//					xDragScrollFriendSlot.touchXpos = DONT;
//					xDragScrollFriendSlot.touchYpos = DONT;
//					xDragScrollFriendSlot.touchXposBefore = DONT;
//					xDragScrollFriendSlot.touchYposBefore = DONT;
//				}
//				break;
//			}
//			break;
		case WORLDMAP_STATE_CARORDERINFO:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_OK] == TRUE)
					{
						
					}
					else
					{
						playSnd(SND_MENU_OK);
						xWorldMap.state = WORLDMAP_STATE_PLAY;
						xWorldMap.isKeyReturn = TRUE;
					}
				}
				else if(touchCheck(&xQuestInfo.xTouchFastCash) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_COMPLETE] == TRUE)
					{
						
					}
					else
					{
						int fastCash = getFastTimeCash(xCarPark[xCar.selectCarPark].endTime - xCalendar.nowTime);
						if(xSaveTemp.cash.oriData < fastCash)
							setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
						else
							setPopup(POPUP_CARORDER_FASTCASH, playState, playState, 0,fastCash);
					}
				}
			}
			break;		
		case WORLDMAP_STATE_CARSTORAGE:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(xCar.selectTabS != 0 && touchCheck(&xCar.xTouchTabS[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_ORDER] == TRUE)
					{
						
					}
					else
					{
						xCar.selectTabS = 0;
						setOrderList();
					}
				}
				else if(xCar.selectTabS != 1 && touchCheck(&xCar.xTouchTabS[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_PARKING] == TRUE)
					{
						
					}
					else
					{
						xCar.selectTabS = 1;
						setCarStorage(xCar.selectTabS);
					}
					
				}
				else if(xCar.selectTabS != 2 && touchCheck(&xCar.xTouchTabS[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_CAR] == TRUE)
					{
						
					}
					else
					{
						xCar.selectTabS = 2;
						setCarStorage(xCar.selectTabS);
					}
				}
				else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_CLOSE] == TRUE)
					{
						
					}
					else
					{
						carStorageFreeLoad(FALSE);
						xWorldMap.state = WORLDMAP_STATE_PLAY;
					}
				}
				else
					dragScrollKeyPrc(&xDragScrollCarStorageSlot,0);
			}
			else if(type == MH_KEY_RELEASEEVENT)
			{
				if(xDragScrollCarStorageSlot.touchXposBefore != DONT)
				{
					dragScrollKeyPrc(&xDragScrollCarStorageSlot,1);
				}
				else if(xDragScrollCarStorageSlot.speed == 0)
				{
					switch(xCar.selectTabS)
					{
					case 0:		//주문장
						isSelectCatalogS = FALSE;
						selectCatalogSNum = 0;
						for(int i=0;i<4;i++)
						{
							if(touchCheck(&xTouchCatalogS[i]) == TRUE || touchCheck(&xTouchCatalogDel[i]) == TRUE)
							{
								isSelectCatalogS = TRUE;
								selectCatalogSNum = i;
								break;
							}
						}
						xOrder.selectSlot = selectCatalogSNum+(xDragScrollCarStorageSlot.selectNum);
																												
						if(xOrder.selectSlot >= xOrder.totalNumList || xOrder.selectSlot < 0)
							isSelectCatalogS = FALSE;
																												
						if(xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendType != 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_ORDERLIST] == TRUE)
						{
							isSelectCatalogS = FALSE;
						}
													
						if(isSelectCatalogS == TRUE)
						{
							
							M_Boolean isWaitCar = FALSE;
							for(int c=0;c<CARKPARKMAX;c++)
							{
								
								if(xSaveTemp.lv.oriData >= xCarPark[c].lv)
								{
									if(xCarPark[c].carNum != DONT)
									{
										if(xCarPark[c].state == CARPARK_STATE_READ)
										{
											isWaitCar = TRUE;
										}
									}
								}
							}
							
							
							
							
							playSnd(SND_MENU_OK);
							
							
                            
                            if(xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendType == 0 &&touchCheck(&xOrder.xTouchProfile[selectCatalogSNum]) == TRUE)
                            {
                                xWorldMap.isMiniProfile = TRUE;
                                xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
                                mailFreeLoad(TRUE);
                                
                                xMiniProfile.friendDataSlotNum = xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum;
                                /////////////////////////////////////////
                                xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
                            }
                            else
                            {
                            
                                setMapData(xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
                                switch(xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].state)
                                {
                                case ORDERSLOT_STATE_CLOSE:
                                    if(touchCheck(&xTouchCatalogDel[selectCatalogSNum]) == TRUE)
                                    {
                                        switch(xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendType)
                                        {
                                        case 0:	//친구
                                        case 1:	//NPC
                                            setPopup(POPUP_ORDERDEL, playState, playState, 0, DONT);
                                            break;
                                        case 2:	//QEUST
                                            setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
                                            sprintf(xPopup.strText, "QUEST주문장은\n삭제하실수 없습니다.");
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if(isWaitCar == FALSE)
                                        {
                                            setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
                                            sprintf(xPopup.strText, "배송 가능한 차량이 없습니다.");
                                        }
                                        else
                                        {
                                            
                                            if(xOrder.isNetLoad == TRUE)
                                            {
                                                //카카오톡 아이콘
                                                M_Boolean isKakaoUser = FALSE;
                                                if(xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendType == 0)
                                                {
                                                    xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].isKakao = checkKakaoFriend(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].strKakaoId);
                                                    if(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].isKakao == TRUE)
                                                    {
                                                        isKakaoUser = TRUE;
                                                        //주문장 수신거부얻어오기,얻어올때까지 키잠금
                                                        ////////////////////////////////////////////////////////////////////////
                                                        xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
                                                        xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].userNum;
                                                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETPUSH, TRUE);
                                                        ////////////////////////////////////////////////////////////////////////
                                                        xOrder.isKakaoMessage_Net = TRUE;
                                                    }
                                                }
                                                if(isKakaoUser == FALSE)
                                                    setStateCarSelectMode_Production();
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
						}
						break;
					case 1:		//주차장
					case 2:	//차량구매
						isSubTemp[0] = FALSE;
						subTemp[0] = 0;
						
						for(int i=0;i<CARDATAMAX;i++)
						{
							if(touchCheck(&xCar.xTouchChangeBtn[i]) == TRUE)
							{
								isSubTemp[0] = TRUE;
								subTemp[0] = i;
								break;
							}
						}
						
						if(xCar.toalSlot <= subTemp[0])
							isSubTemp[0] = FALSE;
						
						if(isSubTemp[0] == TRUE)
						{
							playSnd(SND_MENU_OK);
							if(touchCheck(&xCar.xTouchInfoBtn[subTemp[0]]) == TRUE)
							{
								xCar.isSlotInfo[subTemp[0]] = xCar.isSlotInfo[subTemp[0]] == TRUE? FALSE:TRUE;
							}
							else
							{
								
								switch(xCar.selectTabS)
								{
									case 1:		//주차장
										carStorageFreeLoad(FALSE);
										xWorldMap.state = WORLDMAP_STATE_CARPARKSELECTMODE_CAR;
										xOrder.carParkSelectMode_Code = xCar.slotCode[subTemp[0]];
										
										xMap.pointX = 244;
										xMap.pointY = -984;
										xWorldMap.fscale = 1.2f;
										break;
									case 2:	//차량구매
										if(xSaveTemp.lv.oriData < xCarData[xCar.slotCode[subTemp[0]]].lv)
										{
											
										}
										else if(xCar.isOpen[xCar.slotCode[subTemp[0]]] == FALSE)
										{
											xCar.selectSlot = subTemp[0];
											playSnd(SND_MENU_OK);
											switch(xCarData[xCar.slotCode[subTemp[0]]].priceType)
											{
												case 0:		//골드
													if(xSaveTemp.money.oriData < xCarData[xCar.slotCode[subTemp[0]]].price.oriData)
														setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
													else
														setPopup(POPUP_CAR_BUYYESNO, playState, playState, 0, DONT);
													break;
												case 1:		//룩
													if(xSaveTemp.cash.oriData < xCarData[xCar.slotCode[subTemp[0]]].price.oriData)
														setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
													else
														setPopup(POPUP_CAR_BUYYESNO, playState, playState, 0, DONT);
													break;
												case 2:		//퀘스트
													setPopup(POPUP_CARQUESTOPEN, playState, playState, 0, DONT);
													break;
											}
										}
										break;
								}
							}
						}
						break;
					}
				}
				xDragScrollCarStorageSlot.touchXpos = DONT;
				xDragScrollCarStorageSlot.touchYpos = DONT;
				xDragScrollCarStorageSlot.touchXposBefore = DONT;
				xDragScrollCarStorageSlot.touchYposBefore = DONT;
				
			}
			break;
            //프로필 사진 변경에서 이미지 해제 추가 KBY 2018.2.26
		case WORLDMAP_STATE_PROFILE:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xProfile.xTouchPhotoSelect) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
                    isTouchPhotoSelect=true;
//					xWorldMap.state = WORLDMAP_STATE_PROFILEPRC;
				}
				else if(touchCheck(&xProfile.xTouchPhotoDel) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					if(xProfile.isPhoto == TRUE)
					{
						playSnd(SND_MENU_OK);
                        isTouchPhotoDel=true;
//						xWorldMap.state = WORLDMAP_STATE_PLAY;
//						xProfile.isPhoto = FALSE;
//						netSend(CMD_DELPROFILEPHOTO, DONT);
//						
//						
//						//유저넘버 슬롯번호 찾기
//						int userNum = xNetData.userNum;
//						int slotNum = getFriendSlot(userNum);
//						
//						if(slotNum == DONT)
//						{
//							slotNum = addFriendData(userNum);
//						}
//						sprintf(xFriendData[slotNum].strUrl, "0");
					}
				}
                else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    isTouchPhotoClr=true;
                }
				else
				{
					playSnd(SND_MENU_OK);
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
                    //추가된 내용 KBY 2018.2.26
                    profilePhotoFreeLoad_FP(false);
				}
			}
            else if(type == MH_KEY_RELEASEEVENT)
            {
                if(touchCheck(&xProfile.xTouchPhotoSelect) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
                {
                    isTouchPhotoSelect=false;
                    xWorldMap.state = WORLDMAP_STATE_PROFILEPRC;
                    //추가된 내용 KBY 2018.2.26
                    profilePhotoFreeLoad_FP(false);
                }
                else if(touchCheck(&xProfile.xTouchPhotoDel) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
                {
                    if(xProfile.isPhoto == TRUE)
                    {
                        isTouchPhotoDel=false;
                        xWorldMap.state = WORLDMAP_STATE_PLAY;
                        xProfile.isPhoto = FALSE;
                        netSend(CMD_DELPROFILEPHOTO, DONT);
                        //추가된 내용 KBY 2018.2.26
                        profilePhotoFreeLoad_FP(false);
                        /////////////////////////////////////
                        
                        //유저넘버 슬롯번호 찾기
                        int userNum = xNetData.userNum;
                        int slotNum = getFriendSlot(userNum);
                        
                        if(slotNum == DONT)
                        {
                            slotNum = addFriendData(userNum);
                        }
                        sprintf(xFriendData[slotNum].strUrl, "0");
                    }
                }
                else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
                {
                    isTouchPhotoClr=false;
                    //추가된 내용 KBY 2018.2.26
                    profilePhotoFreeLoad_FP(false);
                    /////////////////////////////////////
                    xWorldMap.state = WORLDMAP_STATE_PLAY;
                }

            }
			break;
		case WORLDMAP_STATE_SEVERSELL:
			if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xServerSell.isState = FALSE;
				xWorldMap.state = WORLDMAP_STATE_PLAY;
				xWorldMap.isKeyReturn = TRUE;
				xInterior.buildModeTime64 = DONT;
			}
			break;
        case WORLDMAP_STATE_ACCESSBONUSSHOW:
            if(touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.state = WORLDMAP_STATE_PLAY;
                accessBonusFreeLoad(FALSE);
                xWorldMap.isKeyReturn = TRUE;
                xInterior.buildModeTime64 = DONT;
            }
            break;
		case WORLDMAP_STATE_ACCESSBONUS:
			switch(xAccessBonus.state)
			{
			case ACCESSBONUS_STATE_MAIN:
				if(touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xAccessBonus.state = ACCESSBONUS_STATE_STAMP;
					xAccessBonus.anyCnt = 0;
				}
				break;
			case ACCESSBONUS_STATE_RESULT:
				if(touchCheck(&xTouchOk)==TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					 playSnd(SND_MENU_OK);
					 xWorldMap.state = WORLDMAP_STATE_PLAY;
					 accessBonusFreeLoad(FALSE);
					 xWorldMap.isKeyReturn = TRUE;
					 xInterior.buildModeTime64 = DONT;
				}
				break;
			}
			break;
		case WORLDMAP_STATE_TODAYSOCIAL:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xNoticeWorldMap.isOneDay == TRUE)
					{
						xSave.socialDay = xCalendar.nowDay;
						gameSave(SAVE_SLOT_GAME);
					}
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
					freeImg(&imgTodaySocialFashionBg);
				}
				else if(touchCheck(&xNoticeWorldMap.xTouchOneDay) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xNoticeWorldMap.isOneDay = xNoticeWorldMap.isOneDay == TRUE ? FALSE:TRUE;
				}
			}
			break;
		case WORLDMAP_STATE_TODAYRUNWAY:
			if(type == MH_KEY_PRESSEVENT)
			{
				isKeyEvent = FALSE;
				for(int i=0;i<3;i++)
				{
					if(touchCheck(&xWorldMap.xTouchTodayRunwayLink[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isKeyEvent = TRUE;
						keyEventNum = i;
						break;
					}
				}
				if(isKeyEvent == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
					xWorldMap.isMiniProfile = FALSE;
					//친구샵 방문
					xFriendMap.selectDataSlotNum = xWinnerModel.friendDataNum[keyEventNum];
					xWorldMap.isFriendMap = TRUE;
					xFriendMap.isPlay = TRUE;
					xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
					xFriendMap.type = 1;//0:리스트1:랜덤2:메일
					xFriendMap.anyCnt = 0;
					xFriendData[xFriendMap.selectDataSlotNum].todayOrder = TRUE;
					
					xWorldMap.state = WORLDMAP_STATE_PLAY;					
				}
				else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xNoticeWorldMap.isOneDay == TRUE)
					{
						xSave.runwayDay = xCalendar.nowDay;
						gameSave(SAVE_SLOT_GAME);
					}
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
					
					freeImg(&imgBestRunway[0]);
					freeImg(&imgBestRunway[1]);
				}
				else if(touchCheck(&xNoticeWorldMap.xTouchOneDay) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xNoticeWorldMap.isOneDay = xNoticeWorldMap.isOneDay == TRUE ? FALSE:TRUE;
				}
			}
			break;
		case WORLDMAP_STATE_NOTICEPOPUP:
			if(type == MH_KEY_PRESSEVENT)
			{
				xWorldMap.isKeyReturn = TRUE;
				xInterior.buildModeTime64 = DONT;
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xNoticeWorldMap.isOneDay == TRUE)
					{
                        xSaveNoticePopup.code[xSaveNoticePopup.totalNum++] = xNoticeWorldMap.code[xNoticeWorldMap.nowPopupNum];
                        gameSave(SAVE_SLOT_NOTICEPOPUP);
                        
						xNoticeWorldMap.isOneDay = FALSE;
					}
					xNoticeWorldMap.nowPopupNum = nextNoticePopup(xNoticeWorldMap.nowPopupNum);
					if(xNoticeWorldMap.nowPopupNum == DONT)
					{
						worldMapNoticeFreeLoad(FALSE);
						xWorldMap.state = WORLDMAP_STATE_PLAY;
                        naverPlug(NAVERPLUG_TYPE_HOME);
					}
				}
				else if(touchCheck(&xNoticeWorldMap.xTouchOneDay) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xNoticeWorldMap.isOneDay = xNoticeWorldMap.isOneDay == TRUE ? FALSE:TRUE;
				}
				else if(xNoticeWorldMap.imgNotice[xNoticeWorldMap.nowPopupNum].texture != NULL)
				{
						
					if(touchCheck(&xNoticeWorldMap.xTouchOk) == TRUE)
					{
						if(xNoticeWorldMap.strRinkUrl[xNoticeWorldMap.nowPopupNum][0] != 0 && xNoticeWorldMap.strRinkUrl[xNoticeWorldMap.nowPopupNum][0] != '0' )
						{
							
							playSnd(SND_MENU_OK);
                            
                            startWebView(xNoticeWorldMap.strRinkUrl[xNoticeWorldMap.nowPopupNum]);
						}
					}
				}
			}
			break;
		case WORLDMAP_STATE_NOTICE:
			if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);					
					worldMapNoticeFreeLoad(FALSE);
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
				}
				else if(xNoticeWorldMap.xDragScroll.selectNum > 0 && touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					
					playSnd(SND_MENU_OK);
					xNoticeWorldMap.xDragScroll.speed = 420;
				}
				else if(xNoticeWorldMap.xDragScroll.selectNum < xNoticeWorldMap.totalNum-1 && touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xNoticeWorldMap.xDragScroll.speed = -420;
				}
				else
				{
					dragScrollKeyPrc(&xNoticeWorldMap.xDragScroll,0);
				}
			}
			else if(type == MH_KEY_RELEASEEVENT)
			{
				if(xNoticeWorldMap.xDragScroll.touchXposBefore != DONT)
				{
					dragScrollKeyPrc(&xNoticeWorldMap.xDragScroll,1);
				}
				else if(xNoticeWorldMap.xDragScroll.speed == 0)
				{

					if(xNoticeWorldMap.imgNotice[xNoticeWorldMap.xDragScroll.selectNum].texture != NULL)
					{
							
					if(touchCheck(&xNoticeWorldMap.xTouchOk) == TRUE)
					{
						if(xNoticeWorldMap.strRinkUrl[xNoticeWorldMap.xDragScroll.selectNum][0] != 0 && xNoticeWorldMap.strRinkUrl[xNoticeWorldMap.xDragScroll.selectNum][0] != '0' )
						{
							playSnd(SND_MENU_OK);
                            startWebView(xNoticeWorldMap.strRinkUrl[xNoticeWorldMap.xDragScroll.selectNum]);
						}
					}
				}																			
				}
				xNoticeWorldMap.xDragScroll.touchXpos = DONT;
				xNoticeWorldMap.xDragScroll.touchYpos = DONT;
				xNoticeWorldMap.xDragScroll.touchXposBefore = DONT;
				xNoticeWorldMap.xDragScroll.touchYposBefore = DONT;
			}
			break;
		case WORLDMAP_STATE_MINIGAME:
			switch(xMiniGame.state)
			{
			case MINIGAME_STATE_RESULTSUB:
				switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotType)
				{
				case MINIGAME_TYPE_MODEL:
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);						
						if(xModel.totalInventoryModelMax >= INVENTORYMODELMAX-5)
						{
							setPopup(POPUP_MODEL_SLOTMAX, playState, playState, 0, DONT);
							xMiniGame.state = MINIGAME_STATE_MAIN;
							xWorldMap.isKeyReturn = TRUE;
						}
						else
						{
                            
                            xMiniGame.state = MINIGAME_STATE_MAIN;
                            xWorldMap.isKeyReturn = TRUE;
//                            if(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData == 0)
//                                setNewModel(0);
//                            else
//                                setNewModel(1);
                            
                            

                            /*
							if(xSaveTemp.cash.oriData < 10)
								setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
							else
							{
								setCash(-10);
								setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_LOOK, -10);
								xModel.totalInventoryModelMax+=5;
								//////////////////////////////////////////////////////////
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MODELTOTALSLOT, TRUE);
								//////////////////////////////////////////////////////////
								xMiniGame.state = MINIGAME_STATE_MAIN;
								xWorldMap.isKeyReturn = TRUE;
								if(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData == 0)
									setNewModel(0);
								else
									setNewModel(1);
							}
                             */
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xMiniGame.state = MINIGAME_STATE_MAIN;
						xWorldMap.isKeyReturn = TRUE;
					}
					break;
				}
				break;
			case MINIGAME_STATE_RESULT:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xMiniGame.state = MINIGAME_STATE_MAIN;
						xWorldMap.isKeyReturn = TRUE;
						
						
						switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotType)
						{
						case MINIGAME_TYPE_TREND:
							playSnd(SND_TREND_POPUP);
							trendFreeLoad(TRUE);
							xWorldMap.isTrend = TRUE;
							xWorldMap.trendInType = 2;	//0오전1오후2그외
							xTrend.state = TREND_STATE_NEW;
							xWorldMap.isKeyReturn = TRUE;
							break;
						case MINIGAME_TYPE_TIRED:
							setTired(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
							break;
						case MINIGAME_TYPE_LOOK:
							setCash(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
							break;
						case MINIGAME_TYPE_GOLD:
							setMoney(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
							setQuest(87, xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData, DONT);
							break;
						case MINIGAME_TYPE_MODEL:
								
							//모델슬롯갯수 확인후 부족하다면 구매 팝업띄워주고 팝업 취소시 전체취소 확인시 setNewModel돌림
							if(xModel.totalInventoryModel >= xModel.totalInventoryModelMax)
							{
								xMiniGame.state = MINIGAME_STATE_RESULTSUB;
							}
							else
							{
//								if(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData == 0)
//									setNewModel(0);
//								else
//									setNewModel(1);
							}
							break;
						case MINIGAME_TYPE_INTERIOR:
							//가구 넣어주기
							inputInventoryInterior(xMiniGame.resultCode);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMiniGame.resultCode;
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							break;
						case MINIGAME_TYPE_INTERIOR222:
							//가구 넣어주기
							inputInventoryInterior(xMiniGame.resultCode);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMiniGame.resultCode;
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							break;
						case MINIGAME_TYPE_FASHIONOPEN:
							setMapData(xMiniGame.resultCode);
							xInventoryFashion.isOpen[xMap.type][xMap.listNum] = TRUE;
							if(xFashionData[xMap.type][xMap.listNum].isStaff == 0)
							{
								xSave.fashionNew[xMap.type][xMap.listNum] = 1;	//0:보통 1:new보여주기 2:확인한상태 3:완료
								gameSave(SAVE_SLOT_GAME);
							}
							
							////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
							///////////////////////////////////////////////////
							break;
						}
						
						////////////////////////////////////////////////////////////
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
						////////////////////////////////////////////////////////////
					}
				}
				break;
            case MINIGAME_STATE_PLAY:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchType == USER_POINT_PRESS_EVENT)
                    {
                        xMiniGame.isSkip = true;
                    }
                }
                break;
			case MINIGAME_STATE_MAIN:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MINIGAME_EXIT] == TRUE)
						{
							
						}
						else
						{
							minigameFreeLoad(FALSE);
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							
							xOrder.totalNumListDataFriend = 0;
							xOrder.totalNumListData = 0;
							xOrder.isNetLoad = FALSE;
							addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
						}
						
					}
					else if(touchCheck(&xMiniGame.xTouchBtnPlay) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_MINIGAME_PLAY] == TRUE)
						{
							
						}
						else
						{
							
							
							
							
							if(xSaveTemp.tired.oriData < (xMiniGame.userTired.oriData-xModelSkill.bonusPer[MODELSKILL_TYPE_MINIGAME_CANDY]))
							{
								setPopup(POPUP_TIREDEMPTY, playState, playState, 0, DONT);
							}
							else if(xMiniGame.nowTired == 0)
							{
								xMiniGame.inputCandyAnyCnt = 0;
								xMiniGame.nowTired = xMiniGame.userTired.oriData;
							}
							
							if(xMiniGame.nowTired == xMiniGame.userTired.oriData && xSaveTemp.tired.oriData >= (xMiniGame.userTired.oriData-xModelSkill.bonusPer[MODELSKILL_TYPE_MINIGAME_CANDY]))
							{
								playSnd(SND_MINIGAME_START);
								setMiniGamePlay();
							}
						}
					}
					else
					{
						dragScrollKeyPrc(&xMiniGame.xDragScroll,0);
					}
				}
				
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xMiniGame.xDragScroll.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xMiniGame.xDragScroll,1);
					}
					xMiniGame.autoCnt = 0;
					xMiniGame.xDragScroll.touchXpos = DONT;
					xMiniGame.xDragScroll.touchYpos = DONT;
					xMiniGame.xDragScroll.touchXposBefore = DONT;
					xMiniGame.xDragScroll.touchYposBefore = DONT;
				}
				break;
			}
			break;
        case WORLDMAP_STATE_PREPAY:
            if(type == MH_KEY_PRESSEVENT)
            {
                if(xPrePay.remainDay == 0 && touchCheck(&xPrePay.xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    setPopup(POPUP_SHOP_PREPAYBUY, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                }
                else if(touchCheck(&xPrePay.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    prepayFreeLoad(FALSE);
                    xWorldMap.state = WORLDMAP_STATE_PLAY;
                }
            }
            break;
        case WORLDMAP_STATE_PREPAYDAY:
            if(type == MH_KEY_PRESSEVENT)
            {
                if(touchCheck(&xPrePay.xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    prepayFreeLoad(FALSE);
                    xWorldMap.state = WORLDMAP_STATE_PLAY;
                }

            }
            break;
        case WORLDMAP_STATE_HOTDEAL:
            keyHotDeal(type,param1,param2);
            break;
        case WORLDMAP_STATE_RIVALWORLDMAP:
            keyRivalWorldMap(type,param1,param2);
            break;
        case WORLDMAP_STATE_RIVAL:
            keyRival(type,param1,param2);
            break;
        case WORLDMAP_STATE_RIVALINFO:
            keyRivalInfo(type,param1,param2);
            break;
        case WORLDMAP_STATE_JEWELRESULT:
            keyJewelResult(type,param1,param2);
            break;
        case WORLDMAP_STATE_PANG:
            keyPang(type, param1, param2);
            break;
		case WORLDMAP_STATE_LULUPANG:
			switch (xLuluPang.state)
			{
				case LULUPANG_STATE_LOBBY:
					keyLuluPangLobby(type, param1, param2);
					break;
				case LULUPANG_STATE_PLAY:
					keyPang_Solo(type, param1, param2);
				default:
					break;
			}
			break;
        case WORLDMAP_STATE_EVENTQUEST:
            keyEventQuest(type, param1, param2);
            break;
        case WORLDMAP_STATE_CLUBLOBBY:
            keyClubLobby(type, param1, param2);
            break;
        case WORLDMAP_STATE_CLUBLIST:
            keyClubList(type, param1, param2);
            break;
        case WORLDMAP_STATE_JEWELQUEST:
            keyJewelQuest(type, param1, param2);
            break;
        case WORLDMAP_STATE_HELPLIST:
            keyHelpList(type, param1, param2);
            break;
        case WORLDMAP_STATE_CANDYFORMER:
            keyCandyFormer(type, param1, param2);
            break;
        case WORLDMAP_STATE_FITTING_FP:
            keyFitting_FP(type, param1, param2, touchId);
            break;
        case WORLDMAP_STATE_SHOP_FP:
            switch(xShop_FP.state)
            {
                case SHOP_STATE_MAIN:
                    keyShop_FP(type, param1, param2, touchId);
                    break;
                case SHOP_STATE_DRESSPOPUP:
                    switch(xShop_FP.state2)
                    {
                        case SHOPPOPUP_STATE_MAIN:
                            keyDressShopPopUp_FP(type, param1, param2);
                            break;
                        case SHOPPOPUP_STATE_POPUP:
                            keyDressShopPreview_FP(type, param1, param2);
                            break;
                    }
                    break;
                case SHOP_STATE_POPUP:
                    break;
            }

            
            break;
        case WORLDMAP_STATE_GREENHOUSE_FP:
            switch (xGreenHouse_FP.state)
            {
                case GREENHOUSE_STATE_MAIN:
                    keyGreenHouse_FP(type, param1, param2);
                    break;
                case GREENHOUSE_STATE_CANCLEPOPUP:
                    keyGreenHouseSlotCanclePopup_FP(type, param1, param2);
                    break;
            }
            break;
        case WORLDMAP_STATE_SPINNINGWHEEL_FP:
//            keySpinningWheel_FP(type, param1, param2);
            switch (xSpinning_FP.state)
            {
                case SPINNINGWHEEL_STATE_MAIN:
                    keySpinningWheel_FP(type, param1, param2);
                    break;
                case SPINNINGWHEEL_STATE_CANCLEPOPUP:
                    keySpinningWheelSlotCanclePopup_FP(type, param1, param2);
                    break;
            }

            break;
        case WORLDMAP_STATE_FRIENDLIST:
            switch(xFriend_FP.state)
            {
                case FRIEND_FP_STATE_PLAY:
                    keyfriendList_FP(type, param1, param2);
                    break;
                case FRIEND_FP_STATE_SEARCH:
                    keyfriendSearch_FP(type, param1, param2);
                    break;
            }
            break;
        case WORLDMAP_STATE_MILEAGESHOP:
            switch(xMileageShop.state)
            {
            case MILEAGESHOP_STATE_INFO:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xMileageShopInfo.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.state = MILEAGESHOP_STATE_PLAY;
                    }
                    else
                    {
                        dragScrollKeyPrc(&xMileageShopInfo.xDragScroll,2);
                    }
                }
                else if(type == MH_KEY_RELEASEEVENT)
                {
                    if(xMileageShopInfo.xDragScroll.touchXposBefore != DONT)
                    {
                        dragScrollKeyPrc(&xMileageShopInfo.xDragScroll,3);
                    }
                    else
                    {
                        bool isSelectEdit = false;
                        int selectEdit = 0;
                        
                        for(int k=0;k<10;k++)
                        {
                            if(touchCheck(&xMileageShopInfo.xTouchEdit[k]) == TRUE)
                            {
                                isSelectEdit = true;
                                selectEdit = k;
                                break;
                            }
                        }
                        
                        if(isSelectEdit == true)
                        {
                            xMileageShopInfo.selectSlot = selectEdit+(xMileageShop.xDragScroll.selectNum);
                        }
                        
                        if(xMileageShopInfo.selectSlot < 0 || xMileageShopInfo.selectSlot >= xMileageShopInfo.totalNum)
                            isSelectEdit = false;
                        
                        
                        if(xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].state != 0)
                            isSelectEdit = false;
                        
                        if(isSelectEdit == true)
                        {
                            playSnd(SND_MENU_OK);
                            xMileageShop.state = MILEAGESHOP_STATE_INFO_EDIT;
                            sprintf(xMileageShop.strName, "%s",xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].strName);
                            sprintf(xMileageShop.strAddress, "%s",xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].strAddress);
                            sprintf(xMileageShop.strPhone, "%s",xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].strPhone);
                        }
                    }
                    xMileageShopInfo.xDragScroll.touchXpos = DONT;
                    xMileageShopInfo.xDragScroll.touchYpos = DONT;
                    xMileageShopInfo.xDragScroll.touchXposBefore = DONT;
                    xMileageShopInfo.xDragScroll.touchYposBefore = DONT;
                }
                break;
            case MILEAGESHOP_STATE_SENDPOPUP_BUY:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xMileageShop.xTouchPopupOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.state = MILEAGESHOP_STATE_BUYNET;
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MILEAGESHOPBUY, TRUE);
                    }
                    else if(touchCheck(&xMileageShop.xTouchPopupClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.state = MILEAGESHOP_STATE_SENDPOPUP;
                    }
                }
                break;
            case MILEAGESHOP_STATE_SENDPOPUP_POPUP:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xMileageShop.xTouchPopupOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.state = MILEAGESHOP_STATE_SENDPOPUP;
                    }
                }
                break;
            case MILEAGESHOP_STATE_POPUP:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xMileageShop.xTouchPopupOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.state = MILEAGESHOP_STATE_PLAY;
                    }
                }
                break;
            case MILEAGESHOP_STATE_INFO_POPUP:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xMileageShop.xTouchPopupOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.state = MILEAGESHOP_STATE_INFO;
                    }
                }
                break;
            case MILEAGESHOP_STATE_INFO_EDITPOPUP:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xMileageShop.xTouchPopupOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.state = MILEAGESHOP_STATE_INFO_EDIT;
                    }
                }
                break;
            case MILEAGESHOP_STATE_SENDPOPUP:
            case MILEAGESHOP_STATE_INFO_EDIT:
                if(type == MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xMileageShop.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        if(xMileageShop.state == MILEAGESHOP_STATE_INFO_EDIT)
                            xMileageShop.state = MILEAGESHOP_STATE_INFO;
                        else
                            xMileageShop.state = MILEAGESHOP_STATE_PLAY;
                    }
                    else if(touchCheck(&xMileageShop.xTouchName) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        setTextField(TEXTBOX_TYPE_MILEAGESHOP_NAME, lcdW/2, lcdH+999, 200, 25);
                    }
                    else if(touchCheck(&xMileageShop.xTouchAddress) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        setTextField(TEXTBOX_TYPE_MILEAGESHOP_ADDRESS, lcdW/2, lcdH+999, 200, 25);
                    }
                    else if(touchCheck(&xMileageShop.xTouchPhone) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        setTextField(TEXTBOX_TYPE_MILEAGESHOP_PHONE, lcdW/2, lcdH+999, 200, 25);
                    }
                    else if(touchCheck(&xMileageShop.xTouchBuy) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        
                        if(strlen(xMileageShop.strName) == 0)
                        {
                            if(xMileageShop.state == MILEAGESHOP_STATE_INFO_EDIT)
                                xMileageShop.state = MILEAGESHOP_STATE_INFO_EDITPOPUP;
                            else
                                xMileageShop.state = MILEAGESHOP_STATE_SENDPOPUP_POPUP;
                            
                            sprintf(xMileageShop.strPopupTitle, "알림");
                            sprintf(xMileageShop.strPopupText, "이름을 입력해주세요.");
                        }
                        else if(strlen(xMileageShop.strAddress) == 0)
                        {
                            if(xMileageShop.state == MILEAGESHOP_STATE_INFO_EDIT)
                                xMileageShop.state = MILEAGESHOP_STATE_INFO_EDITPOPUP;
                            else
                                xMileageShop.state = MILEAGESHOP_STATE_SENDPOPUP_POPUP;
                            sprintf(xMileageShop.strPopupTitle, "알림");
                            sprintf(xMileageShop.strPopupText, "주소를 입력해주세요.");
                        }
                        else if(strlen(xMileageShop.strPhone) == 0)
                        {
                            if(xMileageShop.state == MILEAGESHOP_STATE_INFO_EDIT)
                                xMileageShop.state = MILEAGESHOP_STATE_INFO_EDITPOPUP;
                            else
                                xMileageShop.state = MILEAGESHOP_STATE_SENDPOPUP_POPUP;
                            sprintf(xMileageShop.strPopupTitle, "알림");
                            sprintf(xMileageShop.strPopupText, "전화번호를 입력해주세요.");
                        }
                        else
                        {
                            if(xMileageShop.state == MILEAGESHOP_STATE_INFO_EDIT)
                            {
                                xMileageShop.state = MILEAGESHOP_STATE_INFO;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MILEAGESHOPUPDATE, TRUE);
                            }
                            else
                                xMileageShop.state = MILEAGESHOP_STATE_SENDPOPUP_BUY;
                        }
                    }
                }
                break;
            case MILEAGESHOP_STATE_PLAY:
                if(type == MH_KEY_PRESSEVENT)
                {
                    bool isCategoryTab = false;
                    int selectCategoryTab;
                    for(int k=0;k<MILEAGESHOPCATEGORYMAX;k++)
                    {
                        if(touchCheck(&xMileageShop.xTouchCategory[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                        {
                            isCategoryTab = true;
                            selectCategoryTab = k;
                            break;
                        }
                    }
                    
                    
                    
                    
                    
                    if(touchCheck(&xMileageShop.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        xWorldMap.state = WORLDMAP_STATE_PLAY;
                        mileageShopFreeLoad(FALSE);
                        
                    }
                    if(touchCheck(&xMileageShop.xTouchInfo) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        xMileageShop.state = MILEAGESHOP_STATE_INFO;
                        xMileageShopInfo.totalNum = 0;
                        
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MILEAGESHOPINFO, TRUE);
                    }
                    else if(isCategoryTab == true && xMileageShop.selectCategoryTab != selectCategoryTab)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xMileageShop.selectCategoryTab = selectCategoryTab;
                        setMileageShopCategory();
                    }
                    else
                    {
                        dragScrollKeyPrc(&xMileageShop.xDragScroll,2);
                    }
                }
                else if(type == MH_KEY_RELEASEEVENT)
                {
                    if(xMileageShop.xDragScroll.touchXposBefore != DONT)
                    {
                        dragScrollKeyPrc(&xMileageShop.xDragScroll,3);
                    }
                    else
                    {
                        bool isSelectLink = false;
                        int selectLink = 0;
                        bool isSelectBuy = false;
                        int selectBuy = 0;
                        
                        for(int k=0;k<6;k++)
                        {
                            if(touchCheck(&xMileageShop.xTouchSlotBuy[k]) == TRUE)
                            {
                                isSelectBuy = true;
                                selectBuy = k;
                                break;
                            }
                            
                            if(touchCheck(&xMileageShop.xTouchSlotLink[k]) == TRUE)
                            {
                                isSelectLink = true;
                                selectLink = k;
                                break;
                            }
                        }
                        
                        if(isSelectBuy == true)
                        {
                            xMileageShop.selectSlot = selectBuy+(xMileageShop.xDragScroll.selectNum*3);
                        }
                        else if(isSelectLink == true)
                        {
                            xMileageShop.selectSlot = selectLink+(xMileageShop.xDragScroll.selectNum*3);
                        }
                        
                        if(xMileageShop.selectSlot < 0 || xMileageShop.selectSlot >= xMileageShop.totalList)
                        {
                            isSelectBuy = false;
                            isSelectLink = false;
                        }
                        
                        if(isSelectBuy == true)
                        {
                            playSnd(SND_MENU_OK);
                            
                            int type = xMileageShop.listCode[xMileageShop.selectSlot]/10000;
                            int list = xMileageShop.listCode[xMileageShop.selectSlot]%10000;
                            
                            if(xMileageData.xSlot[type][list].nowCount >= xMileageData.xSlot[type][list].maxCount)
                            {
                                xMileageShop.state = MILEAGESHOP_STATE_POPUP;
                                sprintf(xMileageShop.strPopupTitle, "재고부족");
                                sprintf(xMileageShop.strPopupText, "죄송합니다.\n신청하신 상품의 재고가 부족합니다.\n다른 상품을 신청해주세요.");
                            }
                            else if(xSaveTemp.mileage.oriData < xMileageData.xSlot[type][list].price)
                            {
                                xMileageShop.state = MILEAGESHOP_STATE_POPUP;
                                sprintf(xMileageShop.strPopupTitle, "마일리지부족");
                                sprintf(xMileageShop.strPopupText, "마일리지가 부족합니다.");
                            }
                            else
                            {
                                setStateMileageShopSendPopup();
                            }
                        }
                        else if(isSelectLink == true)
                        {
                            playSnd(SND_MENU_OK);
                            openWebView(WEBVIEW_TYPE_MILEAGESHOP);
                        }
                    }
                    xMileageShop.xDragScroll.touchXpos = DONT;
                    xMileageShop.xDragScroll.touchYpos = DONT;
                    xMileageShop.xDragScroll.touchXposBefore = DONT;
                    xMileageShop.xDragScroll.touchYposBefore = DONT;
                }
                break;
            }
            break;
		case WORLDMAP_STATE_SELL:
			switch(xSell.state)
			{
			case SELL_STATE_MAIN:
				if(type == MH_KEY_PRESSEVENT)
				{
					///////////슬롯창//////
					isSellSlot = FALSE;
					selectSellSlot = 0;
					subTemp[10] = xSell.selectSlot;
					setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
					for(int i=0;i<xObj.xObjData[xMap.type][xMap.listNum].slot;i++)
					{
						if(touchCheck(&xTouchSellSlot[i]) == TRUE)
						{
							isSellSlot = TRUE;
							selectSellSlot = i;
							break;
						}
					}
					
					if(touchCheck(&xProductionMenu.xTouchSlotInfo) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						if(xSell.isSlotInfo == TRUE)
							xSell.isSlotInfo = FALSE;
						else
							xSell.isSlotInfo = TRUE;
					}
					else if(touchCheck(&xTouchClr) == TRUE)
					{
						//LJW 의상판매 취소
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_CLOSE] == TRUE)
						{
							
						}
						else
						{
							initFashionDrop(DONT);
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							
							resetSellTableInfo(xMap.nowFloor);
						}
						
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
								case TUTO_1_RESULT:
								case TUTO_2_RESULT:
									xQuestTuto.isTutoClean = TRUE;
									break;
							}
						}
						
						gameSave(SAVE_SLOT_SELLSLOT);
						
						
						
					}
					else if(isSellSlot == TRUE)
					{
//						xSell.selectSlot = selectSellSlot;
//						setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code);
//						initFashionDrop(xSell.selectSlot);
						
						xSellSlotSave.code[selectSellSlot] = DONT;
						
						
//LJW 의상판매 완료회수하기 주석처리
//						if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code == DONT)
//						{
//							if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].waitSlot != DONT)
//							{
//								xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].waitSlot = DONT;
//								initFashionDrop(xSell.selectSlot);
//							}
//							//빈슬롯일경우 진열선택모드로 넘어감
//						}
//						else if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].num == 0)
//						{
//							//완료회수하기
//							xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].eventBoxShowAntCnt = 0;
//							for(int tt=0;tt<TRENDMAX;tt++)
//							{
//								if(xTrend.isOpen[tt] == TRUE)
//								{
//									if(xTrend.itemCode[tt] == xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code)
//									{
//										xSaveTemp.sellTrendNum += xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].maxNum;
//										break;
//									}
//								}
//							}
//							
//							M_Boolean isTrend = FALSE;
//							xTrend.bonus = 100;
//							for(int tt=0;tt<TRENDMAX;tt++)
//							{
//								if(xTrend.isOpen[tt] == TRUE)
//								{
//									if(xTrend.itemCode[tt] == xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code)
//									{
//										isTrend = TRUE;
//										xTrend.bonus = xTrend.per[tt];
//										if(xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER] > 0)
//										{
//											xTrend.bonus += xTrend.bonus*xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER]/100;
//										}
//									}
//								}
//							}
//							
//														
//							
//							
//							
//							
//							setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
//							
//							if(isTrend == TRUE)
//								setQuest(4, 1, DONT);
//							
//							
//							
//							int gold = (xFashionData[xMap.type][xMap.listNum].sellPrice.oriData * xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].maxNum)*xTrend.bonus/100;
//							int goldOri = gold;
//							int exp = xFashionData[xMap.type][xMap.listNum].exp.oriData * xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].maxNum;
//							int expOri = exp;
//							
//                            
//                            
//							if(xBuff.isOpen[BUFF_TYPE_SELLMONEY] == TRUE)
//							{
//								gold += goldOri*xBuff.bonusPer[BUFF_TYPE_SELLMONEY]/100;
//								
//							}
//							
//							if(xBuff.isOpen[BUFF_TYPE_SELLEXP] == TRUE)
//							{
//								exp += expOri*xBuff.bonusPer[BUFF_TYPE_SELLEXP]/100;
//
//							}
//							
//							
//							if(xMap.nowFloor == 0)
//							{
//								if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR1] > 0)
//								{
//									gold += goldOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR1]/100;
//								}
//								
//								if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR1] > 0)
//								{
//									exp += expOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR1]/100;
//								}
//							}
//							
//							if(xMap.nowFloor == 1)
//							{
//								if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR2] > 0)
//								{
//									gold += goldOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR2]/100;
//								}
//								
//								if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR2] > 0)
//								{
//									exp += expOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR2]/100;
//								}
//							}
//                            
//                            if(xRival.buffExp > 0)
//                                exp += expOri*xRival.buffExp/100;
//                            
//                            exp += exp*xAmulet.buff[JEWELBUFF_TYPE_SELL_EXP]/100;
//                            gold += gold*xAmulet.buff[JEWELBUFF_TYPE_SELL_GOLD]/100;
//                            
//                            
//                            
//                            
//							
//							
//							setQuest(2, 1, xMap.type*1000+xMap.listNum);
//							setQuest(37, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData, DONT);
//							setQuest(85,gold,xMap.type);
//							setQuest(88,1,xInShopPer.inShopPerTotal.oriData);
//							
//							
//							setMoney(gold);
//							setExp(exp);
//							setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_GOLD, gold);
//							setBonus(xTouch.xPos, xTouch.yPos-26, ICON_TYPE_EXP, exp);
//							xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code = DONT;
//							
//							
//							
//                            /////////////////////////
//                            xEventQueueNet.EXP[xEventQueueNet.totalNum] = exp;
//                            xEventQueueNet.GOLD[xEventQueueNet.totalNum] = gold;
//                            xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
//                            xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_OBJ][xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].x][xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].y];
//                            xEventQueueNet.SLOT[xEventQueueNet.totalNum] = xSell.selectSlot;
//                            addEventQueueNet(0, 0, NETQUEUE_TYPE_SELLCOMPLETE, TRUE);
//                            /////////////////////////
//                            
//                            setJewelQuest(12, gold,DONT);
//                            setRivalQuest(0,gold);  //매출
//                            if(isTrend == true)
//                                setRivalQuest(6,1);  //유행의상판매
//						}
//						else
//						{
//							
//							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_COMPLETE0] == TRUE)
//							{
//								
//							}
//							else
//							{
//								xSell.state = SELL_STATE_CASHPOPUP;
//								//슬롯 이동 아무처리도 하지 않는다
//							}
//						}
					}
					
					else if(touchCheck(&xTouchOk) == TRUE)
					{
						//LJW 의상진열하기 주석처리함.
						//진열하기
//						M_Boolean isPlay = FALSE;
//						setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);
//						for(int i=0;i<xObj.xObjData[xMap.type][xMap.listNum].slot;i++)
//						{
//							if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot != DONT)
//							{
//								xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].code = xSell.xSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot].code;
//								xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].flowTime = 0;
//								isPlay = TRUE;
//								
//								int code = xSell.xSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot].code;
//								outputInventoryFashion(code,xSell.xSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot].maxNum);
//								
//                                
//                                /////////////////////////
//                                xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = code;
//                                xEventQueueNet.COUNT[xEventQueueNet.totalNum] = xSell.xSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot].maxNum;
//                                xEventQueueNet.SELL_COUNT[xEventQueueNet.totalNum] = xSell.xSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot].maxNum;
//                                xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
//                                xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_OBJ][xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].x][xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].y];
//                                xEventQueueNet.SLOT[xEventQueueNet.totalNum] = i;
//                                addEventQueueNet(0, 0, NETQUEUE_TYPE_SELLSTART, TRUE);
//                                /////////////////////////
//                                
//                                
//                                
//                                xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot = DONT;
//                                
//                                
//								//	주문된 의상 진열
//								setQuest(41, 1, DONT);
//								setQuest(42, 1, code);
//                                
//                                
//								
//								switch(xFashionData[code/1000][code%1000].gender)
//								{
//								case 0:
//									setQuest(75, 1, DONT);
//									break;
//								case 1:
//									setQuest(76, 1, DONT);
//									break;
//								}
//								
//															
//								if(xQuestTuto.state == QUEST_TUTO_KEY)
//								{
//									switch(xQuestTuto.nowNum)
//									{
//									case TUTO_1_SELLTABLESTART1:
//									case TUTO_2_SELLTABLESTART1:
//										xQuestTuto.isTutoClean = TRUE;
//										break;
//									}
//								}
//
//								
//								
//								M_Boolean isTrend = FALSE;
//								for(int tt=0;tt<TRENDMAX;tt++)
//								{
//									if(xTrend.isOpen[tt] == TRUE)
//									{
//										if(xTrend.itemCode[tt] == code)
//										{
//											isTrend = TRUE;
//										}
//									}
//								}
//								
//								if(isTrend == TRUE)
//								{
//									xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].isTrendTouchAny0 = TRUE;
//									xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].trendTouchAny0 = 0;
//								}
//							}
//						}
//												
//						if(isPlay == TRUE)
//						{
//							initFashionDrop(DONT);
//
//						}
//						setSellSelectItemSlot();
					}
					/////////목록창///////
					else if(xSell.totalSlot == 0  && touchCheck(&xTouchLink) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_SCROLL] == TRUE)
						{
							
						}
						else
						{
							setStateProductionMenu();
							setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);
							switch(xMap.type)
							{
								case INTERIOR_TYPE_HANGER:		//옷걸이
									xCatalog.selectTabS = 0;
									break;
								case INTERIOR_TYPE_ACCESSORY:	//진열대
									xCatalog.selectTabS = 4;
									break;
							}
							setCatalogTabChange(xCatalog.selectTabS);
						}
					}
					else
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_SCROLL] == TRUE)
						{
							
						}
						else
							dragScrollKeyPrc(&xDragScrollSellSelectItemSlot,2);
					}
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xDragScrollSellSelectItemSlot.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xDragScrollSellSelectItemSlot,3);
					}
					else
					{
						isSellSelectItemSlot = FALSE;
						selectSellSelectItemSlot = 0;
						
						for(int i=0;i<9;i++)
						{
							if(touchCheck(&xTouchSellSelectItemSlot[i]) == TRUE)
							{
								isSellSelectItemSlot = TRUE;
								selectSellSelectItemSlot = i;
								break;
							}
						}
						
						
						
						xSell.selectSellSelectItemSlot = selectSellSelectItemSlot+(xDragScrollSellSelectItemSlot.selectNum*3);
						if(xSell.selectSellSelectItemSlot < 0 || xSell.selectSellSelectItemSlot >= xSell.totalSlot)
							isSellSelectItemSlot = FALSE;
						
						if(isSellSelectItemSlot == TRUE)
						{
//LJW 옷걸이 / 진열대 생산 주석처리
//							if(xSell.xSlot[xSell.selectSellSelectItemSlot].isProduction == TRUE)
//							{
//								setMapData(xSell.xSlot[xSell.selectSellSelectItemSlot].code);
//								if(xProductionMenu.state[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[selectSellSelectItemSlot].productionSelectSlot] == PRODUCTIONMENUSLOT_STATE_RECV)
//								{
//									//수취중
//								}
//								else if(xProductionMenu.state[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot] == PRODUCTIONMENUSLOT_STATE_PLAY
//										&& xProductionMenu.slotCode[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot] != DONT
//										&& xProductionMenu.slotFlowTime[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData )
//								{
//									//완료상태
//									xProductionMenu.state[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot] = PRODUCTIONMENUSLOT_STATE_RECV;
//									xProductionMenu.recvAnyCnt[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot] = 0;
//								}
//								else if(xProductionMenu.state[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot] == PRODUCTIONMENUSLOT_STATE_PLAY && xProductionMenu.slotCode[xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType][xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot] != DONT)
//								{
//									//물품돌아가는중
//									xProductionMenu.selectType = xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectType;
//									xProductionMenu.selectSlot = xSell.xSlot[xSell.selectSellSelectItemSlot].productionSelectSlot;
//									xSell.state = SELL_STATE_CASHPOPUP_PRODUCTION;
//								}
//							}
//							else
							if(touchCheck(&xTouchSellSelectItemSlotInfo[selectSellSelectItemSlot]) == TRUE)
							{
								xSell.xSlot[xSell.selectSellSelectItemSlot].isInfoOpen = xSell.xSlot[xSell.selectSellSelectItemSlot].isInfoOpen==FALSE?TRUE:FALSE;
							}
							else
							{
								//슬롯에 넣기
								playSnd(SND_SELLTABLE_INPUT);
								setMapData(xSell.xSlot[xSell.selectSellSelectItemSlot].code);
								M_Boolean isWaitSlot[512];
								for(int i=0;i<xSell.totalSlot;i++)
								{
									isWaitSlot[i] = FALSE;
								}
								setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);
								for(int i=0;i<xObj.xObjData[xMap.type][xMap.listNum].slot;i++)
								{
									if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot != DONT)
									{
										isWaitSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot] = TRUE;
									}
								}
								//진열대기인놈이면 풀어주고
								if(isWaitSlot[xSell.selectSellSelectItemSlot] == TRUE)
								{
									for(int i=0;i<xObj.xObjData[xMap.type][xMap.listNum].slot;i++)
									{
										if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot == xSell.selectSellSelectItemSlot)
										{
											xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot = DONT;
											initFashionDrop(i);
										}
									}
								}
								else
								{
									//진열대기로
									int inputNum;
									
									xSell.selectSlot = getEmptySlot();
									
									if(xSell.selectSlot != DONT)
									{
										
										
										setFashionDrop(xSell.selectSlot,xFashionDrop.x_sellList[selectSellSelectItemSlot], xFashionDrop.y_sellList[selectSellSelectItemSlot], xFashionDrop.scale_sellList[selectSellSelectItemSlot],
													   xFashionDrop.x_sellSlot[xSell.selectSlot], xFashionDrop.y_sellSlot[xSell.selectSlot], xFashionDrop.scale_sellSlot[xSell.selectSlot],xSell.xSlot[xSell.selectSellSelectItemSlot].code);
										
										inputNum = xSell.xSlot[xSell.selectSellSelectItemSlot].maxNum;
										
										xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].waitSlot = xSell.selectSellSelectItemSlot;
										xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code = DONT;
										xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].maxNum = inputNum;
										xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].num = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].maxNum;
										xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].flowTime = 0;
										
										xSellSlotSave.code[xSell.selectSlot] = xSell.xSlot[xSell.selectSellSelectItemSlot].code;
										
									}
								}
							}
						}
					}
					xDragScrollSellSelectItemSlot.touchXpos = DONT;
					xDragScrollSellSelectItemSlot.touchYpos = DONT;
					xDragScrollSellSelectItemSlot.touchXposBefore = DONT;
					xDragScrollSellSelectItemSlot.touchYposBefore = DONT;
				}
				break;
			case SELL_STATE_CASHPOPUP:
				if(touchCheck(&xProductionMenu.xTouchFast) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_COMPLETE1] == TRUE)
					{
						
					}
					else
					{
						if(xSaveTemp.cash.oriData < getFastSellCash(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].num))
							setPopup(POPUP_CASHEMPTY, playState, playState,0, DONT);
						else
						{
                            
                            setPopup(POPUP_SELLFAST, PLAY_PLAY, PLAY_PLAY, 0, DONT);
						}
					}
				}
				else if(touchCheck(&xProductionMenu.xTouchDelBtn) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
										
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_COMPLETE2] == TRUE)
					{
						
					}
					else
					{
						xSell.state = SELL_STATE_MAIN;
						 xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code = DONT;
                        
                        /////////////////////////
                        xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
                        xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_OBJ][xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].x][xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].y];
                        xEventQueueNet.SLOT[xEventQueueNet.totalNum] = xSell.selectSlot;
                        addEventQueueNet(0, 0, NETQUEUE_TYPE_SELLCANCLE, TRUE);
                        /////////////////////////
					}
				}
				else if(touchCheck(&xTouchClr) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xSell.state = SELL_STATE_MAIN;
				}
				break;
			case SELL_STATE_CASHPOPUP_PRODUCTION:
				if(touchCheck(&xProductionMenu.xTouchFast) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE1] == TRUE)
					{
						
					}
					else
					{
						setMapData(xProductionMenu.slotCode[xProductionMenu.selectType][xProductionMenu.selectSlot]);
                        
                        int remainTime = xFashionData[xMap.type][xMap.listNum].makeTime.oriData - xProductionMenu.slotFlowTime[xProductionMenu.selectType][xProductionMenu.selectSlot];
                        
						if(xSaveTemp.cash.oriData < getFastTimeCash(remainTime))
							setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
						else
						{
                            
                            setPopup(POPUP_PRODUCTIONFAST, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            
						}
					}
				}
				else if(touchCheck(&xProductionMenu.xTouchDelBtn) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE2] == TRUE)
					{
						
					}
					else
					{
						xSell.state = SELL_STATE_MAIN;
						
						xProductionMenu.slotCode[xProductionMenu.selectType][xProductionMenu.selectSlot] = DONT;
						xProductionMenu.state[xProductionMenu.selectType][xProductionMenu.selectSlot] = PRODUCTIONMENUSLOT_STATE_WAIT;
						xProductionMenu.pushState[xProductionMenu.selectType][xProductionMenu.selectSlot] = 1;	//0:주문1:취소
						if(xSave.isPushOnOff[PUSHONOFF_PRODUCTION] == FALSE)
							xProductionMenu.pushState[xProductionMenu.selectType][xProductionMenu.selectSlot] = 1;	//0:주문1:취소
						xProductionMenu.pushTime[xProductionMenu.selectType][xProductionMenu.selectSlot] = 0;
						xProductionMenu.isUpData[xProductionMenu.selectType][xProductionMenu.selectSlot] = TRUE;
						playState = xPopup.yes;
                        
                        
                        ////////////////////////////////////////////////////////////////////////////
                        xEventQueueNet.SLOT[xEventQueueNet.totalNum] = (xProductionMenu.selectType*6)+xProductionMenu.selectSlot;
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONCANCLE, TRUE);
                        ////////////////////////////////////////////////////////////////////////////
                        
						if(xWorldMap.state == WORLDMAP_STATE_SELL)
							setSellSelectItemSlot();
						
						
						
						
						
					}
				}
				else if(touchCheck(&xTouchClr) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xSell.state = SELL_STATE_MAIN;
				}
				break;
			}
			break;
		case WORLDMAP_STATE_COLLECTION:
			switch(xCollection.selectTabB)
			{
			case 0:
				switch(xCollection.state)
				{
				case COLLECTION_STATE_MAIN:
					if(type == MH_KEY_PRESSEVENT)
					{
						
						isKeyEvent = FALSE;
						for(int i=0;i<COLLECTIONTABMAX;i++)
						{
							if(touchCheck(&xCollection.xTouchTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
								break;
							}
						}
						
						isSelectSlot = FALSE;
						selectSlotNum = 0;
						if(xCollection.selectSlot != DONT)
						{
							for(int i=0;i<xModelData[xCollection.xSlot[xCollection.selectSlot].code].totalSkillNum;i++)
							{
								if(touchCheck(&xCollection.xTouchSkill[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
								{
									isSelectSlot = TRUE;
									selectSlotNum = i;
									break;
								}
							}
						}
						
						if(isKeyEvent == TRUE)
						{
							playSnd(SND_MENU_OK);
							if(xCollection.selectTabB != keyEventNum)
							{
								xWorldMap.isKeyReturn = TRUE;
								xCollection.selectTabB = keyEventNum;
								setCollectionTab();
							}
						}
						else if(isSelectSlot == TRUE)
						{
							playSnd(SND_MENU_OK);
							xWorldMap.isKeyReturn = TRUE;
							xCollection.selectSkill = selectSlotNum;
						}
						else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							playSnd(SND_MENU_OK);
							xWorldMap.isKeyReturn = TRUE;
							
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							collectionFreeLoad(FALSE);
						}
						else
						{
							dragScrollKeyPrc(&xCollection.xDragScroll,2);
						}
					}
					else if(type == MH_KEY_RELEASEEVENT)
					{
						if(xCollection.xDragScroll.touchXposBefore != DONT)
						{
							dragScrollKeyPrc(&xCollection.xDragScroll,3);
						}
						else
						{
							isKeyEvent = FALSE;
							for(int i=0;i<xCollection.totalSlot;i++)
							{
								if(touchCheck(&xCollection.xSlot[i].xTouch) == TRUE)
								{
									
									isKeyEvent = TRUE;
									keyEventNum = i;
									break;
								}
							}
							
							if(touchCheck(&xCollection.xTouchInfo) == TRUE)
							{
								playSnd(SND_MENU_OK);
								xCollection.state = COLLECTION_STATE_MODELINFOPOPUP;
							}
							else if(isKeyEvent == TRUE)
							{
								if(xCollection.selectSlot != keyEventNum)
								{
									playSnd(SND_MENU_OK);
									freeFashion();
									xCollection.selectSlot = keyEventNum;
									xCollection.selectSkill = 0;
								}
							}
						}
						
						xCollection.xDragScroll.touchXpos = DONT;
						xCollection.xDragScroll.touchYpos = DONT;
						xCollection.xDragScroll.touchXposBefore = DONT;
						xCollection.xDragScroll.touchYposBefore = DONT;
					}
					break;
				case COLLECTION_STATE_MODELINFOPOPUP:
					if(type == MH_KEY_PRESSEVENT)
					{
						isKeyEvent = FALSE;
						for(int i=0;i<2;i++)
						{
							if(touchCheck(&xModel.xTouchHelpTab[i]) == TRUE)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
							}
						}
						
						if(isKeyEvent == TRUE)
						{
							playSnd(SND_MENU_OK);
							xWorldMap.isKeyReturn = TRUE;
							xModel.selectHelpTab = keyEventNum;
						}
						else if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							playSnd(SND_MENU_OK);
							xWorldMap.isKeyReturn = TRUE;
							xCollection.state = COLLECTION_STATE_MAIN;
						}
					}
					break;
				}
				break;
			case 1:
				switch(xCollection.state)
				{
				case COLLECTION_STATE_FASHIONTHEMESELECT:
					if(type == MH_KEY_PRESSEVENT)
					{
						isKeyEvent = FALSE;
						for(int i=0;i<COLLECTIONTABMAX;i++)
						{
							if(touchCheck(&xCollection.xTouchTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
								break;
							}
						}
						
						if(isKeyEvent == TRUE)
						{
							playSnd(SND_MENU_OK);
							if(xCollection.selectTabB != keyEventNum)
							{
								xWorldMap.isKeyReturn = TRUE;
								xCollection.selectTabB = keyEventNum;
								setCollectionTab();
							}
						}
						else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							playSnd(SND_MENU_OK);
							xWorldMap.isKeyReturn = TRUE;
							
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							collectionFreeLoad(FALSE);
						}
						else
						{
							dragScrollKeyPrc(&xCollection.xDragScrollTheme,2);
						}
					}
					else if(type == MH_KEY_RELEASEEVENT)
					{
						if(xCollection.xDragScrollTheme.touchXposBefore != DONT)
						{
							dragScrollKeyPrc(&xCollection.xDragScrollTheme,3);
						}
						else
						{
							isKeyEvent = FALSE;
							for(int i=0;i<xCollection.totalFashionTheme;i++)
							{
								if(touchCheck(&xCollection.xTouchFashionThemeList[i]) == TRUE)
								{
									isKeyEvent = TRUE;
									keyEventNum = i;
									break;
								}
							}
							
							if(isKeyEvent == TRUE)
							{
								playSnd(SND_MENU_OK);
								xCollection.state = COLLECTION_STATE_FASHIONTHEMEMAIN;
								xCollection.selectFashionThemeList = keyEventNum;
								xCollection.selectSlotFashion = 0;
								setThemeList();
							}
						}
						xCollection.xDragScrollTheme.touchXpos = DONT;
						xCollection.xDragScrollTheme.touchYpos = DONT;
						xCollection.xDragScrollTheme.touchXposBefore = DONT;
						xCollection.xDragScrollTheme.touchYposBefore = DONT;
					}
					break;
				case COLLECTION_STATE_FASHIONTHEMEMAIN:
						
					if(type == MH_KEY_PRESSEVENT)
					{
						isKeyEvent = FALSE;
						for(int i=0;i<COLLECTIONTABMAX;i++)
						{
							if(touchCheck(&xCollection.xTouchTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
							{
								isKeyEvent = TRUE;
								keyEventNum = i;
								break;
							}
						}
						
						isSelectSlot = FALSE;
						selectSlotNum = 0;
	
						for(int i=0;i<xCollection.totalFashionList;i++)
						{
							if(touchCheck(&xCollection.xTouchFashionList[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
							{
								isSelectSlot = TRUE;
								selectSlotNum = i;
								break;
							}
						}
												
						if(isKeyEvent == TRUE)
						{
							playSnd(SND_MENU_OK);
							if(xCollection.selectTabB != keyEventNum)
							{
								xWorldMap.isKeyReturn = TRUE;
								xCollection.selectTabB = keyEventNum;
								setCollectionTab();
							}
						}
						else if(isSelectSlot == TRUE)
						{
							if(xCollection.selectSlotFashion != selectSlotNum)
							{
								playSnd(SND_MENU_OK);
								xCollection.selectSlotFashion = selectSlotNum;
							}
						}
						else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							playSnd(SND_MENU_OK);
							xWorldMap.isKeyReturn = TRUE;
							setCollectionTab();
						}
					}
					break;
				}
				break;
			}
			break;
		case WORLDMAP_STATE_FITTING:
			if(touchType == USER_POINT_PRESS_EVENT)
			{
				isKeyEvent = FALSE;
				for(int i=0;i<FITTINGTABMAX;i++)
				{
					if(touchCheck(&xTouchFittingTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						isKeyEvent = TRUE;
						keyEventNum = i;
						break;
					}
				}
				
				if(isKeyEvent == TRUE)
				{
					if(keyEventNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY0] == TRUE)
						isKeyEvent = FALSE;
					else if(keyEventNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY1] == TRUE)
						isKeyEvent = FALSE;
					else if(keyEventNum == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY2] == TRUE)
						isKeyEvent = FALSE;
					else if(keyEventNum == 3 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY3] == TRUE)
						isKeyEvent = FALSE;
					else if(keyEventNum == 4 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY4] == TRUE)
						isKeyEvent = FALSE;
					else if(keyEventNum == 5 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY5] == TRUE)
						isKeyEvent = FALSE;
					else if(keyEventNum == 6 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY6] == TRUE)
						isKeyEvent = FALSE;
				}
				
				if(isKeyEvent == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xFitting.selectTabB = keyEventNum;
					setFittingTabChange();
				}
				else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{

					playSnd(SND_MENU_OK);
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKIN] == TRUE)
					{
						
					}
					else
					{
						//넣어입기
						xFitting.xF[xFitting.gender].isInFitting = TRUE;
						xFitting.isInOutMenu = FALSE;
						xWorldMap.isKeyReturn = TRUE;
						
						if(xQuestTuto.state == QUEST_TUTO_KEY)
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_12_SHOWWINDOWIN1:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
					}
				}
				else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKOUT] == TRUE)
					{
						
					}
					else
					{
						//빼입기
						xFitting.xF[xFitting.gender].isInFitting = FALSE;
						xFitting.isInOutMenu = FALSE;
						xWorldMap.isKeyReturn = TRUE;
						
						if(xQuestTuto.state == QUEST_TUTO_KEY)
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_12_SHOWWINDOWOUT:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
					}
				}
				else if(xFitting.isInOutMenu == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] == TRUE)
					{
					}
					else
					{
						xFitting.isInOutMenu = FALSE;
						xFitting.inOutCnt = 0;
						xWorldMap.isKeyReturn = TRUE;
					}
				}
				else if(touchCheck(&xTouchFittingMenu[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] == TRUE)
					{
					}
					else
					{
						xFitting.isInOutMenu = xFitting.isInOutMenu == FALSE?TRUE:FALSE;
						xFitting.inOutCnt = 0;
						xWorldMap.isKeyReturn = TRUE;
					}
										
				}
				else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_EXIT] == TRUE)
					{
						
					}
					else
					{
						xWorldMap.state = WORLDMAP_STATE_PLAY;
						if(xQuestTuto.state == QUEST_TUTO_KEY)
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_11_RESULT:
							case TUTO_12_RESULT:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
					}

				}
				else if(xFitting.totalNumS == 0 && touchCheck(&xTouchLink) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					setStateProductionMenu();
					xCatalog.selectTabS = xFitting.selectTabB;
					setCatalogTabChange(xCatalog.selectTabS);
				}
				else if(touchCheck(&xTouchGenderLeft) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_WOMAN] == TRUE)
					{
					}
					else
					{
						xFitting.gender = 0;
						setFittingTabChange();
					}
				}
				else if(touchCheck(&xTouchGenderRight) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_MAN] == TRUE)
					{
					}
					else
					{
						xFitting.gender = 1;
						setFittingTabChange();
					}
				}
				else if(touchCheck(&xTouchFittingReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RESET] == TRUE)
					{
					}
					else
					{
						//실제 피팅 내용 쇼윈도에 적용하기
						for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
						{
							xFitting.xF[0].code[ff] = DONT;
							xFitting.xF[1].code[ff] = DONT;
						}
						//xFitting.gender = xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].gender;
						//memcpy(&xFitting.xF[xFitting.gender],&xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF,sizeof(xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF));
						
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_11_SHOWWINDOWRESET:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
					}
				}
				else if(touchCheck(&xTouchFittingSave) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_SAVE] == TRUE)
					{
						
					}
					else
					{
						xWorldMap.state = WORLDMAP_STATE_PLAY;
						//실제 피팅 내용 쇼윈도에 적용하기
						xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].gender = xFitting.gender;
						memcpy(&xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF,&xFitting.xF[xFitting.gender],sizeof(xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF));
						resetShowWindowInfo();

						/////////////////////////////////////////////////////////////////////////////
						xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
						xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_WALL1][xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].x][xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].y];
						xEventQueueNet.sex[xEventQueueNet.totalNum] = xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].gender;
						for(int k=0;k<16;k++)
							xEventQueueNet.layer[xEventQueueNet.totalNum][k] = xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF.code[k];
						
						xEventQueueNet.open[xEventQueueNet.totalNum] = xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF.isInFitting == FALSE?0:1;
						
						addEventQueueNet(0, 0, NETQUEUE_TYPE_SHOWWINDOW, TRUE);
						/////////////////////////////////////////////////////////////////////////////
					}

				}
				else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollFittingS.selectNum > 0)
				{
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LEFT] == TRUE)
					{
						
					}
					else
					{
						xDragScrollFittingS.speed = 320;
					}
				}
				else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
				{
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RIGHT] == TRUE)
					{
						
					}
					else
					{
						xDragScrollFittingS.speed = -320;
					}
				}
				else
				{
					if(xDragScrollFittingS.pos == 0 && xDragScrollFittingS.speed == 0)
					{
						isSelectCatalogS = FALSE;
						selectCatalogSNum = 0;
						for(int i=0;i<8;i++)
						{
							if(touchCheck(&xTouchFittingS[i]) == TRUE)
							{
								isSelectCatalogS = TRUE;
								selectCatalogSNum = i;
								break;
							}
						}
						if(selectCatalogSNum+(xDragScrollFittingS.selectNum*8) >= xFitting.totalNumS)
							isSelectCatalogS = FALSE;
					
						int selectFittingTemp = selectCatalogSNum+(xDragScrollFittingS.selectNum*8);
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_FITTING] == TRUE)
						{
							isSelectCatalogS = FALSE;
						}
												
						if(isSelectCatalogS == TRUE)
						{
							playSnd(SND_FITTING);
							int totalLayer = 0;
							int layerInfo[20];
							int slotCode;
							M_Boolean isAdd = FALSE;
							for(int i=0;i<xFitting.totalNumS;i++)
							{
								slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
								setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
								
								isAdd = FALSE;
								for(int k=0;k<totalLayer;k++)
								{
									if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
									{
										isAdd = TRUE;
										break;
									}
									else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
									{
										isAdd = TRUE;
										for(int kk=totalLayer;kk>k;kk--)
										{
											layerInfo[kk] = layerInfo[kk-1];
										}
										layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
										totalLayer++;
										break;
									}
								}
								
								if(isAdd == FALSE)
								{
									layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
								}
							}
							
							xFitting.selectSlot = selectFittingTemp;
							setMapData(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
							//실제적인 처리를 해주자
							
							
							//선택된게 장착중일때는 바로 해제
							if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code)
							{
								xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = DONT;
								xFitting.selectSlot = DONT;
							}
							//선택된곳에 이미 다른레이어 존재
							else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
							{
								
							}
							else if(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].isModelUse == TRUE)
							{
								
							}
							//선택이 되어있다면 무언가 있다면 변경
							else if(xFitting.selectSlot == selectFittingTemp && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
							{
								xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
								xFitting.selectSlot = DONT;
							}
							else if(xFitting.xF[xFitting.gender].layeredNum >= xFitting.fittingLayeredMax)
							{
								setPopup(POPUP_FITTING_LAYEREDERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
								xFitting.selectSlot = DONT;
							}
							//장착할려는 부위에 아무것도 없다면 바로 장착
							else if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == DONT)
							{
								xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
							}
							//선택이 안되어있다면 그냥 선택으로만
							else
							{
								xFitting.selectSlot = selectFittingTemp;
							}
						}
					}
				}
			}
			break;
		case WORLDMAP_STATE_STAFF:
			switch(xStaff.state)
			{
			case STAFF_STATE_PLAY:
				if(touchType == USER_POINT_PRESS_EVENT)
				{
					isKeyEvent = FALSE;
					for(int i=0;i<FITTINGTABMAX;i++)
					{
						if(touchCheck(&xTouchFittingTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
					
					if(isKeyEvent == TRUE)
					{
						if(keyEventNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY0] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY1] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY2] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 3 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY3] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 4 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY4] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 5 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY5] == TRUE)
							isKeyEvent = FALSE;
					}
					
					if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xFitting.selectTabB = keyEventNum;
						setFittingTabChange();
						xWorldMap.isKeyReturn = TRUE;
					}
					else if(touchCheck(&xStaff.xTouchEdit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EDIT] == TRUE)
						{
							
						}
						else
							stateStaffMake(xStaff.staffSlot[xStaff.selectStaffSlot],STAFFMAKE_INTYPE_EDIT);
					}
					else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						//넣어입기
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_TUCKIN] == TRUE)
						{
							
						}
						else
						{
							xFitting.xF[xFitting.gender].isInFitting = TRUE;
							xFitting.isInOutMenu = FALSE;
						}
						
					}
					else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						//빼입기
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_TUCKOUT] == TRUE)
						{
							
						}
						else
						{
							xFitting.xF[xFitting.gender].isInFitting = FALSE;
							xFitting.isInOutMenu = FALSE;
						}
						
					}
					else if(xFitting.isInOutMenu == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_TUCKMENU] == TRUE)
						{
							
						}
						else
						{
							xFitting.isInOutMenu = xFitting.isInOutMenu == FALSE;
							xFitting.inOutCnt = 0;
						}
						
					}
					else if(touchCheck(&xTouchFittingMenu[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_TUCKMENU] == TRUE)
						{
							
						}
						else
						{
							xFitting.isInOutMenu = xFitting.isInOutMenu == FALSE?TRUE:FALSE;
							xFitting.inOutCnt = 0;
							
						}
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EXIT] == TRUE)
						{
							
						}
						else
						{
							freeFashion();
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							
							xOrder.totalNumListDataFriend = 0;
							xOrder.totalNumListData = 0;
							xOrder.isNetLoad = FALSE;
							addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
						}
						
					}
					else if(touchCheck(&xTouchGenderLeft) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_LEFT] == TRUE)
						{
							
						}
						else
						{
							/////////////////스태프 캐릭변경하기//////////////////
							if(--xStaff.selectStaffSlot < 0)
								xStaff.selectStaffSlot = xStaff.totalStaffSlot-1;
							switch(xStaff.staffSlot[xStaff.selectStaffSlot])
							{
							case STAFF_SLOT_PAYMENTASSISTANT_1F:
								xFitting.gender = xPaymentAssistant[0].gender;
								memcpy(&xFitting.xF[xPaymentAssistant[0].gender],&xPaymentAssistant[0].xF,sizeof(xPaymentAssistant[0].xF));
								memcpy(&xFitting.xFace,&xPaymentAssistant[0].xFace,sizeof(xPaymentAssistant[0].xFace));
								break;
							case STAFF_SLOT_SHOPASSISTANT1_1F:
								xFitting.gender = xShopAssistant[0][0].gender;
								memcpy(&xFitting.xF[xShopAssistant[0][0].gender],&xShopAssistant[0][0].xF,sizeof(xShopAssistant[0][0].xF));
								memcpy(&xFitting.xFace,&xShopAssistant[0][0].xFace,sizeof(xShopAssistant[0][0].xFace));
								break;
							case STAFF_SLOT_PAYMENTASSISTANT_2F:
								xFitting.gender = xPaymentAssistant[1].gender;
								memcpy(&xFitting.xF[xPaymentAssistant[1].gender],&xPaymentAssistant[1].xF,sizeof(xPaymentAssistant[1].xF));
								memcpy(&xFitting.xFace,&xPaymentAssistant[1].xFace,sizeof(xPaymentAssistant[1].xFace));
								break;
							case STAFF_SLOT_SHOPASSISTANT1_2F:
								xFitting.gender = xShopAssistant[1][0].gender;
								memcpy(&xFitting.xF[xShopAssistant[1][0].gender],&xShopAssistant[1][0].xF,sizeof(xShopAssistant[1][0].xF));
								memcpy(&xFitting.xFace,&xShopAssistant[1][0].xFace,sizeof(xShopAssistant[1][0].xFace));
								break;
							case STAFF_SLOT_PAYMENTASSISTANT_3F:
								xFitting.gender = xPaymentAssistant[2].gender;
								memcpy(&xFitting.xF[xPaymentAssistant[2].gender],&xPaymentAssistant[2].xF,sizeof(xPaymentAssistant[2].xF));
								memcpy(&xFitting.xFace,&xPaymentAssistant[2].xFace,sizeof(xPaymentAssistant[2].xFace));
								break;
							case STAFF_SLOT_SHOPASSISTANT1_3F:
								xFitting.gender = xShopAssistant[2][0].gender;
								memcpy(&xFitting.xF[xShopAssistant[2][0].gender],&xShopAssistant[2][0].xF,sizeof(xShopAssistant[2][0].xF));
								memcpy(&xFitting.xFace,&xShopAssistant[2][0].xFace,sizeof(xShopAssistant[2][0].xFace));
								break;
							}
							setFittingTabChange();
						}
						
					}
					else if(touchCheck(&xTouchGenderRight) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_RIGHT] == TRUE)
						{
							
						}
						else
						{
							/////////////////스태프 캐릭변경하기//////////////////
							if(++xStaff.selectStaffSlot > xStaff.totalStaffSlot-1)
								xStaff.selectStaffSlot = 0;
							switch(xStaff.staffSlot[xStaff.selectStaffSlot])
							{
								case STAFF_SLOT_PAYMENTASSISTANT_1F:
									xFitting.gender = xPaymentAssistant[0].gender;
									memcpy(&xFitting.xF[xPaymentAssistant[0].gender],&xPaymentAssistant[0].xF,sizeof(xPaymentAssistant[0].xF));
									memcpy(&xFitting.xFace,&xPaymentAssistant[0].xFace,sizeof(xPaymentAssistant[0].xFace));
									break;
								case STAFF_SLOT_SHOPASSISTANT1_1F:
									xFitting.gender = xShopAssistant[0][0].gender;
									memcpy(&xFitting.xF[xShopAssistant[0][0].gender],&xShopAssistant[0][0].xF,sizeof(xShopAssistant[0][0].xF));
									memcpy(&xFitting.xFace,&xShopAssistant[0][0].xFace,sizeof(xShopAssistant[0][0].xFace));
									break;
								case STAFF_SLOT_PAYMENTASSISTANT_2F:
									xFitting.gender = xPaymentAssistant[1].gender;
									memcpy(&xFitting.xF[xPaymentAssistant[1].gender],&xPaymentAssistant[1].xF,sizeof(xPaymentAssistant[1].xF));
									memcpy(&xFitting.xFace,&xPaymentAssistant[1].xFace,sizeof(xPaymentAssistant[1].xFace));
									break;
								case STAFF_SLOT_SHOPASSISTANT1_2F:
									xFitting.gender = xShopAssistant[1][0].gender;
									memcpy(&xFitting.xF[xShopAssistant[1][0].gender],&xShopAssistant[1][0].xF,sizeof(xShopAssistant[1][0].xF));
									memcpy(&xFitting.xFace,&xShopAssistant[1][0].xFace,sizeof(xShopAssistant[1][0].xFace));
									break;
								case STAFF_SLOT_PAYMENTASSISTANT_3F:
									xFitting.gender = xPaymentAssistant[2].gender;
									memcpy(&xFitting.xF[xPaymentAssistant[2].gender],&xPaymentAssistant[2].xF,sizeof(xPaymentAssistant[2].xF));
									memcpy(&xFitting.xFace,&xPaymentAssistant[2].xFace,sizeof(xPaymentAssistant[2].xFace));
									break;
								case STAFF_SLOT_SHOPASSISTANT1_3F:
									xFitting.gender = xShopAssistant[2][0].gender;
									memcpy(&xFitting.xF[xShopAssistant[2][0].gender],&xShopAssistant[2][0].xF,sizeof(xShopAssistant[2][0].xF));
									memcpy(&xFitting.xFace,&xShopAssistant[2][0].xFace,sizeof(xShopAssistant[2][0].xFace));
									break;
							}
							setFittingTabChange();
						}
						
					}
					else if(touchCheck(&xTouchFittingReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_RESET] == TRUE)
						{
							
						}
						else
						{
							switch(xStaff.staffSlot[xStaff.selectStaffSlot])
							{
								case STAFF_SLOT_PAYMENTASSISTANT_1F:
									xFitting.gender = xPaymentAssistant[0].gender;
									memcpy(&xFitting.xF[xPaymentAssistant[0].gender],&xPaymentAssistant[0].xF,sizeof(xPaymentAssistant[0].xF));
									memcpy(&xFitting.xFace,&xPaymentAssistant[0].xFace,sizeof(xPaymentAssistant[0].xFace));
									break;
								case STAFF_SLOT_SHOPASSISTANT1_1F:
									xFitting.gender = xShopAssistant[0][0].gender;
									memcpy(&xFitting.xF[xShopAssistant[0][0].gender],&xShopAssistant[0][0].xF,sizeof(xShopAssistant[0][0].xF));
									memcpy(&xFitting.xFace,&xShopAssistant[0][0].xFace,sizeof(xShopAssistant[0][0].xFace));
									break;
								case STAFF_SLOT_PAYMENTASSISTANT_2F:
									xFitting.gender = xPaymentAssistant[1].gender;
									memcpy(&xFitting.xF[xPaymentAssistant[1].gender],&xPaymentAssistant[1].xF,sizeof(xPaymentAssistant[1].xF));
									memcpy(&xFitting.xFace,&xPaymentAssistant[1].xFace,sizeof(xPaymentAssistant[1].xFace));
									break;
								case STAFF_SLOT_SHOPASSISTANT1_2F:
									xFitting.gender = xShopAssistant[1][0].gender;
									memcpy(&xFitting.xF[xShopAssistant[1][0].gender],&xShopAssistant[1][0].xF,sizeof(xShopAssistant[1][0].xF));
									memcpy(&xFitting.xFace,&xShopAssistant[1][0].xFace,sizeof(xShopAssistant[1][0].xFace));
									break;
								case STAFF_SLOT_PAYMENTASSISTANT_3F:
									xFitting.gender = xPaymentAssistant[2].gender;
									memcpy(&xFitting.xF[xPaymentAssistant[2].gender],&xPaymentAssistant[2].xF,sizeof(xPaymentAssistant[2].xF));
									memcpy(&xFitting.xFace,&xPaymentAssistant[2].xFace,sizeof(xPaymentAssistant[2].xFace));
									break;
								case STAFF_SLOT_SHOPASSISTANT1_3F:
									xFitting.gender = xShopAssistant[2][0].gender;
									memcpy(&xFitting.xF[xShopAssistant[2][0].gender],&xShopAssistant[2][0].xF,sizeof(xShopAssistant[2][0].xF));
									memcpy(&xFitting.xFace,&xShopAssistant[2][0].xFace,sizeof(xShopAssistant[2][0].xFace));
									break;
							}
							setFittingTabChange();
						}
						
					}
					else if(touchCheck(&xTouchFittingSave) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						
						int codeHairNow;
						int codeHairNew;
						int codeFaceNow;
						int codeFaceNew;
						int layer[16];
						//////////////////////실제 피팅 내용 스태프에 적용하기////////////////////////////
						switch(xStaff.staffSlot[xStaff.selectStaffSlot])
						{
						case STAFF_SLOT_PAYMENTASSISTANT_1F:
							codeHairNow = xPaymentAssistant[0].xFace.hairNum;
							codeHairNew = xFitting.xFace.hairNum;
							codeFaceNow = xPaymentAssistant[0].xFace.faceNum;
							codeFaceNew = xFitting.xFace.faceNum;
							for(int l=0;l<16;l++)
								layer[l] = xPaymentAssistant[0].xF.code[l];
							break;
						case STAFF_SLOT_SHOPASSISTANT1_1F:
							codeHairNow = xShopAssistant[0][0].xFace.hairNum;
							codeHairNew = xFitting.xFace.hairNum;
							codeFaceNow = xShopAssistant[0][0].xFace.faceNum;
							codeFaceNew = xFitting.xFace.faceNum;
							for(int l=0;l<16;l++)
								layer[l] = xShopAssistant[0][0].xF.code[l];
							break;
						case STAFF_SLOT_PAYMENTASSISTANT_2F:
							codeHairNow = xPaymentAssistant[1].xFace.hairNum;
							codeHairNew = xFitting.xFace.hairNum;
							codeFaceNow = xPaymentAssistant[1].xFace.faceNum;
							codeFaceNew = xFitting.xFace.faceNum;
							for(int l=0;l<16;l++)
								layer[l] = xPaymentAssistant[1].xF.code[l];
							break;
						case STAFF_SLOT_SHOPASSISTANT1_2F:
							codeHairNow = xShopAssistant[1][0].xFace.hairNum;
							codeHairNew = xFitting.xFace.hairNum;
							codeFaceNow = xShopAssistant[1][0].xFace.faceNum;
							codeFaceNew = xFitting.xFace.faceNum;
							for(int l=0;l<16;l++)
								layer[l] = xShopAssistant[1][0].xF.code[l];
							break;
						case STAFF_SLOT_PAYMENTASSISTANT_3F:
							codeHairNow = xPaymentAssistant[2].xFace.hairNum;
							codeHairNew = xFitting.xFace.hairNum;
							codeFaceNow = xPaymentAssistant[2].xFace.faceNum;
							codeFaceNew = xFitting.xFace.faceNum;
							for(int l=0;l<16;l++)
								layer[l] = xPaymentAssistant[2].xF.code[l];
							break;
						case STAFF_SLOT_SHOPASSISTANT1_3F:
							codeHairNow = xShopAssistant[2][0].xFace.hairNum;
							codeHairNew = xFitting.xFace.hairNum;
							codeFaceNow = xShopAssistant[2][0].xFace.faceNum;
							codeFaceNew = xFitting.xFace.faceNum;
							for(int l=0;l<16;l++)
								layer[l] = xShopAssistant[2][0].xF.code[l];
							break;
						}
						//////////////////////////////////////////////////////////////////////////////////
										
						
						M_Boolean isCheckBuy = FALSE;
						//장착한것들 파악해서 갯수가 -인게 잇다면 그놈은 구입해야 할놈들이다
						
						
						
						if(codeHairNow != codeHairNew && getStaffHairNum(xFitting.xFace.hairNum) <= 0)
							isCheckBuy = TRUE;
						if(codeFaceNow != codeFaceNew && getStaffFaceNum(xFitting.xFace.faceNum) == 0)
							isCheckBuy = TRUE;
						for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
						{
							if(layer[ff] != xFitting.xF[xFitting.gender].code[ff])
							{
								if(xFitting.xF[xFitting.gender].code[ff] != DONT)
								{
									if(getStaffFashionNum(xFitting.xF[xFitting.gender].code[ff]) <= 0)
									{
										isCheckBuy = TRUE;
										break;
									}
								}
							}
						}
						
						//적용하기
						if(isCheckBuy == FALSE)
						{
							xWorldMap.isKeyReturn = TRUE;
							
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_SAVE] == TRUE)
							{
								
							}
							else
							{
								xWorldMap.state = WORLDMAP_STATE_PLAY;
								setStaffFitting();
							}
							break;
						}
						//일괄구매하기
						else
						{
							//장착한것들 파악해서 갯수가 -인게 잇다면 그놈은 구입해야 할놈들이다
							
							xStaff.state = STAFF_STATE_BUYPOPUP;
							
							xStaff.totalPopupItemSlot = 0;
							if(codeHairNow != codeHairNew && getStaffHairNum(xFitting.xFace.hairNum) <= 0)
							{
								xStaff.popupItemSlotTab[xStaff.totalPopupItemSlot] = 0;
								xStaff.popupItemSlotCode[xStaff.totalPopupItemSlot++] = xFitting.xFace.hairNum;
							}
							if(codeFaceNow != codeFaceNew && getStaffFaceNum(xFitting.xFace.faceNum) <= 0)
							{
								xStaff.popupItemSlotTab[xStaff.totalPopupItemSlot] = 1;
								xStaff.popupItemSlotCode[xStaff.totalPopupItemSlot++] = xFitting.xFace.faceNum;
							}
								
							for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
							{
								if(layer[ff] != xFitting.xF[xFitting.gender].code[ff])
								{
									if(xFitting.xF[xFitting.gender].code[ff] != DONT)
									{
										if(getStaffFashionNum(xFitting.xF[xFitting.gender].code[ff]) <= 0)
										{
											xStaff.popupItemSlotTab[xStaff.totalPopupItemSlot] = 2;
											xStaff.popupItemSlotCode[xStaff.totalPopupItemSlot++] = xFitting.xF[xFitting.gender].code[ff];
										}
									}
								}
							}
							
							xStaff.sellCash = 0;
							xStaff.sellGold = 0;
							xStaff.sellCashCnt = 0;
							xStaff.sellGoldCnt = 0;
							for(int ss=0;ss<xStaff.totalPopupItemSlot;ss++)
							{
								switch(xStaff.popupItemSlotTab[ss])
								{
								case 0:		//헤어
									switch(xHairData[xStaff.popupItemSlotCode[ss]].priceType)
									{
									case 0:		//골드
										xStaff.sellGold += xHairData[xStaff.popupItemSlotCode[ss]].price.oriData;
										xStaff.sellGoldCnt++;
										break;
									case 1:		//캐쉬
										xStaff.sellCash += xHairData[xStaff.popupItemSlotCode[ss]].price.oriData;
										xStaff.sellCashCnt++;
										break;
									}
									break;
								case 1:		//얼굴
									switch(xFaceData[xStaff.popupItemSlotCode[ss]].priceType)
									{
									case 0:		//골드
										xStaff.sellGold += xFaceData[xStaff.popupItemSlotCode[ss]].price.oriData;
										xStaff.sellGoldCnt++;
										break;
									case 1:		//캐쉬
										xStaff.sellCash += xFaceData[xStaff.popupItemSlotCode[ss]].price.oriData;
										xStaff.sellCashCnt++;
										break;
									}
									break;
								default:	//패션
									setMapData(xStaff.popupItemSlotCode[ss]);									
									switch(xFashionData[xMap.type][xMap.listNum].priceType)
									{
									case 0:		//골드
										xStaff.sellGold += xFashionData[xMap.type][xMap.listNum].price.oriData;
										xStaff.sellGoldCnt++;
										break;
									case 1:		//캐쉬
										xStaff.sellCash += xFashionData[xMap.type][xMap.listNum].price.oriData;
										xStaff.sellCashCnt++;
										break;
									}
									break;
								}								
							}
						}
					}
					else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollFittingS.selectNum > 0)
					{
						xDragScrollFittingS.speed = 320;
					}
					else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
					{
						xDragScrollFittingS.speed = -320;
					}
					else
					{
						if(xDragScrollFittingS.pos == 0 && xDragScrollFittingS.speed == 0)
						{
							isSelectCatalogS = FALSE;
							selectCatalogSNum = 0;
							for(int i=0;i<8;i++)
							{
								if(touchCheck(&xTouchFittingS[i]) == TRUE)
								{
									isSelectCatalogS = TRUE;
									selectCatalogSNum = i;									
									break;
								}
							}
							if(selectCatalogSNum+(xDragScrollFittingS.selectNum*8) >= xFitting.totalNumS)
								isSelectCatalogS = FALSE;
							
							if(isSelectCatalogS == TRUE)
							{
								int slotCode;
								playSnd(SND_FITTING);
								xFitting.selectSlot = selectCatalogSNum+xDragScrollFittingS.selectNum*8;
								switch(xFitting.selectTabB)
								{
								case 0:	//헤어
									slotCode = xFitting.xSlot[xFitting.selectTabB][xFitting.selectSlot].code;
									
									if(xFitting.xFace.hairNum != slotCode)
									{
										xFitting.xFace.hairNum = slotCode;
									}
									break;
								case 1:	//표정
									slotCode = xFitting.xSlot[xFitting.selectTabB][xFitting.selectSlot].code;
									if(xFitting.xFace.faceNum != slotCode)
									{
										//보유중상태
										xFitting.xFace.faceNum = slotCode;
									}
									break;
								default:
									slotCode = xFitting.xSlot[xFitting.selectTabB][xFitting.selectSlot].code;
									setMapData(slotCode);
																			
									if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != slotCode)
									{
										//보유중상태
										//prc입히기면서 기존거 벗기기
										xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = slotCode;
									}
										
										
									switch(xMap.type)
									{
									case F_TYPE_TOP:
									case F_TYPE_BOTTOM:
										for(int f=0;f<SPRIT_IMGLAYERMAX;f++)
										{
											switch(xFitting.xF[xFitting.gender].code[f]/1000)
											{
											case F_TYPE_ONEPIECE:
												xFitting.xF[xFitting.gender].code[f] = DONT;
												break;
											}
											
										}
										break;
									case F_TYPE_ONEPIECE:
										for(int f=0;f<SPRIT_IMGLAYERMAX;f++)
										{
											switch(xFitting.xF[xFitting.gender].code[f]/1000)
											{
											case F_TYPE_TOP:
											case F_TYPE_BOTTOM:
												xFitting.xF[xFitting.gender].code[f] = DONT;
												break;
											}
											
										}
										break;
									}
										
									
									M_Boolean isCheck[3];
									isCheck[0] = FALSE;	//상의
									isCheck[1] = FALSE;	//하의
									isCheck[2] = FALSE;	//원피스
									for(int f=0;f<SPRIT_IMGLAYERMAX;f++)
									{
										switch(xFitting.xF[xFitting.gender].code[f]/1000)
										{
										case F_TYPE_TOP:
											isCheck[0] = TRUE;	//상의
											break;
										case F_TYPE_BOTTOM:
											isCheck[1] = TRUE;	//하의
											break;
										case F_TYPE_ONEPIECE:
											isCheck[2] = TRUE;	//원피스
											break;
										}
										
									}
										
									int initCode;
									if(isCheck[2] == FALSE)	//원피스
									{
										if(isCheck[0] == FALSE)//상의
										{
											switch(xFitting.gender)
											{
											case 0:
												initCode = STAFF0_FASHIONCODE0;
												break;
											case 1:
												initCode = STAFF1_FASHIONCODE0;
												break;
											}
											setMapData(initCode);
											xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = initCode;
										}
										if(isCheck[1] == FALSE)//하의
										{
											switch(xFitting.gender)
											{
											case 0:
												initCode = STAFF0_FASHIONCODE1;
												break;
											case 1:
												initCode = STAFF1_FASHIONCODE1;
												break;
											}
											setMapData(initCode);
											xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = initCode;
										}
									}
									break;
								}
								
								xStaff.sellCash = 0;
								xStaff.sellGold = 0;
								for(int ss=0;ss<xStaff.totalPopupItemSlot;ss++)
								{
									switch(xStaff.popupItemSlotTab[ss])
									{
									case 0:		//헤어
										switch(xHairData[xStaff.popupItemSlotCode[ss]].priceType)
										{
										case 0:		//골드
											xStaff.sellGold += xHairData[xStaff.popupItemSlotCode[ss]].price.oriData;
											break;
										case 1:		//캐쉬
											xStaff.sellCash += xHairData[xStaff.popupItemSlotCode[ss]].price.oriData;
											break;
										}
										break;
									case 1:		//얼굴
										switch(xFaceData[xStaff.popupItemSlotCode[ss]].priceType)
										{
										case 0:		//골드
											xStaff.sellGold += xFaceData[xStaff.popupItemSlotCode[ss]].price.oriData;
											break;
										case 1:		//캐쉬
											xStaff.sellCash += xFaceData[xStaff.popupItemSlotCode[ss]].price.oriData;
											break;
										}
										break;
									default:	//패션
										setMapData(xStaff.popupItemSlotCode[ss]);
										
										switch(xFashionData[xMap.type][xMap.listNum].priceType)
										{
										case 0:		//골드
											xStaff.sellGold += xFashionData[xMap.type][xMap.listNum].price.oriData;
											break;
										case 1:		//캐쉬
											xStaff.sellCash += xFashionData[xMap.type][xMap.listNum].price.oriData;
											break;
										}
										break;
									}								
								}								
							}
						}
					}
				}
				break;
			case STAFF_STATE_BUYPOPUP:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xStaff.state = STAFF_STATE_PLAY;
						xWorldMap.isKeyReturn = TRUE;
												
						if(xStaff.sellCash > xSaveTemp.cash.oriData)
						{
							setPopup(POPUP_CASHEMPTY, playState, playState,0, DONT);
						}
						else if(xStaff.sellGold > xSaveTemp.money.oriData)
						{
							setPopup(POPUP_MONEYEMPTY, playState, playState,0, DONT);
						}
						else
						{
							//돈내고 구매품 갯수 올려주기 이미 착용상태이기때문에 따로 처리는 할필요 없다
							if(xStaff.sellGold > 0)
							{
								setMoney(-xStaff.sellGold);
								setBonus(xTouch.xPos,xTouch.yPos,ICON_TYPE_GOLD,-xStaff.sellGold);
							}
							if(xStaff.sellCash > 0)
							{
								xSaveTemp.buyCashStaffNum += xStaff.sellCashCnt;
								
								setCash(-xStaff.sellCash);
								setBonus(xTouch.xPos,xTouch.yPos-20,ICON_TYPE_LOOK,-xStaff.sellCash);
							}							
							for(int ss=0;ss<xStaff.totalPopupItemSlot;ss++)
							{
								switch(xStaff.staffSlot[xStaff.selectStaffSlot])
								{
								case STAFF_SLOT_PAYMENTASSISTANT_1F:
								case STAFF_SLOT_PAYMENTASSISTANT_2F:
								case STAFF_SLOT_PAYMENTASSISTANT_3F:
									if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
									{
										switch(xQuestTuto.nowNum)
										{
											case TUTO_13_STAFF_BUY:
												xQuestTuto.isTutoClean = TRUE;
												break;
										}
									}

									break;
								case STAFF_SLOT_SHOPASSISTANT1_1F:
								case STAFF_SLOT_SHOPASSISTANT1_2F:
								case STAFF_SLOT_SHOPASSISTANT1_3F:
									if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
									{
										switch(xQuestTuto.nowNum)
										{
											case TUTO_14_STAFF_BUY:
												xQuestTuto.isTutoClean = TRUE;
												break;
										}
									}
									break;
								}
								
								
								switch(xStaff.popupItemSlotTab[ss])
								{
								case 0:		//헤어
									switch(xStaff.staffSlot[xStaff.selectStaffSlot])
									{
									case STAFF_SLOT_PAYMENTASSISTANT_1F:
									case STAFF_SLOT_PAYMENTASSISTANT_2F:
									case STAFF_SLOT_PAYMENTASSISTANT_3F:
										setQuest(58, 1, DONT);	//	카운터 직원 헤어or메이크업 구매하기
										break;
									case STAFF_SLOT_SHOPASSISTANT1_1F:
									case STAFF_SLOT_SHOPASSISTANT1_2F:
									case STAFF_SLOT_SHOPASSISTANT1_3F:
										setQuest(60, 1, DONT);	//	응대 직원 헤어or메이크업 구매하기
										break;
									}
										
									xHairData[xStaff.popupItemSlotCode[ss]].haveNum++;
									///////////////////////////////////////////////////////////////////
									xEventQueueNet.code[xEventQueueNet.totalNum] = xStaff.popupItemSlotCode[ss];
									xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xStaff.popupItemSlotCode[ss]].haveNum;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
									///////////////////////////////////////////////////////////////////
																				
									sprintf(xRocks.strTemp,"%s",xHairData[xStaff.popupItemSlotCode[ss]].strName);
									setFiveRocksCustom("아이템","직원의상","헤어",xRocks.strTemp,1);break;
									break;
								case 1:		//얼굴
									switch(xStaff.staffSlot[xStaff.selectStaffSlot])
									{
									case STAFF_SLOT_PAYMENTASSISTANT_1F:
									case STAFF_SLOT_PAYMENTASSISTANT_2F:
									case STAFF_SLOT_PAYMENTASSISTANT_3F:
										setQuest(58, 1, DONT);	//	카운터 직원 헤어or메이크업 구매하기
										break;
									case STAFF_SLOT_SHOPASSISTANT1_1F:
									case STAFF_SLOT_SHOPASSISTANT1_2F:
									case STAFF_SLOT_SHOPASSISTANT1_3F:
										setQuest(60, 1, DONT);	//	응대 직원 헤어or메이크업 구매하기
										break;
									}
									xFaceData[xStaff.popupItemSlotCode[ss]].haveNum++;
									///////////////////////////////////////////////////////////////////
									xEventQueueNet.code[xEventQueueNet.totalNum] = xStaff.popupItemSlotCode[ss] + 1000;
									xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xStaff.popupItemSlotCode[ss]].haveNum;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
									///////////////////////////////////////////////////////////////////
										
									sprintf(xRocks.strTemp,"%s",xFaceData[xStaff.popupItemSlotCode[ss]].strName);
									setFiveRocksCustom("아이템","직원의상","메이크업",xRocks.strTemp,1);break;
									break;
								default:
									switch(xStaff.staffSlot[xStaff.selectStaffSlot])
									{
									case STAFF_SLOT_PAYMENTASSISTANT_1F:
									case STAFF_SLOT_PAYMENTASSISTANT_2F:
									case STAFF_SLOT_PAYMENTASSISTANT_3F:
										setQuest(59, 1, DONT);	//	카운터 직원 의상 구매하기
										break;
									case STAFF_SLOT_SHOPASSISTANT1_1F:
									case STAFF_SLOT_SHOPASSISTANT1_2F:
									case STAFF_SLOT_SHOPASSISTANT1_3F:
										setQuest(61, 1, DONT);	//	응대 직원 의상 구매하기
										break;
									}
										
									setMapData(xStaff.popupItemSlotCode[ss]);
									xInventoryFashion.haveNum[xMap.type][xMap.listNum]++;
									///////////////////////////////////////////////////////////////////
									xEventQueueNet.code[xEventQueueNet.totalNum] = xStaff.popupItemSlotCode[ss];
									xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
									///////////////////////////////////////////////////////////////////
									switch(xMap.type)
									{
									case F_TYPE_TOP:setFiveRocksCustom("아이템","직원의상","상의",xFashionData[xMap.type][xMap.listNum].strName,1);break;
									case F_TYPE_BOTTOM:setFiveRocksCustom("아이템","직원의상","하의",xFashionData[xMap.type][xMap.listNum].strName,1);break;
									case F_TYPE_ONEPIECE:setFiveRocksCustom("아이템","직원의상","원피스",xFashionData[xMap.type][xMap.listNum].strName,1);break;
									case F_TYPE_SHOES:setFiveRocksCustom("아이템","직원의상","신발",xFashionData[xMap.type][xMap.listNum].strName,1);break;
									}
									break;
								}
								///////////////////////////////////////////////////////////////////
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 3;//0:골드,1프리미엄,2캔디머신,3직원의상,4모델뽑기
								switch(xStaff.popupItemSlotTab[ss])
								{
								case 0:
								case 1:
									xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xStaff.popupItemSlotTab[ss];//아이템종류(0~5)직원의상 구매시
									break;
								default:
									switch(xMap.type)
									{
										case F_TYPE_TOP:xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 2;break;
										case F_TYPE_BOTTOM:xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 3;break;
										case F_TYPE_ONEPIECE:xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 4;break;
										case F_TYPE_SHOES:xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 5;break;
									}
									
									break;
								}
								xEventQueueNet.code[xEventQueueNet.totalNum] = xStaff.popupItemSlotCode[ss];
								
								
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BUYGOLD, TRUE);
								///////////////////////////////////////////////////////////////////
							}
							setStaffFitting();
						}
						
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xStaff.state = STAFF_STATE_PLAY;
						xWorldMap.isKeyReturn = TRUE;
					}
					else
					{
						dragScrollKeyPrc(&xStaff.xDragScrollPopupItemSlot,0);
					}
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xStaff.xDragScrollPopupItemSlot.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xStaff.xDragScrollPopupItemSlot,1);
					}
					xStaff.xDragScrollPopupItemSlot.touchXpos = DONT;
					xStaff.xDragScrollPopupItemSlot.touchYpos = DONT;
					xStaff.xDragScrollPopupItemSlot.touchXposBefore = DONT;
					xStaff.xDragScrollPopupItemSlot.touchYposBefore = DONT;
				}
				break;
			}
			break;
		case WORLDMAP_STATE_PRODUCTIONMENU:
//			switch(xProductionMenu.state2)
            switch(xProduction_FP.state)
			{
			case PRODUCTIONMENU_STATE_FASTCASHPOPUP:
//				if(touchCheck(&xProductionMenu.xTouchFast) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
//				{
//					playSnd(SND_MENU_OK);
//					xWorldMap.isKeyReturn = TRUE;
//					
//					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE1] == TRUE)
//					{
//						
//					}
//					else
//					{
//                        int remainTime = xFashionData[xMap.type][xMap.listNum].makeTime.oriData - xProductionMenu.slotFlowTime[xProductionMenu.selectType][xProductionMenu.selectSlot];
//						if(xSaveTemp.cash.oriData < getFastTimeCash(remainTime))
//							setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
//						else
//						{
//                            
//                            setPopup(POPUP_PRODUCTIONFAST2, PLAY_PLAY, PLAY_PLAY, 0, DONT);
//						}
//					}
//				}
                
//				else if(touchCheck(&xProductionMenu.xTouchDelBtn) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
//				{
//					playSnd(SND_MENU_OK);
//					xWorldMap.isKeyReturn = TRUE;
//					
//					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE2] == TRUE)
//					{
//						
//					}
//					else
//					{
//						xProductionMenu.state2 = PRODUCTIONMENU_STATE_MAIN;
//						
//						xProductionMenu.slotCode[xProductionMenu.selectType][xProductionMenu.selectSlot] = DONT;
//						xProductionMenu.state[xProductionMenu.selectType][xProductionMenu.selectSlot] = PRODUCTIONMENUSLOT_STATE_WAIT;
//						xProductionMenu.pushState[xProductionMenu.selectType][xProductionMenu.selectSlot] = 1;	//0:주문1:취소
//						if(xSave.isPushOnOff[PUSHONOFF_PRODUCTION] == FALSE)
//							xProductionMenu.pushState[xProductionMenu.selectType][xProductionMenu.selectSlot] = 1;	//0:주문1:취소
//						xProductionMenu.pushTime[xProductionMenu.selectType][xProductionMenu.selectSlot] = 0;
//						xProductionMenu.isUpData[xProductionMenu.selectType][xProductionMenu.selectSlot] = TRUE;
//						playState = xPopup.yes;
//                        ////////////////////////////////////////////////////////////////////////////
//                        xEventQueueNet.SLOT[xEventQueueNet.totalNum] = (xProductionMenu.selectType*6)+xProductionMenu.selectSlot;
//                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONCANCLE, TRUE);
//                        ////////////////////////////////////////////////////////////////////////////
//					}
//				}
                if(type==MH_KEY_PRESSEVENT)
                {
                    if(touchCheck(&xTouchClr) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
                    {
                        
                        //					xProductionMenu.state2 = PRODUCTIONMENU_STATE_MAIN;
                        xProduction_FP.isTouchPopupClr =true;
                        /////////////////////////////////////////
                        //					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCTSLOTUPDATE, TRUE);
                        /////////////////////////////////////////
                    }
                    else if(touchCheck(&xProduction_FP.xTouchNo)==TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
//                        playSnd(SND_MENU_OK);
//                        xWorldMap.isKeyReturn = TRUE;
//                        xProduction_FP.state = PRODUCTIONMENU_STATE_MAIN;
                        xProduction_FP.isTouchNo=true;
                    }
                    else if(touchCheck(&xProduction_FP.xTouchYes)==TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
//                        playSnd(SND_MENU_OK);
//                        xWorldMap.isKeyReturn = TRUE;
//                        xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
//                        xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xProduction_FP.selectSlot;
//                        xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = -1;
//                        xEventQueueNet.time[xEventQueueNet.totalNum] = 0;
//                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTUPDATE, TRUE);
//                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTINFOUPDATE, TRUE);
//                        xProduction_FP.state = PRODUCTIONMENU_STATE_MAIN;
                        xProduction_FP.isTouchYes=true;
                    }
                }
                else if(type==MH_KEY_RELEASEEVENT)
                {
                    if(touchCheck(&xTouchClr) == TRUE  && touchType == USER_POINT_RELEASE_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        //					xProductionMenu.state2 = PRODUCTIONMENU_STATE_MAIN;
                        xProduction_FP.isTouchPopupClr=false;
                        xProduction_FP.isTouchYes=false;
                        xProduction_FP.isTouchNo=false;
                        xProduction_FP.state = PRODUCTIONMENU_STATE_MAIN;
                        /////////////////////////////////////////
                        //					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCTSLOTUPDATE, TRUE);
                        /////////////////////////////////////////
                    }
                    else if(touchCheck(&xProduction_FP.xTouchNo)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xProduction_FP.isTouchYes=false;
                        xProduction_FP.isTouchNo=false;
                        xProduction_FP.state = PRODUCTIONMENU_STATE_MAIN;
                    }
                    else if(touchCheck(&xProduction_FP.xTouchYes)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        xProduction_FP.isTouchYes=false;
                        xProduction_FP.isTouchNo=false;
                        xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
                        xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xProduction_FP.selectSlot;
                        xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = -1;
                        xEventQueueNet.time[xEventQueueNet.totalNum] = 0;
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTUPDATE, TRUE);
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTINFOUPDATE, TRUE);
                        xProduction_FP.state = PRODUCTIONMENU_STATE_MAIN;
                    }
                    
                    else
                    {
                        xProduction_FP.isTouchYes=false;
                        xProduction_FP.isTouchNo=false;
                        xProduction_FP.isTouchPopupClr=false;
                    }

                }
				break;
			case PRODUCTIONMENU_STATE_MAIN:
                if(touchType == USER_POINT_PRESS_EVENT)
				{
                    for(int k=0;k<xCatalog_FP.totalSlot[0];k++)
                    {
                        if(touchCheck(&xProduction_FP.xTouchList[k])==TRUE && touchType == USER_POINT_PRESS_EVENT)
                        {
                            xProduction_FP.isTouchProduct = true;
                            xProduction_FP.selectProduct = k;
                            break;
                        }
                    }
//					xWorldMap.isKeyReturn = TRUE;
					isSelectCatalogS = FALSE;
					selectCatalogSNum = 0;
					for(int i=0;i<7+1;i++)
					{
						if(touchCheck(&xTouchCatalogTabS[i]) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
						{
							isSelectCatalogS = TRUE;
							selectCatalogSNum = i;
							break;
						}
					}
					
					
					if(isSelectCatalogS == TRUE)
					{
						if(selectCatalogSNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY0] == TRUE)
							isSelectCatalogS = FALSE;
						else if(selectCatalogSNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY1] == TRUE)
							isSelectCatalogS = FALSE;
						else if(selectCatalogSNum == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY2] == TRUE)
							isSelectCatalogS = FALSE;
						else if(selectCatalogSNum == 3 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY3] == TRUE)
							isSelectCatalogS = FALSE;
						else if(selectCatalogSNum == 4 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY4] == TRUE)
							isSelectCatalogS = FALSE;
						else if(selectCatalogSNum == 5 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY5] == TRUE)
							isSelectCatalogS = FALSE;
						else if(selectCatalogSNum == 6 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY6] == TRUE)
							isSelectCatalogS = FALSE;
						else if(selectCatalogSNum == 7 && xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY7] == TRUE)
							isSelectCatalogS = FALSE;
					}
															
					isKeyEvent = FALSE;
					keyEventNum = 0;
					for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
					{
						if(touchCheck(&xProductionMenu.xTouchSlot[i]) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
                    
                    
                    
                    
					
					//인포검색
					if(touchCheck(&xProductionMenu.xTouchSlotInfo) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;

						if(xProductionMenu.isSlotInfo == TRUE)
							xProductionMenu.isSlotInfo = FALSE;
						else
							xProductionMenu.isSlotInfo = TRUE;
					}
                    else if(touchCheck(&xProductionMenu.xTouchSexSortState[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        xProductionMenu.sexSortState = 0;
                        setCatalogTabChange(xCatalog.selectTabS);
                    }
                    else if(touchCheck(&xProductionMenu.xTouchSexSortState[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        xProductionMenu.sexSortState = 1;
                        setCatalogTabChange(xCatalog.selectTabS);
                        
                    }
                    else if(touchCheck(&xProductionMenu.xTouchSexSortState[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        xProductionMenu.sexSortState = 2;
                        setCatalogTabChange(xCatalog.selectTabS);
                        
                    }
					else if(touchCheck(&xProductionMenu.xTouchSortTime) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xProductionMenu.isSortTime == TRUE)
							xProductionMenu.isSortTime = FALSE;
						else
							xProductionMenu.isSortTime = TRUE;
						
						setCatalogTabChange(xCatalog.selectTabS);
					}
					else if(touchCheck(&xProductionMenu.xTouchSortLv) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xProductionMenu.isSortLv == TRUE)
							xProductionMenu.isSortLv = FALSE;
						else
							xProductionMenu.isSortLv = TRUE;
						
						setCatalogTabChange(xCatalog.selectTabS);
					}
					else if(isSelectCatalogS == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						xCatalog.selectTabS = selectCatalogSNum;
						setCatalogTabChange(xCatalog.selectTabS);
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CLOSE] == TRUE)
						{
							
						}
						else
						{
							//LJW 오토 판매
//							if(xProductionMenu.makeCnt > 0)
//							{
//								setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
//								sprintf(xPopup.strText, "제작 할 의상이\n슬롯에 포함 되어있습니다.\n의상을 회수하거나\n제작하기 버튼을 터치해주세요.");
//								xProductionMenu.isMakeBtnInfo = TRUE;
//							}
//							else
							{
								xLvUp.interiorInfoCode = DONT;
								xLvUp.productionInfoCode = DONT;
								xQuestInfo.isProductionInfo = FALSE;
								
								freeFashion();
                                
                                
//                                freeImg(&imgProductionLatest);
//                                freeImg(&imgProductionMenuExitIcon);
                                //////////////////////////////
                                //제작기 Ver.KBY
                                xProduction_FP.isTouchClr=true;
                                
								/////////////////////////////////////////
//								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCTSLOTUPDATE, TRUE);
								/////////////////////////////////////////
								
								//LJW 오토 판매 주석처리함.
//								makeProductionMain();
//								initFashionDrop(DONT);
//								xProductionMenu.selectSlot = DONT;
								//여기까지
							}
						}
					}
					/////////////생산메뉴부분
					else if(touchCheck(&xProductionMenu.xTouchType) == TRUE)
					{
						playSnd(SND_MENU_OK);
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_PREMIUM] == TRUE)
						{
							
						}
						else
						{
							xProductionMenu.selectType = xProductionMenu.selectType == 0?1:0;
							initFashionDrop(DONT);
							xProductionMenu.selectSlot = DONT;
						}
					}
					else if(xProductionMenu.makeCnt > 0 && touchCheck(&xTouchOk) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xSaveTemp.money.oriData < xProductionMenu.makeMoney)
						{
							setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
						}
						else
						{
							makeProductionMain();
							initFashionDrop(DONT);
						}
						
						xProductionMenu.selectSlot = DONT;
					}
					else if(isKeyEvent == TRUE)
					{
						
						if(xProductionMenu.selectSlot != keyEventNum)
							xProductionMenu.selectSlot = DONT;
						
						setMapData(xProductionMenu.slotCode[xProductionMenu.selectType][keyEventNum]);
						if(xSaveTemp.lv.oriData < xProductionMenu.lv[xProductionMenu.selectType][keyEventNum])
						{
							//레벨 제한 아무처리도 안함
							
						}
						else if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM && (keyEventNum>0 && xProductionMenu.isOpen[xProductionMenu.selectType][keyEventNum-1] == FALSE))
						{
							//프리미엄슬롯구매불가
						}
						else if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM && xProductionMenu.isOpen[xProductionMenu.selectType][keyEventNum] == FALSE)
						{
							
							if(xSaveTemp.cash.oriData < xProductionMenu.openCash[xProductionMenu.selectType][keyEventNum].oriData)
							{
								setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
							}
							else
							{
								//프리미엄슬롯미구매
								setPopup(POPUP_PRODUCTION_OPENYESNO, playState, playState, 0, keyEventNum);
							}
						}
						else if(xProductionMenu.slotCode[xProductionMenu.selectType][keyEventNum] == DONT)
						{
							//empty
						}
						else if(xProductionMenu.state[xProductionMenu.selectType][keyEventNum] == PRODUCTIONMENUSLOT_STATE_WAIT && xProductionMenu.slotCode[xProductionMenu.selectType][keyEventNum] != DONT)
						{
							//물품돌리기전
							
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CANCEL] == TRUE)
							{
								
							}
							else
							{
								xProductionMenu.slotCode[xProductionMenu.selectType][keyEventNum] = DONT;
								initFashionDrop(keyEventNum);
							}
						}
						else if(xProductionMenu.state[xProductionMenu.selectType][keyEventNum] == PRODUCTIONMENUSLOT_STATE_PLAY
								&& xProductionMenu.slotCode[xProductionMenu.selectType][keyEventNum] != DONT
								&& xProductionMenu.slotFlowTime[xProductionMenu.selectType][keyEventNum] >= xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
						{
							//완료상태
							///////////////////////////////////////////////////////////////////////////////////////////////////////////////
							//LJW 의상제작 수정
							xProductionMenu.state[xProductionMenu.selectType][keyEventNum] = PRODUCTIONMENUSLOT_STATE_WAIT;
//							xProductionMenu.state[xProductionMenu.selectType][keyEventNum] = PRODUCTIONMENUSLOT_STATE_RECV;
							///////////////////////////////////////////////////////////////////////////////////////////////////////////////
							xProductionMenu.recvAnyCnt[xProductionMenu.selectType][keyEventNum] = 0;
							
						}
						else if(xProductionMenu.state[xProductionMenu.selectType][keyEventNum] == PRODUCTIONMENUSLOT_STATE_PLAY && xProductionMenu.slotCode[xProductionMenu.selectType][keyEventNum] != DONT)
						{
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE0] == TRUE)
							{
								
							}
							else
							{
								//LJW 오토판매 판매취소 수정
								//물품돌아가는중
//								xProductionMenu.selectSlot = keyEventNum;
//								xProductionMenu.state2 = PRODUCTIONMENU_STATE_FASTCASHPOPUP;
								
								playSnd(SND_MENU_OK);
								xWorldMap.isKeyReturn = TRUE;
								
								xProductionMenu.state2 = PRODUCTIONMENU_STATE_MAIN;
								
								xProductionMenu.slotCode[xProductionMenu.selectType][keyEventNum] = DONT;
								xProductionMenu.state[xProductionMenu.selectType][keyEventNum] = PRODUCTIONMENUSLOT_STATE_WAIT;
								xProductionMenu.pushState[xProductionMenu.selectType][keyEventNum] = 1;	//0:주문1:취소
								if(xSave.isPushOnOff[PUSHONOFF_PRODUCTION] == FALSE)
									xProductionMenu.pushState[xProductionMenu.selectType][keyEventNum] = 1;	//0:주문1:취소
								xProductionMenu.pushTime[xProductionMenu.selectType][keyEventNum] = 0;
								xProductionMenu.isUpData[xProductionMenu.selectType][keyEventNum] = TRUE;
								playState = xPopup.yes;
								////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.SLOT[xEventQueueNet.totalNum] = (xProductionMenu.selectType*6)+keyEventNum;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONCANCLE, TRUE);
								////////////////////////////////////////////////////////////////////////////
								//여기까지
								
							}
							
						}
					}
					/////////////생산메뉴끝
					
					else
					{
						if(xDragScrollCatalogS.pos == 0 && xDragScrollCatalogS.speed == 0)
						{
							int selectTemp;
							isSelectCatalogS = FALSE;
							selectCatalogSNum = 0;
							for(int i=0;i<8;i++)
							{
								if(touchCheck(&xTouchCatalogS[i]) == TRUE)
								{
									isSelectCatalogS = TRUE;
									selectCatalogSNum = i;
									
									break;
								}
							}
							
                            
                            bool isLatest = false;
                            int latestSlot = 0;
                            
                            for(int k=0;k<PRODUCTIONMENULATESTMAX;k++)
                            {
                                if(touchCheck(&xProductionMenuLatest.xTouchSlot[k]) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
                                {
                                    isLatest = TRUE;
                                    latestSlot = k;
                                    break;
                                }
                            }
                            
                            
							
							
							if(selectCatalogSNum+(xDragScrollCatalogS.selectNum*8) >= xCatalog.totalSlotS)
								isSelectCatalogS = FALSE;
							
							if(isSelectCatalogS == TRUE)
							{
								playSnd(SND_MENU_OK);
                                
                                subTemp[1] = xCatalog.selectSlot;
                                xCatalog.selectSlot = (selectCatalogSNum+xDragScrollCatalogS.selectNum*8);
                                setMapData(xCatalog.xSlotS[xCatalog.selectSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
                                
								
																
								//구매여부확인
								if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
								{
									//구매여부확인
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_LICENCE] == TRUE)
									{
										
									}
									else
									{
										if(xSaveTemp.lv.oriData < xFashionData[xMap.type][xMap.listNum].lv)
										{
											//레벨제한
										}
										else if(xSaveTemp.fame.oriData < xFashionData[xMap.type][xMap.listNum].fame.oriData)
										{
											//명성도제한
											setPopup(POPUP_FAMEEMPTY, playState, playState, 0, DONT);
											
										}
										else if(xSaveTemp.money.oriData < xFashionData[xMap.type][xMap.listNum].price.oriData && xFashionData[xMap.type][xMap.listNum].priceType==0)
										{
											//골드부족
											setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
										}
										else if(xSaveTemp.cash.oriData < xFashionData[xMap.type][xMap.listNum].price.oriData && xFashionData[xMap.type][xMap.listNum].priceType==1)
										{
											//룩부족
											setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
										}
										else if(xFashionData[xMap.type][xMap.listNum].priceType == 2)
										{
											if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_FASHIONSHOW] == TRUE)
											{
												
											}
											else
											{
												setPopup(POPUP_PRODUCTIONLINKFASHIONSHOWYESNO, playState, playState, 0, xFashionData[xMap.type][xMap.listNum].price.oriData);
											}
										}
										else
										{
											setPopup(POPUP_FASHIONBUYYESNO, playState, playState, 0, DONT);
										}
									}
								}
								else
								{
									//넣기
									xCatalog.xSlotS[xCatalog.selectSlot].isInfoOpen = FALSE;
									selectTemp = inputProductionMenu(xMap.type*1000+xMap.listNum);
									
									if(selectTemp == DONT)
									{
										if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM)
											xProductionMenu.selectType = PRODUCTIONMENU_TYPE_NORMAL;
										else
											xProductionMenu.selectType = PRODUCTIONMENU_TYPE_PREMIUM;
										
										selectTemp = inputProductionMenu(xMap.type*1000+xMap.listNum);
										if(selectTemp == DONT)
										{
											if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM)
												xProductionMenu.selectType = PRODUCTIONMENU_TYPE_NORMAL;
											else
												xProductionMenu.selectType = PRODUCTIONMENU_TYPE_PREMIUM;
											
											setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
											sprintf(xPopup.strText, "제작 슬롯이 가득 찼습니다.");
										}
									}
									else
									{
										setFashionDrop(selectTemp,xFashionDrop.x_productionList[selectCatalogSNum], xFashionDrop.y_productionList[selectCatalogSNum], xFashionDrop.scale_productionList[selectCatalogSNum],
													   xFashionDrop.x_productionMenu[selectTemp], xFashionDrop.y_productionMenu[selectTemp], xFashionDrop.scale_productionMenu[selectTemp],xMap.type*1000+xMap.listNum);
									}
									
								}
							}
                            else if(isLatest == TRUE)
                            {
                                if(xProductionMenuLatest.code[latestSlot] != DONT)
                                {
                                    setMapData(xProductionMenuLatest.code[latestSlot]);	//
                                    if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == TRUE)
                                    {
                                        //넣기
                                        selectTemp = inputProductionMenu(xMap.type*1000+xMap.listNum);
                                        if(selectTemp == DONT)
                                        {
                                            if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM)
                                                xProductionMenu.selectType = PRODUCTIONMENU_TYPE_NORMAL;
                                            else
                                                xProductionMenu.selectType = PRODUCTIONMENU_TYPE_PREMIUM;
                                            
                                            selectTemp = inputProductionMenu(xMap.type*1000+xMap.listNum);
                                            if(selectTemp == DONT)
                                            {
                                                if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM)
                                                    xProductionMenu.selectType = PRODUCTIONMENU_TYPE_NORMAL;
                                                else
                                                    xProductionMenu.selectType = PRODUCTIONMENU_TYPE_PREMIUM;
                                                
                                                setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
                                                sprintf(xPopup.strText, "제작 슬롯이 가득 찼습니다.");
                                            }
                                        }
                                        else
                                        {
                                            setFashionDrop(selectTemp,0, 0, 60,
                                                           xFashionDrop.x_productionMenu[selectTemp], xFashionDrop.y_productionMenu[selectTemp], xFashionDrop.scale_productionMenu[selectTemp],xMap.type*1000+xMap.listNum);
                                        }
                                    }
                                }
                            }
							else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollCatalogS.selectNum > 0)
							{
								
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
								{
									
								}
								else
									xDragScrollCatalogS.speed = 320;
							}
							else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollCatalogS.selectNum < xDragScrollCatalogS.totalNum-1)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
								{
									
								}
								else
									xDragScrollCatalogS.speed = -320;
							}
                            /////////////////////
                            //제작기 Ver.KBY
                            else if(touchCheck(&xProduction_FP.xTouchLeftBtn) == TRUE && xProduction_FP.xDragScrollProductionS.selectNum > 0)
                            {
                                
                                if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                                {
                                    
                                }
                                else
                                {
                                    xProduction_FP.isTouchLeftBtn=true;
                                    xProduction_FP.isTouchRightBtn=false;
                                }
                            }
                            else if(touchCheck(&xProduction_FP.xTouchRightBtn) == TRUE && xProduction_FP.xDragScrollProductionS.selectNum < xProduction_FP.xDragScrollProductionS.totalNum-1)
                            {
                                if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                                {
                                    
                                }
                                else
                                {
                                    xProduction_FP.isTouchLeftBtn=false;
                                    xProduction_FP.isTouchRightBtn=true;
                                }
                            }
                            else if(touchCheck(&xProduction_FP.xTouchLeftArrow) == TRUE && xProduction_FP.xDragScrollProductionB.selectNum > 0)
                            {
                                
                                if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                                {
                                    
                                }
                                else
                                {
                                    xProduction_FP.isTouchLeftArrow=true;
                                    xProduction_FP.isTouchRightArrow=false;
                                }
                            }
                            else if(touchCheck(&xProduction_FP.xTouchRightArrow) == TRUE && xProduction_FP.xDragScrollProductionB.selectNum < xProduction_FP.xDragScrollProductionB.totalNum-1)
                            {
                                if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                                {
                                    
                                }
                                else
                                {
                                    xProduction_FP.isTouchLeftArrow=false;
                                    xProduction_FP.isTouchRightArrow=true;
                                }
                            }
                            else if(touchCheck(&xProduction_FP.xTouchOpen)==TRUE && touchType == USER_POINT_PRESS_EVENT)
                            {
                                xProduction_FP.isTouchOpen=true;
                            }
                            
                            for(int k =0; k<xProduction_FP.xData[xProduction_FP.index].totalSlot;k++)
                            {
                                if(touchCheck(&xProduction_FP.xTouchSlot[k])==TRUE&&xProduction_FP.xData[xProduction_FP.index].xSlot[k].state ==2 &&touchType == USER_POINT_PRESS_EVENT)
                                {
                                
                                    xProduction_FP.selectSlot = k;
                                    xProduction_FP.isTouchYes=false;
                                    xProduction_FP.isTouchNo=false;
                                    xProduction_FP.isTouchPopupClr=false;
                                    xWorldMap.isKeyReturn = TRUE;
                                    xProduction_FP.state = PRODUCTIONMENU_STATE_FASTCASHPOPUP;
                                    break;
                                }
                                
                                else if(touchCheck(&xProduction_FP.xTouchSlot[k])==TRUE&&xProduction_FP.xData[xProduction_FP.index].xSlot[k].state ==3 &&touchType == USER_POINT_PRESS_EVENT)
                                {
                                    xProduction_FP.selectSlot = k;
                                    xEventQueueNet.action[xEventQueueNet.totalNum] = 2;
                                    xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xProduction_FP.selectSlot;
                                    xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = -1;
                                    xEventQueueNet.time[xEventQueueNet.totalNum] = 0;
                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTUPDATE, TRUE);
                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTINFOUPDATE, TRUE);
                                    break;
                                }

                                else if(touchCheck(&xProduction_FP.xTouchFast[k])==TRUE&&xProduction_FP.xData[xProduction_FP.index].xSlot[k].state ==2 &&touchType == USER_POINT_PRESS_EVENT)
                                {
                                    xProduction_FP.selectSlot = k;
                                    setPopup(POPUP_PRODUCTIONFASTOK, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                                   
                                    break;
                                }
                                
                            }
                            ///////////////
						}
					}
				}
                /////////////////
                //제작기 Ver.KBY
                else if(touchType==USER_POINT_RELEASE_EVENT)
                {
                    bool isRelease = false;
                    for(int k=0;k<12;k++)
                    {
                        if(touchCheck(&xProduction_FP.xTouchSlot[k])==TRUE&&xProduction_FP.isTouchProduct==true&& touchType == USER_POINT_RELEASE_EVENT)
                        {
                            if(xProduction_FP.xData[xProduction_FP.index].xSlot[k].state==1)
                            {
                                isRelease = true;
                                xProduction_FP.selectSlot = k;
                                break;
                            }
                        }
                    }
                    
                    if(isRelease==true)
                    {
                        xProduction_FP.xData[xProduction_FP.index].xSlot[xProduction_FP.selectSlot].itemCode = xCatalog_FP.xSlot[0][xProduction_FP.selectProduct].code;
                        xProduction_FP.xData[xProduction_FP.index].xSlot[xProduction_FP.selectSlot].endTime =xFashionData_FP[0][xProduction_FP.selectProduct].makeTime+xCalendar.nowTime;
                        xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
                        xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xProduction_FP.selectSlot;
                        xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = xProduction_FP.xData[xProduction_FP.index].xSlot[xProduction_FP.selectSlot].itemCode;
                        
                        xEventQueueNet.time[xEventQueueNet.totalNum] = xProduction_FP.xData[xProduction_FP.index].xSlot[xProduction_FP.selectSlot].endTime;
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTUPDATE, TRUE);
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTINFOUPDATE, TRUE);
                        xProduction_FP.selectProduct=DONT;
                        xProduction_FP.isTouchProduct=false;

                        
                    }
                    else
                    {
                        xProduction_FP.isTouchProduct=false;
                        xProduction_FP.selectProduct=DONT;
                    }
                    
                    if(touchCheck(&xProduction_FP.xTouchLeftBtn) == TRUE && xProduction_FP.xDragScrollProductionS.selectNum > 0)
                    {
                        
                        if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                        {
                            
                        }
                        else
                        {
                            xProduction_FP.xDragScrollProductionS.speed = 640;
                            xProduction_FP.isTouchLeftBtn=false;
                            xProduction_FP.isTouchRightBtn=false;
                        }
                    }
                    else if(touchCheck(&xProduction_FP.xTouchRightBtn) == TRUE && xProduction_FP.xDragScrollProductionS.selectNum < xProduction_FP.xDragScrollProductionS.totalNum-1)
                    {
                        if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                        {
                            
                        }
                        else
                        {
                            xProduction_FP.xDragScrollProductionS.speed = -640;
                            xProduction_FP.isTouchLeftBtn=false;
                            xProduction_FP.isTouchRightBtn=false;
                        }
                    }
                    else if(touchCheck(&xProduction_FP.xTouchLeftArrow) == TRUE && xProduction_FP.xDragScrollProductionB.selectNum > 0)
                    {
                        
                        if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                        {
                            
                        }
                        else
                        {
                            xProduction_FP.xDragScrollProductionB.speed = 640;
                            xProduction_FP.isTouchLeftArrow=false;
                            xProduction_FP.isTouchRightArrow=false;
                        }
                    }
                    else if(touchCheck(&xProduction_FP.xTouchRightArrow) == TRUE && xProduction_FP.xDragScrollProductionB.selectNum < xProduction_FP.xDragScrollProductionB.totalNum-1)
                    {
                        if(xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE] == TRUE)
                        {
                            
                        }
                        else
                        {
                            xProduction_FP.xDragScrollProductionB.speed = -640;
                            xProduction_FP.isTouchLeftArrow=false;
                            xProduction_FP.isTouchRightArrow=false;
                            
                        }
                    }
                    
                    else if(touchCheck(&xProduction_FP.xTouchOpen)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
                    {
                        xProduction_FP.isTouchOpen=false;
                        setPopup(POPUP_PRODUCTIONSLOTOPEN, playState, playState, 0, DONT);
                    }
                    
                    else if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
                    {
                        ////////////////////////////////////////////////////////////////////
                        //제작기 이미지 해제 KBY 2018.2.26
                        productionFreeLoad_FP(false);
                        ////////////////////////////////////////////////////////////////////
                        
//                        freeImg(&imgProductionBg);
//                        freeImg(&imgProductionMenuExitIcon);
//                        freeImg(&imgProductionTitle);
//                        freeImg(&imgProduction[0]);
//                        freeImg(&imgProduction[1]);
//                        freeImg(&imgProduction[2]);
//                        freeImg(&imgProduction[3]);
//                        freeImg(&imgProduction[4]);
//                        freeImg(&imgProduction[5]);
//                        freeImg(&imgProduction[7]);
//                        freeImg(&imgProduction[8]);
//                        freeImg(&imgProduction[9]);
//                        freeImg(&imgProduction[10]);
//                        freeImg(&imgProduction[11]);
//                        freeImg(&imgProduction[12]);
//                        freeImg(&imgProduction[13]);
//                        freeImg(&imgProduction[14]);
//                        freeImg(&imgProduction[15]);
//                        freeImg(&imgProduction[16]);
//                        freeImg(&imgProduction[17]);
//                        freeImg(&imgProduction[18]);
//                        freeImg(&imgProduction[19]);
//                        freeImg(&imgProduction[20]);
//                        freeImg(&imgProduction[21]);
//                        freeImg(&imgProduction[22]);
//                        freeImg(&imgProduction[23]);
                        xProduction_FP.isTouchClr=false;
                        xWorldMap.state = WORLDMAP_STATE_PLAY;
                        
                        //////////////
                        //0:보통 1:new보여주기 2:확인한상태 3:완료
                        M_Boolean isCheck = FALSE;
                        for(int i=0;i<7;i++)
                        {
                            for(int k=0;k<200;k++)
                            {
                                if(xSave.fashionNew[i][k] == 2)
                                {
                                    xSave.fashionNew[i][k] = 3;
                                    isCheck = TRUE;
                                }
                            }
                        }
                        if(isCheck ==  TRUE)
                            gameSave(SAVE_SLOT_GAME);
                        
                        if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
                        {
                            switch(xQuestTuto.nowNum)
                            {
                                case TUTO_1_PRODUCTIONEXIT:
                                case TUTO_2_PRODUCTIONEXIT:
                                    xQuestTuto.isTutoClean = TRUE;
                                    break;
                            }
                        }

                    }
                }
                //////////////////
                break;
            }
            break;
		case WORLDMAP_STATE_INTERIOR:
			if(touchType == USER_POINT_PRESS_EVENT)
			{
				//월드맵UI검색
				xInterior.buildModeTime64 = xCalendar.nowTime;
				xInterior.buildModeTimeXpos = xTouch.xPos;
				xInterior.buildModeTimeYpos = xTouch.yPos;
				
			}
			else if(touchType == USER_POINT_MOVE_EVENT)
			{
				if(xInterior.buildModeTimeXpos - xTouch.xPos > 10 || xInterior.buildModeTimeXpos - xTouch.xPos < -10 || xInterior.buildModeTimeYpos - xTouch.yPos > 10 || xInterior.buildModeTimeYpos - xTouch.yPos < -10 )
				{
					xInterior.buildModeTime64 = DONT;
				}
			}
				
			//if(type == MH_KEY_PRESSEVENT)
			{
				if(touchCheck(&xTouchBuildIconExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT] == TRUE)
					{
						xWorldMap.isKeyReturn = TRUE;
						return;
					}
					playSnd(SND_MENU_OK);
					
					xWorldMap.state = WORLDMAP_STATE_PLAY;
                    //인테리어 편집 UI 이미지 해제 추가 KBY 2018.2.26
                    interiorbuildFreeLoad_FP(false);
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
					switch(xInterior.buildInType)
					{
					case INTERIORBUILD_TYPE_GAME:
						if(xInterior.xBuildSlot.codeTeam[0] != 0)
						{
							setMapData(xInterior.xBuildSlot.codeTeam[0]);
							switch(xMap.type)
							{
								case INTERIOR_TYPE_FLOORTILE:
									xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
									//최종이동전이기에 넷처리하지말자
									break;
								case INTERIOR_TYPE_WALLTILE:
									if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
									{
										if(xInterior.xBuildSlot.codeTeam[0] > 0)
											xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
									}
									else
									{
										if(xInterior.xBuildSlot.codeTeam[0] < 0)
											xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
									}
									
									xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
									//최종이동전이기에 넷처리하지말자
									break;
								case INTERIOR_TYPE_WALLITEM:
								case INTERIOR_TYPE_SHOWWINDOW:
								case INTERIOR_TYPE_DOOR:
									if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
									{
										if(xInterior.xBuildSlot.codeTeam[0] > 0)
											xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
									}
									else
									{
										if(xInterior.xBuildSlot.codeTeam[0] < 0)
											xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
									}
									xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
									//최종이동전이기에 넷처리하지말자
									break;
								case INTERIOR_TYPE_OBJFLOOR:
									xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
									//최종이동전이기에 넷처리하지말자
									break;
								default:
									xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
									//최종이동전이기에 넷처리하지말자
									break;
							}
							xInterior.xBuildSlot.codeTeam[0] = 0;
						}
						break;
					default:
						if(xInterior.xBuildSlot.codeTeam[0] != 0)
						{
							setMapData(xInterior.xBuildSlot.codeTeam[0]);
							switch(xMap.type)
							{
							case INTERIOR_TYPE_PAYMENT:
								xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xPayMentInfo[xMap.nowFloor].x][xPayMentInfo[xMap.nowFloor].y] = xPayMentInfo[xMap.nowFloor].interiorModeCode;
								break;
							case INTERIOR_TYPE_DOOR:
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = xWorldMap.doorCode;
								break;
							}
						}
						break;
					}
					initMenuOut();
					//makeShopAssistant(); //LJW 샵직원 삭제 2018.02.12
					makeModelShopNpc();
					checkMapDataAstar(MAP_TYPE_OBJ,xMap.nowFloor);
				}
				else if(touchCheck(&xTouchBuildIconShop) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SHOP] == TRUE)
					{
						xWorldMap.isKeyReturn = TRUE;
						return;
					}
					playSnd(SND_MENU_OK);
                    //편집 모드에서 상점버튼 눌렀을 때 상점으로 이동 KBY 2018.2.27
//					setBuildCheck();
//					
//					interiorShopFreeLoad(TRUE);
//					xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
					xInterior.state = INTERIOR_STATE_PLAY;
					xWorldMap.isKeyReturn = TRUE;
					xInterior.buildModeTime64 = DONT;
					switch(xInterior.buildInType)
					{
					case INTERIORBUILD_TYPE_GAME:
						if(xInterior.xBuildSlot.codeTeam[0] != 0)
						{
							setMapData(xInterior.xBuildSlot.codeTeam[0]);
							switch(xMap.type)
							{
							case INTERIOR_TYPE_FLOORTILE:
								xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
								//최종이동전이기에 넷처리하지말자
								break;
							case INTERIOR_TYPE_WALLTILE:
								if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
								{
									if(xInterior.xBuildSlot.codeTeam[0] > 0)
										xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
								}
								else
								{
									if(xInterior.xBuildSlot.codeTeam[0] < 0)
										xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
								}
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
								//최종이동전이기에 넷처리하지말자
								break;
							case INTERIOR_TYPE_WALLITEM:
							case INTERIOR_TYPE_SHOWWINDOW:
							case INTERIOR_TYPE_DOOR:
								if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
								{
									if(xInterior.xBuildSlot.codeTeam[0] > 0)
										xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
								}
								else
								{
									if(xInterior.xBuildSlot.codeTeam[0] < 0)
										xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
								}
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
								//최종이동전이기에 넷처리하지말자
								break;
							case INTERIOR_TYPE_OBJFLOOR:
								xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
								//최종이동전이기에 넷처리하지말자
								break;
							default:
								xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
								//최종이동전이기에 넷처리하지말자
								break;
							}
							xInterior.xBuildSlot.codeTeam[0] = 0;
						}
						break;
					default:
						if(xInterior.xBuildSlot.codeTeam[0] != 0)
						{
							setMapData(xInterior.xBuildSlot.codeTeam[0]);
							switch(xMap.type)
							{
							case INTERIOR_TYPE_PAYMENT:
								xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xPayMentInfo[xMap.nowFloor].x][xPayMentInfo[xMap.nowFloor].y] = xPayMentInfo[xMap.nowFloor].interiorModeCode;
								break;
							case INTERIOR_TYPE_DOOR:
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = xWorldMap.doorCode;
								break;
							}
						}
						break;
					}
					//makeShopAssistant(); //LJW 샵직원 삭제 2018.02.12
					makeModelShopNpc();
					checkMapDataAstar(MAP_TYPE_OBJ,xMap.nowFloor);
//					setInteriorTabChange();
                    //추가 부분 KBY 2018.2.27
                    initShop_FP();
                    shopFreeload_FP(true);
                    setShop_FP(1, 0);
                    xWorldMap.state = WORLDMAP_STATE_SHOP_FP;
                    //끝
                    ////////////////////////////
                    
				}
				else if(xInterior.buildInType == INTERIORBUILD_TYPE_GAME && xInterior.xBuildSlot.codeTeam[0] == 0)	//편집모드이고 선택된것이 없을때
				{
						
					if(touchCheck(&xInterior.xBuildMode[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_TILEMODE] == TRUE)
						{
							
						}
						else
							xInterior.buildMode = 0;
					}
					else if(touchCheck(&xInterior.xBuildMode[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.isKeyReturn = TRUE;
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_INTERIORMODE] == TRUE)
						{
							
						}
						else
							xInterior.buildMode = 1;
					}
					else if(xInterior.buildMode == 0 && xInterior.buildModeTime64 != DONT && touchType == USER_POINT_RELEASE_EVENT)		//일반
					{
						xSelectTileOne.state = SELECTTILE_STATE_DONT;
						setSelectTileKeyEvent(MAP_TYPE_OBJ,xMap.nowFloor);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SELECT] == TRUE)
						{
							xSelectTileOne.state = SELECTTILE_STATE_DONT;
						}

						//오브젝트 찾음
						if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
						{
							
							xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
							
							xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
							xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
							
							int mapXpos,mapYpos;
							
							mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
							if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
							else
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
							
							setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
							
							xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
							xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
							
							xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = 0;
							//최종이동전이기에 넷처리하지말자
							checkBuildMapData();						
						}
						if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
						{
							//벽아이템 검색 검색
							setSelectTileKeyEvent(MAP_TYPE_WALL1,xMap.nowFloor);
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SELECT] == TRUE)
							{
								xSelectTileOne.state = SELECTTILE_STATE_DONT;
							}
							if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
							{
								xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
								
								xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
								xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
								
								int mapXpos,mapYpos;
								
								mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
								if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
								else
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
								
								setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
								
								
								xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
								xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
								
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = 0;
								//최종이동전이기에 넷처리하지말자
								
								checkBuildMapData();
							}
						}
						if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
						{
							setSelectTileKeyEvent(MAP_TYPE_FLOORTILE1,xMap.nowFloor);
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SELECT] == TRUE)
							{
								xSelectTileOne.state = SELECTTILE_STATE_DONT;
							}
							//오브젝트 찾음
							if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
							{
								xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
								
								xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
								xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
								
								int mapXpos,mapYpos;
								
								mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
								if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
								else
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
								
								setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
								
								xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
								xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
								
								xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = 0;
								//최종이동전이기에 넷처리하지말자
								checkBuildMapData();
							}
						}
					}
					else if(xInterior.buildMode == 1 && xInterior.buildModeTime64 != DONT && touchType == USER_POINT_RELEASE_EVENT)		//타일모드
					{
						xSelectTileOne.state = SELECTTILE_STATE_DONT;
						
						setSelectTileKeyEvent(MAP_TYPE_WALL0,xMap.nowFloor);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SELECT] == TRUE)
						{
							xSelectTileOne.state = SELECTTILE_STATE_DONT;
						}
						if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
						{
							xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
							
							xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
							xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
							
							int mapXpos,mapYpos;
							
							mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
							if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
							else
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
							
							setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
							
							xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
							xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
						}
						if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
						{
							setSelectTileKeyEvent(MAP_TYPE_FLOORTILE0,xMap.nowFloor);
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SELECT] == TRUE)
							{
								xSelectTileOne.state = SELECTTILE_STATE_DONT;
							}
							
							
							if(xSelectTileOne.tileNumX >= xMap.shopPointX+xMap.shopPointW)
								xSelectTileOne.state = SELECTTILE_STATE_DONT;
							if(xSelectTileOne.tileNumY >= xMap.shopPointY+xMap.shopPointH)
								xSelectTileOne.state = SELECTTILE_STATE_DONT;
														
							
							if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
							{
								xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
															
								xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
								xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
								
								int mapXpos,mapYpos;
								
								mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
								if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
								else
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
								
								setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
								
								xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
								xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
							}
						}
					}
				}
                //////////////////////////////////////////////////////////////////////////////////
                //인테리어 편집시 키처리 KBY 2018.2.23
                else if(xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    isTouchBuildIconOk = true;
                }
                //체크시 인테리어 처리
				else if(xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconOk) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
				{
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_OK] == TRUE)
					{
//						xWorldMap.isKeyReturn = TRUE;
						return;
					}
                    
//					xWorldMap.isKeyReturn = TRUE;
					isTouchBuildIconOk = false;
                    
					setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
                    int index = xMap.abxMapData%1000;
                    
					switch(xInterior.buildInType)
					{
					case INTERIORBUILD_TYPE_SHOP:
						isSubTemp[0] = FALSE;
						isSubTemp[0] = checkBuildPos(xMap.type,xMap.listNum,xMap.rever);
							
														
						if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
						{
							isSubTemp[0] = FALSE;
							
							int tempMap;
							if(xMap.type == INTERIOR_TYPE_FLOORTILE)
								tempMap = MAP_TYPE_FLOORTILE0;
							else
								tempMap = MAP_TYPE_WALL0;
							
							int tempType = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]/1000;
							int tempListNum = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]%1000;
							if(tempType < 0)
								tempType = -tempType;
							if(tempListNum < 0)
								tempListNum = -tempListNum;
							
							if(xMap.type == tempType && xMap.listNum == tempListNum)
								isSubTemp[0] = TRUE;
														
						}
																			
						if(isSubTemp[0] == FALSE)
						{
							setBuildCheck();
							setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
                            //0카운터
							//1피팅룸
							//2옷걸이
							//3진열대
							//4쇼윈도
                            if(xMap.type==INTERIOR_TYPE_PRODUCTION)
                            {
                                if(xFormer.count[index] < xFormer.buildlimitMax[index])
                                {
                                    xFormer.count[index]++;
                                    xFormer.index=index;
                                    //이벤트큐에 등록
                                    addEventQueue(xInterior.buildMapTileXpos,xInterior.buildMapTileYpos,EVENTQUEUE_TYPE_INTERIOR,xMap.nowFloor,DONT,DONT);
                                    
                                    
                                    if(xInterior.buildMapTileYpos+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]*2) <= xMap.shopPointY+xMap.shopPointH)
                                    {
                                        xInterior.buildMapTileYpos += xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                        xInterior.buildMapMoveXpos += (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                        xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                    }
                                    
                                }
                                else
                                {
                                    setPopup(POPUP_BUILDMAXERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
                                    xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                    xInterior.xBuildSlot.codeTeam[0] = 0;
                                }
                            }
                            else if(xMap.type==INTERIOR_TYPE_OBJ)
                            {
                                addEventQueue(xInterior.buildMapTileXpos, xInterior.buildMapTileYpos, EVENTQUEUE_TYPE_INTERIOR, xMap.nowFloor, DONT, DONT);
                                if(xInterior.buildMapTileYpos+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]*2) <= xMap.shopPointY+xMap.shopPointH)
                                {
                                    xInterior.buildMapTileYpos += xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                    xInterior.buildMapMoveXpos += (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                    xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                }
                                
//                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONREGIST, TRUE);
                            }
                            else
                            {
                                if(xInterior.buildlimitNum[xMap.nowFloor][xMap.type] < xInterior.buildlimitMax[xMap.nowFloor][xMap.type])
                                {
                                    //이벤트큐에 등록
                                    addEventQueue(xInterior.buildMapTileXpos,xInterior.buildMapTileYpos,EVENTQUEUE_TYPE_INTERIOR,xMap.nowFloor,DONT,DONT);
                                    
                                    switch(xMap.type)
                                    {
                                        case INTERIOR_TYPE_WALLTILE:
                                        case INTERIOR_TYPE_WALLITEM:
                                        case INTERIOR_TYPE_SHOWWINDOW:
                                            if(xInterior.buildMapTileYpos+1 == xMap.shopPointY)
                                            {
                                                if(xInterior.buildMapTileXpos+(xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]*2) <= xMap.shopPointX+xMap.shopPointW)
                                                {
                                                    xInterior.buildMapTileXpos += xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];
                                                    xInterior.buildMapMoveXpos -= (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];
                                                    xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];
                                                }
                                            }
                                            else
                                            {
                                                if(xInterior.buildMapTileYpos+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]*2) <= xMap.shopPointY+xMap.shopPointH)
                                                {
                                                    xInterior.buildMapTileYpos += xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                    xInterior.buildMapMoveXpos += (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                    xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                }
                                            }
                                            break;
                                        case INTERIOR_TYPE_PAYMENT:
                                        case INTERIOR_TYPE_DOOR:
                                            xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                            xInterior.xBuildSlot.codeTeam[0] = 0;
                                            break;
                                        default:
                                            if(xInterior.buildMapTileYpos+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]*2) <= xMap.shopPointY+xMap.shopPointH)
                                            {
                                                xInterior.buildMapTileYpos += xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                xInterior.buildMapMoveXpos += (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                            }
                                            break;
                                    }
                                    
                                }
                                else
                                {
                                    setPopup(POPUP_BUILDMAXERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
                                    xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                    xInterior.xBuildSlot.codeTeam[0] = 0;
                                }
                            }
                        }
						break;
					case INTERIORBUILD_TYPE_INVENTORY:
						isSubTemp[0] = FALSE;
						
						isSubTemp[0] = checkBuildPos(xMap.type,xMap.listNum,xMap.rever);
							
						if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
						{
							isSubTemp[0] = FALSE;
							int tempMap;
							if(xMap.type == INTERIOR_TYPE_FLOORTILE)
								tempMap = MAP_TYPE_FLOORTILE0;
							else
								tempMap = MAP_TYPE_WALL0;
							
							int tempType = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]/1000;
							int tempListNum = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]%1000;
							if(tempType < 0)
								tempType = -tempType;
							if(tempListNum < 0)
								tempListNum = -tempListNum;
							
							if(xMap.type == tempType && xMap.listNum == tempListNum)
								isSubTemp[0] = TRUE;
							
						}
																					
						if(isSubTemp[0] == FALSE)
						{
							int itemCnt = getInventoryInteriorCount(xInterior.xBuildSlot.codeTeam[0]);
							if(itemCnt > 0)
							{
								setBuildCheck();
                                
								setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
								//0카운터
								//1피팅룸
								//2옷걸이
								//3진열대
								//4쇼윈도
								if(xMap.type==INTERIOR_TYPE_PRODUCTION)
                                {
                                    //20171024 수정하기 1
                                    
                                    if(xFormer.count[index] < xFormer.buildlimitMax[index])
                                    {
                                        outputInventoryInterior(xInterior.xBuildSlot.codeTeam[0]);
                                        xEventQueueNet.code[xEventQueueNet.totalNum] = xInterior.xBuildSlot.codeTeam[0];
                                        xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
                                        xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
                                        for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
                                        {
                                            if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
                                                xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
                                        }
                                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
                                        //이벤트큐에 등록
                                        addEventQueue(xInterior.buildMapTileXpos,xInterior.buildMapTileYpos,EVENTQUEUE_TYPE_OUTPUTINVEN,xMap.nowFloor,DONT,DONT);
                                        
                                        xFormer.count[index]++;
                                        
                                        if(itemCnt == 1)
                                        {
                                            xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                            xInterior.xBuildSlot.codeTeam[0] = 0;
                                        }

                                        else
                                        {
                                            if(xInterior.buildMapTileYpos+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]*2) <= xMap.shopPointY+xMap.shopPointH)
                                            {
                                                xInterior.buildMapTileYpos += xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                xInterior.buildMapMoveXpos += (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                            }
                                        }
                                        
                                    }
                                    else if(xFormer.count[index]==xFormer.buildlimitMax[index])
                                    {
                                        xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                        xInterior.xBuildSlot.codeTeam[0] = 0;
                                    }
                                    else
                                    {
                                        setPopup(POPUP_BUILDMAXERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
                                        xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                        xInterior.xBuildSlot.codeTeam[0] = 0;
                                    }
                                }
                                else
                                {
                                    if(xInterior.buildlimitNum[xMap.nowFloor][xMap.type] < xInterior.buildlimitMax[xMap.nowFloor][xMap.type])
                                    {
                                        outputInventoryInterior(xInterior.xBuildSlot.codeTeam[0]);
                                        //////////////////////////////////////////////////////////////////////////////
                                        xEventQueueNet.code[xEventQueueNet.totalNum] = xInterior.xBuildSlot.codeTeam[0];
                                        xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
                                        xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
                                        for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
                                        {
                                            if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
                                                xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
                                        }
                                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
                                        //////////////////////////////////////////////////////////////////////////////
                                        //이벤트큐에 등록
                                        addEventQueue(xInterior.buildMapTileXpos,xInterior.buildMapTileYpos,EVENTQUEUE_TYPE_OUTPUTINVEN,xMap.nowFloor,DONT,DONT);
                                        
                                        
                                        if(itemCnt == 1)
                                        {
                                            xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                            xInterior.xBuildSlot.codeTeam[0] = 0;
                                        }
                                        
                                        else
                                        {
                                            switch(xMap.type)
                                            {
                                                case INTERIOR_TYPE_WALLTILE:
                                                case INTERIOR_TYPE_WALLITEM:
                                                case INTERIOR_TYPE_SHOWWINDOW:
                                                    if(xInterior.buildMapTileYpos+1 == xMap.shopPointY)
                                                    {
                                                        if(xInterior.buildMapTileXpos+(xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]*2) <= xMap.shopPointX+xMap.shopPointW)
                                                        {
                                                            xInterior.buildMapTileXpos += xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];
                                                            xInterior.buildMapMoveXpos -= (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];
                                                            xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if(xInterior.buildMapTileYpos+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]*2) <= xMap.shopPointY+xMap.shopPointH)
                                                        {
                                                            xInterior.buildMapTileYpos += xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                            xInterior.buildMapMoveXpos += (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                            xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                        }
                                                    }
                                                    break;
                                                case INTERIOR_TYPE_PAYMENT:
                                                case INTERIOR_TYPE_DOOR:
                                                    xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                                    xInterior.xBuildSlot.codeTeam[0] = 0;
                                                    break;
                                                default:
                                                    if(xInterior.buildMapTileYpos+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]*2) <= xMap.shopPointY+xMap.shopPointH)
                                                    {
                                                        xInterior.buildMapTileYpos += xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                        xInterior.buildMapMoveXpos += (getMapW()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                        xInterior.buildMapMoveYpos += (getMapH()/2)*xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        setPopup(POPUP_BUILDMAXERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
                                        xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                                        xInterior.xBuildSlot.codeTeam[0] = 0;
                                    }
                                }
                            }
                        }
						break;
					case INTERIORBUILD_TYPE_GAME:
						isSubTemp[0] = FALSE;
						isSubTemp[0] = checkBuildPos(xMap.type,xMap.listNum,xMap.rever);
						
							
						if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
						{
							isSubTemp[0] = FALSE;
							int tempMap;
							if(xMap.type == INTERIOR_TYPE_FLOORTILE)
								tempMap = MAP_TYPE_FLOORTILE0;
							else
								tempMap = MAP_TYPE_WALL0;
							
							int tempType = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]/1000;
							int tempListNum = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]%1000;
							if(tempType < 0)
								tempType = -tempType;
							if(tempListNum < 0)
								tempListNum = -tempListNum;
							
							if(xMap.type == tempType && xMap.listNum == tempListNum)
								isSubTemp[0] = TRUE;
							
						}
							
							
						if(isSubTemp[0] == FALSE)
						{
							switch(xMap.type)
							{
							case INTERIOR_TYPE_FLOORTILE:

								//시작위치에 빌드위치에것 넣어주기
								if(xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] == xMap.floorInitCode[xMap.nowFloor]
								   ||xMap.dataKey[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] == 0)
									subTemp[10] = 0;
								else
									subTemp[10] = 1;
									
									
								if(xMap.dataKey[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] != 0)
									subTemp[10] = 1;
									
									
								xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
								
								/////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
								xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
								xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
								xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
								xEventQueueNet.mapX[xEventQueueNet.totalNum] = xSelectTileOne.tileNumX;
								xEventQueueNet.mapY[xEventQueueNet.totalNum] = xSelectTileOne.tileNumY;
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
								////////////////////////////////////////////////////////////////////////////
																
								//빌드위치에 빌드것 넣어주기
								if(xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] == xMap.floorInitCode[xMap.nowFloor]
								   ||xMap.dataKey[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] == 0)
									subTemp[10] = 0;
								else
									subTemp[10] = 1;
									
									
								if(xMap.dataKey[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] != 0)
									subTemp[10] = 1;
								xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] = xInterior.xBuildSlot.codeTeam[0];
								/////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
								xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
								xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
								xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
								xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInterior.buildMapTileXpos;
								xEventQueueNet.mapY[xEventQueueNet.totalNum] = xInterior.buildMapTileYpos;
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
								////////////////////////////////////////////////////////////////////////////
								xInterior.xBuildSlot.codeTeam[0] = 0;
								break;
							case INTERIOR_TYPE_WALLTILE:
								//시작위치에 빌드위치에것 넣어주기
								if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] == xMap.wallInitCode[xMap.nowFloor]
								   ||xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] == -xMap.wallInitCode[xMap.nowFloor])
									subTemp[10] = 0;
								else
									subTemp[10] = 1;
									
								if(xMap.dataKey[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] != 0)
									subTemp[10] = 1;
																		
								subTemp[15] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
								if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
								{
									if(subTemp[15] > 0)
										subTemp[15] = -subTemp[15];
								}
								else
								{
									if(subTemp[15] < 0)
										subTemp[15] = -subTemp[15];
								}
									
									
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = subTemp[15];
								
								/////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
								xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
								xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
								xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
								xEventQueueNet.mapX[xEventQueueNet.totalNum] = xSelectTileOne.tileNumX;
								xEventQueueNet.mapY[xEventQueueNet.totalNum] = xSelectTileOne.tileNumY;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
								////////////////////////////////////////////////////////////////////////////
								//빌드위치에 빌드것 넣어주기
								if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] == xMap.wallInitCode[xMap.nowFloor]
								   ||xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] == -xMap.wallInitCode[xMap.nowFloor])
									subTemp[10] = 0;
								else
									subTemp[10] = 1;
									
									
								if(xMap.dataKey[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] != 0)
									subTemp[10] = 1;
									
								subTemp[15] = xInterior.xBuildSlot.codeTeam[0];
								if(xInterior.buildMapTileYpos+1 == xMap.shopPointY)
								{
									if(subTemp[15] > 0)
										subTemp[15] = -subTemp[15];
								}
								else
								{
									if(subTemp[15] < 0)
										subTemp[15] = -subTemp[15];
								}
								
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] = subTemp[15];
								
								/////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.floor[xEventQueueNet.totalNum] = xMap.nowFloor;
								xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
								xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
								xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
								xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInterior.buildMapTileXpos;
								xEventQueueNet.mapY[xEventQueueNet.totalNum] = xInterior.buildMapTileYpos;
								xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
								xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
								////////////////////////////////////////////////////////////////////////////
								xInterior.xBuildSlot.codeTeam[0] = 0;
								break;
							default:
								//현재 위치
								addEventQueue(xInterior.buildMapTileXpos,xInterior.buildMapTileYpos,EVENTQUEUE_TYPE_MOVE,xMap.nowFloor,xSelectTileOne.tileNumX,xSelectTileOne.tileNumY);
								xInterior.xBuildSlot.codeTeam[0] = 0;
								break;
							}
						}
						break;
					}
				}
                else if(xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    isTouchBuildIconClr=true;
                }
				else if(xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconClr) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
				{
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_CANCEL] == TRUE)
					{
//						xWorldMap.isKeyReturn = TRUE;
						return;
					}
					isTouchBuildIconClr=false;
					setMapData(xInterior.xBuildSlot.codeTeam[0]);
					
					
//					xWorldMap.isKeyReturn = TRUE;
					//설치모드에서 돌아갈때 위치파악용으로 월드맵UI를 통해 들어왔는지 인테리어메뉴를 통해 들어가는지 구분
					switch(xInterior.buildInType)
					{
					case INTERIORBUILD_TYPE_SHOP:
					case INTERIORBUILD_TYPE_INVENTORY:
						if(xInterior.xBuildSlot.codeTeam[0] != 0)
						{
							switch(xMap.type)
							{
							case INTERIOR_TYPE_PAYMENT:
								xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xPayMentInfo[xMap.nowFloor].x][xPayMentInfo[xMap.nowFloor].y] = xPayMentInfo[xMap.nowFloor].interiorModeCode;
								break;
							case INTERIOR_TYPE_DOOR:
								xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = xWorldMap.doorCode;
								break;
							}
						}
							
						xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
						xInterior.xBuildSlot.codeTeam[0] = 0;
						switch(xMap.type)
						{
						case INTERIOR_TYPE_FLOORTILE:
						case INTERIOR_TYPE_WALLTILE:
							xInterior.buildMode = 1;
							break;
						default:
							xInterior.buildMode = 0;
							break;
						}
							
						
						break;
					case INTERIORBUILD_TYPE_GAME:
						switch(xMap.type)
						{
						case INTERIOR_TYPE_DOOR:
							xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = xWorldMap.doorCode;
							xInterior.xBuildSlot.codeTeam[0] = 0;
							break;
						case INTERIOR_TYPE_WALLITEM:
						case INTERIOR_TYPE_SHOWWINDOW:
							if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
							{
								if(xInterior.xBuildSlot.codeTeam[0] > 0)
									xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
							}
							else
							{
								if(xInterior.xBuildSlot.codeTeam[0] < 0)
									xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
							}
							xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
							xInterior.xBuildSlot.codeTeam[0] = 0;
							break;
						case INTERIOR_TYPE_FLOORTILE:
							xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
							xInterior.xBuildSlot.codeTeam[0] = 0;
							break;
						case INTERIOR_TYPE_OBJFLOOR:
							xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
							xInterior.xBuildSlot.codeTeam[0] = 0;
							break;
						case INTERIOR_TYPE_WALLTILE:
								
							if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
							{
								if(xInterior.xBuildSlot.codeTeam[0] > 0)
									xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
							}
							else
							{
								if(xInterior.xBuildSlot.codeTeam[0] < 0)
									xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
							}
							xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
							xInterior.xBuildSlot.codeTeam[0] = 0;
							break;
						default:
							xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xInterior.xBuildSlot.codeTeam[0];
							xInterior.xBuildSlot.codeTeam[0] = 0;
							break;
						}
						break;
					}					
				}
                else if(xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconInven) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    isTouchBuildIconInven = true;
                }
				else if(xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconInven) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
				{
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SAVE] == TRUE)
					{
//						xWorldMap.isKeyReturn = TRUE;
						return;
					}
					isTouchBuildIconInven = false;
					setMapData(xInterior.xBuildSlot.codeTeam[0]);
					
					playSnd(SND_MENU_OK);
//					xWorldMap.isKeyReturn = TRUE;
					
					switch(xInterior.buildInType)
					{
					case INTERIORBUILD_TYPE_GAME:
						//판매중인 상품이 있을때는 넣기 불가능으로
						isSubTemp[0] = FALSE;
						xSell.selectSellTable = DONT;
						xFitting.selectShowWindowNum = DONT;
						xProduction.selectSlot = DONT;
						if(xMap.type == INTERIOR_TYPE_HANGER || xMap.type == INTERIOR_TYPE_ACCESSORY)
						{
							xSell.selectSellTable = getSellTable(xSelectTileOne.tileNumX, xSelectTileOne.tileNumY,xMap.nowFloor);
							if(xSell.selectSellTable != DONT)
							{
								int type = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode/1000;
								int listNum = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode%1000;
								if(type < 0)
									type = -type;
								if(listNum < 0)
									listNum = -listNum;
								
								for(int i=0;i<xObj.xObjData[type][listNum].slot;i++)
								{
									if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].code != DONT)
									{
										//판매중인 물품있음
										isSubTemp[0] = TRUE;
										break;
									}
								}
							}
						}
                        else if(xMap.type==INTERIOR_TYPE_PRODUCTION)
                        {
                            int index=getFormerIndex(xMap.dataKey[xMap.nowFloor][INTERIOR_TYPE_PRODUCTION][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);
                            if(xFormer.xData[index].state!=0)
                            {
                                isSubTemp[0]=TRUE;
                            }
                        }
						else if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
						{
							xFitting.selectShowWindowNum = getShowWindow(xSelectTileOne.tileNumX, xSelectTileOne.tileNumY, xMap.nowFloor);
						}
                        

						if(isSubTemp[0] == TRUE)
						{
                            if(xMap.type==INTERIOR_TYPE_PRODUCTION)
                            {
                                int index=getFormerIndex(xMap.dataKey[xMap.nowFloor][INTERIOR_TYPE_PRODUCTION][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);
                                if(xFormer.xData[index].state==1)
                                {
                                    setPopup(POPUP_INPUTINVENTORYFORMERERR1, playState, playState,0, DONT);
                                }
                                else if(xFormer.xData[index].state==2)
                                {
                                    setPopup(POPUP_INPUTINVENTORYFORMERERR2, playState, playState,0, DONT);
                                }
                            }
                            else
                            {
                                setPopup(POPUP_INPUTINVENTORYERR, playState, playState,0, DONT);
                            }
						}
						else if(xMap.type == INTERIOR_TYPE_DOOR)
						{
							//이경우 인벤에 넣기가 없다 교체만 가능
							
						}
						else if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
						{
							//아무처리 없이 위에서 취소처리함
						}
                        else
						{
							if(xSell.selectSellTable != DONT)
							{
								xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].isUse = FALSE;
							}
							if(xFitting.selectShowWindowNum != DONT)
							{
								xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].isUse = FALSE;
							}
							
							addEventQueue(xInterior.buildMapTileXpos, xInterior.buildMapTileYpos, EVENTQUEUE_TYPE_INPUTINVEN,xMap.nowFloor,xSelectTileOne.tileNumX,xSelectTileOne.tileNumY);
							xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
							xInterior.xBuildSlot.codeTeam[0] = 0;
							switch(xMap.type)
							{
								case INTERIOR_TYPE_FLOORTILE:
								case INTERIOR_TYPE_WALLTILE:
									xInterior.buildMode = 1;
									break;
								default:
									xInterior.buildMode = 0;
									break;
							}
						}

						break;
					}
				}
                else if(xInterior.xBuildSlot.codeTeam[0] != 0 && (xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE) && touchCheck(&xTouchBuildIconRot) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    isTouchBuildIconRot=true;
                    playSnd(SND_MENU_OK);
                }
				else if(xInterior.xBuildSlot.codeTeam[0] != 0 && (xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE) && touchCheck(&xTouchBuildIconRot) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
				{
					isTouchBuildIconRot=false;
//					xWorldMap.isKeyReturn = TRUE;
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_ALL] == TRUE)
					{
						
					}
					else
						setPopup(POPUP_TEST_ALLTILE, playState, playState, 0, DONT);
				}
                
                else if(xMap.type != INTERIOR_TYPE_WALLITEM && xMap.type != INTERIOR_TYPE_SHOWWINDOW && xMap.type != INTERIOR_TYPE_DOOR && xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconRot) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    isTouchBuildIconRot=true;
                    playSnd(SND_MENU_OK);

                }

				else if(xMap.type != INTERIOR_TYPE_WALLITEM && xMap.type != INTERIOR_TYPE_SHOWWINDOW && xMap.type != INTERIOR_TYPE_DOOR && xInterior.xBuildSlot.codeTeam[0] != 0 && touchCheck(&xTouchBuildIconRot) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
				{
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE] == TRUE)
					{
						
					}
					else
					{
						if(xObj.xObjData[xMap.type][xMap.listNum].isRotLock == FALSE)
                        {
                            isTouchBuildIconRot=false;
                            xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
                        }
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_6_INTERIOR_ROT:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
					}
				}
               				else if(touchType == USER_POINT_PRESS_EVENT)
				{
					if(xInterior.xBuildSlot.codeTeam[0] != 0 && (touchCheck(&xTouchBuildIconMove) == TRUE || touchCheck(&xTouchBuildIconMoveObj) == TRUE))
					{
						playSnd(SND_MENU_OK);
                        
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE] == TRUE)
						{
							xWorldMap.isKeyReturn = TRUE;
							return;
						}
						
						//이동모드로
						xInterior.buildType = INTERIORBUILD_MOVETYPE_OBJ;
						xInterior.buildMapMoveXposStart = xTouch.xPos;
						xInterior.buildMapMoveYposStart = xTouch.yPos;
																		
						int mapXpos,mapYpos;
						
						
						mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - ((xInterior.buildMapTileXpos-(xMap.nowFloor*5))+1)) * (TILEW / 2));
						if ((xInterior.buildMapTileYpos + (xInterior.buildMapTileXpos+1)) % 2 == 1)
							mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))+1) / 2) * TILEH) + (TILEH / 2);
						else
							mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))+1) / 2) * TILEH);
																		
						xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
						xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos,cy);
					}
					else
                    {
						xInterior.buildType = INTERIORBUILD_MOVETYPE_WORLDMAP;
                    }
				}
                //////////////////////////////////////////////////////////////////////////////////
                //인테리어 편집시 키처리 끝 KBY 2018.2.23
				
				if(xInterior.buildType == INTERIORBUILD_MOVETYPE_OBJ && touchType == USER_POINT_MOVE_EVENT)	//이동모드일때
				{
					
					xInterior.buildMapMoveXpos -= xInterior.buildMapMoveXposStart-xTouch.xPos;
					xInterior.buildMapMoveYpos -= xInterior.buildMapMoveYposStart-xTouch.yPos;
					xInterior.buildMapMoveXposStart = xTouch.xPos;
					xInterior.buildMapMoveYposStart = xTouch.yPos;
															
					
				}
                
                
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					if(xInterior.buildType == INTERIORBUILD_MOVETYPE_OBJ && touchType == USER_POINT_RELEASE_EVENT)
					{
						switch(xQuestTuto.nowNum)
						{
							case TUTO_6_INTERIOR_MOVE:
								xQuestTuto.isTutoClean = TRUE;
								break;
						}
					}
				}
			}
				
			//이동모드가 아닐때
			if(xInterior.buildType == INTERIORBUILD_MOVETYPE_WORLDMAP)
				setMapPosScale(type, param1, param2,touchId);
			else if(touchType == USER_POINT_RELEASE_EVENT)
				xInterior.buildType = INTERIORBUILD_MOVETYPE_WORLDMAP;

			break;
		case WORLDMAP_STATE_INTERIORSHOP:
			switch(xInterior.state)
			{
			case INTERIOR_STATE_TEAM:
				if(type == MH_KEY_PRESSEVENT)
				{
					if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xInterior.state = INTERIOR_STATE_PLAY;
						xWorldMap.isKeyReturn = TRUE;
					}
					else
					{
						dragScrollKeyPrc(&xInterior.xDragScrollTeam,0);
					}
				}
				else if(type == MH_KEY_RELEASEEVENT)
				{
					if(xInterior.xDragScrollTeam.touchXposBefore != DONT)
					{
						dragScrollKeyPrc(&xInterior.xDragScrollTeam,1);
					}
					else
					{
						isSelectInteriorS = FALSE;
						selectInteriorSNum = 0;
						if(xInterior.selectTabB != 5/*인벤이 아닐때*/)
						{
							for(int i=0;i<4;i++)
							{
								if(touchCheck(&xTouchInteriorS[i]) == TRUE)
								{
									isSelectInteriorS = TRUE;
									selectInteriorSNum = i;
								}								
							}
						}
						
						if(isSelectInteriorS == TRUE)
						{
							xInterior.selectSlotTeam = xInterior.xDragScrollTeam.selectNum+selectInteriorSNum;
							
							if(xInterior.selectSlotTeam < xInterior.xSlotS[xInterior.selectSlotS].totalTeam)
							{
								
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_ITEMSELECT] == TRUE
								   && xInterior.xSlotS[xInterior.selectSlotS].codeTeam[xInterior.selectSlotTeam] != xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]
								   && xInterior.xSlotS[xInterior.selectSlotS].codeTeam[xInterior.selectSlotTeam] != xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[1])
								{
								}
								else
								{
									M_Boolean isCheck = FALSE;
									setMapData(xInterior.xSlotS[xInterior.selectSlotS].codeTeam[xInterior.selectSlotTeam]);
									if(xInterior.selectTabB != 5/*인벤이 아닐때*/ && xMap.type == INTERIOR_TYPE_PAYMENT)
									{
										for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
										{
											if(xInventoryInterior.itemCode[ee] == xInterior.xSlotS[xInterior.selectSlotS].codeTeam[xInterior.selectSlotTeam])
											{
												isCheck = TRUE;
												break;
											}
										}
									}
									if(isCheck == TRUE)
									{
										setPopup(POPUP_BUILD_PAYMENTERR, PLAY_PLAY, PLAY_PLAY, 0, DONT);
									}
									else
										setInteriorBuildMode(xInterior.selectSlotS,xInterior.selectSlotTeam);
									
									
								}
																
							}
						}
					}
					xInterior.xDragScrollTeam.touchXpos = DONT;
					xInterior.xDragScrollTeam.touchYpos = DONT;
					xInterior.xDragScrollTeam.touchXposBefore = DONT;
					xInterior.xDragScrollTeam.touchYposBefore = DONT;
				}
				break;
			case INTERIOR_STATE_SELLPOPUP:
				if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_INTERIOR_SELL);
					setMapData(xInterior.xSellSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
					
					int money = 0;
					for(int i=0;i<xInterior.sellNum;i++)
					{
						outputInventoryInterior(xInterior.xSellSlot.codeTeam[0]);
						
						if(xObj.xObjData[xMap.type][xMap.listNum].priceType == 0)	//골드
						{
							money += (xObj.xObjData[xMap.type][xMap.listNum].price.oriData*INTERIORSELLPER/100);
						}
						else
						{
							money += (xObj.xObjData[xMap.type][xMap.listNum].price.oriData*INTERIORSELLCASH);
						}						
					}
					setMoney(money);
					setBonus(xTouch.xPos,xTouch.yPos,ICON_TYPE_GOLD,money);
					
					//////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = xInterior.xSellSlot.codeTeam[0];
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
					xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
					for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
					{
						if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
							xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
					}
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
					//////////////////////////////////////////////////////////////////////////////
					
					setInteriorTabChange();
					xInterior.state = INTERIOR_STATE_PLAY;
				}
				else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xInterior.state = INTERIOR_STATE_PLAY;
					xLvUp.interiorInfoCode = DONT;
					xLvUp.productionInfoCode = DONT;
				}
				else if(touchCheck(&xTouchArrowLeft) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(--xInterior.sellNum < 1)
						xInterior.sellNum = xInterior.xSellSlot.num;
					
				}
				else if(touchCheck(&xTouchArrowRight) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					if(++xInterior.sellNum > xInterior.xSellSlot.num)
						xInterior.sellNum = 1;
				}
				break;			
			case INTERIOR_STATE_PLAY:
			case INTERIOR_STATE_THEMASELECT:
			case INTERIOR_STATE_EXTERNAL:
			case INTERIOR_STATE_CASHSHOP:
				if(touchType == USER_POINT_PRESS_EVENT)
				{
					isKeyEvent = FALSE;
					for(int i=0;i<INTERIORTABMAX;i++)
					{
						if(touchCheck(&xTouchInteriorTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
					
					if(isKeyEvent == TRUE)
					{
						if(keyEventNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY0] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY2] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 3 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY3] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 4 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY4] == TRUE)
							isKeyEvent = FALSE;
						else if(keyEventNum == 5 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY5] == TRUE)
							isKeyEvent = FALSE;
					}
					
					
					
					
					
					int iMaxTabS=0;
					switch(xInterior.selectTabB)
					{
					case 0:		//기능성
						iMaxTabS = 6;
						break;
					case 1:		//꾸미기
						iMaxTabS = 6;
						break;
					case 2:		//외부
						iMaxTabS = 3;
						break;
					case 3:		//테마
						iMaxTabS = 0;
						break;
					case 4:		//유료샵
						iMaxTabS = 2;
						break;
					case 5:		//보관함
						iMaxTabS = 2;
						break;
					}
					
					isSelectInteriorS = FALSE;
					selectInteriorSNum = 0;
					for(int i=0;i<iMaxTabS;i++)
					{
						if(touchCheck(&xTouchInteriorTabS[i]) == TRUE  && touchType == USER_POINT_PRESS_EVENT)
						{
							isSelectInteriorS = TRUE;
							selectInteriorSNum = i;
							break;
						}
					}
					
					if(isSelectInteriorS == TRUE)
					{
						
						if(selectInteriorSNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] == TRUE)
							isSelectInteriorS = FALSE;
						else if(selectInteriorSNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU1] == TRUE)
							isSelectInteriorS = FALSE;
						else if(selectInteriorSNum == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU2] == TRUE)
							isSelectInteriorS = FALSE;
						else if(selectInteriorSNum == 3 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU3] == TRUE)
							isSelectInteriorS = FALSE;
						else if(selectInteriorSNum == 4 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU4] == TRUE)
							isSelectInteriorS = FALSE;
						else if(selectInteriorSNum == 5 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU5] == TRUE)
							isSelectInteriorS = FALSE;
						else if(selectInteriorSNum == 6 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU6] == TRUE)
							isSelectInteriorS = FALSE;
						else if(selectInteriorSNum == 7 && xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU7] == TRUE)
							isSelectInteriorS = FALSE;
					}
					
					
					if(isKeyEvent == TRUE)
					{
						playSnd(SND_MENU_OK);
						xInterior.selectTabB = keyEventNum;
						xInterior.selectTabS = 0;
						xDragScrollInteriorS.selectNum = 0;
						setInteriorTabChange();
						
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_6_INTERIOR_MENUTOUCH0:
							case TUTO_6_INTERIOR_TABTOUCH:
							case TUTO_8_INTERIOR_TABTOUCH:
							case TUTO_8_INTERIOR_OK:
								if(xInterior.selectTabB == 1 && xInterior.selectTabS == 0)		//바닥오브젝트
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_9_INTERIOR_TABTOUCH:
								if(xInterior.selectTabB == 0 && xInterior.selectTabS == 0)	//옷걸이
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_26_INTERIOR_MENUTOUCH0:
							case TUTO_26_INTERIOR_TABTOUCH0:
								if(xInterior.selectTabB == 1 && xInterior.selectTabS == 3)	//바닥지
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_26_INTERIOR_MENUTOUCH1:
							case TUTO_26_INTERIOR_TABTOUCH1:
								if(xInterior.selectTabB == 1 && xInterior.selectTabS == 4)	//벽지
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[1]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_30_INTERIOR_TABTOUCH:
								if(xInterior.selectTabB == 0 && xInterior.selectTabS == 3)	//쇼윈도
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							}
						}
					}
					else if(isSelectInteriorS == TRUE)
					{
						playSnd(SND_MENU_OK);
						xInterior.selectTabS = selectInteriorSNum;
						xDragScrollInteriorS.selectNum = 0;
						setInteriorTabChange();
						
						
						
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_6_INTERIOR_MENUTOUCH0:
							case TUTO_6_INTERIOR_TABTOUCH:
							case TUTO_8_INTERIOR_TABTOUCH:
							case TUTO_8_INTERIOR_OK:
								if(xInterior.selectTabB == 1 && xInterior.selectTabS == 0)		//바닥오브젝트
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_9_INTERIOR_TABTOUCH:
								if(xInterior.selectTabB == 0 && xInterior.selectTabS == 0)	//옷걸이
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_26_INTERIOR_MENUTOUCH0:
							case TUTO_26_INTERIOR_TABTOUCH0:
								if(xInterior.selectTabB == 1 && xInterior.selectTabS == 3)	//바닥지
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_26_INTERIOR_MENUTOUCH1:
							case TUTO_26_INTERIOR_TABTOUCH1:
								if(xInterior.selectTabB == 1 && xInterior.selectTabS == 4)	//벽지
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[1]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							case TUTO_30_INTERIOR_TABTOUCH:
								if(xInterior.selectTabB == 0 && xInterior.selectTabS == 3)	//쇼윈도
								{
									int slotNum;
									slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
									if(slotNum != DONT)
										xDragScrollInteriorS.selectNum = slotNum/8;
								}
								break;
							}
						}
						
					}
					else if(xInterior.state == INTERIOR_STATE_PLAY && xInterior.selectTabB == 5 && xInterior.totalNumS == 0 && touchCheck(&xTouchLink) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						switch(xInterior.selectTabS)
						{
						case 0:		//기능성
							xInterior.selectTabB = 0;
							xInterior.selectTabS = 0;
							setInteriorTabChange();
							break;
						case 1:		//꾸미기
							xInterior.selectTabB = 1;
							xInterior.selectTabS = 0;
							setInteriorTabChange();
							break;
						}
					}
					else if(xInterior.state == INTERIOR_STATE_PLAY && xInterior.selectTabB == 3 && touchCheck(&xTouchBack) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						xInterior.state = INTERIOR_STATE_THEMASELECT;
						xDragScrollInteriorS.selectNum = 0;
						xWorldMap.isKeyReturn = TRUE;
					}
					else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CLOSE] == TRUE)
						{
							
						}
						else
						{
							initMenuOut();
							interiorShopFreeLoad(FALSE);
							xWorldMap.state = WORLDMAP_STATE_PLAY;
							xInterior.buildModeTime64 = DONT;
							xWorldMap.isKeyReturn = TRUE;
							
							xOrder.totalNumListDataFriend = 0;
							xOrder.totalNumListData = 0;
							xOrder.isNetLoad = FALSE;
							addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
						}
					}
					else
					{
						switch(xInterior.state)
						{
						case INTERIOR_STATE_CASHSHOP:
							if(type == MH_KEY_PRESSEVENT)
							{
								xWorldMap.isKeyReturn = TRUE;
								if(xShop.xDragScroll.pos == 0 && xShop.xDragScroll.speed == 0)
								{
									isSelectCatalogS = FALSE;
									selectCatalogSNum = 0;
									for(int i=0;i<8;i++)
									{
										
										if(touchCheck(&xShop.xTouchSelectSlot[i]) == TRUE)
										{
											isSelectCatalogS = TRUE;
											selectCatalogSNum = i;
											
											break;
										}
									}
									
									int totalCnt = 0;
									switch(xShop.selectTabB)
									{
									case SHOPTAB_TYPE_MONEY:
										totalCnt= xShop.totalMoneyTab;
										break;
									case SHOPTAB_TYPE_PREMIUM:
										totalCnt = SHOPTABPREMIUMMAX;
										break;
									}
									if(selectCatalogSNum+(xShop.xDragScroll.selectNum*8) >= totalCnt)
										isSelectCatalogS = FALSE;
									
									
									if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xShop.xDragScroll.selectNum > 0)
									{
										if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
										{
											
										}
										else
											xShop.xDragScroll.speed = 320;
									}
									else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xShop.xDragScroll.selectNum < xShop.xDragScroll.totalNum-1)
									{
										if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
										{
											
										}
										else
											xShop.xDragScroll.speed = -320;
									}
									else if(isSelectCatalogS == TRUE)
									{
										
										playSnd(SND_MENU_OK);
										xShop.selectSlot = (selectCatalogSNum+xShop.xDragScroll.selectNum*8);
										
										switch(xShop.selectTabB)
										{
										case SHOPTAB_TYPE_MONEY:
											if(xShop.moneyType[xShop.selectSlot] == 0)
											{
												setPopup(POPUP_SHOP_BUYYESNOCASH, playState, playState, 0, DONT);
											}
											else
											{
												if(xSaveTemp.cash.oriData < xShop.moneyPrice[xShop.selectSlot].oriData)
													setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
												else
													setPopup(POPUP_SHOP_BUYYESNOGOLD, playState, playState, 0, DONT);
											}
											break;
										case SHOPTAB_TYPE_PREMIUM:
											if(xShop.premiumPriceType[xShop.selectSlot] == 1 && xSaveTemp.cash.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
												setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
											else if(xShop.premiumPriceType[xShop.selectSlot] == 0 && xSaveTemp.money.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
												setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
											else if(xShop.premiumPriceType[xShop.selectSlot] == 2 && xSaveTemp.tired.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
												setPopup(POPUP_TIREDEMPTY, playState, playState, 0, DONT);
											else
												setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
											break;
										}
									}
								}
							}
							break;
						case INTERIOR_STATE_EXTERNAL:
																
							
							if(xExtensionShop.xDragScroll.pos == 0 && xExtensionShop.xDragScroll.speed == 0)
							{
								isSelectCatalogS = FALSE;
								selectCatalogSNum = 0;
								for(int i=0;i<8;i++)
								{
									if(touchCheck(&xTouchInteriorS[i]) == TRUE)
									{
										isSelectCatalogS = TRUE;
										selectCatalogSNum = i;
										
										break;
									}
								}
								
								int totalCnt = 0;
								switch(xInterior.selectTabS)
								{
								case 0:		//샵확장
									totalCnt = xExtensionShop.totalTile;
									break;
								case 1:		//샵증축
									totalCnt = xExtensionShop.totalFloor;
									break;
								case 2:		//외벽
									totalCnt = xExternalWall.totalNum;
									break;
								}
								if(selectCatalogSNum+(xExtensionShop.xDragScroll.selectNum*8) >= totalCnt)
									isSelectCatalogS = FALSE;
								
								
								if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xExtensionShop.xDragScroll.selectNum > 0)
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
									{
										
									}
									else
										xExtensionShop.xDragScroll.speed = 320;
								}
								else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xExtensionShop.xDragScroll.selectNum < xExtensionShop.xDragScroll.totalNum-1)
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
									{
										
									}
									else
										xExtensionShop.xDragScroll.speed = -320;
								}
								else if(isSelectCatalogS == TRUE)
								{
									playSnd(SND_MENU_OK);
									xExtensionShop.selectSlot = (selectCatalogSNum+xExtensionShop.xDragScroll.selectNum*8);
									
									switch(xInterior.selectTabS)
									{
									case 0:		//샵확장
										switch(xExtensionShop.xSlotTile[xExtensionShop.selectSlot].priceType)
										{
										case 0:		//골드
											if(xSaveTemp.lv.oriData < xExtensionShop.tileLv[xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile])
											{
												
											}
											else if(xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile > xMap.extension)
											{
												
											}
											else if(xSaveTemp.fame.oriData < xExtensionShop.tileFame[xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile])
												setPopup(POPUP_FAMEEMPTY, playState, playState, 0, DONT);
											else if(xSaveTemp.money.oriData < xExtensionShop.tilePrice[xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile][xExtensionShop.xSlotTile[xExtensionShop.selectSlot].priceType].oriData)
												setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
											else
												setPopup(POPUP_EXTENSION_BUYYESNO_TILE, playState, playState, 0, DONT);
											break;
										case 1:		//룩
											if(xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile > xMap.extension && xSaveTemp.lv.oriData < xExtensionShop.tileLv[xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile])
											{
												
											}
											else if(xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile > xMap.extension)
											{
												
											}
											else if(xSaveTemp.cash.oriData < xExtensionShop.tilePrice[xExtensionShop.xSlotTile[xExtensionShop.selectSlot].tile][xExtensionShop.xSlotTile[xExtensionShop.selectSlot].priceType].oriData)
												setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
											else
												setPopup(POPUP_EXTENSION_BUYYESNO_TILE, playState, playState, 0, DONT);
											break;
										case 2:		//완료
											break;
										}
										break;
									case 1:		//샵증축
										switch(xExtensionShop.xSlotFloor[xExtensionShop.selectSlot].priceType)
										{
										case 0:		//골드
											if(xSaveTemp.lv.oriData < xExtensionShop.floorLv[xExtensionShop.xSlotFloor[xExtensionShop.selectSlot].floor])
											{
											}
											else if(xMap.extension < 7)
											{
												setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
												sprintf(xPopup.strText, "15x15확장 이후 이용가능합니다.");
											}
											else if(xSaveTemp.money.oriData < xExtensionShop.floorPrice[xExtensionShop.xSlotFloor[xExtensionShop.selectSlot].floor][xExtensionShop.xSlotFloor[xExtensionShop.selectSlot].priceType].oriData)
												setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
											else
												setPopup(POPUP_EXTENSION_BUYYESNO, playState, playState, 0, DONT);
											break;
										case 1:		//룩
											if(xSaveTemp.lv.oriData < xExtensionShop.floorLv[xExtensionShop.xSlotFloor[xExtensionShop.selectSlot].floor])
											{
											}
											else if(xMap.extension < 7)
											{
												setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
												sprintf(xPopup.strText, "15x15확장 이후 이용가능합니다.");
											}
											else if(xSaveTemp.cash.oriData < xExtensionShop.floorPrice[xExtensionShop.xSlotFloor[xExtensionShop.selectSlot].floor][xExtensionShop.xSlotFloor[xExtensionShop.selectSlot].priceType].oriData)
												setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
											else
												setPopup(POPUP_EXTENSION_BUYYESNO, playState, playState, 0, DONT);
											break;
										case 2:		//완료
											break;
										}
										break;
									case 2:		//외벽
										if(xExternalWall.selectWall != xExternalWall.listSlot[xExtensionShop.selectSlot])
										{
											initMenuOut();
											interiorShopFreeLoad(FALSE);
											xWorldMap.state = WORLDMAP_STATE_PLAY;
											xInterior.buildModeTime64 = DONT;
											xMap.nowFloor = xMap.totalFloor-1;
											xWorldMap.isExternal = TRUE;
											xWorldMap.isExternalWall = TRUE;
											xWorldMap.externalWallEventAnyCnt = 0;
											xMap.pointX = 479;
											xMap.pointY = -628;
											xWorldMap.fscale = 0.9f;
											
											
											xExternalWall.selectWallChange = xExternalWall.listSlot[xExtensionShop.selectSlot];
											switch(xMap.extension)
											{
												case 0:
												case 1:
												case 2:
												case 3:
												case 4:
												case 5:
												case 6:
													sprintf(strTempS,"externalwalls%d%d.png", xExternalWall.selectWallChange,xMap.extension);
													loadImgDocuments(strTempS, &imgExternalWallSChange);
													break;
												default:
													for(int floor=0;floor<xMap.totalFloor;floor++)
													{
														sprintf(strTempS,"externalwall%d%d.png", xExternalWall.selectWallChange,floor);
														loadImgDocuments(strTempS, &imgExternalWallChange[floor]);
													}
													break;
											}

										}
										break;
									}									
								}
							}
							break;
						case INTERIOR_STATE_THEMASELECT:
							if(xDragScrollInteriorS.pos == 0 && xDragScrollInteriorS.speed == 0)
							{
								isSelectCatalogS = FALSE;
								selectCatalogSNum = 0;
								for(int i=0;i<8;i++)
								{
									if(touchCheck(&xTouchInteriorS[i]) == TRUE)
									{
										isSelectCatalogS = TRUE;
										selectCatalogSNum = i;
										
										break;
									}
								}
								if(selectCatalogSNum+(xDragScrollInteriorS.selectNum*8) >= xInterior.totalNumThema)
									isSelectCatalogS = FALSE;
								
								if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollInteriorS.selectNum > 0)
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
									{
										
									}
									else
										xDragScrollInteriorS.speed = 320;
								}
								else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollInteriorS.selectNum < xDragScrollInteriorS.totalNum-1)
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
									{
										
									}
									else
										xDragScrollInteriorS.speed = -320;
								}
								else if(isSelectCatalogS == TRUE)
								{
									playSnd(SND_MENU_OK);
									subTemp[1] = xInterior.selectThema;
									xInterior.selectThema = (selectCatalogSNum+xDragScrollInteriorS.selectNum*8);
									setInteriorTabChange();
									xInterior.state = INTERIOR_STATE_PLAY;
								}
							}
							break;
						case INTERIOR_STATE_PLAY:
							if(xDragScrollInteriorS.pos == 0 && xDragScrollInteriorS.speed == 0)
							{
								isSelectCatalogS = FALSE;
								selectCatalogSNum = 0;
								for(int i=0;i<8;i++)
								{
									if(touchCheck(&xTouchInteriorS[i]) == TRUE)
									{
										isSelectCatalogS = TRUE;
										selectCatalogSNum = i;
										
										break;
									}
								}
								if(selectCatalogSNum+(xDragScrollInteriorS.selectNum*8) >= xInterior.totalNumS)
									isSelectCatalogS = FALSE;
								
								if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollInteriorS.selectNum > 0)
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
									{
										
									}
									else
										xDragScrollInteriorS.speed = 320;
								}
								else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollInteriorS.selectNum < xDragScrollInteriorS.totalNum-1)
								{
									if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE] == TRUE)
									{
										
									}
									else
										xDragScrollInteriorS.speed = -320;
								}
								else if(isSelectCatalogS == TRUE)
								{
									playSnd(SND_MENU_OK);
									subTemp[1] = xInterior.selectSlotS;
									xInterior.selectSlotS = (selectCatalogSNum+xDragScrollInteriorS.selectNum*8);
									
									setMapData(xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0]);


									if(xInterior.selectTabB == 5/*인벤일때*/ && xInterior.selectSlotS == subTemp[1] && touchCheck(&xTouchInteriorBtn[selectCatalogSNum][0]) == TRUE)
									{
										playSnd(SND_MENU_OK);
										memcpy(&xInterior.xSellSlot, &xInterior.xSlotS[xInterior.selectSlotS], sizeof(XINTERIORSLOT));
										xInterior.xSellSlot.codeTeam[0] = xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0];
										xInterior.sellNum = 1;//xInterior.xSellSlot.num
										xInterior.state = INTERIOR_STATE_SELLPOPUP;
									}
									//레벨제한
									else if(xInterior.selectTabB != 5/*인벤아닐때*/ && xSaveTemp.lv.oriData < xObj.xObjData[xMap.type][xMap.listNum].lv)
									{

									}
                                    
									else if((xLock.isLock[LOCK_TYPE_HANGER] == TRUE && xMap.type == INTERIOR_TYPE_HANGER)
											||(xLock.isLock[LOCK_TYPE_ACCESSORY] == TRUE && xMap.type == INTERIOR_TYPE_ACCESSORY)
											||(xLock.isLock[LOCK_TYPE_SHOWWINDOW] == TRUE && xMap.type == INTERIOR_TYPE_SHOWWINDOW))
									{

										switch(xMap.type)
										{
										case INTERIOR_TYPE_HANGER:
											setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_HANGER]);
											break;
										case INTERIOR_TYPE_ACCESSORY:
											setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_ACCESSORY]);
											break;
										case INTERIOR_TYPE_SHOWWINDOW:
											setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_SHOWWINDOW]);
											break;
										}
									}
									//갯수제한
									else if(xInterior.buildlimitNum[xMap.nowFloor][xMap.type] >= xInterior.buildlimitMax[xMap.nowFloor][xMap.type])
									{

									}
                                    else if(xInterior.selectTabB!=5/*인벤이 아닐때*/&&xMap.type == 4)
                                    {
                                        int nextLv = 0;
                                        setMapData(xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0]);
                                        xFormer.count[xMap.listNum]=xFormer.itemCnt[xMap.listNum];
                                        if(xFormer.count[xMap.listNum] >= xFormer.buildlimitMax[xMap.listNum])
                                            nextLv = -1;
                                        if(nextLv == -1)
                                        {
                                            
                                        }
                                        else
                                        {
                                            playSnd(SND_MENU_OK);
                                            setInteriorBuildMode(xInterior.selectSlotS,0);
                                        }
                                    }
                                    else if(xInterior.selectTabB==5/*인벤일때*/&& xInterior.selectSlotS == subTemp[1] &&xMap.type==4&&touchCheck(&xTouchInteriorBtn[selectCatalogSNum][1]) == TRUE)
                                    {
                                        int nextLv = 0;
                                        setMapData(xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0]);
                                        
                                        xFormer.count[xMap.listNum]=xFormer.itemCnt[xMap.listNum];
                                        if(xFormer.count[xMap.listNum] >= xFormer.buildlimitMax[xMap.listNum])
                                            nextLv = -1;
                                        if(nextLv == -1)
                                        {
                                            
                                        }
                                        else
                                        {
                                            playSnd(SND_MENU_OK);
                                            setInteriorBuildMode(xInterior.selectSlotS,0);
                                        }

                                    }
									else if(xInterior.selectTabB == 5/*인벤일때*/ && xInterior.selectSlotS == subTemp[1] && touchCheck(&xTouchInteriorBtn[selectCatalogSNum][1]) == TRUE)
									{
										playSnd(SND_MENU_OK);
										setInteriorBuildMode(xInterior.selectSlotS,0);
									}
									else if(xInterior.selectTabB != 5/*인벤아닐때*/ && xInterior.xSlotS[xInterior.selectSlotS].totalTeam > 1)
									{
										xInterior.state = INTERIOR_STATE_TEAM;
										xWorldMap.isKeyReturn = TRUE;
									}
									else if(xInterior.selectTabB != 5/*인벤아닐때*/)
									{
										if(xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_ITEMSELECT] == TRUE
										   && xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0] != xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]
										   && xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0] != xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[1])
										{
										}
										else
										{
											M_Boolean isCheck = FALSE;
											setMapData(xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0]);
											if(xInterior.selectTabB != 5/*인벤이 아닐때*/ && xMap.type == INTERIOR_TYPE_PAYMENT)
											{
												for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
												{
													if(xInventoryInterior.itemCode[ee] == xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0])
													{
														isCheck = TRUE;
														break;
													}
												}
											}
											if(isCheck == TRUE)
											{
												xInterior.selectSlotTeam = 0;
												setPopup(POPUP_BUILD_PAYMENTERR, PLAY_PLAY, PLAY_PLAY, 0, DONT);
											}
											else
												setInteriorBuildMode(xInterior.selectSlotS,0);
										}
									}
								}
							}
							break;
						}
					}
				}
				break;
			}
			break;
		case WORLDMAP_STATE_CARPARKSELECTMODE_CAR:
			if(touchType == USER_POINT_PRESS_EVENT)
			{
				isKeyEvent = FALSE;
				keyEventNum = 0;
				
				for(int i=0;i<CARKPARKMAX;i++)
				{
					if(touchCheckS(&xCarPark[i].xTouch) == TRUE)
					{
						isKeyEvent = TRUE;
						keyEventNum = i;
						break;
					}
				}
				if(touchCheck(&xTouchClr) == TRUE)
				{
					carStorageFreeLoad(TRUE);
					xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
					xOrder.selectSlot = DONT;
					xOrder.totalNumListData = 0;
					xOrder.isNetLoad = FALSE;
					addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
					xWorldMap.isKeyReturn = TRUE;
				}
				else if(isKeyEvent == TRUE)
				{
					xCar.selectCarPark = keyEventNum;
					if(xSaveTemp.lv.oriData < xCarPark[xCar.selectCarPark].lv)
					{
						
					}
					else
					{
						switch(xCarPark[xCar.selectCarPark].state)
						{
						case CARPARK_STATE_READ:
							//월드맵상태
							carStorageFreeLoad(FALSE);
							xWorldMap.state = WORLDMAP_STATE_PLAY;
								
							xCarPark[xCar.selectCarPark].carNum = xOrder.carParkSelectMode_Code;
							///////////////////////////////////////////////////////////////
							xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xCar.selectCarPark;
							xEventQueueNet.key[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].orderKey;
							xEventQueueNet.code[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].carNum;
							xEventQueueNet.action[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].state;
							xEventQueueNet.time[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].endTime;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CARPARK, FALSE);
							//////////////////////////////////////////////////////////////
							break;
						}
					}
				}
			}
			break;
		case WORLDMAP_STATE_CARPARKSELECTMODE_PRODUCTIOHN:
			if(touchType == USER_POINT_PRESS_EVENT)
			{
				isKeyEvent = FALSE;
				keyEventNum = 0;
				
				for(int i=0;i<CARKPARKMAX;i++)
				{
					if(touchCheckS(&xCarPark[i].xTouch) == TRUE)
					{
						isKeyEvent = TRUE;
						keyEventNum = i;
						break;
					}
				}
				if(touchCheck(&xTouchClr) == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SELECTCLOSE] == TRUE)
					{
					}
					else
					{
						carStorageFreeLoad(TRUE);
						xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
						xOrder.selectSlot = DONT;
						xOrder.totalNumListData = 0;
						xOrder.isNetLoad = FALSE;
						addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
					}
					
				}
				else if(isKeyEvent == TRUE)
				{
					xCar.selectCarPark = keyEventNum;
					if(xSaveTemp.lv.oriData < xCarPark[xCar.selectCarPark].lv)
					{
						
					}
					else if(xCarPark[xCar.selectCarPark].carNum != DONT)
					{
						if(xCar.selectCarPark == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SLOT1] == TRUE)
						{
							
						}
						else if(xCar.selectCarPark == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SLOT2] == TRUE)
						{
							
						}
						else if(xCar.selectCarPark == 2 && xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SLOT3] == TRUE)
						{
							
						}
						else
						{
							switch(xCarPark[xCar.selectCarPark].state)
							{
							case CARPARK_STATE_READ:
								//월드맵상태
								carStorageFreeLoad(FALSE);
								xWorldMap.state = WORLDMAP_STATE_PLAY;
								//해당차량 출발상태로 변경(네트워크)
								xOrder.isCarPakrGo = TRUE;
								int orderSlotNum = xOrder.slotNumList[xOrder.selectSlot];
								xOrder.xSlotListData[orderSlotNum].state = ORDERSLOT_STATE_CAR;
								//넣기
								//////////////////////////////////////////////////////////////////
								xEventQueueNet.action[xEventQueueNet.totalNum] = xOrder.xSlotListData[orderSlotNum].state;
								xEventQueueNet.key[xEventQueueNet.totalNum] = xOrder.xSlotListData[orderSlotNum].key;
								xEventQueueNet.time[xEventQueueNet.totalNum] = xOrder.xSlotListData[orderSlotNum].endTime;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ORDER, TRUE);
								//////////////////////////////////////////////////////////////////
									
								if(xOrder.xSlotListData[orderSlotNum].friendType == 0)
								{
									//////////////////////////////////////////////////////////////
									xEventQueueNet.action[xEventQueueNet.totalNum] = 0;//0:배송1:완료
									xEventQueueNet.key[xEventQueueNet.totalNum] = xOrder.xSlotListData[orderSlotNum].key;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ORDEROK, FALSE);
									//////////////////////////////////////////////////////////////
								}
																				
									
								setMapData(xOrder.xSlotListData[orderSlotNum].code);
								xCarPark[xCar.selectCarPark].state = CARPARK_STATE_ING;
								xCarPark[xCar.selectCarPark].endTime = xCalendar.nowTime + xCarData[xCarPark[xCar.selectCarPark].carNum].timePer.oriData;
								if(xBuff.isOpen[BUFF_TYPE_CARORDER] == TRUE)
									xCarPark[xCar.selectCarPark].endTime -= xCarData[xCarPark[xCar.selectCarPark].carNum].timePer.oriData*xBuff.bonusPer[BUFF_TYPE_CARORDER]/100;

								//주차장 상태 변경
								xCarPark[xCar.selectCarPark].orderKey = xOrder.xSlotListData[orderSlotNum].key;
								///////////////////////////////////////////////////////////////
								xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xCar.selectCarPark;
								xEventQueueNet.key[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].orderKey;
								xEventQueueNet.code[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].carNum;
								xEventQueueNet.action[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].state;
								xEventQueueNet.time[xEventQueueNet.totalNum] = xCarPark[xCar.selectCarPark].endTime;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CARPARK, TRUE);
								//////////////////////////////////////////////////////////////
								xCarPark[xCar.selectCarPark].state = CARPARK_STATE_GO;
								xCarPark[xCar.selectCarPark].anyCnt = 0;
																										
								int money = (xFashionData[xMap.type][xMap.listNum].makeNum.oriData * xFashionData[xMap.type][xMap.listNum].sellPrice.oriData)+2000;
									
									
								if(xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_MONEY] > 0)
									money += money*xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_MONEY]/100;
									
																		
								setMoney(money);
								setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_GOLD, money);
								setDropIcon(xTouch.xPos, xTouch.yPos,
											ICON_TYPE_GOLD,money,
											ICON_TYPE_GOLD,0,
											ICON_TYPE_GOLD,0);
									
								if(xOrder.xSlotListData[orderSlotNum].friendType == 2)
									setQuest(21, 1, xOrder.xSlotListData[orderSlotNum].code);
									
																	
								if(xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendType == 0)
								{
									xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].isKakao = checkKakaoFriend(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].strKakaoId);
									if(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].isKakao == TRUE)
									{
										setDropIcon(xTouch.xPos, xTouch.yPos,
													ICON_TYPE_CANDY,xKakaoData.socialBonusCarStorage,
													DONT,0,
													DONT,0);
										setBonus(xTouch.xPos, xTouch.yPos-26, ICON_TYPE_CANDY, xKakaoData.socialBonusCarStorage);
										setTired(xKakaoData.socialBonusCarStorage);
										if(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].isKakaoMessage == TRUE)
										{
											kakaoDevSendMessageApp(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].friendNum].strKakaoId, xSaveTemp.strNickName,"1474");
										}
									}
								}
								
								setQuest(10, 1, DONT);
								//////////////////////////////////////////////////////////////
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
								//////////////////////////////////////////////////////////////																	
								setFiveRocksCustom("주문배송","처리하기","NULL","NULL",1);
                                setRivalQuest(3,1);        //배송량
								break;
							}
						}
					}
				}
			}
			break;
		case WORLDMAP_STATE_PLAY:
			if(xWorldMap.isFriendMap == TRUE)
			{
				switch(xFriendMap.state)
				{
				case FRIENDMAP_STATE_PLAY:
					if(keyQuestIcon(type, param1, param2, touchId) == TRUE)
						return;
					setMapPosScale(type, param1, param2,touchId);
						
					if(touchType == USER_POINT_PRESS_EVENT)
					{
						//월드맵UI검색
						xInterior.buildModeTime64 = xCalendar.nowTime;
						xInterior.buildModeTimeXpos = xTouch.xPos;
						xInterior.buildModeTimeYpos = xTouch.yPos;
					}
					else if(touchType == USER_POINT_MOVE_EVENT)
					{
						if(xInterior.buildModeTimeXpos - xTouch.xPos > 10 || xInterior.buildModeTimeXpos - xTouch.xPos < -10 || xInterior.buildModeTimeYpos - xTouch.yPos > 10 || xInterior.buildModeTimeYpos - xTouch.yPos < -10 )
						{
							xInterior.buildModeTime64 = DONT;
						}
					}
					else if(touchType == USER_POINT_RELEASE_EVENT)
					{
						if(xInterior.buildModeTime64 != DONT)
						{							
							if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapMainMenuIcon) == TRUE)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HOME] == TRUE)
								{
									
								}
								else
								{
									playSnd(SND_MENU_OK);
									//홈으로
									xWorldMap.isFriendMap = FALSE;
									xFriendMap.isPlay = TRUE;
									xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
									xFriendMap.type = 0;//0:리스트1:랜덤2:메일
									xFriendMap.anyCnt = 0;
								}
							}
                            
                            
							else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapFriendIcon) == TRUE)
							{
//LJW 월드맵 친구아이콘 막기
								playSnd(SND_MENU_OK);
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS] == TRUE || xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FRIENDS] == TRUE)
								{
								
								}
								else
									setStateFriendList();
							}
                            
							else if(xWorldMap.isExternal == FALSE && xFriendMap.type != 0 && touchCheck(&xTouchFriendMapRandom) == TRUE)
							{
								playSnd(SND_MENU_OK);
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RANDOMFRIEND, TRUE);
							}
							else if(xWorldMap.isExternal == FALSE && xFriendMap.type != 0 && touchCheck(&xTouchFriendMapAdd) == TRUE)
							{
								if(xFriendData[xFriendMap.selectDataSlotNum].isAdd == FALSE)
								{
									playSnd(SND_MENU_OK);
									/////////////////////////////////
									xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIEND, FALSE);
									////////////////////////////////
								
									xFriendData[xFriendMap.selectDataSlotNum].isAdd = TRUE;
									setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
									sprintf(xPopup.strText, "친구로 등록 되었습니다.");
								}
							}
							else if(xWorldMap.isExternal == FALSE && xFriendMap.type == 0 && touchCheck(&xTouchFriendMapPre) == TRUE)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_PREVIOUS] == TRUE)
								{
									
								}
								else
								{
									int nextSelectSlot = xFriend.selectSlot-1;
									
									if(nextSelectSlot >= 0)
									{
										if(xFriend.dataSlotNumList[nextSelectSlot] == DONT)
											nextSelectSlot--;
									}
									
									if(nextSelectSlot >= 0)
									{
										playSnd(SND_MENU_OK);
										xFriend.selectSlot = nextSelectSlot;
										xFriendMap.selectDataSlotNum = xFriend.dataSlotNumList[nextSelectSlot];
										xWorldMap.isFriendMap = TRUE;
										xFriendMap.isPlay = TRUE;
										xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
										xFriendMap.type = 0;//0:리스트1:랜덤2:메일
										xFriendMap.anyCnt = 0;
									}
								}
							}
							else if(xWorldMap.isExternal == FALSE && xFriendMap.type == 0 && touchCheck(&xTouchFriendMapNext) == TRUE)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_NEXT] == TRUE)
								{
								}
								else
								{
									int nextSelectSlot = xFriend.selectSlot+1;
									if(xFriend.dataSlotNumList[nextSelectSlot] == DONT)
										nextSelectSlot++;
									
									if(nextSelectSlot < xFriend.totalNumList)
									{
										playSnd(SND_MENU_OK);
										xFriend.selectSlot = nextSelectSlot;
										xFriendMap.selectDataSlotNum = xFriend.dataSlotNumList[nextSelectSlot];
										xWorldMap.isFriendMap = TRUE;
										xFriendMap.isPlay = TRUE;
										xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
										xFriendMap.type = 0;//0:리스트1:랜덤2:메일
										xFriendMap.anyCnt = 0;
									}
								}
							}
							else if(xWorldMap.isExternal == FALSE && xFriendData[xFriendMap.selectDataSlotNum].isKakao == TRUE && touchCheck(&xWorldMap.xTouchFriendMapUiKakao) == TRUE && xFriendData[xFriendMap.selectDataSlotNum].isKakaoHelp == FALSE)
							{
								playSnd(SND_MENU_OK);
								setPopup(POPUP_KAKAOFRIENDMAP, playState, playState, 0, DONT);
							}
							else if(xWorldMap.isAppReview == FALSE && xWorldMap.isExternal == FALSE && touchCheck(&xCashGift.xTouchWorldMapIcon) == TRUE)
							{
								playSnd(SND_MENU_OK);
								xCashGift.friendUserNum = xFriendData[xFriendMap.selectDataSlotNum].userNum;
								setCashGift();
							}
                            
                            

                            else if(xWorldMap.isExternal == FALSE && touchCheck(&xNoticeWorldMap.xTouchFriendDel) == TRUE)
                            {
                                if(xFriendData[xFriendMap.selectDataSlotNum].isPM == false && xFriendData[xFriendMap.selectDataSlotNum].isAdd == true)
                                {
                                    playSnd(SND_MENU_OK);
                                    setPopup(POPUP_FRIENDDEL, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                                }
                            }
							else if(xWorldMap.isFriendMap == false && xWorldMap.isExternal == FALSE && xModelSkill.totalWorldMapUiSlot > 0 && touchCheck(&xModelSkill.xTouchWorldMapUiIcon) == TRUE)
							{
								playSnd(SND_MENU_OK);
								if(xModelSkill.isWorldMapUiInfoBoxOpen == FALSE)
									xModelSkill.isWorldMapUiInfoBoxOpen = TRUE;
								else
									xModelSkill.isWorldMapUiInfoBoxOpen = FALSE;
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[0]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 0)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 0;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[1]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 1)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 1;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[2]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 2)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 2;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[3]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 3)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 3;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[4]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 4)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 4;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[5]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 5)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 5;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[6]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 6)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 6;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[7]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 7)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 7;
								}
							}
							else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[8]) == TRUE)
							{
								if(xModelSkill.totalWorldMapUiSlot > 8)
								{
									playSnd(SND_MENU_OK);
									xModelSkill.selectWorldMapUiSlot = 8;
								}
							}
							else if(xWorldMap.isExternal == FALSE && touchCheck(&xWorldMap.xTouchFriendMapSocialInfo) == TRUE)
							{
								playSnd(SND_MENU_OK);
								xWorldMap.isFriendMapSocialInfo = xWorldMap.isFriendMapSocialInfo == TRUE?FALSE:TRUE;
							}
							else if(xWorldMap.isExternal == FALSE/* && xFriendMap.type == 0 */&& touchCheck(&xTouchFriendMapMail) == TRUE)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_GUESTBOOK] == TRUE)
								{
									
								}
								else
									setStateMail();
							}
							else if(xWorldMap.isExternal == FALSE/* && xFriendMap.type == 0 */&& touchCheck(&xTouchFriendMapMail2) == TRUE)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_GUESTBOOK] == TRUE)
								{
									
								}
								else
									setStateMail();
							}
							else if(xWorldMap.isExternal == FALSE/* && xFriendMap.type == 0 */&& touchCheck(&xTouchFriendMapModel) == TRUE)
							{
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_MODEL] == TRUE)
								{
									
								}
								else
								{
									xModel.modelFriendDataSlotNum = xFriendMap.selectDataSlotNum;
									
									friendListFreeLoad(FALSE);
									modelImgLoad(TRUE);
									xWorldMap.state = WORLDMAP_STATE_MODEL_FRIEND;
									for(int i=0;i<MODELMAINSLOTMAX;i++)
										xModelMainSlotFRIEND[i].state = MODELMAINSLOT_STATE_LOCK;
									////////////////////////////////////////////
									xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xModel.modelFriendDataSlotNum].userNum;
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETMODELLIST, FALSE);
									///////////////////////////////////////////
								}
							}
							else if(selectEventBox(xMap.nowFloor,EVENTBOX_TYPE_SELLTABLEFRIEND) != DONT)
							{
							}
							else if(selectEventBox(xMap.nowFloor,EVENTBOX_TYPE_SHOWWINDOWFRIEND) != DONT)
							{
							}
							else if(selectEventBox(xMap.nowFloor,EVENTBOX_TYPE_WASTE) != DONT)
							{
							}
							else if(selectEventBox(xMap.nowFloor,EVENTBOX_TYPE_FRIENDORDER) != DONT)
							{
							}
							else if(selectEventBox(xMap.nowFloor,DONT) == DONT)
							{
								checkExternMove();
							}
						}
					}
					break;
				}
				return;
			}
				
				
			if(xWorldMapUi.isPlayerInfo == TRUE)
			{
				if(touchCheck(&xProfile.xTouchPhoto) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					//[xIosUtil getPhoto];
                    setQuest(22, 1, DONT);
                    //프로필 변경 UI 이미지 로드 KBY 2018.2.26
                    profilePhotoFreeLoad_FP(true);
                    //////////////////////////////////////
					xWorldMap.state = WORLDMAP_STATE_PROFILE;
					return;
				}
				/*
				else if(touchCheck(&xProfile.xTouchShopTitle) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					xWorldMap.state = WORLDMAP_STATE_SHOPTITLEUI;
					xShopTitle.selectShopTitleUi = xSaveTemp.profileNum;
					xShopTitle.xDragScroll.selectNum = xSaveTemp.profileNum;
					return;
				}
				 */
				else if(touchCheck(&xProfile.xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
				{
					playSnd(SND_MENU_OK);
					xWorldMapUi.isPlayerInfo = FALSE;
					xWorldMap.isKeyReturn = TRUE;
					return;
				}
			}																			

			if(keyQuestIcon(type, param1, param2, touchId) == TRUE)
				return;
			
				
				
				
				
			setMapPosScale(type, param1, param2,touchId);						
			if(touchType == USER_POINT_PRESS_EVENT)
			{
				//월드맵UI검색
				xInterior.buildModeTime64 = xCalendar.nowTime;
				xInterior.buildModeTimeXpos = xTouch.xPos;
				xInterior.buildModeTimeYpos = xTouch.yPos;
				
			}
			else if(touchType == USER_POINT_MOVE_EVENT)
			{
				if(xInterior.buildModeTimeXpos - xTouch.xPos > 10 || xInterior.buildModeTimeXpos - xTouch.xPos < -10 || xInterior.buildModeTimeYpos - xTouch.yPos > 10 || xInterior.buildModeTimeYpos - xTouch.yPos < -10 )
				{ 
					xInterior.buildModeTime64 = DONT;
				}
			}
			else if(touchType == USER_POINT_RELEASE_EVENT)
			{
				xSelectTileOne.state = SELECTTILE_STATE_DONT;
				if(xInterior.buildModeTime64 != DONT)
				{
					
					M_Boolean isCarPark = FALSE;
					int carParkNum = 0;
					
					for(int i=0;i<CARKPARKMAX;i++)
					{
						if(touchCheckS(&xCarPark[i].xTouch) == TRUE)
						{
							isCarPark = TRUE;
							carParkNum = i;
							break;
						}
					}
                    
                    bool isPackageUi = false;
                    int packageUiNum = 0;
                    
                    for(int k=0;k<PACKAGEDATAMAX;k++)
                    {
                        if(xPackagePopup.uiShowState == PACKAGEUISHOW_STATE_OPEN)
                        {
                            if(xPackageData[k].isUiShow == true)
                            {
                                if(isSellPackage(k) == true)
                                {
                                    if(touchCheck(&xPackagePopup.xTouchUi[k]) == TRUE)
                                    {
                                        isPackageUi = true;
                                        packageUiNum = k;
                                        break;
                                    }
                                }
                            }
                        }
                    }
					
                    
                    if(xEventQuestUi.totalNum > 0 && xWorldMap.isExternal == FALSE && touchCheck(&xEventQuestUi.xTouchMenu) == TRUE)
                    {
                        
                        if(xEventQuest.isNetLoad == false)
                        {
                            playSnd(SND_MENU_OK);
                            xWorldMap.state = WORLDMAP_STATE_EVENTQUEST;
                            eventQuestFreeLoad(true);
                            
                            
                            for(int k=0;k<EVENTQUESTMAX;k++)
                            {
                                xEventQuest.xDragScroll[k].touchXpos = DONT;
                                xEventQuest.xDragScroll[k].touchYpos = DONT;
                                xEventQuest.xDragScroll[k].touchXposBefore = DONT;
                                xEventQuest.xDragScroll[k].touchYposBefore = DONT;
                                xEventQuest.xDragScroll[k].selectNum = 0;
                                xEventQuest.xDragScroll[k].pos = 0;
                                xEventQuest.xDragScroll[k].speed = 0;
                            }
                            
                            setEventQuestList(xEventQuest.listTab[xEventQuest.selectTab]);
                        }
                    }
                    else if(xClub.isOpen == true && xWorldMap.isExternal == FALSE && touchCheck(&xWorldMapUi.xTouchClubMenu) == TRUE)
                    {
                        if(xSaveTemp.lv.oriData < xClub.lvLimit)
                        {
                            setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            sprintf(xPopup.strText, "Lv.%d이후 이용가능합니다.",xClub.lvLimit);
                        }
                        else
                        {
                            
                            
                            if(xClub.xMy.clubKey == DONT)
                            {
                                xWorldMap.state = WORLDMAP_STATE_CLUBLIST;
                                refreshClubList();
                                clubListFreeLoad(true);
                            }
                            else
                            {
                                xWorldMap.state = WORLDMAP_STATE_CLUBLOBBY;
                                xClubLobby.state = CLUBLOBBY_STATE_DATANET;
                                clubLobbyFreeLoad(true);
                                clubShopFreeLoad(true);
                                clubIconShopFreeLoad(true);
                                clubStorageFreeLoad(true);
                                fashionWeekFreeLoad(true);

                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBICONLISTUPDATE, TRUE);
                                
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CMD_CLUBDONATIONCOUNT, TRUE);
                                xClubHistory.totalNum = 0;
                                xClubHistory.pageNum = 0;
                                xClubHistory.rowNum = 0;
                                
                                ////////////////////////////////////////////////////
                                xEventQueueNet.key[xEventQueueNet.totalNum] = xClub.xMy.clubKey;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBMEMBER, TRUE);
                                ///////////////////////////////////////////////////
                                
                                ////////////////////////////////////////////////////
                                xEventQueueNet.key[xEventQueueNet.totalNum] = xClub.xMy.clubKey;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBJOINLIST, TRUE);
                                ///////////////////////////////////////////////////
                                
                                ////////////////////////////////////////////////////
                                xEventQueueNet.key[xEventQueueNet.totalNum] = xClub.xMy.clubKey;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBDATA, TRUE);
                                ///////////////////////////////////////////////////
                                
                                if(xClubLobby.selectMenu == CLUBLOBBY_MENU_FASHIONWEEK)
                                {
                                    //////////////////////////////////////////////////////////////////////////////////////////
                                    xFashionWeek.isNet_Dress = true;
                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKDRESSLIST, TRUE);
                                    //////////////////////////////////////////////////////////////////////////////////////////
                                    
                                    //////////////////////////////////////////////////////////////////////////////////////////
                                    xFashionWeek.isNet_FittingList = true;
                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKFITTINGLIST, TRUE);
                                    //////////////////////////////////////////////////////////////////////////////////////////
                                }                                
                            }
                        }
                    }
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapTrendIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_TREND] == TRUE)
						{
							
						}
						else
						{
							if(xLock.isLock[LOCK_TYPE_TREND] == TRUE)
							{
								setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_TREND]);
							}
							else
							{
								playSnd(SND_POPUP_SHOW);
								trendFreeLoad(TRUE);
								xWorldMap.isTrend = TRUE;
								xWorldMap.trendInType = 2;	//0오전1오후2그외
								xTrend.state = TREND_STATE_MAIN;
								xTrend.selectSlot = DONT;
								
								if(xQuestTuto.state == QUEST_TUTO_KEY)
								{
									switch(xQuestTuto.nowNum)
									{
                                    case TUTO_21_TRENDICON:
                                        xQuestTuto.isTutoClean = TRUE;
                                        break;
									}
								}
							}
						}
					}
                    
                    
                    
                    ///////////////////
                    //재화 UI 터치시 처리 KBY 2018.2.23
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapCandyIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_GOLDCASH] == TRUE)
						{
							
						}
						else
//							setShop(SHOPTAB_TYPE_PREMIUM);
                            setShop_FP(4, 3);
					}
                    
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapCashIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_GOLDCASH] == TRUE)
						{
							
						}
						else
//							setShop(SHOPTAB_TYPE_MONEY);
                            setShop_FP(4, 1);
					}
                    
                    else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapMoneyIcon) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_GOLDCASH] == TRUE)
                        {
                            
                        }
                        else
                            //							setShop(SHOPTAB_TYPE_MONEY);
                            setShop_FP(4, 2);
                    }
					else if(xWorldMap.isExternal == FALSE && xG9.isOpen == TRUE && xG9.isNet == TRUE && touchCheck(&xG9.xTouch) == TRUE)
					{
						playSnd(SND_MENU_OK);
						setPopup(POPUP_G9_LINK, playState, playState, 0, DONT);
					}
                    else if(xWorldMap.isExternal == FALSE && touchCheck(&xWorldMap.xTouchCafeUi) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        naverPlug(NAVERPLUG_TYPE_HOME);
                    }
                    else if(xWorldMap.isExternal == FALSE && touchCheck(&xPrePay.xTouchUi) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        prepayFreeLoad(TRUE);
                        xWorldMap.state = WORLDMAP_STATE_PREPAY;
                    }
                    else if(xWorldMap.isExternal == FALSE && touchCheck(&xPackagePopup.xTouchUiMain) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        if(xPackagePopup.uiShowState == PACKAGEUISHOW_STATE_CLOSE)
                            xPackagePopup.uiShowState = PACKAGEUISHOW_STATE_OPEN;
                        else
                            xPackagePopup.uiShowState = PACKAGEUISHOW_STATE_CLOSE;
                        
                        
                        
                    }
                    else if(xWorldMap.isExternal == FALSE && isPackageUi == true)
                    {
                        playSnd(SND_MENU_OK);
                        setPackagePopup(packageUiNum);
                    }
					else if(xSave.giftLastKey != xMail.giftLastKey && xWorldMap.isExternal == FALSE && touchCheck(&xMail.xTouchWorldMapicon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_POSTBOX] == TRUE)
						{
							
						}
						else
                        {
							setStateMail();
                            xMail.selectTab = 2;
                        }
					}
					else if(xSave.mailLastKey != xMail.mailLastKey && xWorldMap.isExternal == FALSE && touchCheck(&xMail.xTouchWorldMapicon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_POSTBOX] == TRUE)
						{
							
						}
						else
							setStateMail();
					}
					else if(xWorldMap.isExternal == FALSE && xSaleShop.isOpen == TRUE && touchCheck(&xSaleShop.xTouchWorldMapIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_SALESHOP] == TRUE)
						{
							
						}
						else
							setSaleShop();
					}
					else if(xWorldMap.isFriendMap == false && xWorldMap.isExternal == FALSE && xModelSkill.totalWorldMapUiSlot > 0 && touchCheck(&xModelSkill.xTouchWorldMapUiIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xModelSkill.isWorldMapUiInfoBoxOpen == FALSE)
							xModelSkill.isWorldMapUiInfoBoxOpen = TRUE;
						else
							xModelSkill.isWorldMapUiInfoBoxOpen = FALSE;
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[0]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 0)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 0;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[1]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 1)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 1;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[2]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 2)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 2;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[3]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 3)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 3;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[4]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 4)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 4;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[5]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 5)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 5;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[6]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 6)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 6;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[7]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 7)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 7;
						}
					}
					else if(xWorldMap.isExternal == FALSE && xModelSkill.isWorldMapUiInfoBoxOpen == TRUE && touchCheck(&xModelSkill.xTouchWorldMapUiSlot[8]) == TRUE)
					{
						if(xModelSkill.totalWorldMapUiSlot > 8)
						{
							playSnd(SND_MENU_OK);
							xModelSkill.selectWorldMapUiSlot = 8;
						}
					}
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xOrder.xTouchOrderIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DELIVERY] == TRUE)
						{
							
						}
						else
						{
							if(xLock.isLock[LOCK_TYPE_ORDER] == TRUE)
							{
								setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_ORDER]);
							}
							else
							{
								carStorageFreeLoad(TRUE);
								xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
								xCar.selectTabS = 0;
								setOrderList();
								xOrder.totalNumListData = 0;
								xOrder.isNetLoad = FALSE;
								addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
							}
						}
					}
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapInShopPerIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PREFERENCE] == TRUE)
						{
							
						}
						else
						{
							if(xInShopPer.isSellTime == FALSE)
								xInShopPer.isSellTime = TRUE;
							else
								xInShopPer.isSellTime = FALSE;
						}
						
						
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
								case TUTO_19_INSHOPPERSELECT:
									xQuestTuto.isTutoClean = TRUE;
									break;
							}
						}
					}
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xMail.xTouchMenuicon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_POSTBOX] == TRUE)
						{
							
						}
						else
							setStateMail();
					}
					else if(xSwitchWorldMapUi_Up.state != SWITCH_STATE_OFF && xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapTired) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_CANDY] == TRUE)
						{
							
						}
						else
						{
							if(xLock.isLock[LOCK_TYPE_CANDY] == TRUE)
							{
								setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_CANDY]);
							}
							else
							{
								initMiniGame();
							}
						}
					}
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapFriendIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS] == TRUE)
						{
							
						}
						else
							setStateFriendList();
					}
                    
                    
//                    else if(xHotDeal.isOpen == true && xWorldMap.isFriendMap == false &&  xWorldMap.isExternal == FALSE && touchCheck(&xHotDeal.xTouchUi) == TRUE)
//                    {
//                        
//                         if(xHotDeal.isReset == true || xHotDeal.remainTime > 0)
//                         {
//                             playSnd(SND_MENU_OK);
//                             setHotDeal();
//                         }
//                    }
                    else if(xMileageShop.isOpen == true && xWorldMap.isFriendMap == false &&  xWorldMap.isExternal == FALSE && touchCheck(&xMileageUi.xTouchMenu) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        setStateMileageShop();
                    }
					else if(xWorldMap.isFriendMap ==false && xWorldMap.isExternal==FALSE && touchCheck(&xLuluPang.xTouchStart)==TRUE&&(xSwitchWorldMapUi.state == SWITCH_STATE_OFF ||xSwitchWorldMapUi.state == SWITCH_STATE_OFFANY))
					{
						playSnd(SND_MENU_OK);
						xWorldMap.state=WORLDMAP_STATE_LULUPANG;
						xLuluPang.state=LULUPANG_LOBBY_STATE_MAIN;
						initLuluPangLobby();
						LuluPangLobbyFreeLoad(true);
						
						xLuluPang.state=LULUPANG_STATE_PLAY;
						
						initPang_Solo();
						loadPang_SoloImg();
						
					}
					else if(xWorldMap.isFriendMap ==false && xWorldMap.isExternal==FALSE && touchCheck(&xLuluPang.xTouchStart)==TRUE&&(xSwitchWorldMapUi.state == SWITCH_STATE_OFF ||xSwitchWorldMapUi.state == SWITCH_STATE_OFFANY))
					{
						playSnd(SND_MENU_OK);
						xWorldMap.state=WORLDMAP_STATE_LULUPANG;
						xLuluPang.state=LULUPANG_LOBBY_STATE_MAIN;
						initLuluPangLobby();
						LuluPangLobbyFreeLoad(true);
						
					}
                    
                    //온실
                    else if(xWorldMap.isFriendMap ==false && xWorldMap.isExternal==FALSE && touchCheck(&xTouchGreenHouse)==TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.state = WORLDMAP_STATE_GREENHOUSE_FP;
                        initGreenHouse_FP();
                        greenHouseFreeLoad_FP(true);
                    }

                    //물레
                    else if(xWorldMap.isFriendMap ==false && xWorldMap.isExternal==FALSE && touchCheck(&xTouchSpinningWheel)==TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.state = WORLDMAP_STATE_SPINNINGWHEEL_FP;
                        initSpinningWheel_FP();
                        spinningWheelFreeLoad_FP(true);
                    }

                    
                    else if(xAmulet.isNetLoad == true && xJewelQuest.isNetLoad == true && xWorldMap.isFriendMap == false &&  xWorldMap.isExternal == FALSE && touchCheck(&xJewelUi.xTouchUi) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        initJewelQuest();
                    }
                    
                    else if(xWorldMap.isExternal == FALSE && touchCheck(&xProfile.xTouchPhoto) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PROFILE] == TRUE)
                        {
                            
                        }
                        else
                        {
                            setQuest(22, 1, DONT);
                            //프로필 변경 UI 이미지 로드 KBY 2018.2.26
                            profilePhotoFreeLoad_FP(true);
                            //////////////////////////////////////////////////
                            xWorldMap.state = WORLDMAP_STATE_PROFILE;
                        }
                    }

                    
                    else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchPlayerInfoIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PROFILE] == TRUE)
						{
							
						}
						else
						{
						
							if(xWorldMapUi.isPlayerInfo == FALSE)
							{
								xWorldMapUi.isPlayerInfo = TRUE;
								xWorldMapUi.playInfoTime = xCalendar.nowTime;
							}
							else
								xWorldMapUi.isPlayerInfo = FALSE;
						}
					}
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchEventIcon) == TRUE)
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EVENT] == TRUE)
						{
							
						}
						else
						{
							if(xNoticeWorldMap.totalNum == 0)
							{
								setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
								sprintf(xPopup.strText, "진행중인 이벤트가\n없습니다.");
							}
							else
							{
								worldMapNoticeFreeLoad(TRUE);
								xWorldMap.state = WORLDMAP_STATE_NOTICE;
								xNoticeWorldMap.isOneDay = FALSE;
							}
						}
					}
                    else if(xWorldMap.isExternal == FALSE && touchCheck(&xWorldMap.xTouchAccessBonusShow) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        setAccessBonusShow();
                    }
					else if(xHelpInfo.state == HELPINFO_STATE_PLAY && touchCheck(&xHelpInfo.xTouchInfoBar) == TRUE)
					{
						playSnd(SND_MENU_OK);
						carStorageFreeLoad(TRUE);
						xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
						xCar.selectTabS = 0;
						setOrderList();
						xOrder.totalNumListData = 0;
						xOrder.isNetLoad = FALSE;
						addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
						
					}
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xTouchWorldMapMainMenuIcon) == TRUE)
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] == TRUE)
						{
							
						}
						else
						{
							playSnd(SND_MENU_OK);
							switch(xSwitchWorldMapUi.state)
							{
							case SWITCH_STATE_ON:
							case SWITCH_STATE_ONANY:
								xSwitchWorldMapUi.state = SWITCH_STATE_OFFANY;
								xSwitchWorldMapUi_Up.state = SWITCH_STATE_OFFANY;
								break;
							case SWITCH_STATE_OFF:
							case SWITCH_STATE_OFFANY:
								xSwitchWorldMapUi.state = SWITCH_STATE_ONANY;
								xSwitchWorldMapUi_Up.state = SWITCH_STATE_ONANY;
								break;
							}
						}
					}
                    
                    else if(xWorldMap.isFriendMap == false && touchCheckS(&xTouchRocket) == TRUE)
                    {
                        //LJW 로켓 터치 추가
                        xWorldMap.state	= WORLDMAP_STATE_SELL;
                        setSellSelectItemSlot();
                        
                        if(type == INTERIOR_TYPE_HANGER)
                        {
                            if(xQuestTuto.state == QUEST_TUTO_KEY)
                            {
                                switch(xQuestTuto.nowNum)
                                {
                                    case TUTO_1_SELLTABLETOUCH:
                                    case TUTO_2_SELLTABLETOUCH:
                                        xQuestTuto.isTutoClean = TRUE;
                                        break;
                                }
                            }
                        }
                    }

					else if(xWorldMap.isExternal == FALSE && touchCheck(&xSwitchWorldMapUi.xTouch[0]) && (xSwitchWorldMapUi.state == SWITCH_STATE_ON ||xSwitchWorldMapUi.state == SWITCH_STATE_ONANY))
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_OPTION] == TRUE)
						{
							
						}
						else
							setStateOption();
					}
                    ///////////////////////////////////
                    //메뉴 우편함부분 터치 처리 KBY 2018.2.23
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xSwitchWorldMapUi.xTouch[1]) && (xSwitchWorldMapUi.state == SWITCH_STATE_ON ||xSwitchWorldMapUi.state == SWITCH_STATE_ONANY))
					{
                        playSnd(SND_MENU_OK);
                        setStateMail();
//						playSnd(SND_MENU_OK);
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDIT] == TRUE)
//						{
//							
//						}
//						else
//						{
//							xWorldMap.state = WORLDMAP_STATE_INTERIOR;
//							xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
//							xInterior.xBuildSlot.codeTeam[0] = 0;
//							xInterior.buildMode = 0;
//							
//							//최종완료에서만 처리 여기서 넷처리안함
//							checkBuildMapData();
//						}
					}
                    
                    //상점 버튼 처리 KBY 2018.2.23
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xSwitchWorldMapUi.xTouch[2]) && (xSwitchWorldMapUi.state == SWITCH_STATE_ON ||xSwitchWorldMapUi.state == SWITCH_STATE_ONANY))
					{
						playSnd(SND_MENU_OK);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE] == TRUE)
						{
							
						}
						else
						{
//							setBuildCheck();
//							setInteriorTabChange();
//							interiorShopFreeLoad(TRUE);
//							xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
                           
                            initShop_FP();
                            shopFreeload_FP(true);
                            xWorldMap.state = WORLDMAP_STATE_SHOP_FP;
//							if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//							{
//								switch(xQuestTuto.nowNum)
//								{
//									case TUTO_6_INTERIOR_MENUTOUCH0:
//									case TUTO_6_INTERIOR_TABTOUCH:
//									case TUTO_8_INTERIOR_TABTOUCH:
//									case TUTO_8_INTERIOR_OK:
//										if(xInterior.selectTabB == 1 && xInterior.selectTabS == 0)		//바닥오브젝트
//										{
//											int slotNum;
//											slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
//											if(slotNum != DONT)
//												xDragScrollInteriorS.selectNum = slotNum/8;
//										}
//										break;
//									case TUTO_9_INTERIOR_TABTOUCH:
//										if(xInterior.selectTabB == 0 && xInterior.selectTabS == 0)	//옷걸이
//										{
//											int slotNum;
//											slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
//											if(slotNum != DONT)
//												xDragScrollInteriorS.selectNum = slotNum/8;
//										}
//										break;
//									case TUTO_26_INTERIOR_MENUTOUCH0:
//									case TUTO_26_INTERIOR_TABTOUCH0:
//										if(xInterior.selectTabB == 1 && xInterior.selectTabS == 3)	//바닥지
//										{
//											int slotNum;
//											slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
//											if(slotNum != DONT)
//												xDragScrollInteriorS.selectNum = slotNum/8;
//										}
//										break;
//									case TUTO_26_INTERIOR_MENUTOUCH1:
//									case TUTO_26_INTERIOR_TABTOUCH1:
//										if(xInterior.selectTabB == 1 && xInterior.selectTabS == 4)	//벽지
//										{
//											int slotNum;
//											slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[1]);
//											if(slotNum != DONT)
//												xDragScrollInteriorS.selectNum = slotNum/8;
//										}
//										break;
//									case TUTO_30_INTERIOR_TABTOUCH:
//										if(xInterior.selectTabB == 0 && xInterior.selectTabS == 3)	//쇼윈도
//										{
//											int slotNum;
//											slotNum = linkInteriorShop(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]);
//											if(slotNum != DONT)
//												xDragScrollInteriorS.selectNum = slotNum/8;
//										}
//										break;
//								}
//							}
						}
					}
                    
                    //편집 KBY 2018.2.23
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xSwitchWorldMapUi.xTouch[3]) && (xSwitchWorldMapUi.state == SWITCH_STATE_ON ||xSwitchWorldMapUi.state == SWITCH_STATE_ONANY))
					{
                        playSnd(SND_MENU_OK);
                        if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDIT] == TRUE)
                        {
                            
                        }
                        else
                        {
                            //인테리어 편집 UI 이미지 로드 KBY 2018.2.26
                            interiorbuildFreeLoad_FP(true);
                            xWorldMap.state = WORLDMAP_STATE_INTERIOR;
                            xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
                            xInterior.xBuildSlot.codeTeam[0] = 0;
                            xInterior.buildMode = 0;
                            
                            //최종완료에서만 처리 여기서 넷처리안함
                            checkBuildMapData();
                        }

//						playSnd(SND_MENU_OK);
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STAFF] == TRUE)
//						{
//						}
//						else
//						{
//							//스태프꾸미기
//							setStateStaff(0);
//							if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//							{
//								switch(xQuestTuto.nowNum)
//								{
//									case TUTO_14_STAFF_MENUTOUCH:
//										setStateStaff(STAFF_SLOT_SHOPASSISTANT1_1F);
//										break;
//								}
//							}
//						}						
					}
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xSwitchWorldMapUi.xTouch[4]) && (xSwitchWorldMapUi.state == SWITCH_STATE_ON ||xSwitchWorldMapUi.state == SWITCH_STATE_ONANY))
					{
//						playSnd(SND_MENU_OK);
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MODELMENU] == TRUE)
//						{
//							
//						}
//						else
//						{
//							
//							if(xLock.isLock[LOCK_TYPE_MODEL] == TRUE)
//							{
//								setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_MODEL]);
//							}
//							else
//							{
//								setStateModel();
//							}
//						}
					}
                    ////////////////////////////////////////////////////
                    //옷장 버튼 처리 KBY
					else if(xWorldMap.isExternal == FALSE && touchCheck(&xSwitchWorldMapUi.xTouch[5]) && (xSwitchWorldMapUi.state == SWITCH_STATE_ON ||xSwitchWorldMapUi.state == SWITCH_STATE_ONANY))
					{
//						playSnd(SND_MENU_OK);
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_COLLECTION] == TRUE)
//						{
//							
//						}
//						else
//						{
//							setStateCollection();
//						}
                        playSnd(SND_MENU_OK);
                        xFitting_FP.isTouchLeftArrow=false;
                        xFitting_FP.isTouchRightArrow=false;
                        xFitting_FP.isTouchClr=false;
                        xWorldMap.state = WORLDMAP_STATE_FITTING_FP;
                        initFitting_FP();
                        fittingFreeLoad_FP(true);
					}
                    ////////////////////////////////////////////////////
					//LJW 월드맵 패션쇼 막기
//					else if(touchCheckS(&xTouchWorldMapFashionShow) == TRUE)
//					{
//						playSnd(SND_MENU_OK);
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FASHIONSHOW] == TRUE)
//						{
//                            
//						}
//						else
//							setStateFashion();
//					}
                    else if(xSwitchWorldMapUi.state == SWITCH_STATE_OFF && touchCheck(&xHelpList.xTouchUi) == TRUE)
                    {
                        playSnd(SND_MENU_OK);
                        setHelplist();
                    }
                    
                    else if(touchCheck(&xWorldMapUi.xTouchMyShopRefresh))
                    {
                        if(xWorldMap.myShopRefreshCnt <= 0)
                        {
                            setMyShopRefresh();
                        }
                    }
                    //LJW 월드맵 라이벌샵 막기
//                    else if(touchCheckS(&xRival.xTouchUi) == TRUE || touchCheck(&xRival.xTouchUi2) == true)
//                    {
//                        if(xRival.isNetLoad == false)
//                        {
//                            playSnd(SND_MENU_OK);
//                            
//                            if(xSaveTemp.lv.oriData < xRival.openLv)
//                            {
//                                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
//                                sprintf(xPopup.strText, "Lv.%d 이후 이용가능",xRival.openLv);
//                            }
//                            else
//                            {
//                                switch(xRival.state)
//                                {
//                                case RIVAL_STATE_WAIT:
//                                    xRivalInfo.state = RIVALINFO_STATE_PLAY;
//                                    setRivalWorldMap();
//                                    break;
//                                case RIVAL_STATE_PLAY:
//                                    xRivalInfo.state = RIVALINFO_STATE_PLAY;
//                                    setRivalInfo();
//                                    break;
//                                case RIVAL_STATE_SUCCESS:
//                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RIVALCOMPLETE, TRUE);
//                                    xRivalInfo.state = RIVALINFO_STATE_SUCCESSANY;
//                                    xRivalInfo.resultAnyCnt = 0;
//                                    setRivalInfo();
//                                    break;
//                                case RIVAL_STATE_FAIL:
//                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RIVALSTOP, TRUE);
//                                    xRivalInfo.state = RIVALINFO_STATE_FAILANY;
//                                    xRivalInfo.resultAnyCnt = 0;
//                                    setRivalInfo();
//                                    break;
//                                }
//                            }
//                        }
//                    }
					//LJW 월드맵 아이템샵 막기
//					else if(touchCheckS(&xTouchWorldMapItemShop) == TRUE)
//					{
//						playSnd(SND_MENU_OK);
//						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_GOLDCASH] == TRUE)
//						{
//                        
//						}
//						else
//							setShop(SHOPTAB_TYPE_MONEY);
//					}
					/*
					else if(touchCheckS(&xTouchWorldMapKakao) == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.state = WORLDMAP_STATE_KAKAO;
						xKakao.anyCnt = 0;
					}
					*/
					//팡 로비
					else if(touchCheckS(&xTouchWorldMapItemShop) == TRUE)
					{
						playSnd(SND_MENU_OK);
						xWorldMap.state=WORLDMAP_STATE_LULUPANG;
						xLuluPang.state=LULUPANG_LOBBY_STATE_MAIN;
						initLuluPangLobby();
						LuluPangLobbyFreeLoad(true);
					}
					else if(isCarPark == TRUE)
					{
						//레벨제한
						//배송중
						//대기중
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PARKING] == TRUE)
						{
							
						}
						else
						{
							if(xSaveTemp.lv.oriData < xCarPark[carParkNum].lv)
							{
								
							}
							else if(xCarPark[carParkNum].carNum != DONT)
							{
								
								if(xLock.isLock[LOCK_TYPE_ORDER] == TRUE)
								{
									setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_ORDER]);
								}
								else
								{
									carStorageFreeLoad(TRUE);
									xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
									xCar.selectTabS = 0;
									setOrderList();
									xCar.selectCarPark = carParkNum;
									xOrder.totalNumListData = 0;
									xOrder.isNetLoad = FALSE;
									addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
								}
							}
							else
							{
								if(xLock.isLock[LOCK_TYPE_ORDER] == TRUE)
								{
									setPopup(POPUP_LOCK_MAINQUEST, playState, playState, 0, xLock.mainQuestNum[LOCK_TYPE_ORDER]);
								}
								else
								{
									//차량변경창
									carStorageFreeLoad(TRUE);
									xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
									
									xCar.selectCarPark = carParkNum;
									xCar.selectTabS = 1;
									setCarStorage(xCar.selectTabS);
									
									if(xCar.toalSlot == 0)
									{
										xCar.selectTabS = 2;
										setCarStorage(xCar.selectTabS);
									}
									xOrder.totalNumListData = 0;
									xOrder.isNetLoad = FALSE;
									addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
								}
							}
						}
					}
					else if(selectEventBox(xMap.nowFloor,DONT) != DONT)
					{
					
					}
					else
					{

						if(xWorldMap.isExternal == FALSE)
						{
							setSelectTileKeyEvent(MAP_TYPE_OBJ,xMap.nowFloor);

							//오브젝트 찾음
							if(xSelectTileOne.state == SELECTTILE_STATE_PLAY )
							{
								setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);	//xMap.rever,xMap.type,xMap.listNum 구하기
								xSelectTileOne.state = SELECTTILE_STATE_DONT;
//LJW 옷걸이 진열대 터치 막기
//								switch(xMap.type)
//								{
//								case INTERIOR_TYPE_HANGER:		//옷걸이
//								case INTERIOR_TYPE_ACCESSORY:	//진열대
//									if(xMap.type == INTERIOR_TYPE_HANGER && xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP2] == TRUE)
//									{
//										
//									}
//									else if(xMap.type == INTERIOR_TYPE_ACCESSORY && xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP1] == TRUE)
//									{
//										
//									}
//									else
//									{
//										
//										
//										xSell.selectMapX = xSelectTileOne.tileNumX;
//										xSell.selectMapY = xSelectTileOne.tileNumY;
//										xSell.selectSellTable = getSellTable(xSell.selectMapX,xSell.selectMapY,xMap.nowFloor);	//위치에 의한 판매대번호뽑기
//										
//										if(xSell.selectSellTable != DONT)
//										{
//											xWorldMap.state	= WORLDMAP_STATE_SELL;
//											setSellSelectItemSlot();
//											for(int k=0;k<9;k++)
//												xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[k].waitSlot = DONT;
//
//											xSell.selectSlot = DONT;
//											if(xQuestTuto.state == QUEST_TUTO_KEY)
//											{
//												switch(xQuestTuto.nowNum)
//												{
//													case TUTO_1_SELLTABLETOUCH:
//													case TUTO_2_SELLTABLETOUCH:
//														xQuestTuto.isTutoClean = TRUE;
//														break;
//												}
//											}
//										}
//									}
//									break;
//								default:
//									xSelectTileOne.state = SELECTTILE_STATE_DONT;
//									break;
//								}
							}
							
							if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
							{
								setSelectTileKeyEvent(MAP_TYPE_WALL1,xMap.nowFloor);
								
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MANNEQUIN] == TRUE)
								{
									xSelectTileOne.state = SELECTTILE_STATE_DONT;
								}
								
								if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
								{
									setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);	//xMap.rever,xMap.type,xMap.listNum 구하기
									switch(xMap.type)
									{
										case INTERIOR_TYPE_SHOWWINDOW:	//쇼윈도
											xFitting.selectShowWindowNum = getShowWindow(xSelectTileOne.tileNumX, xSelectTileOne.tileNumY,xMap.nowFloor);
											if(xFitting.selectShowWindowNum != DONT)
											{
												if(xQuestTuto.state == QUEST_TUTO_KEY)
												{
													switch(xQuestTuto.nowNum)
													{
													case TUTO_11_SHOWWINDOWSELECT:
													case TUTO_12_SHOWWINDOWSELECT:
														xQuestTuto.isTutoClean = TRUE;
														break;
													}
												}

												xWorldMap.state	= WORLDMAP_STATE_FITTING;
												xFitting.isInOutMenu = FALSE;
												for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
												{
													xFitting.xF[0].code[ff] = DONT;
													xFitting.xF[1].code[ff] = DONT;
												}
												
												xFitting.gender = xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].gender;
												memcpy(&xFitting.xF[xFitting.gender],&xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF,sizeof(xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF));
												
												setFittingTabChange();
												
												
												if(xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].isFitting == FALSE)
												{
													if(xFitting.sellTableItemNum[0] == 0 && xFitting.sellTableItemNum[1] > 0)
													{
														xFitting.gender = 1;
														setFittingTabChange();
													}
												}
																								
												for(int tab=0;tab<7;tab++)
												{
													if(xFitting.totalSlot[tab] > 0)
													{
														xFitting.selectTabB = tab;
														break;
													}
												}
											}
											break;
										default:
											xSelectTileOne.state = SELECTTILE_STATE_DONT;
											break;
									}
								}
							}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
							//LJW 제작기 터치시 의상제작 상태 변경 기존 카운터는 제거
							//LJW 전송기 터치시 의상전송 상태 변경
							//제작기 터치시 UI출력 처리하는 곳
							if(xSelectTileOne.state==SELECTTILE_STATE_DONT)
							{
								setSelectTileKeyEvent(MAP_TYPE_OBJ, xMap.nowFloor);
								if(xSelectTileOne.state==SELECTTILE_STATE_PLAY)
								{
									setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);
									switch (xMap.type)
									{
										case INTERIOR_TYPE_OBJ:
											if(xMap.abxMapData/1000 == 6)
												setStateProductionMenu();
											else
												xSelectTileOne.state=SELECTTILE_STATE_DONT;
											break;
										case INTERIOR_TYPE_ACCESSORY:
											startSendMachine_FP();
//											if(xMap.abxMapData == 3032)
//												startSendMachine_FP();
//											else
//												xSelectTileOne.state=SELECTTILE_STATE_DONT;
											break;

										default:
											xSelectTileOne.state=SELECTTILE_STATE_DONT;
											break;
									}
								}
							}

							if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
                            {
                                setSelectTileKeyEvent(MAP_TYPE_FLOORTILE0, xMap.nowFloor);
                                if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
                                {
                                    setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);
                                    switch (xMap.type)
                                    {
                                        case INTERIOR_TYPE_FLOORTILE:
                                            xShopAssistant[xMap.nowFloor][0].state = SHOPASSISTANT_STATE_WAIT;
                                            xShopAssistant[xMap.nowFloor][0].makeX = xSelectTileOne.tileNumX-xMap.shopPointX;
                                            xShopAssistant[xMap.nowFloor][0].makeY = xSelectTileOne.tileNumY-xMap.shopPointY;
											
											xMyCharacter.makeX = xSelectTileOne.tileNumX-xMap.shopPointX;
											xMyCharacter.makeY = xSelectTileOne.tileNumY-xMap.shopPointY;
                                            break;
                                        default:
                                            xSelectTileOne.state = SELECTTILE_STATE_DONT;
                                            break;
                                    }
                                }
                                log("KBY_POS (%d, %d)", xShopAssistant[xMap.nowFloor][0].makeX, xShopAssistant[xMap.nowFloor][0].makeY);
                            }
//							if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
//							{
//								setSelectTileKeyEvent(MAP_TYPE_PAYMENTASSISTANT,xMap.nowFloor);
//
//								if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
//								{
//									int selectStaffSlot = DONT;
//									for(int s=0;s<xStaff.totalStaffSlot;s++)
//									{
//										switch(xMap.nowFloor)
//										{
//										case 0:
//											if(xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_1F)
//												selectStaffSlot = s;
//											break;
//										case 1:
//											if(xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_2F)
//												selectStaffSlot = s;
//											break;
//										case 2:
//											if(xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_3F)
//												selectStaffSlot = s;
//											break;
//										}
//										if(selectStaffSlot != DONT)
//											break;
//										
//										
//									}
//									if(selectStaffSlot != DONT)
//									{
//										setStateProductionMenu();
//									}
//								}
//							}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            //캔디제작기
                                                        //모델 홍보 이벤트 처리
							if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
							{
								setSelectTileKeyEvent(MAP_TYPE_MODELNPC,xMap.nowFloor);
								
								if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MODEL] == TRUE)
								{
									xSelectTileOne.state = SELECTTILE_STATE_DONT;
								}
								
								if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
								{
									xModel.selectMainSlot = xModelNpc[xSelectTileOne.npcCode].mainSlotNum;

									int endTimeTemp = xModelMainSlot[xModel.selectMainSlot].endTime;
									
									
									if(xModelMainSlot[xModel.selectMainSlot].state == MODELMAINSLOT_STATE_PLAY
									   && endTimeTemp-xCalendar.nowTime > 0)
									   {
										   xWorldMap.state = WORLDMAP_STATE_MODELMAINGIFTINFO;
										   xCollection.selectSkill = DONT;
									   }
									   else
										   xSelectTileOne.state = SELECTTILE_STATE_DONT;
								}
							}
                            //여기까지
							if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
							{
								setSelectTileKeyEvent(MAP_TYPE_SHOPNPC,xMap.nowFloor);
								if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
								{
									switch(ranDom(0,2))
									{
										case 0:	playSnd(SND_NPC_ACTION0);	break;
										case 1:	playSnd(SND_NPC_ACTION1);	break;
										case 2:	playSnd(SND_NPC_ACTION2);	break;
									}
									
									if(xShopNpc[xSelectTileOne.npcCode].state != SHOPNPC_STATE_DONT && xShopNpc[xSelectTileOne.npcCode].state != SHOPNPC_STATE_ETC)
									{
										
										if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
										{
											if(xShopNpc[xSelectTileOne.npcCode].genDer == 0)
											{
												switch(ranDom(0,2))
												{
													case 0:
														setSpeak(&xShopNpc[xSelectTileOne.npcCode].xSpeak, "나한테 맞는 컬러가 뭐가 있을까~", SPEAKFRAMEMAX);
														break;
													case 1:
														setSpeak(&xShopNpc[xSelectTileOne.npcCode].xSpeak, "여기가 몇 번째 둘러보는 샵이지?", SPEAKFRAMEMAX);
														break;
													case 2:
														setSpeak(&xShopNpc[xSelectTileOne.npcCode].xSpeak, "샵이 깔끔하네", SPEAKFRAMEMAX);
														break;
												}
											}
											else
											{
												switch(ranDom(0,2))
												{
													case 0:
														setSpeak(&xShopNpc[xSelectTileOne.npcCode].xSpeak, "옷 고르는 게 제일 어려워", SPEAKFRAMEMAX);
														break;
													case 1:
														setSpeak(&xShopNpc[xSelectTileOne.npcCode].xSpeak, "제발 나한테 와서 옷 추천하지 마요", SPEAKFRAMEMAX);
														break;
													case 2:
														setSpeak(&xShopNpc[xSelectTileOne.npcCode].xSpeak, "여자친구한테 뭘 선물할까!", SPEAKFRAMEMAX);
														break;
												}
											}
										}
									}
									
									if(xShopNpc[xSelectTileOne.npcCode].state == SHOPNPC_STATE_MOVE)
									{
										xShopNpc[xSelectTileOne.npcCode].etcAct_BackUp = SHOPNPC_STATE_MOVE;
										if(xShopNpc[xSelectTileOne.npcCode].genDer == 0)
										{
											switch(ranDom(0, 1))
											{
												case 0:	xShopNpc[xSelectTileOne.npcCode].etcAct = NPC_ACT_TOUCH0_WOMAN;	break;
												case 1:	xShopNpc[xSelectTileOne.npcCode].etcAct = NPC_ACT_TOUCH1_WOMAN;	break;
											}
										}
										else
										{
											switch(ranDom(0, 1))
											{
												case 0:	xShopNpc[xSelectTileOne.npcCode].etcAct = NPC_ACT_TOUCH0_MAN;	break;
												case 1:	xShopNpc[xSelectTileOne.npcCode].etcAct = NPC_ACT_TOUCH1_MAN;	break;
											}
										}
										
										xShopNpc[xSelectTileOne.npcCode].state = SHOPNPC_STATE_ETC;
										xShopNpc[xSelectTileOne.npcCode].isActEnd = FALSE;
										xShopNpc[xSelectTileOne.npcCode].nowDelay = 0;
										xShopNpc[xSelectTileOne.npcCode].nowFrame = 0;
									}
									
								}
							}
							if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
							{
								setSelectTileKeyEvent(MAP_TYPE_MODELNPC,xMap.nowFloor);
								if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
								{
									switch(ranDom(0,2))
									{
										case 0:	playSnd(SND_NPC_ACTION0);	break;
										case 1:	playSnd(SND_NPC_ACTION1);	break;
										case 2:	playSnd(SND_NPC_ACTION2);	break;
									}
									
									
									if(xModelNpc[xSelectTileOne.npcCode].state != MODELNPC_STATE_DONT)
									{
										switch(ranDom(0,6))
										{
											case 0:
												setSpeak(&xModelNpc[xSelectTileOne.npcCode].xSpeak, "카테고리 별로 의상을 하나씩 배치해두면 손님들이 많이 올 거에요.", SPEAKFRAMEMAX);
												break;
											case 1:
												setSpeak(&xModelNpc[xSelectTileOne.npcCode].xSpeak, "비어있는 옷걸이나 진열대가 없어야 손님 방문이 많아질거에요.", SPEAKFRAMEMAX);
												break;
											case 2:
												setSpeak(&xModelNpc[xSelectTileOne.npcCode].xSpeak, "우리샵은트렌드를발생시키면손님들이엄청늘어날거같아요.", SPEAKFRAMEMAX);
												break;
											case 3:
												setSpeak(&xModelNpc[xSelectTileOne.npcCode].xSpeak, "명성도는 좋은 의상도 살 수 있고, 손님들의 방문도 늘려줘요.", SPEAKFRAMEMAX);
												break;
											case 4:
												setSpeak(&xModelNpc[xSelectTileOne.npcCode].xSpeak, "모델 업그레이드 수치가 높을 수록 패션쇼 점수가 높아져요.", SPEAKFRAMEMAX);
												break;
											case 5:
												setSpeak(&xModelNpc[xSelectTileOne.npcCode].xSpeak, "모델 등급이 높을 수록 레이어드 수치가 높아져요.", SPEAKFRAMEMAX);
												break;
											case 6:
												setSpeak(&xModelNpc[xSelectTileOne.npcCode].xSpeak, "모델 등급이 높을 수록 패션쇼 점수가 높아져요.", SPEAKFRAMEMAX);
												break;
										}
									}
								}
							}
							/*
							 if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
							 {
							 setSelectTileKeyEvent(MAP_TYPE_SHOPASSISTANT,xMap.nowFloor);
							 
							 if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
							 {
							 int selectStaffSlot = DONT;
							 for(int s=0;s<xStaff.totalStaffSlot;s++)
							 {
							 switch(xMap.nowFloor)
							 {
							 case 0:
							 if(xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_1F)
							 selectStaffSlot = s;
							 break;
							 case 1:
							 if(xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_2F)
							 selectStaffSlot = s;
							 break;
							 case 2:
							 if(xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_3F)
							 selectStaffSlot = s;
							 break;
							 }
							 if(selectStaffSlot != DONT)
							 break;
							 }
							 if(selectStaffSlot != DONT)
							 {
							 if(xTutoInfo.limit[TUTO_LIMIT_STAFF] == TRUE)
							 {
							 setPopup(POPUP_TUTO_LIMIT, playState, playState, 0, DONT);
							 }
							 else
							 setStateStaff(selectStaffSlot);
							 }
							 }
							 }
							 */
						}
						
						
						
						if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
						{
							setSelectTileKeyEvent(MAP_TYPE_NPC,xMap.nowFloor);
							
							if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
							{
								switch(ranDom(0,2))
								{
								case 0:
									playSnd(SND_NPC_ACTION0);
									xWorldMapNpc[xSelectTileOne.npcCode].state = WORLDMAPNPC_STATE_CROSSARMS;
									break;
								case 1:
									playSnd(SND_NPC_ACTION1);
									xWorldMapNpc[xSelectTileOne.npcCode].state = WORLDMAPNPC_STATE_WAVINGHAND;
									break;
								case 2:
									playSnd(SND_NPC_ACTION2);
									xWorldMapNpc[xSelectTileOne.npcCode].state = WORLDMAPNPC_STATE_SMILE;
									break;
								}
								
								xWorldMapNpc[xSelectTileOne.npcCode].isActEnd = FALSE;
								xWorldMapNpc[xSelectTileOne.npcCode].nowDelay = 0;
								xWorldMapNpc[xSelectTileOne.npcCode].nowFrame = 0;
							}
						}
						
						
						if(xSelectTileOne.state == SELECTTILE_STATE_DONT)
						{
							checkExternMove();
						}
					}
				}
				xInterior.buildModeTime64 = DONT;
			}
			break;
		}
		break;	
	}
}

int selectEventBox(int floor,int eventType)
{
	int resultNum = DONT;
	
	int code;
	int slot;
	int type;
	int list;
	
	int bonusGold;
	int bonusExp;
				
	for(int i=xEventBox[floor].totalNum-1;i>=0;i--)
	{
		if(touchCheckS(&xEventBox[floor].xTouch[i]) == TRUE)
		{
			switch(xEventBox[floor].type[i])
			{
			case EVENTBOX_TYPE_CARPARK:
			case EVENTBOX_TYPE_MAIL:
			case EVENTBOX_TYPE_SONG:
				break;
			default:
				if(xWorldMap.isExternal == TRUE)
					return resultNum;
				break;
			}
						
			switch(eventType)
			{
			case DONT:
				break;
			default:
				if(xEventBox[floor].type[i] != eventType)
					continue;
				break;
			}
						
			switch(xEventBox[floor].type[i])
			{
			case EVENTBOX_TYPE_PRODUCTION:
				setStateProductionMenu();
				break;
			case EVENTBOX_TYPE_CHAIREVENT:
					
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_8_INTERIOR_NPCTOUCH:
						xQuestTuto.isTutoClean = TRUE;
						break;
					}
				}
					
				code = xEventBox[floor].code[i];
					
				switch(xShopNpc[code].subAct)
				{
				case NPC_ACT_CHAIR_BOOK:
					setQuest(68, 1, DONT);
					break;
				case NPC_ACT_CHAIR_COFFEE:
					setQuest(63, 1, DONT);
					break;
				case NPC_ACT_CHAIR_IPAD:
					setQuest(64, 1, DONT);
					break;
				case NPC_ACT_CHAIR_PHONE:
					setQuest(62, 1, DONT);
					break;
				}
					
					
				xShopNpc[code].isEventBox = TRUE;
				xShopNpc[code].eventBoxAnyCnt = 0;
					
				xShopNpc[code].state = SHOPNPC_STATE_CHAIR_ACT;
				xShopNpc[code].isActEnd = FALSE;
				xShopNpc[code].nowDelay = 0;
				xShopNpc[code].nowFrame = 0;
				xShopNpc[code].actCount = ranDom(2, 3);
				

				bonusGold = ranDom(10, 50);
					
				setMoney(bonusGold);
				setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD, bonusGold);
				setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
							ICON_TYPE_GOLD,bonusGold,
							ICON_TYPE_GOLD,0,
							ICON_TYPE_GOLD,0);
				break;
			case EVENTBOX_TYPE_FRIENDORDER:
				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_ORDER] == TRUE)
				{
				}
				else
				{
					if(xFriendData[xFriendMap.selectDataSlotNum].lv < xLock.lv[LOCK_TYPE_ORDER])
					{
						setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
						sprintf(xPopup.strText, "상대방의 레벨이 낮아\n주문요청을 하실수 없습니다.");
					}
					else if(xFriendData[xFriendMap.selectDataSlotNum].todayOrder == FALSE)
					{
						friendOrderItemFreeLoad(TRUE);
						xWorldMap.state = WORLDMAP_STATE_FRIENDORDERITEM;
						xCatalog.selectSlot = DONT;
						xNetGetFashion.userNum = xFriendData[xFriendMap.selectDataSlotNum].userNum;
						for(int k=0;k<CATALOGSLOTBMAX;k++)
							xCatalog.totalSlotFriendOrder[k] = 0;
						
						xCatalog.selectTabS = 1;
						
						xCatalog.totalSlotS = 0;
                        fashionNum = 0;
						netSend(CMD_GETFASHION, 0);
					}
					else
					{
						//주문장
						//friendOrderFreeLoad(TRUE);
						//xWorldMap.state = WORLDMAP_STATE_FRIENDORDER;
					}
				}
				break;
			case EVENTBOX_TYPE_CARPARK:
				{
                    int parkSlot = xEventBox[floor].code[i];
                    int orderSlotNum;
					
					
                    switch(xCarPark[parkSlot].state)
                    {
                        case CARPARK_STATE_ING:
                            orderSlotNum = getOrderSlotNum(xCarPark[parkSlot].orderKey);
                            //배달중아이콘
                            //배달중실패
                            if(orderSlotNum != DONT)
                            {
                                //배송정보인포
                                xWorldMap.state = WORLDMAP_STATE_CARORDERINFO;
                                xCar.selectCarPark = parkSlot;
                            }
                            break;
                    }
				}
				break;
            case EVENTBOX_TYPE_FORMER:
                {
                    int Index=xEventBox[floor].code[i];
                    int objindex=xFormer.xData[Index].index;
                    if(objindex<0)
                    {
                        objindex=objindex*(-1);
                    }
                    int objindex1=objindex/1000;
                    int objindex2=objindex%1000;
                    int giftNum=xObj.xObjData[objindex1][objindex2].specialCount;
                    int type=xObj.xObjData[objindex1][objindex2].specialType;
                    int giftTypeImgNum;
                    switch(type)
                    {
                        case 2:
                            giftTypeImgNum=ICON_TYPE_GOLD;
                            break;
                        case 3:
                            giftTypeImgNum=ICON_TYPE_LOOK;
                            break;
                        case 4:
                            giftTypeImgNum=ICON_TYPE_CANDY;
                            break;
                        default:
                            break;
                    }
                    
                    
                    switch(xFormer.xData[Index].state)
                    {
                        case 0:
                            xEventQueueNet.key[xEventQueueNet.totalNum] = xFormer.xData[Index].key;
                            xFormer.xData[Index].ingAnyCnt=0;
                            xFormer.xData[Index].endTime=xObj.xObjData[objindex1][objindex2].specialTime+xCalendar.nowTime;
                            xEventQueueNet.time[xEventQueueNet.totalNum]=xFormer.xData[Index].endTime;
                            if(xFormer.xData[Index].key>0)
                            {
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FORMERSTART, TRUE);
                            }
                            break;
                        
                        case 2:
                            setDropIcon(xTouch.xPos, xTouch.yPos, giftTypeImgNum, giftNum, giftTypeImgNum, giftNum, giftTypeImgNum, giftNum);
                            setBonus(xTouch.xPos, xTouch.yPos, giftTypeImgNum, giftNum);
                            xEventQueueNet.key[xEventQueueNet.totalNum] = xFormer.xData[Index].key;
                            xEventQueueNet.formerType[xEventQueueNet.totalNum] = type;
                            xEventQueueNet.result[xEventQueueNet.totalNum] = giftNum;
                            if(xFormer.xData[Index].key>0)
                            {
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FORMERTAKEWEALTH, TRUE);
                            }
                            break;
                        default:
                            break;
                    }
                }
                break;
			case EVENTBOX_TYPE_SELLTABLE:
				xSell.selectSellTable = xEventBox[floor].code[i];
				slot = xEventBox[floor].slot[i];
					
				code = xSellTableInfo[floor][xSell.selectSellTable].interiorCode;
				if(code < 0)
					code = -code;
				
				type = code/1000;
				list = code%1000;
														
				if(xSellTableInfo[floor][xSell.selectSellTable].sellOkTotal == 0)
				{
					if(type == INTERIOR_TYPE_HANGER && xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP2] == TRUE)
					{
						
					}
					else if(type == INTERIOR_TYPE_ACCESSORY && xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP1] == TRUE)
					{
						
					}
					else
					{
//LJW 옷걸이 진열대 이벤트박스 터치 막기
//						xWorldMap.state	= WORLDMAP_STATE_SELL;
//						setSellSelectItemSlot();
//						
//						if(type == INTERIOR_TYPE_HANGER)
//						{
//							if(xQuestTuto.state == QUEST_TUTO_KEY)
//							{
//								switch(xQuestTuto.nowNum)
//								{
//									case TUTO_1_SELLTABLETOUCH:
//									case TUTO_2_SELLTABLETOUCH:
//										xQuestTuto.isTutoClean = TRUE;
//										break;
//								}
//							}
//						}
					}
				}
				else
				{
					xSellTableInfo[floor][xSell.selectSellTable].eventBoxShowAntCnt = 0;
					
										
					int gold = 0;
					int exp = 0;
					int goldOri = 0;
					int expOri = 0;
						
					if(xSellTableInfo[floor][xSell.selectSellTable].xSlot[slot].code != DONT && xSellTableInfo[floor][xSell.selectSellTable].xSlot[slot].num == 0)
					{
						M_Boolean isTrend = FALSE;
						
						xTrend.bonus = 100;
						for(int tt=0;tt<TRENDMAX;tt++)
						{
							if(xTrend.isOpen[tt] == TRUE)
							{
								if(xTrend.itemCode[tt] == xSellTableInfo[floor][xSell.selectSellTable].xSlot[slot].code)
								{
									isTrend = TRUE;
									xTrend.bonus = xTrend.per[tt];
									if(xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER] > 0)
									{
										xTrend.bonus += xTrend.bonus*xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER]/100;
									}
									
								}
							}
						}
						
						//완료회수하기
						setMapData(xSellTableInfo[floor][xSell.selectSellTable].xSlot[slot].code);
						if(isTrend == TRUE)
						{
							xSellTableInfo[floor][xSell.selectSellTable].isTrendTouchAny0 = TRUE;
							xSellTableInfo[floor][xSell.selectSellTable].trendTouchAny0 = 0;
							xSellTableInfo[floor][xSell.selectSellTable].isTrendTouchAny1 = TRUE;
							xSellTableInfo[floor][xSell.selectSellTable].trendTouchAny1 = 0;
							
							setQuest(4, 1, DONT);
						}
						
						gold = (xFashionData[xMap.type][xMap.listNum].sellPrice.oriData * xSellTableInfo[floor][xSell.selectSellTable].xSlot[slot].maxNum)*xTrend.bonus/100;
						exp = xFashionData[xMap.type][xMap.listNum].exp.oriData * xSellTableInfo[floor][xSell.selectSellTable].xSlot[slot].maxNum;
						
						goldOri = gold;
						expOri = exp;
						
						
						if(xBuff.isOpen[BUFF_TYPE_SELLMONEY] == TRUE)
						{
							gold += goldOri*xBuff.bonusPer[BUFF_TYPE_SELLMONEY]/100;
							
						}
						
						if(xBuff.isOpen[BUFF_TYPE_SELLEXP] == TRUE)
						{
							exp += expOri*xBuff.bonusPer[BUFF_TYPE_SELLEXP]/100;							
						}
						
						
						if(floor == 0)
						{
							if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR1] > 0)
							{
								gold += goldOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR1]/100;
							}
							
							if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR1] > 0)
							{
								exp += expOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR1]/100;
							}
						}
						
						if(floor == 1)
						{
							if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR2] > 0)
							{
								gold += goldOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLMONEY_FLOOR2]/100;
							}
							
							if(xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR2] > 0)
							{
								exp += expOri*xModelSkill.bonusPer[MODELSKILL_TYPE_SELLEXP_FLOOR2]/100;
							}
						}
                        
                        if(xRival.buffExp > 0)
                            exp += expOri*xRival.buffExp/100;
						
						
                        exp += exp*xAmulet.buff[JEWELBUFF_TYPE_SELL_EXP]/100;
                        gold += gold*xAmulet.buff[JEWELBUFF_TYPE_SELL_GOLD]/100;
                        
                        
						
						setQuest(2, 1, xMap.type*1000+xMap.listNum);
						setQuest(37, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData, DONT);
						
						setQuest(85,gold,xMap.type);
						setQuest(88,1,xInShopPer.inShopPerTotal.oriData);
						setMoney(gold);
						setExp(exp);
												
						xSellTableInfo[floor][xSell.selectSellTable].xSlot[slot].code = DONT;
						
						
						
						setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_GOLD, gold);
						setBonus(xTouch.xPos, xTouch.yPos-26, ICON_TYPE_EXP, exp);

						setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
									ICON_TYPE_EXP,exp,
									ICON_TYPE_GOLD, gold,
									ICON_TYPE_MILEAGE,0);
                        
                        /////////////////////////
                        xEventQueueNet.EXP[xEventQueueNet.totalNum] = exp;
                        xEventQueueNet.GOLD[xEventQueueNet.totalNum] = gold;
                        xEventQueueNet.floor[xEventQueueNet.totalNum] = floor;
                        xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[floor][MAP_TYPE_OBJ][xSellTableInfo[floor][xSell.selectSellTable].x][xSellTableInfo[floor][xSell.selectSellTable].y];
                        xEventQueueNet.SLOT[xEventQueueNet.totalNum] = slot;
                        addEventQueueNet(0, 0, NETQUEUE_TYPE_SELLCOMPLETE, TRUE);
                        /////////////////////////
                        
                        //매출
                        setJewelQuest(12, gold,DONT);
                        setRivalQuest(0,gold);
                        if(isTrend == true)
                            setRivalQuest(6,1);  //유행의상판매
                    }

					/*
					if(xSellTableInfo[floor][xSell.selectSellTable].sellOkTotal == 1)
					{
						xSellTableInfo[floor][xSell.selectSellTable].isEventBox = TRUE;
						xSellTableInfo[floor][xSell.selectSellTable].eventBoxAnyCnt = 0;
					}
					 */
				}
				resetSellTableInfo(floor);
				break;
			case EVENTBOX_TYPE_SHOWWINDOW:
									
				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MANNEQUIN] == TRUE)
				{
					
				}
				else
				{
					xFitting.selectShowWindowNum = xEventBox[floor].code[i];
					if(xFitting.selectShowWindowNum != DONT)
					{
						if(xQuestTuto.state == QUEST_TUTO_KEY)
						{
							switch(xQuestTuto.nowNum)
							{
								case TUTO_11_SHOWWINDOWSELECT:
								case TUTO_12_SHOWWINDOWSELECT:
									xQuestTuto.isTutoClean = TRUE;
									break;
							}
						}
						

						xWorldMap.state	= WORLDMAP_STATE_FITTING;
						xFitting.isInOutMenu = FALSE;
						for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
						{
							xFitting.xF[0].code[ff] = DONT;
							xFitting.xF[1].code[ff] = DONT;
						}
						
						xFitting.gender = xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].gender;
						memcpy(&xFitting.xF[xFitting.gender],&xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF,sizeof(xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].xF));
						

						setFittingTabChange();
						
						if(xShowWindowInfo[xMap.nowFloor][xFitting.selectShowWindowNum].isFitting == FALSE)
						{
							if(xFitting.sellTableItemNum[0] == 0 && xFitting.sellTableItemNum[1] > 0)
							{
								xFitting.gender = 1;
								setFittingTabChange();
							}
						}
						
						for(int tab=0;tab<7;tab++)
						{
							if(xFitting.totalSlot[tab] > 0)
							{
								xFitting.selectTabB = tab;
								break;
							}
						}
						
					}
				}
				break;
			case EVENTBOX_TYPE_MAIL:
				//LJW 월드맵 우체통 막기
//				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_POSTBOX] == TRUE)
//				{
//					
//				}
//				else
//                {
//					setStateMail();
//                    
//                    
//                }
				break;
                //모델 홍보 전체 이벤트 박스
			case EVENTBOX_TYPE_MODELEVENT:
				xModel.selectMainSlot = xModelNpc[xEventBox[floor].code[i]].mainSlotNum;
				if(xModel.selectMainSlot == DONT)
					printf("월드맵모델메인슬롯값얻어오기실패\n");
				else
				{
					switch(xModelMainSlot[xModel.selectMainSlot].state)
					{
					case MODELMAINSLOT_STATE_WAIT:
						xModelNpc[xEventBox[floor].code[i]].eventBoxShowAntCnt = 0;
						//시작대기
						xModelMainSlot[xModel.selectMainSlot].ingAnyCnt = 0;
						xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
						xModelMainSlot[xModel.selectMainSlot].state = MODELMAINSLOT_STATE_PLAY;
						xModelMainSlot[xModel.selectMainSlot].endTime = xCalendar.nowTime+getModelGiftTime(xModelMainSlot[xModel.selectMainSlot].inventoryNum,0);
						////////////////////////////////////////////
						xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xModel.selectMainSlot;
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODELMAIN, FALSE);
						///////////////////////////////////////////
						break;
                    //모델 홍보 완료 보상 받는곳
					case MODELMAINSLOT_STATE_PLAY:
							
						int endTimeTemp = xModelMainSlot[xModel.selectMainSlot].endTime;
							
							
						if(endTimeTemp-xCalendar.nowTime <= 0)
						{
							xModelNpc[xEventBox[floor].code[i]].eventBoxShowAntCnt = 0;
							//성공
							xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
							int giftNum = getModelGiftNum(xModelMainSlot[xModel.selectMainSlot].inventoryNum,0);
							
							switch(xModelData[xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].code].giftType)
							{
							case MODEL_GIFTTYPE_GOLD:
								setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD, giftNum);
								setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
											ICON_TYPE_GOLD,giftNum,
											ICON_TYPE_GOLD,0,
											ICON_TYPE_GOLD,0);
								setMoney(giftNum);
								setQuest(78, giftNum, DONT);
								break;
							case MODEL_GIFTTYPE_LOOK:
								setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_LOOK, giftNum);
								setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
											ICON_TYPE_LOOK,giftNum,
											ICON_TYPE_LOOK,0,
											ICON_TYPE_LOOK,0);
								setCash(giftNum);
								break;
							case MODEL_GIFTTYPE_CANDY:
								setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_CANDY, giftNum);
								setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
											ICON_TYPE_CANDY,giftNum,
											ICON_TYPE_CANDY,0,
											ICON_TYPE_CANDY,0);
								setTired(giftNum);
								setQuest(98, giftNum, DONT);
								break;
							case MODEL_GIFTTYPE_EXP:
								setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_EXP, giftNum);
								setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
											ICON_TYPE_EXP,giftNum,
											ICON_TYPE_EXP,0,
											ICON_TYPE_EXP,0);
								setExp(giftNum);
								setQuest(79, giftNum, DONT);
								break;
							}
							setQuest(91, 1, DONT);
							
							xModelMainSlot[xModel.selectMainSlot].state = MODELMAINSLOT_STATE_WAIT;
							////////////////////////////////////////////
							xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xModel.selectMainSlot;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODELMAIN, FALSE);
							///////////////////////////////////////////
							////////////////////////////////////////////////////////////////////////
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
							////////////////////////////////////////////////////////////////////////
							setQuest(67,1,DONT);
						}
						else
						{
							xWorldMap.state = WORLDMAP_STATE_MODELMAINGIFTINFO;
							xCollection.selectSkill = DONT;
						}
						break;
					}
				}
				break;
                //보상 완료처리의 끝
			case EVENTBOX_TYPE_TRENDNPC:
				setQuest(66, 1, DONT);
				xShopNpc[xEventBox[floor].code[i]].isEventBox = TRUE;
				xShopNpc[xEventBox[floor].code[i]].eventBoxAnyCnt = 0;
				
				bonusGold = ranDom(10,50);
				setMoney(bonusGold);
				setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD, bonusGold);
				setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
							ICON_TYPE_GOLD,bonusGold,
							ICON_TYPE_GOLD,0,
							ICON_TYPE_GOLD,0);
				break;
			case EVENTBOX_TYPE_SONG:
				setShop(SHOPTAB_TYPE_MUSIC);
				break;
			case EVENTBOX_TYPE_PAYMENT:
				switch(xShopNpc[xEventBox[floor].code[i]].payMentType)
				{
				case 0:		//계산대
					setQuest(13, 1, DONT);
					if(xShopNpc[xEventBox[floor].code[i]].isBuyAct[NPC_BUYACT_FITTING] == TRUE)
					{
						bonusGold = ranDom(10,50);
						setMoney(bonusGold);
						setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
									ICON_TYPE_GOLD,bonusGold,
									ICON_TYPE_GOLD,0,
									ICON_TYPE_GOLD,0);
						setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD,bonusGold );
					}
					else
					{
						bonusGold = ranDom(10,50);
						setMoney(bonusGold);
						setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
									ICON_TYPE_GOLD,bonusGold,
									ICON_TYPE_GOLD,0,
									ICON_TYPE_GOLD,0);
						
						setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD, bonusGold);
					}
					break;
				case 1:		//피팅룸
					bonusGold = ranDom(10,50);
					setMoney(bonusGold);
					setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
								ICON_TYPE_GOLD,bonusGold,
								ICON_TYPE_GOLD,0,
								ICON_TYPE_GOLD,0);
					setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD,bonusGold );
							
						
					
						
					switch(xShopNpc[xEventBox[floor].code[i]].genDer)
					{
					case 0:
						setQuest(80, 1, DONT);
						break;
					case 1:
						setQuest(81, 1, DONT);
						break;
					}
					break;
				case 2:		//쇼윈도
					
					setQuest(77, 1, DONT);
					
						
					bonusGold = ranDom(10,50);
					setMoney(bonusGold);
					setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
								ICON_TYPE_GOLD,bonusGold,
								ICON_TYPE_GOLD,0,
								ICON_TYPE_GOLD,0);
					setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD,bonusGold );
						
						
						
						
						
					break;
				}
					
					
					xShopNpc[xEventBox[floor].code[i]].isSitEventBox = TRUE;
					xShopNpc[xEventBox[floor].code[i]].isEventBox = TRUE;
					xShopNpc[xEventBox[floor].code[i]].eventBoxAnyCnt = 0;
					
				
				
				break;
			case EVENTBOX_TYPE_WASTE:
			
				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HELP] == TRUE)
				{
				}
				else
				{
                    
                    
                    
                    
					if((xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100 <= 0)
					{
						setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
						sprintf(xPopup.strText, "오늘 사용가능한 Social포인트를\n모두 사용하셨습니다.");
					}
					else if(xFriendData[xFriendMap.selectDataSlotNum].socialCount <= 0)
					{
						setPopup(POPUP_SOCIALPOINT_3LIMIT, playState, playState, 0, DONT);
					}
					else
					{
						xWaste.state[floor][xEventBox[floor].code[i]] = WASTE_STATE_DONT;
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_27_HELP_HELP:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
						
						int money = 100;
						playSnd(SND_FRIEND_HELP);
						
						setMoney(money);
						setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_GOLD, money);
						
						setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
									ICON_TYPE_GOLD,money,
									ICON_TYPE_GOLD,0,
									DONT,0);
						
						xFriendData[xFriendMap.selectDataSlotNum].socialCount--;
						xSaveTemp.socialHelpCnt--;
						
						////////////////////////////////////////////////////////
						xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
						xEventQueueNet.floor[xEventQueueNet.totalNum] = floor;
						xEventQueueNet.key[xEventQueueNet.totalNum] = DONT;
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FRIENDSOCIAL, FALSE);
						/////////////////////////////////////////////////////////////////////////
						setFiveRocksCustom("친구샵","헬프","쓰레기헬프","NULL",1);
                        
                        setJewelQuest(13, 1,DONT);
					}
				}
				break;
			case EVENTBOX_TYPE_SELLTABLEFRIEND:
				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HELP] == TRUE)
				{
				}
				else
				{
					if((xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100 <= 0)
					{
						setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
						sprintf(xPopup.strText, "오늘 사용가능한 Social포인트를\n모두 사용하셨습니다.");
					}
					else if(xFriendData[xFriendMap.selectDataSlotNum].socialCount <= 0)
					{
						setPopup(POPUP_SOCIALPOINT_3LIMIT, playState, playState, 0, DONT);
					}
					else
					{
						
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_27_HELP_HELP:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
						
						playSnd(SND_FRIEND_HELP);
						xFriendData[xFriendMap.selectDataSlotNum].socialCount--;
						xSaveTemp.socialHelpCnt--;
						
						setMapData(xSellTableInfo[floor][xEventBox[floor].code[i]].interiorCode);
						int iconType = ICON_TYPE_FASHION_HANGER;
						switch(xMap.type)
						{
						case INTERIOR_TYPE_HANGER:
							iconType =ICON_TYPE_FASHION_HANGER;
							setMapData(xSaveTemp.socialItem[0]);
							++xSave.socialCntHanger;
							break;
						case INTERIOR_TYPE_ACCESSORY:
							iconType =ICON_TYPE_FASHION_ACCESSORY;
														
							if(xSaveTemp.socialItem[1] == DONT)
							{
								iconType =ICON_TYPE_FASHION_HANGER;
								setMapData(xSaveTemp.socialItem[0]);
								++xSave.socialCntHanger;
							}
							else
							{
								setMapData(xSaveTemp.socialItem[1]);
								++xSave.socialCntAccessory;
							}
							break;
						}
						gameSave(SAVE_SLOT_GAME);
						setQuest(90, 1, DONT);
                        setJewelQuest(13, 1,DONT);
						
						
						inputInventoryFashion((xMap.type*1000)+xMap.listNum, 1);
						////////////////////////////////////////////////////
						xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
						xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
						//패션수량추가
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
						//////////////////////////////////////////////////////
						
						
						setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
									iconType,0,
									DONT,0,
									DONT,0);
													
						xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[xSellTableInfo[floor][xEventBox[floor].code[i]].totalSocialSlot].friendDataSlotNum = getFriendSlot(xNetData.userNum);
						xSellTableInfo[floor][xEventBox[floor].code[i]].totalSocialSlot++;
						////////////////////////////////////////////////////////
						xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
						xEventQueueNet.floor[xEventQueueNet.totalNum] = floor;
						xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[floor][MAP_TYPE_OBJ][xSellTableInfo[floor][xEventBox[floor].code[i]].x][xSellTableInfo[floor][xEventBox[floor].code[i]].y];
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FRIENDSOCIAL, FALSE);
						/////////////////////////////////////////////////////////////////////////
						
						switch(xMap.type)
						{
						case INTERIOR_TYPE_HANGER:
							setFiveRocksCustom("친구샵","헬프","옷걸이헬프","NULL",1);
							break;
						case INTERIOR_TYPE_ACCESSORY:
							setFiveRocksCustom("친구샵","헬프","진열대헬프","NULL",1);
							break;
						}
					}
				}
				break;
                //쇼윈도의 친구꺼 캔디획득법
			case EVENTBOX_TYPE_SHOWWINDOWFRIEND:
				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HELP] == TRUE)
				{
				}
				else
				{
					if((xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100 <= 0)
					{
						setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
						sprintf(xPopup.strText, "오늘 사용가능한 Social포인트를\n모두 사용하셨습니다.");
					}
					else if(xFriendData[xFriendMap.selectDataSlotNum].socialCount <= 0)
					{
						setPopup(POPUP_SOCIALPOINT_3LIMIT, playState, playState, 0, DONT);
					}
					else
					{
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
								case TUTO_27_HELP_HELP:
									xQuestTuto.isTutoClean = TRUE;
									break;
							}
						}
						
						playSnd(SND_FRIEND_HELP);
						
						int money = 100;
						int exp = 10;
						int candy = 1;
						
						setMoney(money);
						setExp(exp);
						setTired(candy);
						setQuest(98, candy, DONT);
                        setJewelQuest(13, 1,DONT);

						setBonus(xTouch.xPos, xTouch.yPos-52, ICON_TYPE_GOLD, money);
						setBonus(xTouch.xPos, xTouch.yPos-26, ICON_TYPE_EXP, exp);
						setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_CANDY, candy);
												
						
						xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].isEventBox = TRUE;
						xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].eventBoxAnyCnt = 0;
						setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
									ICON_TYPE_GOLD,money,
									ICON_TYPE_EXP, exp,
									ICON_TYPE_CANDY,candy);
						
						xFriendData[xFriendMap.selectDataSlotNum].socialCount--;
						xSaveTemp.socialHelpCnt--;
						
						xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].totalSocialSlot].friendDataSlotNum = getFriendSlot(xNetData.userNum);
						xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].totalSocialSlot++;
						////////////////////////////////////////////////////////
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
						////////////////////////////////////////////////////////
						////////////////////////////////////////////////////////
						xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
						xEventQueueNet.floor[xEventQueueNet.totalNum] = floor;
						xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[floor][MAP_TYPE_WALL1][xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].x][xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].y];
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FRIENDSOCIAL, FALSE);
						/////////////////////////////////////////////////////////////////////////
						setFiveRocksCustom("친구샵","헬프","마네킹헬프","NULL",1);
					}
				}
				break;
			case EVENTBOX_TYPE_SELLTABLEUSER:
				if(xWorldMap.isFriendMap == FALSE)
				{
					setQuest(86, 1, DONT);
                    setRivalQuest(5,1);        //도움받기
                    setJewelQuest(13, 1,DONT);
                    
                    
					playSnd(SND_FRIEND_HELP);
					setMapData(xSellTableInfo[floor][xEventBox[floor].code[i]].interiorCode);
					int iconType = ICON_TYPE_FASHION_HANGER;
										
					switch(xMap.type)
					{
					case INTERIOR_TYPE_HANGER:
						
						iconType =ICON_TYPE_FASHION_HANGER;
						setMapData(xSaveTemp.socialItem[0]);
						++xSave.socialCntHanger;
						break;
					case INTERIOR_TYPE_ACCESSORY:
						iconType =ICON_TYPE_FASHION_ACCESSORY;
						
						if(xSaveTemp.socialItem[1] == DONT)
						{
							iconType =ICON_TYPE_FASHION_HANGER;
							setMapData(xSaveTemp.socialItem[0]);
							++xSave.socialCntHanger;
						}
						else
						{
							setMapData(xSaveTemp.socialItem[1]);
							++xSave.socialCntAccessory;
						}
						break;
					}
					gameSave(SAVE_SLOT_GAME);
					setQuest(90, 1, DONT);
                    setJewelQuest(13, 1,DONT);

					inputInventoryFashion((xMap.type*1000)+xMap.listNum, 1);
					////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
					xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					//패션수량추가
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					//////////////////////////////////////////////////////
										
					setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
								iconType,0,
								DONT,0,
								DONT,0);
					
					/////////////////////////////////////////////////////////////
					xEventQueueNet.key[xEventQueueNet.totalNum] = xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[0].cleanKey;
					xEventQueueNet.action[xEventQueueNet.totalNum] = xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[0].interiorKey;
					xEventQueueNet.floor[xEventQueueNet.totalNum] = floor;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_DELCLEAN, FALSE);
					///////////////////////////////////////////////////////////
											
					for(int k=0;k<xSellTableInfo[floor][xEventBox[floor].code[i]].totalSocialSlot-1;k++)
					{
						xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[k].cleanKey = xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[k+1].cleanKey;
						xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[k].interiorKey = xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[k+1].interiorKey;
						xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[k].friendDataSlotNum = xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[k+1].friendDataSlotNum;
					}
					xSellTableInfo[floor][xEventBox[floor].code[i]].totalSocialSlot--;
						
					xSellTableInfo[floor][xEventBox[floor].code[i]].eventBoxShowAntCnt = 0;
				}
				else
				{
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_PHOTO] == TRUE)
					{
					}
					else
					{
						if(xSellTableInfo[floor][xEventBox[floor].code[i]].totalSocialSlot == 1)
						{
							if(xFriendData[xSellTableInfo[floor][xEventBox[floor].code[i]].xSocialSlot[0].friendDataSlotNum].userNum != xNetData.userNum)
							{
								xWorldMap.isMiniProfile = TRUE;
								xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
								mailFreeLoad(TRUE);
								xMiniProfile.friendDataSlotNum = xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[0].friendDataSlotNum;
								/////////////////////////////////////////
								xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
							}
						}
						else
						{
							xWorldMap.isSocialProfile = TRUE;
							xSocialProfile.selectSellTableNum = xEventBox[floor].code[i];
						}
					}
				}
				break;
			case EVENTBOX_TYPE_SHOWWINDOWFAME:
					
				setQuest(65, 1, DONT);
					
				bonusGold = 0;
				bonusExp = 0;
					
					
				bonusGold = ranDom(10,50);
				setMoney(bonusGold);
				setBonus(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2, ICON_TYPE_GOLD, bonusGold);
				setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
							ICON_TYPE_GOLD,bonusGold,
							ICON_TYPE_GOLD,0,
							ICON_TYPE_GOLD,0);
					
				xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].isEventBox = TRUE;
				xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].eventBoxAnyCnt = 0;
				break;
			case EVENTBOX_TYPE_SHOWWINDOWUSER:
				if(xWorldMap.isFriendMap == FALSE)
				{
					setQuest(86, 1, DONT);
                    setRivalQuest(5,1);        //도움받기
                    setJewelQuest(13, 1,DONT);
                    
                    
					int candy = 1;
					setTired(candy);
					setQuest(98, candy, DONT);
					
					setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_CANDY, candy);
					
					
					xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].isEventBox = TRUE;
					xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].eventBoxAnyCnt = 0;
					setDropIcon(xEventBox[floor].xTouch[i].xPos+xEventBox[floor].xTouch[i].wPos/2, xEventBox[floor].xTouch[i].yPos+xEventBox[floor].xTouch[i].hPos/2,
								ICON_TYPE_CANDY,candy,
								DONT, 0,
								DONT,0);
					////////////////////////////////////////////////////////
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
					////////////////////////////////////////////////////////
					/////////////////////////////////////////////////////////////
					xEventQueueNet.key[xEventQueueNet.totalNum] = xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[0].cleanKey;
					xEventQueueNet.action[xEventQueueNet.totalNum] = xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[0].interiorKey;
					xEventQueueNet.floor[xEventQueueNet.totalNum] = floor;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_DELCLEAN, FALSE);
					///////////////////////////////////////////////////////////
						
					for(int k=0;k<xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].totalSocialSlot-1;k++)
					{
						xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[k].cleanKey = xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[k+1].cleanKey;
						xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[k].interiorKey = xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[k+1].interiorKey;
						xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[k].friendDataSlotNum = xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[k+1].friendDataSlotNum;
					}
					xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].totalSocialSlot--;
				}
				else
				{
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_PHOTO] == TRUE)
					{
					}
					else
					{
						if(xFriendData[xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[0].friendDataSlotNum].userNum != xNetData.userNum)
						{
							xWorldMap.isMiniProfile = TRUE;
							xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
							mailFreeLoad(TRUE);
							xMiniProfile.friendDataSlotNum = xShowWindowInfo[xMap.nowFloor][xEventBox[floor].code[i]].xSocialSlot[0].friendDataSlotNum;
							/////////////////////////////////////////
							xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
						}
					}
				}
				break;
			case EVENTBOX_TYPE_DONT:		//초기화를 그리기에서 하는데 연속 키가 들어왓을때 중복처리를 위해
				break;			
			}
			xEventBox[floor].type[i] = EVENTBOX_TYPE_DONT;
			resultNum = i;
			break;
		}
	}
	
	return resultNum;
}

void setSelectTileKeyEvent(int type,int floor)
{
	int i,j;
	int x;
	int y;
	int mapXpos;
	int mapYpos;
	int mapWpos;
	int mapHpos;
	int reCheckPlus = 0;
	bool isCheck = false;
	
	xSelectTileOne.state = SELECTTILE_STATE_DONT;
	
	
	
	
	while(true)
	{
		for (i = 0; i < xMap.totalTileX; i++)
		{
			for (j = 0; j < xMap.totalTileY; j++)
			{
				//충돌체크범위용
				mapXpos = xMap.pointX + (((j-(floor*5)) - (i-(floor*5))) * (TILEW / 2));
				
				if ((j + i + 1) % 2 == 1)
					mapYpos = xMap.pointY + ((((j-(floor*5)) + (i-(floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
				else
					mapYpos = xMap.pointY + ((((j-(floor*5)) + (i-(floor*5)) + 1) / 2) * TILEH);
				
				mapXpos -= ((getMapW() / 2)+reCheckPlus)*0.6f;
				mapYpos -= ((getMapH() / 4)+reCheckPlus)*0.6f;
				mapWpos = ((getMapW())+(reCheckPlus*2))*0.6f;
				mapHpos = ((getMapH() / 2)+(reCheckPlus*2))*0.6f;
				
				xTouchTile.xPos = mapXpos;
				xTouchTile.yPos = mapYpos;
				xTouchTile.wPos = mapWpos;
				xTouchTile.hPos = mapHpos;
							
				if(touchCheckS(&xTouchTile))
				{
					xMap.selectY = j;
					xMap.selectX = i;					
					isCheck = true;
					break;
				}
			}
			if(isCheck == true)
				break;
		}
		reCheckPlus +=2;
		if(isCheck == true || reCheckPlus > 10)
			break;
	}	
	if(isCheck == false)
	{
		xMap.selectX = DONT;
		xMap.selectY = DONT;
	}
	
	
	
	switch(type)
	{
	case MAP_TYPE_FLOORTILE0:
		if(xMap.selectX != DONT)
		{
			xSelectTileOne.state = SELECTTILE_STATE_PLAY;
			xSelectTileOne.tileNumX = xMap.selectX;
			xSelectTileOne.tileNumY = xMap.selectY;
		}
		break;
	case MAP_TYPE_SHOPASSISTANT:
		for(int npcI = 0;npcI<SHOPASSISTANTMAX;npcI++)
		{
			mapXpos = xMap.pointX + (((xShopAssistant[floor][npcI].y-(floor*5)) - (xShopAssistant[floor][npcI].x-(floor*5))) * (TILEW / 2));
			
			if ((xShopAssistant[floor][npcI].y + xShopAssistant[floor][npcI].x + 1) % 2 == 1)
				mapYpos = xMap.pointY + ((((xShopAssistant[floor][npcI].y-(floor*5)) + (xShopAssistant[floor][npcI].x-(floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
			else
				mapYpos = xMap.pointY + ((((xShopAssistant[floor][npcI].y-(floor*5)) + (xShopAssistant[floor][npcI].x-(floor*5)) + 1) / 2) * TILEH);
			
			xTouchTemp.wPos = TILEW*0.8f;
			xTouchTemp.hPos = (TILEH*5)*0.8f;
			xTouchTemp.xPos = mapXpos-xTouchTemp.wPos/2;
			xTouchTemp.yPos = mapYpos-20-xTouchTemp.hPos/2;
			
			if(touchCheckS(&xTouchTemp) == TRUE)
			{
				xSelectTileOne.state = SELECTTILE_STATE_PLAY;
				xSelectTileOne.npcCode = npcI;
				return;
			}			
		}
		break;
	case MAP_TYPE_PAYMENTASSISTANT:
			mapXpos = xMap.pointX + (((xPaymentAssistant[floor].y-(floor*5)) - (xPaymentAssistant[floor].x-(floor*5))) * (TILEW / 2));
			
			if ((xPaymentAssistant[floor].y + xPaymentAssistant[floor].x + 1) % 2 == 1)
				mapYpos = xMap.pointY + ((((xPaymentAssistant[floor].y-(floor*5)) + (xPaymentAssistant[floor].x-(floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
			else
				mapYpos = xMap.pointY + ((((xPaymentAssistant[floor].y-(floor*5)) + (xPaymentAssistant[floor].x-(floor*5)) + 1) / 2) * TILEH);
			
			xTouchTemp.wPos = TILEW*0.8f;
			xTouchTemp.hPos = (TILEH*5)*0.8f;
			xTouchTemp.xPos = mapXpos-xTouchTemp.wPos/2;
			xTouchTemp.yPos =  mapYpos-20-xTouchTemp.hPos/2;
			
			if(touchCheckS(&xTouchTemp) == TRUE)
			{
				xSelectTileOne.state = SELECTTILE_STATE_PLAY;
				return;
			}			

		break;
	case MAP_TYPE_NPC:
		//NPC검색
		for(int npcI = 0;npcI<WORLDMAPNPCMAX;npcI++)
		{
			if(xWorldMapNpc[npcI].state != WORLDMAPNPC_STATE_DONT)
			{
				mapXpos = xMap.pointX + ((xWorldMapNpc[npcI].y - xWorldMapNpc[npcI].x) * (TILEW / 2));
				
				if ((xWorldMapNpc[npcI].y + xWorldMapNpc[npcI].x + 1) % 2 == 1)
					mapYpos = xMap.pointY + (((xWorldMapNpc[npcI].y + xWorldMapNpc[npcI].x + 1) / 2) * TILEH) + (TILEH / 2);
				else
					mapYpos = xMap.pointY + (((xWorldMapNpc[npcI].y + xWorldMapNpc[npcI].x + 1) / 2) * TILEH);
				
				xTouchTemp.wPos = TILEW*0.8f;
				xTouchTemp.hPos = (TILEH*5)*0.8f;
				xTouchTemp.xPos = mapXpos-xTouchTemp.wPos/2;
				xTouchTemp.yPos = mapYpos-20-xTouchTemp.hPos/2;
				
				if(touchCheckS(&xTouchTemp) == TRUE)
				{
					xSelectTileOne.state = SELECTTILE_STATE_PLAY;
					xSelectTileOne.npcCode = npcI;
					isSubTemp[20] = TRUE;
					return;
				}
			}
		}
		break;
	case MAP_TYPE_MODELNPC:
		for(int npcI = 0;npcI<MODELNPCMAX;npcI++)
		{
			
			if(xModelNpc[npcI].state != MODELNPC_STATE_DONT)
			{
				if(xModelNpc[npcI].floor == floor)
				{
					mapXpos = xMap.pointX + (((xModelNpc[npcI].y-(floor*5)) - (xModelNpc[npcI].x-(floor*5))) * (TILEW / 2));
					
					if ((xModelNpc[npcI].y + xModelNpc[npcI].x + 1) % 2 == 1)
						mapYpos = xMap.pointY + ((((xModelNpc[npcI].y-(floor*5)) + (xModelNpc[npcI].x-(floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
					else
						mapYpos = xMap.pointY + ((((xModelNpc[npcI].y-(floor*5)) + (xModelNpc[npcI].x-(floor*5)) + 1) / 2) * TILEH);
					
					xTouchTemp.wPos = TILEW*0.8f;
					xTouchTemp.hPos = (TILEH*5)*0.8f;
					xTouchTemp.xPos = mapXpos-xTouchTemp.wPos/2;
					xTouchTemp.yPos = mapYpos-20-xTouchTemp.hPos/2;
					
					if(touchCheckS(&xTouchTemp) == TRUE)
					{
						//npcI선택
						xSelectTileOne.state = SELECTTILE_STATE_PLAY;
						xSelectTileOne.npcCode = npcI;
						return;
					}
				}
			}
		}
		break;
	case MAP_TYPE_SHOPNPC:
		//SHOPNPC검색
		for(int npcI = 0;npcI<SHOPNPCMAX;npcI++)
		{
			if(xShopNpc[npcI].state != SHOPNPC_STATE_DONT)
			{
				if(xShopNpc[npcI].floor == floor)
				{
					mapXpos = xMap.pointX + (((xShopNpc[npcI].y-(floor*5)) - (xShopNpc[npcI].x-(floor*5))) * (TILEW / 2));
					
					if ((xShopNpc[npcI].y + xShopNpc[npcI].x + 1) % 2 == 1)
						mapYpos = xMap.pointY + ((((xShopNpc[npcI].y-(floor*5)) + (xShopNpc[npcI].x-(floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
					else
						mapYpos = xMap.pointY + ((((xShopNpc[npcI].y-(floor*5)) + (xShopNpc[npcI].x-(floor*5)) + 1) / 2) * TILEH);
					
					xTouchTemp.wPos = TILEW*0.8f;
					xTouchTemp.hPos = (TILEH*5)*0.8f;
					xTouchTemp.xPos = mapXpos-xTouchTemp.wPos/2;
					xTouchTemp.yPos = mapYpos-20-xTouchTemp.hPos/2;
					
					if(touchCheckS(&xTouchTemp) == TRUE)
					{
						//npcI선택
						xSelectTileOne.state = SELECTTILE_STATE_PLAY;
						xSelectTileOne.npcCode = npcI;
						isSubTemp[20] = TRUE;
						return;
					}
				}
			}
		}
		break;
	case MAP_TYPE_CAR:
		//CAR검색
		//LJW 월드맵 자동차 그리기 막기
//		for(int carI = 0;carI<WORLDMAPCARMAX;carI++)
//		{
//			if(xWorldMapCar[carI].state != WORLDMAPCAR_STATE_DONT)
//			{
//				mapXpos = xMap.pointX + ((xWorldMapCar[carI].y - xWorldMapCar[carI].x) * (TILEW / 2));
//				
//				if ((xWorldMapCar[carI].y + xWorldMapCar[carI].x + 1) % 2 == 1)
//					mapYpos = xMap.pointY + (((xWorldMapCar[carI].y + xWorldMapCar[carI].x + 1) / 2) * TILEH) + (TILEH / 2);
//				else
//					mapYpos = xMap.pointY + (((xWorldMapCar[carI].y + xWorldMapCar[carI].x + 1) / 2) * TILEH);
//				
//				xTouchTemp.wPos = TILEW*3;
//				xTouchTemp.hPos = TILEH*3;
//				xTouchTemp.xPos = mapXpos-xTouchTemp.wPos/2;
//				xTouchTemp.yPos = mapYpos-xTouchTemp.hPos/2;
//				
//				if(touchCheckS(&xTouchTemp) == TRUE)
//				{
//					//carI선택
//					isSubTemp[20] = TRUE;
//					return;
//				}
//			}
//		}
		break;
	case MAP_TYPE_WALL0:
	case MAP_TYPE_WALL1:
	case MAP_TYPE_OBJ:
	case MAP_TYPE_FLOORTILE1:			
		//////타일,오브젝트검색//////////
			
		for(int accuracy=1;accuracy<3;accuracy++)
		{
			for (x = xMap.shopPointX+xMap.shopPointW-1; x >= xMap.shopPointX-1; x--)
			{
				for (y = xMap.shopPointY+xMap.shopPointH-1; y >= xMap.shopPointY-1; y--)
				{
					if(xMap.data[floor][type][x][y] != 0)
					{
												
						setMapData(xMap.data[floor][type][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
						//걸림(오브젝트 걸림)
						
						//타일검사와 오브젝트 검사 구분
						mapXpos = xMap.pointX + (((y-(floor*5)) - (x-(floor*5))) * (TILEW / 2));
						
						if ((y + x + 1) % 2 == 1)
							mapYpos = xMap.pointY + ((((y-(floor*5)) + (x-(floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
						else
							mapYpos = xMap.pointY + ((((y-(floor*5)) + (x-(floor*5)) + 1) / 2) * TILEH);
						
						
						if(xMap.rever == 0)
						{
							xTouchTemp.wPos = xObj.img[xMap.type][xMap.listNum].w*(0.3f*(float)accuracy);
							xTouchTemp.hPos = xObj.img[xMap.type][xMap.listNum].h*(0.3f*(float)accuracy);
							xTouchTemp.xPos = mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever]-xTouchTemp.wPos/2;
							xTouchTemp.yPos = mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]-xTouchTemp.hPos/2;
						}
						else if(xMap.rever == 1)
						{
							xTouchTemp.wPos = xObj.img[xMap.type][xMap.listNum].w*(0.3f*(float)accuracy);
							xTouchTemp.hPos = xObj.img[xMap.type][xMap.listNum].h*(0.3f*(float)accuracy);
							xTouchTemp.xPos = mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever]-xTouchTemp.wPos/2;
							xTouchTemp.yPos = mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]-xTouchTemp.hPos/2;
						}
																				
						if(touchCheckS(&xTouchTemp) == TRUE)
						{
							xSelectTileOne.state = SELECTTILE_STATE_PLAY;
							xSelectTileOne.tileNumX = x;
							xSelectTileOne.tileNumY = y;
							//setSelectTile(v,x,y,v);
							isSubTemp[20] = TRUE;
							return;
						}
					}
				}
			}
		}
		break;
	}
}


void setMapData(int ObjCode)
{
	xMap.rever = (ObjCode < 0 ? TRUE : FALSE);
	xMap.abxMapData = ObjCode;
	if (xMap.rever == TRUE)
		xMap.abxMapData = -xMap.abxMapData;
	xMap.type = xMap.abxMapData / 1000;
	xMap.listNum = xMap.abxMapData % 1000;
}

float getMapW()
{
	return (TILEW * xWorldMap.fscale);
}
float getMapH()
{
	return (TILEH * xWorldMap.fscale);
}

void prcWorldMap()
{
	//LJW 자동판매
//	prcProductTime();
//	prcSellTime();
	
	//바닥지 벽지 이중으로 들어갔을때 예외처리
	if(xFloorWallTileErrQueue.isOneLoop == TRUE)
	{
		if(xFloorWallTileErrQueue.totalNum > 0)
		{
			if(xEventQueueNet.totalNum == 0)
			{
				--xFloorWallTileErrQueue.totalNum;
				
				if(xFloorWallTileErrQueue.code[xFloorWallTileErrQueue.totalNum] < 0)
					xFloorWallTileErrQueue.code[xFloorWallTileErrQueue.totalNum] = -xFloorWallTileErrQueue.code[xFloorWallTileErrQueue.totalNum];
								
				inputInventoryInterior(xFloorWallTileErrQueue.code[xFloorWallTileErrQueue.totalNum]);
				//////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.code[xEventQueueNet.totalNum] = xFloorWallTileErrQueue.code[xFloorWallTileErrQueue.totalNum];
				xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
				for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
				{
					if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
						xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
				}
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
				//////////////////////////////////////////////////////////////////////////////
				
				/////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.floor[xEventQueueNet.totalNum] = xFloorWallTileErrQueue.floor[xFloorWallTileErrQueue.totalNum];
				xEventQueueNet.action[xEventQueueNet.totalNum] = 2;	//0:신규1:업데이트2:삭제
				xEventQueueNet.code[xEventQueueNet.totalNum] = xFloorWallTileErrQueue.code[xFloorWallTileErrQueue.totalNum];
				xEventQueueNet.key[xEventQueueNet.totalNum] = xFloorWallTileErrQueue.key[xFloorWallTileErrQueue.totalNum];
				xEventQueueNet.mapX[xEventQueueNet.totalNum] = xFloorWallTileErrQueue.x[xFloorWallTileErrQueue.totalNum];
				xEventQueueNet.mapY[xEventQueueNet.totalNum] = xFloorWallTileErrQueue.y[xFloorWallTileErrQueue.totalNum];
				
				xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
				xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
				////////////////////////////////////////////////////////////////////////////
			}
		}
	}
	
	if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == TRUE && xFriendMap.isPlay == FALSE)
	{
		if(xQuestTuto.state == QUEST_TUTO_KEY)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_27_HELP_HELP:
				if(xFriendData[xFriendMap.selectDataSlotNum].socialCount == 0)
					xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
	}
	
	
	
	setLock();
	if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
	{
		if(xQuestTuto.state == QUEST_TUTO_KEY || xQuestTuto.state == QUEST_TUTO_SHOW)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_11_SHOWWINDOWSELECT:
			case TUTO_11_SHOWWINDOWLAYEREDSHOW:
			case TUTO_11_SHOWWINDOWLAYERED5:
			case TUTO_11_SHOWWINDOWRESET:
			case TUTO_11_RESULT:
			case TUTO_12_SHOWWINDOWSELECT:
			case TUTO_12_SHOWWINDOWFITTING:
			case TUTO_12_SHOWWINDOWIN0:
			case TUTO_12_SHOWWINDOWIN1:
			case TUTO_12_SHOWWINDOWOUT:
			case TUTO_12_RESULT:
				//쇼윈도가 없다면
				isSubTemp[5] = FALSE;
				for(int floor=0;floor<xMap.totalFloor;floor++)
				{
					for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
					{
						if(xShowWindowInfo[floor][ss].isUse == TRUE)
						{
							isSubTemp[5] = TRUE;
							break;
						}
					}
				}
				if(isSubTemp[5] == FALSE)
					xQuestTuto.isTutoClean = TRUE;
				break;
			case TUTO_30_INTERIOR_TABTOUCH:
			case TUTO_30_INTERIOR_OK:
			case TUTO_30_RESULT:
				if(xWorldMap.state == WORLDMAP_STATE_PLAY && playState == PLAY_PLAY)
				{
					if(xFitting.totalShowWindow[0] > 0)
						xQuestTuto.isTutoClean = TRUE;
				}
				break;
			case TUTO_10_INTERIOR_TABTOUCH:
			case TUTO_10_INTERIOR_EXTENSION:
				if(xWorldMap.isExtensionEvent == FALSE)
				{
					if(xWorldMap.state == WORLDMAP_STATE_PLAY && playState == PLAY_PLAY)
					{
						if(xMap.extension > 0)
							xQuestTuto.isTutoClean = TRUE;
					}
				}
				break;
			case TUTO_6_INTERIOR_EXIT:
			case TUTO_6_RESULT:
			case TUTO_8_INTERIOR_EXIT:
			case TUTO_9_RESULT:
			case TUTO_13_RESULT:
			case TUTO_14_RESULT:
			case TUTO_15_RESULT:
			case TUTO_17_RESULT:
			case TUTO_20_ORDER_CARINFOEXIT:
			case TUTO_22_RESULT:
			case TUTO_23_RESULT:
			case TUTO_25_RESULT:
			case TUTO_26_RESULT:
			case TUTO_27_RESULT:
			case TUTO_29_RESULT:
			case TUTO_22_MODELEXIT:
			case TUTO_22_MODELMAPMODELINFOEXIT:
				if(xWorldMap.state == WORLDMAP_STATE_PLAY)
				   xQuestTuto.isTutoClean = TRUE;
				break;
			case TUTO_21_RESULT:
				if(xWorldMap.isTrend == FALSE)
					xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
							
		if(xWorldMap.state == WORLDMAP_STATE_PLAY && playState == PLAY_PLAY)
		{
            
						
			int perTemp0 = (xTrend.per[0]+(xTrend.per[0]*xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER]/100));
			int perTemp1 = (xTrend.per[1]+(xTrend.per[1]*xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER]/100));
			
			
			
			
			switch(++xWorldMap.initCnt)
			{
			case 100:
				if(xTrend.itemCode[0] != DONT)
				{
					switch(xTrend.per[0]/100)
					{
					case 2:
						sprintf(strTempS, "%s이(가) %d.%d배에 유행 판매중입니다.",xFashionData[xTrend.itemCode[0]/1000][xTrend.itemCode[0]%1000].strName,perTemp0/100,(perTemp0/10)%10);
						break;
					case 3:
						sprintf(strTempS, "%s이(가) %d.%d배로 판매 가능!",xFashionData[xTrend.itemCode[0]/1000][xTrend.itemCode[0]%1000].strName,perTemp0/100,(perTemp0/10)%10);
						break;
					case 6:
						sprintf(strTempS, "%s이(가) %d.%d배로 엄청난 유행 중!",xFashionData[xTrend.itemCode[0]/1000][xTrend.itemCode[0]%1000].strName,perTemp0/100,(perTemp0/10)%10);
						break;
					case 10:
						sprintf(strTempS, "%s이(가) %d.%d배로 대박 유행 중!",xFashionData[xTrend.itemCode[0]/1000][xTrend.itemCode[0]%1000].strName,perTemp0/100,(perTemp0/10)%10);
						break;
					}
					setHelpInfoCenter(strTempS);
				}
				if(xTrend.itemCode[1] != DONT)
				{
					switch(xTrend.per[1]/100)
					{
					case 2:
						sprintf(strTempS, "%s이(가) %d.%d배에 유행 판매중입니다.",xFashionData[xTrend.itemCode[1]/1000][xTrend.itemCode[1]%1000].strName,perTemp1/100,(perTemp1/10)%10);
						break;
					case 3:
						sprintf(strTempS, "%s이(가) %d.%d배로 판매 가능!",xFashionData[xTrend.itemCode[1]/1000][xTrend.itemCode[1]%1000].strName,perTemp1/100,(perTemp1/10)%10);
						break;
					case 6:
						sprintf(strTempS, "%s이(가) %d.%d배로 엄청난 유행 중!",xFashionData[xTrend.itemCode[1]/1000][xTrend.itemCode[1]%1000].strName,perTemp1/100,(perTemp1/10)%10);
						break;
					case 10:
						sprintf(strTempS, "%s이(가) %d.%d배로 대박 유행 중!",xFashionData[xTrend.itemCode[1]/1000][xTrend.itemCode[1]%1000].strName,perTemp1/100,(perTemp1/10)%10);
						break;
					}
					setHelpInfoCenter(strTempS);
				}
				break;
			}			

			if(xProductionMenu.totalSuccess > 0)
			{
				if(xWorldMap.initCnt%(30*10) == 0)
				{
					sprintf(strTempS, "의상제작이 완료 되었습니다. 지금 바로 확인해보세요.");
					setHelpInfoCenter(strTempS);
				}
			}
		}
	
		resetFame();
        
        
        
//        prcHotDeal();
        
        
        
        for(int floor=0;floor<xMap.totalFloor;floor++)
        {
            for(int ss=0;ss<xSell.totalTotal[floor];ss++)
            {
                setMapData(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].interiorCode);
                
                for(int k=0;k<xObj.xObjData[xMap.type][xMap.listNum].slot;k++)
                {
                    if(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].code != DONT)
                    {
                        xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].xSlot[k].flowTime += xGame.prcSec;
                    }
                }
            }
        }
        
        
        //서버판매
        if(xGame.prcSec > 0)
        {
            if(xWorldMap.state == WORLDMAP_STATE_PLAY && xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == FALSE && xWorldMap.isFriendMap == FALSE && xWorldMap.isLvUp == FALSE)
            {
                if(xWorldMap.isLoginInit == TRUE)
                    loginInit();
                else if(xPrePay.remainDay > 0 && xPrePay.isRecv == true)
                    setPrepayDay();
            }
        }                        
	
		xProductionMenu.totalSuccessSub = xProductionMenu.totalSuccess;
		xProductionMenu.totalSuccess = 0;
		xProductionMenu.totalWaitSlot = 0;
		xProductionMenu.totalIng = 0;
		
		xProductionMenu.totalSuccessType[0] = 0;
		xProductionMenu.totalSuccessType[1] = 0;
		
		xProductionMenu.totalSuccessInteriorType[0] = 0;
		xProductionMenu.totalSuccessInteriorType[1] = 0;
		
        
        int pushTime = 0;
		
		//LJW 오토판매 제작 주석처리
//		for(int type=0;type<2;type++)
//		{			
//			for(int i=0;i<6;i++)
//			{
//				if(xProductionMenu.slotCode[type][i] != DONT)
//					setMapData(xProductionMenu.slotCode[type][i]);
//				if(xProductionMenu.state[type][i] == PRODUCTIONMENUSLOT_STATE_PLAY
//				   && xProductionMenu.slotCode[type][i] != DONT)
//				{
//
//                    xProductionMenu.slotFlowTime[type][i] += xGame.prcSec;
//                    
//                    
//					if(xProductionMenu.slotFlowTime[type][i]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
//					{
//						xProductionMenu.totalSuccess++;
//						xProductionMenu.totalSuccessType[type]++;
//						
//						switch(xMap.type)
//						{
//						case F_TYPE_OUTER:
//						case F_TYPE_TOP:
//						case F_TYPE_BOTTOM:
//						case F_TYPE_ONEPIECE:
//							xProductionMenu.totalSuccessInteriorType[0]++;
//							break;
//						default:
//							xProductionMenu.totalSuccessInteriorType[1]++;
//							break;
//						}
//					}
//					else
//					{
//                        pushTime = xFashionData[xMap.type][xMap.listNum].makeTime.oriData - xProductionMenu.slotFlowTime[type][i];
//                        
//                        
//                        
//						xProductionMenu.totalIng++;
//					}
//				}
//				
//				
//				
//				if(type == 0)
//				{
//					if(xProductionMenu.isOpen[type][i] == TRUE
//					   && xProductionMenu.lv[type][i] <= xSaveTemp.lv.oriData
//					   && xProductionMenu.state[type][i] == PRODUCTIONMENUSLOT_STATE_WAIT)
//							xProductionMenu.totalWaitSlot++;
//
//				}
//				if(type == 1)
//				{
//					if(xProductionMenu.isOpen[type][i] == TRUE
//					   && xProductionMenu.state[type][i] == PRODUCTIONMENUSLOT_STATE_WAIT)
//						xProductionMenu.totalWaitSlot++;
//				}
//				
//				
//				
//					
//				if(xProductionMenu.state[type][i] == PRODUCTIONMENUSLOT_STATE_RECV)
//				{
//					if(++xProductionMenu.recvAnyCnt[type][i] > 20)
//					{
//						setMapData(xProductionMenu.slotCode[type][i]);
//						
//						
//						M_Boolean isTrend = FALSE;
//						for(int tt=0;tt<TRENDMAX;tt++)
//						{
//							if(xTrend.isOpen[tt] == TRUE && xTrend.itemCode[tt] != DONT)
//							{
//								if(xTrend.itemCode[tt] == xProductionMenu.slotCode[type][i])
//								{
//									isTrend = TRUE;
//								}
//							}
//						}
//						
//						
//						if(isTrend == TRUE)
//							setQuest(3, 1, DONT);
//						
//						inputInventoryFashion((xMap.type*1000)+xMap.listNum, xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
//												
//						xProductionMenu.state[type][i] = PRODUCTIONMENUSLOT_STATE_WAIT;
//						xProductionMenu.slotCode[type][i] = DONT;
//						xProductionMenu.pushState[type][i] = 1;	//0:주문1:취소
//						if(xSave.isPushOnOff[PUSHONOFF_PRODUCTION] == FALSE)
//							xProductionMenu.pushState[type][i] = 1;	//0:주문1:취소
//						xProductionMenu.pushTime[type][i] = 0;
//						xProductionMenu.isUpData[type][i] = TRUE;
//                        
//                        ////////////////////////////////////////////////////////////////////////////
//                        xEventQueueNet.SLOT[xEventQueueNet.totalNum] = (type*6)+i;
//                        xEventQueueNet.resultCount[xEventQueueNet.totalNum] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
//                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONCOMPLETE, TRUE);
//                        ////////////////////////////////////////////////////////////////////////////
//                        
//						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//						{
//							switch(xQuestTuto.nowNum)
//							{
//							case TUTO_1_PRODUCTIONOK:
//							case TUTO_2_PRODUCTIONOK:
//								xQuestTuto.isTutoClean = TRUE;
//								break;
//							}
//						}
//						
//						if(xWorldMap.state == WORLDMAP_STATE_SELL)
//						{
//							setSellSelectItemSlot();
//						}
//					}
//				}
//			}
//		}
//		
//        if(pushTime > 0)
//            addLocalPush(pushTime, "대표님 오래기다리셨죠?의상 제작이 완료됐으니 얼른 진열해주세요~", 0);
//        else
//            delLocalPush(0);
		
        
		
		xProduction.haveItemCnt[xMap.nowFloor][0] = 0;
		xProduction.haveItemCnt[xMap.nowFloor][1] = 0;
		/////////////////재고파악 루틴
		for(int z=0;z<4;z++)
		{
			for(int t=0;t<FASHIONDATAMAX;t++)
			{
				if(xInventoryFashion.haveNum[z][t] > 0 && xFashionData[z][t].isStaff == 0)
				{
					if(xFashionData[z][t].makeNum.oriData > 0)
						xProduction.haveItemCnt[xMap.nowFloor][0] += (xInventoryFashion.haveNum[z][t]/xFashionData[z][t].makeNum.oriData)+1;
				}
			}
		}
		
		for(int z=4;z<7;z++)
		{
			for(int t=0;t<FASHIONDATAMAX;t++)
			{
				if(xInventoryFashion.haveNum[z][t] > 0 && xFashionData[z][t].isStaff == 0)
				{
					if(xFashionData[z][t].makeNum.oriData > 0)
						xProduction.haveItemCnt[xMap.nowFloor][1] += (xInventoryFashion.haveNum[z][t]/xFashionData[z][t].makeNum.oriData)+1;
				}
			}
		}
	}
    
	//이벤트큐에서는 친구샵로딩간에는 들어오지 않오록 처리
	//친구로딩중에는 이벤트큐값에 totalNum에 값이 있따면 일단 대기
	//타일선택이펙트 연산,그리기
	//이벤트큐 연산
	if(xGame.isResume == FALSE && xEventQueueNet.totalNum > 0)
	{
		if(xEventQueueNet.anyCnt[0] == 0 && xnet.isGetTime == FALSE && xFriendMap.isPlay == FALSE)
		{
			switch(xEventQueueNet.type[0])
			{
            case NETQUEUE_TYPE_FASHIONWEEKEXP:
                netSend(CMD_FASHIONWEEKEXP, DONT);
                break;
            case NETQUEUE_TYPE_FASHIONWEEKSCOREUPDATE:
                netSend(CMD_FASHIONWEEKSCOREUPDATE, DONT);
                break;
            case NETQUEUE_TYPE_PANGRESULT:
                netSend(CMD_PANGRESULT, DONT);
                break;
            case NETQUEUE_TYPE_PANGSTART:
                netSend(CMD_PANGSTART, DONT);
                break;
            case NETQUEUE_TYPE_FASHIONWEEKFITTINGUPDATE:
                netSend(CMD_FASHIONWEEKFITTINGUPDATE, DONT);
                break;
            case NETQUEUE_TYPE_FASHIONWEEKDRESSLIST:
                netSend(CMD_FASHIONWEEKDRESSLIST, DONT);
                break;
            case NETQUEUE_TYPE_FASHIONWEEKFITTINGLIST:
                netSend(CMD_FASHIONWEEKFITTINGLIST, DONT);
                break;
            case NETQUEUE_TYPE_CLUBDRESSBUY:
                xNetClubDressBuy.DRESS_NUM = xEventQueueNet.code[0];
                netSend(CMD_CLUBDRESSBUY, DONT);
                break;
            case NETQUEUE_TYPE_CLUBRANKLIST:
                netSend(CMD_CLUBRANKLIST, DONT);
                break;
            case NETQUEUE_TYPE_CLUBBOOKADD:
                netSend(CMD_CLUBBOOKADD, DONT);
                break;
            case NETQUEUE_TYPE_CLUBBOOKDEL:
                netSend(CMD_CLUBBOOKDEL, DONT);
                break;
            case NETQUEUE_TYPE_CLUBBOOKLIST:
                xNetClubBookList.rowNum = xEventQueueNet.code[0];
                xNetClubBookList.pageNum = xEventQueueNet.slotNum[0];
                netSend(CMD_CLUBBOOKLIST, DONT);
                break;
            case NETQUEUE_TYPE_CLUBHISTORYLIST:
                xNetClubHistoryList.rowNum = xEventQueueNet.code[0];
                xNetClubHistoryList.pageNum = xEventQueueNet.slotNum[0];
                netSend(CMD_CLUBHISTORYLIST, DONT);
                break;
            case NETQUEUE_TYPE_CLUBJOINLIST:
                netSend(CMD_CLUBJOINLIST, DONT);
                break;
            case NETQUEUE_TYPE_CLUBJOINAPPLY:
                xNetClubJoinApply.CLUB_NUM = xEventQueueNet.key[0];
                netSend(CMD_CLUBJOINAPPLY, DONT);
                break;
            case NETQUEUE_TYPE_CLUBJOINACCEPT:
                netSend(CMD_CLUBJOINACCEPT, DONT);
                break;
            case NETQUEUE_TYPE_CLUBJOINDEL:
                netSend(CMD_CLUBJOINDEL, DONT);
                break;
            case NETQUEUE_TYPE_SETCLUBJOINTYPE:
                netSend(CMD_SETCLUBJOINTYPE, DONT);
                break;
            case NETQUEUE_TYPE_SETCLUBNOTICE:
                netSend(CMD_SETCLUBNOTICE, DONT);
                break;
            case NETQUEUE_TYPE_SETCLUBJOININFO:
                netSend(CMD_SETCLUBJOININFO, DONT);
                break;
            case NETQUEUE_TYPE_SETCLUBFORCEOUT:
                xNetSetClubForceOut.MEMBER_NUM = xEventQueueNet.key[0];
                netSend(CMD_SETCLUBFORCEOUT, DONT);
                break;
            case NETQUEUE_TYPE_SETCLUBMASTER:
                xNetSetClubMaster.MEMBER_NUM = xEventQueueNet.key[0];
                netSend(CMD_SETCLUBMASTER, DONT);
                break;
            case NETQUEUE_TYPE_CLUBDATA:
                xNetClubData.CLUB_NUM = xEventQueueNet.key[0];
                netSend(CMD_CLUBDATA,DONT);
                break;
            case NETQUEUE_TYPE_CLUBMEMBER:
                xNetClubMember.CLUB_NUM = xEventQueueNet.key[0];
                netSend(CMD_CLUBMEMBER,DONT);
                break;
            case NETQUEUE_TYPE_CLUBSEARCH:
                netSend(CMD_CLUBSEARCH, DONT);
                break;
            case NETQUEUE_TYPE_CLUBUNREG:
                netSend(CMD_CLUBUNREG, DONT);
                break;
            case NETQUEUE_TYPE_CLUBJOIN:
                xNetClubJoin.CLUB_NUM = xEventQueueNet.key[0];
                netSend(CMD_CLUBJOIN, DONT);
                break;
            case NETQUEUE_TYPE_CLUBMAKE:
                netSend(CMD_CLUBMAKE, DONT);
                break;
            case NETQUEUE_TYPE_CLUBLIST:
                netSend(CMD_CLUBLIST, DONT);
                break;
            case NETQUEUE_TYPE_CLUBSTORAGEUPDATE:
                netSend(CMD_CLUBSTORAGYLIST,DONT);
                break;
            case NETQUEUE_TYPE_CLUBITEMBUY:
                netSend(CMD_CLUBITEMBUY, DONT);
                break;
            case NETQUEUE_TYPE_CLUBGIVEGIFT:
                netSend(CMD_CLUBGIVEGIFT, DONT);
                break;
            case NETQUEUE_TYPE_PANGCOUNTCHECK:
                netSend(CMD_PANGCOUNTCHECK, DONT);
                break;
            case NETQUEUE_TYPE_PANGTIMESRESET:
                netSend(CMD_PANGTIMESRESET, DONT);
                break;
            case NETQUEUE_TYPE_CMD_CLUBITEMDELETE:
                netSend(CMD_CLUBITEMDELETE, DONT);
                break;
            case NETQUEUE_TYPE_CMD_CLUBDONATIONCOUNT:
                netSend(CMD_CLUBDONATIONCOUNT, DONT);
                break;
            case NETQUEUE_TYPE_CLUBDONATION:
                netSend(CMD_CLUBDONATION, DONT);
                break;
            case NETQUEUE_TYPE_CLUBICONLISTUPDATE:
                netSend(CMD_CLUBICONLISTUPDATE,DONT);
                break;
            case NETQUEUE_TYPE_CLUBICONBUY:
                netSend(CMD_CLUBICONBUY,DONT);
                break;
            case NETQUEUE_TYPE_CLUBICONUPDATE:
                netSend(CMD_CLUBICONUPDATE, DONT);
                break;
            case NETQUEUE_TYPE_CLUBNAMEMODIFY:
                netSend(CMD_CLUBNAMEMODIFY, DONT);
                break;
            case NETQUEUE_TYPE_AMULETPAGEBUY:
                xNetAmuletPageBuy.DECK = xEventQueueNet.code[0];
                netSend(CMD_AMULETPAGEBUY, DONT);
                break;
            case NETQUEUE_TYPE_AMULETBUY:
                xNetAmuletBuy.AMULET = xEventQueueNet.code[0];
                netSend(CMD_AMULETBUY, DONT);
                break;
            case NETQUEUE_TYPE_AMULETBUYLIST:
                netSend(CMD_AMULETBUYLIST, DONT);
                break;
            case NETQUEUE_TYPE_AMULETUPDATE:
                xNetAmuletUpdate.pageUpdate = xEventQueueNet.action[0];
                xNetAmuletUpdate.selectPage = xEventQueueNet.slotNum[0];
                netSend(CMD_AMULETUPDATE, DONT);
                break;
            case NETQUEUE_TYPE_AMULETLIST:
                netSend(CMD_AMULETLIST, DONT);
                break;
            case NETQUEUE_TYPE_JEWELQUESTLIST:
                netSend(CMD_JEWELQUESTLIST, DONT);
                break;
            case NETQUEUE_TYPE_JEWELQUESTUPDATE:
                xNetJewelQuest.INDEX = xEventQueueNet.questIndex[0];
                xNetJewelQuest.VALUE = xEventQueueNet.questValue[0];
                netSend(CMD_JEWELQUESTUPDATE, DONT);
                break;
            case NETQUEUE_TYPE_JEWELQUESTCOMPLETE:
                xNetJewelQuest.INDEX = xEventQueueNet.questIndex[0];
                netSend(CMD_JEWELQUESTCOMPLETE, DONT);
                break;
            case NETQUEUE_TYPE_BOOKMARK:
                xNetBookMark.FRIENDNUM = xEventQueueNet.friendNum[0];
                xNetBookMark.BOOKMARK = xEventQueueNet.action[0];
                netSend(CMD_BOOKMARK, DONT);
                break;
            case NETQUEUE_TYPE_SETDEVICEID:
                netSend(CMD_SETDEVICEID, DONT);
                break;
            case NETQUEUE_TYPE_SOCIALLIST:
                xNetMySocialList.floor = xEventQueueNet.floor[0];
                xNetMySocialList.userNum = xNetData.userNum;
                netSend(CMD_USERSOCIALLIST, DONT);
                break;
            case NETQUEUE_TYPE_RIVALLIST:
                netSend(CMD_RIVALLIST,DONT);
                break;
            case NETQUEUE_TYPE_RIVALSTART:
                netSend(CMD_RIVALSTART,DONT);
                break;
            case NETQUEUE_TYPE_RIVALSTOP:
                netSend(CMD_RIVALSTOP,DONT);
                break;
            case NETQUEUE_TYPE_RIVALUPDATE:
                netSend(CMD_RIVALUPDATE,DONT);
                break;
            case NETQUEUE_TYPE_RIVALCOMPLETE:
                netSend(CMD_RIVALCOMPLETE,DONT);
                break;
            case NETQUEUE_TYPE_HOTDEALMAINLIST:
                netSend(CMD_HOTDEALMAINLIST, DONT);
                break;
            case NETQUEUE_TYPE_HOTDEALDETAILLIST:
                netSend(CMD_HOTDEALDETAILLIST, DONT);
                break;
            case NETQUEUE_TYPE_HOTDEALMAINOPEN:
                netSend(CMD_HOTDEALMAINOPEN, DONT);
                break;
            case NETQUEUE_TYPE_HOTDEALDETAILOPEN:
                xNetHotDeal.slot = xEventQueueNet.SLOT[0];
                netSend(CMD_HOTDEALDETAILOPEN, DONT);
                break;
            case NETQUEUE_TYPE_HOTDEALDETAILBUY:
                xNetHotDeal.slot = xEventQueueNet.SLOT[0];
                netSend(CMD_HOTDEALDETAILBUY, DONT);
                break;
                    
            case NETQUEUE_TYPE_EVENTQUESTMAINLIST:
                netSend(CMD_EVENTQUESTMAINLIST,DONT);
                break;
            case NETQUEUE_TYPE_EVENTQUESTMAINCOMPLETE:
                xNetEventQuest.DETAIL_TYPE = xEventQueueNet.questType[0];
                netSend(CMD_EVENTQUESTMAINCOMPLETE,DONT);
                break;
            case NETQUEUE_TYPE_EVENTQUESTDETAILLIST:
                xNetEventQuest.DETAIL_TYPE = xEventQueueNet.questType[0];
                netSend(CMD_EVENTQUESTDETAILLIST,DONT);
                break;
            case NETQUEUE_TYPE_EVENTQUESTDETAILUPDATE:
                xNetEventQuest.DETAIL_TYPE = xEventQueueNet.questType[0];
                xNetEventQuest.DETAIL_INDEX = xEventQueueNet.questIndex[0];
                xNetEventQuest.VALUE = xEventQueueNet.questValue[0];
                netSend(CMD_EVENTQUESTDETAILUPDATE,DONT);
                break;
            case NETQUEUE_TYPE_EVENTQUESTDETAILCOMPLETE:
                xNetEventQuest.DETAIL_TYPE = xEventQueueNet.questType[0];
                xNetEventQuest.DETAIL_INDEX = xEventQueueNet.questIndex[0];
                netSend(CMD_EVENTQUESTDETAILCOMPLETE,DONT);
                break;
            case NETQUEUE_TYPE_PACKAGEBUY:
                netSend(CMD_PACKAGEBUY,DONT);
                break;
            case NETQUEUE_TYPE_PACKAGELIST:
                netSend(CMD_PACKAGELIST,DONT);
                break;
            case NETQUEUE_TYPE_PREPAYBUY:
                netSend(CMD_PREPAYBUY,DONT);
                break;
            case NETQUEUE_TYPE_PREPAYDAY:
                netSend(CMD_PREPAYDAY,DONT);
                break;
            case NETQUEUE_TYPE_SELLSTART:
                xNetSellNet.FLOOR = xEventQueueNet.floor[0];
                xNetSellNet.KEY = xEventQueueNet.key[0];
                xNetSellNet.SLOT = xEventQueueNet.SLOT[0];
                xNetSellNet.ITEM_INDEX = xEventQueueNet.ITEM_INDEX[0];
                xNetSellNet.COUNT = xEventQueueNet.COUNT[0];
                xNetSellNet.SELL_COUNT = xEventQueueNet.SELL_COUNT[0];
                netSend(CMD_SELLSTART, DONT);
                break;
            case NETQUEUE_TYPE_SELLCANCLE:
                xNetSellNet.FLOOR = xEventQueueNet.floor[0];
                xNetSellNet.KEY = xEventQueueNet.key[0];
                xNetSellNet.SLOT = xEventQueueNet.SLOT[0];
                netSend(CMD_SELLCANCLE, DONT);
                break;
            case NETQUEUE_TYPE_SELLFASTPOP:
                xNetSellNet.FLOOR = xEventQueueNet.floor[0];
                xNetSellNet.KEY = xEventQueueNet.key[0];
                xNetSellNet.SLOT = xEventQueueNet.SLOT[0];
                xNetSellNet.POP = xEventQueueNet.POP[0];
                netSend(CMD_SELLFASTPOP, DONT);
                break;
            case NETQUEUE_TYPE_SELLCOMPLETE:
                xNetSellNet.FLOOR = xEventQueueNet.floor[0];
                xNetSellNet.KEY = xEventQueueNet.key[0];
                xNetSellNet.SLOT = xEventQueueNet.SLOT[0];
                xNetSellNet.EXP = xEventQueueNet.EXP[0];
                xNetSellNet.GOLD = xEventQueueNet.GOLD[0];
                netSend(CMD_SELLCOMPLETE, DONT);
                break;
            case NETQUEUE_TYPE_PRODUCTIONSTART:
                xNetProductionNet.SLOT = xEventQueueNet.SLOT[0];
                xNetProductionNet.ITEM_INDEX = xEventQueueNet.ITEM_INDEX[0];
                xNetProductionNet.resultGold = xEventQueueNet.resultGold[0];
                netSend(CMD_PRODUCTIONSTART, DONT);
                break;
            case NETQUEUE_TYPE_PRODUCTIONCANCLE:
                xNetProductionNet.SLOT = xEventQueueNet.SLOT[0];
                netSend(CMD_PRODUCTIONCANCLE, DONT);
                break;
            case NETQUEUE_TYPE_PRODUCTIONFASTPOP:
                xNetProductionNet.SLOT = xEventQueueNet.SLOT[0];
                xNetProductionNet.resultCash = xEventQueueNet.resultCash[0];
                netSend(CMD_PRODUCTIONFASTPOP, DONT);
                break;
            case NETQUEUE_TYPE_PRODUCTIONCOMPLETE:
                xNetProductionNet.SLOT = xEventQueueNet.SLOT[0];
                xNetProductionNet.resultCount = xEventQueueNet.resultCount[0];
                netSend(CMD_PRODUCTIONCOMPLETE, DONT);
                break;
            case NETQUEUE_TYPE_PRODUCTIONOPEN:
                xNetProductionNet.SLOT = xEventQueueNet.SLOT[0];
                xNetProductionNet.resultCash = xEventQueueNet.resultCash[0];
                netSend(CMD_PRODUCTIONOPEN, DONT);
                break;
            case NETQUEUE_TYPE_MILEAGESHOPINFO:
                netSend(CMD_MILEAGESHOPLIST, DONT);
                break;
            case NETQUEUE_TYPE_MILEAGESHOPBUY:
                xNetMileageShopBuy.ITEM_INDEX = xMileageShop.listCode[xMileageShop.selectSlot];
                sprintf(xNetMileageShopBuy.ADDRESS, "%s",xMileageShop.strAddress);
                sprintf(xNetMileageShopBuy.BUYER_NAME, "%s",xMileageShop.strName);
                sprintf(xNetMileageShopBuy.PHONENUM, "%s",xMileageShop.strPhone);
                netSend(CMD_MILEAGESHOPBUY, DONT);
                break;
                    
            case NETQUEUE_TYPE_MILEAGESHOPUPDATE:
                xNetMileageShopUpdate.ITEM_KEY = xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].key;
                sprintf(xNetMileageShopUpdate.ADDRESS, "%s",xMileageShop.strAddress);
                sprintf(xNetMileageShopUpdate.BUYER_NAME, "%s",xMileageShop.strName);
                sprintf(xNetMileageShopUpdate.PHONENUM, "%s",xMileageShop.strPhone);
                netSend(CMD_MILEAGESHOPUPDATE, DONT);
                break;
            case NETQUEUE_TYPE_MILEAGESHOPCOUNT:
                netSend(CMD_MILEAGESHOPCOUNT, DONT);
                break;
			case NETQUEUE_TYPE_ALICESHOCK_GETLIST:
				//setCrossSend(CROSS_TYPE_GETLIST);
				break;
			case NETQUEUE_TYPE_ALICESHOCK_CLICK:
				//setCrossSend(CROSS_TYPE_CLICK);
				break;
			case NETQUEUE_TYPE_ALICESHOCK_LOOKSHOW:
				//setCrossSend(CROSS_TYPE_GETREWARD_LOOKSHOW);
				break;
			case NETQUEUE_TYPE_ALICESHOCK_LOOKOK:
				//setCrossSend(CROSS_TYPE_GETREWARD_LOOKOK);
				break;
			case NETQUEUE_TYPE_G9EVENT:
				xNetG9Event.state = xEventQueueNet.action[0];
				netSend(CMD_G9EVENT, DONT);
				break;
			case NETQUEUE_TYPE_KAKAOHELP:
				xNetKakaoHelp.friendUserNum = xEventQueueNet.friendNum[0];
				netSend(CMD_KAKAOHELP, DONT);
				break;
			case NETQUEUE_TYPE_TIMEHACKING:
				netSend(CMD_GETTIME, DONT);
				break;
			case NETQUEUE_TYPE_GAMEINFO:
				netSend(CMD_SETGAMEDATA, DONT);
				break;
			case NETQUEUE_TYPE_HACKINGCHECK:
				netSend(CMD_HACKINGCHECK, DONT);
				break;
			case NETQUEUE_TYPE_BUYGOLD:
				xNetBuyGold.index = xEventQueueNet.code[0];
				xNetBuyGold.typeB = xEventQueueNet.layer[0][0];//0:골드,1프리미엄,2캔디머신,3직원의상,모델뽑기
				xNetBuyGold.typeS = xEventQueueNet.layer[0][1];//아이템종류(0~5)직원의상 구매시
				netSend(CMD_BUYGOLD, DONT);
				break;
			case NETQUEUE_TYPE_GETPMDATA:
				netSend(CMD_GETPMDATA, DONT);
				break;
			case NETQUEUE_TYPE_SETACCESS:
				netSend(CMD_SETACCESS, DONT);
				break;
			case NETQUEUE_TYPE_GETFRIENDMODEL:
				netSend(CMD_GETFRIENDMODEL, DONT);
				break;
			case NETQUEUE_TYPE_FASHION:
				xNetFashion.code = xEventQueueNet.code[0];
				xNetFashion.haveNum = xEventQueueNet.haveNum[0];
				netSend(CMD_SETFASHION, DONT);
				break;
			case NETQUEUE_TYPE_INTERIOR:
				xNetInterior.code = xEventQueueNet.code[0];
				xNetInterior.haveNum = xEventQueueNet.haveNum[0];
				netSend(CMD_SETINTERIOR, DONT);
				break;
			case NETQUEUE_TYPE_MAP:
				xNetMap.floor = xEventQueueNet.floor[0];
				xNetMap.action = xEventQueueNet.action[0];
				xNetMap.code = xEventQueueNet.code[0];
				xNetMap.key = xEventQueueNet.key[0];
				xNetMap.mapX = xEventQueueNet.mapX[0];
				xNetMap.mapY = xEventQueueNet.mapY[0];
				xNetMap.gold = xEventQueueNet.layer[0][0];
				xNetMap.cash = xEventQueueNet.layer[0][1];
				netSend(CMD_SETMAP, DONT);
				break;
            case NETQUEUE_TYPE_PRODUCTIONDELETE:
//                netSend(CMD_PRODUCTIONDELETE, xEventQueueNet.key[0]);
                break;
			case NETQUEUE_TYPE_SELLTABLE:
				xNetSellTable.floor = xEventQueueNet.floor[0];
				xNetSellTable.key = xEventQueueNet.key[0];
				memcpy(&xNetSellTable.xSellSlot, &xEventQueueNet.xSellSlot[0], sizeof(xNetSellTable.xSellSlot));
				netSend(CMD_SETSELLTABLE, DONT);
				break;
			case NETQUEUE_TYPE_SHOWWINDOW:
				xNetShowWindow.floor = xEventQueueNet.floor[0];
				xNetShowWindow.key = xEventQueueNet.key[0];
				xNetShowWindow.sex = xEventQueueNet.sex[0];
				xNetShowWindow.inFitting = xEventQueueNet.open[0];
				for(int k=0;k<16;k++)
					xNetShowWindow.layer[k] = xEventQueueNet.layer[0][k];
				netSend(CMD_SETSHOWWINDOW, DONT);
				break;
			case NETQUEUE_TYPE_STAFF:
				xNetStaff.floor = xEventQueueNet.floor[0];
				xNetStaff.type = xEventQueueNet.action[0];
				sprintf(xNetStaff.strNickName, "%s",xEventQueueNet.strNickName[0]);
				xNetStaff.sex = xEventQueueNet.sex[0];
				xNetStaff.inFitting = xEventQueueNet.open[0];
				for(int k=0;k<6;k++)
					xNetStaff.layer[k] = xEventQueueNet.layer[0][k];
				netSend(CMD_SETSTAFF, DONT);
				break;
			case NETQUEUE_TYPE_FACE:
				xNetFace.code = xEventQueueNet.code[0];
				xNetFace.haveNum = xEventQueueNet.haveNum[0];
				netSend(CMD_SETFACE, DONT);
				break;
			case NETQUEUE_TYPE_TREND:
				xNetTrend.slotNum = xEventQueueNet.slotNum[0];
				xNetTrend.open = xEventQueueNet.open[0];
				xNetTrend.code = xEventQueueNet.code[0];
				xNetTrend.type = xEventQueueNet.action[0];
				xNetTrend.haveNum = xEventQueueNet.haveNum[0];
				xNetTrend.time = xEventQueueNet.time[0];
				xNetTrend.per = xEventQueueNet.sex[0];
				netSend(CMD_SETTREND, DONT);
				break;
			case NETQUEUE_TYPE_CAR:
				xNetCar.code = xEventQueueNet.code[0];
				netSend(CMD_SETCAR, DONT);
				break;
			case NETQUEUE_TYPE_ADDORDER:
				xNetAddOrder.userNum = xEventQueueNet.key[0];
				xNetAddOrder.slotNum = xEventQueueNet.slotNum[0];
				xNetAddOrder.code = xEventQueueNet.code[0];
				xNetAddOrder.friendNum = xEventQueueNet.friendNum[0];
				xNetAddOrder.state = xEventQueueNet.action[0];
				netSend(CMD_ADDORDER, DONT);
				break;
			case NETQUEUE_TYPE_ORDER:
				xNetOrder.state = xEventQueueNet.action[0];
				xNetOrder.key = xEventQueueNet.key[0];
				xNetOrder.endTime = xEventQueueNet.time[0];
				netSend(CMD_SETORDER, DONT);
				break;
			case NETQUEUE_TYPE_CARPARK:
				xNetCarPark.slot = xEventQueueNet.slotNum[0];
				xNetCarPark.key = xEventQueueNet.key[0];
				xNetCarPark.carNum = xEventQueueNet.code[0];
				xNetCarPark.state = xEventQueueNet.action[0];
				xNetCarPark.time = xEventQueueNet.time[0];
				netSend(CMD_SETCARPARK, DONT);
				break;
			case NETQUEUE_TYPE_ORDEROK:
				xNetOrderOk.action = xEventQueueNet.action[0];
				xNetOrderOk.key = xEventQueueNet.key[0];
				netSend(CMD_ORDEROK, DONT);
				break;
			case NETQUEUE_TYPE_DELRECVORDER:
				xNetDelRecvOrder.key = xEventQueueNet.key[0];
				netSend(CMD_DELRECVORDER, DONT);
				break;
			case NETQUEUE_TYPE_FLOOR:
				xNetSetFloor.action = xEventQueueNet.action[0];
				netSend(CMD_SETFLOOR, DONT);
				break;
			case NETQUEUE_TYPE_GETFRIENDLIST:
				xNetFriendList.rowNum = xEventQueueNet.code[0];
				xNetFriendList.pageNum = xEventQueueNet.slotNum[0];
				xNetFriendList.action = xEventQueueNet.action[0];
				netSend(CMD_GETFRIENDLIST, DONT);
				break;
			case NETQUEUE_TYPE_GETFASHIONSHOWRANK:
				xNetFashionShowRank.pageNum = xEventQueueNet.slotNum[0];
				xNetFashionShowRank.action = xEventQueueNet.action[0];
				xNetFashionShowRank.request = xEventQueueNet.code[0];
				netSend(CMD_GETFASHIONSHOWRANK, DONT);
				break;
			case NETQUEUE_TYPE_GETFRIENDSEARCH:
				xNetFriendSearch.action = xEventQueueNet.action[0];
				sprintf(xNetFriendSearch.strNickName, "%s",xEventQueueNet.strNickName[0]);
				netSend(CMD_GETFRIENDSEARCH, DONT);
				break;
			case NETQUEUE_TYPE_ADDFRIEND:
				xSaveTemp.friendNum++;
				setQuest(7, 1, DONT);
				xNetAddFriend.friendNum = xEventQueueNet.friendNum[0];
				netSend(CMD_ADDFRIEND, DONT);
				break;
			case NETQUEUE_TYPE_ADDFRIENDID:
				sprintf(xNetAddFriend.strKakaoid, "%s",xEventQueueNet.strNickName[0]);
				netSend(CMD_ADDFRIENDID, DONT);
				break;
			case NETQUEUE_TYPE_DELFRIEND:
				xSaveTemp.friendNum--;
				xNetDelFriend.friendNum = xEventQueueNet.friendNum[0];
				netSend(CMD_DELFRIEND, DONT);
				break;
			case NETQUEUE_TYPE_FRIENDSOCIAL:
				setQuest(8, 1, DONT);
				xNetFriendSocial.friendNum = xEventQueueNet.friendNum[0];
				xNetFriendSocial.key = xEventQueueNet.key[0];
				xNetFriendSocial.floor = xEventQueueNet.floor[0];
				netSend(CMD_FRIENDSOCIAL, DONT);
				break;
			case NETQUEUE_TYPE_DELCLEAN:
				xNetDelClean.cKey = xEventQueueNet.key[0];
				xNetDelClean.bKey = xEventQueueNet.action[0];
				xNetDelClean.floor = xEventQueueNet.floor[0];
				netSend(CMD_DELCLEAN, DONT);					
				break;
			case NETQUEUE_TYPE_LVUP:
				netSend(CMD_LVUP, DONT);				
				break;
			case NETQUEUE_TYPE_TODAY:
				netSend(CMD_TODAY,DONT);
				break;
			case NETQUEUE_TYPE_SENDMAIL:
				xNetSendMail.userNum = xEventQueueNet.key[0];
				xNetSendMail.friendNum = xEventQueueNet.friendNum[0];
				xNetSendMail.action = xEventQueueNet.action[0];
				netSend(CMD_SENDMAIL, DONT);
				break;
			case NETQUEUE_TYPE_MAILLIST:
				xNetGetMailList.userNum = xEventQueueNet.friendNum[0];
				xNetGetMailList.rowNum = xEventQueueNet.code[0];
				xNetGetMailList.pageNum = xEventQueueNet.slotNum[0];
				netSend(CMD_GETMAILLIST, DONT);
				break;
			case NETQUEUE_TYPE_GIFTLIST:
				xNetGetGiftList.rowNum = xEventQueueNet.code[0];
				xNetGetGiftList.pageNum = xEventQueueNet.slotNum[0];
				netSend(CMD_GETGIFTLIST, DONT);
				break;
			case NETQUEUE_TYPE_DELMAIL:
				xNetDelMail.key = xEventQueueNet.key[0];
				xNetDelMail.userNum = xEventQueueNet.friendNum[0];
				netSend(CMD_DELMAIL, DONT);
				break;
			case NETQUEUE_TYPE_MINIPROFILE:
				xNetMiniProfile.userNum = xEventQueueNet.friendNum[0];
				netSend(CMD_MINIPROFILE, DONT);
				break;
			case NETQUEUE_TYPE_SENDGIFT:
				xNetSendGift.cash = xEventQueueNet.code[0];
				netSend(CMD_SENDGIFT, DONT);
				break;
			case NETQUEUE_TYPE_DELGIFT:
				xNetDelGift.key = xEventQueueNet.key[0];
				netSend(CMD_DELGIFT, DONT);
				break;
			case NETQUEUE_TYPE_QUEST:
				xNetQuest.type = xEventQueueNet.action[0];
				xNetQuest.slot = xEventQueueNet.slotNum[0];
				xNetQuest.gold = xEventQueueNet.layer[0][0];
				xNetQuest.cash = xEventQueueNet.layer[0][1];
				xNetQuest.exp = xEventQueueNet.layer[0][2];
				netSend(CMD_SETQUEST, DONT);
				break;					
			case NETQUEUE_TYPE_TILE:
				xNetTile.type = xEventQueueNet.action[0];
				xNetTile.tileCode = xMap.floorInitCode[xMap.nowFloor];
				xNetTile.wallCode = xMap.wallInitCode[xMap.nowFloor];
				xNetTile.floor = xMap.nowFloor;
				netSend(CMD_SETTILE, DONT);
				break;
			case NETQUEUE_TYPE_MODELTOTALSLOT:
				netSend(CMD_SETMODELTOTALSLOT,	DONT);
				break;
			case NETQUEUE_TYPE_SETMODEL:
				xNetSetModel.state = xEventQueueNet.action[0];
				xNetSetModel.code = xEventQueueNet.code[0];
				xNetSetModel.slotNum = xEventQueueNet.slotNum[0];
				xNetSetModel.upgrade = xEventQueueNet.haveNum[0];
				xNetSetModel.key = xEventQueueNet.key[0];
				xNetSetModel.inFitting = xEventQueueNet.mapX[0];
				for(int f=0;f<16;f++)
				{
					xNetSetModel.layer[f] = xEventQueueNet.layer[0][f];
				}
				xNetSetModel.load = xEventQueueNet.open[0];
				netSend(CMD_SETMODEL,	DONT);
				break;
			case NETQUEUE_TYPE_MODELGROUPGIFT:
				xNetModelGroupGift.code = xEventQueueNet.code[0];
				netSend(CMD_MODELGROUPGIFT, DONT);
				break;
			case NETQUEUE_TYPE_SELLTABLEUPDATA:
				netSend(CMD_SELLTABLEUPDATA, DONT);
				break;
			case NETQUEUE_TYPE_ORDERRECVLIST:
				netSend(CMD_RECVORDER, DONT);
				break;
			case NETQUEUE_TYPE_ORDERLIST:
				if(xWorldMap.isFriendMap == FALSE)
					xNetGetOrder.userNum = xNetData.userNum;
				else
					xNetGetOrder.userNum = xFriendData[xFriendMap.selectDataSlotNum].userNum;
				xOrder.isNetLoad = FALSE;
				netSend(CMD_GETORDER, DONT);
				break;
			case NETQUEUE_TYPE_RANDOMFRIEND:
				netSend(CMD_RANDOMFRIEND, DONT);
				break;
			case NETQUEUE_TYPE_SETFASHIONSHOW:
				netSend(CMD_SETFASHIONSHOW,	DONT);
				break;
			case NETQUEUE_TYPE_GETFASHIONSHOWINFO:
				xNetFashionShowRankInfo.userNum = xEventQueueNet.friendNum[0];
				xNetFashionShowRankInfo.action = xEventQueueNet.action[0];
				netSend(CMD_GETFASHIONSHOWRANKINFO, DONT);
				break;
			case NETQUEUE_TYPE_VOTE:
				xNetVote.friendNum = xEventQueueNet.friendNum[0];
				netSend(CMD_VOTE, DONT);
				break;
			case NETQUEUE_TYPE_GETMODELLIST:
				xNetGetModelListFriend.friendUserNum = xEventQueueNet.friendNum[0];
				netSend(CMD_GETMODELFRIEND, DONT);
				break;
			case NETQUEUE_TYPE_MODELVOTE:
				xNetModelVote.friendUserNum = xEventQueueNet.friendNum[0];
				xNetModelVote.key = xEventQueueNet.key[0];
				netSend(CMD_MODELFRIENDVOTE, DONT);
				break;
			case NETQUEUE_TYPE_SETPUSH:
				xNetSetPush.state = xEventQueueNet.action[0];
				xNetSetPush.userNum = xEventQueueNet.friendNum[0];
				netSend(CMD_SETPUSH, DONT);
				break;
			case NETQUEUE_TYPE_RESETSOCIAL:
				netSend(CMD_SETSOCIALITEM, DONT);
				break;
			case NETQUEUE_TYPE_EXTERNALWALL:
				xNetExternalWall.state = xEventQueueNet.action[0];
				xNetExternalWall.side_index = xEventQueueNet.code[0];
				netSend(CMD_SETEXTERNALWALL, DONT);
				break;
			case NETQUEUE_TYPE_SETMODELMAIN:
				xNetSetModelMain.slot = xEventQueueNet.slotNum[0];
				xNetSetModelMain.modelKey = xModelMainSlot[xNetSetModelMain.slot].modelKey;
				xNetSetModelMain.endTime = xModelMainSlot[xNetSetModelMain.slot].endTime;
				xNetSetModelMain.state = xModelMainSlot[xNetSetModelMain.slot].state;
				netSend(CMD_SETMODELMAIN, DONT);
				break;
			case NETQUEUE_TYPE_PROFILEPHOTOUPLOAD:
                xNetProfileUpLoad.imgBufSize = xEventQueueNet.imgBufSize[0];
                for(int i = 0; i < xNetProfileUpLoad.imgBufSize; i++)
                    xNetProfileUpLoad.imgBuf[i] = xEventQueueNet.imgBuf[i];
            
                urlBuffUpLoad(xNetProfileUpLoad.imgBuf, xNetData.userNum, xNetProfileUpLoad.imgBufSize);
				break;
			case NETQUEUE_TYPE_KAKAOINVITE:
				netSend(CMD_SETKAKAOINVITE, DONT);
				break;
			case NETQUEUE_TYPE_BILL:
				netSend(CMD_BILL, DONT);
				break;
			case NETQUEUE_TYPE_SETSOUND:
				xNetSetSound.index = xEventQueueNet.code[0];
				netSend(CMD_SETSOUND, DONT);
				break;
			case NETQUEUE_TYPE_SETETC:
				netSend(CMD_SETETC, DONT);
				break;
			case NETQUEUE_TYPE_COUPON:
				sprintf(xNetCoupon.strText, "%s",xEventQueueNet.strNickName[0]);
				netSend(CMD_SETCOUPON, DONT);
				break;
            case NETQUEUE_TYPE_FORMERLISTUPDATE:
                netSend(CMD_FORMERLISTUPDATE, DONT);
                break;
            case NETQUEUE_TYPE_FORMERSTART:
                xNetFormer.key=xEventQueueNet.key[0];
                xNetFormer.startTime=xEventQueueNet.time[0];
                netSend(CMD_FORMERSTART, DONT);
                break;
            case NETQUEUE_TYPE_FORMERTAKEWEALTH:
                xNetFormer.key=xEventQueueNet.key[0];
                xNetFormer.type=xEventQueueNet.formerType[0];
                xNetFormer.wealth=xEventQueueNet.result[0];
                netSend(CMD_FORMERTAKEWEALTH, DONT);
                break;
			case NETQUEUE_TYPE_AUTOSELL:
				xNetAutoSell.gold=xEventQueueNet.GOLD[0];
				netSend(CMD_AUTOSELL, DONT);
				break;
			case NETQUEUE_TYPE_AUTOPRODUCT:
				for(int i=0;i<xEventQueueNet.item_total[0];i++)
				{
					xNetAutoProduct.item_category[i] = xEventQueueNet.item_category[0][i];
					xNetAutoProduct.item_index[i] = xEventQueueNet.item_index[0][i];
					xNetAutoProduct.item_count[i] = xEventQueueNet.item_count[0][i];
				}
				xNetAutoProduct.totalNum = xEventQueueNet.item_total[0];
//				netSend(CMD_AUTOPRODUCT, DONT);
				break;
            
            case NETQUEUE_TYPE_PRODUCTIONINFOUPDATE:
                netSend(CMD_PRODUCTIONINFOUPDATE, DONT);
                break;
            
            case NETQUEUE_TYPE_PRODUCTIONSLOTINFOUPDATE:
                netSend(CMD_PRODUCTIONSLOTINFOUPDATE, DONT);
                break;
                    
            case NETQUEUE_TYPE_PRODUCTIONREGIST:
//                netSend(CMD_PRODUCTIONREGIST, DONT);
                break;
            
            case NETQUEUE_TYPE_PRODUCTIONSLOTOPEN:
                netSend(CMD_PRODUCTIONSLOTOPEN,DONT);
                break;
                    
            case NETQUEUE_TYPE_PRODUCTIONSLOTUPDATE:
                xNetProductionSlot.type = xEventQueueNet.action[0];
                xNetProductionSlot.slot = xEventQueueNet.slotNum[0];
                xNetProductionSlot.itemcode = xEventQueueNet.ITEM_INDEX[0];
                xNetProductionSlot.time = xEventQueueNet.time[0];
                netSend(CMD_PRODUCTIONSLOTUPDATE, DONT);
                break;
                    
            case NETQUEUE_TYPE_GREENHOUSEINFOUPDATE:
                netSend(CMD_GREENHOUSEINFOUPDATE, DONT);
                break;
                    
            case NETQUEUE_TYPE_GREENHOUSESLOTINFOUPDATE:
                xNetGreenHouseSlot.type = xEventQueueNet.action[0];
                xNetGreenHouseSlot.slot = xEventQueueNet.slotNum[0];
                xNetGreenHouseSlot.ItemIndex = xEventQueueNet.ITEM_INDEX[0];
                xNetGreenHouseSlot.ItemCnt = xEventQueueNet.ITEM_COUNT[0];
                xNetGreenHouseSlot.time = xEventQueueNet.time[0];
                netSend(CMD_GREENHOUSESLOTUPDATE,DONT);
                break;
                    
            case NETQUEUE_TYPE_SPINNINGWHEELINFOUPDATE:
                netSend(CMD_SPINNINGWHEELINFOUPDATE, DONT);
                break;
                    
            case NETQUEUE_TYPE_SPINNINGWHEELSLOTINFOUPDATE:
                xNetGreenHouseSlot.type = xEventQueueNet.action[0];
                xNetGreenHouseSlot.slot = xEventQueueNet.slotNum[0];
                xNetGreenHouseSlot.ItemIndex = xEventQueueNet.ITEM_INDEX[0];
                xNetGreenHouseSlot.ItemCnt = xEventQueueNet.ITEM_COUNT[0];
                xNetGreenHouseSlot.time = xEventQueueNet.time[0];
                netSend(CMD_SPINNINGWHEELSLOTUPDATE,DONT);
                break;
                    
            case NETQUEUE_TYPE_GETCARROT:
                xNetCarrot.endTime = xEventQueueNet.end_time[0];
                netSend(CMD_GETCARROT, DONT);
                break;
            
            case NETQUEUE_TYPE_BUYDRESSCHAR:
                xNetBuyDress.DressCode = xEventQueueNet.code[0];
                netSend(CMD_BUYDRESSCHAR, DONT);
                break;
                    
            case NETQUEUE_TYPE_GETDRESSROOMINFO:
                xNetGetDressRoomInfo.type = xEventQueueNet.typeNum[0];
                netSend(CMD_GETDRESSROOMINFO,DONT);
                break;
            case NETQUEUE_TYPE_UPDATEMYDRESS:
                xNetUpdateMyDress.DRESS0 = xEventQueueNet.item_index[0][0];
                xNetUpdateMyDress.DRESS1 = xEventQueueNet.item_index[0][1];
                xNetUpdateMyDress.DRESS2 = xEventQueueNet.item_index[0][2];
                xNetUpdateMyDress.DRESS3 = xEventQueueNet.item_index[0][3];
                xNetUpdateMyDress.DRESS4 = xEventQueueNet.item_index[0][4];
                xNetUpdateMyDress.DRESS5 = xEventQueueNet.item_index[0][5];
                xNetUpdateMyDress.DRESS6 = xEventQueueNet.item_index[0][6];
                xNetUpdateMyDress.DRESS7 = xEventQueueNet.item_index[0][7];
                xNetUpdateMyDress.DRESS8 = xEventQueueNet.item_index[0][8];
                xNetUpdateMyDress.DRESS9 = xEventQueueNet.item_index[0][9];
                netSend(CMD_UPDATEMYDRESS,DONT);
                break;
///////////////////////////////////////////////////////////////////////////////////////////
//전송기 NETQUEUE 추가 LJW 2018.01.22
			case NETQUEUE_TYPE_SENDMACHINEINFO:
				netSend(CMD_SENDMACHINEINFO,DONT);
				break;
			case NETQUEUE_TYPE_SENDMACHINESLOTINFO:
				xNetSendMachineSlotInfo.bkey = xEventQueueNet.bkey[0];
				netSend(CMD_SENDMACHINESLOTINFO,DONT);
				break;
			case NETQUEUE_TYPE_SENDMACHINESLOTOPEN:
				xNetSendMachineSlotOpen.slot = xEventQueueNet.slotNum[0];
				xNetSendMachineSlotOpen.bkey = xEventQueueNet.bkey[0];
				netSend(CMD_SENDMACHINESLOTOPEN,DONT);
				break;
			case NETQUEUE_TYPE_SENDMACHINESLOTUPDATE:
				xNetSendMachineSlotUpdate.type = xEventQueueNet.typeNum[0];
				xNetSendMachineSlotUpdate.bkey = xEventQueueNet.bkey[0];
				xNetSendMachineSlotUpdate.idx = xEventQueueNet.idx[0];
				xNetSendMachineSlotUpdate.item_index = xEventQueueNet.ITEM_INDEX[0];
				xNetSendMachineSlotUpdate.item_count = xEventQueueNet.ITEM_COUNT[0];
				xNetSendMachineSlotUpdate.start_time = xEventQueueNet.start_time[0];
				xNetSendMachineSlotUpdate.end_time = xEventQueueNet.end_time[0];
				netSend(CMD_SENDMACHINESLOTUPDATE, DONT);
				break;
			case NETQUEUE_TYPE_GETDRESSINFO:
				netSend(CMD_GETDRESSINFO,DONT);
				break;
///////////////////////////////////////////////////////////////////////////////////////////
			}
			++xEventQueueNet.anyCnt[0];
		}
		
		switch(xEventQueueNet.type[0])
		{
		case NETQUEUE_TYPE_NOTICEIMGDOWNLOAD:
			switch(xNoticeWorldMap.downLoadImgState[xEventQueueNet.slotNum[0]])
			{
			case FRIENDDOWNLOADIMG_STATE_EVENT:
				sprintf(strTempS, "notice%d.ppp",xEventQueueNet.slotNum[0]);
				dataDownLoad(xNoticeWorldMap.strImgUrl[xEventQueueNet.slotNum[0]],strTempS,DATADOWNLOAD_TYPE_SDCARD);
				xNoticeWorldMap.downLoadImgState[xEventQueueNet.slotNum[0]] = FRIENDDOWNLOADIMG_STATE_DOWNING;
				xEventQueueNet.isNetOk[0] = FALSE;
				break;
			case FRIENDDOWNLOADIMG_STATE_DOWNING:

				switch(xDownLoader.state)
				{
				case DOWNLOADER_STATE_ING:
					break;
				case DOWNLOADER_STATE_ERR:
					//실패처리
					sprintf(xNoticeWorldMap.strImgUrl[xEventQueueNet.slotNum[0]],"0");
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				case DOWNLOADER_STATE_SUCCESS:						
					xNoticeWorldMap.downLoadImgState[xEventQueueNet.slotNum[0]] = FRIENDDOWNLOADIMG_STATE_OK;
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				}
				break;
			}
			break;
		case NETQUEUE_TYPE_FRIENDIMGDOWNLOAD:
			switch(xFriendData[xEventQueueNet.slotNum[0]].downLoadImgState)
			{
			case FRIENDDOWNLOADIMG_STATE_EVENT:
				sprintf(strTempS, "friend%d.ppp",xFriendData[xEventQueueNet.slotNum[0]].userNum);
				dataDownLoad(xFriendData[xEventQueueNet.slotNum[0]].strUrl,strTempS,DATADOWNLOAD_TYPE_SDCARD);
				xFriendData[xEventQueueNet.slotNum[0]].downLoadImgState = FRIENDDOWNLOADIMG_STATE_DOWNING;
				xEventQueueNet.isNetOk[0] = FALSE;
				break;
			case FRIENDDOWNLOADIMG_STATE_DOWNING:
				switch(xDownLoader.state)
				{
				case DOWNLOADER_STATE_ING:
					break;
				case DOWNLOADER_STATE_ERR:
					//실패처리
					sprintf(xFriendData[xEventQueueNet.slotNum[0]].strUrl,"0");
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				case DOWNLOADER_STATE_SUCCESS:
					xFriendData[xEventQueueNet.slotNum[0]].downLoadImgState = FRIENDDOWNLOADIMG_STATE_OK;
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				}
				break;
			}
			break;
		case NETQUEUE_TYPE_KAKAOPHOTOINIT:
			switch(xSave.kakaoPhotoState)
			{
			case FRIENDDOWNLOADIMG_STATE_EVENT:
				sprintf(strTempS, "profile.ppp");
				dataDownLoad(xKakaoData.xUserInfo.strProfileUrl,strTempS,DATADOWNLOAD_TYPE_SDCARD);
				xSave.kakaoPhotoState = FRIENDDOWNLOADIMG_STATE_DOWNING;
				xEventQueueNet.isNetOk[0] = FALSE;
				break;
			case FRIENDDOWNLOADIMG_STATE_DOWNING:
				switch(xDownLoader.state)
				{
				case DOWNLOADER_STATE_ING:
					break;
				case DOWNLOADER_STATE_ERR:
					//실패처리
					xSave.isKakaoPhoto = TRUE;
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				case DOWNLOADER_STATE_SUCCESS:
					xSave.kakaoPhotoState = FRIENDDOWNLOADIMG_STATE_OK;
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				}
				break;
			}
			break;
		case NETQUEUE_TYPE_AUTOPRODUCTSLOTUPDATE:
//			netSend(CMD_AUTOPRODUCTSLOTUPDATE, DONT);
			break;
		case NETQUEUE_TYPE_ALICESHOCK_PHOTO:
            /*
			switch(xCross.xSlot[xEventQueueNet.slotNum[0]].downLoadImgState)
			{
			case FRIENDDOWNLOADIMG_STATE_EVENT:

				sprintf(strTempS, "%s",xCross.xSlot[xEventQueueNet.slotNum[0]].strIconFileName);
				strTempS[strlen(strTempS)-1] ='p';
				strTempS[strlen(strTempS)-2] ='p';
				strTempS[strlen(strTempS)-3] ='p';
				sprintf(strTempB, "http://www.bestvsbest.net/Icon/%s",xCross.xSlot[xEventQueueNet.slotNum[0]].strIconFileName);
					
				dataDownLoad(strTempB,strTempS,DATADOWNLOAD_TYPE_SDCARD);
				xCross.xSlot[xEventQueueNet.slotNum[0]].downLoadImgState = FRIENDDOWNLOADIMG_STATE_DOWNING;
				xEventQueueNet.isNetOk[0] = FALSE;
				break;
			case FRIENDDOWNLOADIMG_STATE_DOWNING:
				
				switch(xDownLoader.state)
				{
				case DOWNLOADER_STATE_ING:
					break;
				case DOWNLOADER_STATE_ERR:
					//실패처리
					xCross.xSlot[xEventQueueNet.slotNum[0]].downLoadImgState = FRIENDDOWNLOADIMG_STATE_ERR;
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				case DOWNLOADER_STATE_SUCCESS:
					xCross.xSlot[xEventQueueNet.slotNum[0]].downLoadImgState = FRIENDDOWNLOADIMG_STATE_OK;
					xEventQueueNet.isNetOk[0] = TRUE;
					break;
				}
				break;
			}
            */
			break;
       
		}
			
		
		if(xEventQueueNet.isNetOk[0] == TRUE)
		{
			xEventQueueNet.isKeyReturn[0] = FALSE;
			outPutEventQueueNet(0);
            
		}
	}
		
	//이벤트큐연산		
	if(xEventQueue.totalNum > 0)
	{
		if(++xEventQueue.anyCnt[0] >= xEventQueue.anyCntMax[0])
		{
			xEventQueue.anyCnt[0] = xEventQueue.anyCntMax[0];
			setMapData(xEventQueue.xInteriorSlot[0].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			switch(xEventQueue.type[0])
			{
			case EVENTQUEUE_TYPE_INTERIOR:
					
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_6_INTERIOR_OK:
					case TUTO_8_INTERIOR_OK:
					case TUTO_9_INTERIOR_OK:
					case TUTO_30_INTERIOR_OK:
						if(xEventQueue.xInteriorSlot[0].codeTeam[0] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]
						   ||-xEventQueue.xInteriorSlot[0].codeTeam[0] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
							xQuestTuto.isTutoClean = TRUE;
						break;
					case TUTO_6_INTERIOR_OK2:
						xQuestTuto.isTutoClean = TRUE;
						break;
					}
				}
					
				subTemp[0] = xObj.xObjData[xMap.type][xMap.listNum].price.oriData-(xObj.xObjData[xMap.type][xMap.listNum].price.oriData*xEventQueue.xInteriorSlot[0].sale/100);
				switch(xObj.xObjData[xMap.type][xMap.listNum].priceType)
				{
				case 0:	//포인트
					if(subTemp[0] > xSaveTemp.money.oriData)
					{
						//돈부족팝업
						setPopup(POPUP_MONEYEMPTY, PLAY_PLAY, PLAY_PLAY,0, DONT);
								
						switch(xMap.type)
						{
						case INTERIOR_TYPE_DOOR:
							xMap.data[0][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = xWorldMap.doorCode;
							break;
						case INTERIOR_TYPE_PAYMENT:
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xPayMentInfo[xEventQueue.floor[0]].x][xPayMentInfo[xEventQueue.floor[0]].y] = xPayMentInfo[xEventQueue.floor[0]].interiorModeCode;
							break;
                        case INTERIOR_TYPE_PRODUCTION:
                            {
                                xFormer.count[xFormer.index]--;
                            }
                            break;
						}
					}
					else
					{
						playSnd(SND_INTERIOR_BUILD);
                        if(isSubTemp[1]==false)
                        {
                            setMoney(-subTemp[0]);
                            int mapXpos = xMap.pointX + ((xEventQueue.y[0] - xEventQueue.x[0]) * (TILEW / 2));
                            int mapYpos;
                            
                            if ((xEventQueue.y[0] + xEventQueue.x[0]) % 2 == 1)
                                mapYpos = xMap.pointY+ (((xEventQueue.y[0] + xEventQueue.x[0]) / 2) * TILEH) + (TILEH / 2);
                            else
                                mapYpos = xMap.pointY+ (((xEventQueue.y[0] + xEventQueue.x[0]) / 2) * TILEH);
                            
                            
                            setBonus(mapXpos,mapYpos,ICON_TYPE_GOLD,-subTemp[0]);
                        }
						
						switch(xMap.type)
						{
						case INTERIOR_TYPE_FLOORTILE:
							subTemp[10]=1;
							if(xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] == xMap.floorInitCode[xEventQueue.floor[0]]
							   ||xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] == 0)
								subTemp[10] = 0;
								
							if(xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] != 0)
								subTemp[10]=1;
							

							inputInventoryInterior(xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]]);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
                                
                                
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							
								
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = subTemp[0];	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							setQuest(24, 1, DONT);
							break;
						case INTERIOR_TYPE_WALLTILE:
							subTemp[10]=1;
							if(xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] == xMap.wallInitCode[xEventQueue.floor[0]]
							   ||xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] == -xMap.wallInitCode[xEventQueue.floor[0]])
								subTemp[10]=0;
								
							if(xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] != 0)
								subTemp[10]=1;
								
								
								
							inputInventoryInterior(xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]]);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = subTemp[0];	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////

							setQuest(25, 1, DONT);
							break;
						case INTERIOR_TYPE_WALLITEM:
						case INTERIOR_TYPE_SHOWWINDOW:
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = subTemp[0];	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						case INTERIOR_TYPE_PAYMENT:
							subTemp[10]=1;
							if(xPayMentInfo[xEventQueue.floor[0]].interiorModeCode == 0)
								subTemp[10] = 0;
								
							if(subTemp[10] == 1)
							{
								//기존계산대 넣고 키삭제
								xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xPayMentInfo[xEventQueue.floor[0]].x][xPayMentInfo[xEventQueue.floor[0]].y] = 0;
								//새계산대을 넣어주기 키입력
								xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xPayMentInfo[xEventQueue.floor[0]].key;
							
							
								inputInventoryInterior(xPayMentInfo[xEventQueue.floor[0]].interiorModeCode);
								//////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.code[xEventQueueNet.totalNum] = xPayMentInfo[xEventQueue.floor[0]].interiorModeCode;
								xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
								xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
								for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
								{
									if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
										xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
								}
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
								//////////////////////////////////////////////////////////////////////////////
							}
								
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = subTemp[0];	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						case INTERIOR_TYPE_DOOR:
							//기존문 넣고 키삭제
							xMap.dataKey[0][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = 0;
							//새문을 넣어주기 키입력
							xMap.dataKey[0][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xWorldMap.doorKey;
							
							inputInventoryInterior(xWorldMap.doorCode);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xWorldMap.doorCode;
							xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xWorldMap.doorKey;
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = subTemp[0];	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						case INTERIOR_TYPE_OBJFLOOR:
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							
							
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = subTemp[0];	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						default:
                        
                            xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
                                
                                
                            /////////////////////////////////////////////////////////////////////////////
                            xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
                            xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
                            xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
                            xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
                            xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
                            xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
                            xEventQueueNet.layer[xEventQueueNet.totalNum][0] = subTemp[0];	//골드
                            xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
                            ////////////////////////////////////////////////////////////////////////////
                            break;
                            
						}
						setQuest(5, 1, xEventQueue.xInteriorSlot[0].codeTeam[0] < 0?-xEventQueue.xInteriorSlot[0].codeTeam[0]:xEventQueue.xInteriorSlot[0].codeTeam[0]);
						setQuest(6, 1, xEventQueue.xInteriorSlot[0].codeTeam[0] < 0?-xEventQueue.xInteriorSlot[0].codeTeam[0]:xEventQueue.xInteriorSlot[0].codeTeam[0]);
						
	
						int questType = xEventQueue.xInteriorSlot[0].codeTeam[0]/1000;
						int questListNum = xEventQueue.xInteriorSlot[0].codeTeam[0]%1000;
						
						if(questType < 0)
							questType = -questType;
						if(questListNum < 0)
							questListNum = -questListNum;
						setQuest(84, 1, xObj.xObjData[questType][questListNum].thema);
						
						switch(questType)
						{
						case INTERIOR_TYPE_PAYMENT:		setFiveRocksCustom("아이템","인테리어","카운터",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_FITTINGROOM:	setFiveRocksCustom("아이템","인테리어","피팅룸",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_HANGER:		setFiveRocksCustom("아이템","인테리어","옷걸이",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_ACCESSORY:	setFiveRocksCustom("아이템","인테리어","진열대",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_PRODUCTION:	setFiveRocksCustom("아이템","인테리어","생산기",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_SHOWWINDOW:	setFiveRocksCustom("아이템","인테리어","쇼윈도",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_OBJ:			setFiveRocksCustom("아이템","인테리어","바닥소품",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_WALLITEM:	setFiveRocksCustom("아이템","인테리어","벽소품",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_DOOR:		setFiveRocksCustom("아이템","인테리어","문",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_FLOORTILE:	setFiveRocksCustom("아이템","인테리어","바닥타일",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_WALLTILE:	setFiveRocksCustom("아이템","인테리어","벽타일",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_OBJFLOOR:	setFiveRocksCustom("아이템","인테리어","카페트",xObj.xObjData[questType][questListNum].strName,1);break;
						}
					}
					break;
				case 1:	//캐쉬
					if(subTemp[0] > xSaveTemp.cash.oriData)
					{
						//돈부족팝업
						setPopup(POPUP_CASHEMPTY, PLAY_PLAY, PLAY_PLAY,0, DONT);
						switch(xMap.type)
						{
						case INTERIOR_TYPE_DOOR:
							xMap.data[0][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = xWorldMap.doorCode;
							break;
						case INTERIOR_TYPE_PAYMENT:
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xPayMentInfo[xEventQueue.floor[0]].x][xPayMentInfo[xEventQueue.floor[0]].y] = xPayMentInfo[xEventQueue.floor[0]].interiorModeCode;
							break;
                        case INTERIOR_TYPE_PRODUCTION:
                            {
                                xFormer.count[xFormer.index]--;
                            }
                            break;
						}
					}
					else
					{
						playSnd(SND_INTERIOR_BUILD);
                        int mapXpos = xMap.pointX + ((xEventQueue.y[0] - xEventQueue.x[0]) * (TILEW / 2));
						int mapYpos;
						
						if ((xEventQueue.y[0] + xEventQueue.x[0]) % 2 == 1)
							mapYpos = xMap.pointY+ (((xEventQueue.y[0] + xEventQueue.x[0]) / 2) * TILEH) + (TILEH / 2);
						else
							mapYpos = xMap.pointY+ (((xEventQueue.y[0] + xEventQueue.x[0]) / 2) * TILEH);
                        if(isSubTemp[1]==false)
                        {
                            xSaveTemp.buyCashInteriorNum++;
                            setCash(-subTemp[0]);
                            
                            setBonus(mapXpos,mapYpos,ICON_TYPE_LOOK,-subTemp[0]);
                        }
						
						switch(xMap.type)
						{
						case INTERIOR_TYPE_FLOORTILE:
							subTemp[10]=1;
							if(xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] == xMap.floorInitCode[xEventQueue.floor[0]]
							   ||xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] == 0)
								subTemp[10]=0;
							if(xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] != 0)
								subTemp[10]=1;
								
								
							
							inputInventoryInterior(xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]]);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = subTemp[0];	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							setQuest(24, 1, DONT);
							break;
						case INTERIOR_TYPE_WALLTILE:
							subTemp[10]=1;
							if(xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] == xMap.wallInitCode[xEventQueue.floor[0]]
							   || xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] == -xMap.wallInitCode[xEventQueue.floor[0]])
								subTemp[10]=0;
							
							if(xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] != 0)
								subTemp[10]=1;
								

							inputInventoryInterior(xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]]);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = subTemp[0];	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							setQuest(25, 1, DONT);
							break;
						case INTERIOR_TYPE_WALLITEM:
						case INTERIOR_TYPE_SHOWWINDOW:
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = subTemp[0];	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						case INTERIOR_TYPE_PAYMENT:
							subTemp[10]=1;
							if(xPayMentInfo[xEventQueue.floor[0]].interiorModeCode == 0)
								subTemp[10] = 0;
							
							if(subTemp[10] == 1)
							{
								//기존계산대 넣고 키삭제
								xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xPayMentInfo[xEventQueue.floor[0]].x][xPayMentInfo[xEventQueue.floor[0]].y] = 0;
								//새계산대을 넣어주기 키입력
								xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xPayMentInfo[xEventQueue.floor[0]].key;
								
								
								inputInventoryInterior(xPayMentInfo[xEventQueue.floor[0]].interiorModeCode);
								//////////////////////////////////////////////////////////////////////////////
								xEventQueueNet.code[xEventQueueNet.totalNum] = xPayMentInfo[xEventQueue.floor[0]].interiorModeCode;
								xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
								xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
								for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
								{
									if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
										xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
								}
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
								//////////////////////////////////////////////////////////////////////////////
							}
							
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = subTemp[0];	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						case INTERIOR_TYPE_DOOR:
							//기존문 넣고 키삭제
							xMap.dataKey[0][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = 0;
							//새문을 넣어주기 키입력
							xMap.dataKey[0][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xWorldMap.doorKey;
							
							inputInventoryInterior(xWorldMap.doorCode);
							//////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.code[xEventQueueNet.totalNum] = xWorldMap.doorCode;
							xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
							xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
							for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
							{
								if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
									xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
							}
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
							//////////////////////////////////////////////////////////////////////////////
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xWorldMap.doorKey;
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = subTemp[0];	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						case INTERIOR_TYPE_OBJFLOOR:
							xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
							xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
							xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
							xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
							xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
							xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
							xEventQueueNet.layer[xEventQueueNet.totalNum][1] = subTemp[0];	//캐쉬
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
							////////////////////////////////////////////////////////////////////////////
							break;
						default:
                                
                                xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
                                /////////////////////////////////////////////////////////////////////////////
                                xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
                                xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
                                xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
                                xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
                                xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
                                xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
                                xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
                                xEventQueueNet.layer[xEventQueueNet.totalNum][1] = subTemp[0];	//캐쉬
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
                                ////////////////////////////////////////////////////////////////////////////
                                break;
						}
                        setQuest(5, 1, xEventQueue.xInteriorSlot[0].codeTeam[0] < 0?-xEventQueue.xInteriorSlot[0].codeTeam[0]:xEventQueue.xInteriorSlot[0].codeTeam[0]);
						setQuest(6, 1, xEventQueue.xInteriorSlot[0].codeTeam[0] < 0?-xEventQueue.xInteriorSlot[0].codeTeam[0]:xEventQueue.xInteriorSlot[0].codeTeam[0]);
												
						int questType = xEventQueue.xInteriorSlot[0].codeTeam[0]/1000;
						int questListNum = xEventQueue.xInteriorSlot[0].codeTeam[0]%1000;
						
						if(questType < 0)
							questType = -questType;
						if(questListNum < 0)
							questListNum = -questListNum;
						setQuest(84, 1, xObj.xObjData[questType][questListNum].thema);
						switch(questType)
						{
						case INTERIOR_TYPE_PAYMENT:		setFiveRocksCustom("아이템","인테리어","카운터",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_FITTINGROOM:	setFiveRocksCustom("아이템","인테리어","피팅룸",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_HANGER:		setFiveRocksCustom("아이템","인테리어","옷걸이",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_ACCESSORY:	setFiveRocksCustom("아이템","인테리어","진열대",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_PRODUCTION:	setFiveRocksCustom("아이템","인테리어","생산기",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_SHOWWINDOW:	setFiveRocksCustom("아이템","인테리어","쇼윈도",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_OBJ:			setFiveRocksCustom("아이템","인테리어","바닥소품",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_WALLITEM:	setFiveRocksCustom("아이템","인테리어","벽소품",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_DOOR:		setFiveRocksCustom("아이템","인테리어","문",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_FLOORTILE:	setFiveRocksCustom("아이템","인테리어","바닥타일",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_WALLTILE:	setFiveRocksCustom("아이템","인테리어","벽타일",xObj.xObjData[questType][questListNum].strName,1);break;
						case INTERIOR_TYPE_OBJFLOOR:	setFiveRocksCustom("아이템","인테리어","카페트",xObj.xObjData[questType][questListNum].strName,1);break;
						}
					}
					break;
				}
				break;
			case EVENTQUEUE_TYPE_INPUTINVEN:
				playSnd(SND_INTERIOR_INPUT);				
				inputInventoryInterior(xEventQueue.xInteriorSlot[0].codeTeam[0]);
				//////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueue.xInteriorSlot[0].codeTeam[0];
				xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
				xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
				for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
				{
					if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
						xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
				}
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
				//////////////////////////////////////////////////////////////////////////////
					
				/////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
				xEventQueueNet.action[xEventQueueNet.totalNum] = 2;	//0:신규1:업데이트2:삭제
															
				switch(xEventQueue.xInteriorSlot[0].codeTeam[0]<0?-xEventQueue.xInteriorSlot[0].codeTeam[0]/1000:xEventQueue.xInteriorSlot[0].codeTeam[0]/1000)
				{
				case INTERIOR_TYPE_FLOORTILE:			//타일
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.startX[0]][xEventQueue.startY[0]];
					break;
				case INTERIOR_TYPE_WALLTILE:			//벽타일
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.startX[0]][xEventQueue.startY[0]];
					break;
				case INTERIOR_TYPE_WALLITEM:			//벽장식
				case INTERIOR_TYPE_DOOR:				//문
				case INTERIOR_TYPE_SHOWWINDOW:			//쇼윈도
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.startX[0]][xEventQueue.startY[0]];
					break;
				case INTERIOR_TYPE_OBJFLOOR:
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.startX[0]][xEventQueue.startY[0]];
					break;
//                case INTERIOR_TYPE_OBJ:
//                    xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.startX[0]][xEventQueue.startY[0]];
//                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONDELETE, TRUE);
//                    break;
				default:
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.startX[0]][xEventQueue.startY[0]];
					break;
				}
					
				xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.startX[0];
				xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.startY[0];
				xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
				xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
                
                
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
                    

				////////////////////////////////////////////////////////////////////////////
				break;
			case EVENTQUEUE_TYPE_OUTPUTINVEN:
				playSnd(SND_INTERIOR_BUILD);
				switch(xMap.type)
				{
				case INTERIOR_TYPE_FLOORTILE:
					if(xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] == xMap.floorInitCode[xMap.nowFloor]
						|| xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] == 0)
						subTemp[10] = 0;
					else
						subTemp[10] = 1;
						
					if(xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] != 0)
						subTemp[10] = 1;
						
						
						
						
					inputInventoryInterior(xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]]);
					//////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
					xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
					for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
					{
						if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
							xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
					}
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
					//////////////////////////////////////////////////////////////////////////////
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE0][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
                    

					////////////////////////////////////////////////////////////////////////////
					break;
				case INTERIOR_TYPE_WALLTILE:
					if(xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] == xMap.wallInitCode[xMap.nowFloor]
					   ||xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] == -xMap.wallInitCode[xMap.nowFloor])
						subTemp[10] = 0;
					else
						subTemp[10] = 1;
						
					if(xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] != 0)
						subTemp[10] = 1;
						
						
					inputInventoryInterior(xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]]);
					//////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
					xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
					for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
					{
						if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
							xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
					}
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
					//////////////////////////////////////////////////////////////////////////////
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[10];	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL0][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					break;
				case INTERIOR_TYPE_WALLITEM:
				case INTERIOR_TYPE_SHOWWINDOW:
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					break;
				case INTERIOR_TYPE_PAYMENT:
					subTemp[0] = 1;
					if(xPayMentInfo[xEventQueue.floor[0]].interiorModeCode == 0)
						subTemp[0] = 0;
						
					if(subTemp[0] == 1)
					{
						//기존계산대 넣고 키삭제
						xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xPayMentInfo[xEventQueue.floor[0]].x][xPayMentInfo[xEventQueue.floor[0]].y] = 0;
						//새계산대을 넣어주기 키입력
						xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xPayMentInfo[xEventQueue.floor[0]].key;
						
						
						inputInventoryInterior(xPayMentInfo[xEventQueue.floor[0]].interiorModeCode);
						//////////////////////////////////////////////////////////////////////////////
						xEventQueueNet.code[xEventQueueNet.totalNum] = xPayMentInfo[xEventQueue.floor[0]].interiorModeCode;
						xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
						xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
						for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
						{
							if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
								xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
						}
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
						//////////////////////////////////////////////////////////////////////////////
					}

					
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = subTemp[0];	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					break;
				case INTERIOR_TYPE_DOOR:
					//기존문 넣고 키삭제
					xMap.dataKey[0][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = 0;
					//새문을 넣어주기 키입력
					xMap.dataKey[0][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xWorldMap.doorKey;
					
					inputInventoryInterior(xWorldMap.doorCode);
					//////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = xWorldMap.doorCode;
					xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
					xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
					for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
					{
						if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
							xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
					}
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
					//////////////////////////////////////////////////////////////////////////////
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xWorldMap.doorKey;
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					break;
				case INTERIOR_TYPE_OBJFLOOR:
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					break;
				default:
                    xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
                    /////////////////////////////////////////////////////////////////////////////
                    xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
                    xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:신규1:업데이트2:삭제
                    xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
                    xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
                    xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
                    xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
                    xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
                    xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
                        
					////////////////////////////////////////////////////////////////////////////
					break;
				}
				setQuest(6, 1, xEventQueue.xInteriorSlot[0].codeTeam[0] < 0?-xEventQueue.xInteriorSlot[0].codeTeam[0]:xEventQueue.xInteriorSlot[0].codeTeam[0]);
				break;
			case EVENTQUEUE_TYPE_MOVE:
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
						case TUTO_6_INTERIOR_OK:
						case TUTO_8_INTERIOR_OK:
						case TUTO_9_INTERIOR_OK:
						case TUTO_30_INTERIOR_OK:
							if(xEventQueue.xInteriorSlot[0].codeTeam[0] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]
							   ||-xEventQueue.xInteriorSlot[0].codeTeam[0] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
								xQuestTuto.isTutoClean = TRUE;
							
							break;
						case TUTO_6_INTERIOR_OK2:
							xQuestTuto.isTutoClean = TRUE;
							break;
					}
				}

					
				playSnd(SND_INTERIOR_BUILD);
				switch(xMap.type)
				{
				case INTERIOR_TYPE_WALLITEM:
				case INTERIOR_TYPE_SHOWWINDOW:
				case INTERIOR_TYPE_DOOR:
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
					xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.startX[0]][xEventQueue.startY[0]];
					if(xEventQueue.x[0] != xEventQueue.startX[0] || xEventQueue.y[0] != xEventQueue.startY[0])
						xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.startX[0]][xEventQueue.startY[0]] = DONT;
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_WALL1][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
					{
						int showWinddowNum = getShowWindow(xEventQueue.startX[0], xEventQueue.startY[0],xEventQueue.floor[0]);
						
						xShowWindowInfo[xEventQueue.floor[0]][showWinddowNum].x = xEventQueue.x[0];
						xShowWindowInfo[xEventQueue.floor[0]][showWinddowNum].y = xEventQueue.y[0];
						xShowWindowInfo[xEventQueue.floor[0]][showWinddowNum].interiorCode = xEventQueue.xInteriorSlot[0].codeTeam[0];
						
					}
					break;
				case INTERIOR_TYPE_OBJFLOOR:
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
						
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
					xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.startX[0]][xEventQueue.startY[0]];
					
					if(xEventQueue.x[0] != xEventQueue.startX[0] || xEventQueue.y[0] != xEventQueue.startY[0])
						xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.startX[0]][xEventQueue.startY[0]] = DONT;
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_FLOORTILE1][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					break;
				default:												
					xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];
																														
					/////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.floor[xEventQueueNet.totalNum] = xEventQueue.floor[0];
					xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:신규1:업데이트2:삭제
					xEventQueueNet.code[xEventQueueNet.totalNum] = xMap.data[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
					xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.startX[0]][xEventQueue.startY[0]];
						
						
					if(xEventQueue.x[0] != xEventQueue.startX[0] || xEventQueue.y[0] != xEventQueue.startY[0])
						xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.startX[0]][xEventQueue.startY[0]] = DONT;
					xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[xEventQueue.floor[0]][MAP_TYPE_OBJ][xEventQueue.x[0]][xEventQueue.y[0]];
					xEventQueueNet.mapX[xEventQueueNet.totalNum] = xEventQueue.x[0];
					xEventQueueNet.mapY[xEventQueueNet.totalNum] = xEventQueue.y[0];
					xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 0;	//골드
					xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;	//캐쉬
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAP, FALSE);
					////////////////////////////////////////////////////////////////////////////
					xSell.selectSellTable = DONT;
					if(xMap.type == INTERIOR_TYPE_HANGER || xMap.type == INTERIOR_TYPE_ACCESSORY)
					{
						xSell.selectSellTable = getSellTable(xEventQueue.startX[0], xEventQueue.startY[0],xEventQueue.floor[0]);
						xSellTableInfo[xEventQueue.floor[0]][xSell.selectSellTable].x = xEventQueue.x[0];
						xSellTableInfo[xEventQueue.floor[0]][xSell.selectSellTable].y = xEventQueue.y[0];
						xSellTableInfo[xEventQueue.floor[0]][xSell.selectSellTable].interiorCode = xEventQueue.xInteriorSlot[0].codeTeam[0];
					}
					else if(xMap.type == INTERIOR_TYPE_FITTINGROOM)
					{
						subTemp[11] = getFittingRoom(xEventQueue.startX[0], xEventQueue.startY[0],xEventQueue.floor[0]);
						xFittingRoomInfo[xEventQueue.floor[0]].x[xEventQueue.floor[0]] = xEventQueue.x[0];
						xFittingRoomInfo[xEventQueue.floor[0]].y[xEventQueue.floor[0]] = xEventQueue.y[0];
						xFittingRoomInfo[xEventQueue.floor[0]].codeNum[xEventQueue.floor[0]] = xEventQueue.xInteriorSlot[0].codeTeam[0];						
					}
					break;
				}				
				break;
			}			
			
			//makeShopAssistant(); //LJW 샵직원 삭제 2018.02.12
			makeModelShopNpc();
			checkMapDataAstar(MAP_TYPE_OBJ,xEventQueue.floor[0]);
			outPutEventQueue(0);
			initMenuOut();
		}
	}
	
	prcTuto();
    
    
    
    
	if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
	{
		prcOrderList();
		
		
		if(xWorldMap.state == WORLDMAP_STATE_PLAY)
		{
			prcShowWindow();

			
			if(xOrder.totalNumRecv > 0)
			{
				xWorldMap.state = WORLDMAP_STATE_ORDERRECVINFO;
			}		
		}
		
		if(++xSellTableUpdata.sellUpdataTime > SELLTABLEUPDATATIME)
		{
			M_Boolean isCheck = FALSE;
			for(int i=0;i<xEventQueueNet.totalNum;i++)
			{
				if(xEventQueueNet.type[i] == NETQUEUE_TYPE_SELLTABLEUPDATA)
				{
					isCheck = TRUE;
					break;
				}
			}
			
			
			//LJW 의상판매 프로세스
			if(isCheck == FALSE)
			{
				xSellTableUpdata.sellUpdataTime = 0;
				xSellTableUpdata.total = 0;
				for(int floor=0;floor<FLOORMAX;floor++)
				{
					for(int i=0;i<SELLTABLEINFOMAX;i++)
					{
						if(xSellTableInfo[floor][i].isUpdata == TRUE)
						{
							xSellTableUpdata.floor[xSellTableUpdata.total] = floor;
							xSellTableUpdata.sellTableNum[xSellTableUpdata.total++] = i;
							xSellTableInfo[floor][i].isUpdata = FALSE;
						}
					}
				}
				if(xSellTableUpdata.total > 0)
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SELLTABLEUPDATA, FALSE);
			}
		}

		
		
		if(xCalendar.nowTime-xCalendar.gameInfoCheckTime > 10)
		{
			xCalendar.gameInfoCheckTime = xCalendar.nowTime;
			////////////////////////////////////////////////////////////
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
			////////////////////////////////////////////////////////////
		}
		
		
		if(xWorldMap.state == WORLDMAP_STATE_PLAY)
		{
			if(xInterior.buildModeTime64 != DONT)
			{
				if(xCalendar.nowTime - xInterior.buildModeTime64 > 1)
				{
					xInterior.buildModeTime64 = DONT;
					//오브젝트 검색
					setSelectTileKeyEvent(MAP_TYPE_OBJ,xMap.nowFloor);
										
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDITINTERIOR] == TRUE)
					{
						xSelectTileOne.state = SELECTTILE_STATE_DONT;
					}
					//오브젝트 찾음
					if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
					{
                        //인테리어 편집 UI 이미지 로드 KBY 2018.2.26
                        interiorbuildFreeLoad_FP(true);
						xWorldMap.state = WORLDMAP_STATE_INTERIOR;
						xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
						xInterior.buildMode = 0;
						xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
						
						xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
						xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
						
						int mapXpos,mapYpos;
						
						mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
						if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
							mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
						else
							mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
						
						setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
						
						
						xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
						xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
						
						xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = 0;
						//최종완료에서만 처리 여기서 넷처리안함
						checkBuildMapData();
					}
					else
					{
						//벽아이템 검색 검색
						setSelectTileKeyEvent(MAP_TYPE_WALL1,xMap.nowFloor);
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDITINTERIOR] == TRUE)
						{
							xSelectTileOne.state = SELECTTILE_STATE_DONT;
						}
						if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
						{
                            //인테리어 편집 UI 이미지 로드 KBY 2018.2.26
                            interiorbuildFreeLoad_FP(true);
							xWorldMap.state = WORLDMAP_STATE_INTERIOR;
							xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
							xInterior.buildMode = 0;
							xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
							
							xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
							xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
							
							int mapXpos,mapYpos;
							
							mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
							if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
							else
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
							
							setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
							
							xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
							xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
							
							xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = 0;
							//최종완료에서만 처리 여기서 넷처리안함
							checkBuildMapData();
						}
						else
						{
							//오브젝트 검색
							setSelectTileKeyEvent(MAP_TYPE_FLOORTILE1,xMap.nowFloor);
							if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDITINTERIOR] == TRUE)
							{
								xSelectTileOne.state = SELECTTILE_STATE_DONT;
							}
							//오브젝트 찾음
							if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
							{
                                //인테리어 편집 UI 이미지 로드 KBY 2018.2.26
                                interiorbuildFreeLoad_FP(true);
								xWorldMap.state = WORLDMAP_STATE_INTERIOR;
								xInterior.buildInType = INTERIORBUILD_TYPE_GAME;
								xInterior.buildMode = 0;
								xInterior.xBuildSlot.codeTeam[0] = xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY];
								
								xInterior.buildMapTileXpos = xSelectTileOne.tileNumX;
								xInterior.buildMapTileYpos = xSelectTileOne.tileNumY;
								
								int mapXpos,mapYpos;
								
								mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
								if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
								else
									mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
								
								setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
								
								
								xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos,cx);
								xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16,cy);
								
								xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE1][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = 0;
								//최종완료에서만 처리 여기서 넷처리안함
								checkBuildMapData();
							}
						}
					}
				}
			}
		}
//LJW 유행막기!!!
//		prcTrend();
	}
	
	if(xWorldMap.state != WORLDMAP_STATE_INTERIOR)
	{
		shopNpcPrc();
//		prcModelShopNpc();
		worldMapNpcPrc();
	}
	//LJW 월드맵 자동차 생성 막기
//	worldMapCarPrc();
}

void paintWorldMap()
{
    
	//printf("xQuestMain.nowNum>>%d\n",xQuestMain.nowNum);
	//printf(">>>%d\n",xSaveTemp.tired.oriData);
	
	//////////////////////////////////
	//LJW 임시로 적용 삭제할것!!!
	xWorldMap.isExternal = FALSE;
	xWorldMap.isExternalWall = FALSE;
	//////////////////////////////////
	
	if(xMap.tileInitW <8)
		xMap.tileInitW = 8;
	if(xMap.tileInitH <8)
		xMap.tileInitH = 8;
    
	//prcKakaoPhotoInit();
	
	//LJW 월드맵 진입시 출석보상 / 소셜의상 / 런웨이랭킹 막기
//	if(xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == FALSE && xWorldMap.isFriendMap == FALSE && xWorldMap.isLvUp == FALSE)
//	{
//		//출석보상
//		if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//			checkAccessBonus();
//		
//		if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//		{
//			if(xServerSell.isState == TRUE)
//				xWorldMap.state = WORLDMAP_STATE_SEVERSELL;
//		}
//		//오늘의 소셜의상
//		if(xWorldMap.isTodaySocial == TRUE)
//		{
//			if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//				checkTodaySocialFashion();
//		}
//		//런웨이 랭킹
//		if(xWorldMap.isTodayRunway == TRUE)
//		{
//			if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//				checkTodayRunway();
//		}
//		
//		if(xWorldMap.isOpen_Tnk == TRUE)
//		{
//			xWorldMap.isOpen_Tnk = FALSE;
//
//			//GData.tnkShowAD();
//		}
//	}
//LJW 여기까지
	xStaff.totalStaffSlot = xMap.totalFloor*2;
	
	xMap.totalFloor = 1;
	
	if(xMap.isOpen[0] == TRUE)
		xMap.totalFloor++;
	if(xMap.isOpen[1] == TRUE)
		xMap.totalFloor++;
			
	xMap.shopPointW = 8+xMap.extension;
	xMap.shopPointH = 8+xMap.extension;
	
	xloadImg.isLoad = FALSE;
	xloadImg.isLoadFittingF = FALSE;
	xloadImg.isLoadHairF = FALSE;
	xloadImg.isLoadFaceF = FALSE;
	
	xWorldMap.isDoorOpen = FALSE;
	
	checkDelFittingItem();
	prcInShopPer();
			
	if(xWorldMap.state == WORLDMAP_STATE_PLAY)
	{
		if(playState == PLAY_PLAY)
		{
			setSecurity(&xSaveTemp.exp, xSaveTemp.exp.oriData);
			setSecurity(&xBalanceData.expMax[xSaveTemp.lv.oriData], xBalanceData.expMax[xSaveTemp.lv.oriData].oriData);
			
			
			if(xSaveTemp.exp.oriData >= xBalanceData.expMax[xSaveTemp.lv.oriData].oriData)
			{
				setExp(-xBalanceData.expMax[xSaveTemp.lv.oriData].oriData);
				setSecurity(&xSaveTemp.lv, xSaveTemp.lv.oriData+1);
								
                playSnd(SND_LVUP_POPUP);
                setLvUp();
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_LVUP, FALSE);
                
                
                
                switch(xSaveTemp.lv.oriData)
                {
                case 5:
                case 10:
                case 15:
                case 20:
                    xSave.giftLastKey = 999;
                    gameSave(SAVE_SLOT_GAME);
                    break;
                }
                
                if(xSaveTemp.lv.oriData >= LVMAX)
                {
                    initSecurity(&xSaveTemp.lv, LVMAX);
                    initSecurity(&xSaveTemp.exp, 0);
                }
			}
		}
	}
	
    prcNetEventPhotoUrl();
	//prcQuest();
    //prcRivalQuest();
    //prcJewelQuest();
	prcExternalShake();
	prcWorldMap();
    prcFormerTimer();
    prcProductionSlotTimer();
    prcGreenHouseSlotTimer();
    prcSpinningWheelSlotTimer();
    prcCarrot();
    //prcFormerCount();
    
	setScaleRotLimit();
	///////////////////////////축소 확대 범위
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		if(xWorldMap.isFriendMap == TRUE)
		{
			switch(xQuestTuto.nowNum)
			{
				case TUTO_27_HELP_FLOORMOVE0:
					xMap.pointX = 480;
					xMap.pointY = -500;
					xWorldMap.fscale = 0.77f;
					break;
				case TUTO_27_HELP_FLOORMOVE1:
					xMap.pointX = 480;
					xMap.pointY = -500;
					xWorldMap.fscale = 0.77f;
					
					if(xWorldMap.isExternal == FALSE)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(480-320, cx);
						xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(200, cy);
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						
						xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(480+320, cx);
						xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(200, cy);
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						
						xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(480-320, cx);
						xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(800, cy);
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					else
						xWorldMap.isFriendMapFloorInfo = TRUE;
					break;
			}
		}
	}
	
	xGame.fgameScale = xWorldMap.fscale;
			
	drawWorldMap();
    
	drawFlashEff(TRUE);
	
	/*
	gSetColor(100, 100, 100);
	fillRect(0, 0, lcdW, lcdH);
	prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT]);
	for(int i=0;i<ACTLAYERMAX;i++)
		xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].img[i] = &imgActBody[i][ACT_FRONT];
	drawSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],cx-50,cy);
	reverseSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],cx+50,cy);
	*/
	
	
	int mapXpos,mapYpos;
	int x,y;
	x = 0;
	y = 0;
	
	mapXpos = xMap.pointX + (((y) - (x)) * (TILEW / 2));
	if ((y + x) % 2 == 1)
		mapYpos = xMap.pointY+ ((((y) + (x)) / 2) * TILEH) + (TILEH / 2);
	else
		mapYpos = xMap.pointY+ ((((y) + (x)) / 2) * TILEH);
	
	subTemp[XPOS] = mapXpos;
	subTemp[YPOS] = mapYpos;
	
	
	int fsInfoW = 0;
	int fsInfoH = 0;
	
	switch(gameCnt%29)
	{
	case 0:fsInfoW =0;fsInfoH =	0;break;
	case 1:fsInfoW =-0.026;fsInfoH =	0.024;break;
	case 2:fsInfoW =-0.116;fsInfoH =	0.105;break;
	case 3:fsInfoW =-0.294;fsInfoH =	0.265;break;
	case 4:fsInfoW =-0.6;fsInfoH =	0.541;break;
	case 5:fsInfoW =-1.12;fsInfoH =	1.01;break;
	case 6:fsInfoW =-2.087;fsInfoH =	1.883;break;
	case 7:fsInfoW =-7.291;fsInfoH =	6.575;break;
	case 8:fsInfoW =-12.493;fsInfoH =	11.267;break;
	case 9:fsInfoW =-13.46;fsInfoH =	12.139;break;
	case 10:fsInfoW =-13.978;fsInfoH =	12.606;break;
	case 11:fsInfoW =-14.288;fsInfoH =	12.886;break;
	case 12:fsInfoW =-14.468;fsInfoH =	13.048;break;
	case 13:fsInfoW =-14.561;fsInfoH =	13.132;break;
	case 14:fsInfoW =-14.592;fsInfoH =	13.16;break;
	case 15:fsInfoW =-14.566;fsInfoH =	13.137;break;
	case 16:fsInfoW =-14.475;fsInfoH =	13.054;break;
	case 17:fsInfoW =-14.298;fsInfoH =	12.895;break;
	case 18:fsInfoW =-13.992;fsInfoH =	12.619;break;
	case 19:fsInfoW =-13.473;fsInfoH =	12.15;break;
	case 20:fsInfoW =-12.504;fsInfoH =	11.277;break;
	case 21:fsInfoW =-7.302;fsInfoH =	6.585;break;
	case 22:fsInfoW =-2.098;fsInfoH =	1.892;break;
	case 23:fsInfoW =-1.132;fsInfoH =	1.021;break;
	case 24:fsInfoW =-0.611;fsInfoH =	0.551;break;
	case 25:fsInfoW =-0.301;fsInfoH =	0.272;break;
	case 26:fsInfoW =-0.12;fsInfoH =	0.108;break;
	case 27:fsInfoW =-0.027;fsInfoH =	0.025;break;
	case 28:fsInfoW =0;fsInfoH =	0;break;
	}
	//LJW 월드맵 패션쇼 막기
//	if(xWorldMap.isFriendMap == FALSE)
//		drawPacker(imgWorldMapFsInof, subTemp[XPOS]+115, subTemp[YPOS]+fsInfoH-20, 0, 0, imgW(imgWorldMapFsInof), imgH(imgWorldMapFsInof), VH);
	
	xTouchWorldMapFashionShow.wPos = 360;
	xTouchWorldMapFashionShow.hPos = 300;
	xTouchWorldMapFashionShow.xPos = subTemp[XPOS]+50 - xTouchWorldMapFashionShow.wPos/2;
	xTouchWorldMapFashionShow.yPos = subTemp[YPOS]+100 - xTouchWorldMapFashionShow.hPos/2;
	
	
	if(xWorldMap.state == WORLDMAP_STATE_PLAY)
	{
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_23_FASHIONSHOWSELECT:
			case TUTO_29_FASHIONSHOWRANK_MENUTOUCH:
				xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS]+115, cx);
				xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS]+70, cy);
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				break;
			}
		}
	}
	

	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchWorldMapFashionShow.xPos, xTouchWorldMapFashionShow.yPos, xTouchWorldMapFashionShow.wPos, xTouchWorldMapFashionShow.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	//LJW 월드맵 아이템샵 막기
//	if(xWorldMap.isFriendMap == FALSE)
//		drawPacker(imgWorldMapFsInof, subTemp[XPOS]-496, subTemp[YPOS]+350+fsInfoH, 0, 0, imgW(imgWorldMapFsInof), imgH(imgWorldMapFsInof), VH);
//	
//    
//	xTouchWorldMapItemShop.wPos = 400;
//	xTouchWorldMapItemShop.hPos = 180;
//	xTouchWorldMapItemShop.xPos = subTemp[XPOS]-550 - xTouchWorldMapItemShop.wPos/2;
//	xTouchWorldMapItemShop.yPos = subTemp[YPOS]+500 - xTouchWorldMapItemShop.hPos/2;
	

    /*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchWorldMapItemShop.xPos, xTouchWorldMapItemShop.yPos, xTouchWorldMapItemShop.wPos, xTouchWorldMapItemShop.hPos);
	 setAlpha(ALPHA_MAX);
     */


	xTouchWorldMapKakao.wPos = 180;
	xTouchWorldMapKakao.hPos = 180;
	xTouchWorldMapKakao.xPos = subTemp[XPOS]-300 - xTouchWorldMapKakao.wPos/2;
	xTouchWorldMapKakao.yPos = subTemp[YPOS]+1280 - xTouchWorldMapKakao.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchWorldMapKakao.xPos, xTouchWorldMapKakao.yPos, xTouchWorldMapKakao.wPos, xTouchWorldMapKakao.hPos);
	setAlpha(ALPHA_MAX);
	 */
				
	xGame.fgameScale = 1.0f;
	///////////////////////////////////////
	
	if(xWorldMap.state == WORLDMAP_STATE_PLAY)
	{
		setUiHide();
		//LJW 월드맵 미션 아이콘 막기
//		if(xWorldMap.uiHideCnt > 0)
//			drawQuestIcon();
		getUiHide();
	}
	
	/*if(xWorldMap.fscale < 0.7f)
		--xWorldMap.uiHideCnt;
	else */if(xWorldMap.isExternal == TRUE)
		--xWorldMap.uiHideCnt;
	else
		++xWorldMap.uiHideCnt;
		
	if(playState == PLAY_DIALOG && xDialog.isUiShow == FALSE)
	{
	}
	else
	{
		drawWorldMapUi();
		
		drawCashUi(FALSE);
	}
	
	
	switch(xWorldMap.state)
	{
	case WORLDMAP_STATE_ORDERRECVINFO:
		drawOrderRecv();
		break;
	case WORLDMAP_STATE_CARPARKSELECTMODE_CAR:
	case WORLDMAP_STATE_CARPARKSELECTMODE_PRODUCTIOHN:
		drawCarParkSelectMode();
		break;
	case WORLDMAP_STATE_INTERIORSHOP:
		drawInteriorShop();
		break;
    case WORLDMAP_STATE_SHOP_FP:
        drawShop_FP();
        switch(xShop_FP.state)
        {
            case SHOP_STATE_DRESSPOPUP:
                drawDressShop_PopUp_FP();
                switch(xShop_FP.state2)
                {
                    case SHOPPOPUP_STATE_POPUP:
                        drawDressShopPreview_FP();
                        break;
                }
                break;
            //의상 탭을 제외한 나머지 KBY 2018.2.27
            case SHOP_STATE_POPUP:
                
                break;
        }
        break;
	case WORLDMAP_STATE_INTERIOR:
		drawInteriorBuild();		
		break;
	case WORLDMAP_STATE_PRODUCTIONMENU:
//		drawProductionMenu();
        drawProduction_FP();
//		switch(xProductionMenu.state2)
        switch(xProduction_FP.state)
		{
		case PRODUCTIONMENU_STATE_FASTCASHPOPUP:
//			drawProductionCashPopup();
            drawProductionCashPopup_FP();
			break;
		}
			
		break;
	case WORLDMAP_STATE_SELL:
		xWorldMap.uiHideCnt = -1;
		drawSellSelectItem();
		drawSellMain();
			
		switch(xSell.state)
		{
		case SELL_STATE_CASHPOPUP:
			drawSellTableCashPopup();
			break;
		case SELL_STATE_CASHPOPUP_PRODUCTION:
			drawProductionCashPopup();
			break;
		}
		break;
	case WORLDMAP_STATE_FITTING:
		drawFitting();
		break;
	case WORLDMAP_STATE_STAFF:
		drawFitting_STAFF();
		break;
    case WORLDMAP_STATE_GREENHOUSE_FP:
        drawGreenHouse_FP();
        switch(xGreenHouse_FP.state)
        {
            case GREENHOUSE_STATE_CANCLEPOPUP:
                drawGreenHouseSlotCanclePopup_FP();
                break;
        }
        break;
    case WORLDMAP_STATE_SPINNINGWHEEL_FP:
        drawSpinningWheel_FP();
        switch(xSpinning_FP.state)
        {
            case SPINNINGWHEEL_STATE_CANCLEPOPUP:
                drawSpinningWheelSlotCanclePopup_FP();
                break;
        }
        break;
    case WORLDMAP_STATE_FITTING_FP:
		xFitting_FP.isChange = isDressChange();
        drawFitting_FP();
        break;
	case WORLDMAP_STATE_MINIGAME:
		drawMiniGame();
		
		switch(xMiniGame.state)
		{
		case MINIGAME_STATE_RESULT:
			drawMiniGameResult();
			break;
		case MINIGAME_STATE_RESULTSUB:
			drawMiniGameResultSub();
		}						
		break;
	case WORLDMAP_STATE_NOTICE:
		drawNotice();
		break;
	case WORLDMAP_STATE_NOTICEPOPUP:
		drawNoticePopup();
		break;
	case WORLDMAP_STATE_SEVERSELL:
		drawServerSell();
		break;
	case WORLDMAP_STATE_PROFILE:
		drawProfilePhoto();
		break;		
	case WORLDMAP_STATE_CARSTORAGE:
		drawCarStorage();
		break;
	case WORLDMAP_STATE_CARORDERINFO:
		drawCarOrderInfo();
		break;
	case WORLDMAP_STATE_FRIENDLIST:
//		drawFriendList();
        drawfriendList_FP();
        switch(xFriend_FP.state)
        {
            case FRIEND_FP_STATE_SEARCH:
                drawfriendSearch_FP();
                break;
        }
//		switch(xFriend.state)
//		{
//		case FRIEND_STATE_ADD:
//			drawFriendAdd();
//
//			if(xFriend.isInvite == TRUE)
//				drawFriendInvite();
//			break;
//		}
		break;
	case WORLDMAP_STATE_FRIENDORDER:
		drawFriendOrder();
		break;
	case WORLDMAP_STATE_FRIENDORDERITEM:
		drawFriendOrderItem();
		break;
    ///////////////////////////////////////////////////
    //우편함 수정 2018.2.23 KBY
	case WORLDMAP_STATE_MAIL:
//		drawMail();
        drawMail_FP();
		switch(xMail.state)
		{
		case MAIL_STATE_GIFT_RESULT:
			drawGiftShopResult();
			break;
		case MAIL_STATE_TEXTBOX:
			drawMailTextBox();
			break;
		}
		break;
	case WORLDMAP_STATE_QUESTINFO:
		if(xWorldMap.isQuestResult == FALSE)
			drawQuestInfo();
		switch(xQuestInfo.state)
		{
		case QUESTINFO_STATE_GIFTPOPUP:
			drawQuestInfoGiftPopup();
			break;
		}			
		break;
	case WORLDMAP_STATE_STAFFMAKE:
		drawStaffMake();
		break;
	case WORLDMAP_STATE_FASHIONSHOWNEW:
		switch(xFashionShow.state)
		{
		case FASHIONSHOW_STATE_MAIN:
		case FASHIONSHOW_STATE_SELECTMODEL:
		case FASHIONSHOW_STATE_DRESSCODE:
		case FASHIONSHOW_STATE_INFO:
		case FASHIONSHOW_STATE_NOTICE_MAIN:
			drawFashionShowMainNew();
			break;
		case FASHIONSHOW_STATE_FITTING:
			drawModelFitting();
			break;
		case FASHIONSHOW_STATE_RUNWAY:
		case FASHIONSHOW_STATE_RUNWAYRESULT:
		case FASHIONSHOW_STATE_RUNWAYRESULT_NETWAIT:
		case FASHIONSHOW_STATE_RANKCHANGE:
		case FASHIONSHOW_STATE_RESULTBONUS:
		case FASHIONSHOW_STATE_LICENCEOPEN:
			drawRunWay();
			break;
		}
			
		switch(xFashionShow.state)
		{
		case FASHIONSHOW_STATE_RANKCHANGE:
			drawRankChange();
			break;
		case FASHIONSHOW_STATE_RUNWAYRESULT:
			drawRunWayResult();
			break;
		case FASHIONSHOW_STATE_INFO:
			drawFashionShowInfo();
			break;
		case FASHIONSHOW_STATE_NOTICE_MAIN:
			drawNoticeFS();
			break;
		case FASHIONSHOW_STATE_DRESSCODE:
			drawDressCode();
			break;
		case FASHIONSHOW_STATE_RESULTBONUS:
			drawRunWayResultBonus();
			break;
		case FASHIONSHOW_STATE_LICENCEOPEN:
			drawFashionShowLicence();
		}
		break;
	case WORLDMAP_STATE_MODEL_FRIEND:
//		drawModelMain_FRIEND();
					
		switch(xModel.state)
		{
		case MODELCOLLECT_FRIEND_STATE_SHOP:
		case MODELCOLLECT_FRIEND_STATE_BUYPOPUP:
			drawModelShop_FRIEND();
			switch(xModel.state)
			{
			case MODELCOLLECT_FRIEND_STATE_BUYPOPUP:
				drawModelShopBuyPopup_FRIEND();
				break;
			}
			break;
		}
		break;
	case WORLDMAP_STATE_MODEL:
		switch(xModel.state)
		{
		case MODELCOLLECT_STATE_MAIN:
		case MODELCOLLECT_STATE_MAINCASTING:
		case MODELCOLLECT_STATE_MAININFO:
		case MODELCOLLECT_STATE_MAINUPGRADE:
		case MODELCOLLECT_STATE_MAINGIFTINFO:
		case MODELCOLLECT_STATE_MAINGIFTRESULT:
		case MODELCOLLECT_STATE_HELP:
//			drawModelMain();
			switch(xModel.state)
			{
			case MODELCOLLECT_STATE_MAINCASTING:
//				drawModelCasting();
				break;
			case MODELCOLLECT_STATE_MAININFO:
//				drawModelInfo();
				break;
			case MODELCOLLECT_STATE_MAINUPGRADE:
//				drawModelUpGrade();
				break;
			case MODELCOLLECT_STATE_MAINGIFTINFO:
//				drawModelMainGiftInfo();
				break;
			case MODELCOLLECT_STATE_MAINGIFTRESULT:
//				drawModelMainGiftResult();
				break;
			case MODELCOLLECT_STATE_HELP:
//				drawModelHelp();
				break;
			}
			break;
		case MODELCOLLECT_STATE_SELECTMODEL:
		case MODELCOLLECT_STATE_SELECTMODELCASTING:
//			drawModelList();
//			if(xModel.state == MODELCOLLECT_STATE_SELECTMODELCASTING)
//				drawModelCasting();
			break;
		case MODELCOLLECT_STATE_LIST:
		case MODELCOLLECT_STATE_LISTCASTING:
		case MODELCOLLECT_STATE_LISTINFO:
		case MODELCOLLECT_STATE_LISTUPGRADE:
//			drawModelList();
			switch(xModel.state)
			{
			case MODELCOLLECT_STATE_LISTCASTING:
//				drawModelCasting();
				break;
			case MODELCOLLECT_STATE_LISTINFO:
//				drawModelInfo();
				break;
			case MODELCOLLECT_STATE_LISTUPGRADE:
//				drawModelUpGrade();
				break;
			}
			break;
		case MODELCOLLECT_STATE_FITTING:
//			drawModelFitting();
			break;
		}
//		drawModelUpgradeOn();

		/*
		switch(xModel.state)
		{
		case MODELCOLLECT_STATE_MENU:
			drawModelMenuPopup();
			break;

		}
		*/
		break;
	case WORLDMAP_STATE_OPTION:
		drawOption();
		break;
	case WORLDMAP_STATE_MODELMAINGIFTINFO:
//		drawModelMainGiftInfo();
		break;
	case WORLDMAP_STATE_TODAYSOCIAL:
		drawTodaySocialFashion();
		break;
	case WORLDMAP_STATE_TODAYRUNWAY:
		drawTodayRunway();
		break;
	case WORLDMAP_STATE_SALESHOP:
		drawSaleShop();
		break;
	case WORLDMAP_STATE_COLLECTION:
		drawCollection();
			
		switch(xCollection.state)
		{
		case COLLECTION_STATE_MODELINFOPOPUP:
//			drawModelHelp();
			break;
		}
		break;
    case WORLDMAP_STATE_MILEAGESHOP:
        drawMileageShop();
        break;
    case WORLDMAP_STATE_PREPAY:
        drawPrepay();
        break;
    case WORLDMAP_STATE_PREPAYDAY:
        drawPrepayDay();
        break;
    case WORLDMAP_STATE_EVENTQUEST:
        drawEventQuest();
        break;
    case WORLDMAP_STATE_CLUBLOBBY:
        if(xClubLobby.selectMenu == CLUBLOBBY_MENU_FASHIONWEEK)
        {
            switch(xFashionWeekLobby.state)
            {
            case FASHIONWEEKLOBBY_STATE_FITTING:
                drawFitting_FASHIONWEEK();
                break;
            case FASHIONWEEKLOBBY_STATE_SETTING:
                drawFashionWeekSetting();
                break;
            case FASHIONWEEKLOBBY_STATE_SELECTMODEL:
                drawFashionWeekSelectModel();
                break;
            case FASHIONWEEKLOBBY_STATE_SETTING_FITTING:
                drawModelFitting();
                break;
            default:
                drawFashionWeekLobby();
                
                if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_GIFTINFO)
                    drawFashionWeekGiftInfo();
                break;
            }
            
            if(xFashionStudio.isInfo == true)
            {
                drawFashionStudioInfo();
            }
            
            if(xFashionWeek.isNet_Dress == true || xFashionWeek.isNet_FittingList == true || xFashionWeek.isNet_FittingUpdate == true || xFashionWeek.isNet_PangStart == true || xFashionWeek.isNet_Exp == true || xFashionWeek.isNet_Score == true)
                drawLoadingIcon(cx, cy);
        }
        else if(xClubLobby.selectMenu == CLUBLOBBY_MENU_SHOP)
        {
            switch (xClubShop.selectMenu)
            {
                case CLUBSHOP:
                    drawClubShop();
                    switch (xClubShop.state)
                    {
                        case CLUBSHOP_STATE_PLAY:
                            break;
                        case CLUBSHOP_STATE_CLUBNAMEMODIFY:
                            drawClubNameModify();
                            break;
                        default:
                            break;
                    }
                    break;
                case CLUBICONSHOP:
                    drawClubIconShop();
                    break;
                case CLUBSTORAGE:
                    drawClubStorage();
                    switch (xClubStorage.state)
                    {
                        case CLUBSTORAGE_STATE_PLAY:
                            break;
                        case CLUBSTORAGE_STATE_TAKEGIFT:
                            drawClubShopGift();
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
            
        }
        else
        {
            drawClubLobby();
            
            switch(xClubLobby.state)
            {
            case CLUBLOBBY_STATE_CHANGEICON:
                drawChangeClubIcon();
                break;
            case CLUBLOBBY_STATE_DONATION:
                drawClubDonation();
                break;
            }
            
        }
            
        break;
    case WORLDMAP_STATE_CLUBLIST:
        drawClubList();
        break;            
    case WORLDMAP_STATE_JEWELQUEST:
        drawJewelQuest();
        break;
    case WORLDMAP_STATE_JEWELRESULT:
        drawJewelResult();
        break;
    case WORLDMAP_STATE_PANG:
        for(int prcI=0;prcI<xGame.prcCnt;prcI++)
            prcPang();
        
        drawPang();
        break;
	case WORLDMAP_STATE_LULUPANG:
		switch (xLuluPang.state)
		{
			case LULUPANG_STATE_LOBBY:
				switch (xLuluPangLobby.state)
				{
					case LULUPANG_LOBBY_STATE_MAIN:
					case LULUPANG_LOBBY_STATE_RESULTBONUS:
						drawLuluPangLobby();
						break;
					case LULUPANG_LOBBY_STATE_SETTINGMODEL:
						drawLuluPangSelectModel();
						break;
					case LULUPANG_LOBBY_STATE_SETTINGFITTING:
						drawModelFitting();
						break;
					default:
						break;
				}
				switch(xLuluPangLobby.state)
				{
					case LULUPANG_LOBBY_STATE_RESULTBONUS:
						drawNoticeLuluPang();
						break;
				}
				break;
			case LULUPANG_STATE_PLAY:
				for(int prcI=0;prcI<xGame.prcCnt;prcI++)
				{
					prcPang_Solo();
				}
				drawPang_Solo();
				break;
			default:
				break;
		}
		break;
    case WORLDMAP_STATE_HOTDEAL:
        drawHotDeal();
        break;
    case WORLDMAP_STATE_RIVALWORLDMAP:
        drawRivalWorldMap();
        break;
    case WORLDMAP_STATE_RIVAL:
        drawRival();
        break;
    case WORLDMAP_STATE_RIVALINFO:
        drawRivalInfo();
        break;
    case WORLDMAP_STATE_HELPLIST:
        drawHelpList();
        break;
    case WORLDMAP_STATE_PROFILEPRC:
        if(xEventQueueNet.totalNum == 0)
        {
            xWorldMap.state = WORLDMAP_STATE_PLAY;
            openGallery(bufData, xNetData.userNum);
        }
        else
        {
            xGame.isRotate = TRUE;
            xGame.rotateNum = 360-(gameCnt%120)*3;
            drawPacker(imgLoadingIcon0, cx, cy, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
            xGame.isRotate = FALSE;
        }
        break;
    case WORLDMAP_STATE_CANDYFORMER:
        drawCandyFormer();
        break;
	case WORLDMAP_STATE_SENDMACHINE_FP:
		prcSendMachine_FP();
		drawSendMachine_FP();
		break;
	}
    

	drawBlinkEff2(0);
	drawModelEff();
	drawBlinkEff();
	drawFashionDrop();
	
	if(xWorldMap.isCashShop == TRUE)
    {
        drawShop();
//        initShop_FP();
//        shopFreeload_FP(true);
//        xWorldMap.state = WORLDMAP_STATE_SHOP_FP;
    }

	
	if(xWorldMap.isAliceShock == TRUE)
		drawAliceShock();
	
	
	
	
	
	if(xWorldMap.state == WORLDMAP_STATE_PLAY)
	{
		
	}
	else
	{
		for(int i=0;i<xQuestInfo.totalNum;i++)
		{
			if(xQuestInfo.xSlot[i].barAnyCnt != 0)
			{				
				int px = 50;
				int py = 170;
				subTemp[XPOS] = px;
				subTemp[YPOS] = py;
				
				if(xQuestInfo.xSlot[i].barAnyCnt != 0)
				{
					switch(--xQuestInfo.xSlot[i].barAnyCnt)
					{
						case 29:
						case 0:
							setAlpha(50);
							break;
						case 28:
						case 1:
							setAlpha(100);
							break;
						case 27:
						case 2:
							setAlpha(150);
							break;
						case 26:
						case 3:
							setAlpha(200);
							break;
						default:
							break;
					}
					drawPacker(imgQuestBar, subTemp[XPOS]-10, subTemp[YPOS]+2, 0, 0, imgW(imgQuestBar), imgH(imgQuestBar), VL);
					gSetColor(44, 27, 26);
					
					gDrawString(subTemp[XPOS]-10+imgW(imgQuestBar)/2, subTemp[YPOS]-2, xQuestInfo.strBarText[i], VH);
					setAlpha(ALPHA_MAX);
				}
				
				int iconNum;
				switch(xQuestInfo.xSlot[i].type)
				{
					case QUEST_TYPE_MAIN:
						iconNum = xQuestDataMain[xQuestInfo.xSlot[i].questNum].iconNum;
						break;
					case QUEST_TYPE_NORMAL:
						iconNum = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].iconNum;
						break;
				}
				
				switch(xQuestInfo.xSlot[i].type)
				{
				case QUEST_TYPE_MAIN:
					drawNpcIcon(subTemp[XPOS], subTemp[YPOS], xQuestDataMain[xQuestInfo.xSlot[i].questNum].npcCode);
					break;
				default:
					drawWorldmapQuestIcon(subTemp[XPOS], subTemp[YPOS],iconNum);
					break;
				}
				
				break;
			}
		}
	}
	
	drawBonus();
	/*
	gSetColor(255, 0, 0);
	subTemp[XPOS] = lcdW-20;
	subTemp[YPOS] = 20;
	gSetColor(0, 0, 0);
	fillRect(lcdW-180, 0, 180, 80);
	gSetColor(255,0,178);
	sprintf(strTempS, "LV:%d",xSave.lv);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VR);
	 */
	
	drawCashUi(TRUE);
	drawDropIcon();
	if(xFriendMap.isPlay == TRUE)
		drawFriendMapLoading();
			
	/*
	if(playState == PLAY_PLAY)
	{
		int shopTitleNum = checkShopTitle();
				
		if(shopTitleNum != DONT)
		{
			setShopTitle(shopTitleNum);
		}
	}
	*/
		
	drawColorPaper();
	
	switch(xWorldMap.state)
	{
	case WORLDMAP_STATE_ACCESSBONUS:
		drawAccessBonus();
		break;
    case WORLDMAP_STATE_ACCESSBONUSSHOW:
        drawAccessBonus();
        break;
	}
    
    
    
    
    
    
	
	if(xWorldMap.isSocialProfile == TRUE)
		drawSocialProfile();
	
	if(xWorldMap.isMiniProfile == TRUE)
	{
		switch(xMiniProfile.state)
		{
		case MINIPROFILE_STATE_PROFILE:
			drawMiniProFile();
			break;
		}
	}
	
	
	if(xWorldMap.isCashGift == TRUE)
	{
		//drawCashGift();
	}
	
    
    if(xPackagePopup.isPlay == true)
        drawPackagePopup();
	
	if(xWorldMap.isTrend == TRUE)
		drawTrend();
		
	if(xWorldMap.isLvUp == TRUE && playState == PLAY_PLAY)
	{
		drawBgFillRect();
		makeColorPaper(1);
		drawLvUp();
	}
    
    
    
    
	
	switch(playState)
	{
	case PLAY_MSG:
		drawPopup();
		break;
	case PLAY_DIALOG:
		drawDialog();
		break;
	}
	
	
	drawTutoInfo();
	
		
	drawEff();
	
	if(xWorldMap.isExtensionEvent == TRUE)
	{
		if(drawExtensionContract(cx,cy,xWorldMap.extensionEventAnyCnt++) == TRUE)
		{
			xWorldMap.isExtensionEvent = FALSE;
			xWorldMap.isExtensionEvent_Tile = TRUE;
			xWorldMap.extensionEventAnyCnt_Tile = 0;
		}
	}
	
	if(xWorldMap.isQuestResult == TRUE)
		drawQuestResult();
	else if(xWorldMap.isNewModel == TRUE)
//		drawNewModel();
			
	
	if(xWorldMap.isTuto == TRUE)
	{
		switch(xQuestTuto.state)
		{
		case QUEST_TUTO_WAIT:
		case QUEST_TUTO_DIALOG:
		case QUEST_TUTO_SHOW:
		case QUEST_TUTO_KEY:
		case QUEST_TUTO_RESULT:
			drawDialogTuto();
			break;
		}
	}
			
	drawFire();
		
	/*
 	for(int i=0;i<xEventQueueNet.totalNum;i++)
 	{
 		sprintf(strTempS,"네트워크Type:%d",xEventQueueNet.type[i]);
 		gSetColor(0, 0, 0);
 		fillRect(cx-50-80, 30+(i*40)-15, 160, 30);
 		gSetColor(255, 0, 0);
 		gDrawString(cx-50, 30+6+(i*40), strTempS, VH);
 	}
    */
			

	
	
	
	/*
	if(xWorldMap.state == WORLDMAP_STATE_PLAY)
	{
		int x = 100+xMap.pointX;
		int y = 800+xMap.pointY;
		xGame.fgameScale = xWorldMap.fscale*0.6f;
		gSetColor(255,255,255);
		fillRect(x-300, y-500, 600, 400);
		gSetColor(255,0,0);
		xGame.fgameScale = xWorldMap.fscale*0.8f;
		fillRect(x-300, y-300, 600, 400);
		xGame.fgameScale = xWorldMap.fscale*1.0f;
		gSetColor(0,0,0);
		fillRect(x-300, y-200, 600, 400);
		
		XFACE xFaceTemp;
		XFITTINGLAYER xFTemp;
	
		for(int f=0;f<16;f++)
			xFTemp.code[f] =DONT;
		xFaceTemp.hairNum =	1000;
		xFaceTemp.faceNum =	1000;
		xFaceTemp.faceType = FACE_TYPE_NORMAL;
		xGame.isReSizeDraw = 60;
		xGame.isReverse = TRUE;
		drawFittingBody(x-200, y, &xFTemp, &xFaceTemp, TRUE, 0);
		xGame.isReverse = FALSE;
		drawFittingBody(x+200, y, &xFTemp, &xFaceTemp, TRUE, 0);
		xGame.isReverse = FALSE;
		xGame.fgameScale = 1.f;
	}
	*/
	
	subLoading();
				
	
	/*
	gSetColor(255, 255, 255);
	fillRect(0, cy-1, lcdW, 2);
	gSetColor(255, 0, 0);
	setFontSize(8.f);
	gDrawString(cx - 100, cy, "작은폰트", VH);
	setFontSize(11.f);
	gDrawString(cx, cy, "중간폰트", VH);
	setFontSize(14.f);
	gDrawString(cx + 100, cy, "큰폰트", VH);
	
	
	setFontSize(20.f);
	gDrawString(cx + 200, cy, "큰큰폰트", VH);
	
	setFontSize(11.f);
	*/
	
	//drawDebug();
	
	
	if(xWorldMap.isCashHacking == TRUE)
	{
		xWorldMap.isCashHacking = FALSE;
		////////////////////////////////////////////////////////////
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_HACKINGCHECK, FALSE);
		////////////////////////////////////////////////////////////
	}
	
	
	if(xCalendar.isHackingCheck == TRUE)
	{
		if(xCalendar.nowTime-xCalendar.hackingCheckTime > 10)
		{
			xCalendar.hackingCheckTime = xCalendar.nowTime;
			////////////////////////////////////////////////////////////
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_TIMEHACKING, FALSE);
			////////////////////////////////////////////////////////////
		}
	}
    
//    drawImage(&imgTest[1], cx-200, cy, 0, 0, imgTest[1].w, imgTest[1].h, VH);
//    
//    xGame.isReSizeDraw=true;
//    xGame.reSize=50;
//    drawImage(&imgTest[3], cx+200, cy, 0, 0, imgTest[3].w, imgTest[3].h, VH);
//    xGame.isReSizeDraw=false;
//    
//    drawImage(&imgTest[4], cx, cy, 0, 0, imgTest[4].w, imgTest[4].h, VH);
    
    
}
//////////////////////////////////////////////////
//프로필 변경 UI 이미지 로드 및 해제 추가 KBY 2018.2.26
void profilePhotoFreeLoad_FP(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("photo_main.png", &imgPhoto[0]);
        loadImg("productionexiticon.png", &imgPhoto[1]);
        loadImg("default_btn_yesno.png", &imgPhoto[2]);
        loadImg("default_btn.png", &imgBtn);
    }
    else
    {
        freeImg(&imgPhoto[0]);
        freeImg(&imgPhoto[1]);
        freeImg(&imgPhoto[2]);
        freeImg(&imgBtn);
    }
}
///////////////////////////////////////////////////
//프로필 변경 UI 관련해서 수정함.... KBY 2018.2.26
void drawProfilePhoto()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
//	drawPacker(imgProfile3, px, py, 0, 0, imgW(imgProfile3), imgH(imgProfile3), VH);
    //여기1 KBY 2018.2.26
    drawImage(&imgPhoto[0], px, py, 0, 0, imgPhoto[0].w, imgPhoto[0].h, VH);
   
    subTemp[XPOS] = px+108;
    subTemp[YPOS] = py-88;
    
    //여기2 KBY 2018.2.26
    if(isTouchPhotoClr==false)
    {
        drawImage(&imgPhoto[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgPhoto[1].w/2, imgPhoto[1].h, VH);
    }
    else
    {
        drawImage(&imgPhoto[1], subTemp[XPOS], subTemp[YPOS], imgPhoto[1].w/2, 0, imgPhoto[1].w/2, imgPhoto[1].h, VH);
    }
    
    xTouchClr.wPos = imgPhoto[1].w/2;
    xTouchClr.hPos = imgPhoto[1].h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    //여기2 끝
	subTemp[XPOS] = px+10;
	subTemp[YPOS] = py-18;
//	drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
    if(isTouchPhotoSelect==false)
    {
        drawImage(&imgBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgBtn.w/2, imgBtn.h/2, VH);
    }
    else
    {
        drawImage(&imgBtn, subTemp[XPOS], subTemp[YPOS], imgBtn.w/2, 0, imgBtn.w/2, imgBtn.h/2, VH);
    }
    setFontSizeORI(20);
//	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "카메라롤", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS], subTemp[YPOS], "카메라롤", VH);
	xProfile.xTouchPhotoSelect.wPos = imgBtn.w/2;
	xProfile.xTouchPhotoSelect.hPos = imgBtn.h/2;
	xProfile.xTouchPhotoSelect.xPos = subTemp[XPOS]-xProfile.xTouchPhotoSelect.wPos/2;
	xProfile.xTouchPhotoSelect.yPos = subTemp[YPOS]-xProfile.xTouchPhotoSelect.hPos/2;
	
	subTemp[XPOS] = px+10;
	subTemp[YPOS] = py+52;
//	drawPacker(imgPopupBtn2, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn2)/2*(xProfile.isPhoto == FALSE ? 0:1), imgW(imgPopupBtn2), imgH(imgPopupBtn2)/2, VH);
    //여기3 KBY 2018.2.26
    if(isTouchPhotoDel==false)
    {
        drawImage(&imgPhoto[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgPhoto[2].w/2, imgPhoto[2].h/2, VH);
    }
    else
    {
        drawImage(&imgPhoto[2], subTemp[XPOS], subTemp[YPOS], imgPhoto[2].w/2, 0, imgPhoto[2].w/2, imgPhoto[2].h/2, VH);
    }
    
    gSetColor(106, 21, 97);
    gDrawString(subTemp[XPOS], subTemp[YPOS], "삭제하기", VH);
//	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "삭제하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 77, 77, 77);
			
    setFontSize(11);
	xProfile.xTouchPhotoDel.wPos = imgPhoto[2].w/2;
	xProfile.xTouchPhotoDel.hPos = imgPhoto[2].h/2;
	xProfile.xTouchPhotoDel.xPos = subTemp[XPOS]-xProfile.xTouchPhotoDel.wPos/2;
	xProfile.xTouchPhotoDel.yPos = subTemp[YPOS]-xProfile.xTouchPhotoDel.hPos/2;
    //여기3 끝
}

void worldMapCarPrc()
{
	//자동차생성
	if(gameCnt%40 == 0)
	{
		if(ranDom(0, 100) < 20)
		{
			for(int i=0;i<WORLDMAPCARMAX-3;i++)
			{
				if(xWorldMapCar[i].state == WORLDMAPCAR_STATE_DONT)
				{
					xWorldMapCar[i].state = WORLDMAPCAR_STATE_MOVE;
					if(ranDom(0, 1) == 0)
					{
						xWorldMapCar[i].x = WORLDMAPCAR_MAKEPOSX;
						xWorldMapCar[i].y = WORLDMAPCAR_MAKEPOSY;
						xWorldMapCar[i].moveType = MOVETYPE_YMINUS;
					}
					else
					{
						xWorldMapCar[i].x = WORLDMAPCAR_MAKEPOSX_2;
						xWorldMapCar[i].y = WORLDMAPCAR_MAKEPOSY_2;
						xWorldMapCar[i].moveType = MOVETYPE_YPLUS;
					}
					
					
					xWorldMapCar[i].drawX = 0;
					xWorldMapCar[i].drawY = 0;
					
					xWorldMapCar[i].type = ranDom(0,1);
					
					xWorldMapCar[i].speed = ranDom(4,4);
					
					if(xModelSkill.bonusPer[MODELSKILL_TYPE_CAR_SPEED] > 0)
						xWorldMapCar[i].speed = 5;
					
					xWorldMapCar[i].speed = xMap.speedTable[(int)xWorldMapCar[i].speed];
					break;
				}
			}
		}
	}		
	
	//자동차연산
	for(int i=0;i<WORLDMAPCARMAX;i++)
	{
		
		if(xWorldMapCar[i].state == WORLDMAPCAR_STATE_WAIT)
		{
			if(++xWorldMapCar[i].anyCnt > 30)
			{
				xWorldMapCar[i].state = WORLDMAPCAR_STATE_MOVE;
			}
		}
		else if(xWorldMapCar[i].state == WORLDMAPCAR_STATE_MOVE)
		{
			M_Boolean isStop = FALSE;
			switch(xWorldMapCar[i].moveType)
			{
				case MOVETYPE_XPLUS:
					//앞에 차가 잇을경우 스톱
					
					for(int carJ=0;carJ<WORLDMAPCARMAX;carJ++)
					{
						if(xWorldMapCar[carJ].state != WORLDMAPCAR_STATE_DONT)
						{
							
							for(int yy=0;yy<5;yy++)
							{
								if(carJ != i && xWorldMapCar[i].x+1 == xWorldMapCar[carJ].x && xWorldMapCar[i].y-yy == xWorldMapCar[carJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(carJ != i && xWorldMapCar[i].x+2 == xWorldMapCar[carJ].x && xWorldMapCar[i].y-yy == xWorldMapCar[carJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(carJ != i && xWorldMapCar[i].x+3 == xWorldMapCar[carJ].x && xWorldMapCar[i].y-yy == xWorldMapCar[carJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(carJ != i && xWorldMapCar[i].x+4 == xWorldMapCar[carJ].x && xWorldMapCar[i].y-yy == xWorldMapCar[carJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(carJ != i && xWorldMapCar[i].x+5 == xWorldMapCar[carJ].x && xWorldMapCar[i].y-yy == xWorldMapCar[carJ].y)
								{
									isStop = TRUE;
									break;
								}
							}
							if(isStop == TRUE)
								break;
						}
					}
					if(isStop == TRUE)
						continue;
					
					//앞에 사람이 있을경우 스톱
					if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y] == -3) //신호대기속성
					{
						for(int	npcJ=0;npcJ<WORLDMAPNPCMAX;npcJ++)
						{
							if(xWorldMapNpc[i].state != WORLDMAPNPC_STATE_DONT)
							{
								
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y-3)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y-2)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y-1)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y+1)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y+2)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y+3)
								{
									isStop = TRUE;
									break;
								}
								
							}
						}
					}
					if(isStop == TRUE)
						continue;
					
					if(++xWorldMapCar[i].imgCnt > 3)
						xWorldMapCar[i].imgCnt = 0;
					xWorldMapCar[i].drawX -= (float)(xWorldMapCar[i].speed * 2);
					xWorldMapCar[i].drawY += (float)(xWorldMapCar[i].speed * 1);					
					if(xWorldMapCar[i].drawX  <= -(TILEW/4))
					{
						xWorldMapCar[i].x++;
						xWorldMapCar[i].drawX = (TILEW/4);
						xWorldMapCar[i].drawY = -(TILEH/4);
					}
					
					break;
				case MOVETYPE_XMINUS:
					//앞에 차가 잇을경우 스톱
					for(int carJ=0;carJ<WORLDMAPCARMAX;carJ++)
					{
						if(xWorldMapCar[carJ].state != WORLDMAPCAR_STATE_DONT)
						{
							if(carJ != i && xWorldMapCar[i].x-1 == xWorldMapCar[carJ].x && xWorldMapCar[i].y == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x-2 == xWorldMapCar[carJ].x && xWorldMapCar[i].y == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x-3 == xWorldMapCar[carJ].x && xWorldMapCar[i].y == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x-4 == xWorldMapCar[carJ].x && xWorldMapCar[i].y == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x-5 == xWorldMapCar[carJ].x && xWorldMapCar[i].y == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}							
						}
					}
					if(isStop == TRUE)
						continue;
					//앞에 사람이 있을경우 스톱
					if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y] == -3) //신호대기속성
					{
						for(int	npcJ=0;npcJ<WORLDMAPNPCMAX;npcJ++)
						{
							if(xWorldMapNpc[i].state != WORLDMAPNPC_STATE_DONT)
							{
								
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y-3)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y-2)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y-1)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y+1)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y+2)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y == xWorldMapNpc[npcJ].y+3)
								{
									isStop = TRUE;
									break;
								}
								
							}
						}
					}
					if(isStop == TRUE)
						continue;
					//if(++xWorldMapCar[i].imgCnt > 3)
						xWorldMapCar[i].imgCnt = 0;
					xWorldMapCar[i].drawX += xWorldMapCar[i].speed * 2;
					xWorldMapCar[i].drawY -= xWorldMapCar[i].speed * 1;
					
					
					
					
					if(xWorldMapCar[i].drawX  >= (TILEW/4))
					{
						xWorldMapCar[i].x--;
						xWorldMapCar[i].drawX = -(TILEW/4);
						xWorldMapCar[i].drawY = (TILEH/4);
					}
					break;
				case MOVETYPE_YPLUS:
					//앞에 차가 잇을경우 스톱
					for(int carJ=0;carJ<WORLDMAPCARMAX;carJ++)
					{
						if(xWorldMapCar[carJ].state != WORLDMAPCAR_STATE_DONT)
						{
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y+1 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y+2 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y+3 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y+4 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y+5 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
						}
					}
					if(isStop == TRUE)
						continue;
					//앞에 사람이 있을경우 스톱
					if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y] == -3) //신호대기속성
					{
						for(int	npcJ=0;npcJ<WORLDMAPNPCMAX;npcJ++)
						{
							if(xWorldMapNpc[i].state != WORLDMAPNPC_STATE_DONT)
							{
								
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y+3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-2 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y+3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-1 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y+3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y+3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+1 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y+3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+2 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y+3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y+3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								
								
							}
						}
					}
					if(isStop == TRUE)
						continue;
					//if(++xWorldMapCar[i].imgCnt > 3)
						xWorldMapCar[i].imgCnt = 0;
					xWorldMapCar[i].drawX += xWorldMapCar[i].speed * 2;
					xWorldMapCar[i].drawY += xWorldMapCar[i].speed * 1;
					if(xWorldMapCar[i].drawY  >= (TILEH/4))
					{
						xWorldMapCar[i].y++;
						xWorldMapCar[i].drawX = -(TILEW/4);
						xWorldMapCar[i].drawY = -(TILEH/4);
					}
					break;
				case MOVETYPE_YMINUS:
					//앞에 차가 잇을경우 스톱
					for(int carJ=0;carJ<WORLDMAPCARMAX;carJ++)
					{
						if(xWorldMapCar[carJ].state != WORLDMAPCAR_STATE_DONT)
						{
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y-1 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y-2 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y-3 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y-4 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
							if(carJ != i && xWorldMapCar[i].x == xWorldMapCar[carJ].x && xWorldMapCar[i].y-5 == xWorldMapCar[carJ].y)
							{
								isStop = TRUE;
								break;
							}
						}
					}
					if(isStop == TRUE)
						continue;
					//앞에 사람이 있을경우 스톱
					if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y] == -3) //신호대기속성
					{
						for(int	npcJ=0;npcJ<WORLDMAPNPCMAX;npcJ++)
						{
							if(xWorldMapNpc[i].state != WORLDMAPNPC_STATE_DONT)
							{
								
								if(xWorldMapCar[i].x-3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y-3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-2 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y-3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x-1 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y-3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y-3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+1 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y-3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+2 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y-3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								if(xWorldMapCar[i].x+3 == xWorldMapNpc[npcJ].x && xWorldMapCar[i].y-3 == xWorldMapNpc[npcJ].y)
								{
									isStop = TRUE;
									break;
								}
								
							}
						}
					}
					if(isStop == TRUE)
						continue;
					//if(++xWorldMapCar[i].imgCnt > 3)
						xWorldMapCar[i].imgCnt = 0;
					xWorldMapCar[i].drawX -= xWorldMapCar[i].speed * 2;
					xWorldMapCar[i].drawY -= xWorldMapCar[i].speed * 1;
					if(xWorldMapCar[i].drawY  <= -(TILEH/4))
					{
						xWorldMapCar[i].y--;
						xWorldMapCar[i].drawX = (TILEW/4);
						xWorldMapCar[i].drawY = (TILEH/4);
					}
					break;
			}
			
			
			
			//도착 위치 검색 및 위치 보정
			if(xWorldMapCar[i].state != WORLDMAPCAR_STATE_WAIT && xWorldMapCar[i].drawX == 0)
			{
				//xWorldMapCar[i].drawX = 0;
				//xWorldMapCar[i].drawY = 0;
				//맵데이타 체크 이동이벤트인가확인
				if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y] == -4)
				{
					xWorldMapCar[i].state = WORLDMAPCAR_STATE_DONT;
				}
				else if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y] == -2)
				{
					//이동변경 가능 위치 확인 되돌아 가는건 하지 말자
					M_Boolean isCheckMove[4];
					isCheckMove[0] = FALSE;	//x++
					isCheckMove[1] = FALSE;	//x--
					isCheckMove[2] = FALSE;	//y++
					isCheckMove[3] = FALSE;	//y--
					
					switch(xWorldMapCar[i].moveType)
					{
						case MOVETYPE_XPLUS:
							if(xMap.data[0][5][xWorldMapCar[i].x+1][xWorldMapCar[i].y] == -1)
								isCheckMove[0] = TRUE;
							if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y+1] == -1)
								isCheckMove[2] = TRUE;
							if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y-1] == -1)
								isCheckMove[3] = TRUE;						
							break;
						case MOVETYPE_XMINUS:
							if(xMap.data[0][5][xWorldMapCar[i].x-1][xWorldMapCar[i].y] == -1)
								isCheckMove[1] = TRUE;
							if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y+1] == -1)
								isCheckMove[2] = TRUE;
							if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y-1] == -1)
								isCheckMove[3] = TRUE;						
							break;
						case MOVETYPE_YPLUS:
							if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y+1] == -1)
								isCheckMove[2] = TRUE;
							if(xMap.data[0][5][xWorldMapCar[i].x+1][xWorldMapCar[i].y] == -1)
								isCheckMove[0] = TRUE;
							if(xMap.data[0][5][xWorldMapCar[i].x-1][xWorldMapCar[i].y] == -1)
								isCheckMove[1] = TRUE;						
							break;
						case MOVETYPE_YMINUS:
							
							
							
							if(xMap.data[0][5][xWorldMapCar[i].x][xWorldMapCar[i].y-1] == -1)
							{
								isCheckMove[3] = TRUE;
							}
							if(xMap.data[0][5][xWorldMapCar[i].x+1][xWorldMapCar[i].y] == -1)
							{
								isCheckMove[0] = TRUE;
							}
							if(xMap.data[0][5][xWorldMapCar[i].x-1][xWorldMapCar[i].y] == -1)
							{
								isCheckMove[1] = TRUE;
							}
							break;
					}
					
					//int whileCnt = 0;
					int selectPos = 0;
					while (TRUE) {
						//if(++whileCnt > 100)
						//	break;
						selectPos = ranDom(0, 3);
						if(isCheckMove[selectPos] == TRUE)
						{
							switch(selectPos)
							{
								case 0:	//x++
									xWorldMapCar[i].moveType = MOVETYPE_XPLUS;break;								
								case 1:	//x--
									xWorldMapCar[i].moveType = MOVETYPE_XMINUS;break;								
								case 2:	//y++
									xWorldMapCar[i].moveType = MOVETYPE_YPLUS;break;								
								case 3:	//y--
									xWorldMapCar[i].moveType = MOVETYPE_YMINUS;break;								
							}							
							break;
						}						
					}					
				}
			}
		}
	}
	
	
}

void setWorldMapPeople()
{	
	if(xWorldMap.isFriendMap == TRUE)
	{
		xWorldMap.people = xFriendMap.lv*xFriendMap.fame;
	}
	else
	{
		xWorldMap.people = xSaveTemp.lv.oriData*xSaveTemp.fame.oriData;
	}	
				
	xWorldMap.worldMapNpcMax = 30;
}


void worldMapNpcPrc()
{
	setWorldMapPeople();
	
	xWorldMap.worldMapNpcNow = 0;
	
	for(int i=0;i<WORLDMAPNPCMAX;i++)
	{ 
		if(xWorldMapNpc[i].state != WORLDMAPNPC_STATE_DONT)
			++xWorldMap.worldMapNpcNow;
	}
	

    
    int makeCnt = getWorldmapNpcMakeTime();
	
    
    //xWorldMap.npcMakeFlowTime += xGame.prcSec;

    //npc생성
//	if(xWorldMap.worldMapNpcNow < xWorldMap.worldMapNpcMax && gameCnt%makeCnt == makeCnt-10)
//	{
//        xWorldMap.npcMakeFlowTime = 0;
//		int worldmapNpcNum;
//		M_Boolean isInShop = FALSE;
//		if(ranDom(0, 100) < xInShopPer.inShopPerTotal.oriData)
//			isInShop = TRUE;
//						
//		if(xMap.data[0][MAP_TYPE_OBJ][xWorldMap.doorMakeX][xWorldMap.doorMakeY] != 0)
//			isInShop = FALSE;
//		
//				
//		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//		{
//			switch(xQuestTuto.nowNum)
//			{
//			case TUTO_8_INTERIOR_MAKENPC:
//				if(xWorldMap.shopNpcNow == 0)
//					isInShop = TRUE;
//				break;
//			}
//		}
//		
//		
//		if(xWorldMap.shopNpcNow < 1)
//			isInShop = TRUE;
//		
//
//		//초반 텅텅빈 샵방지를 위해 3명은 기본적으로 샵앞에서 생성해 주자
//		if(isInShop == TRUE && xWorldMap.shopNpcNow < 3)
//		{
//			if(xWorldMap.doorCode >= 0)
//			{
//				worldmapNpcNum = makeWorldMapNpc(xWorldMap.doorMakeX-2,xWorldMap.doorMakeY+3,ranDom(0,7),xMap.speedTable[3],MOVETYPE_YMINUS);
//			}
//			else
//			{
//				worldmapNpcNum = makeWorldMapNpc(xWorldMap.doorMakeX-3,xWorldMap.doorMakeY-2,ranDom(0,7),xMap.speedTable[3],MOVETYPE_XPLUS);
//			}
//		}
//		else
//		{
//			switch(ranDom(0, 4))
//			{
//			case 0:
//				worldmapNpcNum = makeWorldMapNpc(18,10,ranDom(0,7),xMap.speedTable[3],MOVETYPE_YPLUS);
//				break;
//			case 1:
//				worldmapNpcNum = makeWorldMapNpc(25,10,ranDom(0,7),xMap.speedTable[3],MOVETYPE_YPLUS);
//				break;
//			case 2:
//				worldmapNpcNum = makeWorldMapNpc(10,24,ranDom(0,7),xMap.speedTable[3],MOVETYPE_XPLUS);
//				break;
//			case 3:
//				worldmapNpcNum = makeWorldMapNpc(43,11,ranDom(0,7),xMap.speedTable[3],MOVETYPE_XMINUS);
//				break;
//			case 4:
//				worldmapNpcNum = makeWorldMapNpc(13,44,ranDom(0,7),xMap.speedTable[3],MOVETYPE_YMINUS);
//				break;
//			}
//		}
//		
//		if(isInShop == TRUE)
//		{
//			xWorldMapNpc[worldmapNpcNum].isInShop = TRUE;
//		}
//		else
//		{
//			if(xTrend.itemCode[0] != DONT)
//			{
//				setMapData(xTrend.itemCode[0]);
//				if(xWorldMapNpc[worldmapNpcNum].genDer == xFashionData[xMap.type][xMap.listNum].gender)
//					xWorldMapNpc[worldmapNpcNum].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
//			}
//			if(xTrend.itemCode[1] != DONT)
//			{
//				setMapData(xTrend.itemCode[1]);
//				if(xWorldMapNpc[worldmapNpcNum].genDer == xFashionData[xMap.type][xMap.listNum].gender)
//					xWorldMapNpc[worldmapNpcNum].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
//			}
//		}
//	}
	
	//npc연산
	memset(xMap.worldMapNpc, DONT, sizeof(xMap.worldMapNpc));
	for(int i=0;i<WORLDMAPNPCMAX;i++)
	{
		switch(xWorldMapNpc[i].state)
		{
		case WORLDMAPNPC_STATE_DONT:
			break;
		case WORLDMAPNPC_STATE_MAKE:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_NORMAL);
			if(++xWorldMapNpc[i].anyCnt > 10)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_DIE:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_NORMAL);
			if(++xWorldMapNpc[i].anyCnt > 10)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_DONT;
			}
			break;
		case WORLDMAPNPC_STATE_WAIT:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_NORMAL);
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
			case MOVETYPE_YPLUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
					
				break;
			case MOVETYPE_XMINUS:
			case MOVETYPE_YMINUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			}			
				
			if(++xWorldMapNpc[i].anyCnt > 20)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_CROSSARMS:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_ANGRY);
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_CROSSARMS][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
				xWorldMapNpc[i].isActEnd = TRUE;
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_WAVINGHAND:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_SMILE);
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_WAVINGHAND][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
				xWorldMapNpc[i].isActEnd = TRUE;
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_ETC:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_NORMAL);
			if(1 == prcSprit(&xSpritNpc[xWorldMapNpc[i].etcAct][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
				xWorldMapNpc[i].isActEnd = TRUE;
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_SMILE:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_SMILE);
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_SMILE][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
				xWorldMapNpc[i].isActEnd = TRUE;
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_PHONE:
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
			case MOVETYPE_YPLUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_WORLDMAPPHONE][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			case MOVETYPE_XMINUS:
			case MOVETYPE_YMINUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_WORLDMAPPHONE][ACT_BACK],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			}
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_WATCH:
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
			case MOVETYPE_YPLUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_WATCH][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			case MOVETYPE_XMINUS:
			case MOVETYPE_YMINUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_WATCH][ACT_BACK],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			}
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_SEE:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_SMILE);
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
			case MOVETYPE_YPLUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_LOOKINGAROUND][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			case MOVETYPE_XMINUS:
			case MOVETYPE_YMINUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_LOOKINGAROUND][ACT_BACK],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			}
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_TALKING:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_SMILE);
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
			case MOVETYPE_YPLUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_TALKING][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			case MOVETYPE_XMINUS:
			case MOVETYPE_YMINUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_TALKING][ACT_BACK],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			}
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_GREETING:
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_SMILE);
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
			case MOVETYPE_YPLUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_GREETING][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			case MOVETYPE_XMINUS:
			case MOVETYPE_YMINUS:
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_GREETING][ACT_BACK],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame))
					xWorldMapNpc[i].isActEnd = TRUE;
				break;
			}
			if(xWorldMapNpc[i].isActEnd == TRUE)
			{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MOVE;
				xWorldMapNpc[i].nowFrame = 0;
				xWorldMapNpc[i].nowDelay = 0;
			}
			break;
		case WORLDMAPNPC_STATE_MOVE:
			if((xWorldMapNpc[i].x == xWorldMap.doorMakeX && xWorldMapNpc[i].y == xWorldMap.doorMakeY)
			   ||(xWorldMapNpc[i].x == xWorldMap.doorMakeX-1 && xWorldMapNpc[i].y == xWorldMap.doorMakeY)
			   ||(xWorldMapNpc[i].x == xWorldMap.doorMakeX && xWorldMapNpc[i].y == xWorldMap.doorMakeY-1))
			{
				if(xWorldMapNpc[i].isInShop == TRUE || xWorldMapNpc[i].isOutShop == TRUE)
					xWorldMap.isDoorOpen = TRUE;
			}
			setFace(&xWorldMapNpc[i].xFace, FACE_TYPE_NORMAL);
			xMap.worldMapNpc[xWorldMapNpc[i].x][xWorldMapNpc[i].y] = i;
											
				
			if(xWorldMapNpc[i].speed == xMap.speedTable[1])
			{
				if(gameCnt%2==0)
					++xWorldMapNpc[i].imgCnt;
			}
			else if(xWorldMapNpc[i].speed == xMap.speedTable[2])
			{
				++xWorldMapNpc[i].imgCnt;
			}
			else if(xWorldMapNpc[i].speed == xMap.speedTable[3])
			{
				xWorldMapNpc[i].imgCnt +=2;
			}
			
			if(xWorldMapNpc[i].imgCnt > 19)
				xWorldMapNpc[i].imgCnt = 0;
			
			//스프라이트 그리는 곳
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
			case MOVETYPE_YPLUS:
				prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame);
				break;
			case MOVETYPE_XMINUS:
			case MOVETYPE_YMINUS:
				prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_BACK],&xWorldMapNpc[i].nowDelay,&xWorldMapNpc[i].nowFrame);
				break;
			}
			//이동 관련한 것
			switch(xWorldMapNpc[i].moveType)
			{
			case MOVETYPE_XPLUS:
				xWorldMapNpc[i].drawX -= (float)(xWorldMapNpc[i].speed * 2);
				xWorldMapNpc[i].drawY += (float)(xWorldMapNpc[i].speed * 1);
				if(xWorldMapNpc[i].drawX  <= -(TILEW/4))
				{
					xWorldMapNpc[i].x++;
					xWorldMapNpc[i].drawX = (TILEW/4);
					xWorldMapNpc[i].drawY = -(TILEH/4);
				}
				
				break;
			case MOVETYPE_XMINUS:
				xWorldMapNpc[i].drawX += (float)(xWorldMapNpc[i].speed * 2);
				xWorldMapNpc[i].drawY -= (float)(xWorldMapNpc[i].speed * 1);
				if(xWorldMapNpc[i].drawX  >= (TILEW/4))
				{
					xWorldMapNpc[i].x--;
					xWorldMapNpc[i].drawX = -(TILEW/4);
					xWorldMapNpc[i].drawY = (TILEH/4);
				}
				break;
			case MOVETYPE_YPLUS:
				xWorldMapNpc[i].drawX += (float)(xWorldMapNpc[i].speed * 2);
				xWorldMapNpc[i].drawY += (float)(xWorldMapNpc[i].speed * 1);
				if(xWorldMapNpc[i].drawY  >= (TILEH/4))
				{
					xWorldMapNpc[i].y++;
					xWorldMapNpc[i].drawX = -(TILEW/4);
					xWorldMapNpc[i].drawY = -(TILEH/4);
				}
				break;
			case MOVETYPE_YMINUS:
				xWorldMapNpc[i].drawX -= (float)(xWorldMapNpc[i].speed * 2);
				xWorldMapNpc[i].drawY -= (float)(xWorldMapNpc[i].speed * 1);
				if(xWorldMapNpc[i].drawY  <= -(TILEH/4))
				{
					xWorldMapNpc[i].y--;
					xWorldMapNpc[i].drawX = (TILEW/4);
					xWorldMapNpc[i].drawY = (TILEH/4);
				}
				break;
			}
			
			//도착 위치 검색 및 위치 보정
			if(xWorldMapNpc[i].state == WORLDMAPNPC_STATE_MOVE && xWorldMapNpc[i].drawX == 0)
			{
				M_Boolean isMove;
				M_Boolean isCheckMove[4];
				
				if(--xWorldMapNpc[i].moveTurnCnt < 0)
					xWorldMapNpc[i].moveTurnCnt = 0;
								
				isMove = FALSE;
				isCheckMove[0] = FALSE;	//x++
				isCheckMove[1] = FALSE;	//x--
				isCheckMove[2] = FALSE;	//y++
				isCheckMove[3] = FALSE;	//y--
				
				
				if(xWorldMapNpc[i].isDie == TRUE && ++xWorldMapNpc[i].dieCnt>4)
				{
				xWorldMapNpc[i].state = WORLDMAPNPC_STATE_DIE;
				xWorldMapNpc[i].actingType = NPC_ACT_STOP;
				xWorldMapNpc[i].anyCnt = 0;
				}				
				//샵내부 NPC로 편성
				else if(xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_INSHOP || xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == -WORLDMAPNPC_EVENT_INSHOP)
				{
//LJW 월드맵 NPC 생성 제거!!!
//					int perTemp = 20+xAmulet.buff[JEWELBUFF_TYPE_SEX_PORTER];
//					
//					if(xWorldMapNpc[i].genDer == 0)
//					{
//						perTemp += xModelSkill.bonusPer[MODELSKILL_TYPE_SEX_PORTER];
//						perTemp += xModelSkill.bonusPer[MODELSKILL_TYPE_SEX_PORTER_WW];
//					}
//					else
//						perTemp += xModelSkill.bonusPer[MODELSKILL_TYPE_SEX_PORTER_MM];
//					
//
//					if(xWorldMapNpc[i].xFace.hairNum < 2000 && (ranDom(0, 100) < perTemp))
//					{
//						//옵션번호
//						//0:여자,1:남자
//						//2:여자,3:여자
//						//4:남자,5:남자
//						
//						//주인공이 여자일때(여,남커플||여,여커플)
//						if(xWorldMapNpc[i].genDer == 0)
//						{
//							
//							if(ranDom(0, 100) < 50+xModelSkill.bonusPer[MODELSKILL_TYPE_SEX_PORTER_WW]-xModelSkill.bonusPer[MODELSKILL_TYPE_SEX_PORTER])
//								makeShopNpc(i,2,DONT);
//							else
//								makeShopNpc(i,0,DONT);
//						}
//						//주인공이 남자일때(남,남커플)
//						else
//							makeShopNpc(i,4,DONT);
//					}
//					else
//						makeShopNpc(i,DONT,DONT);
//					
//					xWorldMapNpc[i].state = WORLDMAPNPC_STATE_DONT;
				}
				//맵데이타 소멸이벤트인가 확인
				else if(xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_DIE)
				{
					xWorldMapNpc[i].state = WORLDMAPNPC_STATE_DIE;
					xWorldMapNpc[i].actingType = NPC_ACT_STOP;
					xWorldMapNpc[i].anyCnt = 0;
				}
				//맵데이타 체크 이동이벤트인가확인				
				else if(xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XPLUS)
				{
					isMove = TRUE;
					isCheckMove[0] = TRUE;	//x++
				}
				else if(xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XMINUS)
				{
					isMove = TRUE;
					isCheckMove[1] = TRUE;	//x--
				}
				else if(xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_YPLUS)
				{
					isMove = TRUE;
					isCheckMove[2] = TRUE;	//y++
				}
				else if(xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_YMINUS)
				{
					isMove = TRUE;
					isCheckMove[3] = TRUE;	//y--
				}								
				else if(xWorldMapNpc[i].moveTurnCnt == 0 && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XMINUS_YMINUS)
				{
					isMove = TRUE;
					xWorldMapNpc[i].moveTurnCnt = 5;
					isCheckMove[1] = TRUE;	//x--
					isCheckMove[3] = TRUE;	//y--
				}
				else if(xWorldMapNpc[i].moveTurnCnt == 0 && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XPLUS_YMINUS)
				{
					isMove = TRUE;
					xWorldMapNpc[i].moveTurnCnt = 5;
					isCheckMove[0] = TRUE;	//x++
					isCheckMove[3] = TRUE;	//y--
				}
				else if(xWorldMapNpc[i].moveTurnCnt == 0 && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XPLUS_YPLUS)
				{
					isMove = TRUE;
					xWorldMapNpc[i].moveTurnCnt = 5;
					isCheckMove[0] = TRUE;	//x++
					isCheckMove[2] = TRUE;	//y++
				}
				else if(xWorldMapNpc[i].moveTurnCnt == 0 && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XMINUS_YPLUS)
				{
					isMove = TRUE;
					xWorldMapNpc[i].moveTurnCnt = 5;
					isCheckMove[1] = TRUE;	//x--
					isCheckMove[2] = TRUE;	//y++
				}
				else if(xWorldMapNpc[i].moveType == WORLDMAPNPC_EVENT_XPLUS && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XPLUS_STOP)
				{
					xWorldMapNpc[i].isActingTurn = FALSE;
					xWorldMapNpc[i].state = WORLDMAPNPC_STATE_WAIT;
					xWorldMapNpc[i].nowFrame = 0;
					xWorldMapNpc[i].nowDelay = 0;
					xWorldMapNpc[i].anyCnt = 0;
				}
				else if(xWorldMapNpc[i].moveType == WORLDMAPNPC_EVENT_XMINUS_STOP && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_XMINUS_STOP)
				{
					xWorldMapNpc[i].isActingTurn = FALSE;
					xWorldMapNpc[i].state = WORLDMAPNPC_STATE_WAIT;
					xWorldMapNpc[i].nowFrame = 0;
					xWorldMapNpc[i].nowDelay = 0;
					xWorldMapNpc[i].anyCnt = 0;
				}
				else if(xWorldMapNpc[i].moveType == WORLDMAPNPC_EVENT_YPLUS_STOP && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_YPLUS_STOP)
				{
					xWorldMapNpc[i].isActingTurn = FALSE;
					xWorldMapNpc[i].state = WORLDMAPNPC_STATE_WAIT;
					xWorldMapNpc[i].nowFrame = 0;
					xWorldMapNpc[i].nowDelay = 0;
					xWorldMapNpc[i].anyCnt = 0;
				}
				else if(xWorldMapNpc[i].moveType == WORLDMAPNPC_EVENT_YMINUS_STOP && xMap.data[0][5][xWorldMapNpc[i].x][xWorldMapNpc[i].y] == WORLDMAPNPC_EVENT_YMINUS_STOP)
				{
					xWorldMapNpc[i].isActingTurn = FALSE;
					xWorldMapNpc[i].state = WORLDMAPNPC_STATE_WAIT;
					xWorldMapNpc[i].nowFrame = 0;
					xWorldMapNpc[i].nowDelay = 0;
					xWorldMapNpc[i].anyCnt = 0;
				}
				
					
					
				if(xWorldMapNpc[i].isOutShop == TRUE)
				{
					
					if(xMap.data[0][5][xWorldMap.doorMakeX][xWorldMap.doorMakeY] == 4)	//y좌표용
					{
						if(xWorldMapNpc[i].x == xWorldMap.doorMakeX && xWorldMapNpc[i].y == xWorldMap.doorMakeY-2)
						{
							isMove = TRUE;
							isCheckMove[0] = FALSE;
							isCheckMove[1] = FALSE;
							isCheckMove[2] = FALSE;
							isCheckMove[3] = FALSE;
							
							isCheckMove[0] = TRUE;	//x++
							isCheckMove[3] = TRUE;	//y--
						}
						else if(xWorldMapNpc[i].x == xWorldMap.doorMakeX && xWorldMapNpc[i].y == xWorldMap.doorMakeY-4)
						{
							isMove = TRUE;
							isCheckMove[0] = FALSE;
							isCheckMove[1] = FALSE;
							isCheckMove[2] = FALSE;
							isCheckMove[3] = FALSE;
							
							isCheckMove[1] = TRUE;	//x--
						}
					}
					else		//x좌표용
					{
						if(xWorldMapNpc[i].y == xWorldMap.doorMakeY && xWorldMapNpc[i].x == xWorldMap.doorMakeX-2)
						{
							isMove = TRUE;
							isCheckMove[0] = FALSE;
							isCheckMove[1] = FALSE;
							isCheckMove[2] = FALSE;
							isCheckMove[3] = FALSE;
							
							isCheckMove[1] = TRUE;	//x--
							isCheckMove[3] = TRUE;	//y--
						}
						else if(xWorldMapNpc[i].y == xWorldMap.doorMakeY && xWorldMapNpc[i].x == xWorldMap.doorMakeX-4)
						{
							isMove = TRUE;
							isCheckMove[0] = FALSE;
							isCheckMove[1] = FALSE;
							isCheckMove[2] = FALSE;
							isCheckMove[3] = FALSE;
							
							isCheckMove[2] = TRUE;	//y++
						}
					}
				}				
				//샵진입인 놈들은 빠른 경로 수정 설정
				if(xWorldMapNpc[i].isInShop == TRUE)
				{
					if(xMap.data[0][5][xWorldMap.doorMakeX][xWorldMap.doorMakeY] == 4 && xWorldMapNpc[i].x == xWorldMap.doorMakeX && xWorldMapNpc[i].y == xWorldMap.doorMakeY-2)	//y좌표용
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YPLUS;
						isMove = FALSE;
					}
					else if(xMap.data[0][5][xWorldMap.doorMakeX][xWorldMap.doorMakeY] == 4 && xWorldMapNpc[i].x == xWorldMap.doorMakeX && xWorldMapNpc[i].y == xWorldMap.doorMakeY-4)	//y좌표용
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YPLUS;
						isMove = FALSE;
					}
					else if(xMap.data[0][5][xWorldMap.doorMakeX][xWorldMap.doorMakeY] == -4 && xWorldMapNpc[i].x == xWorldMap.doorMakeX-2 && xWorldMapNpc[i].y == xWorldMap.doorMakeY)	//y좌표용
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;
						isMove = FALSE;
					}
					else if(xMap.data[0][5][xWorldMap.doorMakeX][xWorldMap.doorMakeY] == -4 && xWorldMapNpc[i].x == xWorldMap.doorMakeX-4 && xWorldMapNpc[i].y == xWorldMap.doorMakeY)	//y좌표용
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;
						isMove = FALSE;
					}
					
					
					else if(xWorldMapNpc[i].x == 13 && xWorldMapNpc[i].y == 13)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 19 && xWorldMapNpc[i].y == 13)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 26 && xWorldMapNpc[i].y == 13)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 38 && xWorldMapNpc[i].y == 13)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YPLUS;
						isMove = FALSE;
					}
					
					else if(xWorldMapNpc[i].x == 38 && xWorldMapNpc[i].y == 11)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XMINUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 26 && xWorldMapNpc[i].y == 11)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XMINUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 19 && xWorldMapNpc[i].y == 11)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XMINUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 13 && xWorldMapNpc[i].y == 11)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XMINUS;
						isMove = FALSE;
					}
					
					else if(xWorldMapNpc[i].x == 11 && xWorldMapNpc[i].y == 23)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YPLUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 11 && xWorldMapNpc[i].y == 40)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;
						isMove = FALSE;
					}
					
					
					else if(xWorldMapNpc[i].x == 21 && xWorldMapNpc[i].y == 38)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YPLUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 23 && xWorldMapNpc[i].y == 38)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YMINUS;
						isMove = FALSE;
					}
					
					
					else if(xWorldMapNpc[i].x == 50 && xWorldMapNpc[i].y == 44)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YMINUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 48 && xWorldMapNpc[i].y == 44)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_YPLUS;
						isMove = FALSE;
					}
					
					else if(xWorldMapNpc[i].x == 40 && xWorldMapNpc[i].y == 21)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XMINUS;
						isMove = FALSE;
					}
					else if(xWorldMapNpc[i].x == 40 && xWorldMapNpc[i].y == 21)
					{
						xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;
						isMove = FALSE;
					}					
				}
				
				if(isMove == TRUE)
				{
					xWorldMapNpc[i].isActingTurn = TRUE;
					//이동변경 가능 위치 확인 되돌아 가는건 하지 말자
					//int whileCnt = 0;
					int selectPos = 0;
					while (TRUE) {
						//if(++whileCnt > 100)
						//	break;
						selectPos = ranDom(0, 3);
						if(isCheckMove[selectPos] == TRUE)
						{
							switch(selectPos)
							{
							case 0:	//x++
								xWorldMapNpc[i].moveType = MOVETYPE_XPLUS;break;
							case 1:	//x--
								xWorldMapNpc[i].moveType = MOVETYPE_XMINUS;break;
							case 2:	//y++
								xWorldMapNpc[i].moveType = MOVETYPE_YPLUS;break;
							case 3:	//y--
								xWorldMapNpc[i].moveType = MOVETYPE_YMINUS;break;
							}
							break;
						}
					}
				}
				else if(xWorldMapNpc[i].state == WORLDMAPNPC_STATE_MOVE)
				{
					if(xWorldMapNpc[i].isActingTurn == TRUE)
					{
						//특정확률로 대기
						if(xWorldMapNpc[i].actingNum > 0 && ranDom(0, 100) < 2)
						{
							xWorldMapNpc[i].isActingTurn = FALSE;
							xWorldMapNpc[i].actingNum--;
							xWorldMapNpc[i].state = WORLDMAPNPC_STATE_WAIT;
							xWorldMapNpc[i].nowFrame = 0;
							xWorldMapNpc[i].nowDelay = 0;
							xWorldMapNpc[i].anyCnt = 0;
						}
						//특정확률로 두리번
						else if(xWorldMapNpc[i].actingNum > 0 && ranDom(0, 100) < 2)
						{
							xWorldMapNpc[i].isActingTurn = FALSE;
							xWorldMapNpc[i].actingNum--;
							xWorldMapNpc[i].state = WORLDMAPNPC_STATE_SEE;
							xWorldMapNpc[i].nowFrame = 0;
							xWorldMapNpc[i].nowDelay = 0;
							xWorldMapNpc[i].isActEnd = FALSE;
						}
						else if(xWorldMapNpc[i].actingNum > 0 && ranDom(0, 100) < 2)
						{
							xWorldMapNpc[i].isActingTurn = FALSE;
							xWorldMapNpc[i].actingNum--;
							xWorldMapNpc[i].state = WORLDMAPNPC_STATE_WATCH;
							xWorldMapNpc[i].nowFrame = 0;
							xWorldMapNpc[i].nowDelay = 0;
							xWorldMapNpc[i].isActEnd = FALSE;
						}
						else if(xWorldMapNpc[i].actingNum > 0 && ranDom(0, 100) < 2)
						{
							xWorldMapNpc[i].isActingTurn = FALSE;
							xWorldMapNpc[i].actingNum--;
							xWorldMapNpc[i].state = WORLDMAPNPC_STATE_PHONE;
							xWorldMapNpc[i].nowFrame = 0;
							xWorldMapNpc[i].nowDelay = 0;
							xWorldMapNpc[i].isActEnd = FALSE;
						}
						else
						{
							//바로 보는 방향을 이용하여 해당위치에 NPC가 있는지 판단하여 있으면 둘이 대화하기로 변환해주자
							switch(xWorldMapNpc[i].moveType)
							{
							case MOVETYPE_XPLUS:
								if(xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y-1] != DONT)
								{
									if(ranDom(0,100) < 50)
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_TALKING;
									else
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_GREETING;
									xWorldMapNpc[i].nowFrame = 0;
									xWorldMapNpc[i].nowDelay = 0;
									xWorldMapNpc[i].isActEnd = FALSE;
									
									if(xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y-1]].state == WORLDMAPNPC_STATE_MOVE)
									{
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y-1]].state = xWorldMapNpc[i].state;
										xWorldMapNpc[i].nowFrame = 0;
										xWorldMapNpc[i].nowDelay = 0;
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y-1]].isActEnd = FALSE;
									}
								}
								break;
							case MOVETYPE_XMINUS:
								if(xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y+1] != DONT)
								{
									if(ranDom(0,100) < 50)
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_TALKING;
									else
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_GREETING;
									xWorldMapNpc[i].nowFrame = 0;
									xWorldMapNpc[i].nowDelay = 0;
									xWorldMapNpc[i].isActEnd = FALSE;
									
									if(xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y+1]].state == WORLDMAPNPC_STATE_MOVE)
									{
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y+1]].state = xWorldMapNpc[i].state;
										xWorldMapNpc[i].nowFrame = 0;
										xWorldMapNpc[i].nowDelay = 0;
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y+1]].isActEnd = FALSE;
									}
								}
								break;
							case MOVETYPE_YPLUS:
								if(xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y+1] != DONT)
								{
									if(ranDom(0,100) < 50)
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_TALKING;
									else
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_GREETING;
									xWorldMapNpc[i].nowFrame = 0;
									xWorldMapNpc[i].nowDelay = 0;
									xWorldMapNpc[i].isActEnd = FALSE;
									
									if(xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y+1]].state == WORLDMAPNPC_STATE_MOVE)
									{
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y+1]].state = xWorldMapNpc[i].state;
										xWorldMapNpc[i].nowFrame = 0;
										xWorldMapNpc[i].nowDelay = 0;
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x+1][xWorldMapNpc[i].y+1]].isActEnd = FALSE;
									}
								}
								break;
							case MOVETYPE_YMINUS:
								if(xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y-1] != DONT)
								{
									if(ranDom(0,100) < 50)
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_TALKING;
									else
										xWorldMapNpc[i].state = WORLDMAPNPC_STATE_GREETING;
									xWorldMapNpc[i].nowFrame = 0;
									xWorldMapNpc[i].nowDelay = 0;
									xWorldMapNpc[i].isActEnd = FALSE;
									
									if(xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y-1]].state == WORLDMAPNPC_STATE_MOVE)
									{
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y-1]].state = xWorldMapNpc[i].state;
										xWorldMapNpc[i].nowFrame = 0;
										xWorldMapNpc[i].nowDelay = 0;
										xWorldMapNpc[xMap.worldMapNpc[xWorldMapNpc[i].x-1][xWorldMapNpc[i].y-1]].isActEnd = FALSE;
									}
								}
								break;
							}
							
						}
					}					
				}
			}
			break;
		}
	}
}

void setNpcStateFittingRoom(int npcNum,int floor)
{
	xShopNpc[npcNum].state = SHOPNPC_STATE_MOVE;
	xShopNpc[npcNum].nowDelay = 0;
	xShopNpc[npcNum].nowFrame = 0;
	xShopNpc[npcNum].isBuyAct[xShopNpc[npcNum].buyAct] = TRUE;
	xShopNpc[npcNum].buyAct = NPC_BUYACT_FITTINGROOM;
	
	//샵아웃 위치로 변경
	resetFittingRoomInfo(floor);
		
	if(xShopNpc[npcNum].xFace.hairNum >= 2000)
	{
		//메인npc들은 피팅룸에 들어가지 못한다
		setNpcStatePayMent(npcNum,floor);
	}
	else if(xFittingRoomInfo[floor].totalNumWait == 0)
	{
		if(xShopNpc[npcNum].isBuyAct[NPC_BUYACT_TREND] == FALSE)
			setSpeak(&xShopNpc[npcNum].xSpeak, "피팅룸이 부족하네요", SPEAKFRAMEMAX);
		//피팅룸이 없다면 예외처리 구매처리로
		setNpcStatePayMent(npcNum,floor);
	}
	else if(xShopNpc[npcNum].buyItemCode > 0 && xFashionData[xShopNpc[npcNum].buyItemCode/1000][xShopNpc[npcNum].buyItemCode%1000].gender != xShopNpc[npcNum].genDer)
	{
		//피팅룸이 없다면 예외처리 구매처리로
		setNpcStatePayMent(npcNum,floor);
	}
	else
	{
		
		int endX;
		int endY;
		int fittingRoomInfoNum=0;
		
		fittingRoomInfoNum = xFittingRoomInfo[floor].waitSlot[ranDom(0,xFittingRoomInfo[floor].totalNumWait-1)];
		
		
		xShopNpc[npcNum].actInteriorNum = fittingRoomInfoNum;
		
		
		if(xFittingRoomInfo[floor].codeNum[fittingRoomInfoNum] > 0)
		{
			endX = xFittingRoomInfo[floor].x[fittingRoomInfoNum]+1;
			endY = xFittingRoomInfo[floor].y[fittingRoomInfoNum];
			xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
		}
		else
		{
			endX = xFittingRoomInfo[floor].x[fittingRoomInfoNum];
			endY = xFittingRoomInfo[floor].y[fittingRoomInfoNum]+1;
			xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
		}
		
		
		
		if(xFittingRoomInfo[floor].state[fittingRoomInfoNum] == FITTINGROOMINFO_STATE_PLAY)
		{
			setNpcStatePayMent(npcNum,floor);
		}		
		else if(xFittingRoomInfo[floor].isAstarErr[fittingRoomInfoNum] == TRUE)
		{
			xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
			xShopNpc[npcNum].anyCnt = 0;
			setSpeak(&xShopNpc[npcNum].xSpeak, "여기 피팅룸이 막혔어요!", SPEAKFRAMEMAX);
		}
		if(xShopNpc[npcNum].state == SHOPNPC_STATE_MOVE)
		{
			//새위치 탐색
			if(setAstar(xShopNpc[npcNum].x-xMap.shopPointX, xShopNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
			{
				xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
				xShopNpc[npcNum].anyCnt = 0;
				//setSpeak(&xShopNpc[npcNum].xSpeak, "피팅룸위치탐색ERR_(개발확인)", SPEAKFRAMEMAX);
			}
			else
			{
				
				if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
					setSpeak(&xShopNpc[npcNum].xSpeak, "한번 입어 봐야지~", SPEAKFRAMEMAX);
				
				xShopNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
				xShopNpc[npcNum].bestNowCnt = 0;
				for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
				{
					xShopNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
					xShopNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
				}
				
				//다음이동
				if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_XPLUS;
				else if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_XMINUS;
				else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_YPLUS;
				else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_YMINUS;
				//해당 피팅룸에 손님npcNum등록
				xFittingRoomInfo[floor].npcNumcode[fittingRoomInfoNum] = npcNum;
				xFittingRoomInfo[floor].state[fittingRoomInfoNum] = FITTINGROOMINFO_STATE_PLAY;
			}
		}		
	}
}

void setNpcStatePayMent(int npcNum,int floor)
{
	int endX;
	int endY;
	xShopNpc[npcNum].state = SHOPNPC_STATE_MOVE;
	xShopNpc[npcNum].nowDelay = 0;
	xShopNpc[npcNum].nowFrame = 0;
	xShopNpc[npcNum].isBuyAct[xShopNpc[npcNum].buyAct] = TRUE;
	xShopNpc[npcNum].buyAct = NPC_BUYACT_PAYMENT;
	
	//샵아웃 위치로 변경
	resetPayMentInfo(floor);
	
	
	
	if(xPayMentInfo[floor].codeNum > 0)
	{
		endX = xPayMentInfo[floor].x+1;
		endY = xPayMentInfo[floor].y;
		xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
	}
	else
	{
		endX = xPayMentInfo[floor].x;
		endY = xPayMentInfo[floor].y+1;
		xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
	}
	
	if(xPayMentInfo[floor].codeNum == 0)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
		xShopNpc[npcNum].anyCnt = 0;
		setSpeak(&xShopNpc[npcNum].xSpeak, "계산대가 없네요??", SPEAKFRAMEMAX);
	}
	else if(xPayMentInfo[floor].isAstarErr == TRUE)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
		xShopNpc[npcNum].anyCnt = 0;
		//setSpeak(&xShopNpc[npcNum].xSpeak, "계산대가막힘(개발확인)", SPEAKFRAMEMAX);
	}

	
	if(xShopNpc[npcNum].state == SHOPNPC_STATE_MOVE)
	{
		//새위치 탐색
		if(setAstar(xShopNpc[npcNum].x-xMap.shopPointX, xShopNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
		{
			xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
			xShopNpc[npcNum].anyCnt = 0;
			//setSpeak(&xShopNpc[npcNum].xSpeak, "샵아웃위치탐색ERR_(개발확인)", SPEAKFRAMEMAX);
		}
		else
		{
			xShopNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
			xShopNpc[npcNum].bestNowCnt = 0;
			for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
			{
				xShopNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
				xShopNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
			}
			//다음이동
			if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_XPLUS;
			else if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_XMINUS;
			else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_YPLUS;
			else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_YMINUS;
					
			//계산등록 큐에 저장
			xPaymentAssistant[floor].xShopNpcSlot[xPaymentAssistant[floor].totalSlot++].npcNum = npcNum;
		}
	}	
}



void setNpcStateFloorUp(int npcNum,int floor)
{
	int endX;
	int endY;
	xShopNpc[npcNum].state = SHOPNPC_STATE_FLOORUPMOVE;
	xShopNpc[npcNum].nowDelay = 0;
	xShopNpc[npcNum].nowFrame = 0;
		
	//샵아웃 위치로 변경
	endX = xWorldMap.floorUpX;
	endY = xWorldMap.floorUpY;
	
	xShopNpc[npcNum].actLook = MOVETYPE_YPLUS;
	
	if(xMap.shopData[floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
		xShopNpc[npcNum].anyCnt = 0;
		setSpeak(&xShopNpc[npcNum].xSpeak, "올라갈 길이 없네!", SPEAKFRAMEMAX);
	}
	//새위치 탐색
	else if(setAstar(xShopNpc[npcNum].x-xMap.shopPointX, xShopNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
		xShopNpc[npcNum].anyCnt = 0;
		setSpeak(&xShopNpc[npcNum].xSpeak, "올라갈 길이 없네!", SPEAKFRAMEMAX);
	}
	else
	{		
		xShopNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
		xShopNpc[npcNum].bestNowCnt = 0;
		for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
		{
			xShopNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
			xShopNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
		}
		
		//다음이동
		if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_XPLUS;
		else if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_XMINUS;
		else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_YPLUS;
		else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_YMINUS;
	}
}

void setNpcStateFloorDown(int npcNum,int floor)
{
	int endX;
	int endY;
	xShopNpc[npcNum].state = SHOPNPC_STATE_FLOORDOWNMOVE;
	xShopNpc[npcNum].nowDelay = 0;
	xShopNpc[npcNum].nowFrame = 0;
	
	//샵아웃 위치로 변경
	endX = xWorldMap.floorDownX;
	endY = xWorldMap.floorDownY;
	
	xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
	
	
	if(endX == xShopNpc[npcNum].x && endY == xShopNpc[npcNum].y)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_FLOORDOWN;
		xShopNpc[npcNum].anyCnt = 0;
		
	}
	else if(xMap.shopData[floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
		xShopNpc[npcNum].anyCnt = 0;
		setSpeak(&xShopNpc[npcNum].xSpeak, "내려가기에러!", SPEAKFRAMEMAX);
	}
	//새위치 탐색
	else if(setAstar(xShopNpc[npcNum].x-xMap.shopPointX, xShopNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
		xShopNpc[npcNum].anyCnt = 0;
		setSpeak(&xShopNpc[npcNum].xSpeak, "내려가기에러!", SPEAKFRAMEMAX);
	}
	else
	{
		xShopNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
		xShopNpc[npcNum].bestNowCnt = 0;
		for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
		{
			xShopNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
			xShopNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
		}
		
		//다음이동
		if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_XPLUS;
		else if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_XMINUS;
		else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_YPLUS;
		else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
			xShopNpc[npcNum].moveType = MOVETYPE_YMINUS;
	}
}

//void setModelNpcStateFloorUp(int npcNum,int floor)
//{
//	int endX;
//	int endY;
//	xModelNpc[npcNum].state = MODELNPC_STATE_FLOORUPMOVE;
//	xModelNpc[npcNum].nowDelay = 0;
//	xModelNpc[npcNum].nowFrame = 0;
//	
//	//샵아웃 위치로 변경
//	endX = xWorldMap.floorUpX;
//	endY = xWorldMap.floorUpY;
//	
//	xModelNpc[npcNum].actLook = MOVETYPE_YPLUS;
//	
//	if(xMap.shopData[floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
//	{
//		xModelNpc[npcNum].state = MODELNPC_STATE_ASTARERR;
//		xModelNpc[npcNum].anyCnt = 0;
//		setSpeak(&xModelNpc[npcNum].xSpeak, "올라갈 길이 없네!", SPEAKFRAMEMAX);
//	}
//	//새위치 탐색
//	else if(setAstar(xModelNpc[npcNum].x-xMap.shopPointX, xModelNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
//	{
//		xModelNpc[npcNum].state = MODELNPC_STATE_ASTARERR;
//		xModelNpc[npcNum].anyCnt = 0;
//		setSpeak(&xModelNpc[npcNum].xSpeak, "올라갈 길이 없네!", SPEAKFRAMEMAX);
//	}
//	else
//	{
//		xModelNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
//		xModelNpc[npcNum].bestNowCnt = 0;
//		for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//		{
//			xModelNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//			xModelNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//		}
//		
//		//다음이동
//		if(xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt] < xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_XPLUS;
//		else if(xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt] > xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_XMINUS;
//		else if(xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt] < xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_YPLUS;
//		else if(xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt] > xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_YMINUS;
//	}
//}

//void setModelNpcStateFloorDown(int npcNum,int floor)
//{
//	int endX;
//	int endY;
//	xModelNpc[npcNum].state = MODELNPC_STATE_FLOORDOWNMOVE;
//	xModelNpc[npcNum].nowDelay = 0;
//	xModelNpc[npcNum].nowFrame = 0;
//	
//	//샵아웃 위치로 변경
//	endX = xWorldMap.floorDownX;
//	endY = xWorldMap.floorDownY;
//	
//	xModelNpc[npcNum].actLook = MOVETYPE_YMINUS;
//	
//	
//	if(endX == xModelNpc[npcNum].x && endY == xModelNpc[npcNum].y)
//	{
//		xModelNpc[npcNum].state = MODELNPC_STATE_FLOORDOWN;
//		xModelNpc[npcNum].anyCnt = 0;
//		
//	}
//	else if(xMap.shopData[floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
//	{
//		xModelNpc[npcNum].state = MODELNPC_STATE_ASTARERR;
//		xModelNpc[npcNum].anyCnt = 0;
//		setSpeak(&xModelNpc[npcNum].xSpeak, "내려가기에러!", SPEAKFRAMEMAX);
//	}
//	//새위치 탐색
//	else if(setAstar(xModelNpc[npcNum].x-xMap.shopPointX, xModelNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
//	{
//		xModelNpc[npcNum].state = MODELNPC_STATE_ASTARERR;
//		xModelNpc[npcNum].anyCnt = 0;
//		setSpeak(&xModelNpc[npcNum].xSpeak, "내려가기에러!", SPEAKFRAMEMAX);
//	}
//	else
//	{
//		xModelNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
//		xModelNpc[npcNum].bestNowCnt = 0;
//		for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//		{
//			xModelNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//			xModelNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//		}
//		
//		//다음이동
//		if(xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt] < xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_XPLUS;
//		else if(xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt] > xModelNpc[npcNum].bestX[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_XMINUS;
//		else if(xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt] < xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_YPLUS;
//		else if(xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt] > xModelNpc[npcNum].bestY[xModelNpc[npcNum].bestNowCnt+1])
//			xModelNpc[npcNum].moveType = MOVETYPE_YMINUS;
//	}
//}

void setNpcStateExit(int npcNum,int floor)
{
	int endX;
	int endY;
	//들어온위치에서 나가는거라면 예외처리해주자
	if(xShopNpc[npcNum].floor != 0)
	{
		setNpcStateFloorDown(npcNum, xShopNpc[npcNum].floor);
	}
	else if(xShopNpc[npcNum].x == xWorldMap.doorMakeX && xShopNpc[npcNum].y == xWorldMap.doorMakeY)
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_DONT;
		
		int worldmapNpcNum;
		if(xWorldMap.doorCode >= 0)
			worldmapNpcNum = makeWorldMapNpc(xShopNpc[npcNum].x,xShopNpc[npcNum].y,xShopNpc[npcNum].type,xShopNpc[npcNum].speed,MOVETYPE_XMINUS);
		else
			worldmapNpcNum = makeWorldMapNpc(xShopNpc[npcNum].x,xShopNpc[npcNum].y,xShopNpc[npcNum].type,xShopNpc[npcNum].speed,MOVETYPE_YMINUS);
		memcpy(&xWorldMapNpc[worldmapNpcNum].xFace,&xShopNpc[npcNum].xFace,sizeof(xShopNpc[npcNum].xFace));
		memcpy(&xWorldMapNpc[worldmapNpcNum].xF,&xShopNpc[npcNum].xF,sizeof(xShopNpc[npcNum].xF));
		
		
		for(int ge=0;ge<GLITTEREFFMAXSUB;ge++)
			memcpy(&xWorldMapNpc[worldmapNpcNum].xGlitterEff[ge],&xShopNpc[npcNum].xGlitterEff[ge],sizeof(xShopNpc[npcNum].xGlitterEff[ge]));
		

		xWorldMapNpc[worldmapNpcNum].modelNum = xShopNpc[npcNum].modelNum;
		
		xWorldMapNpc[worldmapNpcNum].buyItemCode = xShopNpc[npcNum].buyItemCode;
		xWorldMapNpc[worldmapNpcNum].state = WORLDMAPNPC_STATE_MOVE;
		xWorldMapNpc[worldmapNpcNum].isOutShop = TRUE;
		xWorldMapNpc[worldmapNpcNum].isInShop = FALSE;
				
		if(xShopNpc[npcNum].isPorter_man == TRUE)
		{
			xWorldMapNpc[worldmapNpcNum].isDie = TRUE;
		}
	}
	else
	{
		xShopNpc[npcNum].state = SHOPNPC_STATE_MOVE;
		xShopNpc[npcNum].nowDelay = 0;
		xShopNpc[npcNum].nowFrame = 0;
		xShopNpc[npcNum].isBuyAct[xShopNpc[npcNum].buyAct] = TRUE;
		xShopNpc[npcNum].buyAct = NPC_BUYACT_EXIT;
		
		//샵아웃 위치로 변경
		endX = xWorldMap.doorMakeX;
		endY = xWorldMap.doorMakeY;
		
		
		if(xWorldMap.doorCode >= 0)
			xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
		else
			xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
		
		if(xMap.shopData[floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
		{
			xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
			xShopNpc[npcNum].anyCnt = 0;
			setSpeak(&xShopNpc[npcNum].xSpeak, "나갈 길이 없네!", SPEAKFRAMEMAX);
		}
		//새위치 탐색
		if(xShopNpc[npcNum].state == SHOPNPC_STATE_MOVE)
		{
			if(setAstar(xShopNpc[npcNum].x-xMap.shopPointX, xShopNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
			{
				xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
				xShopNpc[npcNum].anyCnt = 0;
				setSpeak(&xShopNpc[npcNum].xSpeak, "나갈 길이 없네!", SPEAKFRAMEMAX);
			}
			else
			{
				xShopNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
				xShopNpc[npcNum].bestNowCnt = 0;
				for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
				{
					xShopNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
					xShopNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
				}
				//다음이동
				if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_XPLUS;
				else if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_XMINUS;
				else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_YPLUS;
				else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
					xShopNpc[npcNum].moveType = MOVETYPE_YMINUS;
			}
		}
	}
}

void shopNpcPrc()
{
	int endX;
	int endY;
	//npc연산
	xWorldMap.shopNpcNow = 0;
	for(int i=0;i<SHOPNPCMAX;i++)
	{
		xShopNpc[i].inOutCnt++;	//걍 테스트용 카운트 진입부터 나갈떄까찌의 카운터값 체크
		
		if(xShopNpc[i].state != SHOPNPC_STATE_DONT)
		{
			xWorldMap.shopNpcNow++;
			
			if((xShopNpc[i].x == xWorldMap.doorMakeX && xShopNpc[i].y == xWorldMap.doorMakeY)
			   ||(xShopNpc[i].x == xWorldMap.doorMakeX-1 && xShopNpc[i].y == xWorldMap.doorMakeY)
			   ||(xShopNpc[i].x == xWorldMap.doorMakeX && xShopNpc[i].y == xWorldMap.doorMakeY-1))
				xWorldMap.isDoorOpen = TRUE;
		}
//		
//		switch(xShopNpc[i].state)
//		{
//		case SHOPNPC_STATE_CALLSHOPASSISTANT_RCMD:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//			//호출중(무한검색)
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_ASSISTANTCALL][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				xShopNpc[i].isActEnd = TRUE;
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				//WAIT상태 점원 호출중
//				for(int k=0;k<SHOPASSISTANTMAX;k++)
//				{
//					int floor = xShopNpc[i].floor;
//					if(xShopAssistant[floor][k].state == SHOPASSISTANT_STATE_WAIT || xShopAssistant[floor][k].state ==SHOPASSISTANT_STATE_WAITMOVE || xShopAssistant[floor][k].state ==SHOPASSISTANT_STATE_ORDERINGMOVE)
//					{
//						xShopNpc[i].state = SHOPNPC_STATE_CALLSHOPASSISTANTWAIT_RCMD;
//						xShopNpc[i].nowDelay = 0;
//						xShopNpc[i].nowFrame = 0;
//						if(xShowWindowInfo[floor][xShopNpc[i].actInteriorNum].interiorCode >= 0)
//						{
//							xShopNpc[i].actLook = MOVETYPE_XPLUS;
//							xShopAssistant[floor][k].actLook = MOVETYPE_XMINUS;
//							endX = xShopNpc[i].x+1;
//							endY = xShopNpc[i].y;
//						}
//						else
//						{
//							xShopNpc[i].actLook = MOVETYPE_YPLUS;
//							xShopAssistant[floor][k].actLook = MOVETYPE_YMINUS;
//							endX = xShopNpc[i].x;
//							endY = xShopNpc[i].y+1;
//						}
//						
//						//점원정보등록
//						xShopAssistant[floor][k].shopNpcNum = i;
//																		
//						xShopAssistant[floor][k].state = SHOPASSISTANT_STATE_RCMDMOVE;
//						
//																		
//						
//						if(setAstar(xShopAssistant[floor][k].x-xMap.shopPointX, xShopAssistant[floor][k].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
//						{
//							//NPC예외처리
//							xShopNpc[i].state = SHOPNPC_STATE_WAIT;
//							xShopNpc[i].anyCnt = 0;
//							xShowWindowInfo[floor][xShopNpc[i].actInteriorNum].state = SHOWWINDOWINFO_STATE_WAIT;
//
//							
//							//setSpeak(&xShopNpc[i].xSpeak, "점원>손님길찾ERR_22(개발확인)", SPEAKFRAMEMAX);
//							
//							//대응NPC그냥 대기상태로 변환 제위치로 갈필요는 없단
//							xShopAssistant[floor][k].state = SHOPASSISTANT_STATE_WAIT;
//							xShopAssistant[floor][k].anyCnt = 0;
//							xShopAssistant[floor][k].nowDelay = 0;
//							xShopAssistant[floor][k].nowFrame = 0;
//						}
//						else
//						{
//							//대응NPC로 이동
//							setSpeak(&xShopAssistant[floor][k].xSpeak, "네네~\n지금 갑니다", SPEAKFRAMEMAX);
//							xShopAssistant[floor][k].state = SHOPASSISTANT_STATE_RCMDMOVE;
//							xShopAssistant[floor][k].bestTotalCnt = xAstar.totalCnt;
//							xShopAssistant[floor][k].bestNowCnt = 0;
//							for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//							{
//								xShopAssistant[floor][k].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//								xShopAssistant[floor][k].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//							}
//							
//							//다음이동
//							if(xShopAssistant[floor][k].bestX[xShopAssistant[floor][k].bestNowCnt] < xShopAssistant[floor][k].bestX[xShopAssistant[floor][k].bestNowCnt+1])
//								xShopAssistant[floor][k].moveType = MOVETYPE_XPLUS;
//							else if(xShopAssistant[floor][k].bestX[xShopAssistant[floor][k].bestNowCnt] > xShopAssistant[floor][k].bestX[xShopAssistant[floor][k].bestNowCnt+1])
//								xShopAssistant[floor][k].moveType = MOVETYPE_XMINUS;
//							else if(xShopAssistant[floor][k].bestY[xShopAssistant[floor][k].bestNowCnt] < xShopAssistant[floor][k].bestY[xShopAssistant[floor][k].bestNowCnt+1])
//								xShopAssistant[floor][i].moveType = MOVETYPE_YPLUS;
//							else if(xShopAssistant[floor][k].bestY[xShopAssistant[floor][k].bestNowCnt] > xShopAssistant[floor][k].bestY[xShopAssistant[floor][k].bestNowCnt+1])
//								xShopAssistant[floor][k].moveType = MOVETYPE_YMINUS;
//						}
//						break;
//					}
//				}
//			}
//			break;
//		case SHOPNPC_STATE_CALLSHOPASSISTANT:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//			//호출중(무한검색)
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_ASSISTANTCALL][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				xShopNpc[i].isActEnd = TRUE;
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				//WAIT상태 점원 호출중
//				for(int k=0;k<SHOPASSISTANTMAX;k++)
//				{
//					if(xShopAssistant[xShopNpc[i].floor][k].state == SHOPASSISTANT_STATE_WAIT || xShopAssistant[xShopNpc[i].floor][k].state ==SHOPASSISTANT_STATE_WAITMOVE || xShopAssistant[xShopNpc[i].floor][k].state ==SHOPASSISTANT_STATE_ORDERINGMOVE)
//					{
//						setCallShopAssistant(i,k);
//						break;
//					}
//				}
//			}
//			break;
//		case SHOPNPC_STATE_CALLSHOPASSISTANTWAIT:
//		case SHOPNPC_STATE_CALLSHOPASSISTANTWAIT_RCMD:
//			//호출대기중(올때까지 대기)
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame);
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame);
//				break;
//			}
//			break;
//		case SHOPNPC_STATE_TABLESEE:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//								
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				if(1 == prcSprit(&xSpritNpc[xShopNpc[i].subAct][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				if(1 == prcSprit(&xSpritNpc[xShopNpc[i].subAct][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			}
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				xShopNpc[i].state = SHOPNPC_STATE_TABLEBUY;
//				xShopNpc[i].moveType = xShopNpc[i].actLook;
//				xShopNpc[i].isActEnd = FALSE;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].nowFrame = 0;				
//				
//				
//				if(xShopNpc[i].buyAct == NPC_BUYACT_TREND)
//					if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
//						setSpeak(&xShopNpc[i].xSpeak, "요즘 유행하는 의상이 이건가", SPEAKFRAMEMAX);
//				
//			}
//			break;
//		case SHOPNPC_STATE_ETC:			
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				if(1 == prcSprit(&xSpritNpc[xShopNpc[i].etcAct][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				{
//					xShopNpc[i].state = xShopNpc[i].etcAct_BackUp;
//					xShopNpc[i].nowDelay = 0;
//					xShopNpc[i].nowFrame = 0;
//				}
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				if(1 == prcSprit(&xSpritNpc[xShopNpc[i].etcAct][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				{
//					xShopNpc[i].state = xShopNpc[i].etcAct_BackUp;
//					xShopNpc[i].nowDelay = 0;
//					xShopNpc[i].nowFrame = 0;
//				}
//				break;
//			}
//			break;
//		case SHOPNPC_STATE_CHAIR_EVENTFAIL:
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_ANGRY][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				xShopNpc[i].isActEnd = TRUE;
//				
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				xShopNpc[i].nowFrame = 0;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].isActEnd = FALSE;
//				
//				xShopNpc[i].state = SHOPNPC_STATE_MOVE;
//				initShopNpcMove(i);
//			}			
//			break;
//		case SHOPNPC_STATE_CHAIR_STANDUP:
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_CHAIR_STANDUP][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				xShopNpc[i].isActEnd = TRUE;
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				xShopNpc[i].nowFrame = 0;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].isActEnd = FALSE;
//				
//				xChairInfo[xShopNpc[i].floor].npcCode[xShopNpc[i].chairNum] = DONT;
//				if(xChairInfo[xShopNpc[i].floor].interiorCode[xShopNpc[i].chairNum] > 0)
//					xShopNpc[i].x++;
//				else
//					xShopNpc[i].y++;
//				
//				if(xShopNpc[i].isSitEventFail == TRUE)
//				{
//					//요청 실패시에는 짜증한번 내주고
//					xShopNpc[i].state = SHOPNPC_STATE_CHAIR_EVENTFAIL;
//					setEmoticon(&xShopNpc[i].xEmoticon,EMOTICON_TYPE_ANGER);
//					
//				}
//				else
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_MOVE;
//					initShopNpcMove(i);
//				}
//			}
//			break;
//		case SHOPNPC_STATE_CHAIR_WAIT:
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_CHAIR_EVENT][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				xShopNpc[i].isActEnd = TRUE;
//			
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				if(--xShopNpc[i].actCount <=0)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_CHAIR_STANDUP;
//					xShopNpc[i].isSitEventBox = FALSE;
//					xShopNpc[i].isSitEventFail = TRUE;
//					
//					
//					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//					{
//						switch(xQuestTuto.nowNum)
//						{
//						case TUTO_8_INTERIOR_NPCTOUCH:
//							xQuestTuto.isTutoClean = TRUE;
//							break;
//						}
//					}
//					
//				}
//				xShopNpc[i].isActEnd = FALSE;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].nowFrame = 0;
//			}
//			break;
//		case SHOPNPC_STATE_CHAIR_ACT:
//			if(1 == prcSprit(&xSpritNpc[xShopNpc[i].subAct][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				xShopNpc[i].isActEnd = TRUE;
//			
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				if(--xShopNpc[i].actCount <=0)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_CHAIR_STANDUP;				
//				}
//				xShopNpc[i].isActEnd = FALSE;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].nowFrame = 0;
//			}
//			break;
//		case SHOPNPC_STATE_CHAIR_SIT:
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_CHAIR_SIT][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//				xShopNpc[i].isActEnd = TRUE;
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				//요청액팅 실행
//				xShopNpc[i].state = SHOPNPC_STATE_CHAIR_WAIT;
//				xShopNpc[i].isSitEventBox = TRUE;
//				xShopNpc[i].isEventBox = FALSE;
//				xShopNpc[i].eventBoxAnyCnt = 0;
//				xShopNpc[i].eventBoxShowAntCnt = 0;
//				
//				
//				xShopNpc[i].isActEnd = FALSE;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].nowFrame = 0;
//				xShopNpc[i].actCount = 2;
//				xShopNpc[i].actCount = 2;
//								
//				switch(ranDom(0, 3))
//				{
//				case 0:	xShopNpc[i].subAct = NPC_ACT_CHAIR_BOOK;break;
//				case 1:	xShopNpc[i].subAct = NPC_ACT_CHAIR_COFFEE;break;
//				case 2:	xShopNpc[i].subAct = NPC_ACT_CHAIR_IPAD;break;
//				case 3:	xShopNpc[i].subAct = NPC_ACT_CHAIR_PHONE;break;
//				}
//								
//				if(ranDom(0, 99) < xModelSkill.bonusPer[MODELSKILL_TYPE_CHAIR_BOOK])
//					xShopNpc[i].subAct = NPC_ACT_CHAIR_BOOK;
//				else if(ranDom(0, 99) < xModelSkill.bonusPer[MODELSKILL_TYPE_CHAIR_COFFEE])
//					xShopNpc[i].subAct = NPC_ACT_CHAIR_COFFEE;
//				else if(ranDom(0, 99) < xModelSkill.bonusPer[MODELSKILL_TYPE_CHAIR_IPAD])
//					xShopNpc[i].subAct = NPC_ACT_CHAIR_IPAD;
//				else if(ranDom(0, 99) < xModelSkill.bonusPer[MODELSKILL_TYPE_CHAIR_PHONE])
//					xShopNpc[i].subAct = NPC_ACT_CHAIR_PHONE;
//			}
//			break;
//		case SHOPNPC_STATE_PORTER_WM_MAN_TYPE0_0:
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//					
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 1:	//여남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MAN_YES][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 3:	//여여//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_MAN_YES][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 5:	//남남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_MAN_YES][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 1:	//여남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MAN_YES][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 3:	//여여//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_MAN_YES][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 5:	//남남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_MAN_YES][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				break;
//			}
//				
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				//여 설정
//				xShopNpc[xShopNpc[i].porterNpcNum].state = SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_2;
//				
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 1:	//여남(남자)
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "너 그렇게 성의 없이 대답할래?", SPEAKFRAMEMAX);
//					break;
//				case 3:	//여여(여자)
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "얘,나 아직 슬림하다구!", SPEAKFRAMEMAX);
//					break;
//				case 5:	//남남(남자)
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "어디!?알았어 빨리 입어보러 가자", SPEAKFRAMEMAX);
//					break;
//				}
//				
//				xShopNpc[xShopNpc[i].porterNpcNum].isActEnd = FALSE;
//				xShopNpc[xShopNpc[i].porterNpcNum].nowDelay = 0;
//				xShopNpc[xShopNpc[i].porterNpcNum].nowFrame = 0;
//				//남 설정
//				setNpcStatePorterMove(i,xShopNpc[i].porterNpcNum);
//			}
//			break;
//		case SHOPNPC_STATE_PORTER_WM_MAN_TYPE1_0:
//		case SHOPNPC_STATE_PORTER_MM_MAN_TYPE1_0:
//		case SHOPNPC_STATE_PORTER_WW_MAN_TYPE1_0:
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MAN_APPLAUD][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MAN_APPLAUD][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			}
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				//여설정
//				switch(xShopNpc[i].state)
//				{
//				case SHOPNPC_STATE_PORTER_WM_MAN_TYPE1_0:
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "그래도 한번 입어볼래", SPEAKFRAMEMAX);
//					break;
//				case SHOPNPC_STATE_PORTER_MM_MAN_TYPE1_0:
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "잘생긴 모습 질투 하지 마라 기다려", SPEAKFRAMEMAX);
//					break;
//				case SHOPNPC_STATE_PORTER_WW_MAN_TYPE1_0:
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "내가 이정도 핏이 안 나올 거 같아?", SPEAKFRAMEMAX);
//					break;
//				}
//				setNpcStateFittingRoom(xShopNpc[i].porterNpcNum,xShopNpc[xShopNpc[i].porterNpcNum].floor);
//				//남 설정
//				setNpcStatePorterMove(i,xShopNpc[i].porterNpcNum);
//			}
//			break;
//		case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_0:	//시작대사0
//		case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_0:
//		case SHOPNPC_STATE_PORTER_MM_WOMAN_TYPE1_0:
//		case SHOPNPC_STATE_PORTER_WW_WOMAN_TYPE1_0:
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 0:	//여남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_FITTING][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 2:	//여여//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_W_FITTING][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 4:	//남남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_W_FITTING][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 0:	//여남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_FITTING][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 2:	//여여//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_W_FITTING][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 4:	//남남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_W_FITTING][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				
//				break;
//			}
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				if(xShopNpc[i].state == SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_0)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_1;
//					xShopNpc[xShopNpc[i].porterNpcNum].state = SHOPNPC_STATE_PORTER_WM_MAN_TYPE0_0;
//					
//					switch(xShopNpc[i].porterOptionType)
//					{
//					case 0:	//여남(여자)
//						setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "그래 괜찮은 거 같아 그걸로 사", SPEAKFRAMEMAX);
//						break;
//					case 2:	//여여(여자)
//						setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "어머,이거 괜찮은데?근데 사이즈는 맞아?", SPEAKFRAMEMAX);
//						break;
//					case 4:	//남남(여자)
//						setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "직원 오기 전에 빨리 사라 부끄럽다", SPEAKFRAMEMAX);
//						break;
//					}
//				}
//				else if(xShopNpc[i].state == SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_0)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_1;
//					xShopNpc[xShopNpc[i].porterNpcNum].state = SHOPNPC_STATE_PORTER_WM_MAN_TYPE1_0;
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "좋아 이쁘니까 그 옷으로 하자", SPEAKFRAMEMAX);
//				}
//				else if(xShopNpc[i].state == SHOPNPC_STATE_PORTER_MM_WOMAN_TYPE1_0)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_PORTER_MM_WOMAN_TYPE1_1;
//					xShopNpc[xShopNpc[i].porterNpcNum].state = SHOPNPC_STATE_PORTER_MM_MAN_TYPE1_0;
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "솔직히 너랑 같이 다니는 거 부끄럽다 이러지 마라", SPEAKFRAMEMAX);
//				}
//				else if(xShopNpc[i].state == SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_0)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_PORTER_WW_WOMAN_TYPE1_1;
//					xShopNpc[xShopNpc[i].porterNpcNum].state = SHOPNPC_STATE_PORTER_WW_MAN_TYPE1_0;
//					setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "괜찮긴 한데 사이즈 너한테 맞아?", SPEAKFRAMEMAX);
//				}
//				xShopNpc[xShopNpc[i].porterNpcNum].isActEnd = FALSE;
//				xShopNpc[xShopNpc[i].porterNpcNum].nowDelay = 0;
//				xShopNpc[xShopNpc[i].porterNpcNum].nowFrame = 0;
//				
//				xShopNpc[i].isActEnd = FALSE;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].nowFrame = 0;								
//			}
//			break;
//		case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_1:	//남자 대사 대기
//		case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_1:	//남자 대사 대기
//								
//		case SHOPNPC_STATE_PORTER_MM_WOMAN_TYPE1_1:	//남자 대사 대기(남남)
//		case SHOPNPC_STATE_PORTER_WW_WOMAN_TYPE1_1:	//남자 대사 대기(남남)
//				
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			}
//			break;
//		case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_2:	//화내기 대사
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 0:	//여남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_ANGRY][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 2:	//여여//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_W_ANGRY][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 4:	//남남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_W_ANGRY][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 0:	//여남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_ANGRY][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 2:	//여여//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_W_ANGRY][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 4:	//남남//여
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_W_ANGRY][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				break;
//			}
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 4:	//남남(남자)
//					setSpeak(&xShopNpc[i].xSpeak, "이거면 올 한해 충분하겠지", SPEAKFRAMEMAX);
//					break;
//				}
//				
//				setNpcStateFittingRoom(i,xShopNpc[i].floor);				
//			}
//			break;
//		case SHOPNPC_STATE_PORTER_WM_MAN_WAIT:	//남자 대기
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			}
//			setNpcStatePorterMove(i,xShopNpc[i].porterNpcNum);
//			break;
//		case SHOPNPC_STATE_PORTER_WM_MAN_TIRED:	//남자 피곤
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 1:	//여남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MAN_TIRED][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 3:	//여여//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_MAN_TIRED][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 5:	//남남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_MAN_TIRED][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				switch(xShopNpc[i].porterOptionType)
//				{
//				case 1:	//여남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MAN_TIRED][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 3:	//여여//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_WW_MAN_TIRED][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				case 5:	//남남//남
//					if(1 == prcSprit(&xSpritNpc[NPC_ACT_PORTER_MM_MAN_TIRED][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//						xShopNpc[i].isActEnd = TRUE;
//					break;
//				}
//				break;
//			}
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				setNpcStatePorterMove(i,xShopNpc[i].porterNpcNum);
//			}			
//			break;
//		case SHOPNPC_STATE_TABLEBUY:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_SELECT][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_SELECT][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			}
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				resetSellTableInfo(xShopNpc[i].floor);
//				
//				M_Boolean isSlotCheck = FALSE;
//				int slotNum = 0;
//				
//				
//				int subTotalSlot = 0;
//				int subSlotNum[12];
//				int type;
//				int listNum;
//				
//				if(xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useTotal > 0)
//				{
//					switch(xShopNpc[i].buyType20)
//					{
//					case BUY_TYPE20_SEX:
//						//성별관련 상품 검색
//						for(int z=0;z<xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useTotal;z++)
//						{
//							
//							slotNum = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useXslotNum[z];
//							type = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].code/1000;
//							listNum = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].code%1000;
//							
//							if(xShopNpc[i].buySex20 == xFashionData[type][listNum].gender)
//								subSlotNum[subTotalSlot++] = slotNum;
//						}
//						if(subTotalSlot >  0)
//						{
//							isSlotCheck = TRUE;
//							slotNum = subSlotNum[ranDom(0, subTotalSlot-1)];
//						}
//						break;
//					case BUY_TYPE20_TREND:
//						for(int z=0;z<xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useTotal;z++)
//						{
//							
//							slotNum = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useXslotNum[z];
//							type = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].code/1000;
//							listNum = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].code%1000;
//							
//							if(xShopNpc[i].buySex20 == xFashionData[type][listNum].gender)
//								subSlotNum[subTotalSlot++] = slotNum;
//						}
//						if(subTotalSlot >  0)
//						{
//							isSlotCheck = TRUE;
//							slotNum = subSlotNum[ranDom(0, subTotalSlot-1)];
//						}
//							
//							
//
//							
//						//유행의상검색
//						for(int z=0;z<xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useTotal;z++)
//						{
//							slotNum = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useXslotNum[z];
//							for(int t=0;t<TRENDMAX;t++)
//							{
//								if(xTrend.isOpen[t] == TRUE)
//								{
//									if(xTrend.itemCode[t] == xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].code)
//									{
//										subSlotNum[subTotalSlot++] = slotNum;
//										break;
//									}
//								}
//							}
//						}
//							
//						if(xWorldMap.isFriendMap == FALSE)
//						{
//							if(subTotalSlot >  0)
//							{
//								isSlotCheck = TRUE;
//								slotNum = subSlotNum[ranDom(0, subTotalSlot-1)];
//								xShopNpc[i].isTrendEvent = TRUE;
//								xShopNpc[i].isEventBox = FALSE;
//								xShopNpc[i].eventBoxAnyCnt = 0;
//							}
//						}
//						break;
//					case BUY_TYPE20_RANDOM:
//					case BUY_TYPE20_SELLTABLE:
//						//아무거나 닥치는대로 검사
//						isSlotCheck = TRUE;
//						slotNum = ranDom(0, xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useTotal-1);
//						slotNum = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].useXslotNum[slotNum];
//						break;
//					}
//				}
//								
//				if(isSlotCheck == FALSE)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_EMPTY;
//					xShopNpc[i].subAct = NPC_ACT_ANGRY;
//					xShopNpc[i].anyCnt = 0;
//					xShopNpc[i].isActEnd = FALSE;
//					xShopNpc[i].nowDelay = 0;
//					xShopNpc[i].nowFrame = 0;
//
//					setEmoticon(&xShopNpc[i].xEmoticon,EMOTICON_TYPE_ANGER);
//					shopNpcErrSpeak(i);
//				}
//				else
//				{
//					//수량 빼고 해당 아이템 넣어주기
//					if(xWorldMap.isFriendMap == FALSE)
//					{
//						--xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].num;
//                        xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].flowTime = 0;
//						xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].isUpdata = TRUE;
//					}
//					
//					xShopNpc[i].buyItemCode = xSellTableInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xSlot[slotNum].code;
//					
//
//					if(xShopNpc[i].isPorter_woman == TRUE)
//					{
//						//의상 몸에 대보기
//						switch(xShopNpc[i].porterOptionType)
//						{
//						case 0:	//여남(여자)
//							setSpeak(&xShopNpc[i].xSpeak, "이옷 어떤거 같아?", SPEAKFRAMEMAX);
//							switch(0)
//							{
//							case 0:
//								xShopNpc[i].porterOptionTypeSub = 0;
//								xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub = 0;
//								xShopNpc[i].state = SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_0;
//								break;
//							case 1:
//								xShopNpc[i].porterOptionTypeSub = 1;
//								xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub = 1;
//								xShopNpc[i].state = SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_0;
//								break;
//							}
//							break;
//						case 2:	//여여(여자)
//							setSpeak(&xShopNpc[i].xSpeak, "이옷 어떤거 같아?", SPEAKFRAMEMAX);
//							switch(0)
//							{
//							case 0:
//								xShopNpc[i].porterOptionTypeSub = 0;
//								xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub = 0;
//								xShopNpc[i].state = SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_0;
//								break;
//							case 1:
//								xShopNpc[i].porterOptionTypeSub = 1;
//								xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub = 1;
//								xShopNpc[i].state = SHOPNPC_STATE_PORTER_WW_WOMAN_TYPE1_0;
//								break;
//							}
//							break;
//						case 4:	//남남(여자)
//							switch(0)
//							{
//							case 0:
//								xShopNpc[i].porterOptionTypeSub = 0;
//								xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub = 0;
//								setSpeak(&xShopNpc[i].xSpeak, "야,이거 어때? 멋있지?", SPEAKFRAMEMAX);
//								xShopNpc[i].state = SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_0;
//								break;
//							case 1:
//								xShopNpc[i].porterOptionTypeSub = 1;
//								xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub = 1;
//								setSpeak(&xShopNpc[i].xSpeak, "이거 입으면 배우 제의 올 거 같지않음?", SPEAKFRAMEMAX);
//								xShopNpc[i].state = SHOPNPC_STATE_PORTER_MM_WOMAN_TYPE1_0;
//								break;
//							}
//							break;
//						}
//						
//						xShopNpc[i].anyCnt = 0;
//						xShopNpc[i].nowDelay = 0;
//						xShopNpc[i].nowFrame = 0;
//						xShopNpc[i].isActEnd = FALSE;
//						
//					}
//					else
//					{
//						switch(xShopNpc[i].buyType20)
//						{
//						case BUY_TYPE20_SEX:
//						case BUY_TYPE20_SELLTABLE:
//						case BUY_TYPE20_FITTING:
//							if(ranDom(0, 100) < 70)
//								setNpcStateFittingRoom(i,xShopNpc[i].floor);
//							else
//								setNpcStatePayMent(i,xShopNpc[i].floor);
//							break;
//						case BUY_TYPE20_TREND:
//							setNpcStateFittingRoom(i,xShopNpc[i].floor);
//							break;
//						case BUY_TYPE20_RANDOM:
//							setNpcStatePayMent(i,xShopNpc[i].floor);
//							break;
//						}
//					}
//				}
//			}
//			break;
//		case SHOPNPC_STATE_FITTINGROOM:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//						
//			if(++xShopNpc[i].anyCnt > 10)
//			{
//				xShopNpc[i].state = SHOPNPC_STATE_FITTINGROOM_OPEN_IN;
//				xShopNpc[i].anyCnt = 0;
//				xShopNpc[i].isActEnd = FALSE;
//				
//				endX = xFittingRoomInfo[xShopNpc[i].floor].x[xShopNpc[i].actInteriorNum];
//				endY = xFittingRoomInfo[xShopNpc[i].floor].y[xShopNpc[i].actInteriorNum];
//												
//				if(xMap.shopData[xShopNpc[i].floor][0/*걸리지 않음*/][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_WAIT;
//					xShopNpc[i].anyCnt = 0;
//
//					//setSpeak(&xShopNpc[i].xSpeak, "피팅룸들어갈때ERR_(개발확인)", SPEAKFRAMEMAX);
//					////////////////
//				}
//				else
//				{
//					//새위치 탐색
//					if(setAstar(xShopNpc[i].x-xMap.shopPointX, xShopNpc[i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, 0/*장해물상관없이무한대로이동가능*/,xShopNpc[i].floor) == FALSE)
//					{
//						xShopNpc[i].state = SHOPNPC_STATE_WAIT;
//						xShopNpc[i].anyCnt = 0;
//
//						//setSpeak(&xShopNpc[i].xSpeak, "피팅룸들어갈때ERR_(개발확인)", SPEAKFRAMEMAX);
//						////////////////
//					}
//					else
//					{
//						xShopNpc[i].bestTotalCnt = xAstar.totalCnt;
//						xShopNpc[i].bestNowCnt = 0;
//						for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//						{
//							xShopNpc[i].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//							xShopNpc[i].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//						}
//						//다음이동
//						if(xShopNpc[i].bestX[xShopNpc[i].bestNowCnt] < xShopNpc[i].bestX[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_XPLUS;
//						else if(xShopNpc[i].bestX[xShopNpc[i].bestNowCnt] > xShopNpc[i].bestX[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_XMINUS;
//						else if(xShopNpc[i].bestY[xShopNpc[i].bestNowCnt] < xShopNpc[i].bestY[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_YPLUS;
//						else if(xShopNpc[i].bestY[xShopNpc[i].bestNowCnt] > xShopNpc[i].bestY[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_YMINUS;
//					}
//				}
//			}
//			break;
//		
//		case SHOPNPC_STATE_FITTINGROOM_CLOSE_WAIT:
//			if(xShopNpc[i].anyCnt == 2)
//			{
//				if(xShopNpc[i].isPorter_woman == TRUE)
//				{
//					xShopNpc[xShopNpc[i].porterNpcNum].state = SHOPNPC_STATE_PORTER_WM_MAN_TIRED;
//					xShopNpc[xShopNpc[i].porterNpcNum].isActEnd = FALSE;
//					xShopNpc[xShopNpc[i].porterNpcNum].nowFrame = 0;
//					xShopNpc[xShopNpc[i].porterNpcNum].nowDelay = 0;
//					
//					switch(xShopNpc[i].porterOptionType)
//					{
//					case 0:	//여남(여자)
//						switch(xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub)
//						{
//						case 0:
//							setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "아..힘들어 죽겠구만..", SPEAKFRAMEMAX);
//							break;
//						case 1:
//							setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "그럴거면 뭐하러 물어본거야!", SPEAKFRAMEMAX);
//							break;
//						}
//						break;
//					case 2:	//여여(여자)
//						switch(xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub)
//						{
//						case 0:
//							setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "저번보다 살찐 거 같은데 숨기긴~", SPEAKFRAMEMAX);
//							break;
//						case 1:
//							setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "또 환불하러 와야겠네~", SPEAKFRAMEMAX);
//							break;
//						}
//						break;
//					case 4:	//남남(여자)
//						switch(xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub)
//						{
//						case 0:
//							setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "아..이래서 쇼핑은 힘들다니까..", SPEAKFRAMEMAX);
//							break;
//						case 1:
//							setSpeak(&xShopNpc[xShopNpc[i].porterNpcNum].xSpeak, "아..애랑 같이 못 다니겠는데..", SPEAKFRAMEMAX);
//							break;
//						}
//						break;
//					}
//				}
//			}
//			if(++xShopNpc[i].anyCnt > 20)
//			{
//				xShopNpc[i].state = SHOPNPC_STATE_FITTINGROOM_OPEN_OUT;
//				xShopNpc[i].anyCnt = 0;
//				xShopNpc[i].isActEnd = FALSE;
//								
//				if(xFittingRoomInfo[xShopNpc[i].floor].codeNum[xShopNpc[i].actInteriorNum] > 0)
//				{
//					endX = xFittingRoomInfo[xShopNpc[i].floor].x[xShopNpc[i].actInteriorNum]+1;
//					endY = xFittingRoomInfo[xShopNpc[i].floor].y[xShopNpc[i].actInteriorNum];
//				}
//				else
//				{
//					endX = xFittingRoomInfo[xShopNpc[i].floor].x[xShopNpc[i].actInteriorNum];
//					endY = xFittingRoomInfo[xShopNpc[i].floor].y[xShopNpc[i].actInteriorNum]+1;
//				}
//				
//				if(xMap.shopData[xShopNpc[i].floor][0/*걸리지 않음*/][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_WAIT;
//					xShopNpc[i].anyCnt = 0;
//
//					//setSpeak(&xShopNpc[i].xSpeak, "피팅룸들어갈때ERR_(개발확인)", SPEAKFRAMEMAX);
//					////////////////
//				}
//				else
//				{
//					//새위치 탐색
//					if(setAstar(xShopNpc[i].x-xMap.shopPointX, xShopNpc[i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, 0/*장해물상관없이무한대로이동가능*/,xShopNpc[i].floor) == FALSE)
//					{
//						xShopNpc[i].state = SHOPNPC_STATE_WAIT;
//						xShopNpc[i].anyCnt = 0;
//
//						//setSpeak(&xShopNpc[i].xSpeak, "피팅룸들어갈때ERR_(개발확인)", SPEAKFRAMEMAX);
//						////////////////
//					}
//					else
//					{
//						xShopNpc[i].bestTotalCnt = xAstar.totalCnt;
//						xShopNpc[i].bestNowCnt = 0;
//						for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//						{
//							xShopNpc[i].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//							xShopNpc[i].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//						}
//						//다음이동
//						if(xShopNpc[i].bestX[xShopNpc[i].bestNowCnt] < xShopNpc[i].bestX[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_XPLUS;
//						else if(xShopNpc[i].bestX[xShopNpc[i].bestNowCnt] > xShopNpc[i].bestX[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_XMINUS;
//						else if(xShopNpc[i].bestY[xShopNpc[i].bestNowCnt] < xShopNpc[i].bestY[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_YPLUS;
//						else if(xShopNpc[i].bestY[xShopNpc[i].bestNowCnt] > xShopNpc[i].bestY[xShopNpc[i].bestNowCnt+1])
//							xShopNpc[i].moveType = MOVETYPE_YMINUS;
//					}
//				}
//
//				//구매한아이템 장착
//				if(xShopNpc[i].isFittingRoom == TRUE)
//				{
//					setMapData(xShopNpc[i].buyItemCode);
//					xShopNpc[i].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xShopNpc[i].buyItemCode;
//				}
//				xShopNpc[i].isBuyAct[xShopNpc[i].buyAct] = TRUE;
//			}
//			break;
//		case SHOPNPC_STATE_LOOKINGMIRROR:
//			setFace(&xShopNpc[i].xFace, FACE_TYPE_SMILE);
//			setMapData(xShopNpc[i].buyItemCode);
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//								
//			if(xShopNpc[i].actingType == NPC_ACT_POWERMAN)
//			{
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_POWERMAN][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//			}
//			else if(xShopNpc[i].actingType == NPC_ACT_POSE3)
//			{
//				if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE3][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//			}
//			else
//			{
//				switch(xShopNpc[i].moveType)
//				{
//					case MOVETYPE_XPLUS:
//					case MOVETYPE_YPLUS:
//						
//						switch(xMap.type)
//						{
//						case F_TYPE_OUTER:
//						case F_TYPE_TOP:
//						case F_TYPE_BOTTOM:
//						case F_TYPE_ONEPIECE:
//							if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE1][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//								xShopNpc[i].isActEnd = TRUE;
//							break;
//						case F_TYPE_SHOES:
//						case F_TYPE_BAG:
//						case F_TYPE_ACCECSSORY:
//							if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE2][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//								xShopNpc[i].isActEnd = TRUE;
//							break;
//						}
//						
//						break;
//					case MOVETYPE_XMINUS:
//					case MOVETYPE_YMINUS:
//						switch(xMap.type)
//					{
//						case F_TYPE_OUTER:
//						case F_TYPE_TOP:
//						case F_TYPE_BOTTOM:
//						case F_TYPE_ONEPIECE:
//							if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE1][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//								xShopNpc[i].isActEnd = TRUE;
//							break;
//						case F_TYPE_SHOES:
//						case F_TYPE_BAG:
//						case F_TYPE_ACCECSSORY:
//							if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE2][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//								xShopNpc[i].isActEnd = TRUE;
//							break;
//					}
//						break;
//				}
//
//			}
//			
//			if(xShopNpc[i].isActEnd == TRUE)			
//			{
//				setNpcStatePayMent(i,xShopNpc[i].floor);
//					xFittingRoomInfo[xShopNpc[i].floor].state[xShopNpc[i].actInteriorNum] = FITTINGROOMINFO_STATE_WAIT;
//			}
//			break;
//		case SHOPNPC_STATE_PAYMENTWAIT:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//			//계산NPC가 SHOPNPC_STATE_PAYMENT로 변환해주자
//			break;
//		case SHOPNPC_STATE_PAYMENT:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//				/*
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//			
//			if(++xShopNpc[i].anyCnt > 50)
//			{
//				setNpcStateExit(i);
//				
//				if(xShopNpc[i].eventType == NPC_EVENT_EXPING)
//					xShopNpc[i].eventType = NPC_EVENT_DONT;
//			}
//				 */
//			break;
//		case SHOPNPC_STATE_FLOORUP:
//			//10에변경
//			//17에 행동변경
//			switch(++xShopNpc[i].anyCnt)
//			{
//			case 10:
//				xShopNpc[i].floor++;
//				xShopNpc[i].moveType = MOVETYPE_YPLUS;
//				xShopNpc[i].actLook = MOVETYPE_YPLUS;
//					
//				xShopNpc[i].x = xWorldMap.floorDownX;
//				xShopNpc[i].y = xWorldMap.floorDownY;
//				break;
//			case 17:
//				if(xShopNpc[i].floor < xShopNpc[i].floorTarget)
//				{
//					//올라가기로
//					setNpcStateFloorUp(i, xShopNpc[i].floor);
//				}
//				else
//				{
//					xShopNpc[i].state = SHOPNPC_STATE_MOVE;					
//					initShopNpcMove(i);
//				}
//				break;
//			}
//			break;
//		case SHOPNPC_STATE_FLOORDOWN:
//			xShopNpc[i].moveType = xShopNpc[i].actLook;
//			//10에변경
//			//17에 행동변경
//			switch(++xShopNpc[i].anyCnt)
//			{
//			case 10:
//				xShopNpc[i].floor--;
//				xShopNpc[i].moveType = MOVETYPE_YPLUS;
//				xShopNpc[i].actLook = MOVETYPE_YPLUS;
//				xShopNpc[i].x = xWorldMap.floorUpX;
//				xShopNpc[i].y = xWorldMap.floorUpY;
//				break;
//			case 17:
//				if(xShopNpc[i].floor != 0)
//				{
//					//내려가기
//					setNpcStateFloorDown(i, xShopNpc[i].floor);
//				}
//				else
//				{
//					setNpcStateExit(i, xShopNpc[i].floor);
//				}
//				break;
//			}
//			break;
//		case SHOPNPC_STATE_EMPTY:
//			setFace(&xShopNpc[i].xFace, FACE_TYPE_ANGRY);
//							
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:					
//				if(1 == prcSprit(&xSpritNpc[xShopNpc[i].subAct][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				if(1 == prcSprit(&xSpritNpc[xShopNpc[i].subAct][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame))
//					xShopNpc[i].isActEnd = TRUE;
//				break;
//			}
//				
//			if(xShopNpc[i].isActEnd == TRUE)
//			{
//				xShopNpc[i].nowFrame = 0;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].isActEnd = FALSE;
//				xShopNpc[i].state = SHOPNPC_STATE_MOVE;
//				initShopNpcMove(i);
//			}
//			break;
//		case SHOPNPC_STATE_ASTARERR:
//		case SHOPNPC_STATE_WAIT:
//			setFace(&xShopNpc[i].xFace, FACE_TYPE_ANGRY);
//			if(++xShopNpc[i].anyCnt > 50)
//			{
//				if(xShopNpc[i].buyType20 == BUY_TYPE20_FITTING && xShopNpc[i].actInteriorNum != DONT)
//				{
//					if(xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].state == SHOWWINDOWINFO_STATE_PLAY)
//					{
//						xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].state = SHOWWINDOWINFO_STATE_WAIT;
//						xShopNpc[i].actInteriorNum = DONT;
//					}
//				}
//				
//				xShopNpc[i].state = SHOPNPC_STATE_MOVE;
//				xShopNpc[i].nowDelay = 0;
//				xShopNpc[i].nowFrame = 0;
//				setNpcStateExit(i,xShopNpc[i].floor);
//			}
//			break;
//		case SHOPNPC_STATE_MOVE:
//		case SHOPNPC_STATE_FITTINGROOM_OPEN_OUT:
//		case SHOPNPC_STATE_FITTINGROOM_OPEN_IN:
//		case SHOPNPC_STATE_FLOORUPMOVE:
//		case SHOPNPC_STATE_FLOORDOWNMOVE:
//				
//			++xShopNpc[i].anyCnt;
//			setFace(&xShopNpc[i].xFace, FACE_TYPE_NORMAL);
//			//계산대기중 손님들은 계산손님등록 큐를 지속적으로 검색하여 가는길에 좌표가 겹친다면 그대로 서서 대기하고
//			isSubTemp[0] = FALSE;
//			if(xShopNpc[i].buyAct == NPC_BUYACT_PAYMENT)
//			{
//				for(int z=0;z<xPaymentAssistant[xShopNpc[i].floor].totalSlot;z++)
//				{
//					if(xPaymentAssistant[xShopNpc[i].floor].xShopNpcSlot[z].npcNum != i)
//					{
//						if(xShopNpc[i].bestNowCnt < xShopNpc[i].bestTotalCnt)
//						{
//							if(xShopNpc[xPaymentAssistant[xShopNpc[i].floor].xShopNpcSlot[z].npcNum].x == xShopNpc[i].bestX[xShopNpc[i].bestNowCnt+1]
//							   && xShopNpc[xPaymentAssistant[xShopNpc[i].floor].xShopNpcSlot[z].npcNum].y == xShopNpc[i].bestY[xShopNpc[i].bestNowCnt+1])
//							{
//								isSubTemp[0] = TRUE;
//								break;
//							}
//						}
//					}
//				}
//			}
//							
//			if(isSubTemp[0] == TRUE)
//				continue;
//							
//			if(xShopNpc[i].speed == xMap.speedTable[1])
//			{
//				if(gameCnt%2==0)
//					++xShopNpc[i].imgCnt;
//			}
//			else if(xShopNpc[i].speed == xMap.speedTable[2])
//			{
//				++xShopNpc[i].imgCnt;
//			}
//			else if(xShopNpc[i].speed == xMap.speedTable[3])
//			{
//				xShopNpc[i].imgCnt +=2;
//			}
//			
//			if(xShopNpc[i].imgCnt > 19)
//				xShopNpc[i].imgCnt = 0;
//				
//				
//			switch(xShopNpc[i].moveType)
//			{
//			case MOVETYPE_XPLUS:
//			case MOVETYPE_YPLUS:
//				prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame);
//				break;
//			case MOVETYPE_XMINUS:
//			case MOVETYPE_YMINUS:
//				prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_BACK],&xShopNpc[i].nowDelay,&xShopNpc[i].nowFrame);
//				break;
//			}
//				
//			switch(xShopNpc[i].moveType)
//			{
//				case MOVETYPE_XPLUS:
//					xShopNpc[i].drawX -= (float)(xShopNpc[i].speed * 2);
//					xShopNpc[i].drawY += (float)(xShopNpc[i].speed * 1);					
//					if(xShopNpc[i].drawX  <= -(TILEW/4))
//					{
//						
//						switch(xShopNpc[i].state)
//						{
//						case SHOPNPC_STATE_FLOORUPMOVE:
//						case SHOPNPC_STATE_FLOORDOWNMOVE:
//						case SHOPNPC_STATE_MOVE:
//							xShopNpc[i].x_befor = xShopNpc[i].x;
//							xShopNpc[i].y_befor = xShopNpc[i].y;
//							break;
//						}
//
//						xShopNpc[i].x++;
//						xShopNpc[i].drawX = (TILEW/4);
//						xShopNpc[i].drawY = -(TILEH/4);
//					}
//					break;
//				case MOVETYPE_XMINUS:
//					xShopNpc[i].drawX += (float)(xShopNpc[i].speed * 2);
//					xShopNpc[i].drawY -= (float)(xShopNpc[i].speed * 1);
//					if(xShopNpc[i].drawX  >= (TILEW/4))
//					{
//						switch(xShopNpc[i].state)
//						{
//						case SHOPNPC_STATE_FLOORUPMOVE:
//						case SHOPNPC_STATE_FLOORDOWNMOVE:
//						case SHOPNPC_STATE_MOVE:
//							xShopNpc[i].x_befor = xShopNpc[i].x;
//							xShopNpc[i].y_befor = xShopNpc[i].y;
//							break;
//						}
//						xShopNpc[i].x--;
//						xShopNpc[i].drawX = -(TILEW/4);
//						xShopNpc[i].drawY = (TILEH/4);
//					}
//					break;
//				case MOVETYPE_YPLUS:
//					xShopNpc[i].drawX += (float)(xShopNpc[i].speed * 2);
//					xShopNpc[i].drawY += (float)(xShopNpc[i].speed * 1);
//					if(xShopNpc[i].drawY  >= (TILEH/4))
//					{
//						switch(xShopNpc[i].state)
//						{
//						case SHOPNPC_STATE_FLOORUPMOVE:
//						case SHOPNPC_STATE_FLOORDOWNMOVE:
//						case SHOPNPC_STATE_MOVE:
//							xShopNpc[i].x_befor = xShopNpc[i].x;
//							xShopNpc[i].y_befor = xShopNpc[i].y;
//							break;
//						}
//						xShopNpc[i].y++;
//						xShopNpc[i].drawX = -(TILEW/4);
//						xShopNpc[i].drawY = -(TILEH/4);
//					}
//					break;
//				case MOVETYPE_YMINUS:
//					xShopNpc[i].drawX -= (float)(xShopNpc[i].speed * 2);
//					xShopNpc[i].drawY -= (float)(xShopNpc[i].speed * 1);
//					if(xShopNpc[i].drawY  <= -(TILEH/4))
//					{
//						switch(xShopNpc[i].state)
//						{
//						case SHOPNPC_STATE_FLOORUPMOVE:
//						case SHOPNPC_STATE_FLOORDOWNMOVE:
//						case SHOPNPC_STATE_MOVE:
//							xShopNpc[i].x_befor = xShopNpc[i].x;
//							xShopNpc[i].y_befor = xShopNpc[i].y;
//							break;
//						}
//						
//						xShopNpc[i].y--;
//						xShopNpc[i].drawX = (TILEW/4);
//						xShopNpc[i].drawY = (TILEH/4);
//					}
//					break;
//			}
//			
//			//도착 위치 검색 및 위치 보정
//			if(xShopNpc[i].drawX == 0)
//			{
//				int ranDomTemp = ranDom(0, 100);
//				
//				if(xShopNpc[i].isPorter_man == FALSE)
//				{
//					//1/3정도 왓을때
//					if(xShopNpc[i].bestNowCnt == xShopNpc[i].bestTotalCnt/3)
//					{
//						if(xShopNpc[i].state == SHOPNPC_STATE_MOVE)
//						{
//							switch(xShopNpc[i].buyAct)
//							{
//							case NPC_BUYACT_SELLTABLE:
//							case NPC_BUYACT_TREND:
//							case NPC_BUYACT_FITTING:
//								if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
//								{
//									if(ranDomTemp < 30)
//										setSpeak(&xShopNpc[i].xSpeak, "남들과 달라 보이고 싶어", SPEAKFRAMEMAX);
//									else if(ranDomTemp < 60)
//										setSpeak(&xShopNpc[i].xSpeak, "개성 있는 패션이 중요하지", SPEAKFRAMEMAX);
//								}
//								break;
//							}
//						}
//					}
//				}
//				
//				//목표위치도착
//				if(++xShopNpc[i].bestNowCnt >= xShopNpc[i].bestTotalCnt-1)
//				{
//					if(xShopNpc[i].state == SHOPNPC_STATE_FLOORUPMOVE)
//					{
//						xShopNpc[i].state = SHOPNPC_STATE_FLOORUP;
//						xShopNpc[i].moveType = MOVETYPE_YMINUS;
//						xShopNpc[i].actLook = MOVETYPE_YMINUS;
//						xShopNpc[i].anyCnt = 0;
//					}
//					else if(xShopNpc[i].state == SHOPNPC_STATE_FLOORDOWNMOVE)
//					{
//						xShopNpc[i].state = SHOPNPC_STATE_FLOORDOWN;
//						xShopNpc[i].anyCnt = 0;
//						
//					}
//					else if(xMap.data[0][5][xShopNpc[i].x][xShopNpc[i].y] == 4 || xMap.data[0][5][xShopNpc[i].x][xShopNpc[i].y] == -4)
//					{
//						xShopNpc[i].state = SHOPNPC_STATE_DONT;
////						setModelNpcSpeakWelCome(0,FALSE);
//						
//						int npcNum;
//						if(xWorldMap.doorCode >= 0)
//							npcNum = makeWorldMapNpc(xShopNpc[i].x,xShopNpc[i].y,xShopNpc[i].type,xShopNpc[i].speed,MOVETYPE_XMINUS);
//						else
//							npcNum = makeWorldMapNpc(xShopNpc[i].x,xShopNpc[i].y,xShopNpc[i].type,xShopNpc[i].speed,MOVETYPE_YMINUS);												
//						
//
//						xWorldMapNpc[npcNum].modelNum = xShopNpc[i].modelNum;
//						
//						memcpy(&xWorldMapNpc[npcNum].xFace,&xShopNpc[i].xFace,sizeof(xShopNpc[i].xFace));
//						memcpy(&xWorldMapNpc[npcNum].xF,&xShopNpc[i].xF,sizeof(xShopNpc[i].xF));
//						xWorldMapNpc[npcNum].buyItemCode = xShopNpc[i].buyItemCode;
//						xWorldMapNpc[npcNum].state = WORLDMAPNPC_STATE_MOVE;
//						xWorldMapNpc[npcNum].isOutShop = TRUE;
//						xWorldMapNpc[npcNum].isInShop = FALSE;
//						
//						if(xShopNpc[i].isPorter_man == TRUE)
//						{							
//							xWorldMapNpc[npcNum].isDie = TRUE;
//						}
//					}
//					else
//					{
//						switch(xShopNpc[i].state)
//						{
//						case SHOPNPC_STATE_FITTINGROOM_OPEN_IN:
//							xShopNpc[i].state = SHOPNPC_STATE_FITTINGROOM_CLOSE_WAIT;
//							xShopNpc[i].anyCnt = 0;
//							break;
//						case SHOPNPC_STATE_FITTINGROOM_OPEN_OUT:
//							xShopNpc[i].buyAct = NPC_BUYACT_PAYMENT;
//							xShopNpc[i].state = SHOPNPC_STATE_LOOKINGMIRROR;
//								
//							if(xWorldMap.isFriendMap == FALSE)
//							{
//								xShopNpc[i].eventBoxShowAntCnt = 0;
//								xShopNpc[i].payMentEvent = TRUE;
//								xShopNpc[i].payMentTime = xCalendar.nowTime;
//								xShopNpc[i].payMentType = 1;		//0계산대1:피팅룸2:쇼윈도
//							}
//								
//							
//							xShopNpc[i].isActEnd = FALSE;
//							xShopNpc[i].nowDelay = 0;
//							xShopNpc[i].nowFrame = 0;
//							xShopNpc[i].anyCnt = 0;
//							setMapData(xShopNpc[i].buyItemCode);
//								
//							if(xShopNpc[i].genDer == 1)
//								xShopNpc[i].actingType = NPC_ACT_POWERMAN;
//							else if(ranDom(0,100)< 33)
//							{
//								xShopNpc[i].actingType = NPC_ACT_POSE3;
//							}
//							else
//							{
//								switch(xMap.type)
//								{
//								case F_TYPE_OUTER:
//								case F_TYPE_TOP:
//								case F_TYPE_BOTTOM:
//								case F_TYPE_ONEPIECE:
//									xShopNpc[i].actingType = NPC_ACT_POSE1;
//									break;
//								case F_TYPE_SHOES:
//								case F_TYPE_BAG:
//								case F_TYPE_ACCECSSORY:
//									xShopNpc[i].actingType = NPC_ACT_POSE2;
//									break;
//								}
//							}
//								
//							if(ranDom(0, 100)<50)
//							{
//								switch(xMap.type)
//								{
//								case F_TYPE_OUTER:
//								case F_TYPE_TOP:
//								case F_TYPE_BOTTOM:
//								case F_TYPE_ONEPIECE:
//									if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
//										setSpeak(&xShopNpc[i].xSpeak, "예쁘다 맘에 드네!!", SPEAKFRAMEMAX);
//									break;
//								case F_TYPE_SHOES:
//								case F_TYPE_BAG:
//								case F_TYPE_ACCECSSORY:
//									if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
//										setSpeak(&xShopNpc[i].xSpeak, "맘에 드는 걸~", SPEAKFRAMEMAX);
//									break;
//								}
//							}
//								
//							if(xShopNpc[i].isPorter_woman == TRUE)
//							{
//								switch(xShopNpc[i].porterOptionType)
//								{
//								case 4:	//남남(여자)
//									switch(xShopNpc[xShopNpc[i].porterNpcNum].porterOptionTypeSub)
//									{
//									case 1:
//										setSpeak(&xShopNpc[i].xSpeak, "역시 잘 생겼단 말이지~", SPEAKFRAMEMAX);
//										break;
//									}
//									break;
//								}
//							}
//							break;
//						default:
//							if(xShopNpc[i].isChair == TRUE)
//							{
//								
//								if(xChairInfo[xShopNpc[i].floor].interiorCode[xShopNpc[i].chairNum] > 0)
//								{
//									xShopNpc[i].x--;
//								}
//								else
//								{
//									xShopNpc[i].y--;
//								}
//								
//								xShopNpc[i].state = SHOPNPC_STATE_CHAIR_SIT;
//								xShopNpc[i].isActEnd = FALSE;
//								xShopNpc[i].nowDelay = 0;
//								xShopNpc[i].nowFrame = 0;
//								
//								
//								if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//								{
//									switch(xQuestTuto.nowNum)
//									{
//									case TUTO_8_INTERIOR_MAKENPC:
//										xQuestTuto.isTutoClean = TRUE;
//										break;
//									}
//								}
//								
//								if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
//								{
//									switch(ranDom(0, 1))
//									{
//									case 0:
//										setSpeak(&xShopNpc[i].xSpeak, "아~힘들어", SPEAKFRAMEMAX);
//										break;
//									case 1:
//										setSpeak(&xShopNpc[i].xSpeak, "다리 아프네", SPEAKFRAMEMAX);
//										break;
//									}
//								}
//									
//							}
//							else
//							{								
//								if(xShopNpc[i].isPorter_man == TRUE)
//								{
//									setNpcStatePorterMove(i,xShopNpc[i].porterNpcNum);
//								}
//								else
//								{
//									switch(xShopNpc[i].buyAct)
//									{
//									case NPC_BUYACT_SELLTABLE:
//									case NPC_BUYACT_TREND:
//										if(xShopNpc[i].isPorter_woman == TRUE)
//										{										
//											xShopNpc[i].state = SHOPNPC_STATE_TABLEBUY;
//											xShopNpc[i].moveType = xShopNpc[i].actLook;
//											xShopNpc[i].isActEnd = FALSE;
//											xShopNpc[i].nowDelay = 0;
//											xShopNpc[i].nowFrame = 0;
//										}
//										else
//										{
//											if(ranDom(0, 100) < 50)
//											{
//												xShopNpc[i].state = SHOPNPC_STATE_TABLESEE;
//												
//												int randTemp = ranDom(0, 100);
//												if(randTemp < 30)
//													xShopNpc[i].subAct = NPC_ACT_GOMIN;
//												else if(randTemp < 60)
//													xShopNpc[i].subAct = NPC_ACT_NPC1;
//												else
//													xShopNpc[i].subAct = NPC_ACT_NPC2;									
//												
//												xShopNpc[i].isActEnd = FALSE;
//												xShopNpc[i].nowDelay = 0;
//												xShopNpc[i].nowFrame = 0;
//												if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
//												{
//													if(ranDom(0, 100)<50)
//														setSpeak(&xShopNpc[i].xSpeak, "어떤 옷을 입는 게 좋을까?", SPEAKFRAMEMAX);
//												}
//											}
//											else
//											{
//												xShopNpc[i].state = SHOPNPC_STATE_TABLEBUY;
//												xShopNpc[i].moveType = xShopNpc[i].actLook;
//												xShopNpc[i].isActEnd = FALSE;
//												xShopNpc[i].nowDelay = 0;
//												xShopNpc[i].nowFrame = 0;
//												
//												if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
//												{
//													if(xShopNpc[i].buyAct == NPC_BUYACT_TREND)
//														setSpeak(&xShopNpc[i].xSpeak, "요즘 유행하는 의상이 이건가", SPEAKFRAMEMAX);
//												}
//											}
//										}
//										break;
//									case NPC_BUYACT_FITTING:
//										resetShowWindowInfo();
//										//마네킹에 피팅된옷이 없거나 마네킹자체가 없다면 예외처리
//										if(xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].isUse == FALSE || xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].isFitting == FALSE)
//										{
//											xShopNpc[i].state = SHOPNPC_STATE_WAIT;
//											xShopNpc[i].subAct = NPC_ACT_ANGRY;
//											xShopNpc[i].anyCnt = 0;
//											xShopNpc[i].isActEnd = FALSE;
//											xShopNpc[i].nowDelay = 0;
//											xShopNpc[i].nowFrame = 0;
//
//											setSpeak(&xShopNpc[i].xSpeak, "피팅 된 의상이 하나도 없네?", SPEAKFRAMEMAX);
//											xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].state = SHOWWINDOWINFO_STATE_WAIT;
//											
//										}
//										else
//										{
//											//점원이 올때 까지 점원부르기상태 풀어주는건 점원쪽에서 해주자
//											xShopNpc[i].buyItemCode_ASSISTCALL = DONT;
//											int showWindowFitttingTotal=0;
//											int showWindowFittingSlot[20];
//											for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
//											{
//												if(xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xF.code[ff] != DONT)
//												{
//													showWindowFittingSlot[showWindowFitttingTotal++] = xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].xF.code[ff];
//												}
//											}
//											
//											if(showWindowFitttingTotal != 0)
//												xShopNpc[i].buyItemCode_ASSISTCALL = showWindowFittingSlot[ranDom(0, showWindowFitttingTotal-1)];
//											
//											if(xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].interiorCode > 0)
//											{
//												xShopNpc[i].moveType = MOVETYPE_XPLUS;
//												xShopNpc[i].actLook = MOVETYPE_XPLUS;
//											}
//											else
//											{
//												xShopNpc[i].moveType = MOVETYPE_YPLUS;
//												xShopNpc[i].actLook = MOVETYPE_YPLUS;
//											}
//																				
//											xShopNpc[i].isActEnd = FALSE;
//											xShopNpc[i].nowDelay = 0;
//											xShopNpc[i].nowFrame = 0;
//
//											if(ranDom(0, 100) < 50)
//											{
//												int type = xShopNpc[i].buyItemCode_ASSISTCALL/1000;
//												int list = xShopNpc[i].buyItemCode_ASSISTCALL%1000;
//												xShopNpc[i].state = SHOPNPC_STATE_CALLSHOPASSISTANT;
//												sprintf(strTempS, "여기 %s 좀 가져다 주세요",xFashionData[type][list].strName);
//												setSpeak(&xShopNpc[i].xSpeak, strTempS, SPEAKFRAMEMAX);
//											}
//											else
//											{
//												xShopNpc[i].state = SHOPNPC_STATE_CALLSHOPASSISTANT_RCMD;
//												sprintf(strTempS, "여기요~");
//												setSpeak(&xShopNpc[i].xSpeak, strTempS, SPEAKFRAMEMAX);
//											}
//											
//											if(xWorldMap.isFriendMap == FALSE)
//											{
//												xShopNpc[i].eventBoxShowAntCnt = 0;
//												xShopNpc[i].payMentEvent = TRUE;
//												xShopNpc[i].payMentTime = xCalendar.nowTime;
//												xShopNpc[i].payMentType = 2;		//0계산대1:피팅룸2:쇼윈도
//											}
//										}
//										break;
//									case NPC_BUYACT_FITTINGROOM:
//										//피팅룸엔진에서 WAIT인손님 검색 피팅상태로 변환
//										xShopNpc[i].state = SHOPNPC_STATE_FITTINGROOM;
//										xShopNpc[i].anyCnt = 0;
//										//피팅룸엔진은 사용상태로 변환									
//										xFittingRoomInfo[xShopNpc[i].floor].npcNumcode[xShopNpc[i].actInteriorNum] = i;
//										break;
//									case NPC_BUYACT_PAYMENT:
//										xShopNpc[i].state = SHOPNPC_STATE_PAYMENTWAIT;
//										xShopNpc[i].anyCnt = 0;
//										break;
//									}
//								}
//							}
//							break;
//						}
//					}
//				}
//				else
//				{				
//					//다음이동
//					if(xShopNpc[i].bestX[xShopNpc[i].bestNowCnt] < xShopNpc[i].bestX[xShopNpc[i].bestNowCnt+1])
//						xShopNpc[i].moveType = MOVETYPE_XPLUS;
//					else if(xShopNpc[i].bestX[xShopNpc[i].bestNowCnt] > xShopNpc[i].bestX[xShopNpc[i].bestNowCnt+1])
//						xShopNpc[i].moveType = MOVETYPE_XMINUS;
//					else if(xShopNpc[i].bestY[xShopNpc[i].bestNowCnt] < xShopNpc[i].bestY[xShopNpc[i].bestNowCnt+1])
//						xShopNpc[i].moveType = MOVETYPE_YPLUS;
//					else if(xShopNpc[i].bestY[xShopNpc[i].bestNowCnt] > xShopNpc[i].bestY[xShopNpc[i].bestNowCnt+1])
//						xShopNpc[i].moveType = MOVETYPE_YMINUS;
//				}
//			}
//		break;
//		}
	}
			
	
	//점원연산
	for(int floor=0;floor<1;floor++)
	{
		for(int i=0;i<SHOPASSISTANTMAX;i++)
		{
			switch(xShopAssistant[floor][i].state)
			{
			case SHOPASSISTANT_STATE_WAIT:		//대기
				//대기상태일때만 대응NPC가능
				//처리는 SHOPNPC쪽에서 해주자
				switch(xShopAssistant[floor][i].moveType)
				{
				case MOVETYPE_XPLUS:
				case MOVETYPE_YPLUS:
					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
					break;
				case MOVETYPE_XMINUS:
				case MOVETYPE_YMINUS:
					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
					break;
				}
										
				if(++xShopAssistant[floor][i].anyCnt > 0)
				{
//					//정돈하기
//					int selectSellTable = DONT;					
//						
//					resetSellTableInfo(floor);	//xSell.tableNumSlot_Total[xSell.totalTotal]
//					selectSellTable = DONT;
//					if(xSell.totalTotal[floor] > 0)
//					{
//						for(int ss =0;ss<xSell.totalTotal[floor];ss++)
//						{
//							if(xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].orderingCnt> 300)
//							{
//								xSellTableInfo[floor][xSell.tableNumSlot_Total[floor][ss]].orderingCnt = 0;
//								selectSellTable = xSell.tableNumSlot_Total[floor][ss];
//								break;
//							}
//						}
//					}
//			
//					
//					if(selectSellTable != DONT)
//					{
//						setMapData(xSellTableInfo[floor][selectSellTable].interiorCode);
//						
//						xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_ORDERINGMOVE;
//						xShopAssistant[floor][i].nowDelay = 0;
//						xShopAssistant[floor][i].nowFrame = 0;
//																		
//						if(xMap.rever == 0)
//						{
//							
//							endX = xSellTableInfo[floor][selectSellTable].x + 1;
//							endY = xSellTableInfo[floor][selectSellTable].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
//							xShopAssistant[floor][i].actLook = MOVETYPE_XMINUS;
//						}
//						else
//						{
//							endX = xSellTableInfo[floor][selectSellTable].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
//							endY = xSellTableInfo[floor][selectSellTable].y + 1;
//							xShopAssistant[floor][i].actLook = MOVETYPE_YMINUS;
//						}
//
//						if(xMap.shopData[floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
//						{
//							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
//							xShopAssistant[floor][i].anyCnt = 0;
//						}
//						
//						//새위치 탐색
//						if(xShopAssistant[floor][i].state == SHOPASSISTANT_STATE_ORDERINGMOVE)
//						{
//							if(setAstar(xShopAssistant[floor][i].x-xMap.shopPointX, xShopAssistant[floor][i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
//							{
//								xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
//								xShopAssistant[floor][i].anyCnt = 0;
//							}
//							else
//							{
//								xShopAssistant[floor][i].bestTotalCnt = xAstar.totalCnt;
//								xShopAssistant[floor][i].bestNowCnt = 0;
//								for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//								{
//									xShopAssistant[floor][i].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//									xShopAssistant[floor][i].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//								}
//								//다음이동
//								if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
//									xShopAssistant[floor][i].moveType = MOVETYPE_XPLUS;
//								else if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
//									xShopAssistant[floor][i].moveType = MOVETYPE_XMINUS;
//								else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
//									xShopAssistant[floor][i].moveType = MOVETYPE_YPLUS;
//								else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
//									xShopAssistant[floor][i].moveType = MOVETYPE_YMINUS;
//							}
//						}
//					}
//					else
					{
						////////////
//						M_Boolean isWaitMove = FALSE;
						int waitMoveWhileCnt = 0;
//						while (true)
//						{
//							xShopAssistant[floor][i].makeX = ranDom(0, xMap.shopPointW-1);
//							xShopAssistant[floor][i].makeY = ranDom(0, xMap.shopPointH-1);
							
//                            isWaitMove = TRUE;
//                            break;
//							if(xMap.shopData[floor][MAP_TYPE_OBJ][xShopAssistant[floor][i].makeX][xShopAssistant[floor][i].makeY] == FALSE)
//							{
//								isWaitMove = TRUE;
//								break;
//							}
//							if(++waitMoveWhileCnt>30)
//								break;
//						}
						//////////
                    
						endX = xShopAssistant[floor][i].makeX+xMap.shopPointX;
						endY = xShopAssistant[floor][i].makeY+xMap.shopPointY;
                        
                        
                        
//						if(isWaitMove == FALSE)
//						{
//						}
//						else if(setAstar(xShopAssistant[floor][i].x-xMap.shopPointX, xShopAssistant[floor][i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
                        if(setAstar(xShopAssistant[floor][i].x-xMap.shopPointX, xShopAssistant[floor][i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
						{
                            xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
                            xShopAssistant[floor][i].nowDelay = 0;
                            xShopAssistant[floor][i].nowFrame = 0;
						}
						else
						{
							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAITMOVE;
							xShopAssistant[floor][i].nowDelay = 0;
							xShopAssistant[floor][i].nowFrame = 0;
							
							xShopAssistant[floor][i].bestTotalCnt = xAstar.totalCnt;
							xShopAssistant[floor][i].bestNowCnt = 0;
							for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
							{
								xShopAssistant[floor][i].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
								xShopAssistant[floor][i].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
							}
							
							
							//다음이동
							if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
								xShopAssistant[floor][i].moveType = MOVETYPE_XPLUS;
							else if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
								xShopAssistant[floor][i].moveType = MOVETYPE_XMINUS;
							else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
								xShopAssistant[floor][i].moveType = MOVETYPE_YPLUS;
							else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
								xShopAssistant[floor][i].moveType = MOVETYPE_YMINUS;
						}
					}
				}
				break;
//			case SHOPASSISTANT_STATE_ORDERING:	//정리
//				xShopAssistant[floor][i].moveType = xShopAssistant[floor][i].actLook;
//				switch(xShopAssistant[floor][i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_YPLUS:
//					if(1== prcSprit(&xSpritNpc[NPC_ACT_ORDERING][ACT_FRONT],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame))
//						xShopAssistant[floor][i].isActEnd = TRUE;
//					break;
//				case MOVETYPE_XMINUS:
//				case MOVETYPE_YMINUS:
//					if(1== prcSprit(&xSpritNpc[NPC_ACT_ORDERING][ACT_BACK],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame))
//						xShopAssistant[floor][i].isActEnd = TRUE;
//					break;
//				}
//				if(xShopAssistant[floor][i].isActEnd == TRUE)
//				{
//					xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
//					xShopAssistant[floor][i].anyCnt = 999;
//					xShopAssistant[floor][i].nowDelay = 0;
//					xShopAssistant[floor][i].nowFrame = 0;
//				}
//				break;
//			case SHOPASSISTANT_STATE_ORDERING2:	//청소
//				xShopAssistant[floor][i].moveType = xShopAssistant[floor][i].actLook;
//				switch(xShopAssistant[floor][i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_YPLUS:
//					if(1== prcSprit(&xSpritNpc[NPC_ACT_CLEAN][ACT_FRONT],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame))
//						xShopAssistant[floor][i].isActEnd = TRUE;
//					break;
//				case MOVETYPE_XMINUS:
//				case MOVETYPE_YMINUS:
//					if(1== prcSprit(&xSpritNpc[NPC_ACT_CLEAN][ACT_BACK],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame))
//						xShopAssistant[floor][i].isActEnd = TRUE;
//					break;
//				}
//				if(xShopAssistant[floor][i].isActEnd == TRUE)
//				{
//					xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
//					xShopAssistant[floor][i].anyCnt = 999;
//					xShopAssistant[floor][i].nowDelay = 0;
//					xShopAssistant[floor][i].nowFrame = 0;
//				}
//				break;
//			case SHOPASSISTANT_STATE_SELLTABLE:	//판매테이블
//				xShopAssistant[floor][i].moveType = xShopAssistant[floor][i].actLook;
//				switch(xShopAssistant[floor][i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_YPLUS:
//					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
//					break;
//				case MOVETYPE_XMINUS:
//				case MOVETYPE_YMINUS:
//					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
//					break;
//				}
//				
//				if(++xShopAssistant[floor][i].anyCnt > 30)
//				{
//					xShopAssistant[floor][i].anyCnt = 0;
//					//NPC가 요청한 상품이 있나 확인후 없다면 예외처리
//					int tableNum = xShopAssistant[floor][i].sellTableNum;
//					int itemSlotNum = DONT;
//					setMapData(xSellTableInfo[floor][tableNum].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
//					for(int ss=0;ss<xObj.xObjData[xMap.type][xMap.listNum].slot;ss++)
//					{
//						if(xSellTableInfo[floor][tableNum].xSlot[ss].code == xShopNpc[xShopAssistant[floor][i].shopNpcNum].buyItemCode_ASSISTCALL && xSellTableInfo[floor][tableNum].xSlot[ss].num > 0)
//						{
//							//물품이 있는것 확인
//							itemSlotNum = ss;
//							break;
//						}
//					}
//					
//					if(itemSlotNum == DONT)
//					{
//						//NPC예외처리
//						xShopNpc[xShopAssistant[floor][i].shopNpcNum].state = SHOPNPC_STATE_WAIT;
//						xShopNpc[xShopAssistant[floor][i].shopNpcNum].anyCnt = 0;
//						setSpeak(&xShopNpc[xShopAssistant[floor][i].shopNpcNum].xSpeak, "이 옷 다 팔렸나요?", SPEAKFRAMEMAX);
//						
//						//대응NPC그냥 대기상태로 변환 제위치로 갈필요는 없단
//						xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
//						xShopAssistant[floor][i].anyCnt = 0;
//						xShopAssistant[floor][i].nowDelay = 0;
//						xShopAssistant[floor][i].nowFrame = 0;
//					}
//					else
//					{
//						if(xShowWindowInfo[floor][xShopNpc[xShopAssistant[floor][i].shopNpcNum].actInteriorNum].interiorCode < 0)
//						{
//							endX = xShopNpc[xShopAssistant[floor][i].shopNpcNum].x;
//							endY = xShopNpc[xShopAssistant[floor][i].shopNpcNum].y+1;
//						}
//						else
//						{
//							endX = xShopNpc[xShopAssistant[floor][i].shopNpcNum].x+1;
//							endY = xShopNpc[xShopAssistant[floor][i].shopNpcNum].y;
//						}
//						
//						
//						
//						
//						//손님 앞에 자리가 없다면 그냥 손님과 겹치게 하자
//						if(setAstar(xShopAssistant[floor][i].x-xMap.shopPointX, xShopAssistant[floor][i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
//						{
//							endX = xShopNpc[xShopAssistant[floor][i].shopNpcNum].x;
//							endY = xShopNpc[xShopAssistant[floor][i].shopNpcNum].y;
//						}
//						
//						
//						if(setAstar(xShopAssistant[floor][i].x-xMap.shopPointX, xShopAssistant[floor][i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,floor) == FALSE)
//						{
//							//NPC예외처리
//							xShopNpc[xShopAssistant[floor][i].shopNpcNum].state = SHOPNPC_STATE_WAIT;
//							xShopNpc[xShopAssistant[floor][i].shopNpcNum].anyCnt = 0;
//							xShowWindowInfo[floor][xShopNpc[xShopAssistant[floor][i].shopNpcNum].actInteriorNum].state = SHOWWINDOWINFO_STATE_WAIT;
//
//							
//							//setSpeak(&xShopNpc[xShopAssistant[floor][i].shopNpcNum].xSpeak, "점원>손님길찾ERR_11(개발확인)", SPEAKFRAMEMAX);
//							
//							//대응NPC그냥 대기상태로 변환 제위치로 갈필요는 없단
//							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
//							xShopAssistant[floor][i].anyCnt = 0;
//							xShopAssistant[floor][i].nowDelay = 0;
//							xShopAssistant[floor][i].nowFrame = 0;							
//						}
//						else
//						{
//							//테이블에서 수량 꺼네기 및 아이템 등록
//							
//							if(xWorldMap.isFriendMap == FALSE)
//							{
//								xSaveTemp.sellFittingNum++;
//								--xSellTableInfo[floor][tableNum].xSlot[itemSlotNum].num;
//                                xSellTableInfo[floor][tableNum].xSlot[itemSlotNum].flowTime = 0;
//								xSellTableInfo[floor][tableNum].isUpdata = TRUE;
//							}
//							
//							xShopAssistant[floor][i].buyItemCode = xSellTableInfo[floor][tableNum].xSlot[itemSlotNum].code;
//														
//							//대응NPC로 이동
//							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_SHOPNPCMOVE;
//							xShopAssistant[floor][i].bestTotalCnt = xAstar.totalCnt;
//							xShopAssistant[floor][i].bestNowCnt = 0;
//							for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//							{
//								xShopAssistant[floor][i].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//								xShopAssistant[floor][i].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//							}
//							
//							//다음이동
//							if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
//								xShopAssistant[floor][i].moveType = MOVETYPE_XPLUS;
//							else if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
//								xShopAssistant[floor][i].moveType = MOVETYPE_XMINUS;
//							else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
//								xShopAssistant[floor][i].moveType = MOVETYPE_YPLUS;
//							else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
//								xShopAssistant[floor][i].moveType = MOVETYPE_YMINUS;
//						}
//					}				
//				}
//				break;
//			case SHOPASSISTANT_STATE_RCMD:		//추천설명
//				setFace(&xShopAssistant[floor][i].xFace, FACE_TYPE_SMILE);
//				xShopAssistant[floor][i].moveType = xShopAssistant[floor][i].actLook;
//				switch(xShopAssistant[floor][i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_YPLUS:
//					prcSprit(&xSpritNpc[NPC_ACT_TALKING][ACT_FRONT],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
//					break;
//				case MOVETYPE_XMINUS:
//				case MOVETYPE_YMINUS:
//					prcSprit(&xSpritNpc[NPC_ACT_TALKING][ACT_BACK],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
//					break;
//				}
//					
//				if(++xShopAssistant[floor][i].anyCnt == 5)
//				{
//					setSpeak(&xShopNpc[xShopAssistant[floor][i].shopNpcNum].xSpeak, "의상 추천 좀 해주세요", SPEAKFRAMEMAX);
//				}
//				else if(xShopAssistant[floor][i].anyCnt == 30)
//				{
//					
//					int type = xShopNpc[xShopAssistant[floor][i].shopNpcNum].buyItemCode_ASSISTCALL/1000;
//					int list = xShopNpc[xShopAssistant[floor][i].shopNpcNum].buyItemCode_ASSISTCALL%1000;
//					
//					sprintf(strTempS, "요즘은 %s을(를) 많이들 찾으세요",xFashionData[type][list].strName);
//					setSpeak(&xShopAssistant[floor][i].xSpeak, strTempS, SPEAKFRAMEMAX);
//				}
//				else  if(xShopAssistant[floor][i].anyCnt == 55)
//				{
//					int type = xShopNpc[xShopAssistant[floor][i].shopNpcNum].buyItemCode_ASSISTCALL/1000;
//					int list = xShopNpc[xShopAssistant[floor][i].shopNpcNum].buyItemCode_ASSISTCALL%1000;
//					
//					sprintf(strTempS, "음~그럼 %s 가져다 주세요",xFashionData[type][list].strName);
//					setSpeak(&xShopNpc[xShopAssistant[floor][i].shopNpcNum].xSpeak, strTempS, SPEAKFRAMEMAX);
//				}
//				else  if(xShopAssistant[floor][i].anyCnt == 80)
//				{
//					setCallShopAssistant(xShopAssistant[floor][i].shopNpcNum,i);
//				}
//				break;
//			case SHOPASSISTANT_STATE_SHOPNPC:	//판매요청npc대응
//				setFace(&xShopAssistant[floor][i].xFace, FACE_TYPE_SMILE);
//				xShopAssistant[floor][i].moveType = xShopAssistant[floor][i].actLook;
//				switch(xShopAssistant[floor][i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_YPLUS:
//					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
//					break;
//				case MOVETYPE_XMINUS:
//				case MOVETYPE_YMINUS:
//					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
//					break;
//				}
//				if(++xShopAssistant[floor][i].anyCnt > 20)
//				{
//					//물건 건네주기
//					xShopNpc[xShopAssistant[floor][i].shopNpcNum].buyItemCode = xShopAssistant[floor][i].buyItemCode;
//					xShopAssistant[floor][i].buyItemCode = DONT;
//					
//					//대응NPC다음상태로 변경
//					if(ranDom(0, 100) < 70)
//						setNpcStateFittingRoom(xShopAssistant[floor][i].shopNpcNum,floor);
//					else
//						setNpcStatePayMent(xShopAssistant[floor][i].shopNpcNum,floor);
//					
//					xShowWindowInfo[floor][xShopNpc[xShopAssistant[floor][i].shopNpcNum].actInteriorNum].state = SHOWWINDOWINFO_STATE_WAIT;
//										
//					xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
//					xShopAssistant[floor][i].anyCnt = 0;
//					xShopAssistant[floor][i].nowDelay = 0;
//					xShopAssistant[floor][i].nowFrame = 0;
//				}
//				break;
//			case SHOPASSISTANT_STATE_SELLTABLEMOVE:
//			case SHOPASSISTANT_STATE_SHOPNPCMOVE:
//			case SHOPASSISTANT_STATE_RCMDMOVE:
			case SHOPASSISTANT_STATE_WAITMOVE:
//			case SHOPASSISTANT_STATE_ORDERINGMOVE:
				setFace(&xShopAssistant[floor][i].xFace, FACE_TYPE_NORMAL);
				if(xShopAssistant[floor][i].speed == xMap.speedTable[1])
				{
					if(gameCnt%2==0)
						++xShopAssistant[floor][i].imgCnt;
				}
				else if(xShopAssistant[floor][i].speed == xMap.speedTable[2])
				{
					++xShopAssistant[floor][i].imgCnt;
				}
				else if(xShopAssistant[floor][i].speed == xMap.speedTable[3])
				{
					xShopAssistant[floor][i].imgCnt +=2;
				}
				
				if(xShopAssistant[floor][i].imgCnt > 19)
					xShopAssistant[floor][i].imgCnt = 0;
					
				switch(xShopAssistant[floor][i].moveType)
				{
				case MOVETYPE_XPLUS:
				case MOVETYPE_YPLUS:
					prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
					break;
				case MOVETYPE_XMINUS:
				case MOVETYPE_YMINUS:
					prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_BACK],&xShopAssistant[floor][i].nowDelay,&xShopAssistant[floor][i].nowFrame);
					break;
				}
					
				switch(xShopAssistant[floor][i].moveType)
				{
				case MOVETYPE_XPLUS:
					xShopAssistant[floor][i].drawX -= (float)(xShopAssistant[floor][i].speed * 2);
					xShopAssistant[floor][i].drawY += (float)(xShopAssistant[floor][i].speed * 1);
                   
					if(xShopAssistant[floor][i].drawX  <= -(TILEW/4))
					{
						xShopAssistant[floor][i].x++;
						xShopAssistant[floor][i].drawX = (TILEW/4);
						xShopAssistant[floor][i].drawY = -(TILEH/4);
                    }
					break;
				case MOVETYPE_XMINUS:
					xShopAssistant[floor][i].drawX += (float)(xShopAssistant[floor][i].speed * 2);
					xShopAssistant[floor][i].drawY -= (float)(xShopAssistant[floor][i].speed * 1);
    
					if(xShopAssistant[floor][i].drawX  >= (TILEW/4))
					{
						xShopAssistant[floor][i].x--;
						xShopAssistant[floor][i].drawX = -(TILEW/4);
						xShopAssistant[floor][i].drawY = (TILEH/4);
                        
					}
					break;
				case MOVETYPE_YPLUS:
					xShopAssistant[floor][i].drawX += (float)(xShopAssistant[floor][i].speed * 2);
					xShopAssistant[floor][i].drawY += (float)(xShopAssistant[floor][i].speed * 1);

					if(xShopAssistant[floor][i].drawY  >= (TILEH/4))
					{
						xShopAssistant[floor][i].y++;
						xShopAssistant[floor][i].drawX = -(TILEW/4);
						xShopAssistant[floor][i].drawY = -(TILEH/4);
					}
					break;
				case MOVETYPE_YMINUS:
					xShopAssistant[floor][i].drawX -= (float)(xShopAssistant[floor][i].speed * 2);
					xShopAssistant[floor][i].drawY -= (float)(xShopAssistant[floor][i].speed * 1);
                    if(xShopAssistant[floor][i].drawY  <= -(TILEH/4))
					{
						xShopAssistant[floor][i].y--;
						xShopAssistant[floor][i].drawX = (TILEW/4);
						xShopAssistant[floor][i].drawY = (TILEH/4);
                        
					}
					break;
				}
					
				//도착 위치 검색 및 위치 보정
				if(xShopAssistant[floor][i].drawX == 0)
				{
					//목표위치도착
					if(++xShopAssistant[floor][i].bestNowCnt >= xShopAssistant[floor][i].bestTotalCnt-1)
					{
						switch(xShopAssistant[floor][i].state)
						{
//						case SHOPASSISTANT_STATE_SELLTABLEMOVE:		//진열대로 이동중
//							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_SELLTABLE;
//							xShopAssistant[floor][i].nowDelay = 0;
//							xShopAssistant[floor][i].nowFrame = 0;
//							xShopAssistant[floor][i].isActEnd = FALSE;
//							xShopAssistant[floor][i].anyCnt = 0;
//							break;
//						case SHOPASSISTANT_STATE_SHOPNPCMOVE:		//손님에게 이동중
//							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_SHOPNPC;
//							xShopAssistant[floor][i].anyCnt = 0;
//							xShopAssistant[floor][i].nowDelay = 0;
//							xShopAssistant[floor][i].nowFrame = 0;
//							xShopAssistant[floor][i].anyCnt = 0;
//							break;
//						case SHOPASSISTANT_STATE_RCMDMOVE:
//							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_RCMD;
//							xShopAssistant[floor][i].anyCnt = 0;
//							xShopAssistant[floor][i].nowDelay = 0;
//							xShopAssistant[floor][i].nowFrame = 0;
//							xShopAssistant[floor][i].anyCnt = 0;
//							break;
						case SHOPASSISTANT_STATE_WAITMOVE:			//본위치로 이동중
							xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_WAIT;
							xShopAssistant[floor][i].anyCnt = 0;
							xShopAssistant[floor][i].nowDelay = 0;
							xShopAssistant[floor][i].nowFrame = 0;
							break;
//						case SHOPASSISTANT_STATE_ORDERINGMOVE:
//							if(ranDom(0, 100) < 50)
//							{
//								xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_ORDERING;
//							}
//							else
//							{
//								xShopAssistant[floor][i].state = SHOPASSISTANT_STATE_ORDERING2;
//							}
//							
//							xShopAssistant[floor][i].isActEnd = FALSE;
//							xShopAssistant[floor][i].anyCnt = 0;								
//							xShopAssistant[floor][i].nowDelay = 0;
//							xShopAssistant[floor][i].nowFrame = 0;
//							break;
						}
					}
					else
					{
						//다음이동
						if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
							xShopAssistant[floor][i].moveType = MOVETYPE_XPLUS;
						else if(xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestX[xShopAssistant[floor][i].bestNowCnt+1])
							xShopAssistant[floor][i].moveType = MOVETYPE_XMINUS;
						else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] < xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
							xShopAssistant[floor][i].moveType = MOVETYPE_YPLUS;
						else if(xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt] > xShopAssistant[floor][i].bestY[xShopAssistant[floor][i].bestNowCnt+1])
							xShopAssistant[floor][i].moveType = MOVETYPE_YMINUS;
					}
				}
				break;
			}
//            log("KBY_DDDD : %d",xShopAssistant[floor][i].state);
		}
		
		
		
		
		//계산점원 연산
		//계산대기중 손님들은 계산손님등록 큐를 지속적으로 검색하여 가는길에 좌표가 겹친다면 그대로 서서 대기하고
		//아닐경우 이동한다
		
		switch(xPaymentAssistant[floor].state)
		{
		case PAYMENTASSISTANT_STATE_WAIT:
		case PAYMENTASSISTANT_STATE_DANCE:
		case PAYMENTASSISTANT_STATE_PHONE:
		case PAYMENTASSISTANT_STATE_FASHIONCHECK:
				
			if(xPaymentAssistant[floor].state == PAYMENTASSISTANT_STATE_WAIT)
			{
				if(++xPaymentAssistant[floor].waitAnyCnt > 100)
				{
					xPaymentAssistant[floor].waitAnyCnt = 0;
					switch(ranDom(0, 2))
					{
					case 0:
						xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_DANCE;
						xPaymentAssistant[floor].nowDelay = 0;
						xPaymentAssistant[floor].nowFrame = 0;
						break;
					case 1:
						xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_PHONE;
						xPaymentAssistant[floor].nowDelay = 0;
						xPaymentAssistant[floor].nowFrame = 0;
						break;
					case 2:
						xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_FASHIONCHECK;
						xPaymentAssistant[floor].nowDelay = 0;
						xPaymentAssistant[floor].nowFrame = 0;
						break;
					}					
				}
			}
				
			switch(xPaymentAssistant[floor].state)
			{
			case PAYMENTASSISTANT_STATE_WAIT:
				setFace(&xPaymentAssistant[floor].xFace, FACE_TYPE_NORMAL);
				//대기큐슬롯관리 및 위치정보까지 관리한다
				switch(xPaymentAssistant[floor].moveType)
				{
				case MOVETYPE_XPLUS:
				case MOVETYPE_YPLUS:
					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xPaymentAssistant[floor].nowDelay,&xPaymentAssistant[floor].nowFrame);
					break;
				case MOVETYPE_XMINUS:
				case MOVETYPE_YMINUS:
					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xPaymentAssistant[floor].nowDelay,&xPaymentAssistant[floor].nowFrame);
					break;
				}
				break;
			case PAYMENTASSISTANT_STATE_DANCE:
				setFace(&xPaymentAssistant[floor].xFace, FACE_TYPE_SMILE);
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_DANCE][ACT_FRONT],&xPaymentAssistant[floor].nowDelay,&xPaymentAssistant[floor].nowFrame))
				{
					xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_WAIT;
				}
				break;
			case PAYMENTASSISTANT_STATE_PHONE:
				setFace(&xPaymentAssistant[floor].xFace, FACE_TYPE_SMILE);
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_PHONE][ACT_FRONT],&xPaymentAssistant[floor].nowDelay,&xPaymentAssistant[floor].nowFrame))
				{
					xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_WAIT;
				}
				break;
			case PAYMENTASSISTANT_STATE_FASHIONCHECK:
				setFace(&xPaymentAssistant[floor].xFace, FACE_TYPE_SMILE);
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_FASHIONCHECK][ACT_FRONT],&xPaymentAssistant[floor].nowDelay,&xPaymentAssistant[floor].nowFrame))
				{
					xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_WAIT;
				}
				break;
			}
				
				
				
				
			xPaymentAssistant[floor].payMentCntMax = 1;
			if(++xPaymentAssistant[floor].payMentCntNow >= xPaymentAssistant[floor].payMentCntMax)
			{
				for(int i=0;i<xPaymentAssistant[floor].totalSlot;i++)
				{
					if(xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].state == SHOPNPC_STATE_PAYMENTWAIT)
					{
						//큐손님중에 계산대 위치까지 도달하였다면 계산중으로변경
						xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].state = SHOPNPC_STATE_PAYMENT;
						xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].anyCnt = 0;
						
						//계산알바 정보 계산중으로 변경
						xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_PLAY;
						xPaymentAssistant[floor].isActEnd = FALSE;
						xPaymentAssistant[floor].nowDelay = 0;
						xPaymentAssistant[floor].nowFrame = 0;
						xPaymentAssistant[floor].selectSlot = i;
						xPaymentAssistant[floor].payMentCntNow = 0;
						
						
						if(xWorldMap.isFriendMap == FALSE)
						{
							xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].eventBoxShowAntCnt = 0;
							xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].payMentEvent = TRUE;
							xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].payMentTime = xCalendar.nowTime;
							xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].payMentType = 0;	//0계산대1:피팅룸2:쇼윈도
							
							if(xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[i].npcNum].isPorter_woman == TRUE)
								setQuest(97, 1, DONT);
						}
						break;
					}
				}
			}
			break;
		case PAYMENTASSISTANT_STATE_PLAY:
			setFace(&xPaymentAssistant[floor].xFace, FACE_TYPE_SMILE);
			//계산카운터 완료시
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_PAYMENT][ACT_FRONT],&xPaymentAssistant[floor].nowDelay,&xPaymentAssistant[floor].nowFrame))
				xPaymentAssistant[floor].isActEnd = TRUE;
			
			if(xPaymentAssistant[floor].isActEnd == TRUE)
			{
				//계산알바 정보 WAIT로 변경
				xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_WAIT;
				if(ranDom(0, 100) < xWorldMap.npcSpeakPer)
				{
					switch(ranDom(0, 2))
					{
					case 0:
						setSpeak(&xPaymentAssistant[floor].xSpeak, "감사합니다", SPEAKFRAMEMAX);
						break;
					case 1:
						setSpeak(&xPaymentAssistant[floor].xSpeak, "또 오세요", SPEAKFRAMEMAX);
						break;
					case 2:
						setSpeak(&xPaymentAssistant[floor].xSpeak, "옷은 맘에 드세요?", SPEAKFRAMEMAX);
						break;
					}
				}
				
				
				//손님정보 EXIT로 변경하고 슬롯정보에서 제외 시키자
				xShopNpc[xPaymentAssistant[floor].xShopNpcSlot[xPaymentAssistant[floor].selectSlot].npcNum].isFloorExit = TRUE;
				
				setNpcStateExit(xPaymentAssistant[floor].xShopNpcSlot[xPaymentAssistant[floor].selectSlot].npcNum,floor);
				
				
				
				for(int i=xPaymentAssistant[floor].selectSlot;i<xPaymentAssistant[floor].totalSlot-1;i++)
				{
					xPaymentAssistant[floor].xShopNpcSlot[i].npcNum = xPaymentAssistant[floor].xShopNpcSlot[i+1].npcNum;
				}
				xPaymentAssistant[floor].totalSlot--;
			}
			break;
		}
		
	}
}



void drawWorldMap()
{
	int i;

	int v,x,y;
	int mapXpos;
	int mapYpos;	
		
	//최하 배경
	drawImage(&imgMapBg, xMap.pointX-2, xMap.pointY+722, 0, 0, imgMapBg.w, imgMapBg.h, VH);
    
    //LJW 월드맵 라이벌샵 막기
//    drawRivalComingSoon();
	
    //LJW 월드맵 건물 추가
	prcWorldMapRocket();
	drawWorldMapRocket();
	
	drawWorldMapVinylHouse();
	
	drawWorldMapStorage();
	
	drawWorldMapAntenna();
	//여기까지
   
    
    
    
	
	M_Boolean isRetrun = FALSE;
	switch(xWorldMap.state)
	{
	case WORLDMAP_STATE_INTERIORSHOP:		//인테리어 상점
	case WORLDMAP_STATE_FITTING:			//피팅
	case WORLDMAP_STATE_STAFF:				//스태프꾸미기
	case WORLDMAP_STATE_FRIENDORDERITEM:	//친구샵 주문
	case WORLDMAP_STATE_MAIL:				//방명록
	case WORLDMAP_STATE_MODEL:				//모델
	case WORLDMAP_STATE_MODEL_FRIEND:		//모델
	case WORLDMAP_STATE_FASHIONSHOWNEW:		//런어웨이
//	case WORLDMAP_STATE_PRODUCTIONMENU:		//새로운 생산

		isRetrun = TRUE;
		break;
	}
	
	if(xWorldMap.isCashShop == TRUE)
		isRetrun = TRUE;
	
	if(isRetrun == TRUE)
		return;	
	
	//자동차 그림자 그리기
	//LJW 월드맵 자동차 그리기 막기!!
//	if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//	{
//		for(int carI=0;carI<WORLDMAPCARMAX;carI++)
//		{
//			if(xWorldMapCar[carI].state != WORLDMAPCAR_STATE_DONT)
//			{
//				mapXpos = xMap.pointX + ((xWorldMapCar[carI].y - xWorldMapCar[carI].x) * (TILEW / 2));
//				
//				if ((xWorldMapCar[carI].y + xWorldMapCar[carI].x) % 2 == 1)
//					mapYpos = xMap.pointY+ (((xWorldMapCar[carI].y + xWorldMapCar[carI].x) / 2) * TILEH) + (TILEH / 2);
//				else
//					mapYpos = xMap.pointY+ (((xWorldMapCar[carI].y + xWorldMapCar[carI].x) / 2) * TILEH);
//				
//				subTemp[XPOS] = mapXpos + xWorldMapCar[carI].drawX;
//				subTemp[YPOS] = mapYpos + xWorldMapCar[carI].drawY;
//				xGame.isReSizeDraw = TRUE;
//				xGame.reSize = 120;
//				switch(xWorldMapCar[carI].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_XMINUS:
//					drawPacker(imgWorldMapCarShadow, subTemp[XPOS], subTemp[YPOS]+20, 0, 0, imgW(imgWorldMapCarShadow), imgH(imgWorldMapCarShadow), VH);
//					break;
//				case MOVETYPE_YPLUS:
//				case MOVETYPE_YMINUS:
//					xGame.isReverse = TRUE;
//					drawPacker(imgWorldMapCarShadow, subTemp[XPOS], subTemp[YPOS]+20, 0, 0, imgW(imgWorldMapCarShadow), imgH(imgWorldMapCarShadow), VH);
//					xGame.isReverse = FALSE;
//					break;
//				}
//				xGame.isReSizeDraw = FALSE;
//			}
//		}
//	}
	
	//패션쇼장 불빛
	/*
	xFashionShowLight[0].x=305;
	xFashionShowLight[0].y=300;
	
	xFashionShowLight[1].x=xFashionShowLight[0].x-58;
	xFashionShowLight[1].y=xFashionShowLight[0].y+43;
	
	xFashionShowLight[2].x=xFashionShowLight[1].x-72;
	xFashionShowLight[2].y=xFashionShowLight[1].y+32;
	
	xFashionShowLight[3].x=xFashionShowLight[2].x-85;
	xFashionShowLight[3].y=xFashionShowLight[2].y+20;
	
	xFashionShowLight[4].x=xFashionShowLight[3].x-96;
	xFashionShowLight[4].y=xFashionShowLight[3].y+8;
	
	xFashionShowLight[5].x=xFashionShowLight[4].x-98;
	xFashionShowLight[5].y=xFashionShowLight[4].y-10;
	
	xFashionShowLight[6].x=xFashionShowLight[5].x-85;
	xFashionShowLight[6].y=xFashionShowLight[5].y-20;
	
	
	for(int i=0;i<FASHIONSHOWLIGHTMAX;i++)
	{
		switch(xFashionShowLight[i].state)
		{
		case FASHINGSHOWLIGHT_STATE_OFF:
			setAlpha(0);
			if(++xFashionShowLight[i].anyCnt > xFashionShowLight[i].anyCntMax)
			{
				xFashionShowLight[i].state = FASHINGSHOWLIGHT_STATE_SET;
			}
				break;
		case FASHINGSHOWLIGHT_STATE_ON:
			switch(xFashionShowLight[i].anyCnt)
			{
			case 0:setAlpha(50);	break;
			case 1:setAlpha(100);	break;
			case 2:setAlpha(150);break;
			case 3:setAlpha(200);break;
			}
			switch(xFashionShowLight[i].anyCntMax - xFashionShowLight[i].anyCnt)
			{
			case 0:setAlpha(50);break;
			case 1:setAlpha(100);break;
			case 2:setAlpha(150);break;
			case 3:setAlpha(200);break;
			}
			if(++xFashionShowLight[i].anyCnt > xFashionShowLight[i].anyCntMax)
			{
				xFashionShowLight[i].state = FASHINGSHOWLIGHT_STATE_OFF;
				xFashionShowLight[i].anyCnt = 0;
				xFashionShowLight[i].anyCntMax = ranDom(0, 5);
			}
			break;
		case FASHINGSHOWLIGHT_STATE_SET:
			xFashionShowLight[i].state = FASHINGSHOWLIGHT_STATE_ON;
			xFashionShowLight[i].anyCnt = 0;
			xFashionShowLight[i].anyCntMax = ranDom(15, 25);
			xFashionShowLight[i].imgNum = ranDom(0,2);
			setAlpha(0);
			break;
		}
		if(xFashionShowLight[i].state == FASHINGSHOWLIGHT_STATE_ON)
		{
			drawImage(&imgWorldMapObj[xFashionShowLight[i].imgNum], xMap.pointX+xFashionShowLight[i].x, xMap.pointY+xFashionShowLight[i].y, 0, 0, imgWorldMapObj[xFashionShowLight[i].imgNum].w, imgWorldMapObj[xFashionShowLight[i].imgNum].h, VH);
		}
		setAlpha(ALPHA_MAX);
	}
	setAlpha(ALPHA_MAX);
	 */
		
	
	//바닥 그리기(좌표 구해서 거기서 부터 해주자)
	
	if(xWorldMap.isExternal == TRUE)
		xMap.nowFloor = xMap.totalFloor-1;
	

	for(int floor = 0;floor < xMap.totalFloor;floor++)
	{
		if(xMap.nowFloor == floor)
		{
			
            //makeBackBuffer(xMap.nowFloor);
		}
		
		if(xMap.nowFloor < floor)
		{
			//
			continue;
		}
		
		
		for (v = MAP_TYPE_FLOORTILE0; v <= MAP_TYPE_FLOORTILE1; v++)
		{
			for (y = xMap.shopPointY; y < xMap.shopPointY+xMap.shopPointH; y++)
			{
				for (x = xMap.shopPointX; x < xMap.shopPointX+xMap.shopPointW; x++)
				{
					//크릴위치 및 크기 설정
					mapXpos = xMap.pointX + (((y-(floor*5)) - (x-(floor*5))) * (TILEW / 2));
					
					if ((y + x) % 2 == 1)
						mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH) + (TILEH / 2);
					else
						mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH);
					
					if(v == MAP_TYPE_FLOORTILE0)
					{
						subTemp[0] = mapXpos;
						subTemp[1] = mapYpos;
						subTemp[0] += (int)(((mapXpos-(float)cx) * (xGame.fgameScale-1.f)));
						subTemp[1] += (int)(((mapYpos-(float)cy) * (xGame.fgameScale-1.f)));					
						if(subTemp[0] < -64)
							break;
						if(subTemp[1] > lcdH+64)
							break;
						else if(subTemp[0] > lcdW+64 || subTemp[1] < -64)
							continue;
						
					}
					
					if (xMap.data[floor][v][x][y] == 0)
					{
						continue;
					}
					else
						setMapData(xMap.data[floor][v][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
					
					
					xGame.isReverse = xMap.rever;
					if(xMap.nowFloor == floor)
					{
						
						if(xWorldMap.state == WORLDMAP_STATE_INTERIOR)
						{
							if(v == MAP_TYPE_FLOORTILE1)
							{
								if(xInterior.buildInType == INTERIORBUILD_TYPE_GAME && xInterior.buildMode == 1)
								{
									setAlpha(100);
								}
							}
						}
												
                        drawObj(mapXpos, mapYpos, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
                        
//                        xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].wPos = xObj.img[xMap.type][xMap.listNum].w;
//                        xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].hPos = xObj.img[xMap.type][xMap.listNum].h;
//                        xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].xPos = mapXpos - xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].wPos/2;
//                        xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].yPos = mapYpos - xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].xPos , xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].yPos , xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].wPos, xMap.xTouchTile[xMap.nowFloor][xMap.type][xMap.listNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        
                        if(v == MAP_TYPE_FLOORTILE0)
                        {
                            if(x == (xMap.shopPointX+xMap.shopPointW-1))
                                drawImage(&imgShopOutLine[2], mapXpos-16, mapYpos+32, 0, 0, imgShopOutLine[2].w, imgShopOutLine[2].h, VH);
                            
                            if(y == (xMap.shopPointY+xMap.shopPointH-1))
                            {
                                xGame.isReverse = true;
                                drawImage(&imgShopOutLine[2], mapXpos+16, mapYpos+32, 0, 0, imgShopOutLine[2].w, imgShopOutLine[2].h, VH);
                            }
                        }
                        
						setAlpha(ALPHA_MAX);
					}

					xGame.isBlend = FALSE;
					xGame.isReverse = FALSE;
					xObj.isImgUse[xMap.type][xMap.listNum] = TRUE;
				}
			}
		}
						
		//이벤트큐에 등록된 바닥 그리기
		if(xMap.nowFloor == floor)
		{
			for(int e=0;e<xEventQueue.totalNum;e++)
			{
				if(xEventQueue.floor[e] == floor)
				{
					switch(xEventQueue.type[e])
					{
					case EVENTQUEUE_TYPE_INTERIOR:
					case EVENTQUEUE_TYPE_INPUTINVEN:
					case EVENTQUEUE_TYPE_OUTPUTINVEN:
					case EVENTQUEUE_TYPE_MOVE:
						setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
						if(xMap.type == INTERIOR_TYPE_FLOORTILE)
						{
							//크릴위치 및 크기 설정
							mapXpos = xMap.pointX + (((xEventQueue.y[e]-(floor*5)) - (xEventQueue.x[e]-(floor*5))) * (TILEW / 2));
							
							if ((xEventQueue.y[e] + xEventQueue.x[e]) % 2 == 1)
								mapYpos = xMap.pointY+ ((((xEventQueue.y[e]-(floor*5)) + (xEventQueue.x[e]-(floor*5))) / 2) * TILEH) + (TILEH / 2);
							else
								mapYpos = xMap.pointY+ ((((xEventQueue.y[e]-(floor*5)) + (xEventQueue.x[e]-(floor*5))) / 2) * TILEH);
							
							drawObj(mapXpos, mapYpos, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
						}
						break;
					}
				}
			}
		}
				
		//확장인포 그리기
		if(xMap.extension < 7)
		{
			drawPacker(imgExternalInfo, xMap.pointX-158-(xMap.extension*20), xMap.pointY+1017+(xMap.extension*22), 0, 0, imgW(imgExternalInfo), imgH(imgExternalInfo)/2, VH);
			drawPacker(imgExternalInfo, xMap.pointX+158+(xMap.extension*20), xMap.pointY+1017+(xMap.extension*22), 0, imgH(imgExternalInfo)/2, imgW(imgExternalInfo), imgH(imgExternalInfo)/2, VH);
		}
		
		//이벤트큐에 등록된 바닥2 그리기
		if(xMap.nowFloor == floor)
		{
			for(int e=0;e<xEventQueue.totalNum;e++)
			{
				if(xEventQueue.floor[e] == floor)
				{
					switch(xEventQueue.type[e])
					{
					case EVENTQUEUE_TYPE_INTERIOR:
					case EVENTQUEUE_TYPE_INPUTINVEN:
					case EVENTQUEUE_TYPE_OUTPUTINVEN:
					case EVENTQUEUE_TYPE_MOVE:
						setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
						if(xMap.type == INTERIOR_TYPE_OBJFLOOR)
						{
							//크릴위치 및 크기 설정
							mapXpos = xMap.pointX + (((xEventQueue.y[e]-(floor*5)) - (xEventQueue.x[e]-(floor*5))) * (TILEW / 2));
							
							if ((xEventQueue.y[e] + xEventQueue.x[e]) % 2 == 1)
								mapYpos = xMap.pointY+ ((((xEventQueue.y[e]-(floor*5)) + (xEventQueue.x[e]-(floor*5))) / 2) * TILEH) + (TILEH / 2);
							else
								mapYpos = xMap.pointY+ ((((xEventQueue.y[e]-(floor*5)) + (xEventQueue.x[e]-(floor*5))) / 2) * TILEH);
							
							
							drawObj(mapXpos, mapYpos, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
						}
						break;
					}
				}
			}
		}
		
		if(xWorldMap.isFriendMap == TRUE)
		{
			if((xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100 <= 0)
			{
			}
			else if(xFriendData[xFriendMap.selectDataSlotNum].socialCount <= 0)
			{
			}
			else
			{
				//쓰레기 그리기
				for(int wasteI=0;wasteI<WASTEMAX;wasteI++)
				{
					if(xWaste.state[floor][wasteI] != WASTE_STATE_DONT)
					{
						int x = xWaste.mapX[floor][wasteI]+xMap.shopPointX;
						int y = xWaste.mapY[floor][wasteI]+xMap.shopPointY;
						
						mapXpos = xMap.pointX + (((y-(floor*5)) - (x-(floor*5))) * (TILEW / 2));
						
						if ((y + x) % 2 == 1)
							mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH) + (TILEH / 2);
						else
							mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH);
						
						mapYpos += 32;
												
						switch(xWaste.type[floor][wasteI])
						{
						case 0: drawPacker(imgWaste0, mapXpos, mapYpos, 0, 0, imgW(imgWaste0), imgH(imgWaste0), VH);break;
						case 1: drawPacker(imgWaste1, mapXpos, mapYpos, 0, 0, imgW(imgWaste1), imgH(imgWaste1), VH);break;
						default: drawPacker(imgWaste2, mapXpos, mapYpos, 0, 0, imgW(imgWaste2), imgH(imgWaste2), VH);break;
						}
					}
				}
			}
		}
		
		if(xWorldMap.state == WORLDMAP_STATE_INTERIOR && xMap.nowFloor == floor)
		{
			if(xInterior.xBuildSlot.codeTeam[0] != 0)
			{
				xTouchS.xPos = getWorldMapPosTouch(xInterior.buildMapMoveXpos,cx);
				xTouchS.yPos = getWorldMapPosTouch(xInterior.buildMapMoveYpos,cy);
								
				int mapXpos;
				int mapYpos;
				int mapWpos;
				int mapHpos;
				int reCheckPlus = 0;
				M_Boolean isCheck = FALSE;
				while(true)
				{
					for (int i = xMap.shopPointX-1; i < xMap.shopPointX+xMap.shopPointW; i++)
					{
						for (int j = xMap.shopPointY-1; j < xMap.shopPointY+xMap.shopPointH; j++)
						{
							//충돌체크범위용
							mapXpos = xMap.pointX + (((j-(floor*5)) - (i-(floor*5))) * (TILEW / 2));
							
							if ((j + i + 1) % 2 == 1)
								mapYpos = xMap.pointY + ((((j-(floor*5)) + (i-(floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
							else
								mapYpos = xMap.pointY + ((((j-(floor*5)) + (i-(floor*5)) + 1) / 2) * TILEH);
							
							mapXpos -= (TILEW / 2)+reCheckPlus;
							mapYpos -= (TILEH / 4)+reCheckPlus;
							mapWpos = (TILEW)+(reCheckPlus*2);
							mapHpos = (TILEH / 2)+(reCheckPlus*2);
							
							xTouchTile.xPos = mapXpos;
							xTouchTile.yPos = mapYpos;
							xTouchTile.wPos = mapWpos;
							xTouchTile.hPos = mapHpos;
							
							
							if(touchCheckS(&xTouchTile))
							{
								xMap.selectY = j;
								xMap.selectX = i;
								isCheck = true;
								break;
							}
						}
						if(isCheck == true)
							break;
					}
					reCheckPlus +=2;
					if(isCheck == true || reCheckPlus > 10)
						break;
				}
				if(isCheck == false)
				{
					xMap.selectX = DONT;
					xMap.selectY = DONT;
				}
							
				setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				if(xMap.selectX != DONT)
				{
					switch(xMap.type)
					{
					case INTERIOR_TYPE_WALLTILE:
					case INTERIOR_TYPE_WALLITEM:
					case INTERIOR_TYPE_SHOWWINDOW:
					case INTERIOR_TYPE_DOOR:
						if((xMap.selectX >= xMap.shopPointX && xMap.selectX <= xMap.shopPointX+xMap.shopPointW-xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever] && xMap.selectY == xMap.shopPointY-1)
						   || (xMap.selectY >= xMap.shopPointY && xMap.selectY <= xMap.shopPointY+xMap.shopPointH-xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever] && xMap.selectX == xMap.shopPointX-1))
						{
							if(xInterior.buildType == INTERIORBUILD_MOVETYPE_OBJ)
							{
								xInterior.buildMapTileXpos = xMap.selectX;
								xInterior.buildMapTileYpos = xMap.selectY;
							}
							
							if(xInterior.buildInType == INTERIORBUILD_TYPE_GAME)
							{

								switch(xMap.type)
								{
								case INTERIOR_TYPE_WALLTILE:
									if(xSelectTileOne.tileNumY+1 == xMap.shopPointY)
									{
										if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] > 0)
											xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = -xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
										else
											xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
									}
									else
									{
										if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos] < 0)
											xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = -xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
										else
											xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xMap.data[xMap.nowFloor][MAP_TYPE_WALL0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
									}
									break;
								}
							}
							
							
							if(xInterior.buildMapTileYpos+1 == xMap.shopPointY)
							{
								switch(xMap.type)
								{
								case INTERIOR_TYPE_WALLTILE:
								case INTERIOR_TYPE_SHOWWINDOW:
								case INTERIOR_TYPE_WALLITEM:
								case INTERIOR_TYPE_DOOR:
									if(xInterior.xBuildSlot.codeTeam[0] > 0)
										xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
									break;
								}
							}
							else
							{
								switch(xMap.type)
								{
								case INTERIOR_TYPE_WALLTILE:
								case INTERIOR_TYPE_SHOWWINDOW:
								case INTERIOR_TYPE_WALLITEM:
								case INTERIOR_TYPE_DOOR:
									if(xInterior.xBuildSlot.codeTeam[0] < 0)
										xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
									break;
								}
								
							}
						}
						break;
					default:
						if(xMap.selectX < xMap.shopPointX || xMap.selectY < xMap.shopPointY || xMap.selectX+(xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1) >= xMap.shopPointX+xMap.shopPointW || xMap.selectY+(xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1) >= xMap.shopPointY+xMap.shopPointH)
						{
							
						}
						else
						{
							
							if(xInterior.buildType == INTERIORBUILD_MOVETYPE_OBJ)
							{
								xInterior.buildMapTileXpos = xMap.selectX;
								xInterior.buildMapTileYpos = xMap.selectY;
							}
														
							switch(xInterior.buildInType)
							{
							case INTERIORBUILD_TYPE_GAME:
								switch(xMap.type)
								{
								case INTERIOR_TYPE_FLOORTILE:
									xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY] = xMap.data[xMap.nowFloor][MAP_TYPE_FLOORTILE0][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos];
									break;
								}
								break;
							}
						}
						break;
					}
				}				
				//
				
				int subX = 0;
				int subY = 0;
				int subW = 0;
				int subH = 0;
				
				switch(xMap.type)
				{
				case INTERIOR_TYPE_WALLTILE:
					break;
				case INTERIOR_TYPE_WALLITEM:
				case INTERIOR_TYPE_SHOWWINDOW:
				case INTERIOR_TYPE_DOOR:
					break;
				default:
					switch(xMap.type)
					{
					case INTERIOR_TYPE_PAYMENT:
						if(xMap.rever == 0)
						{
							subX = -1;
							subW = 1;
						}
						else
						{
							subY = -1;
							subH = 1;
						}
						break;
					case INTERIOR_TYPE_HANGER:
					case INTERIOR_TYPE_ACCESSORY:
					case INTERIOR_TYPE_FITTINGROOM:
						if(xMap.rever == 0)
							subW = 1;
						else
							subH = 1;
						break;
					case INTERIOR_TYPE_OBJ:
						if(xObj.xObjData[xMap.type][xMap.listNum].isChair == TRUE)
						{
							if(xMap.rever == 0)
								subW = 1;
							else
								subH = 1;
						}
						break;
					}
						
				
					isSubTemp[0] = checkBuildPos(xMap.type,xMap.listNum,xMap.rever);
							
					if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
					{
						int tempMap;
						if(xMap.type == INTERIOR_TYPE_FLOORTILE)
							tempMap = MAP_TYPE_FLOORTILE0;
						else
							tempMap = MAP_TYPE_WALL0;
						
						
						int tempType = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]/1000;
						int tempListNum = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]%1000;
						if(tempType < 0)
							tempType = -tempType;
						if(tempListNum < 0)
							tempListNum = -tempListNum;
						
						if(xMap.type == tempType && xMap.listNum == tempListNum)
							isSubTemp[0] = TRUE;
					}
						
						
					for(int w=subX;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]+subW;w++)
					{
						for(int h=subY;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]+subH;h++)
						{
							mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos+h-(floor*5)) - (xInterior.buildMapTileXpos+w-(floor*5))) * (TILEW / 2));
							if (((xInterior.buildMapTileYpos+h) + (xInterior.buildMapTileXpos+w)) % 2 == 1)
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos+h-(floor*5)) + (xInterior.buildMapTileXpos+w-(floor*5))) / 2) * TILEH) + (TILEH / 2);
							else
								mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos+h-(floor*5)) + (xInterior.buildMapTileXpos+w-(floor*5))) / 2) * TILEH);
							
							if(isSubTemp[0] == TRUE)
							{
								drawPacker(imgBuildTileErr0, mapXpos, mapYpos+16, 0, 0, imgW(imgBuildTileErr0), imgH(imgBuildTileErr0), VH);
								xInterior.isBuildOkBtn = FALSE;
							}
							else
								drawPacker(imgBuildTileOk0, mapXpos, mapYpos+16, 0, 0, imgW(imgBuildTileOk0), imgH(imgBuildTileOk0), VH);
								
							/*
							if(xMap.interiorData[xMap.nowFloor][(xInterior.buildMapTileXpos+w-xMap.shopPointX)][(xInterior.buildMapTileYpos+h-xMap.shopPointY)] == TRUE)
							{
								drawImage(&imgBuildTileErr[0], mapXpos, mapYpos+16, 0, 0, imgBuildTileErr[0].w, imgBuildTileErr[0].h, VH);
								xInterior.isBuildOkBtn = FALSE;
							}
							else
								drawImage(&imgBuildTileOk[0], mapXpos, mapYpos+16, 0, 0, imgBuildTileOk[0].w, imgBuildTileOk[0].h, VH);
							 */
						}
					}
					break;
				}
			}
		}
		
		//길찾기 알고리즘///////////////////
		/*
		for(int x=-1;x<xMap.shopPointW+1;x++)
		{
			for(int y=-1;y<xMap.shopPointH+1;y++)
			{
				if(xAstar.mapData[x+1][y+1] == TRUE)
					gSetColor(0, 255, 0);
				else
					gSetColor(0, 0, 255);
				
				mapXpos = xMap.pointX + ((((y+xMap.shopPointY)-(floor*5)) - ((x+xMap.shopPointX)-(floor*5))) * (TILEW / 2));
				
				if (((y+xMap.shopPointY) + (x+xMap.shopPointX)) % 2 == 1)
					mapYpos = xMap.pointY+ (((((y+xMap.shopPointY)-(floor*5)) + ((x+xMap.shopPointX)-(floor*5))) / 2) * TILEH) + (TILEH / 2);
				else
					mapYpos = xMap.pointY+ (((((y+xMap.shopPointY)-(floor*5)) + ((x+xMap.shopPointX)-(floor*5))) / 2) * TILEH);
				
				fillRect(mapXpos-10, mapYpos-10+TILEH/2, 20, 20);
			}
		}

		for(i = 0;i<SHOPNPCMAX;i++)
		{
			
			for(int totalI=xShopNpc[i].bestNowCnt;totalI<xShopNpc[i].bestTotalCnt;totalI++)
			{			
				gSetColor(255, 0, 0);
				mapXpos = xMap.pointX + (((xShopNpc[i].bestY[totalI]-(floor*5)) - (xShopNpc[i].bestX[totalI]-(floor*5))) * (TILEW / 2));
				
				if ((xShopNpc[i].bestY[totalI] + xShopNpc[i].bestX[totalI]) % 2 == 1)
					mapYpos = xMap.pointY+ ((((xShopNpc[i].bestY[totalI]-(floor*5)) + (xShopNpc[i].bestX[totalI]-(floor*5))) / 2) * TILEH) + (TILEH / 2);
				else
					mapYpos = xMap.pointY+ ((((xShopNpc[i].bestY[totalI]-(floor*5)) + (xShopNpc[i].bestX[totalI]-(floor*5))) / 2) * TILEH);
				
				fillRect(mapXpos-2, mapYpos-2+TILEH/2, 4, 4);
			}
		}
		 */

		///////////////////////////////////////////////////		
		xObjSort[0].totalNum = 0;
		xObjSort[1].totalNum = 0;
		xObjSort[2].totalNum = 0;
		xObjSort[3].totalNum = 0;
		
		if(xMap.nowFloor == 0)
			xExtensionShop.isCheckExtension = FALSE;
		
		
		M_Boolean isUseTileX[20];
		M_Boolean isUseTileY[20];
		for(int i=0;i<20;i++)
		{
			isUseTileX[i] = FALSE;
			isUseTileY[i] = FALSE;
		}
	
		//이벤트큐에 등록된 벽지
		if(xMap.nowFloor == floor)
		{
			for(int e=0;e<xEventQueue.totalNum;e++)
			{
				if(xEventQueue.floor[e] == floor)
				{
					switch(xEventQueue.type[e])
					{
					case EVENTQUEUE_TYPE_INTERIOR:
					case EVENTQUEUE_TYPE_INPUTINVEN:
					case EVENTQUEUE_TYPE_OUTPUTINVEN:
					case EVENTQUEUE_TYPE_MOVE:
						setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
						if(xMap.type == INTERIOR_TYPE_WALLTILE)
						{
							xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].isEventQueue[xObjSort[0].totalNum] = TRUE;
							xObjSort[0].isBuildItem[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_WALL0;
							xObjSort[0].code[xObjSort[0].totalNum] = xEventQueue.xInteriorSlot[e].codeTeam[0];
							xObjSort[0].codeSub[xObjSort[0].totalNum] = e;
							xObjSort[0].x[xObjSort[0].totalNum] = (xEventQueue.x[e])-(floor*5);
							xObjSort[0].y[xObjSort[0].totalNum] = (xEventQueue.y[e])-(floor*5);
							xObjSort[0].totalNum++;
							
							if(xEventQueue.y[e]-xMap.shopPointY == -1)
								isUseTileX[xEventQueue.x[e]-xMap.shopPointX] = TRUE;
							else
								isUseTileY[xEventQueue.y[e]-xMap.shopPointY] = TRUE;
						}
						break;
					}
				}
			}
		}
	
		//이벤트큐 등록 벽지는 제외하자
		//오브젝트 정렬초기화(벽지)
		
		for (y = xMap.shopPointY; y < xMap.shopPointY+xMap.shopPointH; y++)
		{
			if(isUseTileY[y-xMap.shopPointY] == TRUE)
				continue;
			x = xMap.shopPointX-1;
			
			xObjSort[1].isDraw[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].isEventItem[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].isEventQueue[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].isBuildItem[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].viewType[xObjSort[1].totalNum] = MAP_TYPE_WALL0;
			xObjSort[1].code[xObjSort[1].totalNum] = xMap.data[floor][MAP_TYPE_WALL0][x][y];
			
			xObjSort[1].x[xObjSort[1].totalNum] = x-(floor*5);
			xObjSort[1].y[xObjSort[1].totalNum] = y-(floor*5);
			xObjSort[1].totalNum++;
		}
		for (x = xMap.shopPointX; x < xMap.shopPointX+xMap.shopPointW; x++)
		{
			if(isUseTileX[x-xMap.shopPointX] == TRUE)
				continue;
			y = xMap.shopPointY-1;
			
			xObjSort[1].isDraw[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].isEventItem[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].isEventQueue[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].isBuildItem[xObjSort[1].totalNum] = FALSE;
			xObjSort[1].viewType[xObjSort[1].totalNum] = MAP_TYPE_WALL0;
			
			
			xObjSort[1].code[xObjSort[1].totalNum] = xMap.data[floor][MAP_TYPE_WALL0][x][y];
			
			xObjSort[1].x[xObjSort[1].totalNum] = x-(floor*5);
			xObjSort[1].y[xObjSort[1].totalNum] = y-(floor*5);
			xObjSort[1].totalNum++;
		}		

		//오브젝트 정렬초기화(벽아이템)
		if(xMap.nowFloor == floor)
		{
			for (y = xMap.shopPointY-1; y < xMap.shopPointY+xMap.shopPointH; y++)
			{
				for (x = xMap.shopPointX-1; x < xMap.shopPointX+xMap.shopPointW; x++)
				{
					if(xMap.data[floor][MAP_TYPE_WALL1][x][y] != 0)
					{
						setMapData(xMap.data[floor][MAP_TYPE_WALL1][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
						
						if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
						{
							xObjSort[2].interiorNum[xObjSort[2].totalNum] = getShowWindow(x, y,floor);							
						}
						
						xObjSort[2].isDraw[xObjSort[2].totalNum] = FALSE;
						xObjSort[2].isEventItem[xObjSort[2].totalNum] = FALSE;
						xObjSort[2].isEventQueue[xObjSort[2].totalNum] = FALSE;
						xObjSort[2].isBuildItem[xObjSort[2].totalNum] = FALSE;
						xObjSort[2].viewType[xObjSort[2].totalNum] = MAP_TYPE_WALL1;
						xObjSort[2].code[xObjSort[2].totalNum] = xMap.data[floor][MAP_TYPE_WALL1][x][y];
						xObjSort[2].x[xObjSort[2].totalNum] = x-(floor*5);
						xObjSort[2].y[xObjSort[2].totalNum] = y-(floor*5);
												
						//쇼윈도일경우 마네킹을 추가로 등록해주자(레이어상 별도 관리(벽과 일반오브젝트로 구분))
						if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
						{							
							xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].isEventQueue[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].isBuildItem[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_OBJ;
							xObjSort[0].code[xObjSort[0].totalNum] = xMap.data[floor][MAP_TYPE_WALL1][x][y];
							if(xMap.rever == 0)
							{
								xObjSort[0].x[xObjSort[0].totalNum] = x+1-(floor*5);
								xObjSort[0].y[xObjSort[0].totalNum] = y-(floor*5);
							}
							else
							{
								xObjSort[0].x[xObjSort[0].totalNum] = x-(floor*5);
								xObjSort[0].y[xObjSort[0].totalNum] = y+1-(floor*5);
							}
							xObjSort[0].totalNum++;
						}
						xObjSort[2].totalNum++;
					}
				}
			}

			//이벤트큐에 등록된 벽아이템,문
			for(int e=0;e<xEventQueue.totalNum;e++)
			{
				if(xEventQueue.floor[e] == floor)
				{
					switch(xEventQueue.type[e])
					{
						case EVENTQUEUE_TYPE_INTERIOR:
						case EVENTQUEUE_TYPE_INPUTINVEN:
						case EVENTQUEUE_TYPE_OUTPUTINVEN:
						case EVENTQUEUE_TYPE_MOVE:
							setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
							if(xMap.type == INTERIOR_TYPE_WALLITEM || xMap.type == INTERIOR_TYPE_DOOR  || xMap.type == INTERIOR_TYPE_SHOWWINDOW)
							{
								xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
								xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
								xObjSort[0].isEventQueue[xObjSort[0].totalNum] = TRUE;
								xObjSort[0].isBuildItem[xObjSort[0].totalNum] = FALSE;
								xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_WALL1;
								xObjSort[0].code[xObjSort[0].totalNum] = xEventQueue.xInteriorSlot[e].codeTeam[0];
								xObjSort[0].codeSub[xObjSort[0].totalNum] = e;
								xObjSort[0].x[xObjSort[0].totalNum] = (xEventQueue.x[e]-(floor*5));
								xObjSort[0].y[xObjSort[0].totalNum] = (xEventQueue.y[e]-(floor*5));
								xObjSort[0].totalNum++;
							}
							break;
					}
				}
			}
			
		}
					
		if(floor != xMap.totalFloor-1)
		{
			xObjSort[2].isDraw[xObjSort[2].totalNum] = FALSE;
			xObjSort[2].isEventItem[xObjSort[2].totalNum] = TRUE;
			xObjSort[2].isEventQueue[xObjSort[2].totalNum] = FALSE;
			xObjSort[2].isBuildItem[xObjSort[2].totalNum] = FALSE;
			xObjSort[2].viewType[xObjSort[2].totalNum] = MAP_TYPE_WALL1;
			xObjSort[2].code[xObjSort[2].totalNum] = EVENTITEM_TYPE_FLOORUP;
			xObjSort[2].x[xObjSort[2].totalNum] = xWorldMap.floorUpX-(floor*5);
			xObjSort[2].y[xObjSort[2].totalNum] = xWorldMap.floorUpY-1-(floor*5);
			xObjSort[2].totalNum++;
						
		}
		
		if(floor != 0)
		{
			xObjSort[2].isDraw[xObjSort[2].totalNum] = FALSE;
			xObjSort[2].isEventItem[xObjSort[2].totalNum] = TRUE;
			xObjSort[2].isEventQueue[xObjSort[2].totalNum] = FALSE;
			xObjSort[2].isBuildItem[xObjSort[2].totalNum] = FALSE;
			xObjSort[2].viewType[xObjSort[2].totalNum] = MAP_TYPE_WALL1;
			xObjSort[2].code[xObjSort[2].totalNum] = EVENTITEM_TYPE_FLOORDOWN;
			xObjSort[2].x[xObjSort[2].totalNum] = xWorldMap.floorDownX-(floor*5);
			xObjSort[2].y[xObjSort[2].totalNum] = xWorldMap.floorDownY-1-(floor*5);
			xObjSort[2].totalNum++;
		}

			
		
		int b_a = 0;
		if(xWorldMap.state == WORLDMAP_STATE_PLAY)
		{
			if(floor == 0)
			{
				
				//패션쇼우승자
				x = 6;
				y = 12;
				
				if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
					b_a = 3;
				else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
					b_a = 3;
				else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
				{
					if(xMap.nowFloor != floor)
						continue;
					
					b_a = 0;
				}
				else
					b_a = 1;
				
				xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_BEST;
				xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
				xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
				xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
				xObjSort[b_a].totalNum++;
				
				
				//노래 춤
				x = 9;
				y = 19;
				
				if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
					b_a = 3;
				else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
					b_a = 3;
				else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
				{
					if(xMap.nowFloor != floor)
						continue;
					
					b_a = 0;
				}
				else
					b_a = 1;
				
				xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_SONG;
				xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
				xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
				xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
				xObjSort[b_a].totalNum++;
				
                //이동 그리는것
				for(i = 0;i<WORLDMAPNPCMAX;i++)
				{
					if(xWorldMapNpc[i].state != WORLDMAPNPC_STATE_DONT)
					{
						if(xWorldMapNpc[i].x >= xMap.shopPointX+xMap.shopPointW && xWorldMapNpc[i].y >= xMap.shopPointY)
							b_a = 3;
						else if(xWorldMapNpc[i].x >= xMap.shopPointX &&xWorldMapNpc[i].x < xMap.shopPointX+xMap.shopPointW && xWorldMapNpc[i].y >= xMap.shopPointY+xMap.shopPointH)
							b_a = 3;
						else if(xWorldMapNpc[i].x >= xMap.shopPointX && xWorldMapNpc[i].y >= xMap.shopPointY)
							b_a = 0;
						else
							b_a = 1;
						
						xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_NPC;
						xObjSort[b_a].code[xObjSort[b_a].totalNum] = i;
						xObjSort[b_a].x[xObjSort[b_a].totalNum] = xWorldMapNpc[i].x;
						xObjSort[b_a].y[xObjSort[b_a].totalNum] = xWorldMapNpc[i].y;
						xObjSort[b_a].drawX[xObjSort[b_a].totalNum] = xWorldMapNpc[i].drawX;
						xObjSort[b_a].drawY[xObjSort[b_a].totalNum] = xWorldMapNpc[i].drawY;
						xObjSort[b_a].totalNum++;
					}
				}
				//여기까지
				for(i = 0;i<WORLDMAPCARMAX;i++)
				{
					if(xWorldMapCar[i].state != WORLDMAPCAR_STATE_DONT)
					{
						
						if(xWorldMapCar[i].x >= xMap.shopPointX+xMap.shopPointW && xWorldMapCar[i].y >= xMap.shopPointY)
							b_a = 3;
						else if(xWorldMapCar[i].x >= xMap.shopPointX && xWorldMapCar[i].x < xMap.shopPointX+xMap.shopPointW && xWorldMapCar[i].y >= xMap.shopPointY+xMap.shopPointH)
							b_a = 3;
						else if(xWorldMapCar[i].x >= xMap.shopPointX && xWorldMapCar[i].y >= xMap.shopPointY)
							b_a = 0;
						else
							b_a = 1;
						
						xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_CAR;
						xObjSort[b_a].code[xObjSort[b_a].totalNum] = i;
						xObjSort[b_a].x[xObjSort[b_a].totalNum] = xWorldMapCar[i].x;
						xObjSort[b_a].y[xObjSort[b_a].totalNum] = xWorldMapCar[i].y;
						xObjSort[b_a].totalNum++;
					}
				}
			}
			
			if(xMap.nowFloor == floor)
			{
				for(i = 0;i<SHOPNPCMAX;i++)
				{
					if(xShopNpc[i].state != SHOPNPC_STATE_DONT && xShopNpc[i].floor == floor)
					{
						xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_SHOPNPC;
						xObjSort[0].code[xObjSort[0].totalNum] = i;
						xObjSort[0].x[xObjSort[0].totalNum] = xShopNpc[i].x-(floor*5);
						xObjSort[0].y[xObjSort[0].totalNum] = xShopNpc[i].y-(floor*5);
						xObjSort[0].drawX[xObjSort[0].totalNum] = xShopNpc[i].drawX;
						xObjSort[0].drawY[xObjSort[0].totalNum] = xShopNpc[i].drawY;
						xObjSort[0].totalNum++;
					}
				}
				
				//모델NPC
				for(int i=0;i<MODELNPCMAX;i++)
				{
					if(xModelNpc[i].state != MODELNPC_STATE_DONT  && xModelNpc[i].floor == floor)
					{
						xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_MODELNPC;
						xObjSort[0].code[xObjSort[0].totalNum] = i;
						xObjSort[0].x[xObjSort[0].totalNum] = xModelNpc[i].x-(floor*5);
						xObjSort[0].y[xObjSort[0].totalNum] = xModelNpc[i].y-(floor*5);
						xObjSort[0].drawX[xObjSort[0].totalNum] = xModelNpc[i].drawX;
						xObjSort[0].drawY[xObjSort[0].totalNum] = xModelNpc[i].drawY;
						xObjSort[0].totalNum++;
					}
				}
				
				if(xQuestTuto.nowNum < TUTO_0_SHOPASSISTANT1F_NPCINFO)
				{
					
				}
				else
				{
					//샵점원정렬
					for(i = 0;i<SHOPASSISTANTMAX;i++)
					{
						if(xShopAssistant[floor][i].state != SHOPASSISTANT_STATE_DONT  && xPayMentInfo[floor].codeNum != 0)
						{
							xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
							xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_SHOPASSISTANT;
							xObjSort[0].code[xObjSort[0].totalNum] = i;
							xObjSort[0].x[xObjSort[0].totalNum] = xShopAssistant[floor][i].x-(floor*5);
							xObjSort[0].y[xObjSort[0].totalNum] = xShopAssistant[floor][i].y-(floor*5);
							xObjSort[0].drawX[xObjSort[0].totalNum] = xShopAssistant[floor][i].drawX;
							xObjSort[0].drawY[xObjSort[0].totalNum] = xShopAssistant[floor][i].drawY;
							xObjSort[0].totalNum++;
						}
					}
				}

				
				if(xQuestTuto.nowNum < TUTO_0_PAYMENT1F_NPCINFO)
				{
				
				}
				else
				{
					//점원정렬
					if(xPaymentAssistant[floor].state != PAYMENTASSISTANT_STATE_DONT && xPayMentInfo[floor].codeNum != 0)
					{
						
						xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_PAYMENTASSISTANT;
						xObjSort[0].code[xObjSort[0].totalNum] = 0;
						xObjSort[0].x[xObjSort[0].totalNum] = xPaymentAssistant[floor].x-(floor*5);
						xObjSort[0].y[xObjSort[0].totalNum] = xPaymentAssistant[floor].y-(floor*5);
						xObjSort[0].drawX[xObjSort[0].totalNum] = xPaymentAssistant[floor].drawX;
						xObjSort[0].drawY[xObjSort[0].totalNum] = xPaymentAssistant[floor].drawY;
						xObjSort[0].totalNum++;
					}
				}
			}
		}
		
		if(xWorldMap.isFriendMap == TRUE)
		{
			if((xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100 <= 0)
			{
				
			}
			else if(xFriendData[xFriendMap.selectDataSlotNum].socialCount <= 0)
			{
				
			}
			else
			{
				//쓰레기 그리기
				for(int wasteI=0;wasteI<WASTEMAX;wasteI++)
				{
					if(xWaste.state[floor][wasteI] != WASTE_STATE_DONT)
					{
						int x = xWaste.mapX[floor][wasteI]+xMap.shopPointX;
						int y = xWaste.mapY[floor][wasteI]+xMap.shopPointY;
						
						if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
							b_a = 3;
						else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
							b_a = 3;
						else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
						{
							if(xMap.nowFloor != floor)
								continue;
							b_a = 0;
						}
						else
							b_a = 1;
						
						xObjSort[b_a].interiorNum[xObjSort[b_a].totalNum] = wasteI;
						xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
						xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_WASTE;
						xObjSort[b_a].code[xObjSort[b_a].totalNum] = wasteI;
						xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
						xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
						xObjSort[b_a].totalNum++;
						
					}
				}
			}
		}
		

		
		
		
		//일반 오브젝트등록
		for (y = xMap.shopPointY-1; y < xMap.shopPointY+xMap.shopPointH; y++)
		{
			for (x = xMap.shopPointX-1; x < xMap.shopPointX+xMap.shopPointW; x++)
			{
				if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
					b_a = 3;
				else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
					b_a = 3;
				else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
				{
					if(xMap.nowFloor != floor)
						continue;
					b_a = 0;
				}
				else
					b_a = 1;								
				
				if(xMap.data[floor][MAP_TYPE_OBJ][x][y] != 0)
				{
					setMapData(xMap.data[floor][MAP_TYPE_OBJ][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
					switch(xMap.type)
					{
					case INTERIOR_TYPE_HANGER:		//옷걸이
					case INTERIOR_TYPE_ACCESSORY: 	//진열대
						xObjSort[b_a].interiorNum[xObjSort[b_a].totalNum] = getSellTable(x,y,floor);
						break;
					case INTERIOR_TYPE_FITTINGROOM: //피팅룸
						xObjSort[b_a].interiorNum[xObjSort[b_a].totalNum] = getFittingRoom(x,y,floor);
						break;
					}
					
					xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
					xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
					xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
					xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
					xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_OBJ;
					xObjSort[b_a].code[xObjSort[b_a].totalNum] = xMap.data[floor][MAP_TYPE_OBJ][x][y];
					xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
					xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
					xObjSort[b_a].totalNum++;
				}
			}
		}
		
/*
		//LJW 월드맵 건물 및 오브젝트 막기
		if(floor == 0)
		{
			int x = 41;
			int y = 46;
			//LJW 월드맵 자동차 막기(주차장)
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
						
				xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
				xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_CARPARK;
				xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
				xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
				xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
				xObjSort[b_a].totalNum++;
			
			
			
			//LJW 월드맵 샵조형 막기
			//샵조형
			x = 45;
			y = 24;
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
			
			
			b_a = 3;
						
			
			xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_MAPOBJ2;
			xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
			xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
			xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
			xObjSort[b_a].totalNum++;
			
			//LJW 월드맵 우체통 막기
			//우체통
			x = 25;
			y = 47;
			
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
			
			xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_MAIL;
			xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
			xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
			xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
			xObjSort[b_a].totalNum++;
			
			
			//오른쪽다리
			x = 38;
			y = 59;
			
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
			
			xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_MAPOBJ1;
			xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
			xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
			xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
			xObjSort[b_a].totalNum++;
			
			
			
			//왼쪽나무
			x = 61;
			y = 45;
			
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
			
			xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_MAPOBJ0;
			xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
			xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
			xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
			xObjSort[b_a].totalNum++;
			
			
			//왼쪽나무
			x = 5;
			y = 21;
			
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
			
			xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_TVOBJ;
			xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
			xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
			xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
			xObjSort[b_a].totalNum++;
			
			//LJW 월드맵 패션쇼 막기
			//런웨이샵건물
			x = 3;
			y = 4;
			
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
			
			xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_RUNWAYOBJ;
			xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
			xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
			xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
			xObjSort[b_a].totalNum++;
			
			//LJW 월드맵 아이템샵 막기
			//아이템샵건물
			x = 15;
			y = 7;
			
			if(x >= xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY)
				b_a = 3;
			else if(x >= xMap.shopPointX && x < xMap.shopPointX+xMap.shopPointW && y >= xMap.shopPointY+xMap.shopPointH)
				b_a = 3;
			else if(x >= xMap.shopPointX && y >= xMap.shopPointY)
			{
				if(xMap.nowFloor != floor)
					continue;
				
				b_a = 0;
			}
			else
				b_a = 1;
			
			xObjSort[b_a].isDraw[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isEventQueue[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].isBuildItem[xObjSort[b_a].totalNum] = FALSE;
			xObjSort[b_a].viewType[xObjSort[b_a].totalNum] = MAP_TYPE_ITEMSHOPOBJ;
			xObjSort[b_a].code[xObjSort[b_a].totalNum] = DONT;
			xObjSort[b_a].x[xObjSort[b_a].totalNum] = x-(floor*5);
			xObjSort[b_a].y[xObjSort[b_a].totalNum] = y-(floor*5);
			xObjSort[b_a].totalNum++;
			
		}
*/
		
		//이벤트큐에 등록된 일반 오브젝트
		if(xMap.nowFloor == floor)
		{
			for(int e=0;e<xEventQueue.totalNum;e++)
			{
				if(xEventQueue.floor[e] == floor)
				{
					switch(xEventQueue.type[e])
					{
						case EVENTQUEUE_TYPE_INTERIOR:
						case EVENTQUEUE_TYPE_INPUTINVEN:
						case EVENTQUEUE_TYPE_OUTPUTINVEN:
						case EVENTQUEUE_TYPE_MOVE:
							setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
							if(xMap.type != INTERIOR_TYPE_WALLTILE && xMap.type != INTERIOR_TYPE_WALLITEM && xMap.type != INTERIOR_TYPE_SHOWWINDOW && xMap.type != INTERIOR_TYPE_DOOR && xMap.type != INTERIOR_TYPE_FLOORTILE && xMap.type != INTERIOR_TYPE_OBJFLOOR)
							{
								xObjSort[0].interiorNum[xObjSort[0].totalNum] = DONT;
								xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
								xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
								xObjSort[0].isEventQueue[xObjSort[0].totalNum] = TRUE;
								xObjSort[0].isBuildItem[xObjSort[0].totalNum] = FALSE;
								xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_OBJ;
								xObjSort[0].code[xObjSort[0].totalNum] = xEventQueue.xInteriorSlot[e].codeTeam[0];
								xObjSort[0].codeSub[xObjSort[0].totalNum] = e;
								xObjSort[0].x[xObjSort[0].totalNum] = (xEventQueue.x[e])-(floor*5);
								xObjSort[0].y[xObjSort[0].totalNum] = (xEventQueue.y[e])-(floor*5);
								xObjSort[0].totalNum++;
							}
							break;
					}
				}
			}
			
			
			//설치모드 아이템
			if(xWorldMap.state == WORLDMAP_STATE_INTERIOR)
			{
				if(xMap.nowFloor == floor)
				{
					if(xInterior.xBuildSlot.codeTeam[0] != 0)
					{						
						switch(((xInterior.xBuildSlot.codeTeam[0]/1000) < 0 ? -(xInterior.xBuildSlot.codeTeam[0]/1000):(xInterior.xBuildSlot.codeTeam[0]/1000)))
						{
						case INTERIOR_TYPE_WALLTILE://벽타일
							xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_WALL0;
							break;
						case INTERIOR_TYPE_WALLITEM://벽장식
						case INTERIOR_TYPE_SHOWWINDOW://벽장식
						case INTERIOR_TYPE_DOOR:	//문
							xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_WALL1;
							break;
						default:
							xObjSort[0].viewType[xObjSort[0].totalNum] = MAP_TYPE_OBJ;
							break;
						}
						
						
						xObjSort[0].isDraw[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].isEventItem[xObjSort[0].totalNum] = FALSE;
						xObjSort[0].isEventQueue[xObjSort[0].totalNum] = TRUE;
						xObjSort[0].isBuildItem[xObjSort[0].totalNum] = TRUE;
						
						xObjSort[0].code[xObjSort[0].totalNum] = xInterior.xBuildSlot.codeTeam[0];
						xObjSort[0].x[xObjSort[0].totalNum] = xInterior.buildMapTileXpos-(floor*5);
						xObjSort[0].y[xObjSort[0].totalNum] = xInterior.buildMapTileYpos-(floor*5);
						xObjSort[0].totalNum++;
					}
				}
			}
		}
		
		//오브젝트 정렬
		for(int k=0;k<4;k++)
		{
			//if(k == 2)
			//	continue;
			for(i=0;i<xObjSort[k].totalNum;i++)
			{
				for(int j=i+1;j<xObjSort[k].totalNum;j++)
				{
					if(xObjSort[k].y[i] > xObjSort[k].y[j] || (xObjSort[k].y[i] == xObjSort[k].y[j] && xObjSort[k].x[i] > xObjSort[k].x[j]))
					{
						xObjSort[k].viewType[OBJSORTMAX-1] = xObjSort[k].viewType[i];
						xObjSort[k].code[OBJSORTMAX-1] = xObjSort[k].code[i];
						xObjSort[k].codeSub[OBJSORTMAX-1] = xObjSort[k].codeSub[i];
						xObjSort[k].x[OBJSORTMAX-1] = xObjSort[k].x[i];
						xObjSort[k].y[OBJSORTMAX-1] = xObjSort[k].y[i];
						xObjSort[k].drawX[OBJSORTMAX-1] = xObjSort[k].drawX[i];
						xObjSort[k].drawY[OBJSORTMAX-1] = xObjSort[k].drawY[i];
						xObjSort[k].isEventItem[OBJSORTMAX-1] = xObjSort[k].isEventItem[i];
						xObjSort[k].isEventQueue[OBJSORTMAX-1] = xObjSort[k].isEventQueue[i];
						xObjSort[k].isBuildItem[OBJSORTMAX-1] = xObjSort[k].isBuildItem[i];
						xObjSort[k].interiorNum[OBJSORTMAX-1] = xObjSort[k].interiorNum[i];
						
						xObjSort[k].viewType[i] = xObjSort[k].viewType[j];
						xObjSort[k].code[i] = xObjSort[k].code[j];
						xObjSort[k].codeSub[i] = xObjSort[k].codeSub[j];
						xObjSort[k].x[i] = xObjSort[k].x[j];
						xObjSort[k].y[i] = xObjSort[k].y[j];
						xObjSort[k].drawX[i] = xObjSort[k].drawX[j];
						xObjSort[k].drawY[i] = xObjSort[k].drawY[j];
						xObjSort[k].isEventItem[i] = xObjSort[k].isEventItem[j];
						xObjSort[k].isEventQueue[i] = xObjSort[k].isEventQueue[j];
						xObjSort[k].isBuildItem[i] = xObjSort[k].isBuildItem[j];
						xObjSort[k].interiorNum[i] = xObjSort[k].interiorNum[j];
						
						xObjSort[k].viewType[j] = xObjSort[k].viewType[OBJSORTMAX-1];
						xObjSort[k].code[j] = xObjSort[k].code[OBJSORTMAX-1];
						xObjSort[k].codeSub[j] = xObjSort[k].codeSub[OBJSORTMAX-1];
						xObjSort[k].x[j] = xObjSort[k].x[OBJSORTMAX-1];
						xObjSort[k].y[j] = xObjSort[k].y[OBJSORTMAX-1];
						xObjSort[k].drawX[j] = xObjSort[k].drawX[OBJSORTMAX-1];
						xObjSort[k].drawY[j] = xObjSort[k].drawY[OBJSORTMAX-1];
						xObjSort[k].isEventItem[j] = xObjSort[k].isEventItem[OBJSORTMAX-1];
						xObjSort[k].isEventQueue[j] = xObjSort[k].isEventQueue[OBJSORTMAX-1];
						xObjSort[k].isBuildItem[j] = xObjSort[k].isBuildItem[OBJSORTMAX-1];
						xObjSort[k].interiorNum[j] = xObjSort[k].interiorNum[OBJSORTMAX-1];
					}
					else if(xObjSort[k].x[i] == xObjSort[k].x[j] && xObjSort[k].y[i] == xObjSort[k].y[j])
					{
						//사람이 오브젝트보다 위 의자때문.
						if((xObjSort[k].viewType[i] >= MAP_TYPE_STATICNPC && xObjSort[k].viewType[i] <= MAP_TYPE_NPC) && xObjSort[k].viewType[j] == MAP_TYPE_OBJ)
						{
							xObjSort[k].viewType[OBJSORTMAX-1] = xObjSort[k].viewType[i];
							xObjSort[k].code[OBJSORTMAX-1] = xObjSort[k].code[i];
							xObjSort[k].codeSub[OBJSORTMAX-1] = xObjSort[k].codeSub[i];
							xObjSort[k].x[OBJSORTMAX-1] = xObjSort[k].x[i];
							xObjSort[k].y[OBJSORTMAX-1] = xObjSort[k].y[i];
							xObjSort[k].drawX[OBJSORTMAX-1] = xObjSort[k].drawX[i];
							xObjSort[k].drawY[OBJSORTMAX-1] = xObjSort[k].drawY[i];
							xObjSort[k].isEventItem[OBJSORTMAX-1] = xObjSort[k].isEventItem[i];
							xObjSort[k].isEventQueue[OBJSORTMAX-1] = xObjSort[k].isEventQueue[i];
							xObjSort[k].isBuildItem[OBJSORTMAX-1] = xObjSort[k].isBuildItem[i];
							xObjSort[k].interiorNum[OBJSORTMAX-1] = xObjSort[k].interiorNum[i];
							
							xObjSort[k].viewType[i] = xObjSort[k].viewType[j];
							xObjSort[k].code[i] = xObjSort[k].code[j];
							xObjSort[k].codeSub[i] = xObjSort[k].codeSub[j];
							xObjSort[k].x[i] = xObjSort[k].x[j];
							xObjSort[k].y[i] = xObjSort[k].y[j];
							xObjSort[k].drawX[i] = xObjSort[k].drawX[j];
							xObjSort[k].drawY[i] = xObjSort[k].drawY[j];

							xObjSort[k].isEventItem[i] = xObjSort[k].isEventItem[j];
							xObjSort[k].isEventQueue[i] = xObjSort[k].isEventQueue[j];
							xObjSort[k].isBuildItem[i] = xObjSort[k].isBuildItem[j];
							xObjSort[k].interiorNum[i] = xObjSort[k].interiorNum[j];
							
							xObjSort[k].viewType[j] = xObjSort[k].viewType[OBJSORTMAX-1];
							xObjSort[k].code[j] = xObjSort[k].code[OBJSORTMAX-1];
							xObjSort[k].codeSub[j] = xObjSort[k].codeSub[OBJSORTMAX-1];
							xObjSort[k].x[j] = xObjSort[k].x[OBJSORTMAX-1];
							xObjSort[k].y[j] = xObjSort[k].y[OBJSORTMAX-1];
							xObjSort[k].drawX[j] = xObjSort[k].drawX[OBJSORTMAX-1];
							xObjSort[k].drawY[j] = xObjSort[k].drawY[OBJSORTMAX-1];

							xObjSort[k].isEventItem[j] = xObjSort[k].isEventItem[OBJSORTMAX-1];
							xObjSort[k].isEventQueue[j] = xObjSort[k].isEventQueue[OBJSORTMAX-1];
							xObjSort[k].isBuildItem[j] = xObjSort[k].isBuildItem[OBJSORTMAX-1];
							xObjSort[k].interiorNum[j] = xObjSort[k].interiorNum[OBJSORTMAX-1];
						}
						//둘다 사람일경우
						else if((xObjSort[k].viewType[i] >= MAP_TYPE_STATICNPC && xObjSort[k].viewType[i] <= MAP_TYPE_NPC) && (xObjSort[k].viewType[j] >= MAP_TYPE_STATICNPC && xObjSort[k].viewType[j] <= MAP_TYPE_NPC))
						{
							if(xObjSort[k].drawY[i] > xObjSort[k].drawY[j] || (xObjSort[k].drawY[i] == xObjSort[k].drawY[j] && xObjSort[k].drawX[i] > xObjSort[k].drawX[j]))
							{
								xObjSort[k].viewType[OBJSORTMAX-1] = xObjSort[k].viewType[i];
								xObjSort[k].code[OBJSORTMAX-1] = xObjSort[k].code[i];
								xObjSort[k].codeSub[OBJSORTMAX-1] = xObjSort[k].codeSub[i];
								xObjSort[k].x[OBJSORTMAX-1] = xObjSort[k].x[i];
								xObjSort[k].y[OBJSORTMAX-1] = xObjSort[k].y[i];
								xObjSort[k].drawX[OBJSORTMAX-1] = xObjSort[k].drawX[i];
								xObjSort[k].drawY[OBJSORTMAX-1] = xObjSort[k].drawY[i];
								xObjSort[k].isEventItem[OBJSORTMAX-1] = xObjSort[k].isEventItem[i];
								xObjSort[k].isEventQueue[OBJSORTMAX-1] = xObjSort[k].isEventQueue[i];
								xObjSort[k].isBuildItem[OBJSORTMAX-1] = xObjSort[k].isBuildItem[i];
								xObjSort[k].interiorNum[OBJSORTMAX-1] = xObjSort[k].interiorNum[i];
								
								xObjSort[k].viewType[i] = xObjSort[k].viewType[j];
								xObjSort[k].code[i] = xObjSort[k].code[j];
								xObjSort[k].codeSub[i] = xObjSort[k].codeSub[j];
								xObjSort[k].x[i] = xObjSort[k].x[j];
								xObjSort[k].y[i] = xObjSort[k].y[j];
								xObjSort[k].drawX[i] = xObjSort[k].drawX[j];
								xObjSort[k].drawY[i] = xObjSort[k].drawY[j];
								xObjSort[k].isEventItem[i] = xObjSort[k].isEventItem[j];
								xObjSort[k].isEventQueue[i] = xObjSort[k].isEventQueue[j];
								xObjSort[k].isBuildItem[i] = xObjSort[k].isBuildItem[j];
								xObjSort[k].interiorNum[i] = xObjSort[k].interiorNum[j];
								
								xObjSort[k].viewType[j] = xObjSort[k].viewType[OBJSORTMAX-1];
								xObjSort[k].code[j] = xObjSort[k].code[OBJSORTMAX-1];
								xObjSort[k].codeSub[j] = xObjSort[k].codeSub[OBJSORTMAX-1];
								xObjSort[k].x[j] = xObjSort[k].x[OBJSORTMAX-1];
								xObjSort[k].y[j] = xObjSort[k].y[OBJSORTMAX-1];
								xObjSort[k].drawX[j] = xObjSort[k].drawX[OBJSORTMAX-1];
								xObjSort[k].drawY[j] = xObjSort[k].drawY[OBJSORTMAX-1];
								xObjSort[k].isEventItem[j] = xObjSort[k].isEventItem[OBJSORTMAX-1];
								xObjSort[k].isEventQueue[j] = xObjSort[k].isEventQueue[OBJSORTMAX-1];
								xObjSort[k].isBuildItem[j] = xObjSort[k].isBuildItem[OBJSORTMAX-1];
								xObjSort[k].interiorNum[j] = xObjSort[k].interiorNum[OBJSORTMAX-1];
							}
						}
					}
				}
			}
		}
		xEventBox[floor].totalNum = 0;

		//오브젝트 그리기
		for(i=0;i<xObjSort[1].totalNum;i++)
			drawObjSort(i,floor,1);
		for(i=0;i<xObjSort[2].totalNum;i++)
			drawObjSort(i,floor,2);

		for(i=0;i<xObjSort[0].totalNum;i++)
			drawObjSort(i,floor,0);
		
		drawMyCharacter();
	
		//확장 이벤트 그리기
		if(xWorldMap.isExtensionEvent_Tile == TRUE)
		{
			if(gameCnt%2 == 0)
				makeColorPaper(1);
			drawExtensionTile(xWorldMap.extensionEventAnyCnt_Tile);
			
			if(++xWorldMap.extensionEventAnyCnt_Tile > 30)
				xWorldMap.isExtensionEvent_Tile = FALSE;
		}		
		
		if(floor < xMap.nowFloor || xWorldMap.isExternal == TRUE)
		{
			drawExternalWall(xMap.pointX,xMap.pointY+1266-(floor*(TILEH*5))-((5-xMap.extension)*TILEH),floor);
		}
				
		//외벽변경
		if(floor == xMap.totalFloor-1)
		{
			if(xWorldMap.isExternalWall== TRUE)
				drawExternalWallChange();
		}
						
		for(i=0;i<xObjSort[3].totalNum;i++)
			drawObjSort(i,floor,3);
		
		//이벤트 게이지 그리기
		for(int e=0;e<xEventQueue.totalNum;e++)
		{
			if(xEventQueue.floor[e] == floor)
			{
				switch(xEventQueue.type[e])
				{
				case EVENTQUEUE_TYPE_INTERIOR:
				case EVENTQUEUE_TYPE_INPUTINVEN:
				case EVENTQUEUE_TYPE_OUTPUTINVEN:
				case EVENTQUEUE_TYPE_MOVE:
					setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
					//크릴위치 및 크기 설정
					mapXpos = xMap.pointX + (((xEventQueue.y[e]-(floor*5)) - (xEventQueue.x[e]-(floor*5))) * (TILEW / 2));
					
					if ((xEventQueue.y[e] + xEventQueue.x[e]) % 2 == 1)
						mapYpos = xMap.pointY+ ((((xEventQueue.y[e]-(floor*5)) + (xEventQueue.x[e]-(floor*5))) / 2) * TILEH) + (TILEH / 2);
					else
						mapYpos = xMap.pointY+ ((((xEventQueue.y[e]-(floor*5)) + (xEventQueue.x[e]-(floor*5))) / 2) * TILEH);
																	
					subTemp[WPOS] = (xEventQueue.anyCnt[e]+1)*imgW(imgInteriorGage)/xEventQueue.anyCntMax[e];
						
						
					drawPacker(imgInteriorGage, mapXpos-imgW(imgInteriorGage)/2, mapYpos, 0, imgH(imgInteriorGage)/3, imgW(imgInteriorGage), imgH(imgInteriorGage)/3, VL);
					drawPacker(imgInteriorGage, mapXpos-imgW(imgInteriorGage)/2, mapYpos, 0, 0, subTemp[WPOS], imgH(imgInteriorGage)/3, VL);
					drawPacker(imgInteriorGage, mapXpos-imgW(imgInteriorGage)/2, mapYpos, 0, imgH(imgInteriorGage)/3*2, imgW(imgInteriorGage), imgH(imgInteriorGage)/3, VL);
					break;
				}
			}
		}
		
		
		
		
		/*
		if(xWorldMap.state == WORLDMAP_STATE_INTERIOR)
		{
			mapXpos = xMap.pointX + ((((xInterior.tempY)-(floor*5)) - ((xInterior.tempX)-(floor*5))) * (TILEW / 2));
			
			if (((xInterior.tempY) + (xInterior.tempX)) % 2 == 1)
				mapYpos = xMap.pointY+ (((((xInterior.tempY)-(floor*5)) + ((xInterior.tempX)-(floor*5))) / 2) * TILEH) + (TILEH / 2);
			else
				mapYpos = xMap.pointY+ (((((xInterior.tempY)-(floor*5)) + ((xInterior.tempX)-(floor*5))) / 2) * TILEH);
			
			gSetColor(255, 255, 255);
			fillRect(mapXpos-20, mapYpos+40, 40, 40);
			gSetColor(0, 0, 0);
			gDrawString(mapXpos, mapYpos+20,"확인",VH);
		}
		 */
		
	}
	
	if(xWorldMap.isExternal == TRUE)
		xMap.nowFloor = 0;
    
}

void drawObjSort(int num,int floor,int b_a)
{
	int mapXpos,mapYpos;
	int h,sortNum;
	int hMax;
	int wMax;
	
	setMapData(xObjSort[b_a].code[num]);			//xMap.rever,xMap.type,xMap.listNum 구하기			
	
	if(xObjSort[b_a].isDraw[num] == FALSE)
	{	
		if(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR)
			hMax = 4;
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_SHOPNPC)
			hMax = 1;
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_NPC)
			hMax = 1;
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_SHOPASSISTANT)
			hMax = 1;
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_PAYMENTASSISTANT)
			hMax = 1;
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_STATICNPC)
			hMax = 1;
		else
		{
			if(xObjSort[b_a].viewType[num] == MAP_TYPE_WALL1)
			{
				hMax = xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
				wMax = xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];
			}
			else
				hMax = xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];
		}
		
		for(h=0;h<hMax;h++)
		{
			for(sortNum = 0; sortNum < xObjSort[b_a].totalNum; sortNum++)
			{
				if(xObjSort[b_a].isDraw[sortNum] == TRUE)
					continue;
				//벽장식의 경우추가
				if(xObjSort[b_a].viewType[num] == MAP_TYPE_WALL1)
				{
					//상대가 벽이고 겹치는경우를 말하는거징
					if(xObjSort[b_a].x[num]+(floor*5) == xMap.shopPointX-1)//y증가형태
					{
						if((xObjSort[b_a].viewType[sortNum] == MAP_TYPE_WALL0 || xObjSort[b_a].viewType[sortNum] == MAP_TYPE_NPC) && ((xObjSort[b_a].y[num]+h == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num] == xObjSort[b_a].x[sortNum])))
						{
							drawObjSort(sortNum, floor,b_a);
						}
					}
					else if(h==0)
					{
						for(int w=0;w<wMax;w++)
						{
							if((xObjSort[b_a].viewType[sortNum] == MAP_TYPE_WALL0 || xObjSort[b_a].viewType[sortNum] == MAP_TYPE_NPC) && ((xObjSort[b_a].x[num]+w == xObjSort[b_a].x[sortNum] && xObjSort[b_a].y[num] == xObjSort[b_a].y[sortNum])))
							{
								drawObjSort(sortNum, floor,b_a);
							}
						}
					}
				}
				else if(xObjSort[b_a].viewType[sortNum] != MAP_TYPE_WALL1)
				{
					if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-1 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-2 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-3 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-4 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-5 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-6 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-7 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-8 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-9 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-10 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-11 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-12 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-13 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-14 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
					else if(xObjSort[b_a].y[num]+(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR ? h-2 : h) == xObjSort[b_a].y[sortNum] && xObjSort[b_a].x[num]-15 == xObjSort[b_a].x[sortNum])
						drawObjSort(sortNum, floor,b_a);
				}
			}
		}
		
		//그릴위치 및 크기 설정
		xObjSort[b_a].isDraw[num] = TRUE;				
		mapXpos = xMap.pointX + ((xObjSort[b_a].y[num] - xObjSort[b_a].x[num]) * (TILEW / 2));
		
		if ((xObjSort[b_a].y[num] + xObjSort[b_a].x[num]) % 2 == 1)
			mapYpos = xMap.pointY+ (((xObjSort[b_a].y[num] + xObjSort[b_a].x[num]) / 2) * TILEH) + (TILEH / 2);
		else
			mapYpos = xMap.pointY+ (((xObjSort[b_a].y[num] + xObjSort[b_a].x[num]) / 2) * TILEH);
		
		setMapData(xObjSort[b_a].code[num]);			//xMap.rever,xMap.type,xMap.listNum 구하기
				
		if(xObjSort[b_a].viewType[num] == MAP_TYPE_SHOPNPC)
		{
			subTemp[XPOS] = mapXpos + xShopNpc[xObjSort[b_a].code[num]].drawX;
			subTemp[YPOS] = mapYpos + xShopNpc[xObjSort[b_a].code[num]].drawY-30;
						
			if(xShopNpc[xObjSort[b_a].code[num]].xFace.hairNum >= 2000)
			{
				xGame.fgameScale = 1.0f;
				drawPacker(imgNpcName, getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70,cy), 0, imgH(imgNpcName)/6*(xShopNpc[xObjSort[b_a].code[num]].xFace.hairNum%1000), imgW(imgNpcName), imgH(imgNpcName)/6, VH);
				xGame.fgameScale = xWorldMap.fscale;
				
			}
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_8_INTERIOR_MAKENPC:
					if(xShopNpc[xObjSort[b_a].code[num]].isChair == TRUE)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS], cx);
						xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS], cy);
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					}
					break;
				}
			}
				
			sprintf(strTempS, "a");
			//현재실제행동
			switch(xShopNpc[xObjSort[b_a].code[num]].state)
			{
			case SHOPNPC_STATE_WAIT:
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
				break;
			case SHOPNPC_STATE_EMPTY:
				xShopNpc[xObjSort[b_a].code[num]].actingType = xShopNpc[xObjSort[b_a].code[num]].subAct;
				break;
			case SHOPNPC_STATE_ASTARERR:
				break;
			case SHOPNPC_STATE_CALLSHOPASSISTANT:
			case SHOPNPC_STATE_CALLSHOPASSISTANT_RCMD:
//				sprintf(strTempS, "호출");
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_ASSISTANTCALL;
				break;
			case SHOPNPC_STATE_CALLSHOPASSISTANTWAIT:
			case SHOPNPC_STATE_CALLSHOPASSISTANTWAIT_RCMD:
//				sprintf(strTempS, "호출대기");
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
				break;
			
			case SHOPNPC_STATE_TABLESEE:
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
//				sprintf(strTempS, "물건보기");					//고민
				xShopNpc[xObjSort[b_a].code[num]].actingType = xShopNpc[xObjSort[b_a].code[num]].subAct;
				break;
			case SHOPNPC_STATE_ETC:
				xShopNpc[xObjSort[b_a].code[num]].actingType = xShopNpc[xObjSort[b_a].code[num]].etcAct;
				break;
			case SHOPNPC_STATE_CHAIR_WAIT:
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_CHAIR_EVENT;
				break;
			case SHOPNPC_STATE_CHAIR_ACT:
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
				xShopNpc[xObjSort[b_a].code[num]].actingType = xShopNpc[xObjSort[b_a].code[num]].subAct;
				break;
			case SHOPNPC_STATE_CHAIR_STANDUP:
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_CHAIR_STANDUP;
				break;
			case SHOPNPC_STATE_CHAIR_SIT:					//앉기
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_CHAIR_SIT;
				break;
			case SHOPNPC_STATE_CHAIR_EVENTFAIL:
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_ANGRY;
				break;
			case SHOPNPC_STATE_PORTER_WM_MAN_TIRED:
				switch(xShopNpc[xObjSort[b_a].code[num]].porterOptionType)
				{
				case 1:	//여남//남
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MAN_TIRED;
					break;
				case 3:	//여여//남
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_WW_MAN_TIRED;
					break;
				case 5:	//남남//남
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MM_MAN_TIRED;
					break;
				}				
				break;
			case SHOPNPC_STATE_PORTER_WM_MAN_WAIT:
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
				break;
			case SHOPNPC_STATE_PORTER_WM_MAN_TYPE0_0:
				switch(xShopNpc[xObjSort[b_a].code[num]].porterOptionType)
				{
				case 1:	//여남//남
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MAN_YES;
					break;
				case 3:	//여여//남
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_WW_MAN_YES;
					break;
				case 5:	//남남//남
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MM_MAN_YES;
					break;
				}
				break;
			case SHOPNPC_STATE_PORTER_WM_MAN_TYPE1_0:
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MAN_APPLAUD;
				break;
			case SHOPNPC_STATE_PORTER_MM_MAN_TYPE1_0:
			case SHOPNPC_STATE_PORTER_WW_MAN_TYPE1_0:
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MAN_APPLAUD;
				break;
			case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_0:
			case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_0:
			case SHOPNPC_STATE_PORTER_MM_WOMAN_TYPE1_0:
			case SHOPNPC_STATE_PORTER_WW_WOMAN_TYPE1_0:
					
				switch(xShopNpc[xObjSort[b_a].code[num]].porterOptionType)
				{
				case 0:	//여남//여
					xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_FITTING;
					break;
				case 2:	//여여//여
					xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_WW_W_FITTING;
					break;
				case 4:	//남남//여
					xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MM_W_FITTING;
					break;
				}
					
					
				
				break;
			case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_1:
			case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE1_1:
					
			case SHOPNPC_STATE_PORTER_MM_WOMAN_TYPE1_1://남자대사대기(남남)
			case SHOPNPC_STATE_PORTER_WW_WOMAN_TYPE1_1://남자대사대기(남남)
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
				break;
			case SHOPNPC_STATE_PORTER_WM_WOMAN_TYPE0_2:
					
				switch(xShopNpc[xObjSort[b_a].code[num]].porterOptionType)
				{
				case 0:	//여남//여
					xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_ANGRY;
					break;
				case 2:	//여여//여
					xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_WW_W_ANGRY;
					break;
				case 4:	//남남//여
					xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MM_W_ANGRY;
					break;
				}
				break;
			case SHOPNPC_STATE_TABLEBUY:					//선택
//				sprintf(strTempS, "꺼네기");
				xShopNpc[xObjSort[b_a].code[num]].moveType = xShopNpc[xObjSort[b_a].code[num]].actLook;
				xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_SELECT;
					
				break;
			case SHOPNPC_STATE_PAYMENTWAIT:
				sprintf(strTempS, "계산대기");
				break;
			case SHOPNPC_STATE_PAYMENT:
				sprintf(strTempS, "계산중");
				break;
			case SHOPNPC_STATE_FITTINGROOM:
				//피팅룸도착
				break;
			case SHOPNPC_STATE_FITTINGROOM_OPEN_IN:
				//피팅룸 들어가기
				switch(xShopNpc[xObjSort[b_a].code[num]].anyCnt)
				{
				case 6:	setAlpha(30);	break;
				case 5:	setAlpha(60);	break;
				case 4:	setAlpha(90);	break;
				case 3:	setAlpha(120);	break;
				case 2:	setAlpha(150);	break;
				case 1:	setAlpha(180);	break;
				case 0:	setAlpha(210);	break;
				default:	setAlpha(0);	break;						
				}
				break;
			case SHOPNPC_STATE_FLOORUP:
			case SHOPNPC_STATE_FLOORDOWN:
				//10에변경
				//17에 행동변경
				switch(xShopNpc[xObjSort[b_a].code[num]].anyCnt)
				{
				case 0:case 17:	setAlpha(210);	break;
				case 1:case 16:	setAlpha(180);	break;
				case 2:case 15:	setAlpha(150);	break;
				case 3:case 14:	setAlpha(120);	break;
				case 4:case 13:	setAlpha(90);	break;
				case 5:case 12:	setAlpha(60);	break;
				case 6:case 11:	setAlpha(30);	break;
				
				default:setAlpha(0);	break;
						
				}
				break;
			case SHOPNPC_STATE_FITTINGROOM_CLOSE_WAIT:
				//아예 그리지 말자
				return;
				break;
			case SHOPNPC_STATE_FITTINGROOM_OPEN_OUT:
				switch(xShopNpc[xObjSort[b_a].code[num]].anyCnt)
				{
				case 0:	setAlpha(0);	break;
				case 1:	setAlpha(30);	break;
				case 2:	setAlpha(60);	break;
				case 3:	setAlpha(90);	break;
				case 4:	setAlpha(120);	break;
				case 5:	setAlpha(150);	break;
				case 6:	setAlpha(180);	break;
				case 7:	setAlpha(210);	break;
				}
					
				//피팅룸 나오기
				break;
			case SHOPNPC_STATE_LOOKINGMIRROR:	//포즈1(가방X)포즈2(가방)
//				sprintf(strTempS, "거울보기");
				if(xShopNpc[xObjSort[b_a].code[num]].actingType == NPC_ACT_POWERMAN)
					xShopNpc[xObjSort[b_a].code[num]].moveType = MOVETYPE_XPLUS;
				break;
			case SHOPNPC_STATE_MOVE:
			case SHOPNPC_STATE_FLOORUPMOVE:
			case SHOPNPC_STATE_FLOORDOWNMOVE:
				
				//진행중인행동
				switch(xShopNpc[xObjSort[b_a].code[num]].buyAct)
				{
				case NPC_BUYACT_TREND:
					//유행정보 진열대 찾아서 매칭시켜주자
//					sprintf(strTempS, "유행");
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
					break;
				case NPC_BUYACT_FITTING:
					//피팅쇼윈도 찾아서 연결시켜주자
//					sprintf(strTempS, "피팅");
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
					break;
				case NPC_BUYACT_SELLTABLE:
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
					break;
				case NPC_BUYACT_FITTINGROOM:
					//피팅룸
//					sprintf(strTempS, "피팅룸");
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
					break;
				case NPC_BUYACT_PAYMENT:
//					sprintf(strTempS, "계산");
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
					
					//계산
					break;
				case NPC_BUYACT_EXIT:
					setFace(&xShopNpc[xObjSort[b_a].code[num]].xFace, FACE_TYPE_ANGRY);
//					sprintf(strTempS, "퇴장");
					if(xShopNpc[xObjSort[b_a].code[num]].buyItemCode == DONT)
						xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
					else
						xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
					break;
				}
					
				if(xShopNpc[xObjSort[b_a].code[num]].isPorter_man == TRUE)
					xShopNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_PORTER_MAN_WALKING;
				break;
			}

						

			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][0].buyItemCode = xShopNpc[xObjSort[b_a].code[num]].buyItemCode;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][1].buyItemCode = xShopNpc[xObjSort[b_a].code[num]].buyItemCode;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][0].hairResize = 100;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][0].hairResizeY = 0;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][1].hairResize = 100;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][1].hairResizeY = 0;
						
			
			
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_LEFT = FALSE;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_LEFT = FALSE;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_RIGHT = FALSE;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_RIGHT = FALSE;
			if(xShopNpc[xObjSort[b_a].code[num]].isPorter_man == TRUE)
			{
				
				switch(xShopNpc[xObjSort[b_a].code[num]].porterOptionType)
				{
				case 1://여남
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_LEFT = TRUE;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_LEFT = TRUE;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_RIGHT = TRUE;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_RIGHT = TRUE;
					break;
				case 3:	//여여
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_LEFT = TRUE;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_LEFT = TRUE;
					break;
				case 5:	//남남
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_LEFT = TRUE;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_LEFT = TRUE;
					break;
				}
			}

			
			if(xShopNpc[xObjSort[b_a].code[num]].actingType < NPC_ACT_FRONTNUM)
			{
				switch(xShopNpc[xObjSort[b_a].code[num]].moveType)
				{
				case MOVETYPE_XPLUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					drawSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopNpc[xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_XMINUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
					drawSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopNpc[xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YPLUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					reverseSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopNpc[xObjSort[b_a].code[num]].xFace);
												
					break;
				case MOVETYPE_YMINUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
					reverseSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopNpc[xObjSort[b_a].code[num]].xFace);
					break;
				}
			}
			else if(xShopNpc[xObjSort[b_a].code[num]].actingType < NPC_ACT_BACKNUM)
			{
				switch(xShopNpc[xObjSort[b_a].code[num]].moveType)
				{
				case MOVETYPE_XPLUS:
				case MOVETYPE_XMINUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					drawSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopNpc[xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YPLUS:
				case MOVETYPE_YMINUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					reverseSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopNpc[xObjSort[b_a].code[num]].xFace);
					break;
				}
			}
			else
			{
				switch(xShopNpc[xObjSort[b_a].code[num]].moveType)
				{
				case MOVETYPE_XPLUS:
				case MOVETYPE_XMINUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
					drawSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopNpc[xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YPLUS:
				case MOVETYPE_YMINUS:
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
					reverseSprit(&xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopNpc[xObjSort[b_a].code[num]].xFace);
					break;
				}
			}
			setAlpha(ALPHA_MAX);
			
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_LEFT = FALSE;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_LEFT = FALSE;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].isPorterMan_RIGHT = FALSE;
			xSpritNpc[xShopNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].isPorterMan_RIGHT = FALSE;
			
			
			
			if(xWorldMap.isFriendMap == FALSE && xShopNpc[xObjSort[b_a].code[num]].isSitEventBox == TRUE)
			{
				if(xShopNpc[xObjSort[b_a].code[num]].isEventBox == TRUE)
				{
					if(++xShopNpc[xObjSort[b_a].code[num]].eventBoxAnyCnt > 23)
					{
						xShopNpc[xObjSort[b_a].code[num]].isEventBox = FALSE;
						xShopNpc[xObjSort[b_a].code[num]].isSitEventBox = FALSE;
						xShopNpc[xObjSort[b_a].code[num]].isSitEventFail = FALSE;
						xShopNpc[xObjSort[b_a].code[num]].payMentEvent = FALSE;
					}
					
					
					drawEventBoxTouch(subTemp[XPOS], subTemp[YPOS]-76,xShopNpc[xObjSort[b_a].code[num]].imgEventBox,xShopNpc[xObjSort[b_a].code[num]].eventBoxAnyCnt);
				}
				else
				{
					setEventBoxPos(xShopNpc[xObjSort[b_a].code[num]].eventBoxShowAntCnt++);
					if(xWorldMap.eventShowScale != 100)
					{
						xGame.isReSizeDraw = TRUE;
						xGame.reSize = xWorldMap.eventShowScale;
					}
					
					if(xWorldMap.eventShowRot != 0)
					{
						xGame.isRotate = TRUE;
						xGame.rotateNum = xWorldMap.eventShowRot;
					}
					
					xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].code[num];
					switch(xShopNpc[xObjSort[b_a].code[num]].subAct)
					{
					case NPC_ACT_CHAIR_BOOK:
						addEventBox(imgBookIcon,mapXpos, mapYpos-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_CHAIREVENT,1,0,1.5f);
						xShopNpc[xObjSort[b_a].code[num]].imgEventBox = imgBookIcon;
						break;
					case NPC_ACT_CHAIR_COFFEE:
						addEventBox(imgCoffeeIcon,mapXpos, mapYpos-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_CHAIREVENT,1,0,1.5f);
						xShopNpc[xObjSort[b_a].code[num]].imgEventBox = imgCoffeeIcon;
						break;
					case NPC_ACT_CHAIR_IPAD:
						addEventBox(imgIpadIcon,mapXpos, mapYpos-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_CHAIREVENT,1,0,1.5f);
						xShopNpc[xObjSort[b_a].code[num]].imgEventBox = imgIpadIcon;
						break;
					case NPC_ACT_CHAIR_PHONE:
						addEventBox(imgPhoneIcon,mapXpos, mapYpos-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_CHAIREVENT,1,0,1.5f);
						xShopNpc[xObjSort[b_a].code[num]].imgEventBox = imgPhoneIcon;
						break;
					}
					xGame.isReSizeDraw = FALSE;
					xGame.isRotate = FALSE;
					
					
					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_8_INTERIOR_NPCTOUCH:
							if(xShopNpc[xObjSort[b_a].code[num]].isChair == TRUE)
							{
								xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(mapXpos, cx);
								xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(mapYpos-80, cy);
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							}
							break;
						}
					}
					
					
				}
			}
			else if(xShopNpc[xObjSort[b_a].code[num]].payMentEvent == TRUE)
			{
				if(xShopNpc[xObjSort[b_a].code[num]].x == xWorldMap.doorMakeX && xShopNpc[xObjSort[b_a].code[num]].y == xWorldMap.doorMakeY)
				{
					int money;
					if(xShopNpc[xObjSort[b_a].code[num]].isBuyAct[NPC_BUYACT_FITTING] == TRUE)
					{
						money = 5;
					}
					else
					{
						
						money = 1;
					}
					
					xShopNpc[xObjSort[b_a].code[num]].payMentEvent = FALSE;
					setBonus(subTemp[XPOS], subTemp[YPOS]-76, ICON_TYPE_GOLD, money);
					setMoney(money);
					
					setDropIcon(subTemp[XPOS], subTemp[YPOS]-76,
								ICON_TYPE_GOLD,money,
								DONT,0,
								DONT,0);
				}
				else
				{
					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						
						
												
						
						setEventBoxPos(xShopNpc[xObjSort[b_a].code[num]].eventBoxShowAntCnt++);
						if(xWorldMap.eventShowScale != 100)
						{
							xGame.isReSizeDraw = TRUE;
							xGame.reSize = xWorldMap.eventShowScale;
						}
						if(xWorldMap.eventShowRot != 0)
						{
							xGame.isRotate = TRUE;
							xGame.rotateNum = xWorldMap.eventShowRot;
						}
						
						xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].code[num];
						addEventBox(imgPaymentIcon,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_PAYMENT,1,0,1.5f);
						xShopNpc[xObjSort[b_a].code[num]].imgEventBox = imgPaymentIcon;
						xGame.isRotate = FALSE;
						xGame.isReSizeDraw = FALSE;
						
						
						//제대로 트랜드이벤트 누르고 바로 계산할경우 문제가 생기는경우가 있어 따로 처리
						xShopNpc[xObjSort[b_a].code[num]].isTrendEvent = FALSE;
					}
				}
			}
			else if(xShopNpc[xObjSort[b_a].code[num]].isTrendEvent == TRUE)
			{
				if(xShopNpc[xObjSort[b_a].code[num]].isEventBox == TRUE)
				{
					if(++xShopNpc[xObjSort[b_a].code[num]].eventBoxAnyCnt > 23)
					{
						xShopNpc[xObjSort[b_a].code[num]].isEventBox = FALSE;
						xShopNpc[xObjSort[b_a].code[num]].isTrendEvent = FALSE;
					}
					drawEventBoxTouch(subTemp[XPOS], subTemp[YPOS]-76,xShopNpc[xObjSort[b_a].code[num]].imgEventBox,xShopNpc[xObjSort[b_a].code[num]].eventBoxAnyCnt);
				}
				else
				{
									
					setEventBoxPos(xShopNpc[xObjSort[b_a].code[num]].eventBoxShowAntCnt++);
					
					
					if(xWorldMap.eventShowScale != 100)
					{
						xGame.isReSizeDraw = TRUE;
						xGame.reSize = xWorldMap.eventShowScale;
					}
					if(xWorldMap.eventShowRot != 0)
					{
						xGame.isRotate = TRUE;
						xGame.rotateNum = xWorldMap.eventShowRot;
					}
					xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].code[num];
					addEventBox(imgTrendNpcIcon,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_TRENDNPC,1,0,1.5f);
					xShopNpc[xObjSort[b_a].code[num]].imgEventBox = imgTrendNpcIcon;
					xGame.isRotate = FALSE;
					xGame.isReSizeDraw = FALSE;
				}
			}
									
			if(xShopNpc[xObjSort[b_a].code[num]].xEmoticon.state == EMOTICON_STATE_DONT)
				drawSpeak(&xShopNpc[xObjSort[b_a].code[num]].xSpeak, getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70, cy));
			
			if(xShopNpc[xObjSort[b_a].code[num]].xEmoticon.state == EMOTICON_STATE_PLAY)
				drawEmoticon(subTemp[XPOS], subTemp[YPOS]-70,&xShopNpc[xObjSort[b_a].code[num]].xEmoticon);
						
			/*
			sprintf(strTempS,"%d", xShopNpc[xObjSort[b_a].code[num]].inOutCnt);
			gSetColor(255, 0, 0);
			xGame.fgameScale = 1.0f;
			gDrawString(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS], cy), strTempS, VH);
			xGame.fgameScale = xWorldMap.fscale;
			 */
			
			/*
			if(xShopNpc[xObjSort[b_a].code[num]].isPorter_man == FALSE)
			{
				gSetColor(0, 0, 0);
				fillRect(subTemp[XPOS]-90, subTemp[YPOS]-80+40, 180, 30);
				gSetColor(255, 255, 255);
				xGame.fgameScale = 1.0f;
				
				switch(xShopNpc[xObjSort[b_a].code[num]].buyType20)
				{
				case BUY_TYPE20_SEX:
					switch(xShopNpc[xObjSort[b_a].code[num]].buySex20)
					{
					case 0:
						sprintf(strTempS, "성별:여(%dF)",xShopNpc[xObjSort[b_a].code[num]].floorTarget+1);
						break;
					case 1:
						sprintf(strTempS, "성별:남(%dF)",xShopNpc[xObjSort[b_a].code[num]].floorTarget+1);
						break;
					}
					break;
				case BUY_TYPE20_SELLTABLE:
					switch(xShopNpc[xObjSort[b_a].code[num]].buyFtype)
					{
					case F_TYPE_OUTER:
					case F_TYPE_TOP:
					case F_TYPE_BOTTOM:
					case F_TYPE_ONEPIECE:
						sprintf(strTempS, "구매:옷(%dF)",xShopNpc[xObjSort[b_a].code[num]].floorTarget+1);
						break;
					case F_TYPE_SHOES:
					case F_TYPE_BAG:
					case F_TYPE_ACCECSSORY:
						sprintf(strTempS, "구매:잡화(%dF)",xShopNpc[xObjSort[b_a].code[num]].floorTarget+1);
						break;
					}
					break;
				case BUY_TYPE20_TREND:
					sprintf(strTempS, "유행(%dF)",xShopNpc[xObjSort[b_a].code[num]].floorTarget+1);
					break;
				case BUY_TYPE20_RANDOM:
					sprintf(strTempS, "구매:전부(%dF)",xShopNpc[xObjSort[b_a].code[num]].floorTarget+1);
					break;
				case BUY_TYPE20_FITTING:
					sprintf(strTempS, "쇼윈도(%dF)",xShopNpc[xObjSort[b_a].code[num]].floorTarget+1);
					break;
				}
				gDrawString(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70+50, cy), strTempS, VH);
				xGame.fgameScale = xWorldMap.fscale;
			}
			 */
		}
        
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_MODELNPC)
		{
			
			subTemp[XPOS] = mapXpos + xModelNpc[xObjSort[b_a].code[num]].drawX;
			subTemp[YPOS] = mapYpos + xModelNpc[xObjSort[b_a].code[num]].drawY-30;
			
			/*
			xGame.fgameScale = 1.0f;
			setFontSize(8);
			gDrawStringBold(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70, cy), xModelData[xInventoryModel[xModelNpc[xObjSort[b_a].code[num]].invenNum].code].strName, VH, 255, 255, 255, 44, 27, 26);
			setFontSize(11);
			xGame.fgameScale = xWorldMap.fscale;
			*/
			
			switch(xModelNpc[xObjSort[b_a].code[num]].state)
			{
			case MODELNPC_STATE_WAIT:
			case MODELNPC_STATE_INTERIORINFO:
				xModelNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
				break;
			case MODELNPC_STATE_WAITMOVE:
			case MODELNPC_STATE_FLOORUPMOVE:
			case MODELNPC_STATE_FLOORDOWNMOVE:
			case MODELNPC_STATE_INTERIORINFOMOVE:
				xModelNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				break;
			case SHOPNPC_STATE_FLOORUP:
			case SHOPNPC_STATE_FLOORDOWN:
				//10에변경
				//17에 행동변경
				switch(xModelNpc[xObjSort[b_a].code[num]].anyCnt)
				{
				case 0:case 17:	setAlpha(210);	break;
				case 1:case 16:	setAlpha(180);	break;
				case 2:case 15:	setAlpha(150);	break;
				case 3:case 14:	setAlpha(120);	break;
				case 4:case 13:	setAlpha(90);	break;
				case 5:case 12:	setAlpha(60);	break;
				case 6:case 11:	setAlpha(30);	break;
				default:setAlpha(0);	break;
				}
				break;
			}
			
			xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][0].hairResize = 100;
			xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][0].hairResizeY = 0;
			xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][1].hairResize = 100;
			xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][1].hairResizeY = 0;
			
			XFACE xFaceTemp;
			XFITTINGLAYER xFTemp;
			xModelNpc[xObjSort[b_a].code[num]].invenNum = getModelKeyToSlotNum(xModelMainSlot[xModelNpc[xObjSort[b_a].code[num]].mainSlotNum].modelKey);
			memcpy(&xFTemp, &xInventoryModel[xModelNpc[xObjSort[b_a].code[num]].invenNum].xF, sizeof(xFTemp));
			
			xFaceTemp.hairNum =	1000+xInventoryModel[xModelNpc[xObjSort[b_a].code[num]].invenNum].code;
			xFaceTemp.faceNum =	1000+xInventoryModel[xModelNpc[xObjSort[b_a].code[num]].invenNum].code;
			xFaceTemp.faceType = FACE_TYPE_NORMAL;
			
			xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].buyItemCode = DONT;
			
			
			if(xModelNpc[xObjSort[b_a].code[num]].actingType < NPC_ACT_FRONTNUM)
			{
				switch(xModelNpc[xObjSort[b_a].code[num]].moveType)
				{
				case MOVETYPE_XPLUS:
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xFTemp,ACT_FRONT);
					drawSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
					break;
				case MOVETYPE_XMINUS:
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xFTemp,ACT_BACK);
					drawSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xFaceTemp);
					break;
				case MOVETYPE_YPLUS:
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xFTemp,ACT_FRONT);
					reverseSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
					break;
				case MOVETYPE_YMINUS:
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xFTemp,ACT_BACK);
					reverseSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xFaceTemp);
					break;
				}
			}
			else if(xModelNpc[xObjSort[b_a].code[num]].actingType < NPC_ACT_BACKNUM)
			{
				switch(xModelNpc[xObjSort[b_a].code[num]].moveType)
				{
					case MOVETYPE_XPLUS:
					case MOVETYPE_XMINUS:
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
						setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xFTemp,ACT_FRONT);
						drawSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
						break;
					case MOVETYPE_YPLUS:
					case MOVETYPE_YMINUS:
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
						setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xFTemp,ACT_FRONT);
						reverseSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
						break;
				}
			}
			else
			{
				switch(xModelNpc[xObjSort[b_a].code[num]].moveType)
				{
					case MOVETYPE_XPLUS:
					case MOVETYPE_XMINUS:
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
						setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xFTemp,ACT_BACK);
						drawSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xFaceTemp);
						break;
					case MOVETYPE_YPLUS:
					case MOVETYPE_YMINUS:
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xModelNpc[xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xModelNpc[xObjSort[b_a].code[num]].nowFrame;
						setSpritF(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xFTemp,ACT_BACK);
						reverseSprit(&xSpritNpc[xModelNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xFaceTemp);
						break;
				}
				
			}
									
			//생성체크
			/*
			if(ranDom(0, 100) < 50)
			{
				makeGlitterEff(xModelNpc[xObjSort[b_a].code[num]].xGlitterEff
							   ,ranDom(-20, 20)
							   ,ranDom(-60, 50));
			}
			prcGlitterEff(xModelNpc[xObjSort[b_a].code[num]].xGlitterEff,subTemp[XPOS],subTemp[YPOS]);
			*/
				
			
			if(xModelNpc[xObjSort[b_a].code[num]].isEventBox == TRUE)
			{
				if(++xModelNpc[xObjSort[b_a].code[num]].eventBoxAnyCnt > 23)
				{
					xModelNpc[xObjSort[b_a].code[num]].isEventBox = FALSE;
				}
				drawEventBoxTouch(subTemp[XPOS], subTemp[YPOS]-76,xModelNpc[xObjSort[b_a].code[num]].imgEventBox,xModelNpc[xObjSort[b_a].code[num]].eventBoxAnyCnt);
			}
			else
			{
				setEventBoxPos(xModelNpc[xObjSort[b_a].code[num]].eventBoxShowAntCnt++);
									
				if(xWorldMap.eventShowScale != 100)
				{
					xGame.isReSizeDraw = TRUE;
					xGame.reSize = xWorldMap.eventShowScale;
				}
				if(xWorldMap.eventShowRot != 0)
				{
					xGame.isRotate = TRUE;
					xGame.rotateNum = xWorldMap.eventShowRot;
				}
								
				int selectMainSlot = xModelNpc[xObjSort[b_a].code[num]].mainSlotNum;
				xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].code[num];
				
				if(selectMainSlot == DONT)
					printf("월드맵모델메인슬롯값얻어오기실패\n");
				else
				{
					switch(xModelMainSlot[selectMainSlot].state)
					{
					case MODELMAINSLOT_STATE_WAIT:
						//시작대기
						addEventBox(imgEmptyIconModel,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_MODELEVENT,1,0,1.5f);
						xModelNpc[xObjSort[b_a].code[num]].imgEventBox = imgEmptyIconModel;
														
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_22_MODELMAPMODELSTART:
								xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS], cx);
								xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS]-76, cy);
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
								break;
							}
						}
						break;
					case MODELMAINSLOT_STATE_PLAY:
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_22_MODELMAPMODELSTART:
								xQuestTuto.isTutoClean = TRUE;
								break;
							}
						}
							
							
						int endTimeTemp = xModelMainSlot[selectMainSlot].endTime;
							
							
						if(endTimeTemp-xCalendar.nowTime <= 0)
						{
							if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
							{
								switch(xQuestTuto.nowNum)
								{
								case TUTO_22_MODELMAPMODELSTART:
								case TUTO_22_MODELMAPMODELINFO:
									xQuestTuto.isTutoClean = TRUE;
									break;
								}
							}
							
							int imgNum = 4;
							switch(++xModelMainSlot[selectMainSlot].okAnyCnt)
							{
								case 1:	imgNum = 0;	break;
								case 2:	imgNum = 1;	break;
								case 3:	imgNum = 2;	break;
								case 4:	imgNum = 3;	break;
							}
							
							switch(xModelData[xInventoryModel[xModelMainSlot[selectMainSlot].inventoryNum].code].giftType)
							{
							case 0:
								addEventBox(imgModelMainOkIcon0,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_MODELEVENT,5,imgNum,1.0f);
								xPayMentInfo[0].imgEventBox = imgModelMainOkIcon0;
								break;
							case 1:
								addEventBox(imgModelMainOkIcon1,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_MODELEVENT,5,imgNum,1.0f);
								xPayMentInfo[0].imgEventBox = imgModelMainOkIcon1;
								break;
							case 2:
								addEventBox(imgModelMainOkIcon2,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_MODELEVENT,5,imgNum,1.0f);
								xPayMentInfo[0].imgEventBox = imgModelMainOkIcon2;
								break;
							case 3:
								addEventBox(imgModelMainOkIcon3,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_MODELEVENT,5,imgNum,1.0f);
								xPayMentInfo[0].imgEventBox = imgModelMainOkIcon3;
								break;
							}
								
							
							
							//성공
						}
                        //홍보 활동 시작시 게이지
						else
						{
							if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
							{
								switch(xQuestTuto.nowNum)
								{
								case TUTO_22_MODELMAPMODELINFO:
									xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS], cx);
									xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS], cy);
									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
									break;
								}
							}
							
							//진행
							//에니메이션 넣자!!!
							//
							
							if(xModelMainSlot[selectMainSlot].ingAnyCnt <= 40)
							{
								subTemp[WPOS] = xModelMainSlot[selectMainSlot].ingAnyCnt*imgW(imgProductionMenuGage)/40;
																
								drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-76, 0, imgH(imgProductionMenuGage)/2, imgW(imgProductionMenuGage), imgH(imgProductionMenuGage)/2, VL);
								drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-76, 0, 0, subTemp[WPOS], imgH(imgProductionMenuGage)/2, VL);
							}
							
							switch(++xModelMainSlot[selectMainSlot].ingAnyCnt)
							{
							case 31:xGame.reSize = 0;setAlpha(255);break;
							case 32:xGame.reSize = 69 ;setAlpha(225);break;
							case 33:xGame.reSize = 108 ;setAlpha(200);break;
							case 34:xGame.reSize = 128 ;setAlpha(175);break;
							case 35:xGame.reSize = 146 ;setAlpha(150);break;
							case 36:xGame.reSize = 163 ;setAlpha(125);break;
							case 37:xGame.reSize = 177 ;setAlpha(100);break;
							case 38:xGame.reSize = 188 ;setAlpha(75);break;
							case 39:xGame.reSize = 196 ;setAlpha(50);break;
							case 40:xGame.reSize = 200 ;setAlpha(25);break;
							}
							if(xModelMainSlot[selectMainSlot].ingAnyCnt>=31 && xModelMainSlot[selectMainSlot].ingAnyCnt <= 40)
							{
								xGame.isReSizeDraw = TRUE;
								drawPacker(imgEff1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgEff1), imgH(imgEff1), VH);
								xGame.isReSizeDraw = FALSE;
								setAlpha(ALPHA_MAX);
							}
							
							switch(xModelMainSlot[selectMainSlot].ingAnyCnt)
							{
							case 40:
								setSpeak(&xModelNpc[xObjSort[b_a].code[num]].xSpeak, "지금부터 활동을 시작할게요!", SPEAKFRAMEMAX);
								break;
							}
							xModelMainSlot[selectMainSlot].okAnyCnt = 0;
						}
						break;
                        //여기까지
					}
				}
				xGame.isRotate = FALSE;
				xGame.isReSizeDraw = FALSE;
			}

			drawSpeak(&xModelNpc[xObjSort[b_a].code[num]].xSpeak, getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70, cy));
		}
        //캐릭터 그리느는 곳
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_SHOPASSISTANT)
		{
			subTemp[XPOS] = mapXpos + xShopAssistant[floor][xObjSort[b_a].code[num]].drawX;
			subTemp[YPOS] = mapYpos + xShopAssistant[floor][xObjSort[b_a].code[num]].drawY-30;
			
			xGame.fgameScale = 1.0f;
			setFontSize(8);
			gDrawStringBold(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-66, cy), xShopAssistant[floor][xObjSort[b_a].code[num]].strName, VH, 255, 255, 255, 82, 49, 38);
			setFontSize(11);
			xGame.fgameScale = xWorldMap.fscale;
									
			if(xQuestTuto.state == QUEST_TUTO_SHOW)
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_0_SHOPASSISTANT1F_NPCINFO:
					xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS], cx);
					xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS], cy);
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}
									
 			
						
			switch(xShopAssistant[floor][xObjSort[b_a].code[num]].state)
			{
			case SHOPASSISTANT_STATE_WAIT:
				xShopAssistant[floor][xObjSort[b_a].code[num]].buyItemCode = DONT;
//				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
                xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;

				sprintf(strTempS, "대기");
				break;
			case SHOPASSISTANT_STATE_SELLTABLEMOVE:
				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "물품이동");
				break;
			case SHOPASSISTANT_STATE_SHOPNPCMOVE:
//				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKINGBAG;
                xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "손님이동");
				break;
			case SHOPASSISTANT_STATE_RCMDMOVE:
				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "추천이동");
				break;
			case SHOPASSISTANT_STATE_WAITMOVE:
				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "대기이동");
				break;
			case SHOPASSISTANT_STATE_ORDERINGMOVE:
				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "정리이동");
				break;
			case SHOPASSISTANT_STATE_ORDERING:
				xShopAssistant[floor][xObjSort[b_a].code[num]].moveType = xShopAssistant[floor][xObjSort[b_a].code[num]].actLook;
//				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_ORDERING;
                xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "꺼내기");
				break;
			case SHOPASSISTANT_STATE_ORDERING2:
				xShopAssistant[floor][xObjSort[b_a].code[num]].moveType = xShopAssistant[floor][xObjSort[b_a].code[num]].actLook;
//				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_CLEAN;
                xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "꺼내기");
				break;
			case SHOPASSISTANT_STATE_SELLTABLE:
//				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
                xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				sprintf(strTempS, "꺼내기");
				break;
			case SHOPASSISTANT_STATE_SHOPNPC:
                xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
//				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
				sprintf(strTempS, "건네주기");
				break;
			case SHOPASSISTANT_STATE_RCMD:
                xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
//				xShopAssistant[floor][xObjSort[b_a].code[num]].actingType = NPC_ACT_TALKING;
				sprintf(strTempS, "추천대화");
				break;
			}
			
			xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][0].buyItemCode = xShopAssistant[floor][xObjSort[b_a].code[num]].buyItemCode;
			xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][1].buyItemCode = xShopAssistant[floor][xObjSort[b_a].code[num]].buyItemCode;
			
			
			xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][0].hairResize = 100;
			xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][0].hairResizeY = 0;
			xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][1].hairResize = 100;
			xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][1].hairResizeY = 0;
						
			
			if(xShopAssistant[floor][xObjSort[b_a].code[num]].actingType < NPC_ACT_FRONTNUM)
			{
				switch(xShopAssistant[floor][xObjSort[b_a].code[num]].moveType)
				{
				case MOVETYPE_XPLUS:
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//					setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_FRONT);
					drawSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_XMINUS:
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//					setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_BACK);
					drawSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YPLUS:
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//					setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_FRONT);
					reverseSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YMINUS:
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//					setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_BACK);
					reverseSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
					break;
				}
			}
			else if(xShopAssistant[floor][xObjSort[b_a].code[num]].actingType < NPC_ACT_BACKNUM)
			{
				switch(xShopAssistant[floor][xObjSort[b_a].code[num]].moveType)
				{
					case MOVETYPE_XPLUS:
					case MOVETYPE_XMINUS:
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//						setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_FRONT);
						drawSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
						break;
					case MOVETYPE_YPLUS:
					case MOVETYPE_YMINUS:
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//						setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_FRONT);
						reverseSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
						break;
				}
			}
			else
			{
				switch(xShopAssistant[floor][xObjSort[b_a].code[num]].moveType)
				{
					case MOVETYPE_XPLUS:
					case MOVETYPE_XMINUS:
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//						setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_BACK);
						drawSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
						break;
					case MOVETYPE_YPLUS:
					case MOVETYPE_YMINUS:
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xShopAssistant[floor][xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xShopAssistant[floor][xObjSort[b_a].code[num]].nowFrame;
//						setSpritF(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],&xShopAssistant[floor][xObjSort[b_a].code[num]].xF,ACT_BACK);
						reverseSprit(&xSpritNpc[xShopAssistant[floor][xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xShopAssistant[floor][xObjSort[b_a].code[num]].xFace);
						break;
				}
			}
			
			drawSpeak(&xShopAssistant[floor][xObjSort[b_a].code[num]].xSpeak, getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70, cy));
			
			xGame.fgameScale = 1.0f;
			/*
			gSetColor(255, 255, 255);
			gDrawString(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-33+10, cy), "점원", VH);
			gSetColor(0, 0, 255);
			gDrawString(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-33+10+20, cy), strTempS, VH);
			 */
			xGame.fgameScale = xWorldMap.fscale;
			xGame.isBlend = FALSE;
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_PAYMENTASSISTANT)
		{
			subTemp[XPOS] = mapXpos + xPaymentAssistant[floor].drawX;
			subTemp[YPOS] = mapYpos + xPaymentAssistant[floor].drawY-30;
			
			
			
			if(xQuestTuto.state == QUEST_TUTO_SHOW)
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_0_PAYMENT1F_NPCINFO:
					xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS], cx);
					xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS], cy);
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}

			
			
			xGame.fgameScale = 1.0f;
			setFontSize(8);
			gDrawStringBold(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-66, cy), xPaymentAssistant[floor].strName, VH, 255, 255, 255, 82, 49, 38);
			setFontSize(11);
			xGame.fgameScale = xWorldMap.fscale;
						
			switch(xPaymentAssistant[floor].state)
			{
			case PAYMENTASSISTANT_STATE_WAIT:
				xPaymentAssistant[floor].actingType = NPC_ACT_STOP;
				break;
			case PAYMENTASSISTANT_STATE_PLAY:
				xPaymentAssistant[floor].actingType = NPC_ACT_PAYMENT;
				break;
			case PAYMENTASSISTANT_STATE_DANCE:
				xPaymentAssistant[floor].actingType = NPC_ACT_DANCE;
				break;
			case PAYMENTASSISTANT_STATE_PHONE:				
				xPaymentAssistant[floor].actingType = NPC_ACT_PHONE;
				break;
			case PAYMENTASSISTANT_STATE_FASHIONCHECK:
				xPaymentAssistant[floor].actingType = NPC_ACT_FASHIONCHECK;
				break;
			}
			
			
			xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK].buyItemCode = DONT;
			
			xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT].hairResize = 100;
			xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT].hairResizeY = 0;
			xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK].hairResize = 100;
			xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK].hairResizeY = 0;
			
			
			switch(xPaymentAssistant[floor].moveType)
			{
			case MOVETYPE_XPLUS:
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT].nowDelay = xPaymentAssistant[floor].nowDelay;
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT].nowFrame = xPaymentAssistant[floor].nowFrame;
				setSpritF(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT],&xPaymentAssistant[floor].xF,ACT_FRONT);
				drawSprit(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xPaymentAssistant[floor].xFace);
				break;
			case MOVETYPE_XMINUS:
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK].nowDelay = xPaymentAssistant[floor].nowDelay;
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK].nowFrame = xPaymentAssistant[floor].nowFrame;
				setSpritF(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK],&xPaymentAssistant[floor].xF,ACT_BACK);
				drawSprit(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xPaymentAssistant[floor].xFace);
				break;
			case MOVETYPE_YPLUS:
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT].nowDelay = xPaymentAssistant[floor].nowDelay;
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT].nowFrame = xPaymentAssistant[floor].nowFrame;
				setSpritF(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT],&xPaymentAssistant[floor].xF,ACT_FRONT);
				reverseSprit(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xPaymentAssistant[floor].xFace);
				break;
			case MOVETYPE_YMINUS:
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK].nowDelay = xPaymentAssistant[floor].nowDelay;
				xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK].nowFrame = xPaymentAssistant[floor].nowFrame;
				setSpritF(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK],&xPaymentAssistant[floor].xF,ACT_BACK);
				reverseSprit(&xSpritNpc[xPaymentAssistant[floor].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xPaymentAssistant[floor].xFace);
				break;
			}
			
						
			if(xWorldMap.isFriendMap == TRUE)
			{
				
				//xFriendData[xFriendMap.selectDataSlotNum].todayOrder == FALSE
				//주문장 아이콘
				/*
				if(xSaveTemp.friendOrderNum > 0)
				{
					drawImage(&imgOrderNumBox, subTemp[XPOS]+30, subTemp[YPOS]-30, 0, 0, imgOrderNumBox.w, imgOrderNumBox.h, VH);
					gSetColor(255, 255, 255);
					sprintf(strTempS, "%d",xSaveTemp.friendOrderNum);
					gDrawString(subTemp[XPOS]+30, subTemp[YPOS]-30-2+6, strTempS, VH);
				}
				*/
				
				
                
				if(xFriendData[xFriendMap.selectDataSlotNum].todayOrder == FALSE
                   && xSaveTemp.friendOrderNum+xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_SELECTITEM] > 0)
				{
					if(xLock.isLock[LOCK_TYPE_ORDER] == FALSE)
					{
						if(xFriendData[xFriendMap.selectDataSlotNum].lv < xLock.lv[LOCK_TYPE_ORDER])
						{
								
						}
						else
						{
							int imgNum = 4;
							drawPacker(imgProductionIcon, subTemp[XPOS], subTemp[YPOS]-100, 0, imgH(imgProductionIcon)/5*imgNum, imgW(imgProductionIcon), imgH(imgProductionIcon)/5, VH);
							xEventBox[floor].type[xEventBox[floor].totalNum] = EVENTBOX_TYPE_FRIENDORDER;
							xEventBox[floor].xTouch[xEventBox[floor].totalNum].wPos = imgW(imgSwitchWorldMapUi1)/2;
							xEventBox[floor].xTouch[xEventBox[floor].totalNum].hPos = imgH(imgSwitchWorldMapUi1)/4+120;
							xEventBox[floor].xTouch[xEventBox[floor].totalNum].xPos = subTemp[XPOS] - xEventBox[floor].xTouch[xEventBox[floor].totalNum].wPos/2;
							xEventBox[floor].xTouch[xEventBox[floor].totalNum].yPos = subTemp[YPOS]-110+60 - xEventBox[floor].xTouch[xEventBox[floor].totalNum].hPos/2;
							xEventBox[floor].totalNum++;
							/*
							 gSetColor(255, 0, 0);
							 setAlpha(100);
							 fillRect(xEventBox[floor].xTouch[xEventBox[floor].totalNum].xPos, xEventBox[floor].xTouch[xEventBox[floor].totalNum].yPos, xEventBox[floor].xTouch[xEventBox[floor].totalNum].wPos, xEventBox[floor].xTouch[xEventBox[floor].totalNum].hPos);
							 setAlpha(ALPHA_MAX);
							 */
						}
					}
				}
				
				
			}
			else
			{
				int eventBoxX = subTemp[XPOS];
				int eventBoxY = subTemp[YPOS]-80;
				
				if(xPayMentInfo[0].isEventBox == TRUE)
				{
					if(++xPayMentInfo[0].eventBoxAnyCnt > 23)
						xPayMentInfo[0].isEventBox = FALSE;
					drawEventBoxTouch(eventBoxX, eventBoxY,xPayMentInfo[0].imgEventBox,xPayMentInfo[0].eventBoxAnyCnt);
				}
				else
				{
					
					setEventBoxPos(xPayMentInfo[0].eventBoxShowAntCnt++);
					if(xWorldMap.eventShowScale != 100)
					{
						xGame.isReSizeDraw = TRUE;
						xGame.reSize = xWorldMap.eventShowScale;
					}
					
					if(xWorldMap.eventShowRot != 0)
					{
						xGame.isRotate = TRUE;
						xGame.rotateNum = xWorldMap.eventShowRot;
					}
										
										
					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_1_PRODUCTIONTOUCH:
						case TUTO_2_PRODUCTIONTOUCH:
						case TUTO_25_FASHIONOPEN_PRODUCTIONTOUCH:
							xProductionMenu.totalWaitSlot = 1;
							xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(eventBoxX, cx);
							xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(eventBoxY, cy);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							break;
						}
					}
					
					if(xProductionMenu.totalSuccess > 0)			//완료된게 잇을경우
					{
						int imgNum = 4;
						switch(++xProductionMenu.worldMapInfoSuccessCnt)
						{
						case 1:	imgNum = 0;	break;
						case 2:	imgNum = 1;	break;
						case 3:	imgNum = 2;	break;
						case 4:	imgNum = 3;	break;
						}
						addEventBox(imgProductionInfoIcon,eventBoxX, eventBoxY,floor,EVENTBOX_TYPE_PRODUCTION,5,imgNum,1.0f);
						xPayMentInfo[0].imgEventBox = imgProductionInfoIcon;
					}
					else
					{
						xProductionMenu.worldMapInfoSuccessCnt = 0;
						if(xProductionMenu.totalWaitSlot > 0)		//물품슬롯이 남아있을경우
						{
							addEventBox(imgEmptyIcon,eventBoxX, eventBoxY,floor,EVENTBOX_TYPE_PRODUCTION,1,0,1.0f);
							xPayMentInfo[0].imgEventBox = imgEmptyIcon;
						}
					}
					xGame.isReSizeDraw = FALSE;
					xGame.isRotate = FALSE;
				}
			}
									
			drawSpeak(&xPaymentAssistant[floor].xSpeak, getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70, cy));
			
			/*
			gSetColor(0, 0, 0);
			fillRect(subTemp[XPOS]-40, subTemp[YPOS]-80, 80, 30);
			xGame.fgameScale = 1.0f;
			gSetColor(0, 0, 255);
			gDrawString(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-15+10+20, cy), strTempS, VH);
			xGame.fgameScale = xWorldMap.fscale;
			xGame.isBlend = FALSE;
			*/
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_NPC)
		{			
			subTemp[XPOS] = mapXpos + xWorldMapNpc[xObjSort[b_a].code[num]].drawX;
			subTemp[YPOS] = mapYpos + xWorldMapNpc[xObjSort[b_a].code[num]].drawY-30;
			
			
			if(xWorldMapNpc[xObjSort[b_a].code[num]].xFace.hairNum >= 2000)
			{
				xGame.fgameScale = 1.0f;
				drawPacker(imgNpcName, getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70,cy), 0, imgH(imgNpcName)/6*(xWorldMapNpc[xObjSort[b_a].code[num]].xFace.hairNum%1000), imgW(imgNpcName), imgH(imgNpcName)/6, VH);
				xGame.fgameScale = xWorldMap.fscale;
			}

			switch(xWorldMapNpc[xObjSort[b_a].code[num]].state)
			{
			case WORLDMAPNPC_STATE_CROSSARMS:
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_CROSSARMS;
				break;
			case WORLDMAPNPC_STATE_WAVINGHAND:
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WAVINGHAND;
				break;
			case WORLDMAPNPC_STATE_ETC:
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = xWorldMapNpc[xObjSort[b_a].code[num]].etcAct;
				break;
			case WORLDMAPNPC_STATE_SMILE:
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_SMILE;
				break;
			case WORLDMAPNPC_STATE_SEE:		//두리번두리번
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_LOOKINGAROUND;
				break;
			case WORLDMAPNPC_STATE_WATCH:		//시계보기
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WATCH;
				break;
			case WORLDMAPNPC_STATE_PHONE:		//전화받기
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WORLDMAPPHONE;
				break;
			case WORLDMAPNPC_STATE_TALKING:	//토킹
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_TALKING;
				break;
			case WORLDMAPNPC_STATE_GREETING:	//인사
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_GREETING;
				break;
			case WORLDMAPNPC_STATE_MOVE:	//대기
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_WALKING;
				break;
			default:
				xWorldMapNpc[xObjSort[b_a].code[num]].actingType = NPC_ACT_STOP;
				break;
			}
						
			xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][0].buyItemCode = xWorldMapNpc[xObjSort[b_a].code[num]].buyItemCode;
			xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][1].buyItemCode = xWorldMapNpc[xObjSort[b_a].code[num]].buyItemCode;
			
			xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][0].hairResize = 100;
			xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][0].hairResizeY = 0;
			xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][1].hairResize = 100;
			xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][1].hairResizeY = 0;
			
			if(xWorldMapNpc[xObjSort[b_a].code[num]].state == WORLDMAPNPC_STATE_MAKE)
			{				
				xGame.isBlend = FALSE;
				setAlpha(xWorldMapNpc[xObjSort[b_a].code[num]].anyCnt*30);
								
			}
			if(xWorldMapNpc[xObjSort[b_a].code[num]].state == WORLDMAPNPC_STATE_DIE)
			{
				xGame.isBlend = FALSE;
				setAlpha(ALPHA_MAX - (xWorldMapNpc[xObjSort[b_a].code[num]].anyCnt*30));
			}
			
			if(xWorldMapNpc[xObjSort[b_a].code[num]].actingType < NPC_ACT_FRONTNUM)
			{
				switch(xWorldMapNpc[xObjSort[b_a].code[num]].moveType)
				{
				case MOVETYPE_XPLUS:
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					drawSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
					
					break;
				case MOVETYPE_XMINUS:
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
					drawSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YPLUS:
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					reverseSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YMINUS:
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
					reverseSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
					break;
				}
			}
			else if(xWorldMapNpc[xObjSort[b_a].code[num]].actingType < NPC_ACT_BACKNUM)
			{
				switch(xWorldMapNpc[xObjSort[b_a].code[num]].moveType)
				{
				case MOVETYPE_XPLUS:
				case MOVETYPE_XMINUS:
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					drawSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
					break;
				case MOVETYPE_YPLUS:
				case MOVETYPE_YMINUS:
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
					xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
					setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_FRONT);
					reverseSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
					break;
				}
			}
			else
			{
				switch(xWorldMapNpc[xObjSort[b_a].code[num]].moveType)
				{
					case MOVETYPE_XPLUS:
					case MOVETYPE_XMINUS:
						xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
						setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
						drawSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
						break;
					case MOVETYPE_YPLUS:
					case MOVETYPE_YMINUS:
						xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowDelay = xWorldMapNpc[xObjSort[b_a].code[num]].nowDelay;
						xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK].nowFrame = xWorldMapNpc[xObjSort[b_a].code[num]].nowFrame;
						setSpritF(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],&xWorldMapNpc[xObjSort[b_a].code[num]].xF,ACT_BACK);
						
						
						
						
						
						reverseSprit(&xSpritNpc[xWorldMapNpc[xObjSort[b_a].code[num]].actingType][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xWorldMapNpc[xObjSort[b_a].code[num]].xFace);
						break;
				}
			}
			setAlpha(ALPHA_MAX);
			xGame.isBlend = FALSE;
						
			//유행적용
			if(xWorldMapNpc[xObjSort[b_a].code[num]].xEmoticon.state == EMOTICON_STATE_PLAY)
				drawEmoticon(subTemp[XPOS], subTemp[YPOS]-70,&xWorldMapNpc[xObjSort[b_a].code[num]].xEmoticon);
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_CAR)
		{
			subTemp[XPOS] = mapXpos + xWorldMapCar[xObjSort[b_a].code[num]].drawX;
			subTemp[YPOS] = mapYpos + xWorldMapCar[xObjSort[b_a].code[num]].drawY;
						
			if(xWorldMapCar[xObjSort[b_a].code[num]].type/1000 == 0)
				drawCarWorldMap(subTemp[XPOS], subTemp[YPOS], xWorldMapCar[xObjSort[b_a].code[num]].type, xWorldMapCar[xObjSort[b_a].code[num]].moveType, xWorldMapCar[xObjSort[b_a].code[num]].imgCnt, 100);
			else
			{
				drawCar(subTemp[XPOS], subTemp[YPOS], xWorldMapCar[xObjSort[b_a].code[num]].type%1000, xWorldMapCar[xObjSort[b_a].code[num]].moveType, xWorldMapCar[xObjSort[b_a].code[num]].imgCnt, 100);
				drawCarBox(subTemp[XPOS], subTemp[YPOS],xWorldMapCar[xObjSort[b_a].code[num]].type%1000,gameCnt,xWorldMapCar[xObjSort[b_a].code[num]].moveType);
			}
			xGame.isBlend = FALSE;
		}
		//LJW 월드맵 노래하는 NPC 막기(BGM구매)
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_SONG)
		{
//			XFACE xFaceTemp;
//			xFaceTemp.hairNum = DONT;
//			xFaceTemp.faceNum = DONT;
//			xFaceTemp.faceType = FACE_TYPE_SMILE;
//			
//			subTemp[XPOS] = mapXpos-30;
//			subTemp[YPOS] = mapYpos-30;
//			
//			
//			
//			xSpritNpc[NPC_ACT_SONG][ACT_FRONT].nowDelay = xStaticNpc[STATICNPC_SONG].nowDelay;
//			xSpritNpc[NPC_ACT_SONG][ACT_FRONT].nowFrame = xStaticNpc[STATICNPC_SONG].nowFrame;
//			xFaceTemp.faceNum = xStaticNpc[STATICNPC_SONG].faceNum;
//			xFaceTemp.hairNum = xStaticNpc[STATICNPC_SONG].hairNum;
//			
//			setSpritF(&xSpritNpc[NPC_ACT_SONG][ACT_FRONT],&xStaticNpc[STATICNPC_SONG].xF,ACT_FRONT);
//			xSpritNpc[NPC_ACT_SONG][ACT_FRONT].buyItemCode = DONT;
//			xSpritNpc[NPC_ACT_SONG][ACT_BACK].buyItemCode = DONT;
//			reverseSprit(&xSpritNpc[NPC_ACT_SONG][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
//			
//			
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_SONG][ACT_FRONT],&xStaticNpc[STATICNPC_SONG].nowDelay,&xStaticNpc[STATICNPC_SONG].nowFrame))
//			{
//				xStaticNpc[STATICNPC_SONG].nowDelay = 0;
//				xStaticNpc[STATICNPC_SONG].nowFrame = 0;
//			}
//
//			
//			subTemp[XPOS] = mapXpos+22;
//			subTemp[YPOS] = mapYpos-20;
//				
//			xSpritNpc[NPC_ACT_GUITAR][ACT_FRONT].nowDelay = xStaticNpc[STATICNPC_GUITAR].nowDelay;
//			xSpritNpc[NPC_ACT_GUITAR][ACT_FRONT].nowFrame = xStaticNpc[STATICNPC_GUITAR].nowFrame;
//			xFaceTemp.faceNum = xStaticNpc[STATICNPC_GUITAR].faceNum;
//			xFaceTemp.hairNum = xStaticNpc[STATICNPC_GUITAR].hairNum;
//			setSpritF(&xSpritNpc[NPC_ACT_GUITAR][ACT_FRONT],&xStaticNpc[STATICNPC_GUITAR].xF,ACT_FRONT);
//			xSpritNpc[NPC_ACT_GUITAR][ACT_FRONT].buyItemCode = DONT;
//			xSpritNpc[NPC_ACT_GUITAR][ACT_BACK].buyItemCode = DONT;
//			drawSprit(&xSpritNpc[NPC_ACT_GUITAR][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
//			
//			 
//			
//	
//			if(1 == prcSprit(&xSpritNpc[NPC_ACT_GUITAR][ACT_FRONT],&xStaticNpc[STATICNPC_GUITAR].nowDelay,&xStaticNpc[STATICNPC_GUITAR].nowFrame))
//			{
//				xStaticNpc[STATICNPC_GUITAR].nowDelay = 0;
//				xStaticNpc[STATICNPC_GUITAR].nowFrame = 0;
//			}
//			subTemp[XPOS] = mapXpos;
//			subTemp[YPOS] = mapYpos-100;
//			
//            if(xWorldMap.isFriendMap == false)
//                addEventBox(imgSongIcon,subTemp[XPOS], subTemp[YPOS],floor,EVENTBOX_TYPE_SONG,1,0,1.0f);
		}
		//우체통
		//LJW 월드맵 우체통 막기
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_MAIL)
		{
			subTemp[XPOS] = mapXpos-168;
			subTemp[YPOS] = mapYpos-56;
	
			int infoY = 0;
			switch(gameCnt%60)
			{
			case 0:infoY=0;break;
			case 1:infoY=1.422;break;
			case 2:infoY=2.797;break;
			case 3:infoY=3;break;
			case 4:infoY=-10.473;break;
			case 5:infoY=-12;break;
			case 6:infoY=-11.93;break;
			case 7:infoY=-11.571;break;
			case 8:infoY=-10.826;break;
			case 9:infoY=-9.456;break;
			case 10:infoY=-6.783;break;
			case 11:infoY=0;break;
			case 12:infoY=-2.275;break;
			case 13:infoY=-3.28;break;
			case 14:infoY=-3.5;break;
			case 15:infoY=-3.154;break;
			case 16:infoY=-1.859;break;
			case 17:infoY=0;break;
			case 18:infoY=-1.792;break;
			case 19:infoY=-2;break;
			case 20:infoY=-1.333;break;
			case 21:infoY=0;break;
			}
			
						
			if((xMail.giftLastKey != 0 || xSave.giftLastKey != 0) && xSave.giftLastKey != xMail.giftLastKey)
				drawPacker(imgGiftIcon, subTemp[XPOS], subTemp[YPOS]+10+infoY, 0, 0, imgW(imgGiftIcon), imgH(imgGiftIcon), VH);
			else if((xMail.mailLastKey != 0 || xSave.mailLastKey != 0) && xSave.mailLastKey != xMail.mailLastKey)
				drawPacker(imgMailIcon, subTemp[XPOS], subTemp[YPOS]+10+infoY, 0, 0, imgW(imgMailIcon), imgH(imgMailIcon), VH);
			else
				drawPacker(imgEmptyIcon, subTemp[XPOS], subTemp[YPOS]+10, 0, 0, imgW(imgEmptyIcon), imgH(imgEmptyIcon), VH);
			
			xEventBox[floor].type[xEventBox[floor].totalNum] = EVENTBOX_TYPE_MAIL;
			xEventBox[floor].xTouch[xEventBox[floor].totalNum].wPos = imgW(imgMailIcon)+30;
			xEventBox[floor].xTouch[xEventBox[floor].totalNum].hPos = imgH(imgMailIcon)+120;
			xEventBox[floor].xTouch[xEventBox[floor].totalNum].xPos = subTemp[XPOS] - xEventBox[floor].xTouch[xEventBox[floor].totalNum].wPos/2;
			xEventBox[floor].xTouch[xEventBox[floor].totalNum].yPos = subTemp[YPOS]+60 - xEventBox[floor].xTouch[xEventBox[floor].totalNum].hPos/2;
			xEventBox[floor].totalNum++;
				
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_17_MAILSELECT:
					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS]+10, cx);
						xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS]+90, cy);
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				}
			}
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_MAPOBJ2)
		{
			subTemp[XPOS] = mapXpos+45;
			subTemp[YPOS] = mapYpos-10;
			drawPacker(imgWorldMapSub5, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapSub5), imgH(imgWorldMapSub5), VH);
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_MAPOBJ1)
		{
			subTemp[XPOS] = mapXpos-54;
			subTemp[YPOS] = mapYpos-11;
			//drawImage(&imgWorldMapSub[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgWorldMapSub[4].w, imgWorldMapSub[4].h, VH);
			
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_MAPOBJ0)
		{
			subTemp[XPOS] = mapXpos-51;
			subTemp[YPOS] = mapYpos-88;
			//drawImage(&imgWorldMapSub[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgWorldMapSub[3].w, imgWorldMapSub[3].h, VH);
		}
		
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_TVOBJ)
		{
			subTemp[XPOS] = mapXpos+53;
			subTemp[YPOS] = mapYpos-71;
			//drawImage(&imgWorldMapSub[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgWorldMapSub[2].w, imgWorldMapSub[2].h, VH);
		}
		
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_RUNWAYOBJ)
		{
			subTemp[XPOS] = mapXpos-24;
			subTemp[YPOS] = mapYpos+40;
			//drawImage(&imgWorldMapSub[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgWorldMapSub[1].w, imgWorldMapSub[1].h, VH);
			
			if((gameCnt%(26*2)) <= 26)
				setAlpha((gameCnt%(26*2))*10);
			else
				setAlpha(255-((gameCnt%26)*10));

			drawPacker(imgWorldMapRunWay, subTemp[XPOS]-6, subTemp[YPOS]+44, 0, 0, imgW(imgWorldMapRunWay), imgH(imgWorldMapRunWay), BL);
			setAlpha(ALPHA_MAX);
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_ITEMSHOPOBJ)
		{
			subTemp[XPOS] = mapXpos-206;
			subTemp[YPOS] = mapYpos+14;
			//drawImage(&imgWorldMapSub[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgWorldMapSub[0].w, imgWorldMapSub[0].h, VH);
		}
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_BEST)
		{
			XFACE xFaceTemp;
			xFaceTemp.hairNum = DONT;
			xFaceTemp.faceNum = DONT;
			xFaceTemp.faceType = FACE_TYPE_SMILE;
			
			subTemp[XPOS] = mapXpos-30;
			subTemp[YPOS] = mapYpos-20;
			if(xWinnerModel.totalNum > 0)
			{
				/*
				xSpritNpc[NPC_ACT_POSE1][ACT_FRONT].nowDelay = xWinnerModel.nowDelay[0];
				xSpritNpc[NPC_ACT_POSE1][ACT_FRONT].nowFrame = xWinnerModel.nowFrame[0];
				xFaceTemp.faceNum = 1000+xWinnerModel.modelNum[0];
				xFaceTemp.hairNum = 1000+xWinnerModel.modelNum[0];
				setSpritF(&xSpritNpc[NPC_ACT_POSE1][ACT_FRONT],&xWinnerModel.xF[0],ACT_FRONT);
				xSpritNpc[NPC_ACT_POSE1][ACT_FRONT].buyItemCode = DONT;
				xSpritNpc[NPC_ACT_POSE1][ACT_BACK].buyItemCode = DONT;
				reverseSprit(&xSpritNpc[NPC_ACT_POSE1][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
				
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE1][ACT_FRONT],&xWinnerModel.nowDelay[0],&xWinnerModel.nowFrame[0]))
				{
					xWinnerModel.nowDelay[0] = ranDom(-50, -10);
					xWinnerModel.nowFrame[0] = 0;
				}
				xGame.fgameScale = 1.0f;
				sprintf(strTempS, "월드우승자\n(%s)",xFriendData[xWinnerModel.friendDataNum[0]].strNickName);
				setFontSize(8);
				gDrawStringBold(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70, cy), strTempS, VH, 255, 255, 255, 44, 27, 26);
				setFontSize(11);
				xGame.fgameScale = xWorldMap.fscale;
				 */
			}
			
			subTemp[XPOS] = mapXpos+32;
			subTemp[YPOS] = mapYpos-20;
			if(xWinnerModel.totalNum > 1)
			{
				/*
				xSpritNpc[NPC_ACT_POSE2][ACT_FRONT].nowDelay = xWinnerModel.nowDelay[1];
				xSpritNpc[NPC_ACT_POSE2][ACT_FRONT].nowFrame = xWinnerModel.nowFrame[1];
				xFaceTemp.faceNum = 1000+xWinnerModel.modelNum[1];
				xFaceTemp.hairNum = 1000+xWinnerModel.modelNum[1];
				setSpritF(&xSpritNpc[NPC_ACT_POSE2][ACT_FRONT],&xWinnerModel.xF[1],ACT_FRONT);
				xSpritNpc[NPC_ACT_POSE2][ACT_FRONT].buyItemCode = DONT;
				xSpritNpc[NPC_ACT_POSE2][ACT_BACK].buyItemCode = DONT;
				drawSprit(&xSpritNpc[NPC_ACT_POSE2][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xFaceTemp);
				
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE2][ACT_FRONT],&xWinnerModel.nowDelay[1],&xWinnerModel.nowFrame[1]))
				{
					xWinnerModel.nowDelay[1] = ranDom(-50, -10);
					xWinnerModel.nowFrame[1] = 0;
				}
				xGame.fgameScale = 1.0f;
				sprintf(strTempS, "추천우승자\n(%s)",xFriendData[xWinnerModel.friendDataNum[1]].strNickName);
				setFontSize(8);
				gDrawStringBold(getWorldMapPos(subTemp[XPOS], cx), getWorldMapPos(subTemp[YPOS]-70, cy), strTempS, VH, 255, 255, 255, 44, 27, 26);
				setFontSize(11);
				xGame.fgameScale = xWorldMap.fscale;
				 */
			}
		}

		//주차장
		else if(xObjSort[b_a].viewType[num] == MAP_TYPE_CARPARK)
		{
			int px = mapXpos-27;
			int py = mapYpos;
						
						
			for(int parkSlot=CARKPARKMAX-1;parkSlot>=0;parkSlot--)
			{
				float tX;
				float tY;
				float tAlpha;
				float	tPos;
				float	tBlend;
				
				////////////////주차장 주문장매칭실패시 주차장초기화(방어코드)
				
				if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
				{

				
					M_Boolean isCheck = FALSE;
					int carParkSlot;
					if(xCarPark[parkSlot].state != CARPARK_STATE_READ && xOrder.isNetLoad == TRUE)
					{
						for(int o=0;o<xOrder.totalNumListData;o++)
						{
							switch(xOrder.xSlotListData[o].state)
							{
							case ORDERSLOT_STATE_CAR:
								carParkSlot = getCarParkSlotNum(xOrder.xSlotListData[o].key);
								if(carParkSlot == parkSlot)
								{
									isCheck = TRUE;
									break;
								}
							}
						}
						
						if(isCheck == FALSE)
						{
							xCarPark[parkSlot].state = CARPARK_STATE_READ;
							///////////////////////////////////////////////////////////////
							xEventQueueNet.slotNum[xEventQueueNet.totalNum] = parkSlot;
							xEventQueueNet.key[xEventQueueNet.totalNum] = xCarPark[parkSlot].orderKey;
							xEventQueueNet.code[xEventQueueNet.totalNum] = xCarPark[parkSlot].carNum;
							xEventQueueNet.action[xEventQueueNet.totalNum] = xCarPark[parkSlot].state;
							xEventQueueNet.time[xEventQueueNet.totalNum] = xCarPark[parkSlot].endTime;
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CARPARK, FALSE);
							//////////////////////////////////////////////////////////////
						}
					}
				
				}
				
				
				subTemp[XPOS] = px+(parkSlot*115);
				subTemp[YPOS] = py-(parkSlot*56);
				
				//레벨제한
				//배송중
				//대기중
				if((xWorldMap.isFriendMap == FALSE?xSaveTemp.lv.oriData:xFriendData[xFriendMap.selectDataSlotNum].lv) < xCarPark[parkSlot].lv)
				{
					drawPacker(imgCarParkLv, subTemp[XPOS]+4, subTemp[YPOS]-4, 0, imgH(imgCarParkLv)/3*(parkSlot==1?1:2), imgW(imgCarParkLv), imgH(imgCarParkLv)/3, VH);
				}
				else if(xWorldMap.isFriendMap == FALSE && xLock.isLock[LOCK_TYPE_ORDER] == TRUE)
				{
					drawPacker(imgCarParkLv, subTemp[XPOS]+4, subTemp[YPOS]-4, 0, 0, imgW(imgCarParkLv), imgH(imgCarParkLv)/3, VH);
				}
				else if(xCarPark[parkSlot].carNum == DONT)
				{
					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						
						drawProductionArrow(subTemp[XPOS], subTemp[YPOS]-70);
					}
				}
				else
				{
					tBlend = 0;
					tY = 0;
					switch(xCarPark[parkSlot].state)
					{
					case CARPARK_STATE_READ:
						if(tBlend != 0)
						{
							xGame.isBlend = TRUE;
							xGame.blendType = BLEND_WHITEALPHA;
							xGame.blendNum = tBlend*ALPHA_MAX;
						}
						drawCar(subTemp[XPOS], subTemp[YPOS]-40+tY, xCarPark[parkSlot].carNum, MOVETYPE_YPLUS, 0, 100);
						xGame.isBlend = FALSE;
						switch(xWorldMap.state)
						{
						case WORLDMAP_STATE_CARPARKSELECTMODE_PRODUCTIOHN:
						case WORLDMAP_STATE_CARPARKSELECTMODE_CAR:
							drawProductionArrow(subTemp[XPOS]-15, subTemp[YPOS]-120);
							break;
						}
						break;
					case CARPARK_STATE_GO:							
						switch(++xCarPark[parkSlot].anyCnt)
						{
						case 1:	playSnd(SND_CAR);tX=480;tY=	320;tAlpha=	100;break;
						case 2:	tX=480;tY=	320.515;tAlpha=	100;break;
						case 3:	tX=480;tY=	321;tAlpha=	100;break;
						case 4:	tX=480;tY=	320;tAlpha=	100;break;
						case 5:	tX=480;tY=	319;tAlpha=	100;break;
						case 6:	tX=480;tY=	319.491;tAlpha=	100;break;
						case 7:	tX=480;tY=	320;tAlpha=	100;break;
						case 8:	tX=480;tY=	319.5;tAlpha=	100;break;
						case 9:	tX=480;tY=	319;tAlpha=	100;break;
						case 10:tX=480;tY=	319.5;tAlpha=	100;break;
						case 11:tX=480;tY=	320;tAlpha=	100;break;
						case 12:tX=480;tY=	319.5;tAlpha=	100;break;
						case 13:tX=480;tY=	319;tAlpha=	100;break;
						case 14:tX=480;tY=	319.5;tAlpha=	100;break;
						case 15:tX=480;tY=	320;tAlpha=	100;break;
						case 16:tX=480;tY=	319.5;tAlpha=	100;break;
						case 17:tX=480;tY=	319;tAlpha=	100;break;
						case 18:tX=480;tY=	319.5;tAlpha=	100;break;
						case 19:tX=480;tY=	320;tAlpha=	100;break;
						case 20:tX=480;tY=	319.5;tAlpha=	100;break;
						case 21:tX=480;tY=	319;tAlpha=	100;break;
						case 22:tX=480;tY=	319;tAlpha=	100;break;
						case 23:tX=480;tY=	320;tAlpha=	100;break;
						case 24:tX=480;tY=	319.5;tAlpha=	100;break;
						case 25:tX=480;tY=	319;tAlpha=	100;break;
						case 26:tX=480;tY=	319.5;tAlpha=	100;break;
						case 27:tX=480;tY=	320;tAlpha=	100;break;
						case 28:tX=480;tY=	319.5;tAlpha=	100;break;
						case 29:tX=480;tY=	319;tAlpha=	100;break;
						case 30:tX=480;tY=	319.5;tAlpha=	100;break;
						case 31:tX=480;tY=	320;tAlpha=	100;break;
						case 32:tX=480;tY=	319.5;tAlpha=	100;break;
						case 33:tX=480;tY=	319;tAlpha=	100;break;
						case 34:tX=480;tY=	319.5;tAlpha=	100;break;
						case 35:tX=480;tY=	320;tAlpha=	100;break;
						case 36:tX=480;tY=	319.5;tAlpha=	100;break;
						case 37:tX=480;tY=	319;tAlpha=	100;break;
						case 38:tX=480;tY=	319.5;tAlpha=	100;break;
						case 39:tX=480;tY=	320;tAlpha=	100;break;
						case 40:tX=480;tY=	319.5;tAlpha=	100;break;
						case 41:tX=480;tY=	319;tAlpha=	100;break;
						case 42:tX=480;tY=	319.5;tAlpha=	100;break;
						case 43:tX=480;tY=	320;tAlpha=	100;break;
						case 44:tX=480;tY=	319.5;tAlpha=	100;break;
						case 45:playSnd(SND_CARBBANGBBANG);tX=480;tY=	319;tAlpha=	100;break;
						case 46:tX=480;tY=	319.5;tAlpha=	100;break;
						case 47:tX=480;tY=	320;tAlpha=	100;break;
						case 48:tX=480;tY=	319.5;tAlpha=	100;break;
						case 49:tX=480;tY=	319;tAlpha=	100;break;
						case 50:tX=480;tY=	319.5;tAlpha=	100;break;
						case 51:tX=480;tY=	320;tAlpha=	100;break;
						case 52:tX=480;tY=	319.5;tAlpha=	100;break;
						case 53:tX=480;tY=	319;tAlpha=	100;break;
						case 54:tX=480;tY=	319.5;tAlpha=	100;break;
						case 55:tX=480;tY=	320;tAlpha=	100;break;
						case 56:tX=480;tY=	319.5;tAlpha=	100;break;
						case 57:tX=480;tY=	319;tAlpha=	100;break;
						case 58:tX=480;tY=	319.5;tAlpha=	100;break;
						case 59:tX=480;tY=	320;tAlpha=	100;break;
						case 60:tX=480;tY=	319.5;tAlpha=	100;break;
						case 61:tX=480;tY=	319;tAlpha=	100;break;
						case 62:tX=480;tY=	319.5;tAlpha=	100;break;
						case 63:tX=480;tY=	320;tAlpha=	100;break;
						case 64:tX=480;tY=	319.5;tAlpha=	100;break;
						case 65:tX=480;tY=	319;tAlpha=	100;break;
						case 66:tX=480;tY=	319.5;tAlpha=	100;break;
						case 67:tX=489.201;tY=	323.5;tAlpha=	90;break;
						case 68:tX=498.398;tY=	327.999;tAlpha=	80;break;
						case 69:tX=507.595;tY=	332.498;tAlpha=	70;break;
						case 70:tX=516.793;tY=	336.997;tAlpha=	60;break;
						case 71:tX=525.992;tY=	341.496;tAlpha=	50;break;
						case 72:tX=535.192;tY=	345.996;tAlpha=	40;break;
						case 73:tX=544.394;tY=	350.497;tAlpha=	30;break;
						case 74:tX=553.584;tY=	354.992;tAlpha=	20;break;
						case 75:tX=562.79;tY=	359.495;tAlpha=	10;
							//자동차를 해당위치에 생산해주자
							xCarPark[parkSlot].state = CARPARK_STATE_ING;
							for(int i=WORLDMAPCARMAX-4;i<WORLDMAPCARMAX;i++)
							{
								if(xWorldMapCar[i].state == WORLDMAPCAR_STATE_DONT)
								{
									xWorldMapCar[i].state = WORLDMAPCAR_STATE_MOVE;
									xWorldMapCar[i].x = WORLDMAPCAR_MAKEPOSX;
									xWorldMapCar[i].y = WORLDMAPCAR_MAKEPOSY;
									xWorldMapCar[i].moveType = MOVETYPE_YMINUS;
									
									xWorldMapCar[i].drawX = 0;
									xWorldMapCar[i].drawY = 0;
									xWorldMapCar[i].type = 1000+xCarPark[parkSlot].carNum;										
									
									xWorldMapCar[i].speed = ranDom(4,4);
									
									if(xModelSkill.bonusPer[MODELSKILL_TYPE_CAR_SPEED] > 0)
										xWorldMapCar[i].speed = 5;
									
									xWorldMapCar[i].speed = xMap.speedTable[(int)xWorldMapCar[i].speed];
									break;
								}
							}
							break;
						}
						if(xCarPark[parkSlot].anyCnt >= 76)
							tPos = MOVETYPE_XPLUS;
						else
							tPos = MOVETYPE_YPLUS;
														
							
						setAlpha(tAlpha*ALPHA_MAX/100);
						drawCar(subTemp[XPOS]+tX-480, subTemp[YPOS]+tY-320-40, xCarPark[parkSlot].carNum, tPos, gameCnt%4, 100);
						drawCarBox(subTemp[XPOS]+tX-480, subTemp[YPOS]+tY-320-40,xCarPark[parkSlot].carNum,xCarPark[parkSlot].anyCnt,tPos);
						setAlpha(ALPHA_MAX);
						break;
					case CARPARK_STATE_ING:
						drawPacker(imgCarParkIng, subTemp[XPOS]+5, subTemp[YPOS]-30, 0, 0, imgW(imgCarParkIng), imgH(imgCarParkIng), VH);
						if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
						{
							
							int endTimeTemp = xCarPark[parkSlot].endTime;
							if(xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_TIME] > 0)
								endTimeTemp -= xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_TIME];
																							
							if(endTimeTemp - xCalendar.nowTime <= 0)
							{
								int orderSlotNum = getOrderSlotNum(xCarPark[parkSlot].orderKey);
								xOrder.xSlotListData[orderSlotNum].state = ORDERSLOT_STATE_END;
								//////////////////////////////////////////////////////////////
								xEventQueueNet.action[xEventQueueNet.totalNum] = 1;//0:배송1:완료
								xEventQueueNet.key[xEventQueueNet.totalNum] = xCarPark[parkSlot].orderKey;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ORDEROK, FALSE);
								//////////////////////////////////////////////////////////////
								setOrderList();
								
								//주차장 상태 변경
								xCarPark[parkSlot].state = CARPARK_STATE_READ;
								///////////////////////////////////////////////////////////////
								xEventQueueNet.slotNum[xEventQueueNet.totalNum] = parkSlot;
								xEventQueueNet.key[xEventQueueNet.totalNum] = xCarPark[parkSlot].orderKey;
								xEventQueueNet.code[xEventQueueNet.totalNum] = xCarPark[parkSlot].carNum;
								xEventQueueNet.action[xEventQueueNet.totalNum] = xCarPark[parkSlot].state;
								xEventQueueNet.time[xEventQueueNet.totalNum] = xCarPark[parkSlot].endTime;
								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CARPARK, TRUE);
								//////////////////////////////////////////////////////////////
							}
							else
							{
								
							}
						}
						break;
					}
										
					
					if(xWorldMap.isFriendMap == FALSE && xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_20_ORDER_OK:
								xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS]-20, cx);
								xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS]-20, cy);
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
								break;
							}
						}
						
						if(xCarPark[parkSlot].isEventBox == TRUE)
						{
							if(++xCarPark[parkSlot].eventBoxAnyCnt > 23)
								xCarPark[parkSlot].isEventBox = FALSE;
							drawEventBoxTouch(subTemp[XPOS]-6, subTemp[YPOS]-115,xCarPark[parkSlot].imgEventBox,xCarPark[parkSlot].eventBoxAnyCnt);
						}
						else
						{
							int orderSlotNum;
							switch(xCarPark[parkSlot].state)
							{
							case CARPARK_STATE_ING:
								orderSlotNum = getOrderSlotNum(xCarPark[parkSlot].orderKey);
								//배달중아이콘
								//배달중실패
									
								if(orderSlotNum != DONT)
								{
									drawPacker(imgCarOrderIcon, subTemp[XPOS]-6, subTemp[YPOS]-115, 0, 0, imgW(imgCarOrderIcon), imgH(imgCarOrderIcon), VH);
									xCarPark[parkSlot].imgEventBox = imgCarOrderIcon;
									
									setMapData(xOrder.xSlotListData[orderSlotNum].code);
                                    
									int imgW = (xCarData[xCarPark[parkSlot].carNum].timePer.oriData-(xCarPark[parkSlot].endTime - xCalendar.nowTime))*imgW(imgIconGage)/xCarData[xCarPark[parkSlot].carNum].timePer.oriData;
                                    
									drawPacker(imgIconGage, subTemp[XPOS]-6-imgW(imgIconGage)/2, subTemp[YPOS]-115+10, 0, 0, imgW(imgIconGage), imgH(imgIconGage)/2, VL);
									drawPacker(imgIconGage, subTemp[XPOS]-6-imgW(imgIconGage)/2, subTemp[YPOS]-115+10, 0, imgH(imgIconGage)/2, imgW, imgH(imgIconGage)/2, VL);
									
									if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
									{
										switch(xQuestTuto.nowNum)
										{
										case TUTO_20_ORDER_CARINFOSELECT:
											xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(subTemp[XPOS], cx);
											xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(subTemp[YPOS]-115, cy);
											xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
											break;
										}
									}
									
									
									xEventBox[0].code[xEventBox[0].totalNum] = parkSlot;
									xEventBox[0].type[xEventBox[0].totalNum] = EVENTBOX_TYPE_CARPARK;
									
									
									
									xEventBox[0].xTouch[xEventBox[0].totalNum].wPos = imgW(imgEmptyIcon);
									xEventBox[0].xTouch[xEventBox[0].totalNum].hPos = imgH(imgEmptyIcon);
									xEventBox[0].xTouch[xEventBox[0].totalNum].xPos = subTemp[XPOS]-6 - xEventBox[0].xTouch[xEventBox[0].totalNum].wPos/2;
									xEventBox[0].xTouch[xEventBox[0].totalNum].yPos = subTemp[YPOS]-115 - xEventBox[0].xTouch[xEventBox[0].totalNum].hPos/2;
									
									xEventBox[0].totalNum++;

								}
								break;
							}
						}
					}
				}
				
				xCarPark[parkSlot].xTouch.wPos = 116;
				xCarPark[parkSlot].xTouch.hPos = 120;
				xCarPark[parkSlot].xTouch.xPos = subTemp[XPOS]-xCarPark[parkSlot].xTouch.wPos/2;
				xCarPark[parkSlot].xTouch.yPos = subTemp[YPOS]-20-xCarPark[parkSlot].xTouch.hPos/2;
				/*
				gSetColor(255, 0, 0);
				setAlpha(100);
				fillRect(xCarPark[parkSlot].xTouch.xPos, xCarPark[parkSlot].xTouch.yPos, xCarPark[parkSlot].xTouch.wPos, xCarPark[parkSlot].xTouch.hPos);
				setAlpha(ALPHA_MAX);
				 */

			}
		}
		//개발자 등록 특수 템들
		else if(xObjSort[b_a].isEventItem[num] == TRUE)
		{
			subTemp[XPOS] = mapXpos+18;
			subTemp[YPOS] = mapYpos-48;
			xGame.isReverse = TRUE;
			switch(xObjSort[b_a].code[num])
			{
			case EVENTITEM_TYPE_FLOORUP:
				drawPacker(imgWorldMapObj4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapObj4), imgH(imgWorldMapObj4), VH);
				break;
			case EVENTITEM_TYPE_FLOORDOWN:
				drawPacker(imgWorldMapObj3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapObj3), imgH(imgWorldMapObj3), VH);
				break;
			}
			xGame.isReverse = FALSE;
		}
		else if(xObjSort[b_a].isBuildItem[num] == TRUE)
		{
			xObj.isImgUse[xMap.type][xMap.listNum] = TRUE;
			
			isSubTemp[0] = FALSE;
			isSubTemp[0] = checkBuildPos(xMap.type,xMap.listNum,xMap.rever);
			
			if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
				isSubTemp[0] = FALSE;
			
			if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
			{
				int tempMap;
				if(xMap.type == INTERIOR_TYPE_FLOORTILE)
					tempMap = MAP_TYPE_FLOORTILE0;
				else
					tempMap = MAP_TYPE_WALL0;
								
				
				
				int tempType = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]/1000;
				int tempListNum = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]%1000;
				if(tempType < 0)
					tempType = -tempType;
				if(tempListNum < 0)
					tempListNum = -tempListNum;
				
				if(xMap.type == tempType && xMap.listNum == tempListNum)
					isSubTemp[0] = TRUE;
			}
			
			
			xGame.isBlend = TRUE;
			xGame.blendType = BLEND_SETCOLOR;
			if(isSubTemp[0] == FALSE)
				gSetColor(0, 255, 0);
			else
				gSetColor(255, 0, 0);
			setAlpha(ALPHA_MAX);
			xGame.isReverse = xMap.rever;

			drawObj(mapXpos-3, mapYpos-3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
			drawObj(mapXpos+3, mapYpos-3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
			drawObj(mapXpos-3, mapYpos+3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
			drawObj(mapXpos+3, mapYpos+3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);

			xGame.isBlend = FALSE;
			
			drawObj(mapXpos, mapYpos, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);

			xGame.isReverse = FALSE;
			
						
		}
		else
		{
			M_Boolean isCheckErr = FALSE;
			switch(xMap.type)
			{
			case INTERIOR_TYPE_SHOWWINDOW:
			case INTERIOR_TYPE_WALLITEM:
			case INTERIOR_TYPE_DOOR:
				for(int ee=(xObjSort[b_a].x[num]-xMap.shopPointX);ee<(xObjSort[b_a].x[num]-xMap.shopPointX)+xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];ee++)
				{
					if(xMap.shopPointW-1 == ee)
					{
						isCheckErr = TRUE;
						break;
					}
				}
				break;
			}
			
			if(isCheckErr == TRUE)
				xExtensionShop.isCheckExtension = TRUE;
						
			if(xExtensionShop.isExtensionErr == TRUE)
			{
				if(xExtensionShop.extensionErrTime+15 < xCalendar.nowTime)
					xExtensionShop.isExtensionErr = FALSE;
				
				switch(xMap.type)
				{
				case INTERIOR_TYPE_SHOWWINDOW:
				case INTERIOR_TYPE_WALLITEM:
				case INTERIOR_TYPE_DOOR:
					if(isCheckErr == TRUE && ((gameCnt/15)%2==0))
					{
						xGame.isBlend = TRUE;
						xGame.blendType = BLEND_SETCOLOR;
						gSetColor(255, 0, 0);
						setAlpha(ALPHA_MAX);
					}
					break;
				}
			}
			
			
			
			xObj.isImgUse[xMap.type][xMap.listNum] = TRUE;
			
			int isAstarErr = FALSE;
			switch(xMap.type)
			{
			case INTERIOR_TYPE_HANGER:
			case INTERIOR_TYPE_ACCESSORY:
				if(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].isAstarErr == TRUE)
					isAstarErr = TRUE;
				break;
			case INTERIOR_TYPE_PAYMENT:
				if(xPayMentInfo[floor].isAstarErr == TRUE)
					isAstarErr = TRUE;
				break;
			case INTERIOR_TYPE_FITTINGROOM:
				if(xFittingRoomInfo[floor].isAstarErr[xObjSort[b_a].interiorNum[num]] == TRUE)
					isAstarErr = TRUE;
				break;
			case INTERIOR_TYPE_SHOWWINDOW:					
				if(xShowWindowInfo[floor][xObjSort[b_a].interiorNum[num]].isAstarErr == TRUE)
					isAstarErr = TRUE;
				break;
			case INTERIOR_TYPE_OBJ:
				if(xObj.xObjData[xMap.type][xMap.listNum].isChair == TRUE)
				{
					int chairNum = getChair(floor,xObjSort[b_a].x[num],xObjSort[b_a].y[num]);
					if(chairNum != DONT)
					{
						if(xChairInfo[floor].isAstarErr[chairNum] == TRUE)
							isAstarErr = TRUE;
					}
				}
				break;
			}
			
			if(xWorldMap.state == WORLDMAP_STATE_INTERIOR)
			{
				subTemp[0] = xInterior.xBuildSlot.codeTeam[0]/1000 < 0? -(xInterior.xBuildSlot.codeTeam[0]/1000) : (xInterior.xBuildSlot.codeTeam[0]/1000);
				switch(subTemp[0])
				{
				case INTERIOR_TYPE_WALLTILE:
				case INTERIOR_TYPE_WALLITEM:
				case INTERIOR_TYPE_SHOWWINDOW:
				case INTERIOR_TYPE_DOOR:
				case INTERIOR_TYPE_FLOORTILE:
				case INTERIOR_TYPE_OBJFLOOR:
					switch(xMap.type)
					{
					case INTERIOR_TYPE_WALLTILE:
					case INTERIOR_TYPE_FLOORTILE:
						break;
					default:
						setAlpha(100);
						break;
					}					
					break;
				}
				
				
				if(xInterior.buildInType == INTERIORBUILD_TYPE_GAME && xInterior.buildMode == 1)
				{
					switch(xMap.type)
					{
					case INTERIOR_TYPE_WALLTILE:
					case INTERIOR_TYPE_FLOORTILE:
						break;
					default:
						setAlpha(100);
						break;
					}
				}
			}
			
			int userX;
			int userY;
			int userW;
			int userH;
			
			//쇼윈도일때 마네킹 특별처리.ㅠㅠ
			if(xObjSort[b_a].viewType[num] == MAP_TYPE_WASTE)
			{
				if(xWorldMap.state == WORLDMAP_STATE_PLAY)
				{
					xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].code[num];
					addEventBox(imgPaymentIcon,mapXpos,mapYpos-32,floor,EVENTBOX_TYPE_WASTE,1,0,1.0f);
					
					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_27_HELP_HELP:
							if(xWorldMap.state == WORLDMAP_STATE_PLAY)
							{
								xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(mapXpos, cx);
								xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(mapYpos-32, cy);
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							}
							break;
						}
					}
					
				}
			}
			else if(xObjSort[b_a].viewType[num] == MAP_TYPE_OBJ && xMap.type == INTERIOR_TYPE_SHOWWINDOW)
			{
				XFACE xFaceTemp;
				xFaceTemp.hairNum = DONT;
				xFaceTemp.faceNum = DONT;
				xFaceTemp.faceType = 0;
				
				int maneSex;
				int showWindowNum = 0;
				
				userX = mapXpos;
				userY = mapYpos-110;
					
				xSpritShowWindow[0].nowDelay = 0;
				xSpritShowWindow[0].nowFrame = 0;
				xSpritShowWindow[0].buyItemCode = DONT;
				xSpritShowWindow[0].hairResize = 80;
				xSpritShowWindow[0].hairResizeY = 5;
					
				xSpritShowWindow[1].nowDelay = 0;
				xSpritShowWindow[1].nowFrame = 0;
				xSpritShowWindow[1].buyItemCode = DONT;
				xSpritShowWindow[1].hairResize = 80;
				xSpritShowWindow[1].hairResizeY = 5;

								
				
				if(xMap.rever == 0)
					showWindowNum = getShowWindow(xObjSort[b_a].x[num]-1+(floor*5), xObjSort[b_a].y[num]+(floor*5),floor);
				else
					showWindowNum = getShowWindow(xObjSort[b_a].x[num]+(floor*5), xObjSort[b_a].y[num]-1+(floor*5),floor);
				
				
				maneSex = xShowWindowInfo[floor][showWindowNum].gender;
				/*
				setSpritF(&xSpritShowWindow[maneSex],&xShowWindowInfo[floor][showWindowNum].xF,ACT_FRONT);
				reverseSprit(&xSpritShowWindow[maneSex],mapXpos, mapYpos-42,ACT_FRONT,&xFaceTemp);
				*/
                
				xGame.fgameScale = xGame.fgameScale * 0.38f;
				xGame.fgameScaleCx = getWorldMapPos(mapXpos, cx);
				xGame.fgameScaleCy = lcdH-(getWorldMapPos(mapYpos-40, cy));
				xGame.isReverse = xMap.rever == 0?FALSE:TRUE;

				drawFittingBody(getWorldMapPos(mapXpos, cx), (getWorldMapPos(mapYpos-40, cy)),&xShowWindowInfo[floor][showWindowNum].xF,&xFaceTemp,FALSE,xShowWindowInfo[floor][showWindowNum].gender);
				xGame.isReverse = FALSE;
				xGame.fgameScaleCx = cx;
				xGame.fgameScaleCy = cy;
				xGame.fgameScale = xWorldMap.fscale;
                
                
                
                
				
				if(xWorldMap.isFriendMap == FALSE)
				{
					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_11_SHOWWINDOWSELECT:
						case TUTO_12_SHOWWINDOWSELECT:
							
							xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(mapXpos, cx);
							xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(mapYpos-40, cy);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							break;
						}
					}
					
					if(xQuestInfo.isShowwindowInfo == TRUE)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(mapXpos, cx);
						xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(mapYpos-40, cy);
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
				}
				
				
					
				//쇼윈도우 뚜껑
				int mapXpos_sub;
				int mapYpos_sub;
				int interiorCode = xShowWindowInfo[floor][showWindowNum].interiorCode;
				interiorCode = interiorCode<0?-interiorCode:interiorCode;
				int type_sub = interiorCode/1000;
				int list_sub = interiorCode%1000;
				mapXpos_sub = xMap.pointX + (((xShowWindowInfo[floor][showWindowNum].y-(floor*5)) - (xShowWindowInfo[floor][showWindowNum].x-(floor*5))) * (TILEW / 2));
				
				if ((xShowWindowInfo[floor][showWindowNum].y + xShowWindowInfo[floor][showWindowNum].x) % 2 == 1)
					mapYpos_sub = xMap.pointY+ ((((xShowWindowInfo[floor][showWindowNum].y-(floor*5)) + (xShowWindowInfo[floor][showWindowNum].x-(floor*5))) / 2) * TILEH) + (TILEH / 2);
				else
					mapYpos_sub = xMap.pointY+ ((((xShowWindowInfo[floor][showWindowNum].y-(floor*5)) + (xShowWindowInfo[floor][showWindowNum].x-(floor*5))) / 2) * TILEH);
			
				xGame.isReverse = xMap.rever;
											
				drawImage(&xObj.imgShowWindowTop[list_sub], mapXpos_sub+xObj.xObjData[type_sub][list_sub].x[xMap.rever], mapYpos_sub + xObj.xObjData[type_sub][list_sub].y[xMap.rever], 0, 0, xObj.imgShowWindowTop[list_sub].w, xObj.imgShowWindowTop[list_sub].h, VH);
				xGame.isReverse = FALSE;
										
				if(xShowWindowInfo[floor][showWindowNum].isAstarErr == TRUE)
				{
					drawPacker(imgAstarErrIcon, mapXpos_sub+xObj.xObjData[type_sub][list_sub].x[xMap.rever], mapYpos_sub + xObj.xObjData[type_sub][list_sub].y[xMap.rever], 0, 0, imgW(imgAstarErrIcon), imgH(imgAstarErrIcon), VH);
				}
				
				xEventBox[floor].code[xEventBox[floor].totalNum] = showWindowNum;
				if(xWorldMap.state == WORLDMAP_STATE_PLAY)
				{
					if(xWorldMap.isFriendMap == FALSE)
					{
						if(xShowWindowInfo[floor][showWindowNum].totalSocialSlot > 0)
						{
																
							drawFriendProfile(userX, userY-8,xFriendData[xShowWindowInfo[floor][showWindowNum].xSocialSlot[0].friendDataSlotNum].userNum,44);
							xEventBox[floor].code[xEventBox[floor].totalNum] = showWindowNum;
							addEventBox(imgSocialIcon,userX,userY,floor,EVENTBOX_TYPE_SHOWWINDOWUSER,1,0,1.5f);
						}
						else if(xShowWindowInfo[floor][showWindowNum].isFameEvent == TRUE)
						{
							if(xShowWindowInfo[floor][showWindowNum].isEventBox == TRUE)
							{
								if(++xShowWindowInfo[floor][showWindowNum].eventBoxAnyCnt > 23)
								{
									xShowWindowInfo[floor][showWindowNum].isEventBox = FALSE;
									xShowWindowInfo[floor][showWindowNum].isFameEvent = FALSE;
									xShowWindowInfo[floor][showWindowNum].fameEventStart = FALSE;
								}
								
								drawEventBoxTouch(userX, userY,xShowWindowInfo[floor][showWindowNum].imgEventBox,xShowWindowInfo[floor][showWindowNum].eventBoxAnyCnt);
							}
							else
							{
								setEventBoxPos(xShowWindowInfo[floor][showWindowNum].eventBoxShowAntCnt++);
								if(xWorldMap.eventShowScale != 100)
								{
									xGame.isReSizeDraw = TRUE;
									xGame.reSize = xWorldMap.eventShowScale;
								}
								
								if(xWorldMap.eventShowRot != 0)
								{
									xGame.isRotate = TRUE;
									xGame.rotateNum = xWorldMap.eventShowRot;
								}
								
								addEventBox(imgPaymentIcon,userX,userY+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SHOWWINDOWFAME,1,0,1.5f);
								xShowWindowInfo[floor][showWindowNum].imgEventBox = imgPaymentIcon;
								xGame.isReSizeDraw = FALSE;
								xGame.isRotate = FALSE;
							}
							
						}
						else if(xSell.totalSell[floor] > 0  && xShowWindowInfo[floor][showWindowNum].isFitting == FALSE)
						{
							setEventBoxPos(xShowWindowInfo[floor][showWindowNum].eventBoxShowAntCnt++);
							if(xWorldMap.eventShowScale != 100)
							{
								xGame.isReSizeDraw = TRUE;
								xGame.reSize = xWorldMap.eventShowScale;
							}
							if(xWorldMap.eventShowRot != 0)
							{
								xGame.isRotate = TRUE;
								xGame.rotateNum = xWorldMap.eventShowRot;
							}
							addEventBox(imgEmptyIcon,userX,userY+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SHOWWINDOW,1,0,1.0f);
							xGame.isReSizeDraw = FALSE;
							xGame.isRotate = FALSE;
						}
					}
					else
					{
						
						
						if(xShowWindowInfo[floor][showWindowNum].totalSocialSlot > 0)
						{
							drawFriendProfile(userX, userY-8,xFriendData[xShowWindowInfo[floor][showWindowNum].xSocialSlot[0].friendDataSlotNum].userNum,44);
							xEventBox[floor].code[xEventBox[floor].totalNum] = showWindowNum;
							addEventBox(imgSocialIcon,userX,userY,floor,EVENTBOX_TYPE_SHOWWINDOWUSER,1,0,1.0f);
						}
						else if(xFriendData[xFriendMap.selectDataSlotNum].socialCount > 0
                                && (xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100 > 0)
						{
                            
                            
							xEventBox[floor].code[xEventBox[floor].totalNum] = showWindowNum;
							addEventBox(imgCandyIcon,userX,userY,floor,EVENTBOX_TYPE_SHOWWINDOWFRIEND,1,0,1.0f);
							
														
							if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
							{
								switch(xQuestTuto.nowNum)
								{
								case TUTO_27_HELP_HELP:
									if(xWorldMap.state == WORLDMAP_STATE_PLAY)
									{
										xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(userX, cx);
										xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(userY, cy);
										xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
									}
									break;
								}
							}							
						}
					}
					
					/*
					subTemp[XPOS] = mapXpos;
					subTemp[YPOS] = mapYpos-40;
					//생성체크
					if(xShowWindowInfo[floor][showWindowNum].isFitting == TRUE && ranDom(0, 100) < 50)
					{
						makeGlitterEff(xShowWindowInfo[floor][showWindowNum].xGlitterEff
									   ,ranDom(-(xObj.img[xMap.type][xMap.listNum].w/4), xObj.img[xMap.type][xMap.listNum].w/4)
									   ,ranDom(-(xObj.img[xMap.type][xMap.listNum].h/4), xObj.img[xMap.type][xMap.listNum].h/4));
					}
					prcGlitterEff(xShowWindowInfo[floor][showWindowNum].xGlitterEff,subTemp[XPOS],subTemp[YPOS]);
					 */
				}
			}
			else if(xObjSort[b_a].interiorNum[num] != DONT && xMap.type == INTERIOR_TYPE_FITTINGROOM && xFittingRoomInfo[floor].state[xObjSort[b_a].interiorNum[num]] == FITTINGROOMINFO_STATE_PLAY &&
					(xShopNpc[xFittingRoomInfo[floor].npcNumcode[xObjSort[b_a].interiorNum[num]]].state == SHOPNPC_STATE_FITTINGROOM_OPEN_IN ||xShopNpc[xFittingRoomInfo[floor].npcNumcode[xObjSort[b_a].interiorNum[num]]].state == SHOPNPC_STATE_FITTINGROOM_OPEN_OUT))
			{								
				xGame.isReverse = xMap.rever;
				drawImage(&xObj.imgFittingRoomOpen[xMap.listNum], mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever], 0, 0, xObj.imgFittingRoomOpen[xMap.listNum].w, xObj.imgFittingRoomOpen[xMap.listNum].h, VH);
			}
			else if(xObjSort[b_a].viewType[num] == MAP_TYPE_WALL0 &&
					(((xWorldMap.doorMakeX-1==xObjSort[b_a].x[num] && xWorldMap.doorMakeY==xObjSort[b_a].y[num])
					  ||(xWorldMap.doorMakeX==xObjSort[b_a].x[num] && xWorldMap.doorMakeY-1==xObjSort[b_a].y[num])
					  || getShowWindow(xObjSort[b_a].x[num]+(floor*5), xObjSort[b_a].y[num]+(floor*5), floor) != DONT)))
			{
				loadImgObj(xMap.type,xMap.listNum);
				xGame.isReverse = xMap.rever;
								
				drawImage(&xObj.imgWallTop[xMap.listNum], mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever], 0, 0, xObj.imgWallTop[xMap.listNum].w, xObj.imgWallTop[xMap.listNum].h, VH);
			}
			else if(xMap.type == INTERIOR_TYPE_DOOR)
			{
				xGame.isReverse = xMap.rever;
				
				if(xWorldMap.isDoorOpen == TRUE)
					drawImage(&xObj.imgDoorOpen[xMap.listNum], mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever], 0, 0, xObj.imgDoorOpen[xMap.listNum].w, xObj.imgDoorOpen[xMap.listNum].h, VH);
				else
					drawObj(mapXpos, mapYpos, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
			}
			else
			{
				if(isAstarErr == TRUE)
				{
					xGame.isBlend = TRUE;
					xGame.blendType = BLEND_SETCOLOR;
					gSetColor(255, 0, 0);
					setAlpha(ALPHA_MAX);
					xGame.isReverse = xMap.rever;
					drawObj(mapXpos-3, mapYpos-3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
					drawObj(mapXpos+3, mapYpos-3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
					drawObj(mapXpos-3, mapYpos+3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
					drawObj(mapXpos+3, mapYpos+3, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
					xGame.isBlend = FALSE;
				}
				
				xGame.isReverse = xMap.rever;
												
				
				drawObj(mapXpos, mapYpos, xMap.type, xMap.listNum, xMap.rever,FALSE,xObjSort[b_a].x[num],xObjSort[b_a].y[num]);
												
                
                //좌표+맵툴의x좌표 +(?)
                //좌표+맵툴의y좌표 +(?)
                
				if(xMap.type == INTERIOR_TYPE_HANGER)
					drawHanger(mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever],xObjSort[b_a].code[num],xObjSort[b_a].interiorNum[num],floor);
				else if(xMap.type == INTERIOR_TYPE_ACCESSORY)
					drawAccessory(mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever],xObjSort[b_a].code[num],xObjSort[b_a].interiorNum[num],floor);
					
				if(isAstarErr == TRUE)
				{
					drawPacker(imgAstarErrIcon, mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever], 0, 0, imgW(imgAstarErrIcon), imgH(imgAstarErrIcon), VH);
				}
			}
			setAlpha(ALPHA_MAX);
			xGame.isReverse = FALSE;
			xGame.isBlend = FALSE;
						
			//설치형일때에는 밑에까지 갈필요가 없다
			if(xObjSort[b_a].isEventQueue[num] == TRUE)
			{
				return;
			}
			
			
			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_EDITITEM:
						
					if(xWorldMap.state == WORLDMAP_STATE_INTERIOR)
					{
						if(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]  == xObjSort[b_a].code[num]
						   || -xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]  == xObjSort[b_a].code[num])
						{
							xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], cx);
							xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever], cy);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					break;
				}
			}
			//게이지 그릴 곳?
            if(xMap.type==INTERIOR_TYPE_PRODUCTION&&xWorldMap.state!=WORLDMAP_STATE_INTERIOR)
            {
                subTemp[XPOS]=mapXpos;
                subTemp[YPOS]=mapYpos;
                
                int selectMainObj=xObjSort[b_a].code[num];
                int index=getFormerIndex2(selectMainObj);
                if(selectMainObj<0)
                {
                    selectMainObj=selectMainObj*(-1);
                }


                int objindex1=selectMainObj/1000;
                int objindex2=selectMainObj%1000;
                
                if(xObj.img[objindex1][objindex2].w>110)
                {
                    if(xMap.rever==0)
                    {
                        subTemp[XPOS]=mapXpos+40;
                    }
                    else
                    {
                        subTemp[XPOS]=mapXpos-40;
                    }
                    
                }
                if(xObj.img[objindex1][objindex2].h>160&&xObj.img[objindex1][objindex2].h<185)
                {
                    subTemp[YPOS]=mapYpos-50;
                }
                else if(xObj.img[objindex1][objindex2].h>185)
                {
                    subTemp[YPOS]=mapYpos-75;
                }
                switch(xFormer.xData[index].state)
                {
                    case 0:
                        if(xWorldMap.isFriendMap == FALSE)
                        {
                            xEventBox[floor].code[xEventBox[floor].totalNum] = index;
                            addEventBox(imgEmptyIconModel,subTemp[XPOS], subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_FORMER,1,0,1.5f);
                        }
                        break;
                    case 1:
                        if(xFormer.xData[index].ingAnyCnt<=40)
                        {
                            subTemp[WPOS] = xFormer.xData[index].ingAnyCnt*imgW(imgProductionMenuGage)/40;
                            
                            drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-76, 0, imgH(imgProductionMenuGage)/2, imgW(imgProductionMenuGage), imgH(imgProductionMenuGage)/2, VL);
                            drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-76, 0, 0, subTemp[WPOS], imgH(imgProductionMenuGage)/2, VL);
                        }
                        switch(++xFormer.xData[index].ingAnyCnt)
                        {
                            case 31:xGame.reSize = 0;setAlpha(255);break;
                            case 32:xGame.reSize = 69 ;setAlpha(225);break;
                            case 33:xGame.reSize = 108 ;setAlpha(200);break;
                            case 34:xGame.reSize = 128 ;setAlpha(175);break;
                            case 35:xGame.reSize = 146 ;setAlpha(150);break;
                            case 36:xGame.reSize = 163 ;setAlpha(125);break;
                            case 37:xGame.reSize = 177 ;setAlpha(100);break;
                            case 38:xGame.reSize = 188 ;setAlpha(75);break;
                            case 39:xGame.reSize = 196 ;setAlpha(50);break;
                            case 40:xGame.reSize = 200 ;setAlpha(25);break;
                        }
                        if(xFormer.xData[index].ingAnyCnt>=31 && xFormer.xData[index].ingAnyCnt<= 40)
                        {
                            xGame.isReSizeDraw = TRUE;
                            drawPacker(imgEff1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgEff1), imgH(imgEff1), VH);
                            xGame.isReSizeDraw = FALSE;
                            setAlpha(ALPHA_MAX);
                        }
                        break;
                    case 2:
                        if(xWorldMap.isFriendMap == FALSE)
                        {
                            xEventBox[floor].code[xEventBox[floor].totalNum] = index;
                            addEventBox(imgCandyIcon,subTemp[XPOS],subTemp[YPOS]-76+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_FORMER,1,0,1.5f);
                        }
                        break;
                    default:
                        break;
                }
            }
			
			
			//벽일때외곽 그려주자
			if(xObjSort[b_a].viewType[num] == MAP_TYPE_WALL0)
			{
				if(xObjSort[b_a].x[num] == xMap.shopPointX-1-(floor*5))
				{
					xGame.isReverse =TRUE;
					drawImage(&imgShopOutLine[1], mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]-80, 0, 0, imgShopOutLine[1].w, imgShopOutLine[1].h, VH);
					xGame.isReverse =FALSE;
				}
				else
				{
					drawImage(&imgShopOutLine[1], mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]-80, 0, 0, imgShopOutLine[1].w, imgShopOutLine[1].h, VH);
				}
				
				if(xObjSort[b_a].x[num] == xMap.shopPointX+xMap.shopPointW-1-(floor*5))
				{
					drawImage(&imgShopOutLine[0], mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever]-23, mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]+9, 0, 0, imgShopOutLine[0].w, imgShopOutLine[0].h, VH);
				}
				if(xObjSort[b_a].y[num] == xMap.shopPointY+xMap.shopPointH-1-(floor*5))
				{
					xGame.isReverse =TRUE;
					drawImage(&imgShopOutLine[0], mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever]+22, mapYpos + xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]+9, 0, 0, imgShopOutLine[0].w, imgShopOutLine[0].h, VH);
					xGame.isReverse =FALSE;
				}
			}
					
			
			
			switch(xMap.type)
			{
			case INTERIOR_TYPE_HANGER:
			case INTERIOR_TYPE_ACCESSORY:
				//직원정리카운트
				++xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].orderingCnt;
				if(xWorldMap.state == WORLDMAP_STATE_PLAY)
				{
					subTemp[XPOS] = mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever];
					subTemp[YPOS] = mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever];
					M_Boolean isTrend = FALSE;
					for(int tt=0;tt<TRENDMAX;tt++)
					{
						if(xTrend.isOpen[tt] == TRUE && xTrend.itemCode[tt] != DONT)
						{
							for(int sss=0;sss<xObj.xObjData[xMap.type][xMap.listNum].slot;sss++)
							{
								if(xTrend.itemCode[tt] == xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xSlot[sss].code)
								{
									isTrend = TRUE;
									break;
								}
							}
						}
					}
					
										
					subTemp[XPOS] = mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever];
					subTemp[YPOS] = mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever];
					//생성체크
					if(isTrend == TRUE && ranDom(0, 100) < 50)
					{
						makeGlitterEff(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xGlitterEff
									   ,ranDom(-(xObj.img[xMap.type][xMap.listNum].w/4), xObj.img[xMap.type][xMap.listNum].w/4)
									   ,ranDom(-(xObj.img[xMap.type][xMap.listNum].h/4), xObj.img[xMap.type][xMap.listNum].h/4));
					}
					
					prcGlitterEff(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xGlitterEff,subTemp[XPOS],subTemp[YPOS]);
					
					if(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].isTrendTouchAny0 == TRUE)
					{
						if(TRUE == drawTrendTouchAny0(mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever],++xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].trendTouchAny0))
						{
							xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].isTrendTouchAny0 = FALSE;
						}
					}
					if(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].isTrendTouchAny1 == TRUE)
					{
						if(TRUE == drawTrendTouchAny1(mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever], mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever],++xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].trendTouchAny1))
						{
							xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].isTrendTouchAny1 = FALSE;
						}
					}
				}
										
				break;
			}
				
			//판매대일경우
//			if(xMap.type == INTERIOR_TYPE_HANGER || xMap.type == INTERIOR_TYPE_ACCESSORY)
//			{
//				userX = mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever];
//				userY = mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]-(xObj.img[xMap.type][xMap.listNum].h/2)-10;
//				
//				if(xMap.type == INTERIOR_TYPE_ACCESSORY && xObj.xObjData[xMap.type][xMap.listNum].slot == 3)
//					userY -= 5;
//					
//				
//				//판대완이거나 판매중인것 둘다 없을때
//				if(xWorldMap.state == WORLDMAP_STATE_PLAY && xObjSort[b_a].interiorNum[num] != DONT)
//				{
//					xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].interiorNum[num];
//					if(xWorldMap.isFriendMap == FALSE)
//					{
//						if(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].isEventBox == TRUE)
//						{
//							if(++xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].eventBoxAnyCnt > 23)
//								xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].isEventBox = FALSE;
//							drawEventBoxTouch(userX, userY,xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].imgEventBox,xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].eventBoxAnyCnt);
//						}
//						else if(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot > 0)
//						{
//							for(int so=xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot-1;so>=0;so--)
//							{
//								userW = getUserW(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot,so,xMap.rever);
//								userH = getUserH(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot,so,xMap.rever);
//								
//								drawFriendProfile(userX+userW, userY+userH-8,xFriendData[xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xSocialSlot[so].friendDataSlotNum].userNum,44);
//								xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].interiorNum[num];
//								addEventBox(imgSocialIcon,userX+userW,userY+userH,floor,EVENTBOX_TYPE_SELLTABLEUSER,1,0,1.0f);
//							}
//						}
//						else
//						{
//							
//							setEventBoxPos(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].eventBoxShowAntCnt++);
//							if(xWorldMap.eventShowScale != 100)
//							{
//								xGame.isReSizeDraw = TRUE;
//								xGame.reSize = xWorldMap.eventShowScale;
//							}
//							
//							if(xWorldMap.eventShowRot != 0)
//							{
//								xGame.isRotate = TRUE;
//								xGame.rotateNum = xWorldMap.eventShowRot;
//							}
//							
//							if(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].sellOkTotal > 0)
//							{
//								for(int slotI=xObj.xObjData[xMap.type][xMap.listNum].slot;slotI>=0;slotI--)
//								{
//									int slotSort = slotI;
//									if(xObj.xObjData[xMap.type][xMap.listNum].slot == 6)
//									{
//										switch(slotI)
//										{
//										case 5:slotSort=2;break;
//										case 4:slotSort=1;break;
//										case 3:slotSort=0;break;
//										case 2:slotSort=5;break;
//										case 1:slotSort=4;break;
//										case 0:slotSort=3;break;
//										}
//									}
//									
//									
//									
//									
//									if(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xSlot[slotSort].code != DONT && xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xSlot[slotSort].num == 0)
//									{
//										xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].interiorNum[num];
//										xEventBox[floor].slot[xEventBox[floor].totalNum] = slotSort;
//										
//										userW = getUserW(xObj.xObjData[xMap.type][xMap.listNum].slot, slotSort, xMap.rever);
//										userH = getUserH(xObj.xObjData[xMap.type][xMap.listNum].slot, slotSort, xMap.rever);
//
//										M_Boolean isTrend = FALSE;
//										int trendPer = 0;
//										for(int tt=0;tt<TRENDMAX;tt++)
//										{
//											if(xTrend.isOpen[tt] == TRUE && xTrend.itemCode[tt] != DONT)
//											{
//												if(xTrend.itemCode[tt] == xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xSlot[slotSort].code)
//												{
//													isTrend = TRUE;
//													trendPer = xTrend.per[tt];
//													break;
//												}
//											}
//										}
//										
//										if(isTrend == TRUE)
//										{
//											switch(trendPer)
//											{
//											case 200:
//												addEventBox(imgTrendBonusIcon0,userX+userW,userY+userH+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SELLTABLE,1,0,1.5f);
//												xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].imgEventBox = imgTrendBonusIcon0;
//												break;
//											case 300:
//												addEventBox(imgTrendBonusIcon1,userX+userW,userY+userH+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SELLTABLE,1,0,1.5f);
//												xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].imgEventBox = imgTrendBonusIcon1;
//												break;
//											case 600:
//												addEventBox(imgTrendBonusIcon2,userX+userW,userY+userH+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SELLTABLE,1,0,1.5f);
//												xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].imgEventBox = imgTrendBonusIcon2;
//												break;
//											case 1000:
//												addEventBox(imgTrendBonusIcon3,userX+userW,userY+userH+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SELLTABLE,1,0,1.5f);
//												xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].imgEventBox = imgTrendBonusIcon3;
//												break;
//											}
//										}
//										else
//										{
//											addEventBox(imgCompletionIcon,userX+userW,userY+userH+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SELLTABLE,1,0,1.5f);
//											xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].imgEventBox = imgCompletionIcon;
//										}
//									}
//								}
//							}
//							else if(xProduction.haveItemCnt[floor][(xMap.type == INTERIOR_TYPE_HANGER?0:1)] > 0)
//							{
//								if((xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].useTotal+xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].sellOkTotal) < xObj.xObjData[xMap.type][xMap.listNum].slot)
//									addEventBox(imgEmptyIcon,userX,userY+xWorldMap.eventShowY,floor,EVENTBOX_TYPE_SELLTABLE,1,0,1.0f);
//							}
//							if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//							{
//								switch(xQuestTuto.nowNum)
//								{
//								case TUTO_1_SELLTABLETOUCH:
//								case TUTO_2_SELLTABLETOUCH:
//									xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(userX, cx);
//									xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(userY+20, cy);
//									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//									break;
//								}
//							}
//							xGame.isReSizeDraw = FALSE;
//							xGame.isRotate = FALSE;
//						}
//					}
//					else
//					{
//						
//						for(int soooo=2;soooo>=0;soooo--)
//						{
//							int so;
//							//0일때 지금처림
//							//1일때 1번을 마지막에
//							//2일때 2번을 마지막에
//							switch(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot)
//							{
//							
//							case 1:
//								switch(soooo)
//								{
//								case 2:	so = 2;	break;
//								case 1:	so = 0;	break;
//								case 0:	so = 1;	break;
//								}
//								break;
//							case 2:
//								switch(soooo)
//								{
//								case 2:	so = 1;	break;
//								case 1:	so = 0;	break;
//								case 0:	so = 2;	break;
//								}
//								break;
//							default:
//								so = soooo;
//								break;
//							}
//							
//							if(so < xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot)
//							{
//								if(xFriendData[xFriendMap.selectDataSlotNum].socialCount > 0
//                                   && (xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100 > 0)
//								{
//									userW = getUserWSocial(3,so,xMap.rever);
//									userH = getUserHSocial(3,so,xMap.rever);
//								}
//								else
//								{
//									userW = getUserWSocial(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot,so,xMap.rever);
//									userH = getUserHSocial(xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].totalSocialSlot,so,xMap.rever);
//								}
//								
//								drawFriendProfile(userX+userW, userY+userH-8,xFriendData[xSellTableInfo[floor][xObjSort[b_a].interiorNum[num]].xSocialSlot[so].friendDataSlotNum].userNum,44);
//								xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].interiorNum[num];
//								addEventBox(imgSocialIcon,userX+userW,userY+userH,floor,EVENTBOX_TYPE_SELLTABLEUSER,1,0,1.0f);
//							}
//							else if(xFriendData[xFriendMap.selectDataSlotNum].socialCount > 0
//                                    && (xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100>0)
//							{
//								userW = getUserWSocial(3,so,xMap.rever);
//								userH = getUserHSocial(3,so,xMap.rever);
//								
//								xEventBox[floor].code[xEventBox[floor].totalNum] = xObjSort[b_a].interiorNum[num];
//								addEventBox(imgShowwindowIcon,userX+userW,userY+userH,floor,EVENTBOX_TYPE_SELLTABLEFRIEND,1,0,1.0f);
//								
//								if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//								{
//									switch(xQuestTuto.nowNum)
//									{
//									case TUTO_27_HELP_HELP:
//										if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//										{
//											xTutoInfo.x[xTutoInfo.totalNum] = getWorldMapPos(userX+userW, cx);
//											xTutoInfo.y[xTutoInfo.totalNum] = getWorldMapPos(userY+userH, cy);
//											xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//										}
//										break;
//									}
//								}
//							}
//						}
//					}
//				}
//			}
		}
	}
}

void setScaleRotLimit()
{
	int i;
	int minX;
	int minY;
	int maxX;
	int maxY;
	//확대 축소 최소 최대값 제어
	
	if(xWorldMap.fscale > 2.0f)
		xWorldMap.fscale = 2.0f;
	else if(xWorldMap.fscale < 0.52f)
		xWorldMap.fscale = 0.52f;
			
	if(xWorldMap.fscale <= 0.52f)
	{
		xInterior.buildMapMoveXpos -=xMap.pointX-cx;
		xMap.pointX = cx;
	}
	else
	{
		for(i=0;i<lcdW;i+=2)
		{
			minX = getWorldMapPos((xMap.pointX-i+2-imgMapBg.w/2),cx);
					
			if(minX <= -1)
			{
				xMap.pointX -=i;
				xInterior.buildMapMoveXpos -=i;				
				break;
			}
		}
				
		//X좌표 제어
		for(i=0;i<lcdW;i+=2)
		{
			maxX = getWorldMapPos((xMap.pointX+i+2+imgMapBg.w/2),cx);

			if(maxX >= lcdW)
			{
				xMap.pointX +=i;
				xInterior.buildMapMoveXpos +=i;
				break;
			}
		}
	}
	
	//Y좌표 제어
	for(i=0;i<lcdH;i+=2)
	{
		minY = getWorldMapPos((xMap.pointY-i-imgMapBg.h/2+722),cy);
		
		if(minY <= -1)
		{
			xMap.pointY -=i;
			xInterior.buildMapMoveYpos -=i;
			break;
		}
	}
	//Y좌표 제어
	for(i=0;i<lcdH;i+=2)
	{
		maxY = getWorldMapPos((xMap.pointY+i+imgMapBg.h/2+722),cy);
				
		if(maxY >= lcdH)
		{
			xMap.pointY +=i;
			xInterior.buildMapMoveYpos +=i;
			break;
		}
	}
}



void checkMapDataAstar(int type,int floor)
{
	int subX=0;
	int subY=0;
	int subW=0;
	int subH=0;
	//맵데이터 입력
	memset(xMap.shopData[floor][type], FALSE, sizeof(xMap.shopData[floor][type]));
	
	
	//외각은 자동으로 불가능 처리 해준다 start:-1 max:+2
	for(int x=0;x<xMap.shopPointW;x++)
		xMap.shopData[floor][type][x][xMap.shopPointH] = TRUE;
		
	for(int y=0;y<xMap.shopPointH;y++)
		xMap.shopData[floor][type][xMap.shopPointW][y] = TRUE;
		
	for(int x=0;x<xMap.shopPointW;x++)
	{
		for(int y=0;y<xMap.shopPointH;y++)
		{
			if(xMap.data[floor][type][xMap.shopPointX+x][xMap.shopPointY+y] != 0)
			{
				setMapData(xMap.data[floor][type][xMap.shopPointX+x][xMap.shopPointY+y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				subX = 0;
				subY = 0;
				subW = 0;
				subH = 0;
												
				for(int w=subX;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]+subW;w++)
				{
					for(int h=subY;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]+subH;h++)
					{
						xMap.shopData[floor][type][x+w][y+h] = TRUE;
					}					
				}
			}
		}		
	}
	
	for(int i=0;i<xEventQueue.totalNum;i++)
	{
		switch(xEventQueue.type[i])
		{
			case EVENTQUEUE_TYPE_INTERIOR:
			case EVENTQUEUE_TYPE_INPUTINVEN:
			case EVENTQUEUE_TYPE_OUTPUTINVEN:
			case EVENTQUEUE_TYPE_MOVE:
				setMapData(xEventQueue.xInteriorSlot[i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				if(type == MAP_TYPE_OBJ && (xMap.type == INTERIOR_TYPE_OBJFLOOR || xMap.type == INTERIOR_TYPE_FLOORTILE))
					continue;

				for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
				{
					for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
					{

						xMap.shopData[xEventQueue.floor[i]][type][xEventQueue.x[i]+w-xMap.shopPointX][xEventQueue.y[i]+h-xMap.shopPointY] = TRUE;
					}
				}
				break;
		}
	}
		
	//쇼윈도 검색
	for(int x=0;x<xMap.shopPointW;x++)
	{
		if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+x][xMap.shopPointY-1] != 0)
		{
			setMapData(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+x][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
					xMap.shopData[floor][type][x][0] = TRUE;
		}
	}
	
	//쇼윈도 검색
	for(int y=0;y<xMap.shopPointH;y++)
	{
		if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+y] != 0)
		{
			setMapData(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
				xMap.shopData[floor][type][0][y] = TRUE;
		}
	}
		
}


void drawMyCharacter()
{
	int mapXpos =  0;
	int mapYpos =  0;
	int pos = ACT_FRONT;
	
	int startX = xMyCharacter.x - xMap.shopPointX;
	int startY = xMyCharacter.y - xMap.shopPointY;
	int endX = xMyCharacter.makeX+xMap.shopPointX-1;
	int endY = xMyCharacter.makeY+xMap.shopPointY-1;
	
	
	if(setAstar(startX, startY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,xMyCharacter.floor) == FALSE)
	{
		xMyCharacter.state = MYCHARACTER_STATE_WAIT;
	}
	else
	{
		xMyCharacter.state = MYCHARACTER_STATE_MOVE;
		
		xMyCharacter.bestTotalCnt = xAstar.totalCnt;
		xMyCharacter.bestNowCnt = 0;
		for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
		{
			xMyCharacter.bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
			xMyCharacter.bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
		}
		
		
		//다음이동
		if(xMyCharacter.bestX[xMyCharacter.bestNowCnt] < xMyCharacter.bestX[xMyCharacter.bestNowCnt+1])
			xMyCharacter.moveType = MOVETYPE_XPLUS;
		else if(xMyCharacter.bestX[xMyCharacter.bestNowCnt] > xMyCharacter.bestX[xMyCharacter.bestNowCnt+1])
			xMyCharacter.moveType = MOVETYPE_XMINUS;
		else if(xMyCharacter.bestY[xMyCharacter.bestNowCnt] < xMyCharacter.bestY[xMyCharacter.bestNowCnt+1])
			xMyCharacter.moveType = MOVETYPE_YPLUS;
		else if(xMyCharacter.bestY[xMyCharacter.bestNowCnt] > xMyCharacter.bestY[xMyCharacter.bestNowCnt+1])
			xMyCharacter.moveType = MOVETYPE_YMINUS;
		
		
		switch(xMyCharacter.moveType)
		{
			case MOVETYPE_XPLUS:
				xMyCharacter.drawX -= (float)(xMyCharacter.speed * 2);
				xMyCharacter.drawY += (float)(xMyCharacter.speed * 1);
				if(xMyCharacter.drawX  <= -(TILEW/4))
				{
					xMyCharacter.x++;
					xMyCharacter.drawX = (TILEW/4);
					xMyCharacter.drawY = -(TILEH/4);
				}
				break;
			case MOVETYPE_XMINUS:
				xMyCharacter.drawX += (float)(xMyCharacter.speed * 2);
				xMyCharacter.drawY -= (float)(xMyCharacter.speed * 1);
				if(xMyCharacter.drawX  >= (TILEW/4))
				{
					xMyCharacter.x--;
					xMyCharacter.drawX = -(TILEW/4);
					xMyCharacter.drawY = (TILEH/4);
				}
				break;
			case MOVETYPE_YPLUS:
				xMyCharacter.drawX += (float)(xMyCharacter.speed * 2);
				xMyCharacter.drawY += (float)(xMyCharacter.speed * 1);
				if(xMyCharacter.drawY  >= (TILEH/4))
				{
					xMyCharacter.y++;
					xMyCharacter.drawX = -(TILEW/4);
					xMyCharacter.drawY = -(TILEH/4);
				}
				break;
			case MOVETYPE_YMINUS:
				xMyCharacter.drawX -= (float)(xMyCharacter.speed * 2);
				xMyCharacter.drawY -= (float)(xMyCharacter.speed * 1);
				if(xMyCharacter.drawY  <= -(TILEH/4))
				{
					xMyCharacter.y--;
					xMyCharacter.drawX = (TILEW/4);
					xMyCharacter.drawY = (TILEH/4);
				}
				break;
			default:
				
				break;
		}
	}
	
	
	mapXpos = xMap.pointX + (((xMyCharacter.y-(xMyCharacter.floor*5)) - (xMyCharacter.x-(xMyCharacter.floor*5))) * (TILEW / 2));
	
	if ((xMyCharacter.y + xMyCharacter.x + 1) % 2 == 1)
		mapYpos = xMap.pointY + ((((xMyCharacter.y-(xMyCharacter.floor*5)) + (xMyCharacter.x-(xMyCharacter.floor*5)) + 1) / 2) * TILEH) + (TILEH / 2);
	else
		mapYpos = xMap.pointY + ((((xMyCharacter.y-(xMyCharacter.floor*5)) + (xMyCharacter.x-(xMyCharacter.floor*5)) + 1) / 2) * TILEH);
	
	
	
	subTemp[XPOS] = mapXpos + xMyCharacter.drawX;
	subTemp[YPOS] = mapYpos + xMyCharacter.drawY-30;
	
	xGame.fgameScale = 1.0f;
	setFontSize(8);
	gDrawStringBold(getWorldMapPos(subTemp[XPOS], cx), subTemp[YPOS], xMyCharacter.strName, VH, 255, 255, 255, 82, 49, 38);
	setFontSize(11);
	xGame.fgameScale = xWorldMap.fscale;
	
	switch(xMyCharacter.state)
	{
		case MYCHARACTER_STATE_WAIT:
			xMyCharacter.actingType = NPC_ACT_STOP;
			break;
		case MYCHARACTER_STATE_MOVE:
			xMyCharacter.actingType = NPC_ACT_WALKING;
			break;
		default:
			
			break;
	}
	
	switch(xMyCharacter.moveType)
	{
		case MOVETYPE_XPLUS:
		case MOVETYPE_YPLUS:
			pos = ACT_FRONT;
			break;
		case MOVETYPE_XMINUS:
		case MOVETYPE_YMINUS:
			pos = ACT_BACK;
			break;
		default:
			pos = ACT_FRONT;
			break;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//의상 레이어에 마네킹바디 넣기
	setNpcBody_FP(&xSpritNpc[xMyCharacter.actingType][pos], pos);
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//의상 레이어에 의상 넣기
	setSpritF_FP(&xSpritNpc[xMyCharacter.actingType][pos],&xMyCharacter.xF,pos);
	
	//헤어셋팅
	setNpcHair_FP(&xSpritNpc[xMyCharacter.actingType][pos], xMyCharacter.xFace.hairNum, pos);
	
	//얼굴셋팅
	setNpcFace_FP(&xSpritNpc[xMyCharacter.actingType][pos], xMyCharacter.xFace.faceNum, pos);
	
	xSpritNpc[xMyCharacter.actingType][pos].nowDelay = xMyCharacter.nowDelay;
	xSpritNpc[xMyCharacter.actingType][pos].nowFrame = xMyCharacter.nowFrame;
	prcSprit(&xSpritNpc[xMyCharacter.actingType][pos], &xMyCharacter.nowDelay, &xMyCharacter.nowFrame);
	
	switch(xMyCharacter.moveType)
	{
		case MOVETYPE_YPLUS:
		case MOVETYPE_YMINUS:
			reverseSprit_FP(&xSpritNpc[xMyCharacter.actingType][pos],subTemp[XPOS],subTemp[YPOS],pos,&xMyCharacter.xFace);
			break;
		default:
			drawSprit_FP(&xSpritNpc[xMyCharacter.actingType][pos],subTemp[XPOS],subTemp[YPOS],pos,&xMyCharacter.xFace);
			break;
	}
	
}

void makeMyCharacter()
{
	xMyCharacter.x = xPayMentInfo[0].x-1;
	xMyCharacter.y = xPayMentInfo[0].y;
	xMyCharacter.moveType = MOVETYPE_XPLUS;
	xMyCharacter.nowDelay=0;
	xMyCharacter.nowFrame=0;
	
	
	int floorTemp=0;
	int whileCnt = 0;
	M_Boolean isCheck = FALSE;
	
	int codeTeamTemp = xInterior.xBuildSlot.codeTeam[0];
	
	xMyCharacter.floor = 0;
	xMyCharacter.floorTarget = 0;
	xMyCharacter.nowDelay = 0;
	xMyCharacter.nowFrame = 0;
	xMyCharacter.state = MYCHARACTER_STATE_WAIT;
	
	floorTemp = xMyCharacter.floor;
	xInterior.xBuildSlot.codeTeam[0] = INTERIOR_TYPE_OBJ*1000;
	xMap.nowFloor = xMyCharacter.floor;
	checkBuildMapData();
	xMap.nowFloor = floorTemp;
	
	xMyCharacter.makeX = ranDom(0, xMap.shopPointW-2);
	xMyCharacter.makeY = ranDom(0, xMap.shopPointH-2);
	
	whileCnt = 0;
	isCheck = FALSE;
	
	while(TRUE)
	{
		xMyCharacter.makeX = ranDom(0, xMap.shopPointW-2);
		xMyCharacter.makeY = ranDom(0, xMap.shopPointH-2);
		
		if(xMap.interiorData[xMyCharacter.floor][xMyCharacter.makeX][xMyCharacter.makeY] == FALSE)
		{
			isCheck = TRUE;
			xMyCharacter.makeX += xMap.shopPointX;
			xMyCharacter.makeY += xMap.shopPointY;
			break;
		}
		
		if(++whileCnt > 100)
		{
			break;
		}
	}
	
	if(isCheck == FALSE)
	{
		if(xPayMentInfo[xMyCharacter.floor].codeNum >= 0)
		{
			xMyCharacter.makeX = xPayMentInfo[xMyCharacter.floor].x-1;
			xMyCharacter.makeY = xPayMentInfo[xMyCharacter.floor].y;
		}
		else
		{
			xMyCharacter.makeX = xPayMentInfo[xMyCharacter.floor].x;
			xMyCharacter.makeY = xPayMentInfo[xMyCharacter.floor].y-1;
		}
	}
	
	xMyCharacter.actLook = MOVETYPE_YPLUS;
	xMyCharacter.x = xMyCharacter.makeX;
	xMyCharacter.y = xMyCharacter.makeY;
	xMyCharacter.drawX = 0;
	xMyCharacter.drawY = 0;
	xMyCharacter.speed = xMap.speedTable[3];
	
	xInterior.xBuildSlot.codeTeam[0] = codeTeamTemp;
}



void makeShopAssistant()
{
	//샵아웃 위치로 변경
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		
		resetPayMentInfo(floor);
	
		if(xPayMentInfo[floor].codeNum >= 0)
		{			
			xShopAssistant[floor][0].makeX = xPayMentInfo[floor].x+1;
			xShopAssistant[floor][0].makeY = xPayMentInfo[floor].y;
		}
		else
		{
			xShopAssistant[floor][0].makeX = xPayMentInfo[floor].x;
			xShopAssistant[floor][0].makeY = xPayMentInfo[floor].y+1;
		}
		
		xShopAssistant[floor][0].state = SHOPASSISTANT_STATE_WAIT;
		xShopAssistant[floor][0].anyCnt = 999;
		xShopAssistant[floor][0].buyItemCode = DONT;
		xShopAssistant[floor][0].actLook = MOVETYPE_YPLUS;
		xShopAssistant[floor][0].x = xShopAssistant[floor][0].makeX;
		xShopAssistant[floor][0].y = xShopAssistant[floor][0].makeY;
		xShopAssistant[floor][0].drawX = 0;
		xShopAssistant[floor][0].drawY = 0;
		xShopAssistant[floor][0].type = 0;
		xShopAssistant[floor][0].speed = xMap.speedTable[3];
		
		//LJW 점원 이름 안뜨게 처리함!!!
		memset(xShopAssistant[floor][0].strName, 0x00, sizeof(xShopAssistant[floor][0].strName));
		memset(xPaymentAssistant[floor].strName, 0x00, sizeof(xPaymentAssistant[floor].strName));
        
//LJW 카운터 점원 삭제
		//계산대 점원
		xPaymentAssistant[floor].state = PAYMENTASSISTANT_STATE_WAIT;
		if(xPayMentInfo[floor].codeNum >= 0)
		{
			xPaymentAssistant[floor].x = xPayMentInfo[floor].x-1;
			xPaymentAssistant[floor].y = xPayMentInfo[floor].y;
			xPaymentAssistant[floor].PayMentPosX = xPayMentInfo[floor].x+1;
			xPaymentAssistant[floor].PayMentPosY = xPayMentInfo[floor].y;
			xPaymentAssistant[floor].moveType = MOVETYPE_XPLUS;
			xPaymentAssistant[floor].nowDelay=0;
			xPaymentAssistant[floor].nowFrame=0;
		}
		else
		{
			xPaymentAssistant[floor].x = xPayMentInfo[floor].x;
			xPaymentAssistant[floor].y = xPayMentInfo[floor].y-1;
			xPaymentAssistant[floor].PayMentPosX = xPayMentInfo[floor].x;
			xPaymentAssistant[floor].PayMentPosY = xPayMentInfo[floor].y+1;
			xPaymentAssistant[floor].moveType = MOVETYPE_YPLUS;
			xPaymentAssistant[floor].nowDelay=0;
			xPaymentAssistant[floor].nowFrame=0;
		}
		
		xPaymentAssistant[floor].xFace.faceType = FACE_TYPE_NORMAL;
		xPaymentAssistant[floor].xFace.faceAnyCnt = 0;
	}
	
	xStaff.staffSlot[0] = STAFF_SLOT_PAYMENTASSISTANT_1F;
	xStaff.staffSlot[1] = STAFF_SLOT_SHOPASSISTANT1_1F;
	xStaff.staffSlot[2] = STAFF_SLOT_PAYMENTASSISTANT_2F;
	xStaff.staffSlot[3] = STAFF_SLOT_SHOPASSISTANT1_2F;
	xStaff.staffSlot[4] = STAFF_SLOT_PAYMENTASSISTANT_3F;
	xStaff.staffSlot[5] = STAFF_SLOT_SHOPASSISTANT1_3F;	
}


//npc생성
void makeShopNpc(int worldMapNpcCode,int optionType,int optionNum)
{
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_8_INTERIOR_MAKENPC:
			optionType = DONT;
			break;
		}
	}
	
	for(int i=0;i<SHOPNPCMAX;i++)
	{
		if(xShopNpc[i].state == SHOPNPC_STATE_DONT)
		{
			xShopNpc[i].floor = 0;
			xShopNpc[i].floorTarget = 0;
			xShopNpc[i].genDer = xWorldMapNpc[worldMapNpcCode].genDer;
			
			xShopNpc[i].isFloorExit = FALSE;
			
			xShopNpc[i].isSitEventBox = FALSE;
			xShopNpc[i].payMentEvent = FALSE;
			xShopNpc[i].isSitEventFail = FALSE;
			
			xShopNpc[i].isChair = FALSE;
			xShopNpc[i].inOutCnt = 0;
						
			xShopNpc[i].state = SHOPNPC_STATE_MOVE;
			xShopNpc[i].nowDelay = 0;
			xShopNpc[i].nowFrame = 0;
			
			xShopNpc[i].isFittingRoom = xWorldMapNpc[worldMapNpcCode].isFittingRoom;
						
			
			
			xShopNpc[i].actInteriorNum = DONT;
			
			
			
			
			
			xShopNpc[i].x = xWorldMapNpc[worldMapNpcCode].x;
			xShopNpc[i].y = xWorldMapNpc[worldMapNpcCode].y;
			
			xShopNpc[i].x_befor = xWorldMapNpc[worldMapNpcCode].x;
			xShopNpc[i].y_befor = xWorldMapNpc[worldMapNpcCode].y;
			
			xShopNpc[i].xSpeak.state = SPEAK_STATE_DONT;
			
			xShopNpc[i].modelNum = xWorldMapNpc[worldMapNpcCode].modelNum;
			
			
			for(int ge=0;ge<GLITTEREFFMAXSUB;ge++)
				memcpy(&xShopNpc[i].xGlitterEff[ge], &xWorldMapNpc[worldMapNpcCode].xGlitterEff[ge], sizeof(xShopNpc[i].xGlitterEff[ge]));
			
			memcpy(&xShopNpc[i].xEmoticon, &xWorldMapNpc[worldMapNpcCode].xEmoticon, sizeof(xShopNpc[i].xEmoticon));
			memcpy(&xShopNpc[i].xFace,&xWorldMapNpc[worldMapNpcCode].xFace,sizeof(xShopNpc[i].xFace));
			memcpy(&xShopNpc[i].xF,&xWorldMapNpc[worldMapNpcCode].xF,sizeof(xShopNpc[i].xF));
			
			xShopNpc[i].drawX = 0;
			xShopNpc[i].drawY = 0;
			xShopNpc[i].type = xWorldMapNpc[worldMapNpcCode].type;
			//xShopNpc[i].speed = 3;
			xShopNpc[i].speed = xWorldMapNpc[worldMapNpcCode].speed;
			
			xShopNpc[i].buyItemCode = DONT;
			xShopNpc[i].isTrendEvent = FALSE;
			
			///////////AI변경부분///////////
			
			int totalTrendTempFloor = 0;
			int trendTempFloor[5];
			
			int totalSexTempFloor[2];
			totalSexTempFloor[0] = 0;
			totalSexTempFloor[1] = 0;
			int sexTempFloor[2][5];
			
			int totalHangerTempFloor = 0;
			int hangerTempFloor[5];
			
			int totalAccessoryTempFloor = 0;
			int accessoryTempFloor[5];
			
			int totalSellTempFloor = 0;
			int sellTempFloor[5];
			
			int totalShowWindowFloor = 0;
			int showWindowFloor[5];
						
			
			for(int t=0;t<xMap.totalFloor;t++)
			{
				resetSellTableInfo(t);
				if(xSell.totalTrend[t] > 0)
					trendTempFloor[totalTrendTempFloor++] = t;
				
				if(xSell.totalSex[0][t] > 0)
					sexTempFloor[0][totalSexTempFloor[0]++] = t;

				if(xSell.totalSex[1][t] > 0)
					sexTempFloor[1][totalSexTempFloor[1]++] = t;
								
				if(xSell.totalHanger[t] > 0)
					hangerTempFloor[totalHangerTempFloor++] = t;
				
				if(xSell.totalAccessory[t] > 0)
					accessoryTempFloor[totalAccessoryTempFloor++] = t;
								
				if(xSell.totalSell[t] > 0)
					sellTempFloor[totalSellTempFloor++] = t;
				
				if(xFitting.totalShowWindow[t] > 0)
				{
					showWindowFloor[totalShowWindowFloor++] = t;
				}
			}
			
			
			
			
			if(totalTrendTempFloor > 0 && ranDom(0, 100) < 50)
			{
				if(totalTrendTempFloor > 0)
					xShopNpc[i].floorTarget = trendTempFloor[ranDom(0, totalTrendTempFloor-1)];
				else
					xShopNpc[i].floorTarget = 0;
				
				
				xShopNpc[i].buyType20 = BUY_TYPE20_TREND;
			}
			else
			{
				int ranDomTemp = ranDom(0, 100);
				
				if(totalShowWindowFloor > 0 && ranDomTemp< 20)
				{
					xShopNpc[i].buyType20 = BUY_TYPE20_FITTING;
					xShopNpc[i].floorTarget = showWindowFloor[ranDom(0, totalShowWindowFloor-1)];
										
				}
				else if(ranDomTemp< 50)
				{
					//성별형
					xShopNpc[i].buyType20 = BUY_TYPE20_SEX;
					if(xShopNpc[i].genDer == 0)
					{
						if(ranDom(0, 100)<80)
						{
							//여자의상구매
							xShopNpc[i].buySex20 = 0;
						}
						else
						{
							//남자의상구매
							xShopNpc[i].buySex20 = 1;
						}
					}
					else
					{
						if(ranDom(0, 100)<80)
						{
							//남자의상구매
							xShopNpc[i].buySex20 = 1;
						}
						else
						{
							//여자의상구매
							xShopNpc[i].buySex20 = 0;
						}
					}
										
					if(totalSexTempFloor[xShopNpc[i].buySex20] > 0)
						xShopNpc[i].floorTarget = sexTempFloor[xShopNpc[i].buySex20][ranDom(0, totalSexTempFloor[xShopNpc[i].buySex20]-1)];
					else
						xShopNpc[i].floorTarget = 0;
										
				}
				else if(ranDomTemp< 80)
				{
					xShopNpc[i].buyType20 = BUY_TYPE20_SELLTABLE;
					//카테고리형
					
					if(totalAccessoryTempFloor > 0 && ranDom(0, 100)<50)
					{
						//잡화
						xShopNpc[i].buyFtype = ranDom(F_TYPE_SHOES, F_TYPE_ACCECSSORY);
					}
					else
					{
						//의상형
						xShopNpc[i].buyFtype = ranDom(F_TYPE_OUTER, F_TYPE_ONEPIECE);
					}
					
					
					switch(xShopNpc[i].buyFtype)
					{
					case F_TYPE_OUTER:
					case F_TYPE_TOP:
					case F_TYPE_BOTTOM:
					case F_TYPE_ONEPIECE:
						if(totalHangerTempFloor > 0)
							xShopNpc[i].floorTarget = hangerTempFloor[ranDom(0, totalHangerTempFloor-1)];
						else
							xShopNpc[i].floorTarget = 0;
						break;
					case F_TYPE_SHOES:
					case F_TYPE_BAG:
					case F_TYPE_ACCECSSORY:
						if(totalAccessoryTempFloor > 0)
							xShopNpc[i].floorTarget = accessoryTempFloor[ranDom(0, totalAccessoryTempFloor-1)];
						else
							xShopNpc[i].floorTarget = 0;
						break;
					}
				}
				
				else
				{
					xShopNpc[i].buyType20 = BUY_TYPE20_RANDOM;
					//랜덤형
					if(totalSellTempFloor > 0)
						xShopNpc[i].floorTarget = sellTempFloor[ranDom(0, totalSellTempFloor-1)];
					else
						xShopNpc[i].floorTarget = 0;
				}
			}
												
			//유행
			xShopNpc[i].isBuyAct[NPC_BUYACT_SELLTABLE] = FALSE;
			xShopNpc[i].isBuyAct[NPC_BUYACT_TREND] = FALSE;
			xShopNpc[i].isBuyAct[NPC_BUYACT_FITTING] = FALSE;
			xShopNpc[i].isBuyAct[NPC_BUYACT_FITTINGROOM] = FALSE;
			xShopNpc[i].isBuyAct[NPC_BUYACT_PAYMENT] = FALSE;
						
			xShopNpc[i].isPorter_woman = FALSE;
			xShopNpc[i].isPorter_man = FALSE;
			
			xShopNpc[i].porterOptionType = optionType;
			//옵션번호
			//0:여자,1:남자
			//2:여자,3:여자
			//4:남자,5:남자
			
//			if(optionType != 1 && optionType != 3 && optionType != 5)
//				setModelNpcSpeakWelCome(0,TRUE);
			
			int npcSetSlot=0;
			switch(optionType)
			{
			case 0:		//0 여남(여자)
				xShopNpc[i].buyType20 = BUY_TYPE20_RANDOM;
				xShopNpc[i].isPorter_woman = TRUE;
				makeShopNpc(worldMapNpcCode, 1, i);
				break;
			case 2:		//2 여여(여자)
				xShopNpc[i].buyType20 = BUY_TYPE20_RANDOM;
				xShopNpc[i].isPorter_woman = TRUE;
				makeShopNpc(worldMapNpcCode, 3, i);
				break;
			case 4:		//4 남남(남자)
				xShopNpc[i].buyType20 = BUY_TYPE20_RANDOM;
				xShopNpc[i].isPorter_woman = TRUE;
				makeShopNpc(worldMapNpcCode, 5, i);
				break;
			case 1:		//1 여남(남자)
				xShopNpc[i].buyType20 = BUY_TYPE20_RANDOM;
				xShopNpc[i].isPorter_man = TRUE;
				xShopNpc[i].porterNpcNum = optionNum;
				xShopNpc[optionNum].porterNpcNum = i;
										
				xShopNpc[i].genDer = 1;
				npcSetSlot = ranDom(0, xNpcSet.totalNum[xShopNpc[i].genDer]-1);
				
				for(int k=0;k<16;k++)
				{
					xShopNpc[i].xF.code[k] = DONT;
					xShopNpc[i].xF.code[k] = DONT;
				}
				
				for(int k=0;k<7;k++)
				{
					if(xNpcSet.code[xNpcSet.slot[xShopNpc[i].genDer][npcSetSlot]][k] != DONT)
					{
						setMapData(xNpcSet.code[xNpcSet.slot[xShopNpc[i].genDer][npcSetSlot]][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
						xShopNpc[i].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
					}
				}				
				xShopNpc[i].xFace.hairNum = xNpcSet.hairCode[xShopNpc[i].genDer][ranDom(0, xNpcSet.hairTotalNum[xShopNpc[i].genDer]-1)];					
				break;
			case 3:		//3 여여(여자)
				xShopNpc[i].buyType20 = BUY_TYPE20_RANDOM;
				xShopNpc[i].isPorter_man = TRUE;
				xShopNpc[i].porterNpcNum = optionNum;
				xShopNpc[optionNum].porterNpcNum = i;
				
				xShopNpc[i].genDer = 0;
				npcSetSlot = ranDom(0, xNpcSet.totalNum[xShopNpc[i].genDer]-1);
				
				for(int k=0;k<16;k++)
				{
					xShopNpc[i].xF.code[k] = DONT;
					xShopNpc[i].xF.code[k] = DONT;
				}
				
				for(int k=0;k<7;k++)
				{
					if(xNpcSet.code[xNpcSet.slot[xShopNpc[i].genDer][npcSetSlot]][k] != DONT)
					{
						setMapData(xNpcSet.code[xNpcSet.slot[xShopNpc[i].genDer][npcSetSlot]][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
						xShopNpc[i].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
					}
				}
				xShopNpc[i].xFace.hairNum = xNpcSet.hairCode[xShopNpc[i].genDer][ranDom(0, xNpcSet.hairTotalNum[xShopNpc[i].genDer]-1)];
				break;
			case 5:		//5 남남(남자)
				xShopNpc[i].buyType20 = BUY_TYPE20_RANDOM;
				xShopNpc[i].isPorter_man = TRUE;
				xShopNpc[i].porterNpcNum = optionNum;
				xShopNpc[optionNum].porterNpcNum = i;
										
				setSpeak(&xShopNpc[i].xSpeak, "둘러보지 말고 아무거나 사고 나가자", SPEAKFRAMEMAX);
					
				xShopNpc[i].genDer = 1;
				int npcSetSlot = ranDom(0, xNpcSet.totalNum[xShopNpc[i].genDer]-1);
				
				for(int k=0;k<16;k++)
				{
					xShopNpc[i].xF.code[k] = DONT;
					xShopNpc[i].xF.code[k] = DONT;
				}
				
				for(int k=0;k<7;k++)
				{
					if(xNpcSet.code[xNpcSet.slot[xShopNpc[i].genDer][npcSetSlot]][k] != DONT)
					{
						setMapData(xNpcSet.code[xNpcSet.slot[xShopNpc[i].genDer][npcSetSlot]][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
						xShopNpc[i].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
					}
				}
				xShopNpc[i].xFace.hairNum = xNpcSet.hairCode[xShopNpc[i].genDer][ranDom(0, xNpcSet.hairTotalNum[xShopNpc[i].genDer]-1)];
				break;
			}
			
			if(xShopNpc[i].isPorter_man == TRUE)
			{
				setNpcStatePorterMove(i,xShopNpc[i].porterNpcNum);
			}
			else
			{
				if(xShopNpc[i].floor < xShopNpc[i].floorTarget)
				{
					//올라가기로
					setNpcStateFloorUp(i, xShopNpc[i].floor);
				}
				else
					initShopNpcMove(i);
			}
			break;
		}
	}
}



void initShopNpcMove(int npcNum)
{
	int endX;
	int endY;
	//비여 있는 의자 체크
	int chairNum = DONT;
	
	int sitRandom = ranDom(0, 100);
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_8_INTERIOR_MAKENPC:
			sitRandom = 0;
			break;
		}
	}
	
	if(sitRandom < 50)
	{
		if(xChairInfo[xShopNpc[npcNum].floor].totalNum > 0)
		{
			chairNum = ranDom(0,xChairInfo[xShopNpc[npcNum].floor].totalNum-1);
		}
	}
		
	
	
	if(xShopNpc[npcNum].isChair == TRUE )
	{
		xShopNpc[npcNum].isChair = FALSE;
	}
	else if(chairNum != DONT && xChairInfo[xShopNpc[npcNum].floor].npcCode[chairNum] == DONT)
	{
		xShopNpc[npcNum].isChair = TRUE;
		xShopNpc[npcNum].chairNum = chairNum;
		xChairInfo[xShopNpc[npcNum].floor].npcCode[chairNum] = npcNum;
										
		if(xChairInfo[xShopNpc[npcNum].floor].interiorCode[chairNum] > 0)
		{
			xShopNpc[npcNum].actXpos = xChairInfo[xShopNpc[npcNum].floor].x[chairNum]+1;
			xShopNpc[npcNum].actYpos = xChairInfo[xShopNpc[npcNum].floor].y[chairNum];
			xShopNpc[npcNum].actLook = MOVETYPE_XPLUS;
		}
		else
		{
			xShopNpc[npcNum].actXpos = xChairInfo[xShopNpc[npcNum].floor].x[chairNum];
			xShopNpc[npcNum].actYpos = xChairInfo[xShopNpc[npcNum].floor].y[chairNum]+1;
			xShopNpc[npcNum].actLook = MOVETYPE_YPLUS;
		}
		
		endX = xShopNpc[npcNum].actXpos;
		endY = xShopNpc[npcNum].actYpos;
		if(xMap.shopData[xShopNpc[npcNum].floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
		{
			xShopNpc[npcNum].isChair = FALSE;
			xChairInfo[xShopNpc[npcNum].floor].npcCode[chairNum] = DONT;
		}
	}

	
	if(xShopNpc[npcNum].isPorter_woman == TRUE || xShopNpc[npcNum].isPorter_man == TRUE)
	{
		if(xShopNpc[npcNum].isChair == TRUE)
		{
			xShopNpc[npcNum].isChair = FALSE;
			xChairInfo[xShopNpc[npcNum].floor].npcCode[chairNum] = DONT;
		}
	}
	

	if(xShopNpc[npcNum].isChair == FALSE)
	{
		switch(xShopNpc[npcNum].buyType20)
		{
		case BUY_TYPE20_SEX:
			xShopNpc[npcNum].buyAct = NPC_BUYACT_SELLTABLE;
			resetSellTableInfo(xShopNpc[npcNum].floor);
			if(xSell.totalSex[xShopNpc[npcNum].buySex20][xShopNpc[npcNum].floor] == 0)
			{
				xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
				xShopNpc[npcNum].anyCnt = 0;
								
				shopNpcErrSpeak(npcNum);
			}
			else
			{
				xShopNpc[npcNum].actInteriorNum = xSell.tableNumSlot_Sex[xShopNpc[npcNum].buySex20][xShopNpc[npcNum].floor][ranDom(0, xSell.totalSex[xShopNpc[npcNum].buySex20][xShopNpc[npcNum].floor]-1)];
				
				setMapData(xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.rever == 0)
				{
					xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + 1;
					xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
					xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
					
				}
				else
				{
					xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
					xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + 1;
					xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
				}
				endX = xShopNpc[npcNum].actXpos;
				endY = xShopNpc[npcNum].actYpos;
				if(xMap.shopData[xShopNpc[npcNum].floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
				{
					xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
					xShopNpc[npcNum].anyCnt = 0;
					setSpeak(&xShopNpc[npcNum].xSpeak, "길이 막혔네(4)", SPEAKFRAMEMAX);
				}
			}
			break;
		case BUY_TYPE20_SELLTABLE:
			xShopNpc[npcNum].buyAct = NPC_BUYACT_SELLTABLE;
			switch(xShopNpc[npcNum].buyFtype)
			{
			case F_TYPE_OUTER:
			case F_TYPE_TOP:
			case F_TYPE_BOTTOM:
			case F_TYPE_ONEPIECE:
				resetSellTableInfo(xShopNpc[npcNum].floor);
				//아무 옷걸이나 찾아서 연결시켜주자
				if(xSell.totalHanger[xShopNpc[npcNum].floor] == 0)
				{
					xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
					xShopNpc[npcNum].anyCnt = 0;
					
					shopNpcErrSpeak(npcNum);
				}
				else
				{
					xShopNpc[npcNum].actInteriorNum = xSell.tableNumSlot_Hanger[xShopNpc[npcNum].floor][ranDom(0, xSell.totalHanger[xShopNpc[npcNum].floor]-1)];
					
					setMapData(xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
					if(xMap.rever == 0)
					{
						xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + 1;
						xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
						xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
						
					}
					else
					{
						xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
						xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + 1;
						xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
					}
					endX = xShopNpc[npcNum].actXpos;
					endY = xShopNpc[npcNum].actYpos;
					if(xMap.shopData[xShopNpc[npcNum].floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
					{
						xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
						xShopNpc[npcNum].anyCnt = 0;
						setSpeak(&xShopNpc[npcNum].xSpeak, "길이 막혔네(4)", SPEAKFRAMEMAX);
					}
				}
				break;
			case F_TYPE_SHOES:
			case F_TYPE_BAG:
			case F_TYPE_ACCECSSORY:
				//아무 잡화 찾아서 연결시켜주자
				if(xSell.totalAccessory[xShopNpc[npcNum].floor] == 0)
				{
					xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
					xShopNpc[npcNum].anyCnt = 0;
					shopNpcErrSpeak(npcNum);
				}
				else
				{
					xShopNpc[npcNum].actInteriorNum = xSell.tableNumSlot_Accessory[xShopNpc[npcNum].floor][ranDom(0, xSell.totalAccessory[xShopNpc[npcNum].floor]-1)];
					setMapData(xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
					if(xMap.rever == 0)
					{
						xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + 1;
						xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
						xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
					}
					else
					{
						xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
						xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + 1;
						xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
					}
					endX = xShopNpc[npcNum].actXpos;
					endY = xShopNpc[npcNum].actYpos;
					
					if(xMap.shopData[xShopNpc[npcNum].floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
					{
						xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
						xShopNpc[npcNum].anyCnt = 0;
						//setSpeak(&xShopNpc[npcNum].xSpeak, "진열대길찾기ERR_(개발확인)", SPEAKFRAMEMAX);
					}
				}
				break;
			}
			break;
		case BUY_TYPE20_TREND:
			xShopNpc[npcNum].buyAct = NPC_BUYACT_TREND;
			resetSellTableInfo(xShopNpc[npcNum].floor);
			if(xSell.totalTrend[xShopNpc[npcNum].floor] == 0)
			{
				xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
				xShopNpc[npcNum].anyCnt = 0;
				shopNpcErrSpeak(npcNum);
			}
			else
			{
				xShopNpc[npcNum].actInteriorNum = xSell.tableNumSlot_Trend[xShopNpc[npcNum].floor][ranDom(0, xSell.totalTrend[xShopNpc[npcNum].floor]-1)];
				setMapData(xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.rever == 0)
				{
					xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + 1;
					xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
					xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
				}
				else
				{
					xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
					xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + 1;
					xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
				}
				endX = xShopNpc[npcNum].actXpos;
				endY = xShopNpc[npcNum].actYpos;
				
				if(xMap.shopData[xShopNpc[npcNum].floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
				{
					xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
					xShopNpc[npcNum].anyCnt = 0;
					//setSpeak(&xShopNpc[npcNum].xSpeak, "길찾기ERR_(개발확인)", SPEAKFRAMEMAX);
				}
			}
			break;
		case BUY_TYPE20_FITTING:
			xShopNpc[npcNum].buyAct = NPC_BUYACT_FITTING;
			resetShowWindowInfo();
			if(xFitting.totalShowWindow[xShopNpc[npcNum].floor] == 0)
			{
				xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
				xShopNpc[npcNum].anyCnt = 0;
				
				shopNpcErrSpeak(npcNum);
			}
			else
			{
				int showWindowNum;
				showWindowNum = xFitting.showWindowSlotNum[xShopNpc[npcNum].floor][ranDom(0, xFitting.totalShowWindow[xShopNpc[npcNum].floor]-1)];
				
				if(xShowWindowInfo[xShopNpc[npcNum].floor][showWindowNum].interiorCode > 0)
				{
					xShopNpc[npcNum].actXpos = xShowWindowInfo[xShopNpc[npcNum].floor][showWindowNum].x+2;
					xShopNpc[npcNum].actYpos = xShowWindowInfo[xShopNpc[npcNum].floor][showWindowNum].y;
					xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
				}
				else
				{
					xShopNpc[npcNum].actXpos = xShowWindowInfo[xShopNpc[npcNum].floor][showWindowNum].x;
					xShopNpc[npcNum].actYpos = xShowWindowInfo[xShopNpc[npcNum].floor][showWindowNum].y+2;
					xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
				}
				
				endX = xShopNpc[npcNum].actXpos;
				endY = xShopNpc[npcNum].actYpos;
				
				
				if(xMap.shopData[xShopNpc[npcNum].floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
				{
					xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
					xShopNpc[npcNum].anyCnt = 0;
					//setSpeak(&xShopNpc[npcNum].xSpeak, "마네킹길찾기ERR_(개발확인)", SPEAKFRAMEMAX);
				}
				else if(setAstar(xShopNpc[npcNum].x-xMap.shopPointX, xShopNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,xShopNpc[npcNum].floor) == TRUE)
				{
					///쇼윈도 등록
					xShopNpc[npcNum].actInteriorNum = showWindowNum;
					xShowWindowInfo[xShopNpc[npcNum].floor][showWindowNum].state = SHOWWINDOWINFO_STATE_PLAY;
				}
				endX = xShopNpc[npcNum].actXpos;
				endY = xShopNpc[npcNum].actYpos;
			}
			break;
		case BUY_TYPE20_RANDOM:
			xShopNpc[npcNum].buyAct = NPC_BUYACT_SELLTABLE;
			resetSellTableInfo(xShopNpc[npcNum].floor);
			//아무 옷걸이나 찾아서 연결시켜주자
			if(xSell.totalSell[xShopNpc[npcNum].floor] == 0)
			{
				xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
				xShopNpc[npcNum].anyCnt = 0;
				shopNpcErrSpeak(npcNum);
			}
			else
			{
				xShopNpc[npcNum].actInteriorNum = xSell.tableNumSlot_Sell[xShopNpc[npcNum].floor][ranDom(0, xSell.totalSell[xShopNpc[npcNum].floor]-1)];
				
				setMapData(xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.rever == 0)
				{
					xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + 1;
					xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
					xShopNpc[npcNum].actLook = MOVETYPE_XMINUS;
					
				}
				else
				{
					xShopNpc[npcNum].actXpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
					xShopNpc[npcNum].actYpos = xSellTableInfo[xShopNpc[npcNum].floor][xShopNpc[npcNum].actInteriorNum].y + 1;
					xShopNpc[npcNum].actLook = MOVETYPE_YMINUS;
				}
				endX = xShopNpc[npcNum].actXpos;
				endY = xShopNpc[npcNum].actYpos;
				if(xMap.shopData[xShopNpc[npcNum].floor][MAP_TYPE_OBJ][endX-xMap.shopPointX][endY-xMap.shopPointY] == TRUE)
				{
					xShopNpc[npcNum].state = SHOPNPC_STATE_ASTARERR;
					xShopNpc[npcNum].anyCnt = 0;
					setSpeak(&xShopNpc[npcNum].xSpeak, "길이 막혔네(4)", SPEAKFRAMEMAX);
				}
			}

			break;
		}
	}
	
	//처음만들어졌을때 기본값
	if(xWorldMap.doorCode >= 0)
		xShopNpc[npcNum].moveType = MOVETYPE_XPLUS;
	else
		xShopNpc[npcNum].moveType = MOVETYPE_YPLUS;
	
	//새위치 탐색
	if(xShopNpc[npcNum].state == SHOPNPC_STATE_MOVE)
	{
		if(setAstar(xShopNpc[npcNum].x-xMap.shopPointX, xShopNpc[npcNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,xShopNpc[npcNum].floor) == FALSE)
		{
			xShopNpc[npcNum].state = SHOPNPC_STATE_WAIT;
			xShopNpc[npcNum].anyCnt = 0;
			setSpeak(&xShopNpc[npcNum].xSpeak, "길이 막혀있네!", SPEAKFRAMEMAX);			
		}
		else
		{
			xShopNpc[npcNum].bestTotalCnt = xAstar.totalCnt;
			xShopNpc[npcNum].bestNowCnt = 0;
			for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
			{
				xShopNpc[npcNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
				xShopNpc[npcNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
			}
			
			
			//다음이동
			if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_XPLUS;
			else if(xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestX[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_XMINUS;
			else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] < xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_YPLUS;
			else if(xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt] > xShopNpc[npcNum].bestY[xShopNpc[npcNum].bestNowCnt+1])
				xShopNpc[npcNum].moveType = MOVETYPE_YMINUS;
		}
	}
}

void resetChair(int floor)
{
	xChairInfo[floor].totalNum = 0;
	for(int x=xMap.shopPointX;x<xMap.shopPointX+xMap.shopPointW;x++)
	{
		for(int y=xMap.shopPointY;y<xMap.shopPointY+xMap.shopPointH;y++)
		{
			if(xMap.data[floor][MAP_TYPE_OBJ][x][y] != 0)
			{
				setMapData(xMap.data[floor][MAP_TYPE_OBJ][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xObj.xObjData[xMap.type][xMap.listNum].isChair == TRUE)
				{
					for(int w=0;w < xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
					{
						for(int h=0;h < xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
						{
							xChairInfo[floor].interiorCode[xChairInfo[floor].totalNum] = xMap.data[floor][MAP_TYPE_OBJ][x][y];
							xChairInfo[floor].x[xChairInfo[floor].totalNum] = x+w;
							xChairInfo[floor].y[xChairInfo[floor].totalNum] = y+h;
							xChairInfo[floor].npcCode[xChairInfo[floor].totalNum] = DONT;
							if(++xChairInfo[floor].totalNum >= CHAIRMAX-1)
								return;
						}
					}
				}
			}
		}
	}
}

int getChair(int floor,int x,int y)
{
	int result = DONT;
	for(int i=0;i<xChairInfo[floor].totalNum;i++)
	{
		if(x == xChairInfo[floor].x[i]
		   && y == xChairInfo[floor].y[i])
		{
			result = i;
			break;
		}
	}
	
	return result;
}

void resetFittingRoomInfo(int floor)
{
	xFittingRoomInfo[floor].totalNumAll = 0;
	xFittingRoomInfo[floor].totalNumWait = 0;
	
		
	for(int x=xMap.shopPointX;x<xMap.shopPointX+xMap.shopPointW;x++)
	{
		for(int y=xMap.shopPointY;y<xMap.shopPointY+xMap.shopPointH;y++)
		{
			if(xMap.data[floor][MAP_TYPE_OBJ][x][y] != 0)
			{
				setMapData(xMap.data[floor][MAP_TYPE_OBJ][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_FITTINGROOM)
				{
					xFittingRoomInfo[floor].codeNum[xFittingRoomInfo[floor].totalNumAll] = xMap.data[floor][MAP_TYPE_OBJ][x][y];
					xFittingRoomInfo[floor].x[xFittingRoomInfo[floor].totalNumAll] = x;
					xFittingRoomInfo[floor].y[xFittingRoomInfo[floor].totalNumAll] = y;
										
					//세명이상 붙어있는 피팅룸은 제외시키자
					if(xFittingRoomInfo[floor].state[xFittingRoomInfo[floor].totalNumAll] ==  FITTINGROOMINFO_STATE_WAIT && xFittingRoomInfo[floor].isAstarErr[xFittingRoomInfo[floor].totalNumAll] == FALSE)
					{
						xFittingRoomInfo[floor].waitSlot[xFittingRoomInfo[floor].totalNumWait++] = xFittingRoomInfo[floor].totalNumAll;
					}
					xFittingRoomInfo[floor].totalNumAll++;
				}
			}				
		}
	}
}



void resetPayMentInfo(int floor)
{
	xPayMentInfo[floor].codeNum = 0;
	for(int x=xMap.shopPointX;x<xMap.shopPointX+xMap.shopPointW;x++)
	{
		for(int y=xMap.shopPointY;y<xMap.shopPointY+xMap.shopPointH;y++)
		{
			if(xMap.data[floor][MAP_TYPE_OBJ][x][y] != 0)
			{
				setMapData(xMap.data[floor][MAP_TYPE_OBJ][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_PAYMENT)
				{
					xPayMentInfo[floor].codeNum = xMap.data[floor][MAP_TYPE_OBJ][x][y];
					xPayMentInfo[floor].key = xMap.dataKey[floor][MAP_TYPE_OBJ][x][y];
					xPayMentInfo[floor].x = x;
					xPayMentInfo[floor].y = y;
				}
			}
		}
	}
	
		
	//피팅룸검색
	//등록정보
	//아이템코드
	//위치정보
	//사용여부 확인
}

void resetShowWindowInfo()
{
	M_Boolean checkHelpInof;

	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		xFitting.totalShowWindow[floor] = 0;
		for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
		{
			checkHelpInof = xShowWindowInfo[floor][ss].isFitting;
			if(xShowWindowInfo[floor][ss].isUse == TRUE)
			{
				if(xShowWindowInfo[floor][ss].state == SHOWWINDOWINFO_STATE_WAIT)
					xFitting.showWindowSlotNum[floor][xFitting.totalShowWindow[floor]++] = ss;
	
				xShowWindowInfo[floor][ss].isFitting = FALSE;
				for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
				{
					if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
					{
						xShowWindowInfo[floor][ss].isFitting = TRUE;
						break;
					}
				}
			}
			
			int code = xShowWindowInfo[floor][ss].interiorCode < 0?-xShowWindowInfo[floor][ss].interiorCode:xShowWindowInfo[floor][ss].interiorCode;
			int type = code/1000;
			int listNum = code%1000;
			
			if(checkHelpInof == FALSE && xShowWindowInfo[floor][ss].isFitting == TRUE)
			{
				sprintf(strTempS, "%s 피팅으로 인해 선호도 %d%%증가",xObj.xObjData[type][listNum].strName,1);
				//setHelpInfoCenter(strTempS);
			}
			else if(checkHelpInof == TRUE && xShowWindowInfo[floor][ss].isFitting == FALSE)
			{
				sprintf(strTempS, "%s 피팅된 의상이 없어 선호도 -%d%%감소",xObj.xObjData[type][listNum].strName,1);
				//setHelpInfoCenter(strTempS);
			}
		}
	}
}

//LJW 월드맵에서 돌아다니는 NPC생성
int makeWorldMapNpc(int x,int y,int type,float speed,int moveType)
{
	int resultNpcNum;
	resultNpcNum = DONT;
		
	////////////////////게임NPC생성 조건확인/////////////////////
	M_Boolean isGameNpcShow[6];
	for(int i=0;i<6;i++)
		isGameNpcShow[i] = FALSE;
	
	for(int i=0;i<WORLDMAPNPCMAX;i++)
	{
		if(xWorldMapNpc[i].state != WORLDMAPNPC_STATE_DONT)
		{
			if(xWorldMapNpc[i].xFace.hairNum >= 2000)
			{
				isGameNpcShow[xWorldMapNpc[i].xFace.hairNum%1000] = TRUE;
			}
		}
	}
	
	for(int i=0;i<SHOPNPCMAX;i++)
	{
		if(xShopNpc[i].state != SHOPNPC_STATE_DONT)
		{
			if(xShopNpc[i].xFace.hairNum >= 2000)
			{
				isGameNpcShow[xShopNpc[i].xFace.hairNum%1000] = TRUE;
			}
		}
	}
	
	int totalGameNpc = 0;
	int gameNpcSlot[6];
	for(int i=0;i<6;i++)
	{
		if(isGameNpcShow[i] == FALSE)
			gameNpcSlot[totalGameNpc++] = i;
	}
	////////////////////게임NPC생성 조건확인/////////////////////END
	for(int i=0;i<WORLDMAPNPCMAX;i++)
	{
		if(xWorldMapNpc[i].state == WORLDMAPNPC_STATE_DONT)
		{
			xWorldMapNpc[i].state = WORLDMAPNPC_STATE_MAKE;
			xWorldMapNpc[i].actingType = NPC_ACT_STOP;
			
			xWorldMapNpc[i].xFace.faceNum = 0;
			xWorldMapNpc[i].xFace.faceType = FACE_TYPE_NORMAL;
			xWorldMapNpc[i].xFace.faceAnyCnt = 0;
						
			xWorldMapNpc[i].isDie = FALSE;
			xWorldMapNpc[i].dieCnt = 0;
				
			xWorldMapNpc[i].xF.isInFitting = ranDom(0, 100) < 50 ? FALSE:TRUE;
			for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
			{
				xWorldMapNpc[i].xF.code[ff] = DONT;
			}
							
			if(totalGameNpc > 0 && ranDom(0, 100)<20)
			{
				int npcNum = gameNpcSlot[ranDom(0, totalGameNpc-1)];;
				xWorldMapNpc[i].xFace.hairNum = 2000+npcNum;
				xWorldMapNpc[i].xFace.faceNum = 2000+npcNum;
				xWorldMapNpc[i].xFace.faceType = FACE_TYPE_NORMAL;
				xWorldMapNpc[i].xFace.faceAnyCnt = 0;
				xWorldMapNpc[i].isFittingRoom = FALSE;
								
				setMapData((F_TYPE_ONEPIECE*1000)+17+npcNum);
				xWorldMapNpc[i].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = (xMap.type*1000)+xMap.listNum;
				setMapData((F_TYPE_SHOES*1000)+40+npcNum);
				xWorldMapNpc[i].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = (xMap.type*1000)+xMap.listNum;
			}
			else
			{
								
				
				xWorldMapNpc[i].genDer = ranDom(0, 100) < 75?0:1;
								
				if(ranDom(0, 99) < xModelSkill.bonusPer[MODELSKILL_TYPE_SEX_MAN])
					xWorldMapNpc[i].genDer = 1;
				else if(ranDom(0, 99) < xModelSkill.bonusPer[MODELSKILL_TYPE_SEX_WOMAN])
					xWorldMapNpc[i].genDer = 0;
					
				
				int npcSetSlot = ranDom(0, xNpcSet.totalNum[xWorldMapNpc[i].genDer]-1);
				
				xWorldMapNpc[i].isFittingRoom = xNpcSet.isFittingRoom[npcSetSlot];
				for(int k=0;k<7;k++)
				{
					if(xNpcSet.code[xNpcSet.slot[xWorldMapNpc[i].genDer][npcSetSlot]][k] != DONT)
					{
						setMapData(xNpcSet.code[xNpcSet.slot[xWorldMapNpc[i].genDer][npcSetSlot]][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
						xWorldMapNpc[i].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
					}
				}
				xWorldMapNpc[i].xFace.hairNum = xNpcSet.hairCode[xWorldMapNpc[i].genDer][ranDom(0, xNpcSet.hairTotalNum[xWorldMapNpc[i].genDer]-1)];
				xWorldMapNpc[i].xFace.faceNum = 0;
			}
			
			xWorldMapNpc[i].xEmoticon.state = EMOTICON_STATE_DONT;
			
			for(int ge=0;ge<GLITTEREFFMAXSUB;ge++)
				xWorldMapNpc[i].xGlitterEff[ge].state = GLITTEREFF_STATE_DONT;
			
			xWorldMapNpc[i].anyCnt = 0;
			xWorldMapNpc[i].x = x;
			xWorldMapNpc[i].y = y;
			xWorldMapNpc[i].drawX = 0;
			xWorldMapNpc[i].drawY = 0;
			xWorldMapNpc[i].type = type;
			xWorldMapNpc[i].moveTurnCnt = 0;
			xWorldMapNpc[i].actingNum = 2;
			xWorldMapNpc[i].buyItemCode = DONT;
			resultNpcNum = i;
						
			//샵에서 나갈때
			if(xMap.data[0][5][x][y] == 4)
				xWorldMapNpc[i].moveType = MOVETYPE_YMINUS;
			else
			{
				xWorldMapNpc[i].isInShop = FALSE;


				xWorldMapNpc[i].moveType = moveType;
			}
			xWorldMapNpc[i].speed = speed;
			break;
		}
	}
	return resultNpcNum;
}


void drawWorldMapUi()
{
	setUiHide();
    getUiShowType();
    
    
    if(xWorldMap.uiShowType == 2 && xWorldMap.isFriendMap == false)
    {
        if(xWorldMap.state == WORLDMAP_STATE_PLAY)
        {
            //루루팡 막기 KBY
//            subTemp[XPOS] = 285-5-imgLuluPang.w/2;
//            subTemp[YPOS] = lcdH-51;
//            
//            drawImage(&imgLuluPang, subTemp[XPOS], subTemp[YPOS], 0, 0, imgLuluPang.w/2, imgLuluPang.h, VH);
//            
//            xLuluPang.xTouchStart.wPos = imgLuluPang.w/2;
//            xLuluPang.xTouchStart.hPos = imgLuluPang.h;
//            xLuluPang.xTouchStart.xPos = subTemp[XPOS]-xLuluPang.xTouchStart.wPos/2;
//            xLuluPang.xTouchStart.yPos = subTemp[YPOS]-xLuluPang.xTouchStart.hPos/2;
        }
        
        //LJW 월드맵 CEO다이어리 막기
//        drawEventQuestUi(107,178);
		//LJW 월드맵 새로고침 막기
//        drawMyShopRefresh(cx,lcdH-30);
		//LJW 월드맵 헬프리스트 UI막기
//        drawHelpListUi(lcdW-58,lcdH-178);
		
		//LJW 월드맵 라이벌샵 및 클럽 아이콘 막기
//        if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//        {
//            rivalUi(285,lcdH-51);
//            if(xClub.isOpen == true)
//                drawClubUi(174,lcdH-51);
//        }
		
//		//LJW 월드맵 마일리지샵 아이콘
//        if(xMileageShop.isOpen == true && xWorldMap.state == WORLDMAP_STATE_PLAY)
//        {
//			//월드맵 루루팡 아이콘
//			subTemp[XPOS] = 285-5-imgLuluPang.w/2;
//			subTemp[YPOS] = lcdH-51;
//			
//			drawImage(&imgLuluPang, subTemp[XPOS], subTemp[YPOS], 0, 0, imgLuluPang.w/2, imgLuluPang.h, VH);
//			
//			xLuluPang.xTouchStart.wPos = imgLuluPang.w/2;
//			xLuluPang.xTouchStart.hPos = imgLuluPang.h;
//			xLuluPang.xTouchStart.xPos = subTemp[XPOS]-xLuluPang.xTouchStart.wPos/2;
//			xLuluPang.xTouchStart.yPos = subTemp[YPOS]-xLuluPang.xTouchStart.hPos/2;
//			
//
//            subTemp[XPOS] = 174;
//            subTemp[YPOS] = lcdH-58;
//			
//			subTemp[XPOS] = imgW(imgSwitchWorldMapUi2)/2;
//			subTemp[YPOS] = lcdH-imgH(imgSwitchWorldMapUi2)/2+5;
//            
//            int maxPrice = 10000*MILEAGEPRICEUNIT;
//            
//            if(xSaveTemp.mileage.oriData < 10000*MILEAGEPRICEUNIT)
//            {
//                xMileageShop.selectCategoryTab = MILEAGESHOP_CATEGORY_10000;
//                maxPrice = 10000*MILEAGEPRICEUNIT;
//            }
//            else if(xSaveTemp.mileage.oriData < 20000*MILEAGEPRICEUNIT)
//            {
//                xMileageShop.selectCategoryTab = MILEAGESHOP_CATEGORY_20000;
//                maxPrice = 20000*MILEAGEPRICEUNIT;
//            }
//            else
//            {
//                xMileageShop.selectCategoryTab = MILEAGESHOP_CATEGORY_30000;
//                maxPrice = 30000*MILEAGEPRICEUNIT;
//            }
//            
//            setMileageShopCategory();
//            xMileageUi.totalNum = xMileageShop.totalList;
//            for(int k=0;k<xMileageShop.totalList;k++)
//            {
//                xMileageUi.listCode[k] = xMileageShop.listCode[k];
//            }
//            
//            
//            int uiXX = 0;
//            
//            switch(xMileageUi.state)
//            {
//                case MILEAGEUI_STATE_WAIT:
//                    xMileageUi.flowTime += xGame.prcSec;
//                    if(xMileageUi.flowTime > 3)
//                    {
//                        xMileageUi.state = MILEAGEUI_STATE_NEXT;
//                        xMileageUi.anyCnt = 0;
//                    }
//                    break;
//                case MILEAGEUI_STATE_NEXT:
//                    switch(++xMileageUi.anyCnt)
//                {
//                    case 1:uiXX = 0;break;
//                    case 2:uiXX = -1;break;
//                    case 3:uiXX = -1;break;
//                    case 4:uiXX = -1;break;
//                    case 5:uiXX = -2;break;
//                    case 6:uiXX = -2;break;
//                    case 7:uiXX = -3;break;
//                    case 8:uiXX = -4;break;
//                    case 9:uiXX = -6;break;
//                    case 10:uiXX = -8;break;
//                    case 11:uiXX = -10;break;
//                    case 12:uiXX = -15;break;
//                    case 13:uiXX = -25;break;
//                    case 14:uiXX = -52;break;
//                    case 15:uiXX = -58;break;
//                    case 16:uiXX = -62;break;
//                    case 17:uiXX = -64;break;
//                    case 18:uiXX = -66;break;
//                    case 19:uiXX = -68;break;
//                    case 20:uiXX = -69;break;
//                    case 21:uiXX = -70;break;
//                    case 22:uiXX = -70;break;
//                    case 23:uiXX = -71;break;
//                    case 24:uiXX = -71;break;
//                    case 25:uiXX = -71;break;
//                    case 26:uiXX = -72;break;
//                    case 27:
//                        xMileageUi.state = MILEAGEUI_STATE_WAIT;
//                        xMileageUi.flowTime = 0;
//                        if(++xMileageUi.selectSlot >= xMileageShop.totalList)
//                            xMileageUi.selectSlot = 0;
//                        break;
//                }
//                    break;
//            }
//            
//            int nowCode = xMileageUi.listCode[xMileageUi.selectSlot];
//            int nextCode = 0;
//            
//            if(xMileageUi.selectSlot+1 >= xMileageShop.totalList)
//                nextCode = xMileageUi.listCode[0];
//            else
//                nextCode = xMileageUi.listCode[xMileageUi.selectSlot+1];
//            
//            
//            gSetClip(true, subTemp[XPOS]-5-36, subTemp[YPOS]-4-36, 72, 72);
//            sprintf(xDownLoader.strTempUrl, "%s/Product/thumbnail_%d.png",xNetData.strCdnUrl,nowCode);
//            drawProfilePhotoUrl(subTemp[XPOS]-6+uiXX, subTemp[YPOS]-5,xDownLoader.strTempUrl);
//			
//            sprintf(xDownLoader.strTempUrl, "%s/Product/thumbnail_%d.png",xNetData.strCdnUrl,nextCode);
//            drawProfilePhotoUrl(subTemp[XPOS]-6+72+uiXX, subTemp[YPOS]-5,xDownLoader.strTempUrl);
//            gSetClip(false, subTemp[XPOS]-5-36, subTemp[YPOS]-4-36, 72, 72);
//            drawImage(&imgMileageUi[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMileageUi[0].w, imgMileageUi[0].h, VH);
//			
//            long long mileageTemp0 = xSaveTemp.mileage.oriData;
//            long long wTemp0 = imgMileageUi[1].w;
//            
//            subTemp[WPOS] = wTemp0*mileageTemp0/maxPrice;
//            
//            
//            if(subTemp[WPOS] > imgMileageUi[1].w)
//                subTemp[WPOS] = imgMileageUi[1].w;
//            
//            drawImage(&imgMileageUi[1], subTemp[XPOS]-32, subTemp[YPOS]+42, 0, 0, subTemp[WPOS], imgMileageUi[1].h, VL);
//            
//            gSetColor(255, 255, 255);
//            setCommaNum(strTempS, maxPrice/MILEAGEPRICEUNIT);
//			
//            setFontSize(12);
//            gDrawString(subTemp[XPOS]+48, subTemp[YPOS]+20, strTempS, VH);
//            setFontSize(11);
//            
//            xMileageUi.xTouchMenu.wPos = 80;
//            xMileageUi.xTouchMenu.hPos = 80;
//            xMileageUi.xTouchMenu.xPos = subTemp[XPOS]-xMileageUi.xTouchMenu.wPos/2;
//            xMileageUi.xTouchMenu.yPos = subTemp[YPOS]-xMileageUi.xTouchMenu.hPos/2;
//			
//            /*
//             gSetColor(255, 0, 0);
//             setAlpha(100);
//             fillRect(xMileageUi.xTouchMenu.xPos, xMileageUi.xTouchMenu.yPos, xMileageUi.xTouchMenu.wPos, xMileageUi.xTouchMenu.hPos);
//             setAlpha(ALPHA_MAX);
//             */
//        }
//        
        
        //LJW 월드맵 핫딜 아이콘 막기
//        subTemp[XPOS] = 259;
//        subTemp[YPOS] = 175;
//        if(xWorldMap.isFriendMap == false && xSaveTemp.lv.oriData >= xHotDeal.openLv && xHotDeal.isOpen == true && (xHotDeal.isReset == true || xHotDeal.remainTime > 0))
//        {
//            
//            
//            drawImage(&imgHotDealUi[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgHotDealUi[0].w, imgHotDealUi[0].h, VH);
//            
//            xHotDeal.xTouchUi.wPos = imgHotDealUi[0].w;
//            xHotDeal.xTouchUi.hPos = imgHotDealUi[0].h;
//            xHotDeal.xTouchUi.xPos = subTemp[XPOS]-xHotDeal.xTouchUi.wPos/2;
//            xHotDeal.xTouchUi.yPos = subTemp[YPOS]-xHotDeal.xTouchUi.hPos/2;
//            
//            
//            int dx = subTemp[XPOS];
//            int dy = subTemp[YPOS]-30;
//            
//            
//            int hh = (xHotDeal.remainTime/60/60);
//            int mm = (xHotDeal.remainTime/60)%60;
//            int ss = xHotDeal.remainTime%60;
//            
//            
//            drawNum(&imgHotDealUi[2], dx-5-26, dy, hh/10, 0, VH);
//            drawNum(&imgHotDealUi[2], dx+5-26, dy, hh%10, 0, VH);
//            drawImage(&imgHotDealUi[1], dx-14+1, dy+1, 0, 0, imgHotDealUi[1].w, imgHotDealUi[1].h, VH);    //:
//            drawNum(&imgHotDealUi[2], dx-5, dy, mm/10, 0, VH);
//            drawNum(&imgHotDealUi[2], dx+5, dy, mm%10, 0, VH);
//            drawImage(&imgHotDealUi[1], dx+14, dy+1, 0, 0, imgHotDealUi[1].w, imgHotDealUi[1].h, VH);    //:
//            drawNum(&imgHotDealUi[2], dx-5+26, dy, ss/10, 0, VH);
//            drawNum(&imgHotDealUi[2], dx+5+26, dy, ss%10, 0, VH);
//            
//            
//            /*
//             gSetColor(255, 0, 0);
//             setAlpha(100);
//             fillRect(xHotDeal.xTouchUi.xPos, xHotDeal.xTouchUi.yPos, xHotDeal.xTouchUi.wPos, xHotDeal.xTouchUi.hPos);
//             setAlpha(ALPHA_MAX);
//             */
//        }
    }
	
	//LJW 월드맵 아뮬렛 아이콘 막기
//    if(xWorldMap.isFriendMap == false)
//    {
//        if(xWorldMap.uiShowType == 2)
//            drawAmuletUi(384,64);
//    }
//    else
//    {
//        drawAmuletUi(lcdW-268,86);
//    }
	//명성도와 경험치 표시 삭제 KBY
//	if(xWorldMapUi.isPlayerInfo == TRUE)
//	{
//		if(xWorldMapUi.playInfoTime+5 < xCalendar.nowTime)
//			xWorldMapUi.isPlayerInfo = FALSE;
//		
//		subTemp[XPOS] = -1;
//		subTemp[YPOS] = 92;
//		
//		drawPacker(imgProfile0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProfile0), imgH(imgProfile0), TL);
//				
//		xProfile.xTouchClr.xPos = subTemp[XPOS];
//		xProfile.xTouchClr.yPos = subTemp[YPOS];
//		xProfile.xTouchClr.wPos = imgW(imgProfile0);
//		xProfile.xTouchClr.hPos = imgH(imgProfile0);
//		
//		
////		 gSetColor(255, 0, 0);
////		 setAlpha(100);
////		 fillRect(xProfile.xTouchClr.xPos, xProfile.xTouchClr.yPos, xProfile.xTouchClr.wPos, xProfile.xTouchClr.hPos);
////		 setAlpha(ALPHA_MAX);
//		 
//				
//		gDrawStringBold(subTemp[XPOS]+98, subTemp[YPOS]+79, "경험치", VH, 255, 182, 54, 44, 27, 26);		
//		sprintf(strTempS, "%d/%d",xSaveTemp.exp.oriData,xBalanceData.expMax[xSaveTemp.lv.oriData].oriData);
//		gDrawStringBold(subTemp[XPOS]+98, subTemp[YPOS]+106, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 87, 66, 56);
//		
//		gDrawStringBold(subTemp[XPOS]+255, subTemp[YPOS]+79, "명성도", VH, 255, 111, 199, 44, 27, 26);
//		sprintf(strTempS, "%d/%d",xSaveTemp.fame.oriData,xBalanceData.fameMax[xSaveTemp.lv.oriData]);
//		gDrawStringBold(subTemp[XPOS]+255, subTemp[YPOS]+106, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 87, 66, 56);
//		
//		
//		/*
//		 gSetColor(255, 0, 0);
//		 setAlpha(100);
//		 fillRect(xProfile.xTouchTrend.xPos, xProfile.xTouchTrend.yPos, xProfile.xTouchTrend.wPos, xProfile.xTouchTrend.hPos);
//		 setAlpha(ALPHA_MAX);
//		 */
//	}
	
		
	if(xWorldMap.isFriendMap == TRUE)
	{
		subTemp[XPOS] = 390;
		subTemp[YPOS] = 64;
		int wPos = 0;
		if(xFriendData[xFriendMap.selectDataSlotNum].isKakao == TRUE)
		{
			xFriendData[xFriendMap.selectDataSlotNum].isKakaoHelp = getIsKakaoHelp(xFriendData[xFriendMap.selectDataSlotNum].strKakaoId);
						
			drawPacker(imgKakaoHelpBtn, subTemp[XPOS], subTemp[YPOS], imgW(imgKakaoHelpBtn)/2*(xFriendData[xFriendMap.selectDataSlotNum].isKakaoHelp == TRUE?0:1), 0, imgW(imgKakaoHelpBtn)/2, imgH(imgKakaoHelpBtn), VH);
			if(xWorldMap.isKakaoFriendMap_NET == TRUE)
			{
				xGame.isRotate = TRUE;
				xGame.rotateNum = 360-(gameCnt%120)*3;
				drawPacker(imgLoadingIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
				xGame.isRotate = FALSE;
			}
			xWorldMap.xTouchFriendMapUiKakao.wPos = imgW(imgKakaoHelpBtn)/2;
			xWorldMap.xTouchFriendMapUiKakao.hPos = imgH(imgKakaoHelpBtn);
			xWorldMap.xTouchFriendMapUiKakao.xPos = subTemp[XPOS]-xWorldMap.xTouchFriendMapUiKakao.wPos/2;
			xWorldMap.xTouchFriendMapUiKakao.yPos = subTemp[YPOS]-xWorldMap.xTouchFriendMapUiKakao.hPos/2;
			wPos += 115;
		}
						
		if(xWorldMap.isAppReview == FALSE)
		{
			subTemp[XPOS] = 390+wPos;
			subTemp[YPOS] = 60;
			drawPacker(imgCashGiftIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCashGiftIcon), imgH(imgCashGiftIcon), VH);
			
			xCashGift.xTouchWorldMapIcon.wPos = imgW(imgCashGiftIcon);
			xCashGift.xTouchWorldMapIcon.hPos = imgH(imgCashGiftIcon);
			xCashGift.xTouchWorldMapIcon.xPos = subTemp[XPOS]-xCashGift.xTouchWorldMapIcon.wPos/2;
			xCashGift.xTouchWorldMapIcon.yPos = subTemp[YPOS]-xCashGift.xTouchWorldMapIcon.hPos/2;
			wPos += 165;
		}
        
        if(xFriendData[xFriendMap.selectDataSlotNum].isPM == false)
        {
            subTemp[XPOS] = 390+wPos;
            subTemp[YPOS] = 30;
            drawImage(&imgLoginTime, subTemp[XPOS], subTemp[YPOS], 0, 0, imgLoginTime.w, imgLoginTime.h, VH);
            
            gSetColor(255, 255, 255);
            setFontSize(16);
            
            
            //sellEndTime
            int loginTime = xFriendData[xFriendMap.selectDataSlotNum].loginFlowTime;
            int day;
            int hh;
            int mm;
            
            
            //시
            hh = loginTime/60/60;
            day = hh/24;
            //분
            mm = loginTime/60%60;
            
            if(day > 0)
                sprintf(strTempS, "%d일전",day);
            else if(hh > 0)
                sprintf(strTempS, "%d시간전",hh);
            else
                sprintf(strTempS, "%d분전",mm+1);
            
            gDrawString(subTemp[XPOS]+28, subTemp[YPOS]-5, strTempS, VH);
            setFontSize(11);
            
            
            
            if(xFriendData[xFriendMap.selectDataSlotNum].isAdd == true)
            {
                drawImage(&imgFriendDelBtn2, cx, lcdH-27, 0, 0, imgFriendDelBtn2.w, imgFriendDelBtn2.h, VH);
                
                xNoticeWorldMap.xTouchFriendDel.wPos = imgFriendDelBtn2.w;
                xNoticeWorldMap.xTouchFriendDel.hPos = imgFriendDelBtn2.h;
                xNoticeWorldMap.xTouchFriendDel.xPos = cx-xNoticeWorldMap.xTouchFriendDel.wPos/2;
                xNoticeWorldMap.xTouchFriendDel.yPos = lcdH-27-xNoticeWorldMap.xTouchFriendDel.hPos/2;
            }
            
            
            
            
            
            wPos += imgLoginTime.w+20;
        }
        
		
        
		//LJW 월드맵 모델스킬 막기
//		if(xModelSkill.totalWorldMapUiSlot > 0 && xWorldMap.isFriendMap == false)
//		{
//			subTemp[XPOS] = 390+wPos;
//			subTemp[YPOS] = 64;
//			
//			drawPacker(imgWorldMapModelSkillIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapModelSkillIcon), imgH(imgWorldMapModelSkillIcon), VH);
//			
//			
//			xModelSkill.xTouchWorldMapUiIcon.wPos = imgW(imgWorldMapModelSkillIcon);
//			xModelSkill.xTouchWorldMapUiIcon.hPos = imgH(imgWorldMapModelSkillIcon);
//			xModelSkill.xTouchWorldMapUiIcon.xPos = subTemp[XPOS]-xModelSkill.xTouchWorldMapUiIcon.wPos/2;
//			xModelSkill.xTouchWorldMapUiIcon.yPos = subTemp[YPOS]-xModelSkill.xTouchWorldMapUiIcon.hPos/2;
//			
//			
//			drawPacker(imgOrderNumBox, subTemp[XPOS]+30, subTemp[YPOS]-20, 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
//			gSetColor(255, 255, 255);
//			sprintf(strTempS, "%d",xModelSkill.totalWorldMapUiSlot);
//			gDrawString(subTemp[XPOS]+30, subTemp[YPOS]-22, strTempS, VH);
//			
//			
//			if(xModelSkill.isWorldMapUiInfoBoxOpen == TRUE)
//			{
//				
//				if(xModelSkill.selectWorldMapUiSlot >= xModelSkill.totalWorldMapUiSlot)
//					xModelSkill.selectWorldMapUiSlot = 0;
//				
//				subTemp[XPOS] -= 78;
//				subTemp[YPOS] += 112;
//				drawPacker(imgWorldMapModelSkillInfoBox, subTemp[XPOS]+49, subTemp[YPOS]+52, 0, 0, imgW(imgWorldMapModelSkillInfoBox), imgH(imgWorldMapModelSkillInfoBox), VH);
//				int skillIconImgNum = 0;
//				
//				for(int i=0;i<9;i++)
//				{
//					drawPacker(imgSkillSlot, subTemp[XPOS]+((i%3)*50), subTemp[YPOS]+((i/3)*50), 0, 0, imgW(imgSkillSlot), imgH(imgSkillSlot), VH);
//					
//					if(i < xModelSkill.totalWorldMapUiSlot)
//					{
//						
//						skillIconImgNum = imgSkillIcon0+xModelSkill.slotWorldMapUiSlot[i];
//						drawPacker(skillIconImgNum, subTemp[XPOS]+((i%3)*50), subTemp[YPOS]+((i/3)*50), 0, 0, imgW(skillIconImgNum), imgH(skillIconImgNum), VH);
//						
//						if(xModelSkill.selectWorldMapUiSlot == i)
//						{
//							drawPacker(imgSkillSelect, subTemp[XPOS]-1+((i%3)*50), subTemp[YPOS]-1+((i/3)*50), 0, 0, imgW(imgSkillSelect), imgH(imgSkillSelect), VH);
//						}
//					}
//					else
//						drawPacker(imgSkillSlotEmpty, subTemp[XPOS]+((i%3)*50), subTemp[YPOS]+((i/3)*50), 0, 0, imgW(imgSkillSlotEmpty), imgH(imgSkillSlotEmpty), VH);
//					
//					xModelSkill.xTouchWorldMapUiSlot[i].wPos = 24;	//정교한 선택을 위해
//					xModelSkill.xTouchWorldMapUiSlot[i].hPos = 24;
//					xModelSkill.xTouchWorldMapUiSlot[i].xPos = subTemp[XPOS]+((i%3)*50)-xModelSkill.xTouchWorldMapUiSlot[i].wPos/2;
//					xModelSkill.xTouchWorldMapUiSlot[i].yPos = subTemp[YPOS]+((i/3)*50)-xModelSkill.xTouchWorldMapUiSlot[i].hPos/2;
//				}
//				
//				gSetColor(255, 255, 255);
//				setFontSize(8);
//				getSprintfSKillInfo(strTempS,DONT,xModelSkill.slotWorldMapUiSlot[xModelSkill.selectWorldMapUiSlot],1);
//				setPopupStringLine(strTempS,lcdW);
//				
//				int fontGab = 20;
//				
//				switch(xPopup.totalLine)
//				{
//					case 2:
//						fontGab = 20;
//						break;
//					case 3:
//					case 4:
//						fontGab = 16;
//						break;
//				}
//				
//				for(int li=0;li<xPopup.totalLine;li++)
//					gDrawString(subTemp[XPOS]+49, subTemp[YPOS]+148-(fontGab/2*(xPopup.totalLine-1))+(fontGab*li), xPopup.strTextLine[li], VH);
//				
//				setFontSize(11);
//			}
//		}
		
		subTemp[XPOS] = 60;
		subTemp[YPOS] = 60;
		drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xFriendMap.selectDataSlotNum].userNum, 100);
		
		subTemp[XPOS] = -1;
		subTemp[YPOS] = 0;
		drawPacker(imgWorldMapLv4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapLv4), imgH(imgWorldMapLv4), TL);


		subTemp[XPOS] = 132;
		subTemp[YPOS] = 38;
		gSetColor(133, 80, 56);
		sprintf(strTempS, "Lv.%d",xFriendData[xFriendMap.selectDataSlotNum].lv);
		
		gDrawString(subTemp[XPOS], subTemp[YPOS]-8, strTempS, VL);
		setFontSize(14);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+17, xFriendData[xFriendMap.selectDataSlotNum].strNickName, VL);
		setFontSize(11);
		
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 90;
		drawPacker(imgMailSex, subTemp[XPOS]+10, subTemp[YPOS]+47, imgW(imgMailSex)/2*xFriendData[xFriendMap.selectDataSlotNum].sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);
		xGame.isReSizeDraw = FALSE;
		gSetColor(82, 49, 38);
		getSprintfArea(strTempS,xFriendData[xFriendMap.selectDataSlotNum].area);
		sprintf(strTempB, "%d세 / %s",(xCalendar.nowYear+1)-xFriendData[xFriendMap.selectDataSlotNum].age,strTempS);
		gDrawString(subTemp[XPOS]+30, subTemp[YPOS]+47, strTempB, VL);
				
		subTemp[XPOS] = lcdW-104;
		subTemp[YPOS] = 25;
		drawPacker(imgWorldMapLv6, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapLv6), imgH(imgWorldMapLv6), VH);
		
		
		if(xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT] > 0)
		{
			drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+60, subTemp[YPOS], (xSaveTemp.socialHelpCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_HELPCOUNT])*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100, -3, VR);
		}
		else
		{
			if(xSaveTemp.socialHelpCnt < 0)
				drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+60, subTemp[YPOS], 0, -3, VR);
			else
				drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+60, subTemp[YPOS], (xSaveTemp.socialHelpCnt)*(100+xAmulet.buff[JEWELBUFF_TYPE_SOCIAL])/100, -3, VR);
		}
		
		
		drawPacker(imgWorldMapLv7, subTemp[XPOS]+72, subTemp[YPOS], 0, 0, imgW(imgWorldMapLv7)/2, imgH(imgWorldMapLv7), VH);
		
		
		subTemp[XPOS] = lcdW-104;
		subTemp[YPOS] = 120;
		
		
		if(xWorldMap.isFriendMapSocialInfo == TRUE)
			drawPacker(imgFriendMapInfo0, subTemp[XPOS]-204, subTemp[YPOS]-15, 0, 0, imgW(imgFriendMapInfo0), imgH(imgFriendMapInfo0), VH);
		
		drawPacker(imgWorldMapLv3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapLv3), imgH(imgWorldMapLv3), VH);
		
		
		xWorldMap.xTouchFriendMapSocialInfo.wPos = imgW(imgWorldMapLv3);
		xWorldMap.xTouchFriendMapSocialInfo.hPos = imgH(imgWorldMapLv3);
		xWorldMap.xTouchFriendMapSocialInfo.xPos = subTemp[XPOS]-xWorldMap.xTouchFriendMapSocialInfo.wPos/2;
		xWorldMap.xTouchFriendMapSocialInfo.yPos = subTemp[YPOS]-xWorldMap.xTouchFriendMapSocialInfo.hPos/2;
		
		
		
		gSetColor(255, 0, 0);
		
		gSetClip(true,0, subTemp[YPOS]-20-40, lcdW, 80);
		drawFittingF(subTemp[XPOS]-48,subTemp[YPOS]-20, xSaveTemp.socialItem[0], 50);
		
		if(xSaveTemp.socialItem[1] != DONT)
			drawFittingF(subTemp[XPOS]+44,subTemp[YPOS]-20, xSaveTemp.socialItem[1], 50);
		gSetClip(false,0, 0, lcdW, lcdH);
		
				
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			if(xWorldMap.isFriendMap == TRUE)
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_27_HELP_SOCIALINFO:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}
		}
				
		drawNumPacker(imgWorldMapNum0, subTemp[XPOS]-48, subTemp[YPOS]+8, xSave.socialCntHanger, -3, VR);
		drawPacker(imgWorldMapLv7, subTemp[XPOS]-48+12, subTemp[YPOS]+8, imgW(imgWorldMapLv7)/2, 0, imgW(imgWorldMapLv7)/2, imgH(imgWorldMapLv7), VH);
		
		if(xSaveTemp.socialItem[1] != DONT)
		{
			drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+44, subTemp[YPOS]+8, xSave.socialCntAccessory, -3, VR);
			drawPacker(imgWorldMapLv7, subTemp[XPOS]+44+12, subTemp[YPOS]+8, imgW(imgWorldMapLv7)/2, 0, imgW(imgWorldMapLv7)/2, imgH(imgWorldMapLv7), VH);
		}
		
		

		
		for(int i=0;i<3;i++)
		{
			if(xFriendData[xFriendMap.selectDataSlotNum].isAdd == TRUE)
				drawPacker(imgGiftShopPage, subTemp[XPOS]+4+(i*26), subTemp[YPOS]+40, (i < xFriendData[xFriendMap.selectDataSlotNum].socialCount?imgW(imgGiftShopPage)/2:0), 0, imgW(imgGiftShopPage)/2, imgH(imgGiftShopPage), VH);
			else
				drawPacker(imgGiftShopPage, subTemp[XPOS]+4+(i*26), subTemp[YPOS]+40, 0, 0, imgW(imgGiftShopPage)/2, imgH(imgGiftShopPage), VH);
		}
		
		subTemp[XPOS] = lcdW-56-98;
		subTemp[YPOS] = 225;
		drawPacker(imgFriendMapIcon, subTemp[XPOS], subTemp[YPOS], imgW(imgFriendMapIcon)/2, 0, imgW(imgFriendMapIcon)/2, imgH(imgFriendMapIcon)/2, VH);
		
		xTouchFriendMapModel.wPos = imgW(imgFriendMapIcon)/2;
		xTouchFriendMapModel.hPos = imgW(imgFriendMapIcon)/2;
		xTouchFriendMapModel.xPos = subTemp[XPOS]-xTouchFriendMapModel.wPos/2;
		xTouchFriendMapModel.yPos = subTemp[YPOS]-xTouchFriendMapModel.hPos/2;
		
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_18_FRIENDMODEL_MENUTOUCH:
				if(xWorldMap.state == WORLDMAP_STATE_PLAY)
				{
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				}
				break;
			}
		}
		
		
		subTemp[XPOS] = lcdW-56;
		subTemp[YPOS] = 225;
		drawPacker(imgFriendMapIcon, subTemp[XPOS], subTemp[YPOS], imgW(imgFriendMapIcon)/2, imgH(imgFriendMapIcon)/2, imgW(imgFriendMapIcon)/2, imgH(imgFriendMapIcon)/2, VH);
		
		xTouchFriendMapMail2.wPos = imgW(imgFriendMapIcon)/2;
		xTouchFriendMapMail2.hPos = imgW(imgFriendMapIcon)/2;
		xTouchFriendMapMail2.xPos = subTemp[XPOS]-xTouchFriendMapMail2.wPos/2;
		xTouchFriendMapMail2.yPos = subTemp[YPOS]-xTouchFriendMapMail2.hPos/2;
		
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
				case TUTO_17_MAIL_FRIEND:
					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
			}
		}
		
	}
	else
	{
        
		
        getUiShowType();
        
        if(xWorldMap.uiShowType == 2)
        {
            subTemp[XPOS] = 65;
            subTemp[YPOS] = 70;
            drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xNetData.userNum, 100);
            
            
            if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
            {
                switch(xQuestTuto.nowNum)
                {
                case TUTO_24_UI_PHOTO:
                    xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
                    xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
                    break;
                }
            }
            

            
            xProfile.xTouchPhoto.wPos = 100;
            xProfile.xTouchPhoto.hPos = 100;
            xProfile.xTouchPhoto.xPos = subTemp[XPOS] - xProfile.xTouchPhoto.wPos/2;
            xProfile.xTouchPhoto.yPos = subTemp[YPOS] - xProfile.xTouchPhoto.hPos/2;
            
            /*
             gSetColor(255, 0, 0);
             setAlpha(100);
             fillRect(xProfile.xTouchPhoto.xPos, xProfile.xTouchPhoto.yPos, xProfile.xTouchPhoto.wPos, xProfile.xTouchPhoto.hPos);
             setAlpha(ALPHA_MAX);
             */
            
            subTemp[XPOS] = -1;
            subTemp[YPOS] = 0;
            //drawPacker(imgWorldMapLv0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapLv0), imgH(imgWorldMapLv0), TL);
            drawImage(&imgProfile, subTemp[XPOS], subTemp[YPOS], 0, 0, imgProfile.w, imgProfile.h, TL);
            xTouchPlayerInfoIcon.wPos = imgW(imgWorldMapLv0);
            xTouchPlayerInfoIcon.hPos = imgH(imgWorldMapLv0);
            xTouchPlayerInfoIcon.xPos = subTemp[XPOS];
            xTouchPlayerInfoIcon.yPos = subTemp[YPOS];
            
//            subTemp[XPOS] = 132;
//            subTemp[YPOS] = 32;
//            gSetColor(133, 80, 56);
//            sprintf(strTempS,"%s", xSaveTemp.strNickName);
//            setFontSize(14);
//            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
//            setFontSize(11);
            subTemp[XPOS] = 132;
            subTemp[YPOS] = 32;
            gSetColor(101, 48, 150);
            sprintf(strTempS,"%s", xSaveTemp.strNickName);
            setFontSize(16);
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
            setFontSize(11);

            if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
            {
                switch(xQuestTuto.nowNum)
                {
                case TUTO_24_UI_NICKNAME:
                    xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
                    xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
                    break;
                }
            }
            
            subTemp[XPOS] = 208;
            subTemp[YPOS] = 60;
            if(xBalanceData.expMax[xSaveTemp.lv.oriData].oriData == 0)
                initSecurity(&xBalanceData.expMax[xSaveTemp.lv.oriData], 999999);

//            subTemp[WPOS] = imgW(imgWorldMapLv1) * xWorldMap.uiShowExp / xBalanceData.expMax[xSaveTemp.lv.oriData].oriData;
            subTemp[WPOS] = imgBarExp.w * xWorldMap.uiShowExp / xBalanceData.expMax[xSaveTemp.lv.oriData].oriData;
            drawImage(&imgBarEmpty, subTemp[XPOS]-imgBarEmpty.w/2, subTemp[YPOS], 0, 0, imgBarEmpty.w, imgBarEmpty.h, VL);
            drawImage(&imgBarExp, subTemp[XPOS]-imgBarExp.w/2, subTemp[YPOS], 0, 0, subTemp[WPOS], imgBarExp.h, VL);
            
//            drawImage(&imgBarExp, subTemp[XPOS]-imgBarExp.w/2, subTemp[YPOS], 0, 0, imgBarExp.w, imgBarExp.h, VL);
//            drawPacker(imgWorldMapLv1, subTemp[XPOS]-imgW(imgWorldMapLv1)/2, subTemp[YPOS], 0, 0, subTemp[WPOS], imgH(imgWorldMapLv1)/2, VL);
        
            subTemp[XPOS] = 158;
            subTemp[YPOS] = 60;
            
            drawImage(&imgMainExpWarmth, subTemp[XPOS], subTemp[YPOS], 0, 0, imgMainExpWarmth.w/2, imgMainExpWarmth.h, VH);
            
            
            if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
            {
                switch(xQuestTuto.nowNum)
                {
                case TUTO_24_UI_LV:
                    xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
                    xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
                    break;
                }
            }
//            drawPacker(imgWorldMapNum2, subTemp[XPOS]+32, subTemp[YPOS], 0, 0, imgW(imgWorldMapNum2), imgH(imgWorldMapNum2), VH);
//            drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+65, subTemp[YPOS], xSaveTemp.lv.oriData, -3, VR);
            
            subTemp[XPOS] = 122;
            subTemp[YPOS] = 68;
            
            sprintf(strTempS, "%d", xSaveTemp.lv.oriData);
            setFontSizeORI(18);
            gSetColor(255, 255, 255);
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
            setFontSize(11);
            
                
            subTemp[XPOS] = 208;
            subTemp[YPOS] = 82;
            
            subTemp[WPOS] = imgW(imgWorldMapLv1) * xWorldMap.uiShowFame / xBalanceData.fameMax[xSaveTemp.lv.oriData];
            
//            drawPacker(imgWorldMapLv1, subTemp[XPOS]-imgW(imgWorldMapLv1)/2, subTemp[YPOS], 0, imgH(imgWorldMapLv1)/2, subTemp[WPOS], imgH(imgWorldMapLv1)/2, VL);
            
            drawImage(&imgBarEmpty, subTemp[XPOS]-imgBarEmpty.w/2, subTemp[YPOS], 0, 0, imgBarEmpty.w, imgBarEmpty.h, VL);
            drawImage(&imgBarWarmth, subTemp[XPOS]-imgBarWarmth.w/2, subTemp[YPOS], 0, 0, subTemp[WPOS], imgBarWarmth.h, VL);
            //            drawPacker(imgWorldMapLv1, subTemp[XPOS]-imgW(imgWorldMapLv1)/2, subTemp[YPOS], 0, 0, subTemp[WPOS], imgH(imgWorldMapLv1)/2, VL);
            
            subTemp[XPOS] = 158;
            subTemp[YPOS] = 82;
            
            drawImage(&imgMainExpWarmth, subTemp[XPOS], subTemp[YPOS], imgMainExpWarmth.w/2, 0, imgMainExpWarmth.w/2, imgMainExpWarmth.h, VH);
            if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
            {
                switch(xQuestTuto.nowNum)
                {
                case TUTO_24_UI_FAME0:
                case TUTO_24_UI_FAME1:
                    xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
                    xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
                    break;
                }
            }
            
//            drawNumCommaPacker(imgWorldMapNum0, subTemp[XPOS]+65, subTemp[YPOS], xWorldMap.uiShowFame, -3, VR,imgWorldMapNum4,-1);
            if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
            {
                switch(xQuestTuto.nowNum)
                {
                case TUTO_16_FAMESHOW:
                    xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
                    xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
                    break;
                }
            }
            
            
            
            
        }
				
	}
		
	switch(xWorldMap.state)
	{
	case WORLDMAP_STATE_PLAY:
		if(xWorldMap.isFriendMap == FALSE)
		{
			subTemp[XPOS] = lcdW-46;
			subTemp[YPOS] = 90;
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
					case TUTO_24_UI_ETC:
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
						break;
				}
			}
			//LJW 월드맵 선호도 아이콘 막기
//			drawPacker(imgInShopPerIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgInShopPerIcon0), imgH(imgInShopPerIcon0), VH);
//
//			
//			drawPacker(imgWorldMapNum3, subTemp[XPOS]+12, subTemp[YPOS]+15, 0, 0, imgW(imgWorldMapNum3), imgH(imgWorldMapNum3), VH);
//			drawNumPacker(imgWorldMapNum1, subTemp[XPOS]-11, subTemp[YPOS]+15, xInShopPer.inShopPerTotal.oriData, -3, VH);
//			
//			
//
//			if(xInShopPer.isSellTime == TRUE)
//			{
//				int dx = subTemp[XPOS]-40;
//				int dy = subTemp[YPOS]+145;
//				drawPacker(imgInShopPerIcon1, dx, dy+13, 0, 0, imgW(imgInShopPerIcon1), imgH(imgInShopPerIcon1), VH);
//
//				int sellEndTime = getSellEndTime();
//								
//                
//                if(sellEndTime > 0)
//                    addLocalPush(sellEndTime, "진열 중인 의상이 전부 완판됐네요.판매 보상 받으러 빨리오세요~", 1);
//                else
//                    delLocalPush(1);
//                
//				if(sellEndTime == 0)
//				{
//					sprintf(strTempS, "판매완료");
//					gSetColor(34,255,177);
//					gDrawString(dx, dy-55, strTempS, VH);
//				}
//				else
//				{
//                    
//                    
//					//sellEndTime
//					int hh;
//					int mm;
//					int ss;
//					
//					if(sellEndTime < 0)
//						sellEndTime = 0;
//					//시
//					hh = sellEndTime/60/60;
//					//분
//					mm = sellEndTime/60%60;
//					//초
//					ss = sellEndTime%60;
//                   
//                    if(hh > 0)
//                    {
//                        if(hh>9)
//                        {
//                            drawNumPacker(imgInShopPerIcon3, dx-19-9, dy-55, hh/10, 0, VR);
//                            drawNumPacker(imgInShopPerIcon3, dx-19, dy-55, hh%10, 0, VR);
//                            drawPacker(imgInShopPerIcon2, dx-19, dy-55, 0, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//                        }
//                        //sprintf(strTemp, "%d시간 %d%d분",hh,mm/10,mm%10);
//                        else
//                        {
//                            drawNumPacker(imgInShopPerIcon3, dx-19, dy-55, hh%10, 0, VR);
//                            drawPacker(imgInShopPerIcon2, dx-19, dy-55, 0, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//                            
//                        }
//                        drawNumPacker(imgInShopPerIcon3, dx+19-9, dy-55, mm/10, 0, VR);
//                        drawNumPacker(imgInShopPerIcon3, dx+19, dy-55, mm%10, 0, VR);
//                        drawPacker(imgInShopPerIcon2, dx+19, dy-55, imgW(imgInShopPerIcon2)/5, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//                    }
//					else
//					{
//						if(mm == 0)
//							mm = 1;
//						
//						//sprintf(strTemp, "%d분",mm);
//						drawNumPacker(imgInShopPerIcon3, dx, dy-55, mm, 0, VR);
//						drawPacker(imgInShopPerIcon2, dx, dy-55, imgW(imgInShopPerIcon2)/5, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//					}
//																				
//				}
//				
//				if(xInShopPer.inShopPer[INSHOPPER_TYPE_START] == 0)
//				{
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31, imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				else
//				{
//					drawNumPacker(imgInShopPerIcon3, dx+50, dy-31, xInShopPer.inShopPer[INSHOPPER_TYPE_START], 0, VR);
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31, imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				
//				if(xInShopPer.inShopPer[INSHOPPER_TYPE_SELLTABLE] == 0)
//				{
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+20, imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				else
//				{
//					drawNumPacker(imgInShopPerIcon3, dx+50, dy-31+20, xInShopPer.inShopPer[INSHOPPER_TYPE_SELLTABLE], 0, VR);
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+20, imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				if(xInShopPer.inShopPer[INSHOPPER_TYPE_SHOWWINDOW] == 0)
//				{
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*2), imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				else
//				{
//					drawNumPacker(imgInShopPerIcon3, dx+50, dy-31+(20*2), xInShopPer.inShopPer[INSHOPPER_TYPE_SHOWWINDOW], 0, VR);
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*2), imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				
//				if(xInShopPer.inShopPer[INSHOPPER_TYPE_FAME] == 0)
//				{
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*3), imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				else
//				{
//					drawNumPacker(imgInShopPerIcon3, dx+50, dy-31+(20*3), xInShopPer.inShopPer[INSHOPPER_TYPE_FAME], 0, VR);
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*3), imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				if(xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] == 0)
//				{
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*4), imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				else
//				{
//					drawNumPacker(imgInShopPerIcon3, dx+50, dy-31+(20*4), xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF], 0, VR);
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*4), imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				if(xInShopPer.inShopPer[INSHOPPER_TYPE_MODEL] == 0)
//				{
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*5), imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				else
//				{
//					drawNumPacker(imgInShopPerIcon3, dx+50, dy-31+(20*5), xInShopPer.inShopPer[INSHOPPER_TYPE_MODEL], 0, VR);
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*5), imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				if(xInShopPer.inShopPer[INSHOPPER_TYPE_TREND] == 0)
//				{
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*6), imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//				else
//				{
//					drawNumPacker(imgInShopPerIcon3, dx+50, dy-31+(20*6), xInShopPer.inShopPer[INSHOPPER_TYPE_TREND], 0, VR);
//					drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*6), imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//				}
//                
//                
//                
//                if(xRival.buffSell == 0)
//                {
//                    drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*7), imgW(imgInShopPerIcon2)/5*4, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//                }
//                else
//                {
//                    drawNumPacker(imgInShopPerIcon3, dx+50, dy-31+(20*7), xRival.buffSell, 0, VR);
//                    drawPacker(imgInShopPerIcon2, dx+50, dy-31+(20*7), imgW(imgInShopPerIcon2)/5*3, 0, imgW(imgInShopPerIcon2)/5, imgH(imgInShopPerIcon2), VL);
//                }
//			}
//			xTouchWorldMapInShopPerIcon.wPos = imgW(imgInShopPerIcon0);
//			xTouchWorldMapInShopPerIcon.hPos = imgH(imgInShopPerIcon0);
//			xTouchWorldMapInShopPerIcon.xPos = subTemp[XPOS]-xTouchWorldMapInShopPerIcon.wPos/2;
//			xTouchWorldMapInShopPerIcon.yPos = subTemp[YPOS]-xTouchWorldMapInShopPerIcon.hPos/2;
			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_19_INSHOPPERSELECT:
					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				}
			}
									
			
			
			subTemp[XPOS] = lcdW-46-80;
			subTemp[YPOS] = 90;
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
					case TUTO_24_UI_ETC:
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
						break;
				}
			}
			//LJW 월드맵 유행의상 아이콘 막기
//			if(xLock.isLock[LOCK_TYPE_TREND] == TRUE)
//			{
//				drawPacker(imgWorldMapTrendIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapTrendIcon0)/3, imgH(imgWorldMapTrendIcon0), VH);
//			}
//			else
//			{
//				drawPacker(imgWorldMapTrendIcon0, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapTrendIcon0)/3*(1+(xTrend.totalNum > 0?1:0)), 0, imgW(imgWorldMapTrendIcon0)/3, imgH(imgWorldMapTrendIcon0), VH);
//				if(xTrend.totalNum > 0)
//				{
//					int trendImgNum = DONT;
//					switch(gameCnt%50)
//					{
//						case 41:trendImgNum = 0;	break;
//						case 42:trendImgNum = 1;	break;
//						case 43:trendImgNum = 2;	break;
//						case 44:trendImgNum = 3;	break;
//						case 45:trendImgNum = 4;	break;
//					}
//					
//					if(trendImgNum != DONT)
//					{
//						drawPacker(imgWorldMapTrendIcon1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgWorldMapTrendIcon1)/5*trendImgNum, imgW(imgWorldMapTrendIcon1), imgH(imgWorldMapTrendIcon1)/5, VH);
//					}
//					
//					if(xWorldMap.uiHideCnt > 0 && gameCnt%50 == 0)
//					{
//						
//						setModelEff(subTemp[XPOS]-20, subTemp[YPOS]);
//						setModelEff(subTemp[XPOS]+20, subTemp[YPOS]-20);
//						setModelEff(subTemp[XPOS]+13, subTemp[YPOS]+13);
//					}
//				}
//			}
//			
//			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//			{
//				switch(xQuestTuto.nowNum)
//				{
//				case TUTO_21_TRENDICON:
//					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//					{
//						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//					}
//					break;
//				}
//			}
//			
//			
//			
//			xTouchWorldMapTrendIcon.wPos = imgW(imgWorldMapTrendIcon0)/3-26;
//			xTouchWorldMapTrendIcon.hPos = imgH(imgWorldMapTrendIcon0);
//			xTouchWorldMapTrendIcon.xPos = subTemp[XPOS]-xTouchWorldMapTrendIcon.wPos/2;
//			xTouchWorldMapTrendIcon.yPos = subTemp[YPOS]-xTouchWorldMapTrendIcon.hPos/2;
			
			/*
			gSetColor(255, 0, 255);
			setAlpha(100);
			fillRect(xTouchWorldMapTrendIcon.xPos, xTouchWorldMapTrendIcon.yPos, xTouchWorldMapTrendIcon.wPos, xTouchWorldMapTrendIcon.hPos);
			setAlpha(ALPHA_MAX);
			 */
			
			//LJW 월드맵 유행의상 아이콘 막기
//			subTemp[XPOS] = lcdW-46-80-80;
//			subTemp[YPOS] = 90;
//			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//			{
//				switch(xQuestTuto.nowNum)
//				{
//					case TUTO_24_UI_ETC:
//						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
//						break;
//				}
//			}
//			if(xLock.isLock[LOCK_TYPE_ORDER] == TRUE)
//			{
//				drawPacker(imgWorldMapOrderIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapOrderIcon0)/3, imgH(imgWorldMapOrderIcon0), VH);
//			}
//			else
//			{
//				if(xOrder.totalNumList > 0)
//					drawPacker(imgWorldMapOrderIcon0, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapOrderIcon0)/3*2, 0, imgW(imgWorldMapOrderIcon0)/3, imgH(imgWorldMapOrderIcon0), VH);
//				else
//					drawPacker(imgWorldMapOrderIcon0, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapOrderIcon0)/3, 0, imgW(imgWorldMapOrderIcon0)/3, imgH(imgWorldMapOrderIcon0), VH);
//				
//				if(xOrder.totalNumList > 0)
//				{
//					drawPacker(imgOrderNumBox, subTemp[XPOS]+30, subTemp[YPOS]-20, 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
//					gSetColor(255, 255, 255);
//					sprintf(strTempS, "%d",xOrder.totalNumList);
//					gDrawString(subTemp[XPOS]+30, subTemp[YPOS]-22, strTempS, VH);
//					
//					if(xOrder.isNew == TRUE)
//					{
//						drawPacker(imgWorldMapOrderIcon1, subTemp[XPOS]-20, subTemp[YPOS]-15, 0, 0, imgW(imgWorldMapOrderIcon1), imgH(imgWorldMapOrderIcon1), VH);
//						int trendImgNum = DONT;
//						switch(gameCnt%50)
//						{
//							case 41:trendImgNum = 0;	break;
//							case 42:trendImgNum = 1;	break;
//							case 43:trendImgNum = 2;	break;
//							case 44:trendImgNum = 3;	break;
//							case 45:trendImgNum = 4;	break;
//						}
//						
//						if(trendImgNum != DONT)
//						{
//							drawPacker(imgWorldMapOrderIcon2, subTemp[XPOS]-20, subTemp[YPOS]-15, 0, imgH(imgWorldMapOrderIcon2)/5*trendImgNum, imgW(imgWorldMapOrderIcon2), imgH(imgWorldMapOrderIcon2)/5, VH);
//						}
//					}
//				}
//												
//				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//				{
//					switch(xQuestTuto.nowNum)
//					{
//					case TUTO_20_ORDER_MENUTOUCH:
//						if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//						{
//							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//						}
//						break;
//					}
//				}
//			}
//			xOrder.xTouchOrderIcon.wPos = imgW(imgWorldMapOrderIcon0)/3-26;
//			xOrder.xTouchOrderIcon.hPos = imgH(imgWorldMapOrderIcon0);
//			xOrder.xTouchOrderIcon.xPos = subTemp[XPOS]-xOrder.xTouchOrderIcon.wPos/2;
//			xOrder.xTouchOrderIcon.yPos = subTemp[YPOS]-xOrder.xTouchOrderIcon.hPos/2;
			
			/*
			gSetColor(255, 0, 0);
			setAlpha(100);
			fillRect(xOrder.xTouchOrderIcon.xPos, xOrder.xTouchOrderIcon.yPos, xOrder.xTouchOrderIcon.wPos, xOrder.xTouchOrderIcon.hPos);
			setAlpha(ALPHA_MAX);
			 */
			
			
			
			int wPos = 0;
			//LJW 월드맵 모델스킬 막기
//			if(xModelSkill.totalWorldMapUiSlot > 0 && xWorldMap.isFriendMap == false)
//			{
//				subTemp[XPOS] = lcdW-46-80-80-80-wPos;
//				subTemp[YPOS] = 90;
//				drawPacker(imgWorldMapModelSkillIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapModelSkillIcon), imgH(imgWorldMapModelSkillIcon), VH);
//				
//				
//				xModelSkill.xTouchWorldMapUiIcon.wPos = imgW(imgWorldMapModelSkillIcon);
//				xModelSkill.xTouchWorldMapUiIcon.hPos = imgH(imgWorldMapModelSkillIcon);
//				xModelSkill.xTouchWorldMapUiIcon.xPos = subTemp[XPOS]-xModelSkill.xTouchWorldMapUiIcon.wPos/2;
//				xModelSkill.xTouchWorldMapUiIcon.yPos = subTemp[YPOS]-xModelSkill.xTouchWorldMapUiIcon.hPos/2;
//				
//				
//				drawPacker(imgOrderNumBox, subTemp[XPOS]+30, subTemp[YPOS]-20, 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
//				gSetColor(255, 255, 255);
//				sprintf(strTempS, "%d",xModelSkill.totalWorldMapUiSlot);
//				gDrawString(subTemp[XPOS]+30, subTemp[YPOS]-22, strTempS, VH);
//				
//				
//				if(xModelSkill.isWorldMapUiInfoBoxOpen == TRUE)
//				{
//					
//					if(xModelSkill.selectWorldMapUiSlot >= xModelSkill.totalWorldMapUiSlot)
//						xModelSkill.selectWorldMapUiSlot = 0;
//					
//					subTemp[XPOS] -= 78;
//					subTemp[YPOS] += 112;
//					drawPacker(imgWorldMapModelSkillInfoBox, subTemp[XPOS]+49, subTemp[YPOS]+52, 0, 0, imgW(imgWorldMapModelSkillInfoBox), imgH(imgWorldMapModelSkillInfoBox), VH);
//					int skillIconImgNum = 0;
//					
//					for(int i=0;i<9;i++)
//					{
//						drawPacker(imgSkillSlot, subTemp[XPOS]+((i%3)*50), subTemp[YPOS]+((i/3)*50), 0, 0, imgW(imgSkillSlot), imgH(imgSkillSlot), VH);
//						
//						if(i < xModelSkill.totalWorldMapUiSlot)
//						{
//							
//							skillIconImgNum = imgSkillIcon0+xModelSkill.slotWorldMapUiSlot[i];
//							drawPacker(skillIconImgNum, subTemp[XPOS]+((i%3)*50), subTemp[YPOS]+((i/3)*50), 0, 0, imgW(skillIconImgNum), imgH(skillIconImgNum), VH);
//							
//							if(xModelSkill.selectWorldMapUiSlot == i)
//							{
//								drawPacker(imgSkillSelect, subTemp[XPOS]-1+((i%3)*50), subTemp[YPOS]-1+((i/3)*50), 0, 0, imgW(imgSkillSelect), imgH(imgSkillSelect), VH);
//							}
//						}
//						else
//							drawPacker(imgSkillSlotEmpty, subTemp[XPOS]+((i%3)*50), subTemp[YPOS]+((i/3)*50), 0, 0, imgW(imgSkillSlotEmpty), imgH(imgSkillSlotEmpty), VH);
//						
//						xModelSkill.xTouchWorldMapUiSlot[i].wPos = 24;	//정교한 선택을 위해
//						xModelSkill.xTouchWorldMapUiSlot[i].hPos = 24;
//						xModelSkill.xTouchWorldMapUiSlot[i].xPos = subTemp[XPOS]+((i%3)*50)-xModelSkill.xTouchWorldMapUiSlot[i].wPos/2;
//						xModelSkill.xTouchWorldMapUiSlot[i].yPos = subTemp[YPOS]+((i/3)*50)-xModelSkill.xTouchWorldMapUiSlot[i].hPos/2;
//					}
//					
//					gSetColor(255, 255, 255);
//					setFontSize(8);
//					getSprintfSKillInfo(strTempS,DONT,xModelSkill.slotWorldMapUiSlot[xModelSkill.selectWorldMapUiSlot],1);
//					setPopupStringLine(strTempS,lcdW);
//					
//					int fontGab = 20;
//					
//					switch(xPopup.totalLine)
//					{
//						case 2:
//							fontGab = 20;
//							break;
//						case 3:
//						case 4:
//							fontGab = 16;
//							break;
//					}
//					
//					for(int li=0;li<xPopup.totalLine;li++)
//						gDrawString(subTemp[XPOS]+49, subTemp[YPOS]+148-(fontGab/2*(xPopup.totalLine-1))+(fontGab*li), xPopup.strTextLine[li], VH);
//					
//					setFontSize(11);
//				}
//				wPos+=80;
//			}
			
			
			subTemp[XPOS] = lcdW-46-80-80-80-wPos;
			subTemp[YPOS] = 90;
			//LJW 월드맵 핫딜 막기
//			if(xSaleShop.isOpen == TRUE)
//			{
//				drawPacker(imgSaleIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSaleIcon), imgH(imgSaleIcon), VH);
//				xSaleShop.xTouchWorldMapIcon.wPos = imgW(imgSaleIcon)-20;
//				xSaleShop.xTouchWorldMapIcon.hPos = imgH(imgSaleIcon);
//				xSaleShop.xTouchWorldMapIcon.xPos = subTemp[XPOS]-xSaleShop.xTouchWorldMapIcon.wPos/2;
//				xSaleShop.xTouchWorldMapIcon.yPos = subTemp[YPOS]-xSaleShop.xTouchWorldMapIcon.hPos/2;
//				/*
//				gSetColor(255, 0, 0);
//				setAlpha(100);
//				fillRect(xSaleShop.xTouchWorldMapIcon.xPos, xSaleShop.xTouchWorldMapIcon.yPos, xSaleShop.xTouchWorldMapIcon.wPos, xSaleShop.xTouchWorldMapIcon.hPos);
//				setAlpha(ALPHA_MAX);
//				 */
//				wPos += 80;
//				
//				
//				if(xWorldMap.uiHideCnt > 0 && ranDom(0, 100) < 50)
//				{
//					makeGlitterEff(&xSaleShop.xGlitterEff,ranDom(-50, 50),ranDom(-50, 50));
//				}
//				prcGlitterEff(&xSaleShop.xGlitterEff,subTemp[XPOS],subTemp[YPOS]);
//			}
			
			
            
            
            
			//LJW 월드맵 네이버카페 아이콘 막기
//            subTemp[XPOS] = lcdW-46-80-80-80-wPos;
//            subTemp[YPOS] = 90;
//            drawImage(&imgCafeIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgCafeIcon.w, imgCafeIcon.h, VH);
//            xWorldMap.xTouchCafeUi.wPos = 70;
//            xWorldMap.xTouchCafeUi.hPos = 70;
//            xWorldMap.xTouchCafeUi.xPos = subTemp[XPOS]-xWorldMap.xTouchCafeUi.wPos/2;
//            xWorldMap.xTouchCafeUi.yPos = subTemp[YPOS]-xWorldMap.xTouchCafeUi.hPos/2;
			

            /*
             gSetColor(255, 0, 0);
             setAlpha(100);
             fillRect(xWorldMap.xTouchCafeUi.xPos, xWorldMap.xTouchCafeUi.yPos, xWorldMap.xTouchCafeUi.wPos, xWorldMap.xTouchCafeUi.hPos);
             setAlpha(ALPHA_MAX);
             */
            
            
            wPos += 80;
            
            
            //LJW 월드맵 정액제 아이콘 막기
//            subTemp[XPOS] = lcdW-46-80-80-80-wPos;
//            subTemp[YPOS] = 90;
//            drawPrepayUi(subTemp[XPOS],subTemp[YPOS]);
            wPos += 80;
            
            
            
            subTemp[XPOS] = lcdW-46-80-80-80-wPos;
            subTemp[YPOS] = 90;
            //LJW 월드맵 패키지 아이콘 막기
//            xPackagePopup.uiShowRemainTime -= xGame.prcSec;
//            if(xPackagePopup.uiShowRemainTime < -2)
//            {
//                xPackagePopup.uiShowRemainTime = 0;
//                
//                int selectShowNum = DONT;
//                for(int k=xPackagePopup.uiShowNum+1;k<PACKAGEDATAMAX;k++)
//                {
//                    if(xPackageData[k].isUiShow == true)
//                    {
//                        if(isSellPackage(k) == true)
//                        {
//                            selectShowNum = k;
//                            break;
//                        }
//                    }
//                }
//                
//                if(selectShowNum == DONT)
//                {
//                    for(int k=0;k<xPackagePopup.uiShowNum;k++)
//                    {
//                        if(xPackageData[k].isUiShow == true)
//                        {
//                            if(isSellPackage(k) == true)
//                            {
//                                selectShowNum = k;
//                                break;
//                            }
//                        }
//                    }
//                }
//                xPackagePopup.uiShowNum = selectShowNum;
//            }
//            
//            if(xPackagePopup.uiShowNum != DONT)
//            {
//                drawPackageUi(subTemp[XPOS],subTemp[YPOS],xPackagePopup.uiShowNum);
//                
//                xPackagePopup.xTouchUiMain.wPos = 60;
//                xPackagePopup.xTouchUiMain.hPos = 60;
//                xPackagePopup.xTouchUiMain.xPos = subTemp[XPOS]-xPackagePopup.xTouchUiMain.wPos/2;
//                xPackagePopup.xTouchUiMain.yPos = subTemp[YPOS]-xPackagePopup.xTouchUiMain.wPos/2;
//                
//                /*
//                 gSetColor(255, 0, 0);
//                 setAlpha(100);
//                 fillRect(xPackagePopup.xTouchUiMain.xPos, xPackagePopup.xTouchUiMain.yPos, xPackagePopup.xTouchUiMain.wPos, xPackagePopup.xTouchUiMain.hPos);
//                 setAlpha(ALPHA_MAX);
//                 */
//            }
//            
//            
//            
//            int packageShowHHMax = 0;
//            int packageShowCntMax = 0;
//            for(int k=0;k<PACKAGEDATAMAX;k++)
//            {
//                if(xPackageData[k].isUiShow == true)
//                {
//                    if(isSellPackage(k) == true)
//                    {
//                        packageShowCntMax++;
//                    }
//                }
//            }
//            packageShowHHMax += 80+(((packageShowCntMax-1)/3)*80);
//            
//            
//            
//            
//            
//            switch(xPackagePopup.uiShowState)
//            {
//            case PACKAGEUISHOW_STATE_CLOSE:
//                xPackagePopup.uiShowHH -= xPackagePopup.uiShowHH/2;
//                break;
//            case PACKAGEUISHOW_STATE_OPEN:
//                xPackagePopup.uiShowHH += (packageShowHHMax-xPackagePopup.uiShowHH)/2;
//                break;
//            }
//            
//            if(abs(packageShowHHMax-xPackagePopup.uiShowHH) <= 1)
//                xPackagePopup.uiShowHH = packageShowHHMax;
//            
//            if(abs(xPackagePopup.uiShowHH) <= 1)
//                xPackagePopup.uiShowHH = 0;
//            
//            
//            packageShowCntMax = 0;
//            if(xPackagePopup.uiShowHH != 0)
//            {
//                gSetClip(true, subTemp[XPOS]-140,subTemp[YPOS]+40, 280, packageShowHHMax+10);
//                int hhh = 0;
//                for(int k=0;k<PACKAGEDATAMAX;k++)
//                {
//                    if(xPackageData[k].isUiShow == true)
//                    {
//                        if(isSellPackage(k) == true)
//                        {
//                            hhh = 80+(80*(packageShowCntMax/3));
//                            drawPackageUi(subTemp[XPOS]-80+(80*(packageShowCntMax%3)),subTemp[YPOS]-packageShowHHMax+xPackagePopup.uiShowHH+hhh,k);
//                            packageShowCntMax++;
//                        }
//                    }
//                }
//                gSetClip(false, 1,1, 60, packageShowHHMax);
//            }
			
            wPos+=80;
			subTemp[XPOS] = lcdW-46-80-80-80-wPos;
			subTemp[YPOS] = 90;
			//LJW 월드맵 선물함(NEW) 아이콘 막기
//			if(((xMail.giftLastKey != 0 || xSave.giftLastKey != 0) && xSave.giftLastKey != xMail.giftLastKey) || (xMail.mailLastKey != 0 && xSave.mailLastKey != 0 && xSave.mailLastKey != xMail.mailLastKey))
//			{
//				if((xMail.giftLastKey != 0 || xSave.giftLastKey != 0) && xSave.giftLastKey != xMail.giftLastKey)
//				{
//					drawPacker(imgWorldMapMailIcon0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgWorldMapMailIcon0)/2, imgW(imgWorldMapMailIcon0), imgH(imgWorldMapMailIcon0)/2, VH);
//					gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+38, "선물함", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
//					wPos+=80;
//				}
//				else
//				{
//					drawPacker(imgWorldMapMailIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapMailIcon0), imgH(imgWorldMapMailIcon0)/2, VH);
//					gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+38, "방명록", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
//					wPos+=80;
//				}
//			}
//			xMail.xTouchWorldMapicon.wPos = imgW(imgWorldMapMailIcon0);
//			xMail.xTouchWorldMapicon.hPos = imgH(imgWorldMapMailIcon0)/2;
//			xMail.xTouchWorldMapicon.xPos = subTemp[XPOS]-xMail.xTouchWorldMapicon.wPos/2;
//			xMail.xTouchWorldMapicon.yPos = subTemp[YPOS]-xMail.xTouchWorldMapicon.hPos/2;
			
			subTemp[XPOS] = lcdW-46-80-80-80-wPos;
			subTemp[YPOS] = 90;
			
			//LJW 월드맵 G9 막기
//			if(xG9.isOpen == TRUE && xG9.isNet == TRUE)
//			{
//				//게임시작시 선물 지급여부 확인
//				//지급한놈일경우 아무처리 안한다
//				//지급안한놈일경우 패키지검사실시
//								
//				loadImg("g9icon.png", &xG9.imgG9Icon);
//				drawImage(&xG9.imgG9Icon, subTemp[XPOS], subTemp[YPOS], 0, 0, xG9.imgG9Icon.w, xG9.imgG9Icon.h, VH);
//				xG9.xTouch.wPos = xG9.imgG9Icon.w;
//				xG9.xTouch.hPos = xG9.imgG9Icon.h;
//				xG9.xTouch.xPos = subTemp[XPOS]-xG9.xTouch.wPos/2;
//				xG9.xTouch.yPos = subTemp[YPOS]-xG9.xTouch.hPos/2;
//			}
			
			//LJW 월드맵 버프 보너스 막기
//			drawBuffBonus();
			setUiHide();
		}
		
//LJW 월드맵 친구아이콘 드로우 막기
		subTemp[XPOS] = imgW(imgSwitchWorldMapUi2)/2;
		subTemp[YPOS] = lcdH-imgH(imgSwitchWorldMapUi2)/2+5;
//		drawPacker(imgSwitchWorldMapUi2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSwitchWorldMapUi2), imgH(imgSwitchWorldMapUi2), VH);
            
        drawImage(&imgMenuIcon1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgMenuIcon1.w, imgMenuIcon1.h, VH);
	
		//setFontSize(14);
		//gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+42, "친구", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
		//setFontSize(11);
					
//		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//		{
//			if(xWorldMap.isFriendMap == FALSE)
//			{
//				switch(xQuestTuto.nowNum)
//				{
//				case TUTO_7_RESULT:
//				case TUTO_17_MAIL_FRIEND:
//				case TUTO_18_FRIENDMODEL_MENUTOUCH:
//				case TUTO_27_HELP_FLOORMOVE0:
//				case TUTO_28_ADDFRIEND_MENUTOUCH:
//					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//					{
//						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//					}
//					break;
//				case TUTO_24_UI_FRIEND:
//					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
//					break;
//				}
//			}
//		}
	
		
			
		xTouchWorldMapFriendIcon.wPos = imgW(imgSwitchWorldMapUi2);
		xTouchWorldMapFriendIcon.hPos = imgH(imgSwitchWorldMapUi2);
		xTouchWorldMapFriendIcon.xPos = subTemp[XPOS] - xTouchWorldMapFriendIcon.wPos/2;
		xTouchWorldMapFriendIcon.yPos = subTemp[YPOS] - xTouchWorldMapFriendIcon.hPos/2;
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xTouchWorldMapFriendIcon.xPos, xTouchWorldMapFriendIcon.yPos, xTouchWorldMapFriendIcon.wPos, xTouchWorldMapFriendIcon.hPos);
		 setAlpha();
		 */


		subTemp[XPOS] = lcdW-56;
		subTemp[YPOS] = lcdH-60;
		setFontSize(14);
		if(xWorldMap.isFriendMap == TRUE)
		{
			drawPacker(imgSwitchWorldMapUi4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSwitchWorldMapUi4), imgH(imgSwitchWorldMapUi4), VH);
						
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_17_RESULT:
				case TUTO_27_RESULT:
					if(xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				}
			}
			
			
			
		}
		else
		{
			if(xSwitchWorldMapUi.state != SWITCH_STATE_OFF)
            {
//				drawSwitch(subTemp[XPOS]-10,subTemp[YPOS]+10,	&xSwitchWorldMapUi,imgSwitchWorldMapUi0,xWorldMapUi.totalNum,97);
                //변동 사항 KBY
                drawSwitchImg(subTemp[XPOS]-10, subTemp[YPOS]+10, &xSwitchWorldMapUi, imgMenuIcon2, xWorldMapUi.totalNum, 97);
            }
			if(xSwitchWorldMapUi_Up.state != SWITCH_STATE_OFF)
				drawSwitchUp(subTemp[XPOS]+9,subTemp[YPOS]-17,	&xSwitchWorldMapUi_Up,imgSwitchWorldMapUi1,4,90);
            //변동 사항 KBY
            drawImage(&imgMenu, subTemp[XPOS], subTemp[YPOS], 0, 0, imgMenu.w, imgMenu.h, VH);
//			drawPacker(imgSwitchWorldMapUi3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSwitchWorldMapUi3), imgH(imgSwitchWorldMapUi3), VH);
			//gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+42, "메뉴", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_24_UI_MENU:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}
			
			switch(xSwitchWorldMapUi_Up.state)
			{
			case SWITCH_STATE_OFF:
			case SWITCH_STATE_OFFANY:
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{					
					case TUTO_22_MODELCASTING:
					case TUTO_6_INTERIOR_MENUTOUCH0:
					case TUTO_6_INTERIOR_MENUTOUCH1:
					case TUTO_6_INTERIOR_EDITMENUTOUCH:
					case TUTO_8_INTERIOR_TABTOUCH:
					case TUTO_8_INTERIOR_OK:
					case TUTO_9_INTERIOR_TABTOUCH:
					case TUTO_10_INTERIOR_TABTOUCH:
					case TUTO_13_STAFF_MENUTOUCH:
					case TUTO_14_STAFF_MENUTOUCH:
					case TUTO_15_MINIGAME_MENUTOUCH:
					case TUTO_26_INTERIOR_MENUTOUCH0:
					case TUTO_26_INTERIOR_MENUTOUCH1:
					case TUTO_30_INTERIOR_TABTOUCH:
						if(xWorldMap.state == WORLDMAP_STATE_PLAY)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
						break;
					}
				}
				break;
			case SWITCH_STATE_ON:
			case SWITCH_STATE_ONANY:
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_6_INTERIOR_MENUTOUCH1:
						xQuestTuto.isTutoClean = TRUE;
						break;
					}
				}
				break;
			}
		}
		setFontSize(11);
			
//		xTouchWorldMapMainMenuIcon.wPos = imgW(imgSwitchWorldMapUi2);
//		xTouchWorldMapMainMenuIcon.hPos = imgH(imgSwitchWorldMapUi2);
        xTouchWorldMapMainMenuIcon.wPos = imgMenu.w;
        xTouchWorldMapMainMenuIcon.hPos = imgMenu.h;
		xTouchWorldMapMainMenuIcon.xPos = subTemp[XPOS] - xTouchWorldMapMainMenuIcon.wPos/2;
		xTouchWorldMapMainMenuIcon.yPos = subTemp[YPOS] - xTouchWorldMapMainMenuIcon.hPos/2;
        
		
//        gSetColor(255, 0, 0);
//        setAlpha(100);
//        fillRect(xTouchWorldMapMainMenuIcon.xPos, xTouchWorldMapMainMenuIcon.yPos, xTouchWorldMapMainMenuIcon.wPos,xTouchWorldMapMainMenuIcon.hPos);
//        setAlpha(ALPHA_MAX);
		 
									
		if(xWorldMap.isFriendMap == TRUE)
		{
			int nextSelectSlot;
			switch(xFriendMap.type)
			{
			case 0:	//보통
				nextSelectSlot = xFriend.selectSlot+1;
				if(xFriend.dataSlotNumList[nextSelectSlot] == DONT)
					nextSelectSlot++;
				
				if(nextSelectSlot < xFriend.totalNumList)
				{
					subTemp[XPOS] = lcdW-50-130;
					subTemp[YPOS] = lcdH-62+5;
					
					
					drawFriendProfile(subTemp[XPOS]-14, subTemp[YPOS]+9, xFriendData[xFriend.dataSlotNumList[nextSelectSlot]].userNum, 80);
					drawPacker(imgFriendMapNextBtn, subTemp[XPOS],subTemp[YPOS], 0, 0, imgW(imgFriendMapNextBtn), imgH(imgFriendMapNextBtn), VH);
					//gDrawStringBold(subTemp[XPOS]-14, subTemp[YPOS]-45, xFriendData[xFriend.dataSlotNumList[nextSelectSlot]].strNickName, VH, 255, 255, 255, 44, 26, 27);
					xTouchFriendMapNext.wPos = imgW(imgFriendMapNextBtn);
					xTouchFriendMapNext.hPos = imgH(imgFriendMapNextBtn);
					xTouchFriendMapNext.xPos = subTemp[XPOS]-xTouchFriendMapNext.wPos/2;
					xTouchFriendMapNext.yPos = subTemp[YPOS]-xTouchFriendMapNext.hPos/2;
					
				}
				
				nextSelectSlot = xFriend.selectSlot-1;
				if(nextSelectSlot >= 0)
				{
					if(xFriend.dataSlotNumList[nextSelectSlot] == DONT)
						nextSelectSlot--;
				}
									
					
				if(nextSelectSlot >= 0)
				{
					subTemp[XPOS] = lcdW-50-130-128;
					subTemp[YPOS] = lcdH-62+5;
					
					drawFriendProfile(subTemp[XPOS]+14-3, subTemp[YPOS]+9, xFriendData[xFriend.dataSlotNumList[nextSelectSlot]].userNum, 80);
					drawPacker(imgFriendMapBackBtn, subTemp[XPOS],subTemp[YPOS], 0, 0, imgW(imgFriendMapBackBtn), imgH(imgFriendMapBackBtn), VH);
					//gDrawStringBold(subTemp[XPOS]+14, subTemp[YPOS]-45, xFriendData[xFriend.dataSlotNumList[nextSelectSlot]].strNickName, VH, 255, 255, 255, 44, 26, 27);
					xTouchFriendMapPre.wPos = imgW(imgFriendMapBackBtn);
					xTouchFriendMapPre.hPos = imgH(imgFriendMapBackBtn);
					xTouchFriendMapPre.xPos = subTemp[XPOS]-xTouchFriendMapPre.wPos/2;
					xTouchFriendMapPre.yPos = subTemp[YPOS]-xTouchFriendMapPre.hPos/2;
				}
					
					
				//printf("xFriend.selectSlot>>>%d\n",xFriend.selectSlot);
				//printf("xFriend.nowPageNumList>>%d\n",xFriend.nowPageNumList);
					
					
					
				//다음친구버튼용 친구리스트 실시간 불러오기
				if((xFriend.selectSlot+1)/10 >= xFriend.nowPageNumList)
				{
					isSubTemp[13] = FALSE;
					for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
					{
						if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFRIENDLIST)
						{
							isSubTemp[13] = TRUE;
							break;
						}
					}
					
					if(isSubTemp[13] == FALSE)
					{
						//////////////////////////////////////////////////////////////////////////////////////////
						xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumList;
						xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumList;
						xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//0:친구리스트1:팔로잉
						++xFriend.nowPageNumList;
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
						//////////////////////////////////////////////////////////////////////////////////////////
					}
				}					
				break;
			default:
				subTemp[XPOS] = lcdW-64-104;
				subTemp[YPOS] = lcdH-62+5;
				drawPacker(imgFriendMapAddBtn, subTemp[XPOS],subTemp[YPOS], 0, (xFriendData[xFriendMap.selectDataSlotNum].isAdd == FALSE ? imgH(imgFriendMapAddBtn)/2:0), imgW(imgFriendMapAddBtn), imgH(imgFriendMapAddBtn)/2, VH);
				if(xFriendData[xFriendMap.selectDataSlotNum].isAdd == FALSE)
					gDrawStringBold(subTemp[XPOS],subTemp[YPOS]+32, "친구추가", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
				else
					gDrawStringBold(subTemp[XPOS],subTemp[YPOS]+32, "친구추가", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 77, 77, 77);
				xTouchFriendMapAdd.wPos = imgW(imgFriendMapAddBtn);
				xTouchFriendMapAdd.hPos = imgH(imgFriendMapAddBtn)/2;
				xTouchFriendMapAdd.xPos = subTemp[XPOS]-xTouchFriendMapAdd.wPos/2;
				xTouchFriendMapAdd.yPos = subTemp[YPOS]-xTouchFriendMapAdd.hPos/2;
				
				subTemp[XPOS] = lcdW-64-104-107;
				subTemp[YPOS] = lcdH-62+5;
				drawPacker(imgFriendMapRandomBtn, subTemp[XPOS],subTemp[YPOS], 0, imgH(imgFriendMapRandomBtn)/2, imgW(imgFriendMapRandomBtn), imgH(imgFriendMapRandomBtn)/2, VH);
				gDrawStringBold(subTemp[XPOS],subTemp[YPOS]+32, "랜덤방문", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
				xTouchFriendMapRandom.wPos = imgW(imgFriendMapRandomBtn);
				xTouchFriendMapRandom.hPos = imgH(imgFriendMapRandomBtn)/2;
				xTouchFriendMapRandom.xPos = subTemp[XPOS]-xTouchFriendMapRandom.wPos/2;
				xTouchFriendMapRandom.yPos = subTemp[YPOS]-xTouchFriendMapRandom.hPos/2;
				break;
			}			
		}
		break;
	}
    
    
    subTemp[XPOS] =121;
    subTemp[YPOS] =410;
    
    xTouchGreenHouse.wPos = 100;
    xTouchGreenHouse.hPos = 100;
    xTouchGreenHouse.xPos = subTemp[XPOS];
    xTouchGreenHouse.yPos = subTemp[YPOS];
    
    setAlpha(100);
    gSetColor(255, 0, 0);
    fillRect(xTouchGreenHouse.xPos, xTouchGreenHouse.yPos, xTouchGreenHouse.wPos, xTouchGreenHouse.hPos);
    setAlpha(ALPHA_MAX);
    
    gSetColor(0, 0, 0);
    setFontSizeORI(18);
    sprintf(strTempS, "온실");
    gDrawString(subTemp[XPOS]+50, subTemp[YPOS]+50, strTempS, VH);
    setFontSize(11);

    subTemp[XPOS] = 11;
    subTemp[YPOS] = 410;
    
    xTouchSpinningWheel.wPos = 100;
    xTouchSpinningWheel.hPos = 100;
    xTouchSpinningWheel.xPos = subTemp[XPOS];
    xTouchSpinningWheel.yPos = subTemp[YPOS];
    
    setAlpha(100);
    gSetColor(255, 0, 0);
    fillRect(xTouchSpinningWheel.xPos, xTouchSpinningWheel.yPos, xTouchSpinningWheel.wPos, xTouchSpinningWheel.hPos);
    setAlpha(ALPHA_MAX);
    
    gSetColor(0, 0, 0);
    setFontSizeORI(18);
    sprintf(strTempS, "물레");
    gDrawString(subTemp[XPOS]+50, subTemp[YPOS]+50, strTempS, VH);
    setFontSize(11);
    
//    gSetColor(0, 0, 0);
//    setFontSizeORI(18);
//    sprintf(strTempS, "%s", xGreenHouse_MaterialData_FP.xSlot[0].strName);
//    gDrawString(subTemp[XPOS]+150, subTemp[YPOS]+50, strTempS, VH);
//    setFontSize(11);

    
	getUiHide();
	//LJW 월드맵 내샵 헬프정보 UI막기
//	drawHelpInfo();
}

void drawSwitch(int x,int y,XSWITCH * xSwitch,int XIMG,int totalNum, int gab)
{
	int hPos = 0;
	int wPos = 0;
	
	if(xWorldMap.isTuto == TRUE)
		xSwitch->closeCnt = 0;
	
	switch(xSwitch->state)
	{
	case SWITCH_STATE_OFF:
		xSwitch->anyCnt = 0;
		break;
	case SWITCH_STATE_ON:
		if(++xSwitch->closeCnt > 90)
		{
			if(xWorldMap.isTuto == FALSE)
				xSwitch->state = SWITCH_STATE_OFFANY;
		}
			
		break;
	case SWITCH_STATE_OFFANY:
		if(--xSwitch->anyCnt < 0)
		{
			xSwitch->anyCnt = 0;
			xSwitch->state = SWITCH_STATE_OFF;
		}
		break;
	case SWITCH_STATE_ONANY:
		if(++xSwitch->anyCnt-((totalNum-1)*2) > 4)
		{
			xSwitch->anyCnt = 4+((totalNum-1)*2);
			xSwitch->state = SWITCH_STATE_ON;
			xSwitch->closeCnt = 0;
		}
		break;
	}
	
	
	for(int k=totalNum-1;k>=0;k--)
	{
		wPos = 0;
		
		//LJW 월드맵 메뉴 > 스타일북/ 모델/ 직원 메뉴 막기
		if(k >= 3)
			continue;
		//여기까지
		
		switch(xSwitch->anyCnt-((totalNum-1-k)*2))
		{
		case 4:  wPos = 0;  break;
		case 3:  wPos = 32;  break;
		case 2:  wPos = 64;  break;
		case 1:  wPos = 128;  break;
		case 0:  wPos = 256;  break;
		default:
			if(xSwitch->anyCnt-((totalNum-1-k)*2) < 0)
				wPos = 999;
			else
				wPos = 0;
			break;
		}
		
		
		switch(--xSwitch->clickAnyCnt[k])
		{
		case 3:
			//xGame.isBlend = TRUE;
			xGame.blendType = BLEND_WHITE;
			xGame.blendNum = ALPHA_MAX;
			break;
		case 2:
		case 1:
			wPos += ranDom(-(xSwitch->clickAnyCnt[k]),(xSwitch->clickAnyCnt[k]));
			hPos += ranDom(-(xSwitch->clickAnyCnt[k]),(xSwitch->clickAnyCnt[k]));
			break;
		default:
			xSwitch->clickAnyCnt[k] = -1;
			break;
		}
		
		
		drawPacker(XIMG, x+wPos-((k+1)*gab)+wPos, y, (imgW(XIMG)/(totalNum))*((totalNum-1)-k),0 , (imgW(XIMG)/(totalNum)), imgH(XIMG), VH);
		xGame.isBlend = FALSE;
		xSwitch->xTouch[k].wPos = (imgW(XIMG)/(totalNum))-20;
		xSwitch->xTouch[k].hPos = imgH(XIMG)-20;
		
		xSwitch->xTouch[k].xPos = x-((k+1)*gab)+wPos-xSwitch->xTouch[k].wPos/2;
		xSwitch->xTouch[k].yPos = y-xSwitch->xTouch[k].hPos/2;
		
	
				
		
		switch(k)
		{
		case 0:	sprintf(strTempS, "설정");
				break;
		case 1:	sprintf(strTempS, "편집");
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xSwitch->state)
					{
					case SWITCH_STATE_ON:
					case SWITCH_STATE_ONANY:
						switch(xQuestTuto.nowNum)
						{
						case TUTO_6_INTERIOR_EDITMENUTOUCH:
							xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
							xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							break;
						}
						break;
					}
				}
				break;
		case 2:
				sprintf(strTempS, "상점");
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xSwitch->state)
					{
					case SWITCH_STATE_ON:
					case SWITCH_STATE_ONANY:
						switch(xQuestTuto.nowNum)
						{
						case TUTO_6_INTERIOR_MENUTOUCH0:
						case TUTO_8_INTERIOR_TABTOUCH:
						case TUTO_8_INTERIOR_OK:
						case TUTO_9_INTERIOR_TABTOUCH:
						case TUTO_10_INTERIOR_TABTOUCH:
						case TUTO_26_INTERIOR_MENUTOUCH0:
						case TUTO_26_INTERIOR_MENUTOUCH1:
						case TUTO_30_INTERIOR_TABTOUCH:
							if(xWorldMap.isExtensionEvent == FALSE)
							{
								xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
								xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							}
							break;
						}
						break;
					}
				}
				break;
		case 3:	sprintf(strTempS, "직원");
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xSwitch->state)
					{
					case SWITCH_STATE_ON:
					case SWITCH_STATE_ONANY:
						switch(xQuestTuto.nowNum)
						{
							case TUTO_13_STAFF_MENUTOUCH:
							case TUTO_14_STAFF_MENUTOUCH:
								xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
								xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
								break;
						}
						break;
					}
				}
				break;
		case 4:	sprintf(strTempS, "모델");
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xSwitch->state)
					{
					case SWITCH_STATE_ON:
					case SWITCH_STATE_ONANY:
						switch(xQuestTuto.nowNum)
						{
						case TUTO_22_MODELCASTING:
							xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
							xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							break;
						}
						break;
					}
				}
				break;
		case 5:	sprintf(strTempS, "스타일북");		break;
		}
		//gDrawStringBold(x+wPos-((k+1)*gab)+wPos, y+hPos+34, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
	}
	
	
	xGame.isBlend = FALSE;

	/*
	for(int i=0;i<totalNum;i++)
	{
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xSwitch->xTouch[i].xPos, xSwitch->xTouch[i].yPos, xSwitch->xTouch[i].wPos, xSwitch->xTouch[i].hPos);
		setAlpha(ALPHA_MAX);
	}
	 */


}
//////////////////////////////////////////////////////////////////////////////
//메뉴 버튼 연출 KBY

void drawSwitchImg(int x,int y,XSWITCH * xSwitch,XIMG xImg,int totalNum, int gab)
{
    int hPos = 0;
    int wPos = 0;
    
    if(xWorldMap.isTuto == TRUE)
        xSwitch->closeCnt = 0;
    
    switch(xSwitch->state)
    {
        case SWITCH_STATE_OFF:
            xSwitch->anyCnt = 0;
            break;
        case SWITCH_STATE_ON:
            if(++xSwitch->closeCnt > 90)
            {
                if(xWorldMap.isTuto == FALSE)
                    xSwitch->state = SWITCH_STATE_OFFANY;
            }
            
            break;
        case SWITCH_STATE_OFFANY:
            if(--xSwitch->anyCnt < 0)
            {
                xSwitch->anyCnt = 0;
                xSwitch->state = SWITCH_STATE_OFF;
            }
            break;
        case SWITCH_STATE_ONANY:
            if(++xSwitch->anyCnt-((totalNum-1)*2) > 4)
            {
                xSwitch->anyCnt = 4+((totalNum-1)*2);
                xSwitch->state = SWITCH_STATE_ON;
                xSwitch->closeCnt = 0;
            }
            break;
    }
    
    
    for(int k=totalNum-1;k>=0;k--)
    {
        wPos = 0;
        
        //LJW 월드맵 메뉴 > 스타일북/ 모델/ 직원 메뉴 막기
//        if(k >= 3)
//            continue;
        //여기까지
        
        switch(xSwitch->anyCnt-((totalNum-1-k)*2))
        {
            case 4:  wPos = 0;  break;
            case 3:  wPos = 32;  break;
            case 2:  wPos = 64;  break;
            case 1:  wPos = 128;  break;
            case 0:  wPos = 256;  break;
            default:
                if(xSwitch->anyCnt-((totalNum-1-k)*2) < 0)
                    wPos = 999;
                else
                    wPos = 0;
                break;
        }
        
        
        switch(--xSwitch->clickAnyCnt[k])
        {
            case 3:
                //xGame.isBlend = TRUE;
                xGame.blendType = BLEND_WHITE;
                xGame.blendNum = ALPHA_MAX;
                break;
            case 2:
            case 1:
                wPos += ranDom(-(xSwitch->clickAnyCnt[k]),(xSwitch->clickAnyCnt[k]));
                hPos += ranDom(-(xSwitch->clickAnyCnt[k]),(xSwitch->clickAnyCnt[k]));
                break;
            default:
                xSwitch->clickAnyCnt[k] = -1;
                break;
        }
        
        
//        drawPacker(x, x+wPos-((k+1)*gab)+wPos, y, (imgW(XIMG)/(totalNum))*((totalNum-1)-k),0 , (imgW(XIMG)/(totalNum)), imgH(XIMG), VH);
        
        drawImage(&xImg, x+wPos-((k+1)*gab)+wPos, y, (xImg.w/totalNum)*((totalNum-1)-k), 0, (xImg.w/totalNum), xImg.h, VH);
        xGame.isBlend = FALSE;
        xSwitch->xTouch[k].wPos = (xImg.w/totalNum)-20;
        xSwitch->xTouch[k].hPos = xImg.h-20;
        
        xSwitch->xTouch[k].xPos = x-((k+1)*gab)+wPos-xSwitch->xTouch[k].wPos/2;
        xSwitch->xTouch[k].yPos = y-xSwitch->xTouch[k].hPos/2;
        
        
        
        
        switch(k)
        {
            case 0:	sprintf(strTempS, "설정");
                break;
            case 1:	sprintf(strTempS, "편집");
                if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
                {
                    switch(xSwitch->state)
                    {
                        case SWITCH_STATE_ON:
                        case SWITCH_STATE_ONANY:
                            switch(xQuestTuto.nowNum)
                        {
                            case TUTO_6_INTERIOR_EDITMENUTOUCH:
                                xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
                                xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
                                xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
                                break;
                        }
                            break;
                    }
                }
                break;
            case 2:
                sprintf(strTempS, "상점");
                if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
                {
                    switch(xSwitch->state)
                    {
                        case SWITCH_STATE_ON:
                        case SWITCH_STATE_ONANY:
                            switch(xQuestTuto.nowNum)
                        {
                            case TUTO_6_INTERIOR_MENUTOUCH0:
                            case TUTO_8_INTERIOR_TABTOUCH:
                            case TUTO_8_INTERIOR_OK:
                            case TUTO_9_INTERIOR_TABTOUCH:
                            case TUTO_10_INTERIOR_TABTOUCH:
                            case TUTO_26_INTERIOR_MENUTOUCH0:
                            case TUTO_26_INTERIOR_MENUTOUCH1:
                            case TUTO_30_INTERIOR_TABTOUCH:
                                if(xWorldMap.isExtensionEvent == FALSE)
                                {
                                    xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
                                    xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
                                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
                                }
                                break;
                        }
                            break;
                    }
                }
                break;
            case 3:	sprintf(strTempS, "직원");
                if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
                {
                    switch(xSwitch->state)
                    {
                        case SWITCH_STATE_ON:
                        case SWITCH_STATE_ONANY:
                            switch(xQuestTuto.nowNum)
                        {
                            case TUTO_13_STAFF_MENUTOUCH:
                            case TUTO_14_STAFF_MENUTOUCH:
                                xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
                                xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
                                xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
                                break;
                        }
                            break;
                    }
                }
                break;
            case 4:	sprintf(strTempS, "모델");
                if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
                {
                    switch(xSwitch->state)
                    {
                        case SWITCH_STATE_ON:
                        case SWITCH_STATE_ONANY:
                            switch(xQuestTuto.nowNum)
                        {
                            case TUTO_22_MODELCASTING:
                                xTutoInfo.x[xTutoInfo.totalNum] = xSwitch->xTouch[k].xPos+xSwitch->xTouch[k].wPos/2;
                                xTutoInfo.y[xTutoInfo.totalNum] = xSwitch->xTouch[k].yPos+xSwitch->xTouch[k].hPos/2;
                                xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
                                break;
                        }
                            break;
                    }
                }
                break;
            case 5:	sprintf(strTempS, "스타일북");		break;
        }
        //gDrawStringBold(x+wPos-((k+1)*gab)+wPos, y+hPos+34, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
    }
    
    
    xGame.isBlend = FALSE;
    
    /*
     for(int i=0;i<totalNum;i++)
     {
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xSwitch->xTouch[i].xPos, xSwitch->xTouch[i].yPos, xSwitch->xTouch[i].wPos, xSwitch->xTouch[i].hPos);
     setAlpha(ALPHA_MAX);
     }
     */
    
    
}
/////////////////////////////////////////////////////////////////////////////////
void drawSwitchUp(int x,int y,XSWITCH * xSwitch,int XIMG,int totalNum, int gab)
{
	int hPos = 0;
	int wPos = 0;
	
	if(xWorldMap.isTuto == TRUE)
		xSwitch->closeCnt = 0;
	
	switch(xSwitch->state)
	{
		case SWITCH_STATE_OFF:
			xSwitch->anyCnt = 0;
			break;
		case SWITCH_STATE_ON:
			if(++xSwitch->closeCnt > 90)
			{
				if(xWorldMap.isTuto == FALSE)
					xSwitch->state = SWITCH_STATE_OFFANY;
			}
			
			break;
		case SWITCH_STATE_OFFANY:
			if(--xSwitch->anyCnt < 0)
			{
				xSwitch->anyCnt = 0;
				xSwitch->state = SWITCH_STATE_OFF;
			}
			break;
		case SWITCH_STATE_ONANY:
			if(++xSwitch->anyCnt-((totalNum-1)*2) > 4)
			{
				xSwitch->anyCnt = 4+((totalNum-1)*2);
				xSwitch->state = SWITCH_STATE_ON;
				xSwitch->closeCnt = 0;
			}
			break;
	}
	
	
	//LJW 월드맵 메뉴 > 위쪽 메뉴버튼 막기
//	for(int k=totalNum-1;k>=0;k--)
//	{
//		hPos = 0;
//		switch(xSwitch->anyCnt-((totalNum-1-k)*2))
//		{
//			case 4:  hPos = 0;  break;
//			case 3:  hPos = 32;  break;
//			case 2:  hPos = 64;  break;
//			case 1:  hPos = 128;  break;
//			case 0:  hPos = 256;  break;
//			default:
//				if(xSwitch->anyCnt-((totalNum-1-k)*2) < 0)
//					hPos = 999;
//				else
//					hPos = 0;
//				break;
//		}
//		
//		switch(xSwitch->clickAnyCnt[k])
//		{
//			case 3:
//				//xGame.isBlend = TRUE;
//				xGame.blendType = BLEND_WHITE;
//				xGame.blendNum = ALPHA_MAX;
//				break;
//			case 2:
//			case 1:
//				wPos += ranDom(-(xSwitch->clickAnyCnt[k]),(xSwitch->clickAnyCnt[k]));
//				hPos += ranDom(-(xSwitch->clickAnyCnt[k]),(xSwitch->clickAnyCnt[k]));
//				break;
//			default:
//				xSwitch->clickAnyCnt[k] = -1;
//				break;
//		}
//		
//		xGame.isBlend = FALSE;
//		xSwitch->xTouch[k].wPos = imgW(XIMG)/2-20;
//		xSwitch->xTouch[k].hPos = imgH(XIMG)/totalNum-20;
//		xSwitch->xTouch[k].xPos = x-xSwitch->xTouch[k].wPos/2;
//		xSwitch->xTouch[k].yPos = y+hPos-((k+1)*gab)+hPos-xSwitch->xTouch[k].hPos/2;
//		
//		switch(k)
//		{
//		case 0:		//캔디머신
//			if(xLock.isLock[LOCK_TYPE_CANDY] == TRUE)
//			{
//				drawPacker(XIMG, x, y+hPos-((k+1)*gab)+hPos, imgW(XIMG)/2*0,imgH(XIMG)/totalNum*(totalNum-1-k), imgW(XIMG)/2, imgH(XIMG)/totalNum, VH);
//			}
//			else
//			{
//				drawPacker(XIMG, x, y+hPos-((k+1)*gab)+hPos, imgW(XIMG)/2*1,imgH(XIMG)/totalNum*(totalNum-1-k), imgW(XIMG)/2, imgH(XIMG)/totalNum, VH);
//			}
//			
//				
//			switch(xSwitch->state)
//			{
//			case SWITCH_STATE_ON:
//			case SWITCH_STATE_ONANY:
//				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//				{
//					switch(xQuestTuto.nowNum)
//					{
//						case TUTO_15_MINIGAME_MENUTOUCH:
//							if(xWorldMap.state == WORLDMAP_STATE_PLAY)
//							{
//								xTutoInfo.x[xTutoInfo.totalNum] = x;
//								xTutoInfo.y[xTutoInfo.totalNum] = y+hPos-((k+1)*gab)+hPos;
//								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//							}
//							break;
//					}
//				}
//				break;
//			}
//			
//			xTouchWorldMapTired.xPos = xSwitch->xTouch[k].xPos;
//			xTouchWorldMapTired.yPos = xSwitch->xTouch[k].yPos;
//			xTouchWorldMapTired.wPos = xSwitch->xTouch[k].wPos;
//			xTouchWorldMapTired.hPos = xSwitch->xTouch[k].hPos;
//			break;
//		case 1:		//이벤트
//			drawPacker(XIMG, x, y+hPos-((k+1)*gab)+hPos, imgW(XIMG)/2*1,imgH(XIMG)/totalNum*(totalNum-1-k), imgW(XIMG)/2, imgH(XIMG)/totalNum, VH);
//			sprintf(strTempS, "이벤트");
//			//gDrawStringBold(x, y+hPos-((k+1)*gab)+hPos+34, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
//							
//			xTouchEventIcon.wPos = xSwitch->xTouch[k].wPos;
//			xTouchEventIcon.hPos = xSwitch->xTouch[k].hPos;
//			xTouchEventIcon.xPos = xSwitch->xTouch[k].xPos;
//			xTouchEventIcon.yPos = xSwitch->xTouch[k].yPos;
//				
//			break;
//        case 2:		//출석
//            drawPacker(XIMG, x, y+hPos-((k+1)*gab)+hPos, imgW(XIMG)/2*1,imgH(XIMG)/totalNum*(totalNum-1-k), imgW(XIMG)/2, imgH(XIMG)/totalNum, VH);
//            sprintf(strTempS, "출석보상");
//            //gDrawStringBold(x, y+hPos-((k+1)*gab)+hPos+34, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
//            
//            
//            xWorldMap.xTouchAccessBonusShow.wPos = xSwitch->xTouch[k].wPos;
//            xWorldMap.xTouchAccessBonusShow.hPos = xSwitch->xTouch[k].hPos;
//            xWorldMap.xTouchAccessBonusShow.xPos = xSwitch->xTouch[k].xPos;
//            xWorldMap.xTouchAccessBonusShow.yPos = xSwitch->xTouch[k].yPos;
//            
//            break;
//		case 3:		//메일
//			drawPacker(XIMG, x, y+hPos-((k+1)*gab)+hPos, imgW(XIMG)/2*1,imgH(XIMG)/totalNum*(totalNum-1-k), imgW(XIMG)/2, imgH(XIMG)/totalNum, VH);
//			sprintf(strTempS, "메일");
//			//gDrawStringBold(x, y+hPos-((k+1)*gab)+hPos+34, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
//							
//			xMail.xTouchMenuicon.wPos = xSwitch->xTouch[k].wPos;
//			xMail.xTouchMenuicon.hPos = xSwitch->xTouch[k].hPos;
//			xMail.xTouchMenuicon.xPos = xSwitch->xTouch[k].xPos;
//			xMail.xTouchMenuicon.yPos = xSwitch->xTouch[k].yPos;
//			break;
//		}
//		
//		/*
//		 gSetColor(255, 0, 0);
//		 setAlpha(100);
//		 fillRect(xTouchWorldMapTired.xPos, xTouchWorldMapTired.yPos, xTouchWorldMapTired.wPos, xTouchWorldMapTired.hPos);
//		 setAlpha(ALPHA_MAX);
//		 */
//	}
	
	
	xGame.isBlend = FALSE;

	/*
	 for(int i=0;i<totalNum+1;i++)
	 {
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xSwitch->xTouch[i].xPos, xSwitch->xTouch[i].yPos, xSwitch->xTouch[i].wPos, xSwitch->xTouch[i].hPos);
	 setAlpha(ALPHA_MAX);
	 }
	 */
}

void interiorShopFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
	}
	else
	{
		//밑에것은 그리기에서 로딩해주기에 해제만
		for(int i=0;i<xInterior.totalNumThema;i++)
			freeImg(&imgThemaIconB[i]);

		for(int i=0;i<20;i++)
			freeImg(&imgExternalWallIcon[i]);
		
	}
}

void drawInteriorShop()
{
	int px = cx;
	int py = cy;
	M_Boolean isEvent;
	int sale;
	
    //퀘스트
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_6_INTERIOR_MENUTOUCH0:
		case TUTO_26_INTERIOR_MENUTOUCH0:
		case TUTO_26_INTERIOR_MENUTOUCH1:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}

    drawBgFillRect();
	drawPacker(imginteriorShopBg, px,py, 0, 0, imgW(imginteriorShopBg), imgH(imginteriorShopBg), VH);

	subTemp[XPOS] = px-390;
	subTemp[YPOS] = py-275;
	for(int i=0;i<INTERIORTABMAX;i++)
	{
		if(i == xInterior.selectTabB)
		{
            //상위 카테고리
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], imgW(imgMenu8)/2, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			drawPacker(imgInteriorTabB0, subTemp[XPOS]+(i*76), subTemp[YPOS]+6-18, imgW(imgInteriorTabB0)/(INTERIORTABMAX)*i, 0, imgW(imgInteriorTabB0)/(INTERIORTABMAX), imgH(imgInteriorTabB0), VH);
			switch(i)
			{
			case 0:		sprintf(strTempS, "기능성");break;
			case 1:		sprintf(strTempS, "꾸미기");break;
			case 2:		sprintf(strTempS, "확장");break;
			case 3:		sprintf(strTempS, "테마");break;
			case 4:		sprintf(strTempS, "유료샵");break;
			case 5:		sprintf(strTempS, "보관함");break;
			}
			gDrawStringBold(subTemp[XPOS]+(i*76), subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
            
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_TABTOUCH:
					if(i == 1)
					{
						xQuestTuto.isTutoClean = TRUE;
					}
					break;
				case TUTO_9_INTERIOR_TABTOUCH:
					if(i == 0)
					{
						xQuestTuto.isTutoClean = TRUE;
					}
					break;
				}
			}
			
		}
		else
		{
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_TABTOUCH:
				case TUTO_8_INTERIOR_TABTOUCH:
				case TUTO_8_INTERIOR_OK:
				case TUTO_26_INTERIOR_TABTOUCH0:
				case TUTO_26_INTERIOR_TABTOUCH1:
					if(i == 1)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				case TUTO_9_INTERIOR_TABTOUCH:
				case TUTO_30_INTERIOR_TABTOUCH:
					if(i == 0)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				case TUTO_10_INTERIOR_TABTOUCH:
					if(i == 2)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				}
			}
			
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], 0, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			drawPacker(imgInteriorTabB0, subTemp[XPOS]+(i*76), subTemp[YPOS]+6, imgW(imgInteriorTabB0)/(INTERIORTABMAX)*i, 0, imgW(imgInteriorTabB0)/(INTERIORTABMAX), imgH(imgInteriorTabB0), VH);

		}
	}
	
	for(int i=0;i<INTERIORTABMAX;i++)
	{
		xTouchInteriorTabB[i].wPos = imgW(imgMenu8)/2-10;
		xTouchInteriorTabB[i].hPos = imgH(imgMenu8);
		xTouchInteriorTabB[i].xPos = subTemp[XPOS]+5+(i*76) - xTouchInteriorTabB[i].wPos/2;
		xTouchInteriorTabB[i].yPos = subTemp[YPOS] - xTouchInteriorTabB[i].hPos/2;
	}
		
		
	subTemp[XPOS] = px-388;
	subTemp[YPOS] = py-171;
	int iMaxTabS;
	switch(xInterior.selectTabB)
	{
	case 0://기능성, 재화나무는 여기에 추가할 것...
        if(xFormer.OnOff==TRUE)
            iMaxTabS = 6;
        else
            iMaxTabS=5;
		for(int i=0;i<iMaxTabS;i++)
		{
			drawPacker(imgMenu11, subTemp[XPOS], subTemp[YPOS]+(i*68), 0, imgH(imgMenu11)/2*(xInterior.selectTabS == i?1:0), imgW(imgMenu11), imgH(imgMenu11)/2, VH);
			switch(i)
			{
			case 0: sprintf(strTempS, "옷걸이");break;
			case 1: sprintf(strTempS, "진열대");break;
			case 2: sprintf(strTempS, "피팅룸");break;
			case 3: sprintf(strTempS, "쇼윈도");break;
			case 4: sprintf(strTempS, "카운터");break;
            case 5:
                if(xFormer.OnOff==TRUE)
                sprintf(strTempS, "생산기");
                break;
			}
			if(xInterior.selectTabS == i)
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 86, 255, 220, 44, 27, 26);
			else
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 255, 255, 255, 82, 49, 38);
            
            
            
            int totalBuildNum = 0;
            int interiorBuileType;
            
            switch(i)
            {
            case 0: //옷걸이
                interiorBuileType = INTERIOR_TYPE_HANGER;
                break;
            case 1: //진열대
                interiorBuileType = INTERIOR_TYPE_ACCESSORY;
                break;
            case 2: //피팅룸
                interiorBuileType = INTERIOR_TYPE_FITTINGROOM;
                break;
            case 3: //쇼윈도
                interiorBuileType = INTERIOR_TYPE_SHOWWINDOW;
                break;
            case 5: //생산기
                interiorBuileType = INTERIOR_TYPE_PRODUCTION;
                break;
            }
            
            if(i != 5)
            {
                if(xInterior.buildlimitNum[xMap.nowFloor][interiorBuileType] < xInterior.buildlimitMax[xMap.nowFloor][interiorBuileType])
                    totalBuildNum += xInterior.buildlimitMax[xMap.nowFloor][interiorBuileType] - xInterior.buildlimitNum[xMap.nowFloor][interiorBuileType];
                
                if(totalBuildNum > 0)
                {
                    drawPacker(imgOrderNumBox, subTemp[XPOS]+35+3, subTemp[YPOS]-23+(i*68), 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
                    gSetColor(255, 255, 255);
                    
                    sprintf(strTempS, "%d",totalBuildNum);
                    gDrawString(subTemp[XPOS]+35+3, subTemp[YPOS]-23+(i*68)-2, strTempS, VH);
                }
            }
            
            else if(i==5)
            {
                int sum=0;
                int Maxbuild=0;
                for(int k=0;k<FORMERMAX;k++)
                {
                    sum+=xFormer.itemCnt[k];
                    Maxbuild+=xFormer.buildlimitMax[k];
                }
                totalBuildNum=Maxbuild - sum;
                if(totalBuildNum>0)
                {
                    drawPacker(imgOrderNumBox, subTemp[XPOS]+35+3, subTemp[YPOS]-23+(i*68), 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
                    gSetColor(255, 255, 255);
                        
                    sprintf(strTempS, "%d",totalBuildNum);
                    gDrawString(subTemp[XPOS]+35+3, subTemp[YPOS]-23+(i*68)-2, strTempS, VH);
                }
            }
			if(xWorldMap.isTuto == TRUE && (xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_9_INTERIOR_TABTOUCH:
				case TUTO_9_INTERIOR_OK:
					if(i == 0)
					{
						if(xInterior.selectTabS != 0)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+(i*68);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					break;
				case TUTO_30_INTERIOR_TABTOUCH:
					if(i == 3)
					{
						if(xInterior.selectTabS != 3)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+(i*68);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
						else
							xQuestTuto.isTutoClean = TRUE;
					}
					break;
				}
				
			}
			
			
		}
		break;
	case 1:		//꾸미기
		iMaxTabS = 6;
		for(int i=0;i<iMaxTabS;i++)
		{
			drawPacker(imgMenu11, subTemp[XPOS], subTemp[YPOS]+(i*68), 0, imgH(imgMenu11)/2*(xInterior.selectTabS == i?1:0), imgW(imgMenu11), imgH(imgMenu11)/2, VH);
			
			switch(i)
			{
			case 0: sprintf(strTempS, "바닥소품");break;
			case 1: sprintf(strTempS, "카페트");break;
			case 2: sprintf(strTempS, "벽소품");break;
			case 3: sprintf(strTempS, "바닥타일");break;
			case 4: sprintf(strTempS, "벽지");break;
			case 5: sprintf(strTempS, "문");break;
			}
			
			if(xInterior.selectTabS == i)
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 86, 255, 220, 44, 27, 26);
			else
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 255, 255, 255, 82, 49, 38);
			//튜토리얼(참고할 필요없음...)
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_TABTOUCH:
				case TUTO_8_INTERIOR_TABTOUCH:
				
					if(i == 0)
					{
						if(xInterior.selectTabS != i)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+(i*68);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
						else
							xQuestTuto.isTutoClean = TRUE;
					}
					break;
				case TUTO_8_INTERIOR_OK:
				case TUTO_6_INTERIOR_ITEMTOUCH:
					if(i == 0)
					{
						if(xInterior.selectTabS != i)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+(i*68);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					break;
				case TUTO_26_INTERIOR_TABTOUCH0:
					if(i == 3)
					{
						if(xInterior.selectTabS != i)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+(i*68);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
						else
							xQuestTuto.isTutoClean = TRUE;
							
					}
					break;
				case TUTO_26_INTERIOR_TABTOUCH1:
					if(i == 4)
					{
						if(xInterior.selectTabS != i)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+(i*68);
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
						else
							xQuestTuto.isTutoClean = TRUE;
					}
					break;
				}
                //여기가 끝
			}
		}
		break;
	case 2:		//외부
		iMaxTabS = 3;
		for(int i=0;i<iMaxTabS;i++)
		{
			drawPacker(imgMenu11, subTemp[XPOS], subTemp[YPOS]+(i*68), 0, imgH(imgMenu11)/2*(xInterior.selectTabS == i?1:0), imgW(imgMenu11), imgH(imgMenu11)/2, VH);

			switch(i)
			{
			case 0: sprintf(strTempS, "확장");break;
			case 1: sprintf(strTempS, "증축");break;
			case 2: sprintf(strTempS, "외벽");break;
			}
			if(xInterior.selectTabS == i)
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 86, 255, 220, 44, 27, 26);
			else
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 255, 255, 255, 82, 49, 38);
			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
					case TUTO_10_INTERIOR_TABTOUCH:
						if(i == 0)
						{
							if(xInterior.selectTabS != 0)
							{
								xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
								xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+(i*68);
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							}
							else
								xQuestTuto.isTutoClean = TRUE;
						}
						break;
				}
			}
			
		}
		break;
	case 3:		//테마
		iMaxTabS = 0;
		switch(xInterior.state)
		{
		case INTERIOR_STATE_THEMASELECT:
			drawPacker(imgMenu11, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgMenu11)/2, imgW(imgMenu11), imgH(imgMenu11)/2, VH);
			sprintf(strTempS, "테마");
			gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS], strTempS, VH, 86, 255, 220, 44, 27, 26);
			break;
		case INTERIOR_STATE_PLAY:
			drawPacker(imgMenu12, subTemp[XPOS]+30, subTemp[YPOS], 0, 0, imgW(imgMenu12), imgH(imgMenu12), VH);
			gDrawStringBold(subTemp[XPOS]+30, subTemp[YPOS], xInterior.strThemaName[xInterior.selectThema], VH, 86, 255, 220, 44, 27, 26);

			drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS]+75, 0, imgH(imgBtn0)/2, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
			xTouchBack.wPos = imgW(imgBtn0);
			xTouchBack.hPos = imgH(imgBtn0)/2;
			xTouchBack.xPos = subTemp[XPOS]-xTouchBack.wPos/2;
			xTouchBack.yPos = subTemp[YPOS]+75-xTouchBack.hPos/2;
			break;
		}
		break;
	case 4:		//유료샵
		iMaxTabS = 2;
		for(int i=0;i<iMaxTabS;i++)
		{
			drawPacker(imgMenu11, subTemp[XPOS], subTemp[YPOS]+(i*68), 0, imgH(imgMenu11)/2*(xInterior.selectTabS == i?1:0), imgW(imgMenu11), imgH(imgMenu11)/2, VH);
			switch(i)
			{
			case 0: sprintf(strTempS, "룩 골드");break;
			case 1: sprintf(strTempS, "프리미엄");break;
			}
			if(xInterior.selectTabS == i)
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 86, 255, 220, 44, 27, 26);
			else
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 255, 255, 255, 82, 49, 38);
			
		}
		break;
	case 5:		//보관함
		iMaxTabS = 2;
		for(int i=0;i<iMaxTabS;i++)
		{
			drawPacker(imgMenu11, subTemp[XPOS], subTemp[YPOS]+(i*68), 0, imgH(imgMenu11)/2*(xInterior.selectTabS == i?1:0), imgW(imgMenu11), imgH(imgMenu11)/2, VH);
			switch(i)
			{
			case 0: sprintf(strTempS, "꾸미기");break;
			case 1: sprintf(strTempS, "기능성");break;
			}
			if(xInterior.selectTabS == i)
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 86, 255, 220, 44, 27, 26);
			else
				gDrawStringBold(subTemp[XPOS]+3, subTemp[YPOS]+(i*68), strTempS, VH, 255, 255, 255, 82, 49, 38);
		}
		break;
	}
		
	for(int i=0;i<iMaxTabS;i++)
	{
		xTouchInteriorTabS[i].wPos = imgW(imgMenu11);
		xTouchInteriorTabS[i].hPos = imgH(imgMenu11)/2;
		xTouchInteriorTabS[i].xPos = subTemp[XPOS] - xTouchInteriorTabS[i].wPos/2;
		xTouchInteriorTabS[i].yPos = subTemp[YPOS]+(i*68) - xTouchInteriorTabS[i].hPos/2;
	}
	
	

    
    //xClubShopData[128]st
    
	
	switch(xInterior.state)
	{
	case INTERIOR_STATE_THEMASELECT:
		xDragScrollInteriorS.totalNum = 1+(xInterior.totalNumThema-1)/8;
		xDragScrollInteriorS.posGab = 640;
		
		dragScrollPrc(&xDragScrollInteriorS,0,FALSE);
		
		int slotCode;
		int slotNum;
		int pos;
		
		gSetClip(true,px-260, 0, 600, lcdH);
		for(int page=-1;page<=1;page++)
		{
			for(int i=0;i<8;i++)
			{
				if(((xDragScrollInteriorS.selectNum+page)*8)+i >= xInterior.totalNumThema)
					break;
				
				pos = xDragScrollInteriorS.pos+(xDragScrollInteriorS.posGab*page);
				subTemp[XPOS] = px-185+pos+((i%4)*150);
				subTemp[YPOS] = py-85+((i/4)*236);
								
				drawThemaIcon(subTemp[XPOS], subTemp[YPOS],xInterior.themaCode[xDragScrollInteriorS.selectNum*8+i]);
				
				if(page == 0)
				{
					xTouchInteriorS[i].wPos = imgThemaIconB[xInterior.themaCode[xDragScrollInteriorS.selectNum*8+i]].w;
					xTouchInteriorS[i].hPos = imgThemaIconB[xInterior.themaCode[xDragScrollInteriorS.selectNum*8+i]].h;
					xTouchInteriorS[i].xPos = subTemp[XPOS] - xTouchInteriorS[i].wPos/2;
					xTouchInteriorS[i].yPos = subTemp[YPOS] - xTouchInteriorS[i].hPos/2;

					
//					gSetColor(255, 0, 0);
//					setAlpha(100);
//					fillRect(xTouchInteriorS[i].xPos, xTouchInteriorS[i].yPos, xTouchInteriorS[i].wPos, xTouchInteriorS[i].hPos);
//					setAlpha(ALPHA_MAX);
					 
				}
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
		//왼 화살표
		subTemp[XPOS] = px+40-340-3;
		subTemp[YPOS] = py+30;
		if(xDragScrollInteriorS.selectNum > 0)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchLeft.wPos = 80;
		xNoticeWorldMap.xTouchLeft.hPos = 80;
		xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
		xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
		//끝
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		//오른 화살표
		subTemp[XPOS] = px+40+340;
		subTemp[YPOS] = py+30;
		if(xDragScrollInteriorS.selectNum < xDragScrollInteriorS.totalNum-1)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchRight.wPos = 80;
		xNoticeWorldMap.xTouchRight.hPos = 80;
		xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
		xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
		//끝
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
		 setAlpha(ALPHA_MAX);
		 */			
		break;
	case INTERIOR_STATE_CASHSHOP:
		xShop.selectTabB = xInterior.selectTabS;
		int totalNum;
		switch(xShop.selectTabB)
		{
		case SHOPTAB_TYPE_MONEY:
			totalNum = xShop.totalMoneyTab;
                
            drawImage(&imgMileageIcon[3], lcdW-imgMileageIcon[3].w/2, 197, 0, 0, imgMileageIcon[3].w, imgMileageIcon[3].h, VH);
			break;
		case SHOPTAB_TYPE_PREMIUM:
			totalNum = SHOPTABPREMIUMMAX;
			break;
		}
			
			
		
		
		xShop.xDragScroll.totalNum = 1+(totalNum-1)/8;
		xShop.xDragScroll.posGab = 640;
		
		dragScrollPrc(&xShop.xDragScroll,0,FALSE);
		gSetClip(true,px-260, 0, 600, lcdH);
		
		for(int page=-1;page<=1;page++)
		{
			if(xShop.xDragScroll.selectNum+page >= 0 && xShop.xDragScroll.selectNum+page < xShop.xDragScroll.totalNum)
			{
				for(int i=0;i<8;i++)
				{
					if(((xShop.xDragScroll.selectNum+page)*8)+i >= totalNum)
						break;
					
					pos = xShop.xDragScroll.pos+(xShop.xDragScroll.posGab*page);
					subTemp[XPOS] = px-185+pos+((i%4)*150);
					subTemp[YPOS] = py-120+((i/4)*236);
					
					slotNum = ((xShop.xDragScroll.selectNum+page)*8)+i;
										
					drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
					
					switch(xShop.selectTabB)
					{
					case SHOPTAB_TYPE_MONEY:
							
                            

                        
                            
                            
						if(xWorldMap.isFirstIap == TRUE && xShop.moneyType[slotNum] == 0)
							drawPacker(imgCashShop0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCashShop0), imgH(imgCashShop0), VH);
						
						drawShopMoneyIcon(subTemp[XPOS],subTemp[YPOS],slotNum);
						
						
						if(xWorldMap.isFirstIap == TRUE && xShop.moneyType[slotNum] == 0)
						{
							setFontSize(8);
							gDrawStringBold(subTemp[XPOS],subTemp[YPOS]+35, "첫구매 혜택!", VH, 86, 255, 220, 82, 49, 38);
							sprintf(strTempS, "%d룩 추가 보너스!",xShop.moneyPriceFirstBonus[slotNum]);
							gDrawStringBold(subTemp[XPOS],subTemp[YPOS]+35+17, strTempS, VH, 86, 255, 220, 82, 49, 38);
							setFontSize(11);
							switch(xShop.moneyType[slotNum])
							{
							case 0:		//룩
								setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData+xShop.moneyPriceFirstBonus[slotNum]);
								sprintf(strTempS, "%s 룩",strTempB);
								break;
							case 1:		//골드
								setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData);
								sprintf(strTempS, "%s 골드",strTempB);
								break;
							}
						}
						else
						{
							switch(xShop.moneyType[slotNum])
							{
								case 0:		//룩
									setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData);
									sprintf(strTempS, "%s 룩",strTempB);
									break;
								case 1:		//골드
									setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData);
									sprintf(strTempS, "%s 골드",strTempB);
									break;
							}
						}
                            
                            
                            
						gSetColor(44, 27, 26);
						setLabelWidth(150);
						gDrawString(subTemp[XPOS], subTemp[YPOS]+87, strTempS, VH);
						setLabelWidth(0);
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						
						switch(xShop.moneyType[slotNum])
						{
						case 0:		//룩
							sprintf(strTempS, "%d원",xShop.moneyPrice[slotNum].oriData);
							break;
						case 1:		//골드
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							setCommaNum(strTempS, xShop.moneyPrice[slotNum].oriData);
							break;
						}
						

						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
							
							
						if(xShop.moneyPriceBonus[slotNum] > 0)
						{
							drawPacker(imgSlotBonus0, subTemp[XPOS]+45, subTemp[YPOS]-45, 0, 0, imgW(imgSlotBonus0), imgH(imgSlotBonus0), VH);
							
							
							switch(xShop.moneyType[slotNum])
							{
							case 0:		//룩
								setFontSize(8);
								gDrawStringBold(subTemp[XPOS]+45+3, subTemp[YPOS]-45, "개", VL, 255, 255, 255, 82, 49, 38);
								setFontSize(11);
								sprintf(strTempS,"%d", xShop.moneyPriceBonus[slotNum]);
								if(xShop.moneyPriceBonus[slotNum] >= 100)
								{
									setFontSize(14);
									gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-1, strTempS, VR, 255, 255, 255, 82, 49, 38);
									setFontSize(11);
								}
								else
								{
									setFontSize(20);
									gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-1, strTempS, VR, 255, 255, 255, 82, 49, 38);
									setFontSize(11);
								}
								
								break;
							case 1:		//골드
								setFontSize(8);
								setCommaNum(strTempS, xShop.moneyPriceBonus[slotNum]);
								gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-9, strTempS, VH, 255, 255, 255, 82, 49, 38);
								gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45+8, "GOLD", VH, 255, 255, 255, 82, 49, 38);
								setFontSize(11);
								break;
							}
							
						}
						break;
					case SHOPTAB_TYPE_PREMIUM:
						drawShopPremiumIcon(subTemp[XPOS],subTemp[YPOS],slotNum);
						
						gSetColor(44, 27, 26);
						setLabelWidth(150);
						gDrawString(subTemp[XPOS], subTemp[YPOS]+87, xShop.strPremiumName[slotNum], VH);
						setLabelWidth(0);
						
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						switch(xShop.premiumPriceType[slotNum])
						{
						case 2:
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*6, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							break;
						default:
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*xShop.premiumPriceType[slotNum], 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							break;
						}
						
						
							
						setCommaNum(strTempS, xShop.premiumPrice[slotNum].oriData);
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
						break;
					}
					
					if(page == 0)
					{
						
						xShop.xTouchSelectSlot[i].wPos = imgW(imgProductionMenuSlot0);
						xShop.xTouchSelectSlot[i].hPos = imgH(imgProductionMenuSlot0);
						xShop.xTouchSelectSlot[i].xPos = subTemp[XPOS] - xShop.xTouchSelectSlot[i].wPos/2;
						xShop.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xShop.xTouchSelectSlot[i].hPos/2;
					}
				}
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
			
			
		subTemp[XPOS] = px+40-340-3;
		subTemp[YPOS] = py+30;
		if(xShop.xDragScroll.selectNum > 0)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchLeft.wPos = 80;
		xNoticeWorldMap.xTouchLeft.hPos = 80;
		xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
		xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		
		subTemp[XPOS] = px+40+340;
		subTemp[YPOS] = py+30;
		if(xShop.xDragScroll.selectNum < xShop.xDragScroll.totalNum-1)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchRight.wPos = 80;
		xNoticeWorldMap.xTouchRight.hPos = 80;
		xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
		xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
		 setAlpha(ALPHA_MAX);
		 */

		break;
	case INTERIOR_STATE_EXTERNAL:
		int totalCnt;
		switch(xInterior.selectTabS)
		{
		case 0:		//샵확장				
			xExtensionShop.totalTile = 0;
			switch(xMap.extension)
			{
			case 0://8*8
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 0;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 0;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 0;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 1;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 2;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 3;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 4;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
					
				break;
			case 1:
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 0;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 2;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 1;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 0;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 1;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 2;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 3;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 4;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				break;
			case 2:
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 1;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 2;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 2;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 0;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 2;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 3;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 4;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;

				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				break;
			case 3:
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 2;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 2;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 3;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 0;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 3;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 4;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				break;
			case 4:
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 3;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 2;
								
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 4;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 0;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 4;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				break;
			case 5:
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 4;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 2;
										
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 0;
					
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
					
				break;
			case 6:
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 5;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 2;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 0;
				
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 6;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 1;
				break;
			case 7:
				xExtensionShop.xSlotTile[xExtensionShop.totalTile].tile = 7;
				xExtensionShop.xSlotTile[xExtensionShop.totalTile++].priceType = 2;
				break;
			}
			totalCnt = xExtensionShop.totalTile;
			break;
		case 1:		//샵증축
			xExtensionShop.totalFloor = 0;
			switch(xMap.totalFloor)
			{
			case 1:
				xExtensionShop.xSlotFloor[xExtensionShop.totalFloor].floor = 0;
				xExtensionShop.xSlotFloor[xExtensionShop.totalFloor++].priceType = 0;
				
				xExtensionShop.xSlotFloor[xExtensionShop.totalFloor].floor = 0;
				xExtensionShop.xSlotFloor[xExtensionShop.totalFloor++].priceType = 1;
				break;
			case 2:
				xExtensionShop.xSlotFloor[xExtensionShop.totalFloor].floor = 0;
				xExtensionShop.xSlotFloor[xExtensionShop.totalFloor++].priceType = 2;
				break;
			}
			totalCnt = xExtensionShop.totalFloor;
			break;
		case 2:		//외벽
			totalCnt = xExternalWall.totalNum;
			break;
		}
			
		xExtensionShop.xDragScroll.totalNum = 1+(totalCnt-1)/8;
		xExtensionShop.xDragScroll.posGab = 640;
		
		dragScrollPrc(&xExtensionShop.xDragScroll,0,FALSE);
		
		gSetClip(true,px-260, 0, 600, lcdH);
		for(int page=-1;page<=1;page++)
		{
			if(xExtensionShop.xDragScroll.selectNum+page >= 0 && xExtensionShop.xDragScroll.selectNum+page < xExtensionShop.xDragScroll.totalNum)
			{
				for(int i=0;i<8;i++)
				{
					if(((xExtensionShop.xDragScroll.selectNum+page)*8)+i >= totalCnt)
						break;
					
					pos = xExtensionShop.xDragScroll.pos+(xExtensionShop.xDragScroll.posGab*page);
					subTemp[XPOS] = px-185+pos+((i%4)*150);
					subTemp[YPOS] = py-120+((i/4)*236);
					slotNum = ((xExtensionShop.xDragScroll.selectNum+page)*8)+i;
					
					drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
					
					switch(xInterior.selectTabS)
					{
					case 0:		//샵확장						
						//아이템명
						drawPacker(imgExtensionTileIcon, subTemp[XPOS],subTemp[YPOS], 0, 0, imgW(imgExtensionTileIcon), imgH(imgExtensionTileIcon), VH);
														
							
						gSetColor(44, 27, 26);
						sprintf(strTempS, "%d X %d",8+(xExtensionShop.xSlotTile[slotNum].tile+1),8+(xExtensionShop.xSlotTile[slotNum].tile+1));
						if(xExtensionShop.xSlotTile[slotNum].tile != 7)
							gDrawString(subTemp[XPOS], subTemp[YPOS]+87, strTempS, VH);
							
						switch(xExtensionShop.xSlotTile[slotNum].priceType)
						{
						case 0:		//골드
							if(xWorldMap.isTuto == TRUE)
							{
								switch(xQuestTuto.nowNum)
								{
									case TUTO_10_INTERIOR_EXTENSION:
										if(playState == PLAY_PLAY)
										{
											if(xWorldMap.isCashShop == FALSE)
											{
												if(slotNum == 0 || slotNum == 1)
												{
													xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
													xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
													xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
												}
											}
										}
										break;
								}
							}
										
							drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*2, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);

							sprintf(strTempS,"%d",xExtensionShop.tileFame[xExtensionShop.xSlotTile[slotNum].tile]);
							gSetColor(44, 27, 26);
							gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);

							
							drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
								
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123+22, imgW(imgProductionMenuObj0)/8*xExtensionShop.xSlotTile[slotNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							gSetColor(44, 27, 26);
							setCommaNum(strTempS, xExtensionShop.tilePrice[xExtensionShop.xSlotTile[slotNum].tile][xExtensionShop.xSlotTile[slotNum].priceType].oriData);
							gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
								
							break;
						case 1:		//캐쉬
							if(xWorldMap.isTuto == TRUE)
							{
								switch(xQuestTuto.nowNum)
								{
								case TUTO_10_INTERIOR_EXTENSION:
									if(playState == PLAY_PLAY)
									{
										if(xWorldMap.isCashShop == FALSE)
										{
											if(slotNum == 0 || slotNum == 1)
											{
												xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
												xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
												xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
											}
										}
									}
									break;
								}
							}
							drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*xExtensionShop.xSlotTile[slotNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
								
							gSetColor(44, 27, 26);
							setCommaNum(strTempS, xExtensionShop.tilePrice[xExtensionShop.xSlotTile[slotNum].tile][xExtensionShop.xSlotTile[slotNum].priceType].oriData);
							gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
							break;
						case 2:		//확장 완료
							gSetColor(44, 27, 26);
							sprintf(strTempS,"확장완료");
							gDrawString(subTemp[XPOS], subTemp[YPOS]+123, strTempS, VH);
							break;
						}
							
						if(xExtensionShop.xSlotTile[slotNum].priceType == 0 || xExtensionShop.xSlotTile[slotNum].tile > xMap.extension)
						{
							//레벨제한
							if(xSaveTemp.lv.oriData < xExtensionShop.tileLv[xExtensionShop.xSlotTile[slotNum].tile])
							{
								drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
								drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
								sprintf(strTempS,"Lv.%d%d", xExtensionShop.tileLv[xExtensionShop.xSlotTile[slotNum].tile]/10,xExtensionShop.tileLv[xExtensionShop.xSlotTile[slotNum].tile]%10);
								gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+50, strTempS, VL, 255, 255, 255, 44, 27, 26);
							}
							else if(xExtensionShop.xSlotTile[slotNum].tile > xMap.extension)
							{
								drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
								drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
								sprintf(strTempS, "선단계확장");
								gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+50, strTempS, VL, 255, 255, 255, 44, 27, 26);
							}
						}							
						break;
					case 1:		//샵증축
						drawPacker(imgExtensionFloorIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgExtensionFloorIcon), imgH(imgExtensionFloorIcon), VH);
						gSetColor(44, 27, 26);
						setLabelWidth(150);
						sprintf(strTempS, "%d층",xExtensionShop.xSlotFloor[slotNum].floor+2);
						gDrawString(subTemp[XPOS], subTemp[YPOS]+87, strTempS, VH);
						setLabelWidth(0);
							
						switch(xExtensionShop.xSlotFloor[slotNum].priceType)
						{
						case 0:		//골드
						case 1:		//캐쉬
							drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*xExtensionShop.xSlotFloor[slotNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);

							gSetColor(44, 27, 26);
							setCommaNum(strTempS, xExtensionShop.floorPrice[xExtensionShop.xSlotFloor[slotNum].floor][xExtensionShop.xSlotFloor[slotNum].priceType].oriData);
							gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
							break;
						case 2:		//확장 완료
							gSetColor(44, 27, 26);
							sprintf(strTempS,"증축완료");
							gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
							break;
						}
						if(xSaveTemp.lv.oriData < xExtensionShop.floorLv[xExtensionShop.xSlotFloor[slotNum].floor])
						{
							drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
							drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
							sprintf(strTempS,"Lv.%d%d", xExtensionShop.floorLv[xExtensionShop.xSlotFloor[slotNum].floor]/10,xExtensionShop.floorLv[xExtensionShop.xSlotFloor[slotNum].floor]%10);
							gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+50, strTempS, VL, 255, 255, 255, 44, 27, 26);
						}
						break;
					case 2:		//외벽
						drawExternalWallIcon(subTemp[XPOS]+pos,subTemp[YPOS],xExternalWall.listSlot[slotNum]);
						gSetColor(44, 27, 26);
						setLabelWidth(150);
						gDrawString(subTemp[XPOS], subTemp[YPOS]+87, xExternalWallData.strName[xExternalWall.listSlot[slotNum]], VH);
						setLabelWidth(0);
							
														
						if(xExternalWallData.isOpen[xExternalWall.listSlot[slotNum]] == FALSE)
						{
							switch(xExternalWallData.priceType[xExternalWall.listSlot[slotNum]])
							{
							case 0:		//골드
							case 1:		//캐쉬
								drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
								drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*xExternalWallData.priceType[xExternalWall.listSlot[slotNum]], 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);

								gSetColor(44, 27, 26);
								setCommaNum(strTempS, xExternalWallData.price[xExternalWall.listSlot[slotNum]]);
								gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
								break;
							}
						}
						else if(xExternalWall.listSlot[slotNum] == xExternalWall.selectWall)
						{
							//장착중
							drawPacker(imgInteriorSelectSlot1, subTemp[XPOS], subTemp[YPOS]+36, 0, 0, imgW(imgInteriorSelectSlot1), imgH(imgInteriorSelectSlot1), VH);
						}
						else
						{
							//보유중
							drawImage(&imgFittingBg[2], subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgFittingBg[2].w, imgFittingBg[2].h, VH);
						}
						break;
					}
					if(page == 0)
					{
						xTouchInteriorS[i].wPos = imgW(imgProductionMenuSlot0);
						xTouchInteriorS[i].hPos = imgH(imgProductionMenuSlot0);
						xTouchInteriorS[i].xPos = subTemp[XPOS] - xTouchInteriorS[i].wPos/2;
						xTouchInteriorS[i].yPos = subTemp[YPOS] - xTouchInteriorS[i].hPos/2;
						/*
						 gSetColor(255, 0, 0);
						 setAlpha(100);
						 fillRect(xTouchCatalogS[0].xPos, xTouchCatalogS[0].yPos, xTouchCatalogS[0].wPos, xTouchCatalogS[0].hPos);
						 setAlpha(ALPHA_MAX);
						 */
						
						
					}
				}
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
		subTemp[XPOS] = px+40-340-3;
		subTemp[YPOS] = py+30;
		if(xExtensionShop.xDragScroll.selectNum > 0)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);

		
		xNoticeWorldMap.xTouchLeft.wPos = 80;
		xNoticeWorldMap.xTouchLeft.hPos = 80;
		xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
		xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		
		subTemp[XPOS] = px+40+340;
		subTemp[YPOS] = py+30;
		if(xExtensionShop.xDragScroll.selectNum < xExtensionShop.xDragScroll.totalNum-1)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchRight.wPos = 80;
		xNoticeWorldMap.xTouchRight.hPos = 80;
		xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
		xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		break;
	default:
		if(xInterior.selectTabB == 5 && xInterior.totalNumS == 0)
		{
			//97, 255, 227, 44, 27, 26
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"보유중인 가구가 없습니다.");
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"가구를 구매해주세요.");
			drawLinkInfo(px-130,py-5,0);

			drawPacker(imgPopupBtn0, px+40, py+110, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
			setFontSize(20);
			gDrawStringBold(px-2+40, py-2+110, "가구 구매", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
			setFontSize(11);
			
			xTouchLink.wPos = imgW(imgPopupBtn0);
			xTouchLink.hPos = imgH(imgPopupBtn0)/2;
			xTouchLink.xPos = px+40-xTouchLink.wPos/2;
			xTouchLink.yPos = py+110-xTouchLink.hPos/2;
		}
						
		//세부메뉴(클럽 세부메뉴 참조)
		xDragScrollInteriorS.totalNum = 1+(xInterior.totalNumS-1)/8;
		xDragScrollInteriorS.posGab = 640;
		dragScrollPrc(&xDragScrollInteriorS,0,FALSE);
		
		gSetClip(true,px-260, 0, 600, lcdH);
		for(int ffff=0;ffff<3;ffff++)
		{
			int page;
			
			switch(ffff)
			{
			case 0:
				page = 0;
				break;
			case 1:
				page = 1;
				break;
			case 2:
				page = -1;
				break;
			}
			
			if(xDragScrollInteriorS.selectNum+page >= 0 && xDragScrollInteriorS.selectNum+page < xDragScrollInteriorS.totalNum)
			{
				for(int i=0;i<8;i++)
				{
					if(((xDragScrollInteriorS.selectNum+page)*8)+i >= xInterior.totalNumS)
						break;
					
					pos = xDragScrollInteriorS.pos+(xDragScrollInteriorS.posGab*page);
					subTemp[XPOS] = px-185+pos+((i%4)*150);
					subTemp[YPOS] = py-120+((i/4)*236);

					slotNum = ((xDragScrollInteriorS.selectNum+page)*8)+i;
					
					
					slotCode = xInterior.xSlotS[slotNum].codeTeam[(gameCnt/30)%xInterior.xSlotS[slotNum].totalTeam];
					sale = xInterior.xSlotS[slotNum].sale;
					
					

					
					
					
					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
					{
						if(xInterior.state == INTERIOR_STATE_PLAY)
						{
							switch(xQuestTuto.nowNum)
							{
							case TUTO_6_INTERIOR_ITEMTOUCH:
							case TUTO_8_INTERIOR_OK:
							case TUTO_9_INTERIOR_OK:
							case TUTO_26_INTERIOR_ITEMTOUCH0:
							case TUTO_30_INTERIOR_OK:
								
								if(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0] == slotCode)
								{
									xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
									xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
								}
								break;
							case TUTO_26_INTERIOR_ITEMTOUCH1:
								if(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[1] == slotCode)
								{
									xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
									xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
								}
								break;
							}
						}
					}
										

					setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
					drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
					
					
					xQuestInfo.isCC = FALSE;
					for(int cc=0;cc<xQuestInfo.totalInteriorSlotCode;cc++)
					{
						for(int t=0;t<xInterior.xSlotS[slotNum].totalTeam;t++)
						{
							if(xQuestInfo.interiorSlotCode[cc] == xInterior.xSlotS[slotNum].codeTeam[t])
								xQuestInfo.isCC = TRUE;
						}
					}
					
					
					if(xQuestInfo.isCC == TRUE)
						drawPacker(imgCashShop0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCashShop0), imgH(imgCashShop0), VH);
					
					
					

					setDrawObjCenter(xMap.type,xMap.listNum);
					if(xDrawObjCenter.reSize != 100)
					{
						xGame.fgameScaleCx =subTemp[XPOS];
						xGame.fgameScaleCy =lcdH-subTemp[YPOS];
						xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
					}
                    //상점 인테리어 오브젝트 그리는 것
					drawObj(subTemp[XPOS]+xDrawObjCenter.w,subTemp[YPOS]+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
					xGame.fgameScale = 1.0f;
					xGame.fgameScaleCx =cx;
					xGame.fgameScaleCy =cy;
					
					if(xQuestInfo.isCC == TRUE)
					{
						drawQuestArrow(subTemp[XPOS], subTemp[YPOS]-50);
					}
										
					if(xInterior.xSlotS[slotNum].totalTeam > 1)
						setMapData(xInterior.xSlotS[slotNum].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
                    
					gSetColor(44, 27, 26);
					setLabelWidth(126);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+87, xObj.xObjData[xMap.type][xMap.listNum].strName, VH);
					setLabelWidth(0);
					
					//획득경험치
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*2, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					sprintf(strTempS,"%d",xObj.xObjData[xMap.type][xMap.listNum].fame);
					gSetColor(44, 27, 26);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
					
					switch(xInterior.selectTabB)
					{
					case 5:		//인벤토리
						//오픈가격
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						//갯수 표시
						drawImage(&imgFittingBg[2], subTemp[XPOS]-63, subTemp[YPOS]+123+22, 0, 0, imgFittingBg[2].w, imgFittingBg[2].h, VL);
						gSetColor(44, 27, 26);
						sprintf(strTempS,"%d개",xInterior.xSlotS[slotNum].num);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
							
						if(xInterior.selectSlotS == slotNum)
						{
							drawPacker(imgInteriorSelectSlot0, subTemp[XPOS], subTemp[YPOS]+47, 0, 0, imgW(imgInteriorSelectSlot0), imgH(imgInteriorSelectSlot0), VH);
						}
						break;
					default:
						//오픈가격
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123+22, imgW(imgProductionMenuObj0)/8*xObj.xObjData[xMap.type][xMap.listNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
													
						if(sale > 0)
						{
							gSetColor(124, 124, 124);
							setFontSize(8);
							setCommaNum(strTempS, xObj.xObjData[xMap.type][xMap.listNum].price.oriData);
							gDrawString(subTemp[XPOS]-63+22, subTemp[YPOS]+123+22, strTempS, VL);
							setFontSize(11);
							drawPacker(imgSlotSale3, subTemp[XPOS]-63+22, subTemp[YPOS]+123+22, 0, 0, imgW(imgSlotSale3), imgH(imgSlotSale3), VL);
							gSetColor(251, 0, 7);
						}
						else
							gSetColor(44, 27, 26);
						setCommaNum(strTempS, xObj.xObjData[xMap.type][xMap.listNum].price.oriData-(xObj.xObjData[xMap.type][xMap.listNum].price.oriData*sale/100));
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
						break;
					}
					//new
					isEvent = FALSE;
					isEvent = xInterior.xSlotS[slotNum].isNew;
					if(isEvent == TRUE)
					{
						drawPacker(imgSlotEvent, subTemp[XPOS]-65,subTemp[YPOS]-65, 0, 0, imgW(imgSlotEvent), imgH(imgSlotEvent)/3, TL);
					}
					//hot
					isEvent = xInterior.xSlotS[slotNum].isHot;
					if(isEvent == TRUE)
					{
						drawPacker(imgSlotEvent, subTemp[XPOS]-65,subTemp[YPOS]-65, 0, imgH(imgSlotEvent)/3, imgW(imgSlotEvent), imgH(imgSlotEvent)/3, TL);
					}
					//event
					isEvent = xInterior.xSlotS[slotNum].isEvent;
					if(isEvent == TRUE)
					{
						drawPacker(imgSlotEvent, subTemp[XPOS]-65,subTemp[YPOS]-65, 0, imgH(imgSlotEvent)/3*2, imgW(imgSlotEvent), imgH(imgSlotEvent)/3, TL);
					}
					
					if(sale > 0)
					{
						drawPacker(imgSlotSale0, subTemp[XPOS]+45, subTemp[YPOS]-45, 0, 0, imgW(imgSlotSale0), imgH(imgSlotSale0), VH);
						drawNumPacker(imgSlotSale1, subTemp[XPOS]+45,subTemp[YPOS]-45-3, sale, -3, VH);
					}
					
					if(xInterior.selectTabB != 5 && xSaveTemp.lv.oriData < xObj.xObjData[xMap.type][xMap.listNum].lv)
					{
						drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
						drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
						sprintf(strTempS,"Lv.%d%d", xObj.xObjData[xMap.type][xMap.listNum].lv/10,xObj.xObjData[xMap.type][xMap.listNum].lv%10);
						gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+50, strTempS, VL, 255, 255, 255, 44, 27, 26);
					}
					else if((xLock.isLock[LOCK_TYPE_HANGER] == TRUE && xMap.type == INTERIOR_TYPE_HANGER)
						||(xLock.isLock[LOCK_TYPE_ACCESSORY] == TRUE && xMap.type == INTERIOR_TYPE_ACCESSORY)
					   ||(xLock.isLock[LOCK_TYPE_SHOWWINDOW] == TRUE && xMap.type == INTERIOR_TYPE_SHOWWINDOW))
					{
						drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
						drawPacker(imgLock2, subTemp[XPOS], subTemp[YPOS]+43-40, 0, 0, imgW(imgLock2), imgH(imgLock2), VH);
						gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+43-10+7, "퀘스트 수행", VH, 255, 255, 255, 44, 27, 26);
					}
                    else if(xMap.type == 4)
                    {
                        int nextLv = 0;
                        int index = xMap.abxMapData%1000;
                        if(xFormer.itemCnt[index] >= xFormer.buildlimitMax[index])
                            nextLv = -1;
                        if(nextLv == -1)
                        {
                            drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                            drawPacker(imgLock2, subTemp[XPOS], subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VH);
                            
                            setFontSize(8);
                            gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-55+7, "최대설치 개수 달성", VH, 238, 0, 0, 44, 27, 26);
                            
                            
                            sprintf(strTempS, "(%d/%d)",xFormer.itemCnt[index],xFormer.buildlimitMax[index]);
                            gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-55+15+7, strTempS, VH, 238, 0, 0, 44, 27, 26);
                            setFontSize(11);
                        }
//                        else
//                        {
//                            drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+23, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
//                            sprintf(strTempS,"Lv.%d%d", netxtLv/10,netxtLv%10);
//                            gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+30, strTempS, VL, 86, 255, 220, 33, 20, 20);
//                            
//                            setFontSize(8);
//                            sprintf(strTempS, "%d개 모두 사용중",xInterior.buildlimitNum[xMap.nowFloor][xMap.type]);
//                            gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+50, strTempS, VH, 86, 255, 220, 33, 20, 20);
//                            setFontSize(11);
//                        }
                        
                    }
					else if(xInterior.buildlimitNum[xMap.nowFloor][xMap.type] >= xInterior.buildlimitMax[xMap.nowFloor][xMap.type])
					{
						int nextLv = DONT;
						switch(xMap.type)
						{
						case INTERIOR_TYPE_FITTINGROOM:
							for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
							{
								
								if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildFittingRoomMax[xMap.nowFloor][k])
								{
									nextLv = k;
									break;
								}
							}
							break;
						case INTERIOR_TYPE_HANGER:
							for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
							{
								if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildHangerMax[xMap.nowFloor][k])
								{
									nextLv = k;
									break;
								}
							}
							break;
						case INTERIOR_TYPE_ACCESSORY:
							for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
							{
								if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildAccecssoryMax[xMap.nowFloor][k])
								{
									nextLv = k;
									break;
								}
							}
							break;
						case INTERIOR_TYPE_SHOWWINDOW:
							for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
							{
								if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildShowwindowMax[xMap.nowFloor][k])
								{
									nextLv = k;
									break;
								}
							}
							break;
                                
                        }
						
                        
						
                            if(nextLv == -1)
                            {
                                drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                                drawPacker(imgLock2, subTemp[XPOS], subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VH);
                                
                                
                                setFontSize(8);
                                gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-55+7, "최대설치 개수 달성", VH, 238, 0, 0, 44, 27, 26);
                                
                                sprintf(strTempS, "(%d/%d)",xInterior.buildlimitNum[xMap.nowFloor][xMap.type],xInterior.buildlimitMax[xMap.nowFloor][xMap.type]);
                                gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-55+15+7, strTempS, VH, 238, 0, 0, 44, 27, 26);
                                setFontSize(11);
                            }
                            else
                            {
                                drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+23, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
                                sprintf(strTempS,"Lv.%d%d", nextLv/10,nextLv%10);
                                gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+30, strTempS, VL, 86, 255, 220, 33, 20, 20);
                                
                                setFontSize(8);
                                sprintf(strTempS, "%d개 모두 사용중",xInterior.buildlimitNum[xMap.nowFloor][xMap.type]);
                                gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+50, strTempS, VH, 86, 255, 220, 33, 20, 20);
                                setFontSize(11);
                            }
                        

						
					}
					
				
					
										
					
					if(page == 0)
					{
						xTouchInteriorS[i].wPos = imgW(imgProductionMenuSlot0);
						xTouchInteriorS[i].hPos = imgH(imgProductionMenuSlot0);
						xTouchInteriorS[i].xPos = subTemp[XPOS] - xTouchInteriorS[i].wPos/2;
						xTouchInteriorS[i].yPos = subTemp[YPOS] - xTouchInteriorS[i].hPos/2;
						/*
						 gSetColor(255, 0, 0);
						 setAlpha(100);
						 fillRect(xTouchCatalogS[0].xPos, xTouchCatalogS[0].yPos, xTouchCatalogS[0].wPos, xTouchCatalogS[0].hPos);
						 setAlpha(ALPHA_MAX);
						 */
						
						xTouchInteriorBtn[i][0].wPos = 60;
						xTouchInteriorBtn[i][0].hPos = 120;
						xTouchInteriorBtn[i][0].xPos = subTemp[XPOS]-40 - xTouchInteriorBtn[i][0].wPos/2;
						xTouchInteriorBtn[i][0].yPos = subTemp[YPOS] - xTouchInteriorBtn[i][0].hPos/2;
						
						xTouchInteriorBtn[i][1].wPos = 60;
						xTouchInteriorBtn[i][1].hPos = 120;
						xTouchInteriorBtn[i][1].xPos = subTemp[XPOS]+40 - xTouchInteriorBtn[i][1].wPos/2;
						xTouchInteriorBtn[i][1].yPos = subTemp[YPOS] - xTouchInteriorBtn[i][1].hPos/2;
						
						/*
						 gSetColor(255, 0, 0);
						 setAlpha(100);
						 fillRect(xTouchInteriorBtn[i][0].xPos, xTouchInteriorBtn[i][0].yPos, xTouchInteriorBtn[i][0].wPos, xTouchInteriorBtn[i][0].hPos);
						 fillRect(xTouchInteriorBtn[i][1].xPos, xTouchInteriorBtn[i][1].yPos, xTouchInteriorBtn[i][1].wPos, xTouchInteriorBtn[i][1].hPos);
						 setAlpha(ALPHA_MAX);
						 */
					}
				}
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
		subTemp[XPOS] = px+40-340-3;
		subTemp[YPOS] = py+30;
		if(xDragScrollInteriorS.selectNum > 0)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchLeft.wPos = 80;
		xNoticeWorldMap.xTouchLeft.hPos = 80;
		xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
		xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		
		subTemp[XPOS] = px+40+340;
		subTemp[YPOS] = py+30;
		if(xDragScrollInteriorS.selectNum < xDragScrollInteriorS.totalNum-1)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchRight.wPos = 80;
		xNoticeWorldMap.xTouchRight.hPos = 80;
		xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
		xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		
		int netxtLv = DONT;
			
		//전체 블라인딩 처리			
		if(xInterior.selectTabB == 0 && xInterior.buildlimitNum[xMap.nowFloor][xMap.type] >= xInterior.buildlimitMax[xMap.nowFloor][xMap.type])
		{
			switch(xMap.type)
			{
			case INTERIOR_TYPE_FITTINGROOM:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildFittingRoomMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			case INTERIOR_TYPE_HANGER:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildHangerMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			case INTERIOR_TYPE_ACCESSORY:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildAccecssoryMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			case INTERIOR_TYPE_PRODUCTION:
				break;
			case INTERIOR_TYPE_SHOWWINDOW:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildShowwindowMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			}
						
			if(netxtLv == -1)
				netxtLv = 99;
			
		}
		break;
	}
	
	
	subTemp[XPOS] = px+431;
	subTemp[YPOS] = py-282;
	
	
	drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);

	
	xTouchClr.wPos = imgW(imgBtn0);
	xTouchClr.hPos = imgH(imgBtn0)/2;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	/*
	gSetColor(255,0,0);
	setAlpha(100);
	fillRect(xTouchClr.xPos,xTouchClr.yPos,xTouchClr.wPos,xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	switch(xInterior.state)
	{
	case INTERIOR_STATE_SELLPOPUP:
		drawInteriorSellPopup();
		break;
	case INTERIOR_STATE_TEAM:
		drawInteriorTeam();
		break;
	}
}


void drawThemaIcon(int x, int y,int code)
{
	if(imgThemaIconB[code].texture == NULL)
	{
		sprintf(strTempS, "themaicon%d.png",code);
		loadImgDocuments(strTempS, &imgThemaIconB[code]);
	}
	drawImage(&imgThemaIconB[code], x,y, 0, 0, imgThemaIconB[code].w, imgThemaIconB[code].h, VH);
}


void drawInteriorTeam()
{
	int px = cx;
	int py = cy;
	int iMax;
	int pos;
	int sale;
	drawPacker(imgInteriorTeamBg, px, py, 0, 0, imgW(imgInteriorTeamBg), imgH(imgInteriorTeamBg), VH);
	
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = px+290-xTouchClr.wPos/2;
	xTouchClr.yPos = py-140-xTouchClr.hPos/2;

	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	//세부메뉴
	xInterior.xDragScrollTeam.totalNum = xInterior.xSlotS[xInterior.selectSlotS].totalTeam;
	xInterior.xDragScrollTeam.posGab = 148;
	
	xInterior.xDragScrollTeam.endPos = -(((xInterior.xDragScrollTeam.totalNum-4)*xInterior.xDragScrollTeam.posGab));
	
	if(xInterior.xDragScrollTeam.totalNum < 4)
		xInterior.xDragScrollTeam.endPos = 0;
	
	iMax = xInterior.xDragScrollTeam.totalNum;
	dragScrollPrc(&xInterior.xDragScrollTeam,1,FALSE);
		
	setMapData(xInterior.xSlotS[xInterior.selectSlotS].codeTeam[0]);
	gDrawStringBold(px, py-94, xObj.xObjData[xMap.type][xMap.listNum].strName, VH, 255, 255, 255, 82, 49, 38);
	gSetClip(true,px-310, 0, 613, lcdH);
	for(int i=0;i<iMax;i++)
	{
		pos = xInterior.xDragScrollTeam.pos+(xInterior.xDragScrollTeam.posGab*i);
		subTemp[XPOS] = px-228+pos;
		subTemp[YPOS] = py+5;

		if(subTemp[XPOS] < -xInterior.xDragScrollTeam.posGab)
			continue;
		setMapData(xInterior.xSlotS[xInterior.selectSlotS].codeTeam[i]);
		sale = xInterior.xSlotS[xInterior.selectSlotS].sale;
		
	
		drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
		
		
		
		setDrawObjCenter(xMap.type,xMap.listNum);
		if(xDrawObjCenter.reSize != 100)
		{
			xGame.fgameScaleCx =subTemp[XPOS];
			xGame.fgameScaleCy =lcdH-subTemp[YPOS];
			xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
		}
		drawObj(subTemp[XPOS]+xDrawObjCenter.w,subTemp[YPOS]+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
		xGame.fgameScale = 1.0f;
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
		/*
		gSetColor(44, 27, 26);
		setLabelWidth(150);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+88, xObj.xObjData[xMap.type][xMap.listNum].strName, VH);
		setLabelWidth(0);
		*/
		
		//획득경험치
		drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+88, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
		
		drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+88, imgW(imgProductionMenuObj0)/8*2, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
		sprintf(strTempS,"%d",xObj.xObjData[xMap.type][xMap.listNum].fame);
		gSetColor(44, 27, 26);
		gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+88, strTempS, VR);
		//오픈가격
		drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+88+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
		drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+88+22, imgW(imgProductionMenuObj0)/8*xObj.xObjData[xMap.type][xMap.listNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
		
		if(sale > 0)
		{
			gSetColor(124, 124, 124);
			setFontSize(8);
			setCommaNum(strTempS, xObj.xObjData[xMap.type][xMap.listNum].price.oriData);
			gDrawString(subTemp[XPOS]-63+22, subTemp[YPOS]+88+22, strTempS, VL);
			setFontSize(11);
			drawPacker(imgSlotSale3,subTemp[XPOS]-63+22,subTemp[YPOS]+88+22, 0, 0, imgW(imgSlotSale3), imgH(imgSlotSale3), VL);

			gSetColor(251, 0, 7);
		}
		else
			gSetColor(44, 27, 26);
		setCommaNum(strTempS, xObj.xObjData[xMap.type][xMap.listNum].price.oriData-(xObj.xObjData[xMap.type][xMap.listNum].price.oriData*sale/100));
		gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+88+22, strTempS, VR);
				
		//레벨제한
		if(xSaveTemp.lv.oriData < xObj.xObjData[xMap.type][xMap.listNum].lv)
		{
			drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
			drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+43-40, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
			sprintf(strTempS,"Lv.%d%d", xObj.xObjData[xMap.type][xMap.listNum].lv/10,xObj.xObjData[xMap.type][xMap.listNum].lv%10);
			gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+50, strTempS, VL, 255, 255, 255, 44, 27, 26);
		}
		else if(xInterior.buildlimitNum[xMap.nowFloor][xMap.type] >= xInterior.buildlimitMax[xMap.nowFloor][xMap.type])
		{
			int netxtLv = DONT;
			switch(xMap.type)
			{
			case INTERIOR_TYPE_FITTINGROOM:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildFittingRoomMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			case INTERIOR_TYPE_HANGER:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildHangerMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			case INTERIOR_TYPE_ACCESSORY:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildAccecssoryMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			case INTERIOR_TYPE_SHOWWINDOW:
				for(int k=xSaveTemp.lv.oriData;k<LVUPDATAMAX;k++)
				{
					if(xInterior.buildlimitMax[xMap.nowFloor][xMap.type] < xBalanceData.buildShowwindowMax[xMap.nowFloor][k])
					{
						netxtLv = k;
						break;
					}
				}
				break;
			}						

			if(netxtLv == -1)
			{
				drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
				drawPacker(imgLock2, subTemp[XPOS], subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VH);
				
				
				setFontSize(8);
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-55+7, "최대설치 개수 달성", VH, 238, 0, 0, 44, 27, 26);
				sprintf(strTempS, "(%d/%d)",xInterior.buildlimitNum[xMap.nowFloor][xMap.type],xInterior.buildlimitMax[xMap.nowFloor][xMap.type]);
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-55+15+7, strTempS, VH, 238, 0, 0, 44, 27, 26);
				setFontSize(11);
			}
			else
			{
				drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+23, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
				sprintf(strTempS,"Lv.%d%d", netxtLv/10,netxtLv%10);
				gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+30, strTempS, VL, 86, 255, 220, 33, 20, 20);
				
				setFontSize(8);
				sprintf(strTempS, "%d개 모두 사용중",xInterior.buildlimitNum[xMap.nowFloor][xMap.type]);
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+50, strTempS, VH, 86, 255, 220, 33, 20, 20);
				setFontSize(11);
			}
		}
		
		xQuestInfo.isCC = FALSE;
		for(int cc=0;cc<xQuestInfo.totalInteriorSlotCode;cc++)
		{
			if(xQuestInfo.interiorSlotCode[cc] == ((xMap.type*1000)+xMap.listNum))
				xQuestInfo.isCC = TRUE;
		}
		if(xQuestInfo.isCC == TRUE)
			drawProductionArrow(subTemp[XPOS], subTemp[YPOS]-80);
		
		
		
		
		
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	
	subTemp[XPOS] = px-228;
	subTemp[YPOS] = py+5;

	
	//거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
	
	xInterior.xDragScrollTeam.selectNum = (-xInterior.xDragScrollTeam.pos/xInterior.xDragScrollTeam.posGab);
	for(int i=0;i<4;i++)
	{
		xTouchInteriorS[i].wPos = xInterior.xDragScrollTeam.posGab-4;
		xTouchInteriorS[i].hPos = 180;
		xTouchInteriorS[i].xPos = subTemp[XPOS]+(xInterior.xDragScrollTeam.posGab*i)+(xInterior.xDragScrollTeam.pos%xInterior.xDragScrollTeam.posGab) - xTouchInteriorS[i].wPos/2;
		xTouchInteriorS[i].yPos = subTemp[YPOS] - xTouchInteriorS[i].hPos/2;

		/*

		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xTouchInteriorS[i].xPos, xTouchInteriorS[i].yPos, xTouchInteriorS[i].wPos, xTouchInteriorS[i].hPos);
		 setAlpha(ALPHA_MAX);
		 */
	}
}

void drawInteriorSellPopup()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);

	gSetColor(255, 62, 198);
	setFontSize(20);
	gDrawStringBold(px+118, py-111, "판매확인", VH, 97, 255, 227, 44, 27, 26);
	setFontSize(11);
		
	setMapData(xInterior.xSellSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
	
	subTemp[XPOS] = px-164;
	subTemp[YPOS] = py-60;
	drawImage(&imgLvUp[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgLvUp[2].w, imgLvUp[2].h, VH);
	
	
	setDrawObjCenter(xMap.type,xMap.listNum);
	if(xDrawObjCenter.reSize != 100)
	{
		xGame.fgameScaleCx =subTemp[XPOS];
		xGame.fgameScaleCy =lcdH-subTemp[YPOS];
		xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
	}
	drawObj(subTemp[XPOS]+xDrawObjCenter.w,subTemp[YPOS]+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
	xGame.fgameScale = 1.0f;
	xGame.fgameScaleCx =cx;
	xGame.fgameScaleCy =cy;
	
	
	if(xInterior.xSellSlot.num > 1)
	{
		drawPacker(imgMenu13, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgMenu13), imgH(imgMenu13), VH);

		xTouchArrowLeft.wPos = imgW(imgMenu13)/2;
		xTouchArrowLeft.hPos = imgH(imgMenu13);
		xTouchArrowLeft.xPos = subTemp[XPOS]-xTouchArrowLeft.wPos;
		xTouchArrowLeft.yPos = subTemp[YPOS]-xTouchArrowLeft.hPos/2;
		
		xTouchArrowRight.wPos = imgW(imgMenu13)/2;
		xTouchArrowRight.hPos = imgH(imgMenu13);
		xTouchArrowRight.xPos = subTemp[XPOS];
		xTouchArrowRight.yPos = subTemp[YPOS]-xTouchArrowRight.hPos/2;
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xTouchArrowLeft.xPos, xTouchArrowLeft.yPos, xTouchArrowLeft.wPos, xTouchArrowLeft.hPos);
		fillRect(xTouchArrowRight.xPos, xTouchArrowRight.yPos, xTouchArrowRight.wPos, xTouchArrowRight.hPos);
		setAlpha(ALPHA_MAX);
		 */
	}
	
	
	subTemp[XPOS] = px-164;
	subTemp[YPOS] = py+75;
	
	
	drawPacker(imgInfoBar6, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgInfoBar6), imgH(imgInfoBar6), VH);
	gSetColor(82, 49, 38);
	sprintf(strTempS, "%d개",xInterior.sellNum);
	setFontSize(14);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
	setFontSize(11);
		
	
	subTemp[XPOS] = px+118;
	subTemp[YPOS] = py+75;

	drawPacker(imgInfoBar6, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgInfoBar6), imgH(imgInfoBar6), VH);
	drawIcon(subTemp[XPOS]-66,subTemp[YPOS], ICON_TYPE_GOLD);
		
	gSetColor(82, 49, 38);
	if(xObj.xObjData[xMap.type][xMap.listNum].priceType == 0)
		sprintf(strTempS, "%d",(xObj.xObjData[xMap.type][xMap.listNum].price.oriData*INTERIORSELLPER/100)*xInterior.sellNum);
	else
		sprintf(strTempS, "%d",(xObj.xObjData[xMap.type][xMap.listNum].price.oriData*INTERIORSELLCASH)*xInterior.sellNum);
	setFontSize(14);
	gDrawString(subTemp[XPOS]+66+4,subTemp[YPOS], strTempS, VR);
	setFontSize(11);
	
	
	subTemp[XPOS] = px+118;
	subTemp[YPOS] = py-35;
	gSetColor(82, 49, 38);
	
	

	
	sprintf(strTempB, "<%s>%d개를\n판매하시겠습니까?",xObj.xObjData[xMap.type][xMap.listNum].strName,xInterior.sellNum);
	setFontSize(14);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempB, VH);
	setFontSize(11);
	
	
	drawBtn(px+100, py+158, BTN_OK_CONFIRM);
	drawBtn(px-100, py+158, BTN_CLR_CLEAR);
	

	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchOk.xPos, xTouchOk.yPos, xTouchOk.wPos, xTouchOk.hPos);
	 fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	 setAlpha(ALPHA_MAX);
	 */
}






void setFittingTabChange()
{
	int type;
	int list;
	
	xFitting.selectSlot = DONT;
	xFitting.totalSlot[xFitting.selectTabB] = 0;
	
    
    if(xWorldMap.state == WORLDMAP_STATE_CLUBLOBBY
       && xClubLobby.selectMenu == CLUBLOBBY_MENU_FASHIONWEEK
       && (xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_FITTING || xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_LOBBY))
    {
        if(xFitting.selectTabB >= FITTINGTABMAX+2)
            xFitting.selectTabB = 0;
        switch(xFitting.selectTabB)
        {
        case 0:	//헤어
            for(int t=0;t<xFashionWeek.totalHairList;t++)
            {
                //해당 성별만 넣어주자
                if(xFitting.gender == xHairData[xFashionWeek.xHairList[t].code].gender)
                {
                    xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]].isModelUse = FALSE;
                    xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]++].code = xFashionWeek.xHairList[t].code;
                }
            }
            break;
        case 1:	//표정
            for(int t=0;t<xFashionWeek.totalFaceList;t++)
            {
                //해당 성별만 넣어주자
                if(xFitting.gender == xFaceData[xFashionWeek.xFaceList[t].code].gender)
                {
                    xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]].isModelUse = FALSE;
                    xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]++].code = xFashionWeek.xFaceList[t].code;
                }
            }
            break;
        default:
            for(int t=0;t<xFashionWeek.totalFashionList[xFitting.selectTabB-2];t++)
            {
                type = xFashionWeek.xFashionList[xFitting.selectTabB-2][t].code/1000;
                list = xFashionWeek.xFashionList[xFitting.selectTabB-2][t].code%1000;
                //해당 성별만 넣어주자
                if(xFitting.gender == xFashionData[type][list].gender)
                {
                    xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]].isModelUse = false;
                    xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]++].code = xFashionWeek.xFashionList[xFitting.selectTabB-2][t].code;
                }
            }
            break;
        }
    }
    else
    {

        switch(xWorldMap.state)
        {	
        case WORLDMAP_STATE_FITTING:
                
                
            xFitting.sellTableItemNum[0] = 0;
            xFitting.sellTableItemNum[1] = 0;
                
                
            if(xFitting.selectTabB > 6)
                xFitting.selectTabB = 0;
            
            if(xWorldMap.isTuto == TRUE && (
            xQuestTuto.nowNum == TUTO_11_SHOWWINDOWSELECT
            || xQuestTuto.nowNum == TUTO_11_SHOWWINDOWLAYEREDSHOW
            || xQuestTuto.nowNum == TUTO_11_SHOWWINDOWLAYERED5
            || xQuestTuto.nowNum == TUTO_11_SHOWWINDOWRESET
            || xQuestTuto.nowNum == TUTO_11_RESULT
            ))
            {
                for(int tab=0;tab<7;tab++)
                    xFitting.totalSlot[tab] = 0;
                for(int tab=0;tab<7;tab++)
                {
                    for(int t=0;t<xCatalog.totalSlot[tab];t++)
                    {
                        type = xCatalog.xSlot[tab][t].code/1000;
                        list = xCatalog.xSlot[tab][t].code%1000;
                        //해당 성별만 넣어주자
                        if(xFitting.gender == xFashionData[type][list].gender)
                        {
                            xFitting.xSlot[tab][xFitting.totalSlot[tab]].isModelUse = FALSE;
                            xFitting.xSlot[tab][xFitting.totalSlot[tab]++].code = xCatalog.xSlot[xFitting.selectTabB][t].code;
                        }
                    }
                }
            }
            else if(xWorldMap.isTuto == TRUE && (
            xQuestTuto.nowNum == TUTO_12_SHOWWINDOWSELECT
            || xQuestTuto.nowNum == TUTO_12_SHOWWINDOWFITTING
            || xQuestTuto.nowNum == TUTO_12_SHOWWINDOWIN0
            || xQuestTuto.nowNum == TUTO_12_SHOWWINDOWIN1
            || xQuestTuto.nowNum == TUTO_12_SHOWWINDOWOUT
            || xQuestTuto.nowNum == TUTO_12_RESULT
            ))
            {
                for(int tab=0;tab<7;tab++)
                    xFitting.totalSlot[tab] = 0;

                type = 1000/1000;
                list = 1000%1000;
                //해당 성별만 넣어주자
                if(xFitting.gender == xFashionData[type][list].gender)
                {
                    xFitting.xSlot[1][xFitting.totalSlot[1]].isModelUse = FALSE;
                    xFitting.xSlot[1][xFitting.totalSlot[1]++].code = 1000;
                }
            
                type = 2000/1000;
                list = 2000%1000;
                //해당 성별만 넣어주자
                if(xFitting.gender == xFashionData[type][list].gender)
                {
                    xFitting.xSlot[2][xFitting.totalSlot[2]].isModelUse = FALSE;
                    xFitting.xSlot[2][xFitting.totalSlot[2]++].code = 2000;
                }
            }
            else
            {
                
                resetSellTableInfo(xMap.nowFloor);
                
                for(int tab=0;tab<7;tab++)
                {
                    xFitting.totalSlot[tab] = 0;
                    //진열중인상품 넣기
                    for(int ss=0;ss<xSell.totalTotal[xMap.nowFloor];ss++)
                    {
                        for(int ff=0;ff<xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].useTotal;ff++)
                        {
                            type = xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].xSlot[xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].useXslotNum[ff]].code/1000;
                            list = xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].xSlot[xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].useXslotNum[ff]].code%1000;
                            
                            if(tab == type)
                            {
                                M_Boolean isCheck = FALSE;
                                for(int kk=0;kk<xFitting.totalSlot[tab];kk++)
                                {
                                    if(xFitting.xSlot[tab][kk].code == xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].xSlot[xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].useXslotNum[ff]].code)
                                    {
                                        isCheck = TRUE;
                                        break;
                                    }
                                }
                                
                                                        
                                if(isCheck == FALSE)
                                {
                                    if(xFitting.gender == xFashionData[type][list].gender)
                                    {
                                        xFitting.xSlot[tab][xFitting.totalSlot[tab]].num = xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].xSlot[xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].useXslotNum[ff]].num;
                                        xFitting.xSlot[tab][xFitting.totalSlot[tab]].isModelUse = FALSE;
                                        xFitting.xSlot[tab][xFitting.totalSlot[tab]++].code = xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].xSlot[xSellTableInfo[xMap.nowFloor][xSell.tableNumSlot_Total[xMap.nowFloor][ss]].useXslotNum[ff]].code;
                                    }
                                    
                                    xFitting.sellTableItemNum[xFashionData[type][list].gender]++;
                                }
                            }
                        }
                    }
                }
            }
                
            break;
        case WORLDMAP_STATE_STAFF:
            if(xFitting.selectTabB > 5)
                xFitting.selectTabB = 0;
            switch(xFitting.selectTabB)
            {
            case 0:	//헤어
                for(int t=0;t<xStaff.totalSlot[xFitting.selectTabB];t++)
                {
                    //해당 성별만 넣어주자
                    if(xFitting.gender == xHairData[xStaff.xSlot[xFitting.selectTabB][t].code].gender)
                    {
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]].isModelUse = FALSE;
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]++].code = xStaff.xSlot[xFitting.selectTabB][t].code;
                    }
                }
                break;
            case 1:	//표정
                for(int t=0;t<xStaff.totalSlot[xFitting.selectTabB];t++)
                {
                    //해당 성별만 넣어주자
                    if(xFitting.gender == xFaceData[xStaff.xSlot[xFitting.selectTabB][t].code].gender)
                    {
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]].isModelUse = FALSE;
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]++].code = xStaff.xSlot[xFitting.selectTabB][t].code;
                    }
                }
                break;
            default:
                for(int t=0;t<xStaff.totalSlot[xFitting.selectTabB];t++)
                {
                    type = xStaff.xSlot[xFitting.selectTabB][t].code/1000;
                    list = xStaff.xSlot[xFitting.selectTabB][t].code%1000;
                    //해당 성별만 넣어주자
                    if(xFitting.gender == xFashionData[type][list].gender)
                    {
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]].isModelUse = FALSE;
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]++].code = xStaff.xSlot[xFitting.selectTabB][t].code;
                    }
                }
                break;
            }		
            break;
        default:
            if(xFitting.selectTabB > 6)
                xFitting.selectTabB = 0;
            for(int t=0;t<xCatalog.totalSlot[xFitting.selectTabB];t++)
            {
                type = xCatalog.xSlot[xFitting.selectTabB][t].code/1000;
                list = xCatalog.xSlot[xFitting.selectTabB][t].code%1000;
                //해당 성별만 넣어주자
                if(xInventoryFashion.isOpen[type][list] == TRUE)
                {
                    if(xFitting.gender == xFashionData[type][list].gender)
                    {
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]].isModelUse = checkModelFittingCode(xCatalog.xSlot[xFitting.selectTabB][t].code,xModelFitting.inventoryNum);
                        xFitting.xSlot[xFitting.selectTabB][xFitting.totalSlot[xFitting.selectTabB]++].code = xCatalog.xSlot[xFitting.selectTabB][t].code;
                        
                    }
                }
            }
            break;
        }
    }
	

	if(xSaveTemp.lv.oriData >= 46)
		xFitting.fittingLayeredMax = 15;
	if(xSaveTemp.lv.oriData >= 41)
		xFitting.fittingLayeredMax = 14;
	if(xSaveTemp.lv.oriData >= 36)
		xFitting.fittingLayeredMax = 13;
	if(xSaveTemp.lv.oriData >= 31)
		xFitting.fittingLayeredMax = 12;
	if(xSaveTemp.lv.oriData >= 26)
		xFitting.fittingLayeredMax = 11;
	if(xSaveTemp.lv.oriData >= 21)
		xFitting.fittingLayeredMax = 10;
	if(xSaveTemp.lv.oriData >= 16)
		xFitting.fittingLayeredMax = 9;
	if(xSaveTemp.lv.oriData >= 11)
		xFitting.fittingLayeredMax = 8;
	else
		xFitting.fittingLayeredMax = 7;	
}

void setCatalogTabChange(int tabS)
{
	M_Boolean isCheck;
	int openNum = 0;
	xCatalog.totalSlotS = 0;
	int checkSort = 0;
	
	switch(tabS)
	{
	case 0://아우터
	case 1://상의
	case 2://하의
	case 3://원피스
	case 4://신발
	case 5://가방
	case 6://악세사리
		for(int i=0;i<xCatalog.totalSlot[xCatalog.selectTabS];i++)
		{
			setMapData(xCatalog.xSlot[xCatalog.selectTabS][i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
			if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == TRUE)
			{
				isCheck = TRUE;
				openNum = xCatalog.totalSlotS;
				switch(xFashionData[xMap.type][xMap.listNum].isStaff)
				{
				case 0:	//일반
				case 3:	//레깅스
					break;
				default:
					isCheck = FALSE;
					break;
				}
				if(isCheck == TRUE)
					memcpy(&xCatalog.xSlotS[xCatalog.totalSlotS++], &xCatalog.xSlot[xCatalog.selectTabS][i], sizeof(XCATALOGSLOT));
			}
		}
            
			
		if(xProductionMenu.isSortLv == TRUE)
		{
			for(int i=0;i<xCatalog.totalSlotS;i++)
			{
				int typeI = xCatalog.xSlotS[i].code/1000;
				int listNumI = xCatalog.xSlotS[i].code%1000;
				XCATALOGSLOT tempCode;
				for(int j=0;j<i;j++)
				{
					int typeJ = xCatalog.xSlotS[j].code/1000;
					int listNumJ = xCatalog.xSlotS[j].code%1000;
					
					if(xFashionData[typeI][listNumI].lv <xFashionData[typeJ][listNumJ].lv)
					{
						memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
						checkSort = j;
						for(int k=i;k>checkSort;k--)
							memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
						
						memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
						break;
					}
				}
			}
		}
			
		if(xProductionMenu.isSortTime == TRUE)
		{
			for(int i=0;i<xCatalog.totalSlotS;i++)
			{
				int typeI = xCatalog.xSlotS[i].code/1000;
				int listNumI = xCatalog.xSlotS[i].code%1000;
				XCATALOGSLOT tempCode;
				for(int j=0;j<i;j++)
				{
					int typeJ = xCatalog.xSlotS[j].code/1000;
					int listNumJ = xCatalog.xSlotS[j].code%1000;
					
					if(xFashionData[typeI][listNumI].makeTime.oriData <xFashionData[typeJ][listNumJ].makeTime.oriData)
					{
						memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
						checkSort = j;
						for(int k=i;k>checkSort;k--)
							memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
						
						memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
						break;
					}
				}
			}
		}
					
            
        if(xProductionMenu.sexSortState == 1)   //남
        {
            for(int i=0;i<xCatalog.totalSlotS;i++)
            {
                int typeI = xCatalog.xSlotS[i].code/1000;
                int listNumI = xCatalog.xSlotS[i].code%1000;
                XCATALOGSLOT tempCode;
                for(int j=0;j<i;j++)
                {
                    int typeJ = xCatalog.xSlotS[j].code/1000;
                    int listNumJ = xCatalog.xSlotS[j].code%1000;
                    
                    if(xFashionData[typeI][listNumI].gender == 1 && xFashionData[typeJ][listNumJ].gender == 0)
                    {
                        memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
                        checkSort = j;
                        for(int k=i;k>checkSort;k--)
                            memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
                        
                        memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
                        break;
                    }
                }
            }
            
        }
        else if(xProductionMenu.sexSortState == 2)   //여
        {
            for(int i=0;i<xCatalog.totalSlotS;i++)
            {
                int typeI = xCatalog.xSlotS[i].code/1000;
                int listNumI = xCatalog.xSlotS[i].code%1000;
                XCATALOGSLOT tempCode;
                for(int j=0;j<i;j++)
                {
                    int typeJ = xCatalog.xSlotS[j].code/1000;
                    int listNumJ = xCatalog.xSlotS[j].code%1000;
                    
                    if(xFashionData[typeI][listNumI].gender == 0 && xFashionData[typeJ][listNumJ].gender == 1)
                    {
                        memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
                        checkSort = j;
                        for(int k=i;k>checkSort;k--)
                            memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
                        
                        memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
                        break;
                    }
                }
            }
        }
            
			
			
			
		for(int i=0;i<xCatalog.totalSlot[xCatalog.selectTabS];i++)
		{
			setMapData(xCatalog.xSlot[xCatalog.selectTabS][i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
			
			if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
			{
				switch(xFashionData[xMap.type][xMap.listNum].isStaff)
				{
				case 0:	//일반
				case 3:	//레깅스
					isCheck = TRUE;
					
					if(isCheck == TRUE)
						memcpy(&xCatalog.xSlotS[xCatalog.totalSlotS++], &xCatalog.xSlot[xCatalog.selectTabS][i], sizeof(XCATALOGSLOT));
					break;
				}
			}
		}
						
			
		if(xProductionMenu.isSortLv == TRUE)
		{
			for(int i=0;i<xCatalog.totalSlotS;i++)
			{
				int typeI = xCatalog.xSlotS[i].code/1000;
				int listNumI = xCatalog.xSlotS[i].code%1000;
				if(xInventoryFashion.isOpen[typeI][listNumI] == FALSE)
				{
					XCATALOGSLOT tempCode;
					for(int j=0;j<i;j++)
					{
						int typeJ = xCatalog.xSlotS[j].code/1000;
						int listNumJ = xCatalog.xSlotS[j].code%1000;
						if(xInventoryFashion.isOpen[typeJ][listNumJ] == FALSE)
						{
							if(xFashionData[typeI][listNumI].lv < xFashionData[typeJ][listNumJ].lv)
							{
								memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
								checkSort = j;
								for(int k=i;k>checkSort;k--)
									memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));

								memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
								break;
							}
						}
					}
				}
			}
		}
			
		if(xProductionMenu.isSortTime == TRUE)
		{
			for(int i=0;i<xCatalog.totalSlotS;i++)
			{
				int typeI = xCatalog.xSlotS[i].code/1000;
				int listNumI = xCatalog.xSlotS[i].code%1000;
				if(xInventoryFashion.isOpen[typeI][listNumI] == FALSE)
				{
					XCATALOGSLOT tempCode;
					for(int j=0;j<i;j++)
					{
						int typeJ = xCatalog.xSlotS[j].code/1000;
						int listNumJ = xCatalog.xSlotS[j].code%1000;
						if(xInventoryFashion.isOpen[typeJ][listNumJ] == FALSE)
						{
							if(xFashionData[typeI][listNumI].makeTime.oriData < xFashionData[typeJ][listNumJ].makeTime.oriData)
							{
								memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
								checkSort = j;
								for(int k=i;k>checkSort;k--)
									memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));

								memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
								break;
							}
						}
					}
				}
			}
		}
            
            
        if(xProductionMenu.sexSortState == 1)   //남
        {
            for(int i=0;i<xCatalog.totalSlotS;i++)
            {
                int typeI = xCatalog.xSlotS[i].code/1000;
                int listNumI = xCatalog.xSlotS[i].code%1000;
                if(xInventoryFashion.isOpen[typeI][listNumI] == FALSE)
                {
                    XCATALOGSLOT tempCode;
                    for(int j=0;j<i;j++)
                    {
                        int typeJ = xCatalog.xSlotS[j].code/1000;
                        int listNumJ = xCatalog.xSlotS[j].code%1000;
                        if(xInventoryFashion.isOpen[typeJ][listNumJ] == FALSE)
                        {
                            if(xFashionData[typeI][listNumI].gender == 1 && xFashionData[typeJ][listNumJ].gender == 0)
                            {
                                memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
                                checkSort = j;
                                for(int k=i;k>checkSort;k--)
                                    memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
                                
                                memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
                                break;
                            }
                        }
                    }
                }
            }
            
        }
        else if(xProductionMenu.sexSortState == 2)   //여
        {
            for(int i=0;i<xCatalog.totalSlotS;i++)
            {
                int typeI = xCatalog.xSlotS[i].code/1000;
                int listNumI = xCatalog.xSlotS[i].code%1000;
                XCATALOGSLOT tempCode;
                if(xInventoryFashion.isOpen[typeI][listNumI] == FALSE)
                {
                    for(int j=0;j<i;j++)
                    {
                        int typeJ = xCatalog.xSlotS[j].code/1000;
                        int listNumJ = xCatalog.xSlotS[j].code%1000;
                        if(xInventoryFashion.isOpen[typeJ][listNumJ] == FALSE)
                        {
                            if(xFashionData[typeI][listNumI].gender == 0 && xFashionData[typeJ][listNumJ].gender == 1)
                            {
                                memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
                                checkSort = j;
                                for(int k=i;k>checkSort;k--)
                                    memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
                                
                                memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
                                break;
                            }
                        }
                    }
                }
            }
        }
            
            
		break;
	case 7://오픈된
		for(int tt=0;tt<7;tt++)
		{
			for(int i=0;i<xCatalog.totalSlot[tt];i++)
			{
				setMapData(xCatalog.xSlot[tt][i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == TRUE)
				{
					isCheck = TRUE;
					openNum = xCatalog.totalSlotS;
					switch(xFashionData[xMap.type][xMap.listNum].isStaff)
					{
						case 0:	//일반
						case 3:	//레깅스
							break;
						default:
							isCheck = FALSE;
							break;
					}
					if(isCheck == TRUE)
						memcpy(&xCatalog.xSlotS[xCatalog.totalSlotS++], &xCatalog.xSlot[tt][i], sizeof(XCATALOGSLOT));
				}
			}
		}
						
		if(xProductionMenu.isSortLv == TRUE)
		{
			for(int i=0;i<xCatalog.totalSlotS;i++)
			{
				int typeI = xCatalog.xSlotS[i].code/1000;
				int listNumI = xCatalog.xSlotS[i].code%1000;
				XCATALOGSLOT tempCode;
				for(int j=0;j<i;j++)
				{
					int typeJ = xCatalog.xSlotS[j].code/1000;
					int listNumJ = xCatalog.xSlotS[j].code%1000;
					
					if(xFashionData[typeI][listNumI].lv <xFashionData[typeJ][listNumJ].lv)
					{
						memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
						checkSort = j;
						for(int k=i;k>checkSort;k--)
							memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
						memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
						break;
					}
				}
			}
		}
		
		if(xProductionMenu.isSortTime == TRUE)
		{
			for(int i=0;i<xCatalog.totalSlotS;i++)
			{
				int typeI = xCatalog.xSlotS[i].code/1000;
				int listNumI = xCatalog.xSlotS[i].code%1000;
				XCATALOGSLOT tempCode;
				for(int j=0;j<i;j++)
				{
					int typeJ = xCatalog.xSlotS[j].code/1000;
					int listNumJ = xCatalog.xSlotS[j].code%1000;
					
					if(xFashionData[typeI][listNumI].makeTime.oriData <xFashionData[typeJ][listNumJ].makeTime.oriData)
					{
						memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
						checkSort = j;
						for(int k=i;k>checkSort;k--)
							memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
						memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
						break;
					}
				}
			}
		}
            
            
            
    
        if(xProductionMenu.sexSortState == 1)   //남
        {
            for(int i=0;i<xCatalog.totalSlotS;i++)
            {
                int typeI = xCatalog.xSlotS[i].code/1000;
                int listNumI = xCatalog.xSlotS[i].code%1000;
                XCATALOGSLOT tempCode;
                for(int j=0;j<i;j++)
                {
                    int typeJ = xCatalog.xSlotS[j].code/1000;
                    int listNumJ = xCatalog.xSlotS[j].code%1000;
                    
                    if(xFashionData[typeI][listNumI].gender == 1 && xFashionData[typeJ][listNumJ].gender == 0)
                    {
                        memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
                        checkSort = j;
                        for(int k=i;k>checkSort;k--)
                            memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
                        
                        memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
                        break;
                    }
                }
            }
            
        }
        else if(xProductionMenu.sexSortState == 2)   //여
        {
            for(int i=0;i<xCatalog.totalSlotS;i++)
            {
                int typeI = xCatalog.xSlotS[i].code/1000;
                int listNumI = xCatalog.xSlotS[i].code%1000;
                XCATALOGSLOT tempCode;
                for(int j=0;j<i;j++)
                {
                    int typeJ = xCatalog.xSlotS[j].code/1000;
                    int listNumJ = xCatalog.xSlotS[j].code%1000;
                    
                    if(xFashionData[typeI][listNumI].gender == 0 && xFashionData[typeJ][listNumJ].gender == 1)
                    {
                        memcpy(&tempCode, &xCatalog.xSlotS[i], sizeof(XCATALOGSLOT));
                        checkSort = j;
                        for(int k=i;k>checkSort;k--)
                            memcpy(&xCatalog.xSlotS[k], &xCatalog.xSlotS[k-1], sizeof(XCATALOGSLOT));
                        
                        memcpy(&xCatalog.xSlotS[checkSort], &tempCode, sizeof(XCATALOGSLOT));
                        break;
                    }
                }
            }
        }
		break;
	/*
	case 7://최근생산
		
		for(int i=0;i<xSave.totalProductionRecord;i++)
		{
			setMapData(xSave.productionRecord[i]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			isCheck = FALSE;
			switch(xCatalog.selectTabList)
			{
			case DONT:
				isCheck = TRUE;
				break;
			}
			
			if(isCheck == TRUE)
				xCatalog.xSlotS[xCatalog.totalSlotS++].code = xSave.productionRecord[i];
		}
		break;
	*/
	}
	for(int i=0;i<xCatalog.totalSlotS;i++)
		xCatalog.xSlotS[i].isInfoOpen = FALSE;
		
	xDragScrollCatalogS.selectNum = openNum/8;
}

void setInteriorTabChange()
{
	M_Boolean isCheck;
	int checkNum;
	xInterior.selectSlotS = DONT;
	xInterior.totalNumS = 0;
	/*
	xDragScrollInteriorS.selectNum = 0;
	xDragScrollInteriorS.touchXpos = DONT;
	xDragScrollInteriorS.touchYpos = DONT;
	xDragScrollInteriorS.touchXposBefore = DONT;
	xDragScrollInteriorS.touchYposBefore = DONT;
	xDragScrollInteriorS.selectNum = 0;
	xDragScrollInteriorS.pos = 0;
	xDragScrollInteriorS.speed = 0;
	*/
	
	
	
	switch(xInterior.selectTabB)
	{
	case 0:	//기능성
		for(int z=0;z<xInterior.totalNum;z++)
		{			
			for(int i=0;i<xInterior.totalSlot[z];i++)
			{
				isCheck = FALSE;
				setMapData(xInterior.xSlot[z][i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
								
				switch(xInterior.selectTabS)
				{
				case 0:		//옷걸이
					if(xMap.type == INTERIOR_TYPE_HANGER)
						isCheck = TRUE;
					break;
				case 1:		//진열대
					if(xMap.type == INTERIOR_TYPE_ACCESSORY)
						isCheck = TRUE;
					break;
				case 2:		//피팅룸
					if(xMap.type == INTERIOR_TYPE_FITTINGROOM)
						isCheck = TRUE;
					break;
				case 3:		//쇼윈도
					if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
						isCheck = TRUE;
					break;
				case 4:		//카운터
					if(xMap.type == INTERIOR_TYPE_PAYMENT)
						isCheck = TRUE;
					break;
                case 5:     //제작기
                    if(xMap.type == INTERIOR_TYPE_PRODUCTION)
                        isCheck = TRUE;
                    break;
				}
				
				if(xInterior.xSlot[z][i].totalTeam == 0)
					isCheck = FALSE;
				
				if(isCheck == TRUE)
				{
					memcpy(&xInterior.xSlotS[xInterior.totalNumS], &xInterior.xSlot[z][i], sizeof(xInterior.xSlot[z][i]));
					xInterior.totalNumS++;
				}
			}
		}
			
		
			
		break;
	case 1:	//꾸미기						
		for(int z=0;z<xInterior.totalNum;z++)
		{
			for(int i=0;i<xInterior.totalSlot[z];i++)
			{
				isCheck = FALSE;
				setMapData(xInterior.xSlot[z][i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				
				switch(xInterior.selectTabS)
				{
				case 0:		//바닥오브젝트
					if(xMap.type == INTERIOR_TYPE_OBJ)
						isCheck = TRUE;
					break;
				case 1:		//카페트
					if(xMap.type == INTERIOR_TYPE_OBJFLOOR)
					{
						isCheck = TRUE;
					}
					break;
				case 2:		//벽오브젝트
					if(xMap.type == INTERIOR_TYPE_WALLITEM)
						isCheck = TRUE;
					break;
				case 3:		//바닥지
					if(xMap.type == INTERIOR_TYPE_FLOORTILE)
						isCheck = TRUE;
					break;
				case 4:		//벽지
					if(xMap.type == INTERIOR_TYPE_WALLTILE)
						isCheck = TRUE;
					break;
				case 5:		//문
					if(xMap.type == INTERIOR_TYPE_DOOR)
						isCheck = TRUE;
					break;
				}
				if(xInterior.xSlot[z][i].totalTeam == 0)
					isCheck = FALSE;
				
				if(isCheck == TRUE)
				{
					memcpy(&xInterior.xSlotS[xInterior.totalNumS], &xInterior.xSlot[z][i], sizeof(xInterior.xSlot[z][i]));
					xInterior.totalNumS++;
				}
			}
		}
		break;
	case 2:	//외부
		break;
	case 3:	//테마
		for(int i=0;i<xInterior.totalSlotThema[xInterior.selectThema];i++)
		{			
			memcpy(&xInterior.xSlotS[xInterior.totalNumS], &xInterior.xSlotThema[xInterior.selectThema][i], sizeof(xInterior.xSlotThema[xInterior.selectThema][i]));
			xInterior.totalNumS++;
		}
		break;
	case 4://유료샵
		break;
	case 5:	//보유
		for(int i=0;i<xInventoryInterior.totalNum;i++)
		{
			if(xInventoryInterior.itemCode[i] == 0)
				continue;
            
			
			setMapData(xInventoryInterior.itemCode[i]);
			//넣어주기
			switch(xInterior.selectTabS)
			{
                case 0:		//꾸미기
                    switch(xMap.type)
                {
                    case INTERIOR_TYPE_PAYMENT:
                    case INTERIOR_TYPE_FITTINGROOM:
                    case INTERIOR_TYPE_HANGER:
                    case INTERIOR_TYPE_ACCESSORY:
                    case INTERIOR_TYPE_SHOWWINDOW:
                    case INTERIOR_TYPE_PRODUCTION:
                        continue;
                        break;
                    default:					
                        break;
                }
                    break;
			case 1:		//기능성
				switch(xMap.type)
				{
				case INTERIOR_TYPE_PAYMENT:
				case INTERIOR_TYPE_FITTINGROOM:
				case INTERIOR_TYPE_HANGER:
				case INTERIOR_TYPE_ACCESSORY:
				case INTERIOR_TYPE_SHOWWINDOW:
                case INTERIOR_TYPE_PRODUCTION:
					break;
				default:
					continue;
					break;
				}
				break;
			
			}
			
			
			xInterior.xSlotS[xInterior.totalNumS].isNew = FALSE;
			xInterior.xSlotS[xInterior.totalNumS].isHot = FALSE;
			xInterior.xSlotS[xInterior.totalNumS].isEvent = FALSE;
			xInterior.xSlotS[xInterior.totalNumS].sale = 0;
			
			isCheck =FALSE;
			for(int k=0;k<xInterior.totalNumS;k++)
			{
				if(xInterior.xSlotS[k].codeTeam[0] == (xMap.type*1000)+xMap.listNum)
				{
					isCheck = TRUE;
					checkNum = k;
					break;
				}
			}			
			//새로 넣기
			if(isCheck == FALSE)
			{
				xInterior.xSlotS[xInterior.totalNumS].totalTeam = 1;
				xInterior.xSlotS[xInterior.totalNumS].num = 1;
				xInterior.xSlotS[xInterior.totalNumS++].codeTeam[0] = (xMap.type*1000)+xMap.listNum;
			}
			else	//기존꺼에 넣기
			{
				xInterior.xSlotS[checkNum].num++;
			}
			
		}
		break;
	}
	
	switch(xInterior.selectTabB)
	{
	case 2:
		xInterior.state = INTERIOR_STATE_EXTERNAL;
		break;
	case 3:
		xInterior.state = INTERIOR_STATE_THEMASELECT;
		break;
	case 4:
		xInterior.state = INTERIOR_STATE_CASHSHOP;
		break;
	default:
		xInterior.state = INTERIOR_STATE_PLAY;
		break;
	}
}




void setBuildCheck()
{
	//0카운터
	//1피팅룸
	//2옷걸이
	//3진열대
	//4쇼윈도
	//5생산기
	for(int i=0;i<OBJMAX;i++)
	{
		
		xInterior.buildlimitMax[xMap.nowFloor][i] = 999;
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			xInterior.buildlimitNum[floor][i] = 0;
		}
	}
	
	//총 지을수 있는 인테리어설정
	xInterior.buildlimitMax[xMap.nowFloor][INTERIOR_TYPE_FITTINGROOM] =	xBalanceData.buildFittingRoomMax[xMap.nowFloor][xSaveTemp.lv.oriData];
	xInterior.buildlimitMax[xMap.nowFloor][INTERIOR_TYPE_HANGER] =			xBalanceData.buildHangerMax[xMap.nowFloor][xSaveTemp.lv.oriData];
	xInterior.buildlimitMax[xMap.nowFloor][INTERIOR_TYPE_ACCESSORY] =		xBalanceData.buildAccecssoryMax[xMap.nowFloor][xSaveTemp.lv.oriData];
	xInterior.buildlimitMax[xMap.nowFloor][INTERIOR_TYPE_SHOWWINDOW] =		xBalanceData.buildShowwindowMax[xMap.nowFloor][xSaveTemp.lv.oriData];
	
    
    for(int k=0;k<xObj.totalNum[4];k++)
    {
        xFormer.buildlimitMax[k]=1;
    }
    
	//현재 설치된 인터리어타입파악
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		
		for (int y = xMap.shopPointY; y < xMap.shopPointY+xMap.shopPointH; y++)
		{
			for (int x = xMap.shopPointX; x < xMap.shopPointX+xMap.shopPointW; x++)
			{
				setMapData(xMap.data[floor][MAP_TYPE_OBJ][x][y]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				xInterior.buildlimitNum[floor][xMap.type]++;
			}
		}
		
		
		
		
		
		//등록된 벽아이템(레이어로 보기때문에 문,쇼윈도 포함이 되어있음 따로 처리 불필요)
		for(int w=0;w<xMap.shopPointW;w++)
		{
			if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
			{
				setMapData(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
				{
					xInterior.buildlimitNum[floor][INTERIOR_TYPE_SHOWWINDOW]++;
				}
			}
		}
		for(int h=0;h<xMap.shopPointH;h++)
		{
			
			if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
			{
				setMapData(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
				{
					xInterior.buildlimitNum[floor][INTERIOR_TYPE_SHOWWINDOW]++;
				}
			}
		}
	}
	
	
	
				
	for(int i=0;i<xEventQueue.totalNum;i++)
	{
		switch(xEventQueue.type[i])
		{
		case EVENTQUEUE_TYPE_INTERIOR:
		case EVENTQUEUE_TYPE_INPUTINVEN:
		case EVENTQUEUE_TYPE_OUTPUTINVEN:
		case EVENTQUEUE_TYPE_MOVE:
			setMapData(xEventQueue.xInteriorSlot[i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
            if(xMap.type==INTERIOR_TYPE_PRODUCTION)
            {
                xInterior.buildlimitNum[xEventQueue.floor[0]][xMap.type]++;
                xInterior.buildlimitNum[xEventQueue.floor[1]][xMap.type]++;
                xInterior.buildlimitNum[xEventQueue.floor[2]][xMap.type]++;
            }
            else
            {
                xInterior.buildlimitNum[xEventQueue.floor[i]][xMap.type]++;
            }
			break;
		}
	}
}

void setInteriorBuildMode(int slotNum,int teamNum)
{
	
	//현재 슬롯정보 통째로 복사
	if(xInterior.selectTabB == 5)
		xInterior.buildInType = INTERIORBUILD_TYPE_INVENTORY;
	else
		xInterior.buildInType = INTERIORBUILD_TYPE_SHOP;
	
			
		
	memcpy(&xInterior.xBuildSlot, &xInterior.xSlotS[slotNum], sizeof(XINTERIORSLOT));
	
	xInterior.xBuildSlot.codeTeam[0] = xInterior.xSlotS[slotNum].codeTeam[teamNum];
	
	setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
		
	
	
	//레벨제한
	if(xInterior.buildInType != INTERIORBUILD_TYPE_INVENTORY)
	{
		if(xSaveTemp.lv.oriData < xObj.xObjData[xMap.type][xMap.listNum].lv)
		{
			printf("레벨제한\n");
			return;
		}
	}
	//갯수제한
	if(xInterior.buildlimitNum[xMap.nowFloor][xMap.type] >= xInterior.buildlimitMax[xMap.nowFloor][xMap.type])
	{
		printf("갯수제한\n");
		return;
	}
	
	
		
	//인테리어 설치 모드로 전환
	interiorShopFreeLoad(FALSE);
    //인테리어 편집 UI 이미지 로드 KBY 2018.2.26
    interiorbuildFreeLoad_FP(true);
	xWorldMap.state = WORLDMAP_STATE_INTERIOR;
	
				
	checkBuildMapData();
	setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
	switch(xMap.type)
	{
	case INTERIOR_TYPE_WALLTILE:
	case INTERIOR_TYPE_WALLITEM:
	case INTERIOR_TYPE_SHOWWINDOW:
		xInterior.buildMapTileXpos = xMap.shopPointX + xMap.shopPointW/2;
		xInterior.buildMapTileYpos = xMap.shopPointY-1;
		xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
		break;
	case INTERIOR_TYPE_PAYMENT:
		//기존에 있던 계산대는 백업해두고 지워버리자
		//xPayMentInfo[xMap.nowFloor]	//안에 기존백업본이 들어가있다
			
		xPayMentInfo[xMap.nowFloor].interiorModeCode = xPayMentInfo[xMap.nowFloor].codeNum;
			
		xMap.data[xMap.nowFloor][MAP_TYPE_OBJ][xPayMentInfo[xMap.nowFloor].x][xPayMentInfo[xMap.nowFloor].y] = 0;
			
		if(xPayMentInfo[xMap.nowFloor].codeNum == 0)
		{
			xInterior.buildMapTileXpos = xMap.shopPointX + xMap.shopPointW/2;
			xInterior.buildMapTileYpos = xMap.shopPointY + xMap.shopPointH/2;
		}
		else
		{
			xInterior.buildMapTileXpos = xPayMentInfo[xMap.nowFloor].x;
			xInterior.buildMapTileYpos = xPayMentInfo[xMap.nowFloor].y;
		}

		if(xPayMentInfo[xMap.nowFloor].codeNum < 0)
			xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
			
		break;
	case INTERIOR_TYPE_DOOR:
		xMap.nowFloor = 0;
		//만약에 문이라면
		//기존에 있던 문은 백업해두고 지워버리자
		resetDoor();
		xMap.data[0][MAP_TYPE_WALL1][xWorldMap.doorX][xWorldMap.doorY] = 0;
		//그후에 설치취소,exit,shop버튼을 눌렀을때 백업문 복구해주고
		//설치완료하면 백업문 인벤에 넣어주기만 추가해주자
		if(xWorldMap.doorX != 0)
		{
			xInterior.buildMapTileXpos = xWorldMap.doorX;
			xInterior.buildMapTileYpos = xWorldMap.doorY;
			if(xWorldMap.doorCode < 0)
				xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
			else
				xInterior.xBuildSlot.codeTeam[0] = xInterior.xBuildSlot.codeTeam[0];
		}
		else
		{
			xInterior.buildMapTileXpos = xMap.shopPointX + xMap.shopPointW/2;
			xInterior.buildMapTileYpos = xMap.shopPointY-1;
			xInterior.xBuildSlot.codeTeam[0] = -xInterior.xBuildSlot.codeTeam[0];
		}		
		break;
	default:
		/////////////////중앙검사//////////////////
		int checkSize = 2;
		int checkX;
		int checkY;
		M_Boolean isCheck = FALSE;
		int resultX = xMap.shopPointX + xMap.shopPointW/2;
		int resultY = xMap.shopPointY + xMap.shopPointH/2;
			
		while(TRUE)
		{
			checkX = (xMap.shopPointX + xMap.shopPointW/2)-(checkSize/2);
			checkY = (xMap.shopPointY + xMap.shopPointH/2)-(checkSize/2);
			for(int x = 0;x<checkSize;x++)
			{
				for(int y = 0;y<checkSize;y++)
				{
					xInterior.buildMapTileXpos = checkX+x;
					xInterior.buildMapTileYpos = checkY+y;
					isSubTemp[0] = checkBuildPos(xMap.type,xMap.listNum,xMap.rever);
										
					//설치 가능
					if(isSubTemp[0] == FALSE)
					{
						isCheck = TRUE;
						resultX = xInterior.buildMapTileXpos;
						resultY = xInterior.buildMapTileYpos;
					}
					
					if(checkX+x > xMap.shopPointX+xMap.shopPointW-1
					   ||checkY+y > xMap.shopPointY+xMap.shopPointH-1)
					{
						isCheck = TRUE;
						resultX = xMap.shopPointX + xMap.shopPointW/2;
						resultY = xMap.shopPointY + xMap.shopPointH/2;
					}
					if(isCheck == TRUE)
						break;
				}
				if(isCheck == TRUE)
					break;
			}
			if(isCheck == TRUE)
				break;
			
			checkSize += 2;
		}
		xInterior.buildMapTileXpos = resultX;
		xInterior.buildMapTileYpos = resultY;
		////////////////////////////////////////////////////
		break;
	}
	
	
	
	
	

	int mapXpos,mapYpos;
	mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
	if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
		mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
	else
		mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
	
	xInterior.buildMapMoveXpos = getWorldMapPos(mapXpos, cx);
	xInterior.buildMapMoveYpos = getWorldMapPos(mapYpos+16, cy);
	
	
}

void setFame(int fame)
{
	int resultFame;
	resultFame = xSaveTemp.fame.oriData + fame;

	if(resultFame > xBalanceData.fameMax[xSaveTemp.lv.oriData])
		resultFame = xBalanceData.fameMax[xSaveTemp.lv.oriData];
	
	setSecurity(&xSaveTemp.fame,resultFame);
}



void setMileage(int mileage)
{
    setSecurity(&xSaveTemp.mileage, xSaveTemp.mileage.oriData+mileage);
    
    if(mileage > 0)
        setFiveRocksCustom("재화","마일리지획득","NULL","NULL",mileage);
    else
    {
        setFiveRocksCustom("재화","마일리지소모","NULL","NULL",-mileage);
    }
}



void setCash(int cash)
{
	setSecurity(&xSaveTemp.cash, xSaveTemp.cash.oriData+cash);
		
	if(cash > 0)
		setFiveRocksCustom("재화","캐시획득","NULL","NULL",cash);
	else
	{
		setFiveRocksCustom("재화","캐시소모","NULL","NULL",-cash);
		xWorldMap.isCashHacking = TRUE;
	}
}

void setMoney(int money)
{
	setSecurity(&xSaveTemp.money,xSaveTemp.money.oriData+money);
	setQuest(12, xSaveTemp.money.oriData, DONT);
	if(money > 0)
		setFiveRocksCustom("재화","골드획득","NULL","NULL",money);
	else
		setFiveRocksCustom("재화","골드소모","NULL","NULL",-money);
}

void setTired(int tired)
{
	setSecurity(&xSaveTemp.tired,xSaveTemp.tired.oriData+tired);
	if(tired > 0)
		setFiveRocksCustom("재화","캔디획득","NULL","NULL",tired);
	else
		setFiveRocksCustom("재화","캔디소모","NULL","NULL",-tired);
}

void setExp(int exp)
{
	if(xSaveTemp.lv.oriData < LVMAX)
		setSecurity(&xSaveTemp.exp, xSaveTemp.exp.oriData+exp);
	
	
}

void inputInventoryInterior(int itemCode)
{
	if(itemCode < 0)
		itemCode = -itemCode;
	xInventoryInterior.itemCode[xInventoryInterior.totalNum++] = itemCode;
}


void outputInventoryInterior(int itemCode)
{
	int outputIndex;
	outputIndex = DONT;
	
	if(itemCode < 0)
		itemCode = -itemCode;
	
	for(int i=0;i<xInventoryInterior.totalNum;i++)
	{
		if(xInventoryInterior.itemCode[i] == itemCode)
		{
			outputIndex = i;
		}
	}
	
	if(outputIndex != DONT)
	{
		for(int i=outputIndex;i<xInventoryInterior.totalNum;i++)
			xInventoryInterior.itemCode[i] = xInventoryInterior.itemCode[i+1];
		xInventoryInterior.totalNum--;
	}
	
	if(xInventoryInterior.totalNum < 0)
		xInventoryInterior.totalNum = 0;

}

M_Int32 getInventoryInteriorCount(int itemCode)
{
	
	if(itemCode < 0)
		itemCode = -itemCode;
	int count = 0;

	for(int i=0;i<xInventoryInterior.totalNum;i++)
	{
		if(xInventoryInterior.itemCode[i] == itemCode)
		{
			count++;
		}
	}
	
	return count;
}


//정상적인좌표에 비교할 수정된터치좌표얻기(터치확인용)
int getWorldMapPosTouch(int pos,int posCxy)
{
	if(xWorldMap.fscale-1.f <=1)
		return pos+ ((pos-posCxy) * (1.f/xWorldMap.fscale-1.f));
	else
		return pos-((pos-posCxy) * (1.f/(1.f/xWorldMap.fscale)));
}

//정상적인좌표를 수정된좌표로 얻기 위치파악
int getWorldMapPos(int pos,int posCxy)
{
	pos -= ((pos-posCxy) * (1.f/1.f-xWorldMap.fscale));
	return pos;
}

void interiorbuildFreeLoad_FP(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("interior_frame_circle.png", &imgInteriorBuild[0]);
        loadImg("interior_btn_input.png", &imgInteriorBuild[1]);
        loadImg("interior_btn_move.png", &imgInteriorBuild[2]);
        loadImg("interior_btn_ok.png", &imgInteriorBuild[3]);
        loadImg("interior_btn_reverse.png", &imgInteriorBuild[4]);
        loadImg("productionexiticon.png", &imgInteriorBuild[5]);
        loadImg("interior_btn_all.png", &imgInteriorBuild[6]);
        loadImg("interior_btn_furniture.png", &imgInteriorBuild[7]);
        loadImg("interior_btn_tile.png", &imgInteriorBuild[8]);
        loadImg("interior_btn_exit.png", &imgInteriorBuild[9]);
        loadImg("interior_edit_base.png", &imgInteriorBuild[10]);
    }
    
    else
    {
        freeImg(&imgInteriorBuild[0]);
        freeImg(&imgInteriorBuild[1]);
        freeImg(&imgInteriorBuild[2]);
        freeImg(&imgInteriorBuild[3]);
        freeImg(&imgInteriorBuild[4]);
        freeImg(&imgInteriorBuild[5]);
        freeImg(&imgInteriorBuild[6]);
        freeImg(&imgInteriorBuild[7]);
        freeImg(&imgInteriorBuild[8]);
        freeImg(&imgInteriorBuild[9]);
        freeImg(&imgInteriorBuild[10]);
    }
}

void drawInteriorBuild()
{
	int px;
	int py;
	int pw;
	int ph;

	int mapXpos;
	int mapYpos;
	
	
	//xInventoryFashion
	//문
	setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
	
	if(xInterior.xBuildSlot.codeTeam[0] != 0)
	{
		
		setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			
		mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) * (TILEW / 2));
		if ((xInterior.buildMapTileYpos + xInterior.buildMapTileXpos) % 2 == 1)
			mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
		else
			mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))) / 2) * TILEH);
			
		px = getWorldMapPos(mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever],cx);
		py = getWorldMapPos(mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever],cy);
		pw = xObj.img[xMap.type][xMap.listNum].w*xWorldMap.fscale;
		ph = xObj.img[xMap.type][xMap.listNum].h*xWorldMap.fscale;
						
		gSetColor(255, 0, 0);
		xTouchBuildIconMoveObj.xPos = px-pw/2;
		xTouchBuildIconMoveObj.yPos = py-ph/2;
		xTouchBuildIconMoveObj.wPos = pw;
		xTouchBuildIconMoveObj.hPos = ph;
		
		//fillRect(xTouchBuildIconMoveObj.xPos,xTouchBuildIconMoveObj.yPos ,xTouchBuildIconMoveObj.wPos ,xTouchBuildIconMoveObj.hPos );
		
		
		xGame.fgameScale = xWorldMap.fscale;
		xGame.isReverse = xMap.rever;
		
		if(xInterior.buildType == INTERIORBUILD_MOVETYPE_OBJ)
		{
			setAlpha(100);
			drawObj(getWorldMapPosTouch(xInterior.buildMapMoveXpos, cx), getWorldMapPosTouch(xInterior.buildMapMoveYpos, cy)-16, xMap.type, xMap.listNum, xMap.rever,FALSE,DONT,DONT);
			setAlpha(ALPHA_MAX);
		}
		
		xGame.isReverse = FALSE;
		xGame.fgameScale = 1.0f;

		if(xInterior.buildType != INTERIORBUILD_MOVETYPE_OBJ)
		{
//			drawPacker(imgBuildFrame0, px, py, 0, 0, imgW(imgBuildFrame0), imgH(imgBuildFrame0), VH);
            drawImage(&imgInteriorBuild[0], px, py, 0, 0, imgInteriorBuild[0].w, imgInteriorBuild[0].h, VH);
			subTemp[XPOS] = px-70;
			subTemp[YPOS] = py+90;
			
//			xTouchBuildIconMove.wPos = imgW(imgBuildIconMove)/2;
//			xTouchBuildIconMove.hPos = imgH(imgBuildIconMove);
//			xTouchBuildIconMove.xPos = subTemp[XPOS]-xTouchBuildIconMove.wPos/2;
//			xTouchBuildIconMove.yPos = subTemp[YPOS]-xTouchBuildIconMove.hPos/2;
//			
//			drawPacker(imgBuildIconMove, subTemp[XPOS], subTemp[YPOS], imgW(imgBuildIconMove)/2, 0, imgW(imgBuildIconMove)/2, imgH(imgBuildIconMove), VH);
            
            xTouchBuildIconMove.wPos = imgInteriorBuild[2].w/2;
            xTouchBuildIconMove.hPos = imgInteriorBuild[2].h;
            xTouchBuildIconMove.xPos = subTemp[XPOS]-xTouchBuildIconMove.wPos/2;
            xTouchBuildIconMove.yPos = subTemp[YPOS]-xTouchBuildIconMove.hPos/2;
            
            if(isTouchBuildIconMove==false)
            {
                drawImage(&imgInteriorBuild[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgInteriorBuild[2].w/2, imgInteriorBuild[2].h, VH);
            }
            else
            {
                drawImage(&imgInteriorBuild[2], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[2].w/2, 0, imgInteriorBuild[2].w/2, imgInteriorBuild[2].h, VH);
            }
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_MOVE:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW_NOTBG;
					break;
				}
			}
			
//			subTemp[XPOS] = px+110;
//			subTemp[YPOS] = py+40;
            subTemp[XPOS]=px+105;
            subTemp[YPOS]=py-20;

			xTouchBuildIconOk.wPos = imgInteriorBuild[3].w/3;
			xTouchBuildIconOk.hPos = imgInteriorBuild[3].h;
			xTouchBuildIconOk.xPos = subTemp[XPOS]-xTouchBuildIconOk.wPos/2;
			xTouchBuildIconOk.yPos = subTemp[YPOS]-xTouchBuildIconOk.hPos/2;
			
			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_OK:
				case TUTO_6_INTERIOR_OK2:
				case TUTO_8_INTERIOR_OK:
				case TUTO_9_INTERIOR_OK:
				case TUTO_30_INTERIOR_OK:
				
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW_NOTBG;
					break;
				}
			}
			
			
			isSubTemp[0] = FALSE;
			if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
			{
				int tempMap;
				if(xMap.type == INTERIOR_TYPE_FLOORTILE)
					tempMap = MAP_TYPE_FLOORTILE0;
				else
					tempMap = MAP_TYPE_WALL0;
				
				
				int tempType = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]/1000;
				int tempListNum = xMap.data[xMap.nowFloor][tempMap][xInterior.buildMapTileXpos][xInterior.buildMapTileYpos]%1000;
				if(tempType < 0)
					tempType = -tempType;
				if(tempListNum < 0)
					tempListNum = -tempListNum;
				
				if(xMap.type == tempType && xMap.listNum == tempListNum)
					isSubTemp[0] = TRUE;
				
				
				
					
			}
			if(xInterior.isBuildOkBtn == FALSE)
				isSubTemp[0] = TRUE;
				
			xInterior.isBuildOkBtn = TRUE;
			
            
			if(isSubTemp[0] == TRUE)
//				drawPacker(imgBuildIconOk, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBuildIconOk)/2, imgH(imgBuildIconOk), VH);
                drawImage(&imgInteriorBuild[3], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[3].w/3*2, 0, imgInteriorBuild[3].w/3, imgInteriorBuild[3].h, VH);
			else
            {
//				drawPacker(imgBuildIconOk, subTemp[XPOS], subTemp[YPOS], imgW(imgBuildIconOk)/2, 0, imgW(imgBuildIconOk)/2, imgH(imgBuildIconOk), VH);
                
                if(isTouchBuildIconOk==false)
                {
                    drawImage(&imgInteriorBuild[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgInteriorBuild[3].w/3, imgInteriorBuild[3].h, VH);
                }
                else
                {
                    drawImage(&imgInteriorBuild[3], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[3].w/3, 0, imgInteriorBuild[3].w/3, imgInteriorBuild[3].h, VH);
                }
            }
						
//			subTemp[XPOS] = px-105;
//			subTemp[YPOS] = py+40;
//			xTouchBuildIconClr.wPos = imgW(imgBuildIconClr)/2;
//			xTouchBuildIconClr.hPos = imgH(imgBuildIconClr);
//			xTouchBuildIconClr.xPos = subTemp[XPOS]-xTouchBuildIconClr.wPos/2;
//			xTouchBuildIconClr.yPos = subTemp[YPOS]-xTouchBuildIconClr.hPos/2;
			
						
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_CLR:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}
			
//			drawPacker(imgBuildIconClr, subTemp[XPOS], subTemp[YPOS], imgW(imgBuildIconClr)/2, 0, imgW(imgBuildIconClr)/2, imgH(imgBuildIconClr), VH);
            
            subTemp[XPOS]=px+70;
            subTemp[YPOS]=py+90;
            
            xTouchBuildIconClr.wPos = imgInteriorBuild[5].w/2;
            xTouchBuildIconClr.hPos = imgInteriorBuild[5].h;
            xTouchBuildIconClr.xPos = subTemp[XPOS]-xTouchBuildIconClr.wPos/2;
            xTouchBuildIconClr.yPos = subTemp[YPOS]-xTouchBuildIconClr.hPos/2;

            if(isTouchBuildIconClr==false)
            {
                drawImage(&imgInteriorBuild[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgInteriorBuild[5].w/2, imgInteriorBuild[5].h, VH);
            }
            else
            {
                drawImage(&imgInteriorBuild[5], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[5].w/2, 0, imgInteriorBuild[5].w/2, imgInteriorBuild[5].h, VH);
            }
            subTemp[XPOS] = px-105;
            subTemp[YPOS] = py-20;
			
            xTouchBuildIconInven.wPos = imgInteriorBuild[1].w/2;
            xTouchBuildIconInven.hPos = imgInteriorBuild[1].h;
            xTouchBuildIconInven.xPos = subTemp[XPOS]-xTouchBuildIconInven.wPos/2;
            xTouchBuildIconInven.yPos = subTemp[YPOS]-xTouchBuildIconInven.hPos/2;

//			subTemp[XPOS] = px-80;
//			subTemp[YPOS] = py-80;
			
//			xTouchBuildIconInven.wPos = imgW(imgBuildIconInven)/2;
//			xTouchBuildIconInven.hPos = imgH(imgBuildIconInven);
//			xTouchBuildIconInven.xPos = subTemp[XPOS]-xTouchBuildIconInven.wPos/2;
//			xTouchBuildIconInven.yPos = subTemp[YPOS]-xTouchBuildIconInven.hPos/2;
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_INVEN:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}
						
			if(xInterior.buildInType == INTERIORBUILD_TYPE_GAME)
			{
				switch(xMap.type)
				{
				case INTERIOR_TYPE_DOOR:
				case INTERIOR_TYPE_FLOORTILE:
				case INTERIOR_TYPE_WALLTILE:
					break;
				default:
//					drawPacker(imgBuildIconInven, subTemp[XPOS], subTemp[YPOS], imgW(imgBuildIconInven)/2, 0, imgW(imgBuildIconInven)/2, imgH(imgBuildIconInven), VH);
                    if(isTouchBuildIconInven==false)
                    {
                        drawImage(&imgInteriorBuild[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgInteriorBuild[1].w/2, imgInteriorBuild[1].h, VH);
                    }
                    else
                    {
                        drawImage(&imgInteriorBuild[1], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[1].w/2, 0, imgInteriorBuild[1].w/2, imgInteriorBuild[1].h, VH);
                    }
					break;
				}
			}
            
			
			subTemp[XPOS] = px;
			subTemp[YPOS] = py-110;
//			if(xInterior.buildInType == INTERIORBUILD_TYPE_GAME)
//			{
//				switch(xMap.type)
//				{
//				case INTERIOR_TYPE_DOOR:
//				case INTERIOR_TYPE_FLOORTILE:
//				case INTERIOR_TYPE_WALLTILE:
//					break;
//				default:
//					subTemp[XPOS] = px+85;
//					subTemp[YPOS] = py-80;
//					break;
//				}
//			}
			
//			xTouchBuildIconRot.wPos = imgW(imgBuildIconRot)/2;
//			xTouchBuildIconRot.hPos = imgH(imgBuildIconRot);
//			xTouchBuildIconRot.xPos = subTemp[XPOS]-xTouchBuildIconRot.wPos/2;
//			xTouchBuildIconRot.yPos = subTemp[YPOS]-xTouchBuildIconRot.hPos/2;
			
            xTouchBuildIconRot.wPos = imgInteriorBuild[4].w/3;
            xTouchBuildIconRot.hPos = imgInteriorBuild[4].h;
            xTouchBuildIconRot.xPos = subTemp[XPOS]-xTouchBuildIconRot.wPos/2;
            xTouchBuildIconRot.yPos = subTemp[YPOS]-xTouchBuildIconRot.hPos/2;

			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_6_INTERIOR_ROT:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW_NOTBG;
					break;
				}
			}
						
			
			
			
			if(xMap.type == INTERIOR_TYPE_FLOORTILE || xMap.type == INTERIOR_TYPE_WALLTILE)
			{
//				drawPacker(imgBuildIconAll, subTemp[XPOS], subTemp[YPOS], imgW(imgBuildIconAll)/2, 0, imgW(imgBuildIconAll)/2, imgH(imgBuildIconAll), VH);
                if(isTouchBuildIconRot==false)
                {
                    drawImage(&imgInteriorBuild[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgInteriorBuild[6].w/2, imgInteriorBuild[6].h, VH);
                }
                else
                {
                    drawImage(&imgInteriorBuild[6], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[6].w/2, 0, imgInteriorBuild[6].w/2, imgInteriorBuild[6].h, VH);
                }
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_26_INTERIOR_ALL0:
					case TUTO_26_INTERIOR_ALL1:
					case TUTO_26_INTERIOR_OK0:
					case TUTO_26_INTERIOR_OK1:
						if(playState == PLAY_PLAY)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW_NOTBG;
						}
						break;
					}
				}
			}
			else if(xMap.type == INTERIOR_TYPE_WALLITEM || xMap.type == INTERIOR_TYPE_SHOWWINDOW || xMap.type == INTERIOR_TYPE_DOOR)
			{
				if(xObj.xObjData[xMap.type][xMap.listNum].isRotLock == FALSE)
//					drawPacker(imgBuildIconRot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBuildIconRot)/2, imgH(imgBuildIconRot), VH);
                    drawImage(&imgInteriorBuild[4], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[4].w/3*2, 0, imgInteriorBuild[4].w/3, imgInteriorBuild[4].h, VH);
			}
			else
			{
				if(xObj.xObjData[xMap.type][xMap.listNum].isRotLock == FALSE)
                {
//                    drawPacker(imgBuildIconRot, subTemp[XPOS], subTemp[YPOS], imgW(imgBuildIconRot)/2, 0, imgW(imgBuildIconRot)/2, imgH(imgBuildIconRot), VH);
//                    
//                    subTemp[XPOS] = px;
//                    subTemp[YPOS] = py-110;
                    if(isTouchBuildIconRot==false)
                    {
                        drawImage(&imgInteriorBuild[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgInteriorBuild[4].w/3, imgInteriorBuild[4].h, VH);
                    }
                    else
                    {
                        drawImage(&imgInteriorBuild[4], subTemp[XPOS], subTemp[YPOS], imgInteriorBuild[4].w/3, 0, imgInteriorBuild[4].w/3, imgInteriorBuild[4].h, VH);
                    }
                }
			}
								
			switch(xMap.type)
			{
			case INTERIOR_TYPE_FLOORTILE:
			case INTERIOR_TYPE_WALLTILE:
				isSubTemp[0] = FALSE;
				break;
			default:
				isSubTemp[0] = checkBuildPos(xMap.type,xMap.listNum,xMap.rever);
				break;
			}
			
			if(isSubTemp[0] == TRUE)
				drawPacker(imgBuildFrame1, px, py-60, 0, 0, imgW(imgBuildFrame1), imgH(imgBuildFrame1), VH);
		}
	}
		
	subTemp[XPOS] = cx;
	subTemp[YPOS] = lcdH-45;
	//////////////////하단ui//////////////////
	switch(xInterior.buildInType)
	{
	case INTERIORBUILD_TYPE_SHOP:
		sprintf(strTempS, "구입설치모드");
		break;
	case INTERIORBUILD_TYPE_INVENTORY:
		sprintf(strTempS, "인벤설치모드");
		break;
	case INTERIORBUILD_TYPE_GAME:
			
		switch(xInterior.buildMode)
		{
		case 0:
			sprintf(strTempS, "편집 가구모드");
			break;
		case 1:
			sprintf(strTempS, "편집 타일모드");
			break;
		}
		break;
	}
	
		
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_6_INTERIOR_ITEMTOUCH:
			if(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0] == xInterior.xBuildSlot.codeTeam[0]
			   ||-xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0] == xInterior.xBuildSlot.codeTeam[0])
				xQuestTuto.isTutoClean = TRUE;
			break;
		case TUTO_26_INTERIOR_ITEMTOUCH0:
		case TUTO_26_INTERIOR_ITEMTOUCH1:
			xQuestTuto.isTutoClean = TRUE;
			break;
		case TUTO_6_INTERIOR_EDITMENUTOUCH:
			xQuestTuto.isTutoClean = TRUE;
			break;
		case TUTO_6_INTERIOR_EDITITEM:
			if(xInterior.xBuildSlot.codeTeam[0] != 0)
				xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	
    //편집모드 하단 바 수정 2018.2.26
	setAlpha(200);
//	drawPacker(imgQuestBar, subTemp[XPOS],subTemp[YPOS]+3, 0, 0, imgW(imgQuestBar), imgH(imgQuestBar), VH);
    drawImage(&imgInteriorBuild[10], subTemp[XPOS], subTemp[YPOS]+3, 0, 0, imgInteriorBuild[10].w, imgInteriorBuild[10].h, VH);
	setAlpha(ALPHA_MAX);
	//drawNpcIcon(subTemp[XPOS]-230, subTemp[YPOS],0);
//	setFontSize(14);
//	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
//	setFontSize(11);
    setFontSizeORI(18);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);
	
	subTemp[XPOS] = lcdW-50;
	subTemp[YPOS] = cy+100;
	
    /////////////////////////////////////////////////////
    //모드 버튼 수정 KBY 2018.2.26
	if(xInterior.buildInType == INTERIORBUILD_TYPE_GAME)
	{
		for(int i=0;i<2;i++)
		{
			switch(i)
			{
			case 0:
//				drawPacker(imgBuildMode0, subTemp[XPOS], subTemp[YPOS]+(i*75), imgW(imgBuildMode0)/2*(i == xInterior.buildMode?1:0), 0, imgW(imgBuildMode0)/2, imgH(imgBuildMode0), VH);
                    drawImage(&imgInteriorBuild[7], subTemp[XPOS], subTemp[YPOS]+(i*50), imgInteriorBuild[7].w/2*(i==xInterior.buildMode?0:1), 0, imgInteriorBuild[7].w/2, imgInteriorBuild[7].h, VH);
				break;
			case 1:
//				drawPacker(imgBuildMode1, subTemp[XPOS], subTemp[YPOS]+(i*75), imgW(imgBuildMode1)/2*(i == xInterior.buildMode?1:0), 0, imgW(imgBuildMode1)/2, imgH(imgBuildMode1), VH);
                drawImage(&imgInteriorBuild[8], subTemp[XPOS], subTemp[YPOS]+(i*50), imgInteriorBuild[8].w/2*(i==xInterior.buildMode?0:1), 0, imgInteriorBuild[8].w/2, imgInteriorBuild[8].h, VH);
				break;
			}
			
			/*
			switch(i)
			{
			case 0:	sprintf(strTempS, "가구모드");	break;
			case 1:	sprintf(strTempS, "타일모드");	break;
			}
									
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+(i*75)+30, strTempS, VH,255,255,255,44,26,27);
			 */
            
            xInterior.xBuildMode[i].wPos = imgInteriorBuild[7].w/2;
            xInterior.xBuildMode[i].hPos = imgInteriorBuild[7].h;
            xInterior.xBuildMode[i].xPos = subTemp[XPOS]-xInterior.xBuildMode[i].wPos/2;
            xInterior.xBuildMode[i].yPos = subTemp[YPOS]+(i*50)-xInterior.xBuildMode[i].hPos/2;
            
//            gSetColor(255, 0, 0);
//            setAlpha(100);
//            fillRect(xInterior.xBuildMode[i].xPos, xInterior.xBuildMode[i].yPos, xInterior.xBuildMode[i].wPos, xInterior.xBuildMode[i].hPos);
//            setAlpha(ALPHA_MAX);

//			xInterior.xBuildMode[i].wPos = imgW(imgBuildMode0)/2;
//			xInterior.xBuildMode[i].hPos = imgH(imgBuildMode0);
//			xInterior.xBuildMode[i].xPos = subTemp[XPOS]-xInterior.xBuildMode[i].wPos/2;
//			xInterior.xBuildMode[i].yPos = subTemp[YPOS]+(i*75)-xInterior.xBuildMode[i].hPos/2;
		}
	}
	
    //나가기 버튼 교체 KBY 2018.2.27
	subTemp[XPOS] = 60;
	subTemp[YPOS] = lcdH-60;
    
//	drawPacker(imgBuildIconExit, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBuildIconExit), imgH(imgBuildIconExit), VH);
    drawImage(&imgInteriorBuild[9], subTemp[XPOS], subTemp[YPOS], 0, 0, imgInteriorBuild[9].w, imgInteriorBuild[9].h, VH);
//	xTouchBuildIconExit.wPos = imgW(imgBuildIconExit);
//	xTouchBuildIconExit.hPos = imgH(imgBuildIconExit);
//	xTouchBuildIconExit.xPos = subTemp[XPOS]-xTouchBuildIconExit.wPos/2;
//	xTouchBuildIconExit.yPos = subTemp[YPOS]-xTouchBuildIconExit.hPos/2;
    
    xTouchBuildIconExit.wPos = imgInteriorBuild[9].w;
    xTouchBuildIconExit.hPos = imgInteriorBuild[9].h;
    xTouchBuildIconExit.xPos = subTemp[XPOS]-xTouchBuildIconExit.wPos/2;
    xTouchBuildIconExit.yPos = subTemp[YPOS]-xTouchBuildIconExit.hPos/2;
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_6_INTERIOR_EXIT:
		case TUTO_6_RESULT:
		case TUTO_8_INTERIOR_EXIT:
		case TUTO_9_RESULT:
		case TUTO_26_RESULT:
		case TUTO_30_RESULT:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
			
	
	
    //상점 버튼 교체 KBY 2018.2.27
	subTemp[XPOS] = lcdW-60;
//	drawPacker(imgBuildIconShop, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBuildIconShop), imgH(imgBuildIconShop), VH);
    drawImage(&imgMenuIcon2, subTemp[XPOS], subTemp[YPOS], (imgMenuIcon2.w/7)*4, 0, imgMenuIcon2.w/7, imgMenuIcon2.h, VH);
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_26_INTERIOR_MENUTOUCH0:
		case TUTO_26_INTERIOR_MENUTOUCH1:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}		
	
	xTouchBuildIconShop.wPos = (imgMenuIcon2.w/7);
	xTouchBuildIconShop.hPos = imgMenuIcon2.h;
	xTouchBuildIconShop.xPos = subTemp[XPOS]-xTouchBuildIconShop.wPos/2;
	xTouchBuildIconShop.yPos = subTemp[YPOS]-xTouchBuildIconShop.hPos/2;
	
		
	
//	gSetColor(255, 0, 0);
//	setAlpha(100);
//	fillRect(xTouchBuildIconExit.xPos, xTouchBuildIconExit.yPos, xTouchBuildIconExit.wPos, xTouchBuildIconExit.hPos);
//	fillRect(xTouchBuildIconShop.xPos, xTouchBuildIconShop.yPos, xTouchBuildIconShop.wPos, xTouchBuildIconShop.hPos);
//	setAlpha(ALPHA_MAX);
	 
}

void checkBuildMapData()
{
	
	setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
	memset(xMap.interiorData, FALSE, sizeof(xMap.interiorData));
	
	
	
	
	int oriType = xMap.type;
	
	switch(xMap.type)
	{
	case INTERIOR_TYPE_FLOORTILE:		
		//이벤트큐에 등록된 타일 등록
		for(int e=0;e<xEventQueue.totalNum;e++)
		{
			switch(xEventQueue.type[e])
			{
			case EVENTQUEUE_TYPE_INTERIOR:
			case EVENTQUEUE_TYPE_INPUTINVEN:
			case EVENTQUEUE_TYPE_OUTPUTINVEN:
			case EVENTQUEUE_TYPE_MOVE:
				setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_FLOORTILE)
					xMap.interiorData[xEventQueue.floor[e]][xEventQueue.x[e]-xMap.shopPointX][xEventQueue.y[e]-xMap.shopPointY] = TRUE;
				break;
			}
		}
		break;
	case INTERIOR_TYPE_WALLTILE:
		memset(xMap.interiorDataWall, FALSE, sizeof(xMap.interiorDataWall));
		
		//등록된 벽타일만 검사
		for(int e=0;e<xEventQueue.totalNum;e++)
		{
			switch(xEventQueue.type[e])
			{
			case EVENTQUEUE_TYPE_INTERIOR:
			case EVENTQUEUE_TYPE_INPUTINVEN:
			case EVENTQUEUE_TYPE_OUTPUTINVEN:
			case EVENTQUEUE_TYPE_MOVE:
				setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_WALLTILE)
				{
					if(xEventQueue.x[e]-xMap.shopPointX+1 == 0)
					{
						xMap.interiorDataWall[xEventQueue.floor[e]][1][xEventQueue.y[e]-xMap.shopPointY] = TRUE;
					}
					else
					{
						xMap.interiorDataWall[xEventQueue.floor[e]][0][xEventQueue.x[e]-xMap.shopPointX] = TRUE;
					} 
				}
				break;
			}
		}
		break;
	case INTERIOR_TYPE_SHOWWINDOW:
		memset(xMap.interiorDataWall, FALSE, sizeof(xMap.interiorDataWall));
		
		//등록된 벽아이템(레이어로 보기때문에 문,쇼윈도 포함이 되어있음 따로 처리 불필요)
		for(int w=0;w<xMap.shopPointW;w++)
		{
			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
			{
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				for(int ww=0;ww<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];ww++)
					xMap.interiorDataWall[xMap.nowFloor][0][w+ww] = TRUE;
			}
		}
		for(int h=0;h<xMap.shopPointH;h++)
		{
			
			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
			{
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				for(int hh=0;hh<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];hh++)
					xMap.interiorDataWall[xMap.nowFloor][1][h+hh] = TRUE;
			}
		}
					
		//문이랑 계단 벽제어
		if(xMap.totalFloor > 1)
		{
			xMap.interiorDataWall[xMap.nowFloor][0][xMap.shopPointW-1] = TRUE;
			xMap.interiorDataWall[xMap.nowFloor][0][xMap.shopPointW-3] = TRUE;
		}
		
		//설치된 벽아이템
		for(int e=0;e<xEventQueue.totalNum;e++)
		{
			switch(xEventQueue.type[e])
			{
				case EVENTQUEUE_TYPE_INTERIOR:
				case EVENTQUEUE_TYPE_INPUTINVEN:
				case EVENTQUEUE_TYPE_OUTPUTINVEN:
				case EVENTQUEUE_TYPE_MOVE:
					setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
					if(xMap.type == INTERIOR_TYPE_WALLITEM || xMap.type == INTERIOR_TYPE_SHOWWINDOW || xMap.type == INTERIOR_TYPE_DOOR)
					{
						if(xEventQueue.x[e]-xMap.shopPointX+1 == 0)
						{
							for(int hh=0;hh<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];hh++)
								xMap.interiorDataWall[xEventQueue.floor[e]][1][xEventQueue.y[e]-xMap.shopPointY+hh] = TRUE;
						}
						else
						{
							for(int ww=0;ww<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];ww++)
								xMap.interiorDataWall[xEventQueue.floor[e]][0][xEventQueue.x[e]-xMap.shopPointX+ww] = TRUE;
						}
					}
					break;
			}
		}
			
			
		//설치되어있는것 확인
		checkMapDataAstar(MAP_TYPE_OBJ,xMap.nowFloor);
		memcpy(&xMap.interiorData[xMap.nowFloor], &xMap.shopData[xMap.nowFloor][MAP_TYPE_OBJ], sizeof(xMap.shopData[xMap.nowFloor][MAP_TYPE_OBJ]));
		//이벤트큐에 들어가있는 설치 경로 입히기
		
		for(int i=0;i<xEventQueue.totalNum;i++)
		{
			switch(xEventQueue.type[i])
			{
				case EVENTQUEUE_TYPE_INTERIOR:
				case EVENTQUEUE_TYPE_INPUTINVEN:
				case EVENTQUEUE_TYPE_OUTPUTINVEN:
				case EVENTQUEUE_TYPE_MOVE:
					setMapData(xEventQueue.xInteriorSlot[i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
					for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
					{
						for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
						{
							xMap.interiorData[xEventQueue.floor[i]][xEventQueue.x[i]+w-xMap.shopPointX][xEventQueue.y[i]+h-xMap.shopPointY] = TRUE;
							
						}
					}
					break;
			}
		}
			
			
		//쇼윈도의 설치파악
		for(int w=0;w<xMap.shopPointW;w++)
		{
			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
			{
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
				{
					for(int ww=0;ww<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];ww++)
						xMap.interiorData[xMap.nowFloor][w+ww][0] = TRUE;
				}
			}
		}
		for(int h=0;h<xMap.shopPointH;h++)
		{
			
			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
			{
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
				{
					for(int hh=0;hh<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];hh++)
						xMap.interiorData[xMap.nowFloor][0][h+hh] = TRUE;
				}
			}
		}
		break;
	case INTERIOR_TYPE_WALLITEM:
	case INTERIOR_TYPE_DOOR:
		memset(xMap.interiorDataWall, FALSE, sizeof(xMap.interiorDataWall));
		
			
			
		
		//등록된 벽아이템(레이어로 보기때문에 문,쇼윈도 포함이 되어있음 따로 처리 불필요)
		for(int w=0;w<xMap.shopPointW;w++)
		{
			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
			{
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				
				if(oriType == INTERIOR_TYPE_DOOR && xMap.type == INTERIOR_TYPE_DOOR)
					continue;
				
				
				for(int ww=0;ww<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];ww++)
					xMap.interiorDataWall[xMap.nowFloor][0][w+ww] = TRUE;
			}
		}
		
		//문이랑 계단 벽제어
		if(xMap.totalFloor > 1)
		{
			if(xMap.nowFloor == 0)
				xMap.interiorDataWall[xMap.nowFloor][0][xMap.shopPointW-1] = TRUE;
			else
				xMap.interiorDataWall[xMap.nowFloor][0][xMap.shopPointW-3] = TRUE;
		}
			
		for(int h=0;h<xMap.shopPointH;h++)
		{

			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
			{
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				if(oriType == INTERIOR_TYPE_DOOR && xMap.type == INTERIOR_TYPE_DOOR)
					continue;
				
				for(int hh=0;hh<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];hh++)
					xMap.interiorDataWall[xMap.nowFloor][1][h+hh] = TRUE;
			}
		}
			
		//설치된 벽아이템			
		for(int e=0;e<xEventQueue.totalNum;e++)
		{
			switch(xEventQueue.type[e])
			{
			case EVENTQUEUE_TYPE_INTERIOR:
			case EVENTQUEUE_TYPE_INPUTINVEN:
			case EVENTQUEUE_TYPE_OUTPUTINVEN:
			case EVENTQUEUE_TYPE_MOVE:
				setMapData(xEventQueue.xInteriorSlot[e].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
 				if(xMap.type == INTERIOR_TYPE_WALLITEM || xMap.type == INTERIOR_TYPE_SHOWWINDOW || xMap.type == INTERIOR_TYPE_DOOR)
				{
					
					if(xEventQueue.x[e]-xMap.shopPointX+1 == 0)
					{
						for(int hh=0;hh<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];hh++)
							xMap.interiorDataWall[xEventQueue.floor[e]][1][xEventQueue.y[e]-xMap.shopPointY+hh] = TRUE;
					}
					else
					{
						for(int ww=0;ww<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];ww++)
							xMap.interiorDataWall[xEventQueue.floor[e]][0][xEventQueue.x[e]-xMap.shopPointX+ww] = TRUE;
					}
				}
				break;
			}
		}
		break;
	case INTERIOR_TYPE_OBJFLOOR:
		//설치되어있는것 확인
		checkMapDataAstar(MAP_TYPE_FLOORTILE1,xMap.nowFloor);
		memcpy(&xMap.interiorData[xMap.nowFloor], &xMap.shopData[xMap.nowFloor][MAP_TYPE_FLOORTILE1], sizeof(xMap.shopData[xMap.nowFloor][MAP_TYPE_FLOORTILE1]));
				
		//이벤트큐에 들어가있는 설치 경로 입히기		
		for(int i=0;i<xEventQueue.totalNum;i++)
		{
			switch(xEventQueue.type[i])
			{
			case EVENTQUEUE_TYPE_INTERIOR:
			case EVENTQUEUE_TYPE_INPUTINVEN:
			case EVENTQUEUE_TYPE_OUTPUTINVEN:
			case EVENTQUEUE_TYPE_MOVE:
				setMapData(xEventQueue.xInteriorSlot[i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_OBJFLOOR)
				{
					for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
					{
						for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
						{
							xMap.interiorData[xEventQueue.floor[i]][xEventQueue.x[i]+w-xMap.shopPointX][xEventQueue.y[i]+h-xMap.shopPointY] = TRUE;
							
						}
					}
				}
				break;
			}
		}				
		break;
	default:
		//설치되어있는것 확인
		checkMapDataAstar(MAP_TYPE_OBJ,xMap.nowFloor);
		memcpy(&xMap.interiorData[xMap.nowFloor], &xMap.shopData[xMap.nowFloor][MAP_TYPE_OBJ], sizeof(xMap.shopData[xMap.nowFloor][MAP_TYPE_OBJ]));
		
		if(xMap.nowFloor == 0)
			xMap.interiorData[xMap.nowFloor][xWorldMap.doorMakeX-xMap.shopPointX][xWorldMap.doorMakeY-xMap.shopPointY] = TRUE;
		
		if(xMap.totalFloor > 1)
		{
			if(xMap.nowFloor == 0)
				xMap.interiorData[xMap.nowFloor][xWorldMap.floorUpX-xMap.shopPointX][xWorldMap.floorUpY-xMap.shopPointY] = TRUE;
			else
				xMap.interiorData[xMap.nowFloor][xWorldMap.floorDownX-xMap.shopPointX][xWorldMap.floorDownY-xMap.shopPointY] = TRUE;
		}
			
		
			
			
		
		if(oriType == INTERIOR_TYPE_PAYMENT)
		{
			if(xPayMentInfo[xMap.nowFloor].codeNum != 0)
			{
				xMap.interiorData[xMap.nowFloor][xPayMentInfo[xMap.nowFloor].x-xMap.shopPointX][xPayMentInfo[xMap.nowFloor].y-xMap.shopPointY] = FALSE;
			}
		}
		
									
		//이벤트큐에 들어가있는 설치 경로 입히기		
		for(int i=0;i<xEventQueue.totalNum;i++)
		{
			
			switch(xEventQueue.type[i])
			{
			case EVENTQUEUE_TYPE_INTERIOR:
			case EVENTQUEUE_TYPE_INPUTINVEN:
			case EVENTQUEUE_TYPE_OUTPUTINVEN:
			case EVENTQUEUE_TYPE_MOVE:										
				setMapData(xEventQueue.xInteriorSlot[i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
					
				for(int w=0;w<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];w++)
				{
					for(int h=0;h<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];h++)
					{
						xMap.interiorData[xEventQueue.floor[i]][xEventQueue.x[i]+w-xMap.shopPointX][xEventQueue.y[i]+h-xMap.shopPointY] = TRUE;
						
					}
				}
				break;
			}
		}
			

		//쇼윈도의 설치파악
		for(int w=0;w<xMap.shopPointW;w++)
		{
			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
			{
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
				{
					for(int ww=0;ww<xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever];ww++)
						xMap.interiorData[xMap.nowFloor][w+ww][0] = TRUE;
				}
			}
		}
		for(int h=0;h<xMap.shopPointH;h++)
		{
			if(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
			{				
				setMapData(xMap.data[xMap.nowFloor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				if(xMap.type == INTERIOR_TYPE_SHOWWINDOW)
				{
					for(int hh=0;hh<xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever];hh++)
						xMap.interiorData[xMap.nowFloor][0][h+hh] = TRUE;
				}
			}
		}
		break;
	}
	
	setMapData(xInterior.xBuildSlot.codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
}

void outPutEventQueue(int eventNum)
{
	for(int i=eventNum;i<xEventQueue.totalNum-1;i++)
	{
		xEventQueue.anyCntMax[i] = xEventQueue.anyCntMax[i+1];
		xEventQueue.anyCnt[i] = xEventQueue.anyCnt[i+1];
		xEventQueue.type[i] = xEventQueue.type[i+1];
		xEventQueue.floor[i] = xEventQueue.floor[i+1];
		xEventQueue.startX[i] = xEventQueue.startX[i+1];
		xEventQueue.startY[i] = xEventQueue.startY[i+1];
		xEventQueue.x[i] = xEventQueue.x[i+1];
		xEventQueue.y[i] = xEventQueue.y[i+1];
		memcpy(&xEventQueue.xInteriorSlot[i], &xEventQueue.xInteriorSlot[i+1], sizeof(xEventQueue.xInteriorSlot[i]));
	}
	
	if(--xEventQueue.totalNum < 0)
	{
		printf("eventERR>>>%d",eventNum);
		xEventQueue.totalNum = 0;
	}
	
	checkBuildMapData();
}

void outPutEventQueueNet(int eventNum)
{
	int j = 0;
	
	for(int i=eventNum;i<xEventQueueNet.totalNum-1;i++)
	{
		xEventQueueNet.isKeyReturn[i] = xEventQueueNet.isKeyReturn[i+1];
		xEventQueueNet.isNetOk[i] = xEventQueueNet.isNetOk[i+1];
		xEventQueueNet.type[i] = xEventQueueNet.type[i+1];
		xEventQueueNet.anyCnt[i] = xEventQueueNet.anyCnt[i+1];
		xEventQueueNet.x[i] = xEventQueueNet.x[i+1];
		xEventQueueNet.y[i] = xEventQueueNet.y[i+1];
		xEventQueueNet.code[i] = xEventQueueNet.code[i+1];
		xEventQueueNet.haveNum[i] = xEventQueueNet.haveNum[i+1];
		
		xEventQueueNet.floor[i] = xEventQueueNet.floor[i+1];
		xEventQueueNet.action[i] = xEventQueueNet.action[i+1];
		xEventQueueNet.key[i] = xEventQueueNet.key[i+1];
		xEventQueueNet.mapX[i] = xEventQueueNet.mapX[i+1];
		xEventQueueNet.mapY[i] = xEventQueueNet.mapY[i+1];
		
		xEventQueueNet.slotNum[i] = xEventQueueNet.slotNum[i+1];
		xEventQueueNet.open[i] = xEventQueueNet.open[i+1];
		xEventQueueNet.time[i] = xEventQueueNet.time[i+1];
		xEventQueueNet.friendNum[i] = xEventQueueNet.friendNum[i+1];
        
        
        
        xEventQueueNet.questIndex[i] = xEventQueueNet.questIndex[i+1];
        xEventQueueNet.questType[i] = xEventQueueNet.questType[i+1];
        xEventQueueNet.questValue[i] = xEventQueueNet.questValue[i+1];
        
				
		for(int k=0;k<9;k++)
			memcpy(&xEventQueueNet.xSellSlot[i][k], &xEventQueueNet.xSellSlot[i+1][k], sizeof(xEventQueueNet.xSellSlot[i][k]));			 
		for(int k=0;k<16;k++)
			xEventQueueNet.layer[i][k] = xEventQueueNet.layer[i+1][k];
				
		
		xEventQueueNet.sex[i] = xEventQueueNet.sex[i+1];		
		sprintf(xEventQueueNet.strNickName[i],"%s", xEventQueueNet.strNickName[i+1]);
        
        
        
        xEventQueueNet.SLOT[i] = xEventQueueNet.SLOT[i+1];
        xEventQueueNet.ITEM_INDEX[i] = xEventQueueNet.ITEM_INDEX[i+1];
        
        xEventQueueNet.COUNT[i] = xEventQueueNet.COUNT[i+1];
        xEventQueueNet.SELL_COUNT[i] = xEventQueueNet.SELL_COUNT[i+1];
        
        xEventQueueNet.EXP[i] = xEventQueueNet.EXP[i+1];
        xEventQueueNet.GOLD[i] = xEventQueueNet.GOLD[i+1];
        xEventQueueNet.POP[i] = xEventQueueNet.POP[i+1];
        
        xEventQueueNet.resultGold[i] = xEventQueueNet.resultGold[i+1];
        xEventQueueNet.resultCash[i] = xEventQueueNet.resultCash[i+1];
        xEventQueueNet.resultCount[i] = xEventQueueNet.resultCount[i+1];
        
        xEventQueueNet.result[i]=xEventQueueNet.result[i+1];
        xEventQueueNet.formerType[i]=xEventQueueNet.formerType[i+1];
        
        xEventQueueNet.end_time[i] = xEventQueueNet.end_time[i+1];
		
		xEventQueueNet.typeNum[i] = xEventQueueNet.typeNum[i+1];
		
		for(j = 0; j < 12; j++)
		{
			xEventQueueNet.item_total[i] = xEventQueueNet.item_total[i+1];
			xEventQueueNet.item_category[i][j] = xEventQueueNet.item_category[i+1][j];
			xEventQueueNet.item_index[i][j] = xEventQueueNet.item_index[i+1][j];
			xEventQueueNet.item_count[i][j] = xEventQueueNet.item_count[i+1][j];
		}
		
	}
	
	if(--xEventQueueNet.totalNum < 0)
	{
		printf("eventERR>>>%d",eventNum);
		xEventQueue.totalNum = 0;
	}
}

void addEventQueue(int x,int y,int type,int floor,int startX,int startY)
{
	xEventQueue.floor[xEventQueue.totalNum] = floor;
	xEventQueue.x[xEventQueue.totalNum] = x;
	xEventQueue.y[xEventQueue.totalNum] = y;
	xEventQueue.startX[xEventQueue.totalNum] = startX;
	xEventQueue.startY[xEventQueue.totalNum] = startY;
	xEventQueue.type[xEventQueue.totalNum] = type;
	xEventQueue.anyCnt[xEventQueue.totalNum] = 0;
	xEventQueue.anyCntMax[xEventQueue.totalNum] = 1;
	
	switch(type)
	{
	case EVENTQUEUE_TYPE_INTERIOR:
	case EVENTQUEUE_TYPE_INPUTINVEN:
	case EVENTQUEUE_TYPE_OUTPUTINVEN:
	case EVENTQUEUE_TYPE_MOVE:
		memcpy(&xEventQueue.xInteriorSlot[xEventQueue.totalNum], &xInterior.xBuildSlot, sizeof(xInterior.xBuildSlot));
		break;
	}
	xEventQueue.totalNum++;
	checkBuildMapData();

}

void addEventQueueNet(int x,int y,int type,M_Boolean isReturnKey)
{
	sprintf(xDebug.strSprintf, "네트워크Type:%d",type);
	
	xEventQueueNet.x[xEventQueueNet.totalNum] = x;
	xEventQueueNet.y[xEventQueueNet.totalNum] = y;
	xEventQueueNet.type[xEventQueueNet.totalNum] = type;
	xEventQueueNet.anyCnt[xEventQueueNet.totalNum] = 0;
	xEventQueueNet.isNetOk[xEventQueueNet.totalNum] = FALSE;
	xEventQueueNet.isKeyReturn[xEventQueueNet.totalNum] = isReturnKey;
	xEventQueueNet.totalNum++;
    
	
	
	////////////////////////////기본정보//////////////////////////////////
	//돈관리(최종값)
	//룩관리(최종값)
	//명성관리(최종값)
	//피로도관리(최종값)
	//현재칭호번호(칭호index)
	//칭호오픈여부(칭호index)
	//////////////////////////////생산////////////////////////////////////
	//생산슬롯오픈(총오픈생산슬롯갯수)
	//생산슬롯관리(해당생산슬롯num,패션code,시작시간)
	//생산슬롯비우기(해당생산슬롯num)
	//수거하기 == 패션갯수사용,생산슬롯비우기사용
	////////////////////////////스태프///////////////////////////////////
	//표정구매(표정갯수최종값)
	//헤어구매(헤어갯수최종값)
	//스태프정보변경(층,스태프code)
	////////////////////////////판매대////////////////////////////////////
	////////////////////////////쇼윈도////////////////////////////////////	
	
}




void setOrderList()
{
	M_Boolean isNew;
	
	xOrder.selectSlot = DONT;
	
	xOrder.totalNumList = 0;
	for(int i=0;i<xOrder.totalNumListData;i++)
	{
		if(xOrder.xSlotListData[i].state != ORDERSLOT_STATE_END)
		{
			isNew = isOrderNew(xOrder.xSlotListData[i].key);
			
			if(isNew == TRUE)
			{
				xOrder.xSlotListData[i].isNew = TRUE;
				xOrder.isNew = TRUE;
			}
			else
				xOrder.xSlotListData[i].isNew = FALSE;
			
			xOrder.slotNumList[xOrder.totalNumList++] = i;
		}
	}    
}

M_Boolean isOrderNew(int key)
{
	M_Boolean isResult = TRUE;
	for(int i=0;i<256;i++)
	{
		if(xSave.orderNew[i] == key)
		{
			isResult = FALSE;
			break;
		}
	}
	return isResult;
}


void setOrderNewSave()
{
	setOrderList();
	for(int i=0;i<xOrder.totalNumList;i++)
		xSave.orderNew[i] = xOrder.xSlotListData[xOrder.slotNumList[i]].key;
	xOrder.isNew = FALSE;
	gameSave(SAVE_SLOT_GAME);
}






void prcOrderList()
{
	
	if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
	{
		M_Boolean isOrderCheck2 = FALSE;
		for(int i=0;i<xOrder.totalNumListData;i++)
		{
			if(xOrder.xSlotListData[i].friendType == 2)
			{
				if(xOrder.xSlotListData[i].state == ORDERSLOT_STATE_CAR)
					isOrderCheck2 = TRUE;
				
				if(xQuestTuto.state == QUEST_TUTO_KEY)
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_20_ORDER_MENUTOUCH:
					case TUTO_20_ORDER_INFOSHOW:
					case TUTO_20_ORDER_ORDERSELECT:
					case TUTO_20_ORDER_CARSELECT:
						if(xOrder.xSlotListData[i].state == ORDERSLOT_STATE_CAR)
							xQuestTuto.isTutoClean = TRUE;
						break;
					}
				}
			}
			isSubTemp[10] = FALSE;
			switch(xOrder.xSlotListData[i].state)
			{
			case ORDERSLOT_STATE_CAR:
				for(int p=0;p<3;p++)
				{
					
					
					if(xCarPark[p].state != CARPARK_STATE_READ && xCarPark[p].orderKey == xOrder.xSlotListData[i].key)
					{
						isSubTemp[10] = TRUE;
					}
				}
					
					
				if(isSubTemp[10] == FALSE)
				{
					//ORDERSLOT_STATE_END상태로 변경
					xOrder.xSlotListData[i].state = ORDERSLOT_STATE_END;
					//////////////////////////////////////////////////////////////////
					xEventQueueNet.action[xEventQueueNet.totalNum] = xOrder.xSlotListData[i].state;
					xEventQueueNet.key[xEventQueueNet.totalNum] = xOrder.xSlotListData[i].key;
					xEventQueueNet.time[xEventQueueNet.totalNum] = xOrder.xSlotListData[i].endTime;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ORDER, TRUE);
					//////////////////////////////////////////////////////////////////
					setOrderList();
				}
					
				break;
			}
		}
		if(isOrderCheck2 == FALSE)
		{
			if(xQuestTuto.state == QUEST_TUTO_KEY)
			{
				switch(xQuestTuto.nowNum)
				{
					case TUTO_20_ORDER_CARINFOSELECT:
					case TUTO_20_ORDER_CARINFOEXIT:
						xQuestTuto.isTutoClean = TRUE;
						break;
				}
			}
		}
	}
}

void drawFitting()
{
	int px = cx;
	int py = cy;
	
	xQuestInfo.isShowwindowInfo = FALSE;
	
	//피팅창
    drawBgFillRect();
	drawImage(&imgFittingBg[0], px, py, 0, 0, imgFittingBg[0].w, imgFittingBg[0].h, VH);
	
	
	//카테고리탭
	int iMaxTabS;
	iMaxTabS = FITTINGTABMAX;
	subTemp[XPOS] = px-390;
	subTemp[YPOS] = py-275;
	

	for(int i=0;i<iMaxTabS;i++)
	{
		int h=0;
		if(i == xFitting.selectTabB)
		{
			h=-18;
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], imgW(imgMenu8)/2, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			
			switch(i)
			{
			case 0:sprintf(strTempS, "아우터");break;
			case 1:sprintf(strTempS, "상의");break;
			case 2:sprintf(strTempS, "하의");break;
			case 3:sprintf(strTempS, "원피스");break;
			case 4:sprintf(strTempS, "신발");break;
			case 5:sprintf(strTempS, "가방");break;
			case 6:sprintf(strTempS, "기타");break;
			}
			gDrawStringBold(subTemp[XPOS]+(i*76), subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
			
		}
		else
		{
			h=0;
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], 0, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);

			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				M_Boolean isCheck = FALSE;
				switch(xQuestTuto.nowNum)
				{
				case TUTO_12_SHOWWINDOWFITTING:
						
					if(i == 1)
					{
						for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
						{
							if(xFitting.xF[xFitting.gender].code[ff] != DONT)
							{
								switch(xFitting.xF[xFitting.gender].code[ff]/1000)
								{
									case F_TYPE_TOP:
										//상의를 입었을때
										isCheck = TRUE;
										break;
								}
							}
						}
						if(isCheck == FALSE)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					else if(i == 2)
					{
						for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
						{
							if(xFitting.xF[xFitting.gender].code[ff] != DONT)
							{
								switch(xFitting.xF[xFitting.gender].code[ff]/1000)
								{
									case F_TYPE_BOTTOM:
										//하의를 입었을때
										isCheck = TRUE;
										break;
								}
							}
						}
						if(isCheck == FALSE && xTutoInfo.totalNum == 0)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					
					
					break;
				}
			}
		}
		drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*i, imgH(imgFittingTabB)/2*(xFitting.totalSlot[i] > 0?1:0), imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
	}
	
	for(int i=0;i<iMaxTabS;i++)
	{
		xTouchFittingTabB[i].wPos = imgW(imgMenu8)/2-10;
		xTouchFittingTabB[i].hPos = imgH(imgMenu8);
		xTouchFittingTabB[i].xPos = subTemp[XPOS]+5+(i*76) - xTouchFittingTabB[i].wPos/2;
		xTouchFittingTabB[i].yPos = subTemp[YPOS] - xTouchFittingTabB[i].hPos/2;
	}
	
	//성별여
	subTemp[XPOS] = px+366-49;
	subTemp[YPOS] = py-200;
	
	xTouchGenderLeft.wPos = imgW(imgFittingMenu5)/2;
	xTouchGenderLeft.hPos = imgH(imgFittingMenu5)/2;
	xTouchGenderLeft.xPos = subTemp[XPOS]-xTouchGenderLeft.wPos/2;
	xTouchGenderLeft.yPos = subTemp[YPOS]-xTouchGenderLeft.hPos/2;
	//여
	drawPacker(imgFittingMenu5, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgFittingMenu5)/2*(xFitting.gender==0?1:0), imgW(imgFittingMenu5)/2, imgH(imgFittingMenu5)/2, VH);
		
	if(xFitting.gender == 1)
	{
		if(xFitting.sellTableItemNum[0] > 0)
		{
			drawNewIcon(subTemp[XPOS]+28, subTemp[YPOS]-20);
		}
	}
	
	//성별남
	subTemp[XPOS] = px+366+49;
	subTemp[YPOS] = py-200;
	
	xTouchGenderRight.wPos = imgW(imgFittingMenu5)/2;
	xTouchGenderRight.hPos = imgH(imgFittingMenu5)/2;
	xTouchGenderRight.xPos = subTemp[XPOS]-xTouchGenderRight.wPos/2;
	xTouchGenderRight.yPos = subTemp[YPOS]-xTouchGenderRight.hPos/2;
	//남
	drawPacker(imgFittingMenu5, subTemp[XPOS], subTemp[YPOS], imgW(imgFittingMenu5)/2, imgH(imgFittingMenu5)/2*(xFitting.gender==1?1:0), imgW(imgFittingMenu5)/2, imgH(imgFittingMenu5)/2, VH);
	if(xFitting.gender == 0)
	{
		if(xFitting.sellTableItemNum[1] > 0)
		{
			drawNewIcon(subTemp[XPOS]+28, subTemp[YPOS]-20);
		}
	}
	
	
	//피팅창
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+5;
	
	drawImage(&imgFittingBg[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingBg[1].w, imgFittingBg[1].h, VH);
	
	drawPacker(imgCatalogSex, subTemp[XPOS]-94,subTemp[YPOS]-175, imgW(imgCatalogSex)/2*xFitting.gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
	
	//레이어드수파악
	xFitting.xF[xFitting.gender].layeredNum = 0;
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFitting.xF[xFitting.gender].code[ff] != DONT)
			xFitting.xF[xFitting.gender].layeredNum++;
	}
	
	
	

	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_11_SHOWWINDOWLAYERED5:
			if(xFitting.xF[xFitting.gender].layeredNum >= 5)
				xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	
	XFACE xFaceTemp;
	xFaceTemp.hairNum = DONT;
	xFaceTemp.faceNum = DONT;
	xFaceTemp.faceType = 0;
	
	
	drawFittingBody(subTemp[XPOS], subTemp[YPOS],&xFitting.xF[xFitting.gender],&xFaceTemp,FALSE,xFitting.gender);
		
	
	//레이어드정보
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+208;
	
	subTemp[WPOS] = imgW(imgFittingMenu2) * xFitting.xF[xFitting.gender].layeredNum / xFitting.fittingLayeredMax;
	
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*3, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*2, subTemp[WPOS], imgH(imgFittingMenu2)/4, VL);
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
	
	gDrawStringBold(subTemp[XPOS]-60, subTemp[YPOS], "레이어드", VL, 255, 170, 21, 44, 27, 26);
	sprintf(strTempS, "%d/%d",xFitting.xF[xFitting.gender].layeredNum,xFitting.fittingLayeredMax);
	gDrawStringBold(subTemp[XPOS]+84, subTemp[YPOS], strTempS, VR, 255, 170, 21, 44, 27, 26);
	
	if(xQuestTuto.state == QUEST_TUTO_SHOW)
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_11_SHOWWINDOWLAYEREDSHOW:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
			break;
		}
	}
	
	
	
		
	//버튼
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+268;
	//원래대로
	drawPacker(imgBtn2, subTemp[XPOS]-56, subTemp[YPOS], 0, imgH(imgBtn2)/2, imgW(imgBtn2), imgH(imgBtn2)/2, VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-2-56, subTemp[YPOS]-2-12, "모두", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
	gDrawStringBold(subTemp[XPOS]-2-56-2, subTemp[YPOS]-2+12, "벗기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
	setFontSize(11);
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_11_SHOWWINDOWRESET:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]-56;
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
	drawPacker(imgBtn1, subTemp[XPOS]+40, subTemp[YPOS], 0, imgH(imgBtn1)/2, imgW(imgBtn1), imgH(imgBtn1)/2, VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-4+40, subTemp[YPOS]-2, "적용하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
	setFontSize(11);
	
	
	xTouchFittingReset.wPos = imgW(imgBtn2);
	xTouchFittingReset.hPos = imgH(imgBtn2)/2;
	xTouchFittingReset.xPos = subTemp[XPOS]-56-xTouchFittingReset.wPos/2;
	xTouchFittingReset.yPos = subTemp[YPOS]-xTouchFittingReset.hPos/2;
	
	xTouchFittingSave.wPos = imgW(imgBtn1);
	xTouchFittingSave.hPos = imgH(imgBtn1)/2;
	xTouchFittingSave.xPos = subTemp[XPOS]+40-xTouchFittingSave.wPos/2;
	xTouchFittingSave.yPos = subTemp[YPOS]-xTouchFittingSave.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchFittingSave.xPos, xTouchFittingSave.yPos, xTouchFittingSave.wPos, xTouchFittingSave.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	//세부메뉴
	subTemp[XPOS] = px-340;
	subTemp[YPOS] = py+71;
	
	xFitting.totalNumS = xFitting.totalSlot[xFitting.selectTabB];
	
	xDragScrollFittingS.totalNum = 1+(xFitting.totalNumS-1)/8;
	xDragScrollFittingS.posGab = 640;

	dragScrollPrc(&xDragScrollFittingS,0,FALSE);
	
	
	
	if(xFitting.totalNumS == 0)
	{
		
		setFontSize(14);
		switch(xFitting.selectTabB)
		{
		case 0://아우터
		case 1://상의
		case 2://하의
		case 3://원피스
				
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"옷걸이에 진열 된 의상이 없거나");
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"성별이 맞지 않아 목록에 보여지지 않고 있습니다.");
			drawLinkInfo(px-380,py,0);
			break;
		case 4://신발
		case 5://가방
		case 6://기타
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"진열대에 진열 된 잡화가 없거나");
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"성별이 맞지 않아 목록에 보여지지 않고 있습니다.");
			drawLinkInfo(px-380,py,0);
			break;
		}
		
		setFontSize(11);
		setFontSize(20);
		drawPacker(imgPopupBtn0, px-100, py+110, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		gDrawStringBold(px-100-3, py+110-3, "제작하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
		setFontSize(11);
						
		xTouchLink.wPos = imgW(imgPopupBtn0);
		xTouchLink.hPos = imgH(imgPopupBtn0)/2;
		xTouchLink.xPos = px-75-xTouchLink.wPos/2;
		xTouchLink.yPos = py+110-xTouchLink.hPos/2; 
	}
	
	
	int totalLayer = 0;
	int layerInfo[20];
	M_Boolean isAdd = FALSE;
	
	int slotCode;
	int slotNum;
	int pos;
	
	for(int i=0;i<xFitting.totalNumS;i++)
	{
		slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
		setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
		
		isAdd = FALSE;
		for(int k=0;k<totalLayer;k++)
		{
			if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
			{
				isAdd = TRUE;
				break;
			}
			else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
			{
				isAdd = TRUE;
				for(int kk=totalLayer;kk>k;kk--)
				{
					layerInfo[kk] = layerInfo[kk-1];
				}
				layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
				totalLayer++;
				break;
			}
		}
		
		if(isAdd == FALSE)
		{
			layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
		}
	}
	
	
	
	int setClipX = px-410;
	int setClipW = 600;
	gSetClip(true,setClipX, 0, setClipW, lcdH);
	for(int page=-1;page<=1;page++)
	{
		if(xDragScrollFittingS.selectNum+page >= 0 && xDragScrollFittingS.selectNum+page < xDragScrollFittingS.totalNum)
		{
			for(int i=0;i<8;i++)
			{
				if(((xDragScrollFittingS.selectNum+page)*8)+i >= xFitting.totalNumS)
					break;
				
				pos = xDragScrollFittingS.pos+(xDragScrollFittingS.posGab*page);
				subTemp[XPOS] = px-335+pos+((i%4)*150);
				subTemp[YPOS] = py-105+((i/4)*236);
				
				slotNum = ((xDragScrollFittingS.selectNum+page)*8)+i;
				slotCode = xFitting.xSlot[xFitting.selectTabB][slotNum].code;
				drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
				setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
								
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					M_Boolean isCheck = FALSE;
					
					switch(xQuestTuto.nowNum)
					{
					case TUTO_12_SHOWWINDOWFITTING:
						for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
						{
							if(xFitting.xF[xFitting.gender].code[ff] != DONT)
							{
								switch(xFitting.xF[xFitting.gender].code[ff]/1000)
								{
								case F_TYPE_TOP:
									//상의를 안입었을때
									if(xFitting.selectTabB == 1)
										isCheck = TRUE;
									break;
								case F_TYPE_BOTTOM:
									//하의를 안입었을때
									if(xFitting.selectTabB == 2)
										isCheck = TRUE;
									break;
								}
							}
						}
							
							
						if(isCheck == FALSE && (xFitting.selectTabB == 1 || xFitting.selectTabB == 2) &&  i == 0)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
						break;
					}
				}

											
				
				
				//성별
				drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFashionData[xMap.type][xMap.listNum].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
				//아이템명
//				gSetClip(setClipX, subTemp[YPOS]-imgH(imgProductionMenuSlot0)/2, setClipW, imgH(imgProductionMenuSlot0));
				drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
//				gSetClip(setClipX, 0, setClipW, lcdH);
				
				gSetColor(44, 27, 26);
				setLabelWidth(150);
				gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFashionData[xMap.type][xMap.listNum].strName, VH);
				setLabelWidth(0);
				
				//레이어드번호
				if(totalLayer > 1)
				{
					drawPacker(imgFittingMenu4, subTemp[XPOS], subTemp[YPOS]+52, 0, 0, imgW(imgFittingMenu4), imgH(imgFittingMenu4), VH);
					for(int ll=0;ll<totalLayer;ll++)
					{
						if(layerInfo[ll] == xFashionData[xMap.type][xMap.listNum].layer)
						{
							switch(ll)
							{
							case 0:	sprintf(strTempS, "레이어드A");break;
							case 1:	sprintf(strTempS, "레이어드B");break;
							case 2:	sprintf(strTempS, "레이어드C");break;
							case 3:	sprintf(strTempS, "레이어드D");break;
                            case 4:sprintf(strTempS, "레이어드E");break;

							}
							
							gSetColor(255, 255, 255);
							gDrawString(subTemp[XPOS], subTemp[YPOS]+52, strTempS, VH);
							break;
						}
					}
				}
				 
				
				//장착중임
				if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == slotCode)
				{
					drawPacker(imgFittingSelectSlot, subTemp[XPOS], subTemp[YPOS]+34, 0, 0, imgW(imgFittingSelectSlot), imgH(imgFittingSelectSlot), VH);
				}
				else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
				{
					drawPacker(imgProductionMenuSlot2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot2), imgH(imgProductionMenuSlot2), VH);
					gSetColor(255, 0, 0);
					gDrawString(subTemp[XPOS], subTemp[YPOS]-13, "피팅불가", VH);
					gSetColor(255, 255, 255);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+25, "현재 착용중인\n레이어드", VH);
				}
				
				if(page == 0)
				{
					xTouchFittingS[i].wPos = 150;
					xTouchFittingS[i].hPos = 220;
					xTouchFittingS[i].xPos = subTemp[XPOS] - xTouchFittingS[i].wPos/2;
					xTouchFittingS[i].yPos = subTemp[YPOS]+50 - xTouchFittingS[i].hPos/2;
					/*
					 gSetColor(255, 0, 0);
					 setAlpha(100);
					 fillRect(xTouchFittingS[0].xPos, xTouchFittingS[0].yPos, xTouchFittingS[0].wPos, xTouchFittingS[0].hPos);
					 setAlpha(ALPHA_MAX);
					 */
				}
			}
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	
	
	if(xQuestTuto.state == QUEST_TUTO_KEY)
	{
		M_Boolean isCheck0 = FALSE;
		M_Boolean isCheck1 = FALSE;
		
		switch(xQuestTuto.nowNum)
		{
			case TUTO_12_SHOWWINDOWFITTING:
				for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
				{
					if(xFitting.xF[xFitting.gender].code[ff] != DONT)
					{
						switch(xFitting.xF[xFitting.gender].code[ff]/1000)
						{
							case F_TYPE_TOP:
								//상의를 있음
								isCheck0 = TRUE;
								break;
							case F_TYPE_BOTTOM:
								//하의를 있음
								isCheck1 = TRUE;
								break;
						}
					}
				}
				
				
				if(isCheck0 == TRUE && isCheck1 == TRUE)
				{
					xQuestTuto.isTutoClean = TRUE;
				}
				break;
		}
	}
	
	
	
	subTemp[XPOS] = px-108-335-3;
	subTemp[YPOS] = py+50;
	if(xDragScrollFittingS.selectNum > 0)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchLeft.wPos = 80;
	xNoticeWorldMap.xTouchLeft.hPos = 80;
	xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
	xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	
	
	subTemp[XPOS] = px-108+335;
	subTemp[YPOS] = py+50;
	if(xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchRight.wPos = 80;
	xNoticeWorldMap.xTouchRight.hPos = 80;
	xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
	xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
	 setAlpha(ALPHA_MAX);
	 */

	
	
	subTemp[XPOS] = px+356;
	subTemp[YPOS] = py+25;
	xTouchFittingMenu[0].wPos = 200;
	xTouchFittingMenu[0].hPos = 300;
	xTouchFittingMenu[0].xPos = subTemp[XPOS]+50-xTouchFittingMenu[0].wPos/2;
	xTouchFittingMenu[0].yPos = subTemp[YPOS]-xTouchFittingMenu[0].hPos/2;
	
	//넣어입기 빼입기
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_12_SHOWWINDOWIN0:
		case TUTO_12_SHOWWINDOWIN1:
		case TUTO_12_SHOWWINDOWOUT:
			if(xFitting.isInOutMenu == FALSE)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		}
	}
	
	
	if(xFitting.isInOutMenu == TRUE)
	{
		if(xQuestTuto.state == QUEST_TUTO_KEY)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_12_SHOWWINDOWIN0:
				xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
		
		
		
		
		
		if(++xFitting.inOutCnt > 150)
		{
			if(xWorldMap.isTuto == FALSE)
				xFitting.isInOutMenu = FALSE;
		}
		drawPacker(imgFittingMenu0, subTemp[XPOS]-130+10, subTemp[YPOS], 0, 0, imgW(imgFittingMenu0), imgH(imgFittingMenu0), VH);
		drawPacker(imgPopupBtnS1, subTemp[XPOS]-130, subTemp[YPOS]-26, 0, imgH(imgPopupBtnS1)/2, imgW(imgPopupBtnS1), imgH(imgPopupBtnS1)/2, VH);
		gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]-26, "넣어입기", VH, 255, 255, 255, 21, 97, 96);
		drawPacker(imgPopupBtnS2, subTemp[XPOS]-130, subTemp[YPOS]+26, 0, imgH(imgPopupBtnS2)/2, imgW(imgPopupBtnS2), imgH(imgPopupBtnS2)/2, VH);
		gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]+26, "빼입기", VH, 255, 255, 255, 77, 77, 77);
		
		
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_12_SHOWWINDOWIN1:
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]-130;
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]-26;
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				break;
			case TUTO_12_SHOWWINDOWOUT:
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]-130;
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+26;
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				break;
			}
		}
		
		
		
		xTouchFittingMenu[1].wPos = imgW(imgPopupBtnS1);
		xTouchFittingMenu[1].hPos = imgH(imgPopupBtnS1)/2;
		xTouchFittingMenu[1].xPos = subTemp[XPOS]-130-xTouchFittingMenu[1].wPos/2;
		xTouchFittingMenu[1].yPos = subTemp[YPOS]-26-xTouchFittingMenu[1].hPos/2;
		
		xTouchFittingMenu[2].wPos = imgW(imgPopupBtnS2);
		xTouchFittingMenu[2].hPos = imgH(imgPopupBtnS2)/2;
		xTouchFittingMenu[2].xPos = subTemp[XPOS]-130-xTouchFittingMenu[2].wPos/2;
		xTouchFittingMenu[2].yPos = subTemp[YPOS]+26-xTouchFittingMenu[2].hPos/2;
		
	}
	
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchFittingMenu[0].xPos, xTouchFittingMenu[0].yPos, xTouchFittingMenu[0].wPos, xTouchFittingMenu[0].hPos);
	 fillRect(xTouchFittingMenu[1].xPos, xTouchFittingMenu[1].yPos, xTouchFittingMenu[1].wPos, xTouchFittingMenu[1].hPos);
	 fillRect(xTouchFittingMenu[2].xPos, xTouchFittingMenu[2].yPos, xTouchFittingMenu[2].wPos, xTouchFittingMenu[2].hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	subTemp[XPOS] = px+431;
	subTemp[YPOS] = py-282;
	
	drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
	xTouchClr.wPos = imgW(imgBtn0);
	xTouchClr.hPos = imgH(imgBtn0)/2;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_11_RESULT:
		case TUTO_12_RESULT:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}	
	
	/*
	 gSetColor(255,0,0);
	 setAlpha(100);
	 fillRect(xTouchClr.xPos,xTouchClr.yPos,xTouchClr.wPos,xTouchClr.hPos);
	 setAlpha(ALPHA_MAX);
	 */
}
void drawFitting_STAFF()
{
	int px = cx;
	int py = cy;
	
	if(xWorldMap.isTuto == TRUE && (xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_13_STAFF_MENUTOUCH:
		case TUTO_14_STAFF_MENUTOUCH:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}

	//피팅창
    drawBgFillRect();
	drawImage(&imgFittingBg[0], px, py, 0, 0, imgFittingBg[0].w, imgFittingBg[0].h, VH);
	
	//작은 메뉴
	int iMaxTabS;
	iMaxTabS = FITTINGTABMAX_STAFF;
	subTemp[XPOS] = px-390;
	subTemp[YPOS] = py-275;
	for(int i=0;i<iMaxTabS;i++)
	{
		int h=0;
		if(i == xFitting.selectTabB)
		{
			h=-18;
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], imgW(imgMenu8)/2, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			
			switch(i)
			{
			case 0:		sprintf(strTempS, "헤어");break;
			case 1:		sprintf(strTempS, "표정");break;
			case 2:		sprintf(strTempS, "상의");break;
			case 3:		sprintf(strTempS, "하의");break;
			case 4:		sprintf(strTempS, "원피스");break;
			case 5:		sprintf(strTempS, "신발");break;
			}
			gDrawStringBold(subTemp[XPOS]+(i*76), subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
			
		}
		else
		{
			h=0;
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], 0, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
		}
			
		switch(i)
		{
		case 0:		//헤어
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*8, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
			break;
		case 1:		//표정
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*9, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
			break;
		case 2:		//상의
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*1, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
			break;
		case 3:		//하의
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*2, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
			break;
		case 4:		//원피스
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*3, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
			break;
		case 5:		//신발
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*4, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
			break;
		}
	}
	
	for(int i=0;i<iMaxTabS;i++)
	{
		xTouchFittingTabB[i].wPos = imgW(imgMenu8)/2-10;
		xTouchFittingTabB[i].hPos = imgH(imgMenu8);
		xTouchFittingTabB[i].xPos = subTemp[XPOS]+5+(i*76) - xTouchFittingTabB[i].wPos/2;
		xTouchFittingTabB[i].yPos = subTemp[YPOS] - xTouchFittingTabB[i].hPos/2;
	}

	
	//성별
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py-189;
	
	drawArrowPacker(imgFittingMenu3, subTemp[XPOS]-82, subTemp[YPOS], ARROW_LEFT);
	drawArrowPacker(imgFittingMenu3, subTemp[XPOS]+82, subTemp[YPOS], ARROW_RIGHT);
	memcpy(&xTouchGenderLeft,&xTouchArrowLeft,sizeof(xTouchArrowLeft));
	memcpy(&xTouchGenderRight,&xTouchArrowRight,sizeof(xTouchArrowRight));
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_13_STAFF_BUY:
			if(xStaff.staffSlot[xStaff.selectStaffSlot] != STAFF_SLOT_PAYMENTASSISTANT_1F)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+82;
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		case TUTO_14_STAFF_BUY:
			if(xStaff.staffSlot[xStaff.selectStaffSlot] != STAFF_SLOT_SHOPASSISTANT1_1F)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+82;
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		}
	}
	
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
		sprintf(strTempS, "%s",xPaymentAssistant[0].strName);
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		sprintf(strTempS, "%s",xShopAssistant[0][0].strName);
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
		sprintf(strTempS, "%s",xPaymentAssistant[1].strName);
		break;
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		sprintf(strTempS, "%s",xShopAssistant[1][0].strName);
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		sprintf(strTempS, "%s",xPaymentAssistant[2].strName);
		break;
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		sprintf(strTempS, "%s",xShopAssistant[2][0].strName);
		break;
	}
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 255, 255, 255, 82, 49, 38);
	
	setFontSize(11);
	
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		sprintf(strTempS, "1F");
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		sprintf(strTempS, "2F");
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		sprintf(strTempS, "3F");
		break;
	}
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		sprintf(strTempB, "%s/계산직원",strTempS);
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
	case STAFF_SLOT_SHOPASSISTANT1_2F:
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		sprintf(strTempB, "%s/응대직원",strTempS);
		break;
	}
	gSetColor(82, 49, 38);
	
	gDrawString(subTemp[XPOS], subTemp[YPOS]+31, strTempB, VH);

	

	//피팅창
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+32;
	
	drawImage(&imgFittingBg[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingBg[1].w, imgFittingBg[1].h, VH);
	drawPacker(imgCatalogSex, subTemp[XPOS]-94,subTemp[YPOS]-175, imgW(imgCatalogSex)/2*xFitting.gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
	
	//레이어드수파악
	xFitting.xF[xFitting.gender].layeredNum = 0;
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFitting.xF[xFitting.gender].code[ff] != DONT)
			xFitting.xF[xFitting.gender].layeredNum++;
	}
	drawFittingBody(subTemp[XPOS], subTemp[YPOS],&xFitting.xF[xFitting.gender],&xFitting.xFace,TRUE,xFitting.gender);
	
	
	
	//직원정보변경
	subTemp[XPOS] = px+437;
	subTemp[YPOS] = py-120;
	
	drawPacker(imgStaffEditBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgStaffEditBtn), imgH(imgStaffEditBtn), VH);
	
	xStaff.xTouchEdit.wPos = imgW(imgStaffEditBtn);
	xStaff.xTouchEdit.hPos = imgH(imgStaffEditBtn);
	xStaff.xTouchEdit.xPos = subTemp[XPOS]-xStaff.xTouchEdit.wPos/2;
	xStaff.xTouchEdit.yPos = subTemp[YPOS]-xStaff.xTouchEdit.hPos/2;
	
	
			
	//버튼
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+268;

	M_Boolean isCheckBuy = FALSE;
	//장착한것들 파악해서 갯수가 -인게 잇다면 그놈은 구입해야 할놈들이다
	if(xHairData[xFitting.xFace.hairNum].haveNum < 0)
		isCheckBuy = TRUE;
	if(xFaceData[xFitting.xFace.faceNum].haveNum < 0)
		isCheckBuy = TRUE;
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFitting.xF[xFitting.gender].code[ff] != DONT)
		{
			setMapData(xFitting.xF[xFitting.gender].code[ff]);
			
			if(xInventoryFashion.haveNum[xMap.type][xMap.listNum] < 0)
			{
				isCheckBuy = TRUE;
				break;
			}
		}
	}
	
	//원래대로
	drawPacker(imgBtn2, subTemp[XPOS]-56, subTemp[YPOS], 0, imgH(imgBtn2)/2, imgW(imgBtn2), imgH(imgBtn2)/2, VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-3-56, subTemp[YPOS]-2-12, "원래", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
	gDrawStringBold(subTemp[XPOS]-1-56, subTemp[YPOS]-2+12, "대로", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
	setFontSize(11);
	
	
	drawPacker(imgBtn1, subTemp[XPOS]+40, subTemp[YPOS], 0, imgH(imgBtn1)/2, imgW(imgBtn1), imgH(imgBtn1)/2, VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-4+40, subTemp[YPOS]-2, "적용하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
	setFontSize(11);

	
	
	xTouchFittingReset.wPos = imgW(imgBtn2);
	xTouchFittingReset.hPos = imgH(imgBtn2)/2;
	xTouchFittingReset.xPos = subTemp[XPOS]-56-xTouchFittingReset.wPos/2;
	xTouchFittingReset.yPos = subTemp[YPOS]-xTouchFittingReset.hPos/2;
	
	xTouchFittingSave.wPos = imgW(imgBtn1);
	xTouchFittingSave.hPos = imgH(imgBtn1)/2;
	xTouchFittingSave.xPos = subTemp[XPOS]+40-xTouchFittingSave.wPos/2;
	xTouchFittingSave.yPos = subTemp[YPOS]-xTouchFittingSave.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchFittingSave.xPos, xTouchFittingSave.yPos, xTouchFittingSave.wPos, xTouchFittingSave.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	
	//선호도정보
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+208;
	int nowInShopPer=0;
	int totalInShopPer=1;
	
	nowInShopPer += xHairData[xFitting.xFace.hairNum].inShopPer;
	nowInShopPer += xFaceData[xFitting.xFace.faceNum].inShopPer;

	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFitting.xF[xFitting.gender].code[ff] != DONT)
		{
			setMapData(xFitting.xF[xFitting.gender].code[ff]);
			nowInShopPer += xFashionData[xMap.type][xMap.listNum].inShopPer;
		}
	}
	totalInShopPer = nowInShopPer;
	
	//subTemp[WPOS] = imgFittingMenu[2].w * nowInShopPer / totalInShopPer;
	subTemp[WPOS] = 0;
	
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*3, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*2, subTemp[WPOS], imgH(imgFittingMenu2)/4, VL);
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, 0, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
	
	gDrawStringBold(subTemp[XPOS]-60, subTemp[YPOS], "선호도", VL, 255, 170, 21, 44, 27, 26);
	sprintf(strTempS, " %d%%증가",nowInShopPer);
	gDrawStringBold(subTemp[XPOS]+86, subTemp[YPOS], strTempS, VR, 255, 170, 21, 44, 27, 26);
		
	subTemp[XPOS] = px-340;
	subTemp[YPOS] = py+71;
	xFitting.totalNumS = xFitting.totalSlot[xFitting.selectTabB];
	
	xDragScrollFittingS.totalNum = 1+(xFitting.totalNumS-1)/8;
	xDragScrollFittingS.posGab = 640;
	
	dragScrollPrc(&xDragScrollFittingS,0,FALSE);
	
	int haveNum;
	int slotCode;
	int slotNum;
	int pos;
		
	int setClipX = px-410;
	int setClipW = 600;
    
    
    
    
    
	gSetClip(true,setClipX, 0, setClipW, lcdH);
	for(int page=-1;page<=1;page++)
	{
		if(xDragScrollFittingS.selectNum+page >= 0 && xDragScrollFittingS.selectNum+page < xDragScrollFittingS.totalNum)
		{
			for(int i=0;i<8;i++)
			{
				if(((xDragScrollFittingS.selectNum+page)*8)+i >= xFitting.totalNumS)
					break;
				
				pos = xDragScrollFittingS.pos+(xDragScrollFittingS.posGab*page);
				subTemp[XPOS] = px-335+pos+((i%4)*150);
				subTemp[YPOS] = py-105+((i/4)*236);
				
				slotNum = ((xDragScrollFittingS.selectNum+page)*8)+i;
				slotCode = xFitting.xSlot[xFitting.selectTabB][slotNum].code;
				drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
				
				switch(xFitting.selectTabB)
				{
				case 0:	//헤어
					//성별
					drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xHairData[slotCode].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
					//아이템명
					drawHairF(subTemp[XPOS],subTemp[YPOS], slotCode,0,80);
					xGame.isReSizeDraw = TRUE;
					xGame.reSize = 80;
					drawImage(&imgFittingBodyStaff[xFitting.gender][13], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingBodyStaff[xFitting.gender][13].w, imgFittingBodyStaff[xFitting.gender][13].h, VH);
					xGame.isReSizeDraw = FALSE;
					drawHairF(subTemp[XPOS],subTemp[YPOS], slotCode,1,80);
					
					gSetColor(44, 27, 26);
					setLabelWidth(150);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xHairData[slotCode].strName, VH);
					setLabelWidth(0);						
						
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*4, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					gSetColor(44, 27, 26);
					sprintf(strTempS, " %d%% ",xHairData[slotCode].inShopPer);
					gDrawString(subTemp[XPOS]+66, subTemp[YPOS]+123, strTempS, VR);
						
					haveNum = getStaffHairNum(slotCode);
					if(xFitting.xFace.hairNum == slotCode)
					{
						//착용중
						drawPacker(imgFittingSelectSlot, subTemp[XPOS], subTemp[YPOS]+34, 0, 0, imgW(imgFittingSelectSlot), imgH(imgFittingSelectSlot), VH);
					}
					else if(haveNum > 0)
					{
						//보유중
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						drawImage(&imgFittingBg[2], subTemp[XPOS]-63, subTemp[YPOS]+123+22, 0, 0, imgFittingBg[2].w, imgFittingBg[2].h, VL);
						if(haveNum == 999)
							sprintf(strTempS,"기본헤어");
						else
							sprintf(strTempS,"%d개",haveNum);
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
					}
					else
					{
						//판매가격
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123+22, imgW(imgProductionMenuObj0)/8*xHairData[slotCode].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
						setCommaNum(strTempS,xHairData[slotCode].price.oriData);
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
					}
						
					break;
				case 1:	//표정
					//성별
					drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFaceData[slotCode].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);

					//아이템명
					drawImage(&imgFittingBodyStaff[xFaceData[slotCode].gender][13], subTemp[XPOS], subTemp[YPOS]+10, 0, 0, imgFittingBodyStaff[xFaceData[slotCode].gender][13].w, imgFittingBodyStaff[xFaceData[slotCode].gender][13].h, VH);
												
					drawFaceF(subTemp[XPOS],subTemp[YPOS]+10, slotCode,FACE_TYPE_NORMAL,100);
					
					gSetColor(44, 27, 26);
					setLabelWidth(150);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFaceData[slotCode].strName, VH);
					setLabelWidth(0);
					
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*4, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					gSetColor(44, 27, 26);
					
						
					sprintf(strTempS, " %d%% ",xFaceData[slotCode].inShopPer);
					gDrawString(subTemp[XPOS]+66, subTemp[YPOS]+123, strTempS, VR);
						
					haveNum = getStaffFaceNum(slotCode);
					if(xFitting.xFace.faceNum == slotCode)
					{
						//착용중
						drawPacker(imgFittingSelectSlot, subTemp[XPOS], subTemp[YPOS]+34, 0, 0, imgW(imgFittingSelectSlot), imgH(imgFittingSelectSlot), VH);
					}
					else if(haveNum > 0)
					{
						//보유중
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						drawImage(&imgFittingBg[2], subTemp[XPOS]-63, subTemp[YPOS]+123+22, 0, 0, imgFittingBg[2].w, imgFittingBg[2].h, VL);
						if(haveNum == 999)
							sprintf(strTempS,"기본얼굴");
						else
							sprintf(strTempS,"%d개",haveNum);
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
					}
					else
					{
						//판매가격
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123+22, imgW(imgProductionMenuObj0)/8*xFaceData[slotCode].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
						setCommaNum(strTempS, xFaceData[slotCode].price.oriData);
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
					}
					break;
				default:
					setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
					//성별
					drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFashionData[xMap.type][xMap.listNum].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
					//아이템명
					//gSetClip(setClipX, subTemp[YPOS]-imgH(imgProductionMenuSlot0)/2, setClipW, imgH(imgProductionMenuSlot0));
					drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
					//gSetClip(setClipX, 0, setClipW, lcdH);
					
					gSetColor(44, 27, 26);
					setLabelWidth(150);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFashionData[xMap.type][xMap.listNum].strName, VH);
					setLabelWidth(0);
					
					isSubTemp[0] = FALSE;
                        

                        
					for(int f=0;f<SPRIT_IMGLAYERMAX;f++)
					{
						if(xFitting.xF[xFitting.gender].code[f] == slotCode)
						{
							isSubTemp[0] = TRUE;
							break;
						}
					}
					
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*4, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					gSetColor(44, 27, 26);
						
					sprintf(strTempS, " %d%% ",xFashionData[xMap.type][xMap.listNum].inShopPer);
					gDrawString(subTemp[XPOS]+66, subTemp[YPOS]+123, strTempS, VR);
					
					haveNum = getStaffFashionNum(slotCode);
					if(isSubTemp[0] == TRUE)
					{
						//착용중
						drawPacker(imgFittingSelectSlot, subTemp[XPOS], subTemp[YPOS]+34, 0, 0, imgW(imgFittingSelectSlot), imgH(imgFittingSelectSlot), VH);
					}
					else if(haveNum > 0)
					{
						//보유중
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						drawImage(&imgFittingBg[2], subTemp[XPOS]-63, subTemp[YPOS]+123+22, 0, 0, imgFittingBg[2].w, imgFittingBg[2].h, VL);
						
						if(haveNum == 999)
							sprintf(strTempS,"기본의상");
						else
							sprintf(strTempS,"%d개",haveNum);
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
					}
					else
					{
						//판매가격
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123+22, imgW(imgProductionMenuObj0)/8*xFashionData[xMap.type][xMap.listNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
						setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].price.oriData);
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123+22, strTempS, VR);
					}
					break;
				}
				xQuestInfo.isCC = FALSE;
				for(int cc=0;cc<xQuestInfo.totalStaffSlotCode;cc++)
				{
					if(xQuestInfo.staffSlotCode[cc] == slotCode)
						xQuestInfo.isCC = TRUE;
				}
				if(xQuestInfo.isCC == TRUE)
					drawProductionArrow(subTemp[XPOS], subTemp[YPOS]-80);
				
				if(page == 0)
				{
					xTouchFittingS[i].wPos = 150;
					xTouchFittingS[i].hPos = 220;
					xTouchFittingS[i].xPos = subTemp[XPOS] - xTouchFittingS[i].wPos/2;
					xTouchFittingS[i].yPos = subTemp[YPOS]+50 - xTouchFittingS[i].hPos/2;
					/*
					 gSetColor(255, 0, 0);
					 setAlpha(100);
					 fillRect(xTouchFittingS[0].xPos, xTouchFittingS[0].yPos, xTouchFittingS[0].wPos, xTouchFittingS[0].hPos);
					 setAlpha(ALPHA_MAX);
					 */
				}
			}
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	subTemp[XPOS] = px-108-335-3;
	subTemp[YPOS] = py+50;
	if(xDragScrollFittingS.selectNum > 0)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchLeft.wPos = 80;
	xNoticeWorldMap.xTouchLeft.hPos = 80;
	xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
	xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	
	
	subTemp[XPOS] = px-108+335;
	subTemp[YPOS] = py+50;
	if(xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchRight.wPos = 80;
	xNoticeWorldMap.xTouchRight.hPos = 80;
	xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
	xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	subTemp[XPOS] = px+356;
	subTemp[YPOS] = py+25;
	xTouchFittingMenu[0].wPos = 200;
	xTouchFittingMenu[0].hPos = 300;
	xTouchFittingMenu[0].xPos = subTemp[XPOS]+50-xTouchFittingMenu[0].wPos/2;
	xTouchFittingMenu[0].yPos = subTemp[YPOS]-xTouchFittingMenu[0].hPos/2;
	
	//넣어입기 빼입기
	
	if(xFitting.isInOutMenu == TRUE)
	{
		if(++xFitting.inOutCnt > 150)
			xFitting.isInOutMenu = FALSE;
		
		drawPacker(imgFittingMenu0, subTemp[XPOS]-130+10, subTemp[YPOS], 0, 0, imgW(imgFittingMenu0), imgH(imgFittingMenu0), VH);
		
		drawPacker(imgPopupBtnS1, subTemp[XPOS]-130, subTemp[YPOS]-26, 0, imgH(imgPopupBtnS1)/2, imgW(imgPopupBtnS1), imgH(imgPopupBtnS1)/2, VH);
		gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]-26, "넣어입기", VH, 255, 255, 255, 21, 97, 96);
		drawPacker(imgPopupBtnS2, subTemp[XPOS]-130, subTemp[YPOS]+26, 0, imgH(imgPopupBtnS2)/2, imgW(imgPopupBtnS2), imgH(imgPopupBtnS2)/2, VH);
		gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]+26, "빼입기", VH, 255, 255, 255, 77, 77, 77);
		
		
		xTouchFittingMenu[1].wPos = imgW(imgPopupBtnS1);
		xTouchFittingMenu[1].hPos = imgH(imgPopupBtnS1)/2;
		xTouchFittingMenu[1].xPos = subTemp[XPOS]-130-xTouchFittingMenu[1].wPos/2;
		xTouchFittingMenu[1].yPos = subTemp[YPOS]-26-xTouchFittingMenu[1].hPos/2;
		
		xTouchFittingMenu[2].wPos = imgW(imgPopupBtnS2);
		xTouchFittingMenu[2].hPos = imgH(imgPopupBtnS2)/2;
		xTouchFittingMenu[2].xPos = subTemp[XPOS]-130-xTouchFittingMenu[2].wPos/2;
		xTouchFittingMenu[2].yPos = subTemp[YPOS]+26-xTouchFittingMenu[2].hPos/2;
		
	}
	
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchFittingMenu[0].xPos, xTouchFittingMenu[0].yPos, xTouchFittingMenu[0].wPos, xTouchFittingMenu[0].hPos);
	 fillRect(xTouchFittingMenu[1].xPos, xTouchFittingMenu[1].yPos, xTouchFittingMenu[1].wPos, xTouchFittingMenu[1].hPos);
	 fillRect(xTouchFittingMenu[2].xPos, xTouchFittingMenu[2].yPos, xTouchFittingMenu[2].wPos, xTouchFittingMenu[2].hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	subTemp[XPOS] = px+431;
	subTemp[YPOS] = py-282;
	
	drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
	
	xTouchClr.wPos = imgW(imgBtn0);
	xTouchClr.hPos = imgH(imgBtn0)/2;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_13_RESULT:
		case TUTO_14_RESULT:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
	
	
	/*
	 gSetColor(255,0,0);
	 setAlpha(100);
	 fillRect(xTouchClr.xPos,xTouchClr.yPos,xTouchClr.wPos,xTouchClr.hPos);
	 setAlpha(ALPHA_MAX);
	 */
		
	switch(xStaff.state)
	{
	case STAFF_STATE_BUYPOPUP:
		drawStaffBuyPopup();
		break;
	}
}

void drawStaffBuyPopup()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	
	
	xStaff.xDragScrollPopupItemSlot.totalNum = xStaff.totalPopupItemSlot;
	xStaff.xDragScrollPopupItemSlot.posGab = 152;
	
	xStaff.xDragScrollPopupItemSlot.endPos = -(((xStaff.xDragScrollPopupItemSlot.totalNum-4)*xStaff.xDragScrollPopupItemSlot.posGab));
		
	
	if(xStaff.xDragScrollPopupItemSlot.totalNum < 4)
		xStaff.xDragScrollPopupItemSlot.endPos = 0;
	else
		xStaff.xDragScrollPopupItemSlot.endPos -= 52;
	
	int iMax = xStaff.xDragScrollPopupItemSlot.totalNum;
	dragScrollPrc(&xStaff.xDragScrollPopupItemSlot,1,FALSE);
	
	int pos;
	subTemp[XPOS] = px-210;
	subTemp[YPOS] = py-80;
	

	 int setClipX = px-286-3;
	 int setClipW = 286*2;
	 gSetClip(true,setClipX, 0, setClipW, lcdH);
	 	
	for(int i=0;i<iMax;i++)
	{
		pos = xStaff.xDragScrollPopupItemSlot.pos+(xStaff.xDragScrollPopupItemSlot.posGab*i);
		drawPacker(imgMenu10, subTemp[XPOS]+pos, subTemp[YPOS], 0, 0, imgW(imgMenu10), imgH(imgMenu10), VH);

		switch(xStaff.popupItemSlotTab[i])
		{
		case 0:		//헤어
			drawHairF(subTemp[XPOS]+pos,subTemp[YPOS], xStaff.popupItemSlotCode[i], 0,70);
			drawHairF(subTemp[XPOS]+pos,subTemp[YPOS], xStaff.popupItemSlotCode[i], 1,70);
			break;
		case 1:		//표정
			drawFaceF(subTemp[XPOS]+pos,subTemp[YPOS], xStaff.popupItemSlotCode[i], FACE_TYPE_NORMAL, 70);
			break;
		default:
			//gSetClip(setClipX, subTemp[YPOS]-imgH(imgMenu10)/2, setClipW, imgH(imgMenu10));
			drawFittingF(subTemp[XPOS]+pos,subTemp[YPOS], xStaff.popupItemSlotCode[i], 70);
			//gSetClip(setClipX, 0, setClipW, lcdH);
			break;
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
			
	
	gSetColor(44, 27, 26);
	setFontSize(14);
	gDrawString(px, py+32, "위 의상들을 구매 후 적용 하시겠습니까?", VH);
	setFontSize(11);
		
	subTemp[YPOS] = py+80;
	drawPacker(imgInfoBar6, px-110, subTemp[YPOS], 0, 0, imgW(imgInfoBar6), imgH(imgInfoBar6), VH);
	drawPacker(imgInfoBar6, px+110, subTemp[YPOS], 0, 0, imgW(imgInfoBar6), imgH(imgInfoBar6), VH);

	drawIcon(px-110-66, subTemp[YPOS], ICON_TYPE_LOOK);
	drawIcon(px+110-66, subTemp[YPOS], ICON_TYPE_GOLD);
	gSetColor(44, 27, 26);
	sprintf(strTempS, "%d",xStaff.sellCash);
	gDrawString(px-110+66+4, subTemp[YPOS], strTempS, VR);
	sprintf(strTempS, "%d",xStaff.sellGold);
	gDrawString(px+110+66+4, subTemp[YPOS], strTempS, VR);

	
	drawBtn(px+100, py+157, BTN_OK_CONFIRM);
	drawBtn(px-100, py+157, BTN_CLR_CLEAR);
}

int getNumLen(int num)
{
	int len = 1;
	while(num >= 10)
	{
		num /= 10;
		len++;
	}
	return len;
}

int getNumW(XIMG * imgNum,int gab)
{
	int w;
	w = ((imgNum->w/10)+gab);
	return w;
}






void drawTimeSprintf(char * strTemp,int time,int type)
{
	int hh;
	int mm;
	int ss;
	
	if(time < 0)
		time = 0;
	//시
	hh = time/60/60;
	//분
	mm = time/60%60;
	//초
	ss = time%60;
	

	switch(type)
	{
	case 0:
		//d h m s
		if(mm == 0 && hh == 0)
		{
			//초
			sprintf(strTemp, "%d%ds",ss/10,ss%10);
		}
		else
		{
			//시간
			if(hh > 0)
			{
				if(mm == 0)
					sprintf(strTemp, "%dh",hh);
				else
					sprintf(strTemp, "%dh %d%dm",hh,mm/10,mm%10);
			}
			else
			{
				if(ss > 0)
					sprintf(strTemp, "%dm %d%ds",mm,ss/10,ss%10);
				else
					sprintf(strTemp, "%dm",mm);
			}
		}
		break;
	case 1:
        if(hh>0)
        {
            sprintf(strTempS,"%d%d:%d%d:%d%d", hh/10,hh%10,mm/10,mm%10,ss/10,ss%10);
        }
        else
        {
            sprintf(strTempS,"%d%d:%d%d", mm/10,mm%10,ss/10,ss%10);
        }
        break;
	case 2:
		//d h m s
		if(mm == 0 && hh == 0)
		{
			//초
			sprintf(strTemp, "%d%d초",ss/10,ss%10);
		}
		else
		{
			//시간
			if(hh > 0)
			{
				if(mm == 0)
					sprintf(strTemp, "%d시간",hh);
				else
					sprintf(strTemp, "%d시간 %d%d분",hh,mm/10,mm%10);
			}
			else
			{
				if(ss > 0)
					sprintf(strTemp, "%d분 %d%d초",mm,ss/10,ss%10);
				else
					sprintf(strTemp, "%d분",mm);
			}
		}
		break;
	case 3:
		if(hh > 0)
		{
			if(mm == 0)
				sprintf(strTemp, "%d시간",hh);
			else
				sprintf(strTemp, "%d시간 %d%d분",hh,mm/10,mm%10);
		}
		else
		{
			if(mm == 0)
				mm = 1;
			
			sprintf(strTemp, "%d분",mm);
		}
		break;
	case 4:
		if(hh > 0)
		{
			if(mm == 0)
				sprintf(strTemp, "%dh",hh);
			else
				sprintf(strTemp, "%dh %d%dm",hh,mm/10,mm%10);
		}
		else
		{
			if(mm == 0)
				mm = 1;
			
			sprintf(strTemp, "%dm",mm);
		}
		break;
	}
}


int getFastSellCash(int num)
{
	int cash = 1;
	
	cash += num/10;
	return cash;
}

int getFastTimeCash(int time)
{
	int cash = 1;
	
	cash += (1+(time/60/60))/3;
	
	
	return cash;
}

void inputInventoryFashion(int code,int inputNum)
{
	if(xInventoryFashion.isOpen[code/1000][code%1000] == FALSE)
	{
		xInventoryFashion.isOpen[code/1000][code%1000] = TRUE;
	}
	
	xInventoryFashion.haveNum[code/1000][code%1000] += inputNum;
}

void outputInventoryFashion(int code,int inputNum)
{
	xInventoryFashion.haveNum[code/1000][code%1000] -= inputNum;
}


int getFittingRoom(int mapX,int mapY,int floor)
{
	int resultTableNum = DONT;
			
	for(int i=0;i<xFittingRoomInfo[floor].totalNumAll;i++)
	{
		//진열대 옷걸이등은 종류가 같거나 인벤에 넣다가 팔앗다가 여러경우가 있어 위치정보를 고유정보로 활용한다
		if(xFittingRoomInfo[floor].x[i] == mapX && xFittingRoomInfo[floor].y[i] == mapY)
		{
			resultTableNum = i;
			break;
		}
	}
	return resultTableNum;
}

int getSellTable(int mapX,int mapY,int floor)
{
	int resultTableNum = DONT;
	
	for(int i=0;i<SELLTABLEINFOMAX;i++)
	{
		//진열대 옷걸이등은 종류가 같거나 인벤에 넣다가 팔앗다가 여러경우가 있어 위치정보를 고유정보로 활용한다
		if(xSellTableInfo[floor][i].isUse == TRUE && xSellTableInfo[floor][i].x == mapX && xSellTableInfo[floor][i].y == mapY)
		{

			resultTableNum = i;
			break;
		}
	}
	return resultTableNum;
}

int getShowWindow(int mapX,int mapY,int floor)
{
	int resultTableNum = DONT;
	
	
	for(int i=0;i<SHOWWINDOWINFOMAX;i++)
	{
		
		//진열대 옷걸이등은 종류가 같거나 인벤에 넣다가 팔앗다가 여러경우가 있어 위치정보를 고유정보로 활용한다
		if(xShowWindowInfo[floor][i].isUse == TRUE && xShowWindowInfo[floor][i].x == mapX && xShowWindowInfo[floor][i].y == mapY)
		{
			resultTableNum = i;
			break;
		}
	}
	return resultTableNum;
}



void resetSellTableInfo(int floor)
{
	xSell.totalTotal[floor] = 0;
	xSell.totalTrend[floor] = 0;
	xSell.totalSell[floor] = 0;
	xSell.totalHanger[floor] = 0;
	xSell.totalAccessory[floor] = 0;
	xSell.totalSex[0][floor] = 0;
	xSell.totalSex[1][floor] = 0;
		
	xSell.totalItemNum[floor] = 0;
	xSell.totalEmpty[floor] = 0;
	
	
	xSell.totalIngHangerSlot[floor] = 0;
	xSell.totalIngAccessorySlot[floor] = 0;
	
	for(int ss=0;ss<SELLTABLEINFOMAX;ss++)
	{
		if(xSellTableInfo[floor][ss].isUse == TRUE)
		{
			setMapData(xSellTableInfo[floor][ss].interiorCode);
			
			xSell.tableNumSlot_Total[floor][xSell.totalTotal[floor]++] = ss;
			
			xSellTableInfo[floor][ss].useTotal = 0;
			xSellTableInfo[floor][ss].sellOkTotal = 0;
			for(int k=0;k<xObj.xObjData[xMap.type][xMap.listNum].slot;k++)
			{
				if(xSellTableInfo[floor][ss].xSlot[k].code != DONT)
				{
					if(xMap.type == INTERIOR_TYPE_HANGER)
						xSell.totalIngHangerSlot[floor]++;
					else
						xSell.totalIngAccessorySlot[floor]++;
					
					if(xSellTableInfo[floor][ss].xSlot[k].num > 0)
					{
						xSell.totalItemNum[floor] += xSellTableInfo[floor][ss].xSlot[k].num;
						
						int type = xSellTableInfo[floor][ss].xSlot[k].code/1000;
						int listNum = xSellTableInfo[floor][ss].xSlot[k].code%1000;
						xSell.tableNumSlot_Sex[xFashionData[type][listNum].gender][floor][xSell.totalSex[xFashionData[type][listNum].gender][floor]++] = ss;
						xSell.tableNumSlot_Sell[floor][xSell.totalSell[floor]++] = ss;
						if(xMap.type == INTERIOR_TYPE_HANGER)
						{
							xSell.tableNumSlot_Hanger[floor][xSell.totalHanger[floor]++] = ss;
						}
						else if(xMap.type == INTERIOR_TYPE_ACCESSORY)
						{
							xSell.tableNumSlot_Accessory[floor][xSell.totalAccessory[floor]++] = ss;
						}
						else
						{
							printf("에러에러에러 여긴 들어오면 안되요(확인필요)>>>%d\n",xSellTableInfo[floor][ss].interiorCode);
						}
						
						xSellTableInfo[floor][ss].useXslotNum[xSellTableInfo[floor][ss].useTotal++] = k;
																		
						for(int t=0;t<TRENDMAX;t++)
						{
							if(xTrend.isOpen[t] == TRUE)
							{
								if(xTrend.itemCode[t] == xSellTableInfo[floor][ss].xSlot[k].code)
								{
									xSell.tableNumSlot_Trend[floor][xSell.totalTrend[floor]++] = ss;
									break;
								}
							}
						}
					}
					else
						xSellTableInfo[floor][ss].sellOkTotal++;
				}
				else
				{
					xSell.tableNumSlot_Empty[floor][xSell.totalEmpty[floor]++] = ss;
					
				}
			}
		}
	}
}

int addSellTableInfo(int key,int floor)
{

	for(int i=0;i<SELLTABLEINFOMAX;i++)
	{
		if(xSellTableInfo[floor][i].isUse == FALSE)
		{
			xSellTableInfo[floor][i].isUse = TRUE;
			
			for(int x=xMap.shopPointX;x<xMap.shopPointX+xMap.shopPointW;x++)
			{
				for(int y=xMap.shopPointY;y<xMap.shopPointY+xMap.shopPointH;y++)
				{
					if(key == xMap.dataKey[floor][MAP_TYPE_OBJ][x][y])
					{
						xSellTableInfo[floor][i].isUpdata = FALSE;
						xSellTableInfo[floor][i].x = x;
						xSellTableInfo[floor][i].y = y;
						xSellTableInfo[floor][i].interiorCode = xMap.data[floor][MAP_TYPE_OBJ][x][y];
						
						for(int k=0;k<9;k++)
						{
							xSellTableInfo[floor][i].xSlot[k].code = DONT;
							xSellTableInfo[floor][i].xSlot[k].waitSlot = DONT;
						}
						return i;
					}
				}
			}
			break;
		}
	}
	return DONT;
}


int getSellTableInfo(int key,int floor)
{
	
	for(int i=0;i<SELLTABLEINFOMAX;i++)
	{
		if(xSellTableInfo[floor][i].isUse == TRUE)
		{
			if(key == xMap.dataKey[floor][MAP_TYPE_OBJ][xSellTableInfo[floor][i].x][xSellTableInfo[floor][i].y])
			{
				return i;
			}
		}
	}
	return DONT;
}

int addShowWindowInfo(int key,int floor)
{
	
	
	for(int i=0;i<SHOWWINDOWINFOMAX;i++)
	{
		if(xShowWindowInfo[floor][i].isUse == FALSE)
		{
			xShowWindowInfo[floor][i].isFitting = FALSE;
			
			
			xShowWindowInfo[floor][i].isUse = TRUE;
			
			xShowWindowInfo[floor][i].gender = 0;
			
			xShowWindowInfo[floor][i].state = SHOWWINDOWINFO_STATE_WAIT;

			
			xShowWindowInfo[floor][i].xF.isInFitting = FALSE;
			for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
				xShowWindowInfo[floor][i].xF.code[ff] = DONT;
			
			for(int x=xMap.shopPointX-1;x<xMap.shopPointX+xMap.shopPointW;x++)
			{
				
				for(int y=xMap.shopPointY-1;y<xMap.shopPointY+xMap.shopPointH;y++)
				{

					if(key == xMap.dataKey[floor][MAP_TYPE_WALL1][x][y])
					{
						xShowWindowInfo[floor][i].x = x;
						xShowWindowInfo[floor][i].y = y;
						xShowWindowInfo[floor][i].interiorCode = xMap.data[floor][MAP_TYPE_WALL1][x][y];
						

						
						return i;
					}
				}
			}
			break;
		}
	}
	return DONT;
}

int getShowWindowInfo(int key,int floor)
{
	
	for(int i=0;i<SHOWWINDOWINFOMAX;i++)
	{
		if(xShowWindowInfo[floor][i].isUse == TRUE)
		{
			if(key == xMap.dataKey[floor][MAP_TYPE_WALL1][xShowWindowInfo[floor][i].x][xShowWindowInfo[floor][i].y])
			{
				return i;
			}
		}
	}
	return DONT;
}


void drawSellMain()
{
	int px = cx+260;
	int py = cy+170;
	int slot = 3;

//LJW 옷걸이 진열대 슬롯 3개만 쓰기 일단주석
//	setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
//	slot = xObj.xObjData[xMap.type][xMap.listNum].slot;		
//	
//	int iMax = xObj.xObjData[xMap.type][xMap.listNum].slot;
	int iMax = 3;
	M_Boolean isWaitSlot = FALSE;
	for(int i=0;i<iMax;i++)
	{
		subTemp[XPOS] = px-141+((i%3)*138);
		subTemp[YPOS] = py-16+((i/3)*138)+(slot == 3?0:-150);
		
		drawPacker(imgSellBg2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSellBg2), imgH(imgSellBg2), VH);
		
		if(xSellSlotSave.code[i] == DONT)
		{
			drawPacker(imgEmptySlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgEmptySlot1), imgH(imgEmptySlot1), VH);
		}
		else
		{
			setMapData(xSellSlotSave.code[i]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			
			gSetClip(true,0, subTemp[YPOS]-imgH(imgSellBg2)/2, lcdW, imgH(imgSellBg2));
			if(xFashionDrop.state[i] == FASHIONDROP_STATE_DONT)
				drawFittingF(subTemp[XPOS], subTemp[YPOS],(xMap.type*1000)+xMap.listNum,80);
			gSetClip(false,0, 0, lcdW, lcdH);
//			drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
//			drawPacker(imgSellBg5, subTemp[XPOS], subTemp[YPOS]-5, 0, imgH(imgSellBg5)/4*((gameCnt/5)%4), imgW(imgSellBg5), imgH(imgSellBg5)/4, VH);
			
			setFontSize(8);
			gSetColor(44, 27, 26);
			sprintf(strTempS,"남은수량 %d벌",getSellMaxNum(xSellSlotSave.code[i]));
			gDrawString(subTemp[XPOS], subTemp[YPOS]+55, strTempS, VH);
			gSetColor(255, 255, 255);
		}
		
//LJW 의상판매 주석처리
//		if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].code == DONT)
//		{
//			if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot != DONT)
//			{
//				isWaitSlot = TRUE;
//				setMapData(xSell.xSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
//				drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
//
//				
//				if(xFashionDrop.state[i] == FASHIONDROP_STATE_DONT)
//				{
//					
//					drawFittingF(subTemp[XPOS], subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
//				}
//			}
//			else
//				drawPacker(imgEmptySlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgEmptySlot1), imgH(imgEmptySlot1), VH);
//		}
//		else
//		{
//			setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
//			
//			gSetClip(true,0, subTemp[YPOS]-imgH(imgSellBg2)/2, lcdW, imgH(imgSellBg2));
//			drawFittingF(subTemp[XPOS], subTemp[YPOS],(xMap.type*1000)+xMap.listNum,80);
//			gSetClip(false,0, 0, lcdW, lcdH);
//			drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
//			drawPacker(imgSellBg5, subTemp[XPOS], subTemp[YPOS]-5, 0, imgH(imgSellBg5)/4*((gameCnt/5)%4), imgW(imgSellBg5), imgH(imgSellBg5)/4, VH);
//			
//			setFontSize(8);
//			sprintf(strTempS,"남은수량 %d벌",xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].num);
//			gSetColor(255, 255, 255);
//			gDrawString(subTemp[XPOS], subTemp[YPOS]+22, strTempS, VH);
//			setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
//			
//			if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].num == 0)
//			{
//				drawPacker(imgSellBg3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSellBg3), imgH(imgSellBg3), VH);
//				gSetClip(true,0, subTemp[YPOS]-imgH(imgSellBg2)/2, lcdW, imgH(imgSellBg2));
//				drawFittingF(subTemp[XPOS], subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
//				gSetClip(false,0, 0, lcdW, lcdH);
//				drawPacker(imgSellBg4, subTemp[XPOS], subTemp[YPOS]+45, 0, imgH(imgSellBg4)/2*((gameCnt/30)%2), imgW(imgSellBg4), imgH(imgSellBg4)/2, VH);
//			}
//			else	//판매중
//			{
//				gSetClip(true,0, subTemp[YPOS]-imgH(imgSellBg2)/2, lcdW, imgH(imgSellBg2));
//				drawFittingF(subTemp[XPOS], subTemp[YPOS],(xMap.type*1000)+xMap.listNum,80);
//				gSetClip(false,0, 0, lcdW, lcdH);
//				drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
//				drawPacker(imgSellBg5, subTemp[XPOS], subTemp[YPOS]-5, 0, imgH(imgSellBg5)/4*((gameCnt/5)%4), imgW(imgSellBg5), imgH(imgSellBg5)/4, VH);
//				
//				setFontSize(8);
//				sprintf(strTempS,"남은수량 %d벌",xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].num);
//				gSetColor(255, 255, 255);
//				gDrawString(subTemp[XPOS], subTemp[YPOS]+22, strTempS, VH);
//				
//				drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]+46, 0, imgH(imgProductionMenuGage)/2, imgW(imgProductionMenuGage), imgH(imgProductionMenuGage)/2, VL);
//				subTemp[WPOS] = (xFashionData[xMap.type][xMap.listNum].makeNum.oriData - xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].num)*imgW(imgProductionMenuGage)/xFashionData[xMap.type][xMap.listNum].makeNum.oriData;
//				drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]+46, 0, 0, subTemp[WPOS], imgH(imgProductionMenuGage)/2, VL);
//				
//				sprintf(strTempS,"%d %% ",subTemp[WPOS]*100/imgW(imgProductionMenuGage));
//				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+46, strTempS, VH, 255, 255, 255, 44, 27, 26);
//				setFontSize(11);
//			}
		
//			
//			isSubTemp[12] = FALSE;			
//			for(int tt=0;tt<TRENDMAX;tt++)
//			{
//				if(xTrend.isOpen[tt] == TRUE && xTrend.itemCode[tt] != DONT)
//				{
//					if(xTrend.itemCode[tt] == xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].code)
//					{
//						isSubTemp[12] = TRUE;
//					}
//				}
//			}
//			//기능
//			if(isSubTemp[12] == TRUE)
//			{
//				drawPacker(imgTrendInfoIcon, subTemp[XPOS]+30, subTemp[YPOS]-50, 0, 0, imgW(imgTrendInfoIcon), imgH(imgTrendInfoIcon), VH);
//			}
//		}
		
		xFashionDrop.x_sellSlot[i] = subTemp[XPOS];
		xFashionDrop.y_sellSlot[i] = subTemp[YPOS];
		xFashionDrop.scale_sellSlot[i] = 60;
								
		xTouchSellSlot[i].wPos = imgW(imgSellBg2);
		xTouchSellSlot[i].hPos = imgH(imgSellBg2);
		xTouchSellSlot[i].xPos = subTemp[XPOS] - xTouchSellSlot[i].wPos/2;
		xTouchSellSlot[i].yPos = subTemp[YPOS] - xTouchSellSlot[i].hPos/2;
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xTouchSellSlot[i].xPos, xTouchSellSlot[i].yPos, xTouchSellSlot[i].wPos, xTouchSellSlot[i].hPos);
		setAlpha(ALPHA_MAX);
		 */
	}
		
	setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
	
	if(slot == 6)
	{
		drawPacker(imgSellBg1, px, py-79, 0, 0, imgW(imgSellBg1), imgH(imgSellBg1), VH);
	}
	else
	{
		drawPacker(imgSellBg0, px, py, 0, 0, imgW(imgSellBg0), imgH(imgSellBg0), VH);
	}
	
	switch(xMap.type)
	{
	case INTERIOR_TYPE_HANGER:		//옷걸이
		if(slot == 6)
			drawPacker(imgStorageTitle, px-145, py-125-150, 0, 0, imgW(imgStorageTitle), imgH(imgStorageTitle)/2, VH);
		else
			drawPacker(imgStorageTitle, px-145, py-125, 0, 0, imgW(imgStorageTitle), imgH(imgStorageTitle)/2, VH);
		break;
	case INTERIOR_TYPE_ACCESSORY:		//진열대
		if(slot == 6)
			drawPacker(imgStorageTitle, px-145, py-125-150, 0, imgH(imgStorageTitle)/2, imgW(imgStorageTitle), imgH(imgStorageTitle)/2, VH);
		else
			drawPacker(imgStorageTitle, px-145, py-125, 0, imgH(imgStorageTitle)/2, imgW(imgStorageTitle), imgH(imgStorageTitle)/2, VH);
		break;
	}
	
	if(slot == 6)
	{
		xTouchClr.wPos = 420;
		xTouchClr.hPos = 400;
		xTouchClr.xPos = px-200;
		xTouchClr.yPos = py-100-150-xTouchClr.hPos;
	}
	else
	{
		xTouchClr.wPos = 420;
		xTouchClr.hPos = 400;
		xTouchClr.xPos = px-200;
		xTouchClr.yPos = py-100-xTouchClr.hPos;
	}
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_1_RESULT:
		case TUTO_2_RESULT:
			xTutoInfo.x[xTutoInfo.totalNum] = cx+440;
			xTutoInfo.y[xTutoInfo.totalNum] = cy+60;
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	//버튼
	if(slot == 6)
	{
	subTemp[XPOS] = px;
	subTemp[YPOS] = py+102-10;
	}
	else
	{
		subTemp[XPOS] = px;
		subTemp[YPOS] = py+98;
	}

//LJW 의상판매 진열하기 막기
//	drawPacker(imgQuestResult1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
//	gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "진열하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
//	
//	xTouchOk.wPos = imgW(imgQuestResult1);
//	xTouchOk.hPos = imgH(imgQuestResult1)/2;
//	xTouchOk.xPos = subTemp[XPOS] - xTouchOk.wPos/2;
//	xTouchOk.yPos = subTemp[YPOS] - xTouchOk.hPos/2;
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_1_SELLTABLESTART0:
		case TUTO_2_SELLTABLESTART0:
			if(isWaitSlot == TRUE)
				xQuestTuto.isTutoClean = TRUE;
			break;
		case TUTO_1_SELLTABLESTART1:
		case TUTO_2_SELLTABLESTART1:
			if(isWaitSlot == TRUE)
			{
                if(playState == PLAY_MSG)
                {
                    xTutoInfo.x[xTutoInfo.totalNum] = px+10;
                    xTutoInfo.y[xTutoInfo.totalNum] = py+158;
                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
                }
                else
                {
                    xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
                    xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
                    xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
                }
			}
			break;
		}
	}
			
	
	
	
	
}

void drawSellSelectItem()
{
	int px = cx-210;
	int py = cy;
	int pos;
	int iMax;
			
	drawPacker(imgSellSelectBg, px, py, 0, 0, imgW(imgSellSelectBg), imgH(imgSellSelectBg), VH);
	
	
	subTemp[XPOS] = px+152;
	subTemp[YPOS] = py-240;
	drawPacker(imgProductionMenuBtn5, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgProductionMenuBtn5)/2*(xSell.isSlotInfo == FALSE?0:1), imgW(imgProductionMenuBtn5), imgH(imgProductionMenuBtn5)/2, VH);
	if(xSell.isSlotInfo == TRUE)
		gDrawStringBold(subTemp[XPOS]+10, subTemp[YPOS], "정보보기", VH, 255, 255, 255, 65, 42, 28);
	else
		gDrawStringBold(subTemp[XPOS]+10, subTemp[YPOS], "정보보기", VH, 255, 255, 255, 126, 98, 81);
	
		
	xProductionMenu.xTouchSlotInfo.wPos = imgW(imgProductionMenuBtn5);
	xProductionMenu.xTouchSlotInfo.hPos = imgH(imgProductionMenuBtn5)/2;
	xProductionMenu.xTouchSlotInfo.xPos = subTemp[XPOS]-xProductionMenu.xTouchSlotInfo.wPos/2;
	xProductionMenu.xTouchSlotInfo.yPos = subTemp[YPOS]-xProductionMenu.xTouchSlotInfo.hPos/2;
	
	
	
	if(xSell.totalSlot == 0)
	{
		setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);
		
		switch(xMap.type)
		{
		case INTERIOR_TYPE_HANGER:
			if(xProductionMenu.totalSuccess > 0 || xProductionMenu.totalWaitSlot > 0)
			{
				xLinkInfo.total = 0;
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"진열 가능한 의상이 없습니다.");
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"지금 바로 의상을 제작해보세요.");
				drawLinkInfo(px-170,py-40,0);
			}
			else
			{
				xLinkInfo.total = 0;
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"진열 가능한 의상이 없거나,");
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"제작 슬롯이 가득 찼습니다.");
				drawLinkInfo(px-170,py-40,0);
			}
			drawPacker(imgPopupBtn0, px-8, py+80, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
			setFontSize(20);
			gDrawStringBold(px-8-3, py+80-3, "제작하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
			setFontSize(11);
			break;
		case INTERIOR_TYPE_ACCESSORY:
			if(xProductionMenu.totalSuccess > 0 || xProductionMenu.totalWaitSlot > 0)
			{
				xLinkInfo.total = 0;
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"진열 가능한 잡화가 없습니다.");
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"지금바로 잡화를 제작해보세요.");
				drawLinkInfo(px-170,py-40,0);
			}
			else
			{
				xLinkInfo.total = 0;
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"진열 가능한 잡화가 없거나,");
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"제작 슬롯이 가득 찼습니다.");
				drawLinkInfo(px-170,py-40,0);
			}
			drawPacker(imgPopupBtnB0, px-8, py+80, 0, imgH(imgPopupBtnB0)/2, imgW(imgPopupBtnB0), imgH(imgPopupBtnB0)/2, VH);
			setFontSize(20);
			gDrawStringBold(px-8-3, py+80-3, "제작하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
			setFontSize(11);
			break;
		}
		
		
		
		
		xTouchLink.wPos = imgW(imgPopupBtnB0);
		xTouchLink.hPos = imgH(imgPopupBtnB0)/2;
		xTouchLink.xPos = px-8-xTouchLink.wPos/2;
		xTouchLink.yPos = py+80-xTouchLink.hPos/2;
	}
	else
	{
		M_Boolean isWaitSlot[2048];
		for(int i=0;i<xSell.totalSlot;i++)
		{
			isWaitSlot[i] = FALSE;
		}
		setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);
		
		for(int i=0;i<xObj.xObjData[xMap.type][xMap.listNum].slot;i++)
		{
			if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot != DONT)
			{
				isWaitSlot[xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot] = TRUE;
			}
		}
				
		
		
		//세부메뉴
		xDragScrollSellSelectItemSlot.totalNum = 1+(xSell.totalSlot-1)/3;
		xDragScrollSellSelectItemSlot.posGab = 202;
		
		xDragScrollSellSelectItemSlot.endPos = -(((xDragScrollSellSelectItemSlot.totalNum-2)*xDragScrollSellSelectItemSlot.posGab));
		
		if(xDragScrollSellSelectItemSlot.totalNum <= 2)
			xDragScrollSellSelectItemSlot.endPos = 0;
		else
			xDragScrollSellSelectItemSlot.endPos += 40;

	
		

		iMax = xSell.totalSlot;
		dragScrollPrc(&xDragScrollSellSelectItemSlot,1,FALSE);
		
		
		int scrollW = getScrollW(&xDragScrollSellSelectItemSlot,480,imgH(imgSellScroll));
		drawPacker(imgSellScroll, px+227, py-165+scrollW, 0, 0, imgW(imgSellScroll), imgH(imgSellScroll), VH);
				
		gSetClip(true,0, py-210, lcdW, 450);
		
		
		
		for(int i=0;i<iMax;i++)
		{
			pos = xDragScrollSellSelectItemSlot.pos+(xDragScrollSellSelectItemSlot.posGab*(i/3));
			subTemp[XPOS] = px-140+(140*(i%3));
			subTemp[YPOS] = py-136+pos;
			
			if(subTemp[YPOS] < -xDragScrollSellSelectItemSlot.posGab || subTemp[YPOS] > lcdH+xDragScrollSellSelectItemSlot.posGab)
				continue;
						
			setMapData(xSell.xSlot[i].code);
			drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
			//성별
			drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFashionData[xMap.type][xMap.listNum].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
			
			//아이템명
			drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);

			gSetColor(44, 27, 26);
			setLabelWidth(150);
			
			gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFashionData[xMap.type][xMap.listNum].strName, VH);
			setLabelWidth(0);
			
			sprintf(strTempS,"남은수량:%d", xSell.xSlot[i].maxNum);
			gDrawString(subTemp[XPOS]+65, subTemp[YPOS]+55, strTempS, VR);


			if(xSell.xSlot[i].isProduction == TRUE)
			{
				if(xProductionMenu.state[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot] == PRODUCTIONMENUSLOT_STATE_RECV)
				{
					//수취중
					drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
					drawPacker(imgSellBg7, subTemp[XPOS]+10, subTemp[YPOS], 0, imgH(imgSellBg7)/4*((gameCnt/5)%4), imgW(imgSellBg7), imgH(imgSellBg7)/4, VH);
					drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-11+52, 0, imgH(imgProductionMenuGage)/2, imgW(imgProductionMenuGage), imgH(imgProductionMenuGage)/2, VL);
					subTemp[WPOS] = xProductionMenu.recvAnyCnt[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot]*imgW(imgProductionMenuGage)/20;
					drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-11+52, 0, 0, subTemp[WPOS], imgH(imgProductionMenuGage)/2, VL);
					
				}
				else if(xProductionMenu.state[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot] == PRODUCTIONMENUSLOT_STATE_PLAY
						&& xProductionMenu.slotCode[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot] != DONT
						&& xProductionMenu.slotFlowTime[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
				{
					//완료상태
					drawPacker(imgSellBg3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSellBg3), imgH(imgSellBg3), VH);
					drawPacker(imgSellBg9, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgSellBg9)/2*((gameCnt/30)%2), imgW(imgSellBg9), imgH(imgSellBg9)/2, VH);
				}
				else if(xProductionMenu.state[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot] == PRODUCTIONMENUSLOT_STATE_PLAY && xProductionMenu.slotCode[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot] != DONT)
				{
					drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
					//물품돌아가는중
					drawPacker(imgSellBg8, subTemp[XPOS]+10, subTemp[YPOS], 0, imgH(imgSellBg8)/4*((gameCnt/5)%4), imgW(imgSellBg8), imgH(imgSellBg8)/4, VH);
					gSetColor(255, 255, 255);
					drawTimeSprintf(strTempS,xFashionData[xMap.type][xMap.listNum].makeTime.oriData - xProductionMenu.slotFlowTime[xSell.xSlot[i].productionSelectType][xSell.xSlot[i].productionSelectSlot],1);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+28, strTempS, VH);
				}
			}
			else
			{
				//인포활성
				if(xSell.isSlotInfo == TRUE)
					xSell.xSlot[i].isInfoOpen = TRUE;
				else
					xSell.xSlot[i].isInfoOpen = FALSE;
				if(xSell.xSlot[i].isInfoOpen == TRUE)
				{
					drawPacker(imgProductionMenuSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot1), imgH(imgProductionMenuSlot1), VH);
					gSetColor(255, 255, 255);
					gDrawString(subTemp[XPOS]-63, subTemp[YPOS]-13, "진열수량", VL);
					sprintf(strTempS, "%d",xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]-13, strTempS, VR);
					gDrawString(subTemp[XPOS]-63, subTemp[YPOS]+15, "수익금", VL);
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+15, strTempS, VR);
					gDrawString(subTemp[XPOS]-63, subTemp[YPOS]+35, "경험치", VL);
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].exp.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+35, strTempS, VR);
				}
				
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
						case TUTO_1_SELLTABLESTART0:
						case TUTO_2_SELLTABLESTART0:
							if(isWaitSlot[i] == FALSE)
							{
								if(xSell.xSlot[i].code == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
								{
									xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
									xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
								}
							}
							break;
					}
				}
			}
			
			//트랜드 정보
			M_Boolean isTrend = FALSE;

			int trendPer = 0;
			for(int t=0;t<TRENDMAX;t++)
			{
				if(xTrend.isOpen[t] == TRUE)
				{
					if(xTrend.itemCode[t] == ((xMap.type*1000)+xMap.listNum))
					{
						isTrend = TRUE;
						trendPer = xTrend.per[t];
						break;
					}
				}
			}
			
			if(isTrend == TRUE)
			{
				drawPacker(imgTrendInfoIcon, subTemp[XPOS]+30, subTemp[YPOS]-50, 0, 0, imgW(imgTrendInfoIcon), imgH(imgTrendInfoIcon), VH);
			}
			
			//진열 대기중
//			if(isWaitSlot[i] == TRUE)
//			{
//				drawPacker(imgSellSelectSlot, subTemp[XPOS], subTemp[YPOS]+34, 0, 0, imgW(imgSellSelectSlot), imgH(imgSellSelectSlot), VH);
//			}
		}

		gSetClip(false,0, 0, lcdW, lcdH);
		
		
		//거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
		xDragScrollSellSelectItemSlot.selectNum = (-xDragScrollSellSelectItemSlot.pos/xDragScrollSellSelectItemSlot.posGab);
		
		if(xDragScrollSellSelectItemSlot.selectNum < 0)
			xDragScrollSellSelectItemSlot.selectNum = 0;

		for(int i=0;i<9;i++)
		{
			subTemp[XPOS] = px-140+(140*(i%3));
			subTemp[YPOS] = py-136+(i/3*xDragScrollSellSelectItemSlot.posGab);
			
			xFashionDrop.x_sellList[i] = subTemp[XPOS];
			xFashionDrop.y_sellList[i] = subTemp[YPOS];
			xFashionDrop.scale_sellList[i] = 60;
												
			xTouchSellSelectItemSlot[i].wPos = imgW(imgProductionMenuSlot0);
			xTouchSellSelectItemSlot[i].hPos = imgH(imgProductionMenuSlot0);
			xTouchSellSelectItemSlot[i].xPos = subTemp[XPOS] - xTouchSellSelectItemSlot[i].wPos/2;
			xTouchSellSelectItemSlot[i].yPos = subTemp[YPOS] +((xDragScrollSellSelectItemSlot.posGab <= xDragScrollSellSelectItemSlot.pos ? xDragScrollSellSelectItemSlot.pos:(xDragScrollSellSelectItemSlot.pos%xDragScrollSellSelectItemSlot.posGab)))- xTouchSellSelectItemSlot[i].hPos/2;
			
			/*
			gSetColor(255, 0, 0);
			setAlpha(100);
			fillRect(xTouchSellSelectItemSlot[i].xPos, xTouchSellSelectItemSlot[i].yPos, xTouchSellSelectItemSlot[i].wPos, xTouchSellSelectItemSlot[i].hPos);
			setAlpha(ALPHA_MAX);
			 */
			
			xTouchSellSelectItemSlotInfo[i].wPos = imgW(imgProductionMenuObj1)+10;
			xTouchSellSelectItemSlotInfo[i].hPos = imgH(imgProductionMenuObj1)+10;
			xTouchSellSelectItemSlotInfo[i].xPos = subTemp[XPOS]+49 - xTouchSellSelectItemSlotInfo[i].wPos/2;
			xTouchSellSelectItemSlotInfo[i].yPos = subTemp[YPOS]-50 +((xDragScrollSellSelectItemSlot.posGab <= xDragScrollSellSelectItemSlot.pos ? xDragScrollSellSelectItemSlot.pos:(xDragScrollSellSelectItemSlot.pos%xDragScrollSellSelectItemSlot.posGab)))- xTouchSellSelectItemSlotInfo[i].hPos/2;
			
			/*
			gSetColor(255, 0, 0);
			setAlpha(100);
			fillRect(xTouchSellSelectItemSlotInfo[i].xPos, xTouchSellSelectItemSlotInfo[i].yPos, xTouchSellSelectItemSlotInfo[i].wPos, xTouchSellSelectItemSlotInfo[i].hPos);
			setAlpha(ALPHA_MAX);
			*/
		}
	}
}

void setSellSelectItemSlot()
{
	for(int k=0;k<9;k++)
		xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[k].waitSlot = DONT;
	
	
	xSell.totalSlot = 0;
	setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode);
	
	for(int z=0;z<7;z++)
	{
		for(int t=0;t<FASHIONDATAMAX;t++)
		{
			if(xSell.totalSlot>256)
				break;
			
			if(z <= 3 && xInventoryFashion.haveNum[z][t] > 0 && xFashionData[z][t].isStaff == 0)
			{
				xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
				xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
				xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
				xSell.xSlot[xSell.totalSlot++].maxNum = xInventoryFashion.haveNum[z][t];
			}
			else if(z >= 4 && xInventoryFashion.haveNum[z][t] > 0 && (xFashionData[z][t].isStaff == 0 || xFashionData[z][t].isStaff == 3))
			{
				xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
				setMapData(xSell.xSlot[xSell.totalSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
				xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
				xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
				xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
				xSell.xSlot[xSell.totalSlot++].maxNum = xInventoryFashion.haveNum[z][t]%xFashionData[z][t].makeNum.oriData;
			}
		}
	}
	
	
		
//	switch(xMap.type)
//	{
//	case INTERIOR_TYPE_HANGER:		//옷걸이
//		for(int z=0;z<4;z++)
//		{
//			for(int t=0;t<FASHIONDATAMAX;t++)
//			{
//				if(xInventoryFashion.haveNum[z][t] > 0 && xFashionData[z][t].isStaff == 0)
//				{
//					if(xSell.totalSlot>256)
//						break;
//					
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////LJW 옷걸이 수정
//
//					
//
//					xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
//					xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
//					xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
//					xSell.xSlot[xSell.totalSlot++].maxNum = xInventoryFashion.haveNum[z][t];
//					
////					int iMax = (xInventoryFashion.haveNum[z][t]/xFashionData[z][t].makeNum.oriData)+1;
////					for(int h=0;h<iMax;h++)
////					{
////						if(xSell.totalSlot>256)
////							break;
////						
////						
////						
////						xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
////						if(h == iMax-1)
////						{
////							if(xInventoryFashion.haveNum[z][t]%xFashionData[z][t].makeNum.oriData != 0)
////							{
////								xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
////								xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
////								xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
////								xSell.xSlot[xSell.totalSlot++].maxNum = xInventoryFashion.haveNum[z][t]%xFashionData[z][t].makeNum.oriData;
////							}
////						}
////						else
////						{
////							xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
////							xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
////							xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
////							xSell.xSlot[xSell.totalSlot++].maxNum = xFashionData[z][t].makeNum.oriData;
////						}
////					}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//				}
//			}
//		}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////LJW 옷걸이 생산라인 주석처리
//		//생산라인확인
////		for(int type=0;type<2;type++)
////		{
////			for(int k=0;k<6;k++)
////			{
////				if(xProductionMenu.state[type][k] == PRODUCTIONMENUSLOT_STATE_PLAY
////				   && xProductionMenu.slotCode[type][k] != DONT)
////				{
////					M_Boolean isCheck = FALSE;
////					setMapData(xProductionMenu.slotCode[type][k]);	//xMap.rever,xMap.type,xMap.listNum 구하기
////					switch(xMap.type)
////					{
////					case F_TYPE_OUTER:
////					case F_TYPE_TOP:
////					case F_TYPE_BOTTOM:
////					case F_TYPE_ONEPIECE:
////						isCheck = TRUE;
////						break;
////					default:
////						break;
////					}
////					if(isCheck == TRUE)
////					{
////						xSell.xSlot[xSell.totalSlot].isProduction = TRUE;
////						xSell.xSlot[xSell.totalSlot].productionSelectType = type;
////						xSell.xSlot[xSell.totalSlot].productionSelectSlot = k;
////						xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
////						xSell.xSlot[xSell.totalSlot].code = xProductionMenu.slotCode[type][k];
////						xSell.xSlot[xSell.totalSlot++].maxNum = xFashionData[xMap.type][xMap.listNum].makeNum.oriData;
////					}
////				}
////			}
////		}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		break;
//	case INTERIOR_TYPE_ACCESSORY:	//진열대
//		for(int z=4;z<7;z++)
//		{
//			for(int t=0;t<FASHIONDATAMAX;t++)
//			{
//				if(xInventoryFashion.haveNum[z][t] > 0 && (xFashionData[z][t].isStaff == 0 || xFashionData[z][t].isStaff == 3))
//				{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////LJW 진엸대 주석
//					xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
//					setMapData(xSell.xSlot[xSell.totalSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
//					
//					xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
//					xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
//					xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
//					xSell.xSlot[xSell.totalSlot++].maxNum = xInventoryFashion.haveNum[z][t]%xFashionData[z][t].makeNum.oriData;
//					
////					xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
////					setMapData(xSell.xSlot[xSell.totalSlot].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
////					int iMax = (xInventoryFashion.haveNum[z][t]/xFashionData[z][t].makeNum.oriData)+1;
////					for(int h=0;h<iMax;h++)
////					{
////						if(xSell.totalSlot>256)
////							break;
////						if(h == iMax-1)
////						{
////							if(xInventoryFashion.haveNum[z][t]%xFashionData[z][t].makeNum.oriData != 0)
////							{
////								xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
////								xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
////								xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
////								xSell.xSlot[xSell.totalSlot++].maxNum = xInventoryFashion.haveNum[z][t]%xFashionData[z][t].makeNum.oriData;
////							}
////						}
////						else
////						{
////							xSell.xSlot[xSell.totalSlot].code = (z*1000)+t;
////							xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
////							xSell.xSlot[xSell.totalSlot].isProduction = FALSE;
////							xSell.xSlot[xSell.totalSlot++].maxNum = xFashionData[z][t].makeNum.oriData;
////						}
////					}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//				}
//			}
//		}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////LJW 진열대 생산라인 주석
////생산라인확인
////		for(int type=0;type<2;type++)
////		{
////			for(int k=0;k<6;k++)
////			{
////				if(xProductionMenu.state[type][k] == PRODUCTIONMENUSLOT_STATE_PLAY
////				   && xProductionMenu.slotCode[type][k] != DONT)
////				{
////					M_Boolean isCheck = FALSE;
////					setMapData(xProductionMenu.slotCode[type][k]);	//xMap.rever,xMap.type,xMap.listNum 구하기
////					switch(xMap.type)
////					{
////						case F_TYPE_OUTER:
////						case F_TYPE_TOP:
////						case F_TYPE_BOTTOM:
////						case F_TYPE_ONEPIECE:
////							break;
////						default:
////							isCheck = TRUE;
////							break;
////					}
////					if(isCheck == TRUE)
////					{
////						xSell.xSlot[xSell.totalSlot].isProduction = TRUE;
////						xSell.xSlot[xSell.totalSlot].productionSelectType = type;
////						xSell.xSlot[xSell.totalSlot].productionSelectSlot = k;
////						xSell.xSlot[xSell.totalSlot].isInfoOpen = FALSE;
////						xSell.xSlot[xSell.totalSlot].code = xProductionMenu.slotCode[type][k];
////						xSell.xSlot[xSell.totalSlot++].maxNum = xFashionData[xMap.type][xMap.listNum].makeNum.oriData;
////					}
////				}
////			}
////		}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		break;
//	}
}


void setBonus(int x,int y,int type,int num)
{
	for(int i=0;i<BONUSEFFMAX;i++)
	{
		if(xBonusEff[i].state == BONUSEFF_STATE_DONT)
		{
			xBonusEff[i].state = BONUSEFF_STATE_PLAY;
			xBonusEff[i].anyCnt = 0;
			xBonusEff[i].x = x;
			xBonusEff[i].y = y;
			xBonusEff[i].type = type;
			xBonusEff[i].num = num;
			break;
		}
	}
}

void drawBonus()
{
	for(int i=0;i<BONUSEFFMAX;i++)
	{
		if(xBonusEff[i].state == BONUSEFF_STATE_PLAY)
		{
			switch(++xBonusEff[i].anyCnt)
			{
			case 1:xBonusEff[i].y -= 21;break;
			case 2:xBonusEff[i].y -= 17;break;
			case 3:xBonusEff[i].y -= 13;break;
			case 4:xBonusEff[i].y -= 10;break;
			case 5:xBonusEff[i].y -= 7;break;
			case 6:xBonusEff[i].y -= 5;break;
			case 7:xBonusEff[i].y -= 3;break;
			case 8:xBonusEff[i].y -= 3;break;
			case 9:xBonusEff[i].y -= 2;break;
			case 10:xBonusEff[i].y -= 2;break;
			case 11:xBonusEff[i].y -= 2;break;
			case 12:xBonusEff[i].y -= 1;break;
			case 13:xBonusEff[i].y -= 1;break;
			case 14:xBonusEff[i].y -= 1;break;
			case 15:xBonusEff[i].y -= 1;break;
			case 16:xBonusEff[i].y -= 1;break;
			case 17:xBonusEff[i].y -= 1;break;
			case 18:xBonusEff[i].y -= 1;setAlpha(200);	break;
			case 19:xBonusEff[i].y -= 1;setAlpha(150);	break;
			case 20:xBonusEff[i].y -= 1;setAlpha(100);	break;
			case 21:
					xBonusEff[i].y -= 1;                              
				setAlpha(50);
				xBonusEff[i].state = BONUSEFF_STATE_DONT;
				break;
			}
			switch(xBonusEff[i].type)
			{
			case ICON_TYPE_CANDY:
				drawPacker(imgBonus0, xBonusEff[i].x, xBonusEff[i].y, 0, 4 * imgH(imgBonus0)/5, imgW(imgBonus0), imgH(imgBonus0)/5, VR);
				break;
			default:
				drawPacker(imgBonus0, xBonusEff[i].x, xBonusEff[i].y, 0, xBonusEff[i].type * imgH(imgBonus0)/5, imgW(imgBonus0), imgH(imgBonus0)/5, VR);
				break;
			}						
			drawPacker(imgBonus1, xBonusEff[i].x+8, xBonusEff[i].y, xBonusEff[i].num>=0?0:imgW(imgBonus1)/2, 0, imgW(imgBonus1)/2, imgH(imgBonus1), VH);
			drawNumPacker(imgBonusNum, xBonusEff[i].x+14, xBonusEff[i].y, xBonusEff[i].num < 0 ?-xBonusEff[i].num:xBonusEff[i].num, -3, VL);
			setAlpha(ALPHA_MAX);
		}
	}
}


void drawIcon(int x,int y,int type)
{
	drawPacker(imgIcon, x, y, 0, imgH(imgIcon)/7*type, imgW(imgIcon), imgH(imgIcon)/7, VH);
}

void setSpritF(XSPRIT *xSprit,XFITTINGLAYER *xF,int pos)
{
	int type;
	int listNum;
	
	
	//초기화
	xSprit->isHighHeeled = FALSE;
	xF->isHighHeeled = FALSE;
	for(int f=0;f<FASHIONDATALAYERMAX;f++)
	{
		for(int layerI=0;layerI<SPRIT_IMGLAYERMAX+1;layerI++)
			xSprit->img[layerI][f] = NULL;
	}
	
	
	for(int fc=0;fc<SPRIT_IMGLAYERMAX;fc++)
	{
		if(xF->code[fc] == DONT)
		{
			
		}
		else
		{
			type = xF->code[fc]/1000;
			listNum = xF->code[fc]%1000;
			
			
			
			loadFashionFImgWorldMap(type, listNum);
			
			//이미지존재여부에 맞게 레이어MAX만큼 돌려서 이미지 매칭을 해준다
			for(int f=0;f<FASHIONDATALAYERMAX;f++)
			{
					if(imgFLayer[type][listNum][f][pos].texture != NULL)
					{
						xSprit->img[xFashionData[type][listNum].layer][f] = &imgFLayer[type][listNum][f][pos];
					}
					if(imgFLayerSub[type][listNum][f][pos].texture != NULL)

						xSprit->img[SPRIT_IMGLAYER_BACKLAYER][f] = &imgFLayerSub[type][listNum][f][pos];
				
			}
				if(type == 4 && imgFLayer[type][listNum][6][ACT_FRONT].texture != NULL)
				{
					xF->isHighHeeled = TRUE;
					xSprit->isHighHeeled = TRUE;
				}
									
				
		}
	}		
	
	/*앞
	오른쪽손	0
	오른쪽상완	1
	오른쪽하완	2
	오른쪽허벅지	3
	오른쪽종아리	4
	오른쪽발	5	오른쪽구두	6
	하체	7
	상체	8
	왼쪽허벅지	9
	왼쪽종아리	10
	왼쪽발	11	왼쪽구두	12
	두상(정면)	13
	두상(우측면)	14
	두상(좌측면)	15
	왼쪽손	16
	왼쪽상완	17
	왼쪽하완	18
	*/
	
	/*뒤
	왼쪽상완	0
	왼쪽손	1
	왼쪽하완	2
	왼쪽발	3	왼쪽구두	4
	왼쪽허벅지	5
	왼쪽종아리	6
	하체	7
	오른쪽발	8	오른쪽구두	9
	오른쪽허벅지	10
	오른쪽종아리	11
	두상(정면)	12
	두상(우측면)	13
	두상(좌측면)	14
	상체	15
	오른쪽상완	16
	오른쪽손	17
	오른쪽하완	18		
	*/
	
	//여기서 이미지 로딩 매칭까지 전부 다 해주자
	//xSprit->img[]
	//xF->f[F_TYPE_OUTER]
	//xF->f[F_TYPE_TOP]
	//xF->f[F_TYPE_BOTTOM]
	//xF->f[F_TYPE_ONEPIECE]
	//xF->f[F_TYPE_SHOES]
	//xF->f[F_TYPE_BAG]
	//xF->f[F_TYPE_ACCECSSORY]

}

void drawFittingBody(int drawX,int drawY,XFITTINGLAYER *xF,XFACE *xFace,M_Boolean isStaff,int sex)
{
	int x[20];
	int y[20];
	int imgType;
	int imgList;
	int layerNum;
	int reverX = 0;
	M_Boolean isInFittingTemp[SPRIT_IMGLAYERMAX];
	
	
	XFITTINGLAYER xFTemp;
	memcpy(&xFTemp, xF, sizeof(xFTemp));
	xFTemp.isHighHeeled = FALSE;
	if(sex == 0)
		xFTemp.isHighHeeled = TRUE;
		
	if(xFTemp.isInFitting == TRUE)
	{
		for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
		{
			if(xFTemp.code[ff] != DONT)
			{
				imgType = xFTemp.code[ff]/1000;
				if(imgType == F_TYPE_TOP)
				{
					for(int tt=0;tt<ff;tt++)
					{
						if(xFTemp.code[tt] != DONT)
						{
							imgType = xFTemp.code[tt]/1000;
							if(imgType == F_TYPE_BOTTOM)
							{
								int temp = xFTemp.code[ff];
								xFTemp.code[ff] = xFTemp.code[tt];
								xFTemp.code[tt] = temp;
								break;
							}
						}
					}
				}
			}
		}
	}
				
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		isInFittingTemp[ff] = FALSE;
		if(xFTemp.code[ff] != DONT)
		{
			imgType = xFTemp.code[ff]/1000;
			imgList = xFTemp.code[ff]%1000;
			switch(imgType)
			{
			case F_TYPE_OUTER:
			case F_TYPE_TOP:
			case F_TYPE_ONEPIECE:

				if(xFTemp.isInFitting == TRUE && imgType == F_TYPE_TOP)
				{
					isInFittingTemp[ff] = TRUE;
				}
				else
				{
					for(int tt=ff+1;tt<SPRIT_IMGLAYERMAX;tt++)
					{
						if(xFTemp.code[tt] != DONT)
						{
							imgType = xFTemp.code[tt]/1000;
							switch(imgType)
							{
							case F_TYPE_OUTER:
							case F_TYPE_TOP:
							case F_TYPE_ONEPIECE:
								isInFittingTemp[ff] = TRUE;
								break;
							}
							if(isInFittingTemp[ff] == TRUE)
								break;
						}
					}
				}
				break;
			}
		}
	}
	
	
	
	
		
	drawX -= 90;
	drawY -= 215;
	
	//여
	if(sex == 0)
	{
		x[1] = 62+drawX;		y[1] = 107+drawY;
		x[3] = 7+drawX;			y[3] = 76+drawY;
		x[5] = 39+drawX;		y[5] = 296+drawY;
		x[6] = 39+drawX;		y[6] = 296+drawY;
		x[11] = 70+drawX;		y[11] = 302+drawY;
		x[12] = 70+drawX;		y[12] = 302+drawY;
		x[13] = 2+drawX;		y[13] = 27+drawY;
		x[17] = 25+drawX;		y[17] = 155+drawY;
	}
	else
	{
		//남
		x[1] = 72+drawX;		y[1] = 128+drawY;
		x[3] = 29+drawX;		y[3] = 120+drawY;
		x[5] = 62+drawX;		y[5] = 308+drawY;
		x[6] = 62+drawX;		y[6] = 308+drawY;
		x[11] = 62+drawX;		y[11] = 308+drawY;
		x[12] = 62+drawX;		y[12] = 308+drawY;
		x[13] = 1+drawX;		y[13] = 0+drawY;
		x[17] = 41+drawX;		y[17] = 141+drawY;
	}
	
	if(xGame.isReverse == TRUE)
	{
		for(int i=0;i<18;i++)
		{
			layerNum = i;
			reverX = ((x[layerNum]-drawX)+imgFittingBodyStaff[sex][layerNum].w/2)*2;
			x[layerNum] -= reverX;
			x[layerNum] += 200;
		}
	}
		
	///////////////////힐여부 판단///////////////////////////////////
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFTemp.code[ff] != DONT)
		{
			imgType = xFTemp.code[ff]/1000;
			imgList = xFTemp.code[ff]%1000;
						
			loadFashionFImg(imgType,imgList);
			
			if(imgType == F_TYPE_SHOES && getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer)->texture != NULL)
				xFTemp.isHighHeeled = TRUE;
			
			
			if(imgType == F_TYPE_SHOES && getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->texture != NULL)
				xFTemp.isHighHeeled = FALSE;
		}
	}
	///////////////////두상그리기/////////////////////////////
	if(xFace->hairNum != DONT)
	{
		layerNum = 13;		//두상		
		drawHairF(x[layerNum]+imgFittingBodyStaff[sex][layerNum].w/2, y[layerNum]+imgFittingBodyStaff[sex][layerNum].h/2, xFace->hairNum, 0, 100);
	}
	
	/////////////////////뒷가방 그리기//////////////
	layerNum = 3;		//가방먼저그리기
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFTemp.code[ff] != DONT)
		{
			imgType = xFTemp.code[ff]/1000;
			imgList = xFTemp.code[ff]%1000;
			if(imgType == F_TYPE_BAG)
			{
				drawImage(&imgFittingFBackPack[imgList], x[layerNum], y[layerNum], 0, 0, imgFittingFBackPack[imgList].w, imgFittingFBackPack[imgList].h, TL);
			}
		}
	}
    
    
	/////////////////왼팔/////////////////////////////
	layerNum = 17;		//왼쪽상완
	if(isStaff == TRUE)
		drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
	else
		drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFTemp.code[ff] != DONT)
		{
			imgType = xFTemp.code[ff]/1000;
			imgList = xFTemp.code[ff]%1000;
			if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)
			{
					if(isInFittingTemp[ff] == TRUE && getImgFittingFInOut(imgType,imgList,layerNum,ff)->texture != NULL)
					drawImage(getImgFittingFInOut(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingFInOut(imgType,imgList,layerNum,ff)->w, getImgFittingFInOut(imgType,imgList,layerNum,ff)->h, TL);
				else
					drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
			}
		}
	}
	
	//////////////////신발////////////////////////////
	if(sex == 0)
	{
		layerNum = 5;	//신발
		if(xFTemp.isHighHeeled == FALSE)
		{
			if(isStaff == TRUE)
				drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
			else
				drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
		}
		layerNum = 6;		//구두
		if(xFTemp.isHighHeeled == TRUE)
		{
			if(isStaff == TRUE)
				drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
			else
				drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
		}
	}
	layerNum = 11;		//신발
	if(xFTemp.isHighHeeled == FALSE)
	{
		if(isStaff == TRUE)
			drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
		else
			drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
	}
	if(sex == 0)
	{
		layerNum = 12;		//구두
		if(xFTemp.isHighHeeled == TRUE)
		{
			if(isStaff == TRUE)
				drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
			else
				drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
		}
	}
	
	
	///////////////////////////허벅지/////////////////////
	
	layerNum = 3;	//왼쪽허벅지
	if(isStaff == TRUE)
	{
		drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
		
		if(sex == 0)
		{
			drawPacker(imgUW0, x[layerNum], y[layerNum], 0, 0, imgW(imgUW0), imgH(imgUW0), TL);
			drawPacker(imgUW1, x[layerNum], y[layerNum], 0, 0, imgW(imgUW1), imgH(imgUW1), TL);
		}
		else
		{
			drawPacker(imgUW2, x[layerNum], y[layerNum], 0, 0, imgW(imgUW2), imgH(imgUW2), TL);
		}
	}
	else
		drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
	
		
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFTemp.code[ff] != DONT)
		{
			imgType = xFTemp.code[ff]/1000;
			imgList = xFTemp.code[ff]%1000;
			
			
			layerNum = 3;	//왼쪽허벅지

			if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)
			{
				if(isInFittingTemp[ff] == TRUE && getImgFittingFInOut(imgType,imgList,layerNum,ff)->texture != NULL)

				
				{
					drawImage(getImgFittingFInOut(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingFInOut(imgType,imgList,layerNum,ff)->w, getImgFittingFInOut(imgType,imgList,layerNum,ff)->h, TL);
				}
				else
				{
					drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
				}
			}
			
			if(xFTemp.isHighHeeled == FALSE)
			{
				if(sex == 0)
				{
					layerNum = 5;	//신발
						if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)
							
							drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
				}
				
				layerNum = 11;	//신발
					if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)
						
						
						drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
			}
			if(xFTemp.isHighHeeled == TRUE)
			{
				if(sex == 0)
				{
					
					layerNum = 6;	//구두
						if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)

							drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
					layerNum = 12;	//구두
						if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)
							drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
				}
			}

		}
	}
	
			
	layerNum = 1;	//오른쪽상완

	if(isStaff == TRUE)
		drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
	else
		drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFTemp.code[ff] != DONT)
		{
			imgType = xFTemp.code[ff]/1000;
			imgList = xFTemp.code[ff]%1000;
			if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)
			{
				if(isInFittingTemp[ff] == TRUE && getImgFittingFInOut(imgType,imgList,layerNum,ff)->texture != NULL)
				
					drawImage(getImgFittingFInOut(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingFInOut(imgType,imgList,layerNum,ff)->w, getImgFittingFInOut(imgType,imgList,layerNum,ff)->h, TL);
				else
					drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
			}
		}
	}
	
	
	
	
	
	layerNum = 13;		//두상
	
	if(xFace->faceNum > 1000 && xModelData[xFace->faceNum%1000].isOneHead == TRUE)
	{
		
	}
	else
	{
		if(isStaff == TRUE)
			drawImage(&imgFittingBodyStaff[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBodyStaff[sex][layerNum].w, imgFittingBodyStaff[sex][layerNum].h, TL);
		else
			drawImage(&imgFittingBody[sex][layerNum], x[layerNum], y[layerNum], 0, 0, imgFittingBody[sex][layerNum].w, imgFittingBody[sex][layerNum].h, TL);
	}
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFTemp.code[ff] != DONT)
		{
			imgType = xFTemp.code[ff]/1000;
			imgList = xFTemp.code[ff]%1000;
		if(getImgFittingF(imgType,imgList,layerNum,ff)->texture != NULL)
				drawImage(getImgFittingF(imgType,imgList,layerNum,ff), x[layerNum], y[layerNum], 0, 0, getImgFittingF(imgType,imgList,layerNum,ff)->w, getImgFittingF(imgType,imgList,layerNum,ff)->h, TL);
		}
		
		if(ff == FACELAYER)
		{
			
			
			if(xFace->faceNum != DONT)
			{
				drawFaceF(x[layerNum]+imgFittingBodyStaff[sex][layerNum].w/2, y[layerNum]+imgFittingBodyStaff[sex][layerNum].h/2, xFace->faceNum, FACE_TYPE_NORMAL, 100);
			}
			if(xFace->hairNum != DONT)
			{
				drawHairF(x[layerNum]+imgFittingBodyStaff[sex][layerNum].w/2, y[layerNum]+imgFittingBodyStaff[sex][layerNum].h/2, xFace->hairNum, 1, 100);
			}
		}
	}
}

void drawHair(int x,int y,int hairNum,int layerNum,int pos,int sub)
{
	int drawXsub;
	int drawYsub;
	
	if(hairNum >= 2000)
	{
		hairNum = hairNum%1000;
		if(isImgHair_Npc[hairNum] == FALSE)
		{
			isImgHair_Npc[hairNum] = TRUE;
			
			
			sprintf(strTempS, "n_h_%d_13_b.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][13][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "n_h_%d_13.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][13][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "n_h_%d_14_b.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][14][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "n_h_%d_14.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][14][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "n_h_%d_15_b.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][15][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "n_h_%d_15.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][15][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "n_b_h_%d_12.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][12][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "n_b_h_%d_13.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][13][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "n_b_h_%d_14.png",hairNum);
			loadImg(strTempS, &imgHair_Npc[hairNum][14][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
		}
		drawImage(&imgHair_Npc[hairNum][layerNum][pos][sub], x+imgHair_Npc[hairNum][layerNum][pos][sub].w/2, y+imgHair_Npc[hairNum][layerNum][pos][sub].h/2, 0, 0, imgHair_Npc[hairNum][layerNum][pos][sub].w, imgHair_Npc[hairNum][layerNum][pos][sub].h, VH);

	}
	else if(hairNum >= 1000)
	{
		hairNum = hairNum%1000;
		hairNum = xModelData[hairNum].imgNum;
		
		if(isImgHair_Model[hairNum] == FALSE)
		{
			isImgHair_Model[hairNum] = TRUE;
			
			
			sprintf(strTempS, "m_h_%d_13_b.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][13][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "m_h_%d_13.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][13][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "m_h_%d_14_b.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][14][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "m_h_%d_14.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][14][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "m_h_%d_15_b.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][15][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "m_h_%d_15.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][15][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "m_b_h_%d_12.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][12][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "m_b_h_%d_13.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][13][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "m_b_h_%d_14.png",hairNum);
			loadImgDocuments(strTempS, &imgHair_Model[hairNum][14][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
		}
		
		
		
		drawXsub = x-(imgHair_Model[hairNum][layerNum][pos][sub].w - imgActBody[layerNum][pos].w)/2;
		drawYsub = y-(imgHair_Model[hairNum][layerNum][pos][sub].h - imgActBody[layerNum][pos].h)/2;
		drawImage(&imgHair_Model[hairNum][layerNum][pos][sub], drawXsub+imgHair_Model[hairNum][layerNum][pos][sub].w/2, drawYsub+imgHair_Model[hairNum][layerNum][pos][sub].h/2, 0, 0, imgHair_Model[hairNum][layerNum][pos][sub].w, imgHair_Model[hairNum][layerNum][pos][sub].h, VH);
	}
	else
	{
		if(isImgHair[hairNum] == FALSE)
		{
			isImgHair[hairNum] = TRUE;
			sprintf(strTempS, "h_%d_13_b.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][13][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "h_%d_13.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][13][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "h_%d_14_b.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][14][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "h_%d_14.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][14][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "h_%d_15_b.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][15][ACT_FRONT][0]);	//[헤어코드][두상번호][pos][2]
			sprintf(strTempS, "h_%d_15.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][15][ACT_FRONT][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "b_h_%d_12.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][12][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "b_h_%d_13.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][13][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
			
			sprintf(strTempS, "b_h_%d_14.png",hairNum);
			loadImg(strTempS, &imgHair[hairNum][14][ACT_BACK][1]);	//[헤어코드][두상번호][pos][2]
		}
        drawImage(&imgHair[hairNum][layerNum][pos][sub], x+imgHair[hairNum][layerNum][pos][sub].w/2, y+imgHair[hairNum][layerNum][pos][sub].h/2, 0, 0, imgHair[hairNum][layerNum][pos][sub].w, imgHair[hairNum][layerNum][pos][sub].h, VH);
	}
	
	
}

void drawFace(int x,int y,XFACE *xFace,int layerNum,int pos)
{
	int drawXsub;
	int drawYsub;
	int faceNum;
	if(xFace->faceNum >= 2000)
	{
		faceNum = xFace->faceNum%1000;
		if(isImgFace_Npc[faceNum] == FALSE)
		{
			isImgFace_Npc[faceNum] = TRUE;
			for(int i=0;i<FACETYPEMAX;i++)
			{
				sprintf(strTempS, "n_s_%d_%d_13.png",faceNum,i);
				loadImg(strTempS, &imgFace_Npc[faceNum][i][13][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "n_s_%d_%d_14.png",faceNum,i);
				loadImg(strTempS, &imgFace_Npc[faceNum][i][14][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "n_s_%d_%d_15.png",faceNum,i);
				loadImg(strTempS, &imgFace_Npc[faceNum][i][15][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				
				sprintf(strTempS, "n_b_s_%d_%d_12.png",faceNum,i);
				loadImg(strTempS, &imgFace_Npc[faceNum][i][12][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "n_b_s_%d_%d_13.png",faceNum,i);
				loadImg(strTempS, &imgFace_Npc[faceNum][i][13][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "n_b_s_%d_%d_14.png",faceNum,i);
				loadImg(strTempS, &imgFace_Npc[faceNum][i][14][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
			}
		}

		if(imgFace_Npc[faceNum][xFace->faceType][layerNum][pos].texture == NULL)
			xFace->faceType = FACE_TYPE_NORMAL;
		
		drawImage(&imgFace_Npc[faceNum][xFace->faceType][layerNum][pos], x+imgFace_Npc[faceNum][xFace->faceType][layerNum][pos].w/2, y+imgFace_Npc[faceNum][xFace->faceType][layerNum][pos].h/2, 0, 0, imgFace_Npc[faceNum][xFace->faceType][layerNum][pos].w, imgFace_Npc[faceNum][xFace->faceType][layerNum][pos].h, VH);
	}
	else if(xFace->faceNum >= 1000)
	{
		faceNum = xFace->faceNum%1000;
		faceNum = xModelData[faceNum].imgNum;
		
		if(isImgFace_Model[faceNum] == FALSE)
		{
			isImgFace_Model[faceNum] = TRUE;
			for(int i=0;i<FACETYPEMAX;i++)
			{
				sprintf(strTempS, "m_s_%d_%d_13.png",faceNum,i);
				loadImgDocuments(strTempS, &imgFace_Model[faceNum][i][13][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "m_s_%d_%d_14.png",faceNum,i);
				loadImgDocuments(strTempS, &imgFace_Model[faceNum][i][14][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "m_s_%d_%d_15.png",faceNum,i);
				loadImgDocuments(strTempS, &imgFace_Model[faceNum][i][15][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				
				sprintf(strTempS, "m_b_s_%d_%d_12.png",faceNum,i);
				loadImgDocuments(strTempS, &imgFace_Model[faceNum][i][12][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "m_b_s_%d_%d_13.png",faceNum,i);
				loadImgDocuments(strTempS, &imgFace_Model[faceNum][i][13][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "m_b_s_%d_%d_14.png",faceNum,i);
				loadImgDocuments(strTempS, &imgFace_Model[faceNum][i][14][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
			}
		}
		if(imgFace_Model[faceNum][xFace->faceType][layerNum][pos].texture == NULL)
			xFace->faceType = FACE_TYPE_NORMAL;
		
		drawXsub = x-(imgFace_Model[faceNum][xFace->faceType][layerNum][pos].w - imgActBody[layerNum][pos].w)/2;
		drawYsub = y-(imgFace_Model[faceNum][xFace->faceType][layerNum][pos].h - imgActBody[layerNum][pos].h)/2;
		
		drawImage(&imgFace_Model[faceNum][xFace->faceType][layerNum][pos], drawXsub+imgFace_Model[faceNum][xFace->faceType][layerNum][pos].w/2, drawYsub+imgFace_Model[faceNum][xFace->faceType][layerNum][pos].h/2, 0, 0, imgFace_Model[faceNum][xFace->faceType][layerNum][pos].w, imgFace_Model[faceNum][xFace->faceType][layerNum][pos].h, VH);
	}
	else
	{
		if(isImgFace[xFace->faceNum] == FALSE)
		{
			isImgFace[xFace->faceNum] = TRUE;
			
			for(int i=0;i<FACETYPEMAX;i++)
			{
				sprintf(strTempS, "s_%d_%d_13.png",xFace->faceNum,i);
				loadImg(strTempS, &imgFace[xFace->faceNum][i][13][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "s_%d_%d_14.png",xFace->faceNum,i);
				loadImg(strTempS, &imgFace[xFace->faceNum][i][14][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "s_%d_%d_15.png",xFace->faceNum,i);
				loadImg(strTempS, &imgFace[xFace->faceNum][i][15][ACT_FRONT]);	//[헤어코드][두상번호][레이어][pos][2]
				
				sprintf(strTempS, "b_s_%d_%d_12.png",xFace->faceNum,i);
				loadImg(strTempS, &imgFace[xFace->faceNum][i][12][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "b_s_%d_%d_13.png",xFace->faceNum,i);
				loadImg(strTempS, &imgFace[xFace->faceNum][i][13][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
				sprintf(strTempS, "b_s_%d_%d_14.png",xFace->faceNum,i);
				loadImg(strTempS, &imgFace[xFace->faceNum][i][14][ACT_BACK]);	//[헤어코드][두상번호][레이어][pos][2]
			}
		}
		drawImage(&imgFace[xFace->faceNum][xFace->faceType][layerNum][pos], x+imgFace[xFace->faceNum][xFace->faceType][layerNum][pos].w/2, y+imgFace[xFace->faceNum][xFace->faceType][layerNum][pos].h/2, 0, 0, imgFace[xFace->faceNum][xFace->faceType][layerNum][pos].w, imgFace[xFace->faceNum][xFace->faceType][layerNum][pos].h, VH);
	}
}

void drawHairF(int drawX,int drawY,int hairCode,int sub,int reSize)
{
	if(hairCode>=1000)
	{
		hairCode = hairCode%1000;
		hairCode = xModelData[hairCode].imgNum;
		
		if(imgHairF_Model[hairCode][1].texture == NULL)
		{
			if(xloadImg.isLoadHairF == TRUE)
			{
				return;
			}
			else
			{
				xloadImg.isLoadHairF = TRUE;
			}
			
			
			sprintf(strTempS,"m_hair_%db.png", hairCode);
			loadImgDocuments(strTempS, &imgHairF_Model[hairCode][0]);
			
			sprintf(strTempS,"m_hair_%d.png", hairCode);
			loadImgDocuments(strTempS, &imgHairF_Model[hairCode][1]);
		}
		else
		{
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = reSize;
			drawImage(&imgHairF_Model[hairCode][sub], drawX, drawY, 0, 0, imgHairF_Model[hairCode][sub].w, imgHairF_Model[hairCode][sub].h, VH);
			xGame.isReSizeDraw = FALSE;
		}
	}
	else
	{
		if(imgHairF[hairCode][1].texture == NULL)
		{
			if(xloadImg.isLoadHairF == TRUE)
			{
				return;
			}
			else
			{
				xloadImg.isLoadHairF = TRUE;
			}
			
			sprintf(strTempS,"hair_%db.png", hairCode);
			loadImg(strTempS, &imgHairF[hairCode][0]);
			
			sprintf(strTempS,"hair_%d.png", hairCode);
			loadImg(strTempS, &imgHairF[hairCode][1]);
		}
		else
		{
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = reSize;
			drawImage(&imgHairF[hairCode][sub], drawX, drawY, 0, 0, imgHairF[hairCode][sub].w, imgHairF[hairCode][sub].h, VH);
			xGame.isReSizeDraw = FALSE;
		}
	}
}



void drawFaceF(int drawX,int drawY,int faceCode,int faceType,int reSize)
{
		
	if(faceCode >= 1000)
	{
		faceCode = faceCode%1000;
		if(xModelData[faceCode].isOneHead == FALSE)
		{
			faceCode = xModelData[faceCode].imgNum;
			if(imgFaceF_Model[faceCode].texture == NULL)
			{
				if(xloadImg.isLoadFaceF == TRUE)
				{
					return;
				}
				else
				{
					xloadImg.isLoadFaceF = TRUE;
				}
				
				sprintf(strTempS,"m_face_%d.png", faceCode);
				loadImgDocuments(strTempS, &imgFaceF_Model[faceCode]);
			}
					
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = reSize;
			drawImage(&imgFaceF_Model[faceCode], drawX, drawY, 0, 0, imgFaceF_Model[faceCode].w, imgFaceF_Model[faceCode].h, VH);
			xGame.isReSizeDraw = FALSE;
		}
	}
	else
	{
		if(imgFaceF[faceCode].texture == NULL)
		{
			if(xloadImg.isLoadFaceF == TRUE)
			{
				
				return;
			}
			else
			{
				xloadImg.isLoadFaceF = TRUE;
			}
			
			sprintf(strTempS,"face_%d.png", faceCode);
			loadImg(strTempS, &imgFaceF[faceCode]);
		}
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = reSize;
		drawImage(&imgFaceF[faceCode], drawX, drawY, 0, 0, imgFaceF[faceCode].w, imgFaceF[faceCode].h, VH);
		xGame.isReSizeDraw = FALSE;
	}
}




void drawFittingF(int drawX,int drawY,int itemCode,int reSize)
{
	int x[20];
	int y[20];
	int imgType;
	int imgList;
	int sex;
	int subX;
	int subY;
		
	imgType = itemCode/1000;
	imgList = itemCode%1000;
	
	sex = xFashionData[imgType][imgList].gender;
	
	
	
	
	//여
	if(sex == 0)
	{
		subX = -93;
		subY = -260;
		
		x[1] = subX+62+imgFittingBodyBlack[sex][1].w/2;
		y[1] = subY+107+imgFittingBodyBlack[sex][1].h/2;
		x[3] = subX+7+imgFittingBodyBlack[sex][3].w/2;
		y[3] = subY+76+imgFittingBodyBlack[sex][3].h/2;
		x[5] = subX+39+imgFittingBodyBlack[sex][5].w/2;
		y[5] = subY+296+imgFittingBodyBlack[sex][5].h/2;
		x[6] = subX+39+imgFittingBodyBlack[sex][6].w/2;
		y[6] = subY+296+imgFittingBodyBlack[sex][6].h/2;
		x[11] = subX+70+imgFittingBodyBlack[sex][11].w/2;
		y[11] = subY+302+imgFittingBodyBlack[sex][11].h/2;
		x[12] = subX+70+imgFittingBodyBlack[sex][12].w/2;
		y[12] = subY+302+imgFittingBodyBlack[sex][12].h/2;
		x[13] = subX+2+imgFittingBodyBlack[sex][13].w/2;
		y[13] = subY+27+imgFittingBodyBlack[sex][13].h/2;
		x[17] = subX+25+imgFittingBodyBlack[sex][17].w/2;
		y[17] = subY+155+imgFittingBodyBlack[sex][17].h/2;
	}
	else	//남
	{
		subX = -93;
		subY = -240;
		
		
		x[1] = subX+72+imgFittingBodyBlack[sex][1].w/2;
		y[1] = subY+128+imgFittingBodyBlack[sex][1].h/2;
		x[3] = subX+29+imgFittingBodyBlack[sex][3].w/2;
		y[3] = subY+120+imgFittingBodyBlack[sex][3].h/2;
		x[5] = subX+62+imgFittingBodyBlack[sex][5].w/2;
		y[5] = subY+308+imgFittingBodyBlack[sex][5].h/2;
		x[6] = subX+62+imgFittingBodyBlack[sex][6].w/2;
		y[6] = subY+308+imgFittingBodyBlack[sex][6].h/2;
		x[11] = subX+62+imgFittingBodyBlack[sex][11].w/2;
		y[11] = subY+308+imgFittingBodyBlack[sex][11].h/2;
		x[12] = subX+62+imgFittingBodyBlack[sex][12].w/2;
		y[12] = subY+308+imgFittingBodyBlack[sex][12].h/2;
		x[13] = subX+1+imgFittingBodyBlack[sex][13].w/2;
		y[13] = subY+0+imgFittingBodyBlack[sex][13].h/2;
		x[17] = subX+41+imgFittingBodyBlack[sex][17].w/2;
		y[17] = subY+141+imgFittingBodyBlack[sex][17].h/2;
	}
	
	
	
	x[1] += drawX;
	y[1] += drawY;
	x[3] += drawX;
	y[3] += drawY;
	x[5] += drawX;
	y[5] += drawY;
	x[6] += drawX;
	y[6] += drawY;
	x[11] += drawX;
	y[11] += drawY;
	x[12] += drawX;
	y[12] += drawY;
	x[13] += drawX;
	y[13] += drawY;
	x[17] += drawX;
	y[17] += drawY;
	
	
	
	
			
	//이미지존재여부 검사해서 없으면 로딩해주기
	loadFashionFImg(imgType,imgList);
	
	if(isImgFittingF[imgType][imgList] == FALSE)
		return;
	
	
		
	xGame.reSize = 100;
	switch(imgType)
	{
	case 0:		//아우터
        xGame.reSize = 100;
        for(int i=0;i<18;i++)
        {
            y[i] += 10;
        }
        break;
	case 1:		//상의
		xGame.reSize = 150;
		for(int i=0;i<18;i++)
		{
			y[i] += 50;
		}
		break;
	case 3:		//원피스
		xGame.reSize = 90;
		for(int i=0;i<18;i++)
		{
			y[i] += 25;
		}
		break;
	case 2:		//하의
		if(sex == 0)
		{
			xGame.reSize = 110;
			for(int i=0;i<18;i++)
			{
				y[i] += 5;
			}
		}
		else
		{
			xGame.reSize = 100;
			for(int i=0;i<18;i++)
			{
				y[i] -= 10;
			}
		}
		break;
	case 4:		//신발
		xGame.reSize = 200;
		for(int i=0;i<18;i++)
		{
			if(sex == 0)
			{
				x[i] += 25;
				y[i] -= 60;
			}
			else
			{

				y[i] -= 90;
			}
		}
		break;
	case 5:		//가방
		if(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->texture != NULL)		//손가방
		
		{
			if(sex == 0)
			{
				xGame.reSize = 180;
				for(int i=0;i<18;i++)
				{
					x[i] -= 20;
					y[i] += 15;
					
				}
			}
			else
			{
				xGame.reSize = 180;
				for(int i=0;i<18;i++)
				{
					x[i] -= 20;
					y[i] -= 15;
				}
			}
		}
		else													//몸통이용가방
		{
			xGame.reSize = 110;
			for(int i=0;i<18;i++)
			{
				y[i] += 40;
			}
		}
		break;
	case 6:		//악세사리
			
			
						
			
		if(xFashionData[imgType][imgList].isStaff == 3)	//바지쪽 악세
		{
			xGame.reSize = 110;
			for(int i=0;i<18;i++)
			{
				y[i] += 5;
			}
		}
		else if(getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer)->texture != NULL)		//양말
		
		{
			
			xGame.reSize = 200;
			for(int i=0;i<18;i++)
			{
				if(sex == 0)
				{
					x[i] += 25;
					y[i] -= 60;
				}
				else
				{
					
					y[i] -= 90;
				}
			}
		}
		else if(getImgFittingF(imgType,imgList,13,xFashionData[imgType][imgList].layer)->texture != NULL)		//머리용아이템

		{
			if(sex == 0)
			{
				xGame.reSize = 130;
				for(int i=0;i<18;i++)
				{
					x[i] -= 10;
					y[i] += 145;
				}
			}
			else
			{
				xGame.reSize = 130;
				for(int i=0;i<18;i++)
				{
					x[i] -= 5;
					y[i] += 140;
				}
			}
		}
		else	//그외
		{
			xGame.reSize = 150;
			for(int i=0;i<18;i++)
			{
				y[i] += 50;
			}
		}
		break;
	}
	
	xGame.reSize = reSize*xGame.reSize/100;
	xGame.fgameScale = (float)xGame.reSize*0.01f;
	xGame.fgameScaleCx =drawX;
	xGame.fgameScaleCy =lcdH-drawY;
	
	
	switch(imgType)
	{
	case 0:		//아우터
	case 1:		//상의
	case 2:		//하의
	case 3:		//원피스
		drawImage(getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer), x[17], y[17], 0, 0, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->h, VH);
		if(imgType != 2)
			drawImage(&imgFittingBodyBlack[sex][3], x[3], y[3], 0, 0, imgFittingBodyBlack[sex][3].w, imgFittingBodyBlack[sex][3].h, VH);
		else
			drawImage(&imgFittingBodyBlack3Sub[sex], x[3], y[3], 0, 0, imgFittingBodyBlack3Sub[sex].w, imgFittingBodyBlack3Sub[sex].h, VH);
		drawImage(getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer), x[3], y[3], 0, 0, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->h, VH);
		drawImage(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer), x[1], y[1], 0, 0, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->h, VH);
		break;
	case 4:		//신발
		if(sex == 0)
		{
		if(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->texture != NULL)
			drawImage(&imgFittingBodyBlack[sex][5], x[5]-16, y[5]-9, 0, 0, imgFittingBodyBlack[sex][5].w, imgFittingBodyBlack[sex][5].h, VH);
						
		drawImage(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer), x[5]-16, y[5]-9, 0, 0, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->h, VH);
		if(getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer)->texture != NULL)

			drawImage(&imgFittingBodyBlack[sex][6], x[6]-16, y[6]-9, 0, 0, imgFittingBodyBlack[sex][6].w, imgFittingBodyBlack[sex][6].h, VH);
		drawImage(getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer), x[6]-16, y[6]-9, 0, 0, getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer)->h, VH);
		if(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->texture != NULL)

			drawImage(&imgFittingBodyBlack[sex][5], x[5], y[5], 0, 0, imgFittingBodyBlack[sex][5].w, imgFittingBodyBlack[sex][5].h, VH);
		drawImage(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer), x[5], y[5], 0, 0, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->h, VH);
		if(getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer)->texture != NULL)
			drawImage(&imgFittingBodyBlack[sex][6], x[6], y[6], 0, 0, imgFittingBodyBlack[sex][6].w, imgFittingBodyBlack[sex][6].h, VH);
		drawImage(getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer), x[6], y[6], 0, 0, getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer)->h, VH);
		}
		else
		{
		if(getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer)->texture != NULL)

			drawImage(&imgFittingBodyBlack[sex][11], x[11], y[11], 0, 0, imgFittingBodyBlack[sex][11].w, imgFittingBodyBlack[sex][11].h, VH);
		drawImage(getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer), x[11], y[11], 0, 0, getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer)->h, VH);
		}
		break;
	case 5:		//가방
		if(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->texture != NULL)		//손가방

		
		{
			//drawImage(&imgFittingBodyBlack[sex][1], x[1], y[1], 0, 0, imgFittingBodyBlack[sex][1].w, imgFittingBodyBlack[sex][1].h, VH);
			drawImage(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer), x[1], y[1], 0, 0, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->h, VH);
		}
		else													//몸통이용가방
		{
			drawImage(&imgFittingFBackPack[imgList], x[3], y[3], 0, 0, imgFittingFBackPack[imgList].w, imgFittingFBackPack[imgList].h, VH);
			//drawImage(&imgFittingBodyBlack[sex][17], x[17], y[17], 0, 0, imgFittingBodyBlack[sex][17].w, imgFittingBodyBlack[sex][17].h, VH);
			drawImage(getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer), x[17], y[17], 0, 0, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->h, VH);
			drawImage(&imgFittingBodyBlack[sex][3], x[3], y[3], 0, 0, imgFittingBodyBlack[sex][3].w, imgFittingBodyBlack[sex][3].h, VH);
			drawImage(getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer), x[3], y[3], 0, 0, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->h, VH);
			//drawImage(&imgFittingBodyBlack[sex][1], x[1], y[1], 0, 0, imgFittingBodyBlack[sex][1].w, imgFittingBodyBlack[sex][1].h, VH);
			drawImage(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer), x[1], y[1], 0, 0, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->h, VH);
		}
		break;
	case 6:		//악세사리
		if(xFashionData[imgType][imgList].isStaff == 3)	//바지쪽 악세
		{
			drawImage(getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer), x[17], y[17], 0, 0, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->h, VH);
			drawImage(&imgFittingBodyBlack3Sub[sex], x[3], y[3], 0, 0, imgFittingBodyBlack3Sub[sex].w, imgFittingBodyBlack3Sub[sex].h, VH);
			drawImage(getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer), x[3], y[3], 0, 0, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->h, VH);
			drawImage(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer), x[1], y[1], 0, 0, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->h, VH);
		}
		else if(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->texture != NULL)		//양말

		{
			drawImage(&imgFittingBodyBlack[sex][5], x[5]-16, y[5]-9, 0, 0, imgFittingBodyBlack[sex][5].w, imgFittingBodyBlack[sex][5].h, VH);
			drawImage(&imgFittingBodyBlack[sex][5], x[5], y[5], 0, 0, imgFittingBodyBlack[sex][5].w, imgFittingBodyBlack[sex][5].h, VH);
			drawImage(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer), x[5]-16, y[5]-9, 0, 0, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->h, VH);
			drawImage(getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer), x[5], y[5], 0, 0, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer)->h, VH);
		}
		else if(getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer)->texture != NULL)		//양말(남)

		{
			drawImage(&imgFittingBodyBlack[sex][11], x[11], y[11], 0, 0, imgFittingBodyBlack[sex][11].w, imgFittingBodyBlack[sex][11].h, VH);
			drawImage(getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer), x[11], y[11], 0, 0, getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer)->h, VH);
			
			
		}

		else if(getImgFittingF(imgType,imgList,13,xFashionData[imgType][imgList].layer)->texture != NULL)		//머리용아이템
		{
			drawImage(&imgFittingBodyBlack[sex][13], x[13], y[13], 0, 0, imgFittingBodyBlack[sex][13].w, imgFittingBodyBlack[sex][13].h, VH);
			drawImage(getImgFittingF(imgType,imgList,13,xFashionData[imgType][imgList].layer), x[13], y[13], 0, 0, getImgFittingF(imgType,imgList,13,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,13,xFashionData[imgType][imgList].layer)->h, VH);
		}
		else	//그외
		{
			drawImage(&imgFittingBodyBlack[sex][17], x[17], y[17], 0, 0, imgFittingBodyBlack[sex][17].w, imgFittingBodyBlack[sex][17].h, VH);
			drawImage(getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer), x[17], y[17], 0, 0, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer)->h, VH);
			drawImage(&imgFittingBodyBlack[sex][3], x[3], y[3], 0, 0, imgFittingBodyBlack[sex][3].w, imgFittingBodyBlack[sex][3].h, VH);
			drawImage(getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer), x[3], y[3], 0, 0, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer)->h, VH);
			drawImage(&imgFittingBodyBlack[sex][1], x[1], y[1], 0, 0, imgFittingBodyBlack[sex][1].w, imgFittingBodyBlack[sex][1].h, VH);
			drawImage(getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer), x[1], y[1], 0, 0, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->w, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer)->h, VH);
		}
		break;
	}
	
	xGame.fgameScaleCx =cx;
	xGame.fgameScaleCy =cy;
	xGame.fgameScale = 1.0f;
}

void drawLvUp()
{	
	int px = cx;
	int py = cy+90;
	

	subTemp[10] = ++xLvUp.anyCnt-2-14;
	
	if(subTemp[10] >= 0)
	{
		//뻉뺑이
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 100*2;
		switch(subTemp[10])
		{
		case 0: xGame.reSize =250*2;break;
		case 1:	xGame.reSize =235*2;break;
		case 2:	xGame.reSize =220*2;break;
		case 3:	xGame.reSize =205*2;break;
		case 4:	xGame.reSize =190*2;break;
		case 5:	xGame.reSize =175*2;break;
		case 6:	xGame.reSize =160*2;break;
		case 7:	xGame.reSize =145*2;break;
		case 8:	xGame.reSize =130*2;break;
		case 9:	xGame.reSize =115*2;break;
		}
		xGame.isRotate = TRUE;
		xGame.rotateNum = 360-((gameCnt%180)*2);

		drawPacker(imgEff3, px, py-260, 0, 0, imgW(imgEff3), imgH(imgEff3), VH);
		setAlpha(ALPHA_MAX);
		xGame.isRotate = FALSE;
		xGame.isReSizeDraw = FALSE;
	}


	
	subTemp[10] = xLvUp.anyCnt-2;
	
	if(subTemp[10] < 0)
		return;
	int tAlpha = ALPHA_MAX;
	int tReSize = 100;
	int tBlend = 0;
	switch(subTemp[10])
	{
	case 0:	tReSize=293;	tAlpha=0;break;
	case 1:	tReSize=258.147;tAlpha=7.14286;break;
	case 2:	tReSize=215.985;tAlpha=14.2857;break;
	case 3:	tReSize=178.56;	tAlpha=21.4286;break;
	case 4:	tReSize=148.478;tAlpha=28.5714;break;
	case 5:	tReSize=125.57;	tAlpha=35.7143;break;
	case 6:	tReSize=109.046;tAlpha=42.8571;break;
	case 7:	tReSize=98.0757;tAlpha=50;break;
	case 8:	tReSize=91.9307;tAlpha=57.1429;break;
	case 9:	tReSize=90;		tAlpha=64.2857;break;
	case 10:tReSize=94.4398;tAlpha=71.4286;break;
	case 11:tReSize=98.4496;tAlpha=78.5714;break;
	case 12:tReSize=101.696;tAlpha=85.7143;break;
	case 13:tReSize=103.063;tAlpha=92.8571;break;
	case 14:tBlend=255;break;
	case 15:tBlend=225;break;
	case 16:tBlend=200;break;
	case 17:tBlend=175;break;
	case 18:tBlend=150;break;
	case 19:tBlend=125;break;
	case 20:tBlend=100;break;
	case 21:tBlend=75;break;
	case 22:tBlend=50;break;
	case 23:tBlend=25;break;
	}
	
	if(tBlend != 0)
	{
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_WHITEALPHA;
		xGame.blendNum = tBlend;		
	}
	
	if(tAlpha != 100)
	{
		setAlpha(tAlpha*ALPHA_MAX/100);
	}
	
	if(tReSize != 100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = tReSize;
	}
		
		
	drawImage(&imgLvUp[0], px, py, 0, 0, imgLvUp[0].w, imgLvUp[0].h, VH);
	drawImage(&imgLvUp[1], px, py-260, 0, 0, imgLvUp[1].w, imgLvUp[1].h, VH);
	
	
	switch(xLvUp.anyCnt)
	{
	case 20:
		makeFire(px-60, py-260-60, 10);
		makeFire(px+60, py-260-60, 10);
		makeFire(px-60, py-260+60, 10);
		makeFire(px+60, py-260+60, 10);
		makeFire(px, py-260, 10);
		break;
	}
	
	
	
	
	setFontSize(14);
	sprintf(strTempS, "Level %d 달성",xSaveTemp.lv.oriData);
	gDrawStringBold(px, py-141, strTempS, VH, 97, ALPHA_MAX, 227, 44, 27, 26);
	setFontSize(11);
	gSetColor(82, 49, 38);
	gDrawString(px,py-116, "이제부터 이런 아이템들을 구매할수 있어요~",VH);
	
    
    if(xLvUp.totalSlotNum == 0)
    {
        setFontSize(26);
        gSetColor(82, 49, 38);
        gDrawString(px,py+8, "오픈된 아이템이 없습니다.",VH);
        setFontSize(11);
    }
    
	
	
	xLvUp.xDragScroll.totalNum = xLvUp.totalSlotNum;
	xLvUp.xDragScroll.posGab = 214;
	
	xLvUp.xDragScroll.endPos = -(((xLvUp.xDragScroll.totalNum-3)*xLvUp.xDragScroll.posGab));
	
	xLvUp.xDragScroll.endPos -= 80;
	
	int iMax = xLvUp.xDragScroll.totalNum;
	dragScrollPrc(&xLvUp.xDragScroll,1,FALSE);
	
	int pos;
	subTemp[XPOS] = px-178;
	subTemp[YPOS] = py+14;
		
	
	
	int setClipX = px-291;
	int setClipW = 572;
	gSetClip(true,setClipX, 0, setClipW, lcdH);
	for(int i=0;i<iMax;i++)
	{
		pos = xLvUp.xDragScroll.pos+(xLvUp.xDragScroll.posGab*i);
		drawImage(&imgLvUp[2], subTemp[XPOS]+pos,subTemp[YPOS] , 0, 0, imgLvUp[2].w, imgLvUp[2].h, VH);
		switch(xLvUp.slotType[i])
		{
		case LVUPSLOT_TYPE_FASHION:
			//gSetClip(setClipX, subTemp[YPOS]-imgLvUp[2].h/2, setClipW, imgLvUp[2].h);
			if(tReSize == 100)
				drawFittingF(subTemp[XPOS]+pos,subTemp[YPOS]-10,xLvUp.slotCode[i],80);
			//gSetClip(setClipX, 0, setClipW, lcdH);
			break;
		case LVUPSLOT_TYPE_INTERIOR:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 100;
			setMapData(xLvUp.slotCode[i]);
				
				
			setDrawObjCenter(xMap.type,xMap.listNum);
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 115;
			if(xDrawObjCenter.reSize != 100)
			{
				xGame.fgameScaleCx =subTemp[XPOS]+pos;
				xGame.fgameScaleCy =lcdH-(subTemp[YPOS]-5);
				xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
			}
			if(tReSize == 100)
				drawObj(subTemp[XPOS]+pos+xDrawObjCenter.w, subTemp[YPOS]-5+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
			xGame.fgameScale = 1.0f;
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			xGame.isReSizeDraw = FALSE;
			break;
		}
		
		drawImage(&imgLvUp[3], subTemp[XPOS]+pos,subTemp[YPOS] +75, 0, 0, imgLvUp[3].w, imgLvUp[3].h, VH);
			
		xLvUp.xTouchSlot[i].wPos = imgLvUp[3].w;
		xLvUp.xTouchSlot[i].hPos = imgLvUp[3].h;
		xLvUp.xTouchSlot[i].xPos = subTemp[XPOS]+pos-xLvUp.xTouchSlot[i].wPos/2;
		xLvUp.xTouchSlot[i].yPos = subTemp[YPOS]+75-xLvUp.xTouchSlot[i].hPos/2;
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	drawBtn(px, py+177, BTN_OK_CONFIRM);
	
	xGame.isBlend = FALSE;
	xGame.isReSizeDraw = FALSE;
	setAlpha(ALPHA_MAX);
}

void lvUpFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		loadImg("lvup0.png", &imgLvUp[0]);
		loadImg("lvup1.png", &imgLvUp[1]);
		loadImg("lvup3.png", &imgLvUp[3]);
		

	}
	else
	{
		freeImg(&imgLvUp[0]);
		freeImg(&imgLvUp[1]);
		freeImg(&imgLvUp[3]);

	}
}
void setLvUp()
{
	lvUpFreeLoad(TRUE);
	xWorldMap.isLvUp = TRUE;
	xLvUp.anyCnt = 0;
	xLvUp.totalSlotNum = 0;
	//오픈된 패션 구하기
	for(int i=0;i<CATALOGSLOTBMAX;i++)
	{
		for(int j=0;j<xCatalog.totalSlot[i];j++)
		{
			setMapData(xCatalog.xSlot[i][j].code);
			if(xSaveTemp.lv.oriData == xFashionData[xMap.type][xMap.listNum].lv)
			{
				xLvUp.slotType[xLvUp.totalSlotNum] = LVUPSLOT_TYPE_FASHION;
				xLvUp.slotCode[xLvUp.totalSlotNum++] = xCatalog.xSlot[i][j].code;
			}
		}
	}
    
	//오픈된 인테리어 구하기
	for(int i=0;i<INTERIORSLOTBMAX;i++)
	{
		for(int j=0;j<xInterior.totalSlot[i];j++)
		{
			for(int tt=0;tt<xInterior.xSlot[i][j].totalTeam;tt++)
			{
				setMapData(xInterior.xSlot[i][j].codeTeam[tt]);
				if(xObj.xObjData[xMap.type][xMap.listNum].lv == xSaveTemp.lv.oriData)
				{
					xLvUp.slotType[xLvUp.totalSlotNum] = LVUPSLOT_TYPE_INTERIOR;
					xLvUp.slotCode[xLvUp.totalSlotNum++] = xInterior.xSlot[i][j].codeTeam[tt];
				}
			}
		}
	}
	
	////////////////////////////////////////////////////////////
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
	////////////////////////////////////////////////////////////
    
	xLvUp.xDragScroll.touchXpos = DONT;
	xLvUp.xDragScroll.touchYpos = DONT;
	xLvUp.xDragScroll.touchXposBefore = DONT;
	xLvUp.xDragScroll.touchYposBefore = DONT;
	xLvUp.xDragScroll.selectNum = 0;
	xLvUp.xDragScroll.pos = 0;
	xLvUp.xDragScroll.speed = 0;
}

void keyLvUp(int type, int param1, int param2)
{
	M_Boolean isKeyEvent;
	M_Int32 keyEventNum;
	if(type == MH_KEY_PRESSEVENT)
	{
		if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			lvUpFreeLoad(FALSE);
			xWorldMap.isLvUp = FALSE;
			xWorldMap.isKeyReturn = TRUE;
		}
		else
		{
			dragScrollKeyPrc(&xLvUp.xDragScroll,0);
		}
	}
	else if(type == MH_KEY_RELEASEEVENT)
	{
		if(xLvUp.xDragScroll.touchXposBefore != DONT)
		{
			dragScrollKeyPrc(&xLvUp.xDragScroll,1);
		}
		else
		{
			isKeyEvent = FALSE;
			keyEventNum = 0;
			
			for(int i=0;i<xLvUp.totalSlotNum;i++)
			{
				if(touchCheck(&xLvUp.xTouchSlot[i]) == TRUE)
				{
					isKeyEvent = TRUE;
					keyEventNum = i;
					break;
				}
			}
			
			if(isKeyEvent == TRUE)
			{
				playSnd(SND_MENU_OK);
				lvUpFreeLoad(FALSE);
				xWorldMap.isLvUp = FALSE;
				
				int slotNum;
				switch(xLvUp.slotType[keyEventNum])
				{
				case LVUPSLOT_TYPE_FASHION:
					xLvUp.productionInfoCode = xLvUp.slotCode[keyEventNum];
					setStateProductionMenu();
					slotNum = linkProductionMenu(xLvUp.slotCode[keyEventNum]);
					if(slotNum != DONT)
					{
						xDragScrollCatalogS.selectNum = slotNum/8;
					}
					break;
				case LVUPSLOT_TYPE_INTERIOR:
					xLvUp.interiorInfoCode = xLvUp.slotCode[keyEventNum];
					setBuildCheck();
					slotNum = linkInteriorShop(xLvUp.slotCode[keyEventNum]);
					interiorShopFreeLoad(TRUE);
					xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
					if(slotNum != DONT)
					{
						xDragScrollInteriorS.selectNum = slotNum/8;
					}
					break;
				}
			}
		}
		
		xLvUp.xDragScroll.touchXpos = DONT;
		xLvUp.xDragScroll.touchYpos = DONT;
		xLvUp.xDragScroll.touchXposBefore = DONT;
		xLvUp.xDragScroll.touchYposBefore = DONT;
	}
}

void checkDelFittingItem()
{
	//피팅쇼윈도를 검색해 해당 아이템은 제거해준다(다 팔린 아이템 검사용)
	resetShowWindowInfo();
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		resetSellTableInfo(floor);
		for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
		{
			if(xShowWindowInfo[floor][ss].isUse == TRUE && xShowWindowInfo[floor][ss].isFitting == TRUE)
			{
				for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
				{
					if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
					{
						if(DONT == checkSellTableSlotItem(floor,xShowWindowInfo[floor][ss].xF.code[ff]))
						{
							xShowWindowInfo[floor][ss].xF.code[ff] = DONT;
							
							/////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.floor[xEventQueueNet.totalNum] = floor;
							xEventQueueNet.key[xEventQueueNet.totalNum] = xMap.dataKey[floor][MAP_TYPE_WALL1][xShowWindowInfo[floor][ss].x][xShowWindowInfo[floor][ss].y];
							xEventQueueNet.sex[xEventQueueNet.totalNum] = xShowWindowInfo[floor][ss].gender;
							for(int k=0;k<16;k++)
								xEventQueueNet.layer[xEventQueueNet.totalNum][k] = xShowWindowInfo[floor][ss].xF.code[k];
							
							xEventQueueNet.open[xEventQueueNet.totalNum] = xShowWindowInfo[floor][ss].xF.isInFitting == FALSE?0:1;
							
							addEventQueueNet(0, 0, NETQUEUE_TYPE_SHOWWINDOW, TRUE);
							/////////////////////////////////////////////////////////////////////////////                            
							break;
						}
					}
				}
			}
		}
	}
}

int checkSellTableSlotItem(int floor,int code)
{
	for(int ss=0;ss<SELLTABLEINFOMAX;ss++)
	{
		if(xSellTableInfo[floor][ss].isUse == TRUE)
		{
			setMapData(xSellTableInfo[floor][ss].interiorCode);
						
			for(int k=0;k<xObj.xObjData[xMap.type][xMap.listNum].slot;k++)
			{
				if(xSellTableInfo[floor][ss].xSlot[k].code == code)
				{
					if(xSellTableInfo[floor][ss].xSlot[k].num > 0)
					{
						
						return ss;
					}
				}
			}
		}
	}
	return DONT;
}

void setFace(XFACE * xFace,int faceType)
{
	if(xFace->faceType != faceType)
	{
		xFace->faceType = faceType;
		xFace->faceAnyCnt = 0;
	}
}

void setSpeak(XSPEAK * xSpeak,const char *strText,int frameMax)
{	
	if(xWorldMap.isFriendMap == FALSE)
	{
		xSpeak->state = SPEAK_STATE_PLAY;
		sprintf(xSpeak->strText, "%s",strText);
		xSpeak->anyCnt = 0;
		xSpeak->anyCntMax = frameMax;
	}
}

void drawSpeak(XSPEAK * xSpeak, int x,int y)
{
	if(xSpeak->state == SPEAK_STATE_PLAY)
	{
		if(++xSpeak->anyCnt > xSpeak->anyCntMax)
			xSpeak->state = SPEAK_STATE_DONT;
		
		xGame.fgameScale = 1.0f;
		switch(xSpeak->anyCnt)
		{
		case 1:	drawPacker(imgNpcSpeakBox, x, y, 0, 0, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		case 2:	drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*1, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		case 3:	drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*2, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		case 4:	drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*3, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		case 5:	drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*4, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		case 6:	drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*5, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		case 7:	drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*6, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		case 8:	drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*7, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);	break;
		default:
			drawPacker(imgNpcSpeakBox, x, y, 0, imgH(imgNpcSpeakBox)/9*8, imgW(imgNpcSpeakBox), imgH(imgNpcSpeakBox)/9, VH);
			break;
		}
		if(xSpeak->anyCnt > 3)
		{
			gSetColor(0, 0, 0);
			setFontSize(8);
            setPopupStringLine(xSpeak->strText,10);
            xPopup.fontGab = 15;
            for(int li=0;li<xPopup.totalLine;li++)
                gDrawString(x,y-5+(xPopup.fontGab*li)-((xPopup.totalLine-1)*(xPopup.fontGab/2)), xPopup.strTextLine[li], VH);
			setFontSize(11);
			
		}
		xGame.fgameScale = xWorldMap.fscale;
	}
}

void resetStaff()
{
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
		if(xFitting.xFace.hairNum != xPaymentAssistant[0].xFace.hairNum)
		{
			xHairData[xFitting.xFace.hairNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xFitting.xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xHairData[xPaymentAssistant[0].xFace.hairNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xPaymentAssistant[0].xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xPaymentAssistant[0].xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		if(xFitting.xFace.hairNum != xShopAssistant[0][0].xFace.hairNum)
		{
			xHairData[xFitting.xFace.hairNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xFitting.xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xHairData[xShopAssistant[0][0].xFace.hairNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xShopAssistant[0][0].xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xShopAssistant[0][0].xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
		if(xFitting.xFace.hairNum != xPaymentAssistant[1].xFace.hairNum)
		{
			xHairData[xFitting.xFace.hairNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xFitting.xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xHairData[xPaymentAssistant[1].xFace.hairNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xPaymentAssistant[1].xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xPaymentAssistant[1].xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		if(xFitting.xFace.hairNum != xShopAssistant[1][0].xFace.hairNum)
		{
			xHairData[xFitting.xFace.hairNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xFitting.xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xHairData[xShopAssistant[1][0].xFace.hairNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xShopAssistant[1][0].xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xShopAssistant[1][0].xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		if(xFitting.xFace.hairNum != xPaymentAssistant[2].xFace.hairNum)
		{
			xHairData[xFitting.xFace.hairNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xFitting.xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xHairData[xPaymentAssistant[2].xFace.hairNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xPaymentAssistant[2].xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xPaymentAssistant[2].xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		if(xFitting.xFace.hairNum != xShopAssistant[2][0].xFace.hairNum)
		{
			xHairData[xFitting.xFace.hairNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xFitting.xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xHairData[xShopAssistant[2][0].xFace.hairNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xShopAssistant[2][0].xFace.hairNum;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xHairData[xShopAssistant[2][0].xFace.hairNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		
		break;
	}
	
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
		if(xFitting.xFace.faceNum != xPaymentAssistant[0].xFace.faceNum)
		{
			xFaceData[xFitting.xFace.faceNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xFitting.xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xFaceData[xPaymentAssistant[0].xFace.faceNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xPaymentAssistant[0].xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xPaymentAssistant[0].xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		if(xFitting.xFace.faceNum != xShopAssistant[0][0].xFace.faceNum)
		{
			xFaceData[xFitting.xFace.faceNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xFitting.xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xFaceData[xShopAssistant[0][0].xFace.faceNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xShopAssistant[0][0].xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xShopAssistant[0][0].xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
		if(xFitting.xFace.faceNum != xPaymentAssistant[1].xFace.faceNum)
		{
			xFaceData[xFitting.xFace.faceNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xFitting.xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xFaceData[xPaymentAssistant[1].xFace.faceNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xPaymentAssistant[1].xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xPaymentAssistant[1].xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		if(xFitting.xFace.faceNum != xShopAssistant[1][0].xFace.faceNum)
		{
			xFaceData[xFitting.xFace.faceNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xFitting.xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xFaceData[xShopAssistant[1][0].xFace.faceNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xShopAssistant[1][0].xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xShopAssistant[1][0].xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		if(xFitting.xFace.faceNum != xPaymentAssistant[2].xFace.faceNum)
		{
			xFaceData[xFitting.xFace.faceNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xFitting.xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xFaceData[xPaymentAssistant[2].xFace.faceNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xPaymentAssistant[2].xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xPaymentAssistant[2].xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		if(xFitting.xFace.faceNum != xShopAssistant[2][0].xFace.faceNum)
		{
			xFaceData[xFitting.xFace.faceNum].haveNum++;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xFitting.xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xFitting.xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
			xFaceData[xShopAssistant[2][0].xFace.faceNum].haveNum--;
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xShopAssistant[2][0].xFace.faceNum+1000;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xFaceData[xShopAssistant[2][0].xFace.faceNum].haveNum;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FACE, TRUE);
			///////////////////////////////////////////////////////////////////
		}
		break;
	}
	
	
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFitting.xF[xFitting.gender].code[ff] != DONT)
		{
			switch(xStaff.staffSlot[xStaff.selectStaffSlot])
			{
			case STAFF_SLOT_PAYMENTASSISTANT_1F:
				if(xFitting.xF[xFitting.gender].code[ff] != xPaymentAssistant[0].xF.code[ff])
				{
					setMapData(xFitting.xF[xFitting.gender].code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]++;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xFitting.xF[xFitting.gender].code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
					
					setMapData(xPaymentAssistant[0].xF.code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]--;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xPaymentAssistant[0].xF.code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
				}
				break;
			case STAFF_SLOT_SHOPASSISTANT1_1F:
				if(xFitting.xF[xFitting.gender].code[ff] != xShopAssistant[0][0].xF.code[ff])
				{
					setMapData(xFitting.xF[xFitting.gender].code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]++;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xFitting.xF[xFitting.gender].code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
					
					setMapData(xShopAssistant[0][0].xF.code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]--;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xShopAssistant[0][0].xF.code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
				}
				break;
			case STAFF_SLOT_PAYMENTASSISTANT_2F:
				if(xFitting.xF[xFitting.gender].code[ff] != xPaymentAssistant[1].xF.code[ff])
				{
					setMapData(xFitting.xF[xFitting.gender].code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]++;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xFitting.xF[xFitting.gender].code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
					
					setMapData(xPaymentAssistant[1].xF.code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]--;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xPaymentAssistant[1].xF.code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
				}
				break;
			case STAFF_SLOT_SHOPASSISTANT1_2F:
				if(xFitting.xF[xFitting.gender].code[ff] != xShopAssistant[1][0].xF.code[ff])
				{
					setMapData(xFitting.xF[xFitting.gender].code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]++;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xFitting.xF[xFitting.gender].code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
					
					setMapData(xShopAssistant[1][0].xF.code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]--;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xShopAssistant[1][0].xF.code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
				}
				break;
			case STAFF_SLOT_PAYMENTASSISTANT_3F:
				if(xFitting.xF[xFitting.gender].code[ff] != xPaymentAssistant[2].xF.code[ff])
				{
					setMapData(xFitting.xF[xFitting.gender].code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]++;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xFitting.xF[xFitting.gender].code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
					
					setMapData(xPaymentAssistant[2].xF.code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]--;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xPaymentAssistant[2].xF.code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
				}
				break;
			case STAFF_SLOT_SHOPASSISTANT1_3F:
				if(xFitting.xF[xFitting.gender].code[ff] != xShopAssistant[2][0].xF.code[ff])
				{
					setMapData(xFitting.xF[xFitting.gender].code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]++;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xFitting.xF[xFitting.gender].code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
					
					setMapData(xShopAssistant[2][0].xF.code[ff]);
					xInventoryFashion.haveNum[xMap.type][xMap.listNum]--;
					///////////////////////////////////////////////////////////////////
					xEventQueueNet.code[0] = xShopAssistant[2][0].xF.code[ff];
					xEventQueueNet.haveNum[0] = xInventoryFashion.haveNum[xMap.type][xMap.listNum];
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
					///////////////////////////////////////////////////////////////////
				}
				break;
			}
		}
	}
}

void drawHanger(int x, int y,int interiorCode,int interiorNum,int floor)
{
	
	int type;
	int list;
	int rever;
	int totalSlot;
	
	int x3[3];
	int y3[3];
	
	rever = interiorCode < 0?1:0;
	interiorCode = interiorCode<0?-interiorCode:interiorCode;
	type = interiorCode/1000;
	list = interiorCode%1000;
	totalSlot = xObj.xObjData[type][list].slot;
	
	if(rever == 0)
	{
		x3[0] = 21-60+23;
		x3[1] = 37-60+23;
		x3[2] = 53-60+23;
		
		y3[0] = 25-65+37;
		y3[1] = 33-65+37;
		y3[2] = 41-65+37;
	}
	else
	{
		x3[0] = 21-60+23;
		x3[1] = 37-60+23;
		x3[2] = 53-60+23;
		
		y3[2] = 25-65+37;
		y3[1] = 33-65+37;
		y3[0] = 41-65+37;
	}
	
	
	
	switch(type)
	{
	case F_TYPE_ONEPIECE:
		y3[0] -=2;
		y3[1] -=2;
		y3[2] -=2;
		break;
	}
	
	
	if(interiorNum	!= DONT)
	{
	   
		if(rever == 0)
		{
			for(int i=0;i<3;i++)
			{
				if(xSellTableInfo[floor][interiorNum].xSlot[i].code != DONT)
					drawHangerItem(x+x3[i], y+y3[i],xSellTableInfo[floor][interiorNum].xSlot[i].code);
			}
		}
		else
		{
			for(int i=2;i>=0;i--)
			{
				if(xSellTableInfo[floor][interiorNum].xSlot[i].code != DONT)
					drawHangerItem(x+x3[i], y+y3[i],xSellTableInfo[floor][interiorNum].xSlot[i].code);
			}
		}
	}
	
	drawImage(&xObj.imgHangerLayer[list], x, y, 0, 0, xObj.imgHangerLayer[list].w, xObj.imgHangerLayer[list].h, VH);
}

void drawHangerItem(int x,int y,int itemCode)
{
	if(itemCode == DONT)
		return;
	int imgType = itemCode/1000;
	int imgList = itemCode%1000;
	
	
	//이미지존재여부 검사해서 없으면 로딩해주기
	loadFashionFImg(imgType,imgList);
	drawImage(&imgFittingItem[imgType][imgList], x, y, 0, 0, imgFittingItem[imgType][imgList].w, imgFittingItem[imgType][imgList].h, VH);
}

void drawAccessory(int x, int y,int interiorCode,int interiorNum,int floor)
{
	int type;
	int list;
	int rever;
	int totalSlot;
	int x3[3][3];
	int y3[3][3];
	
	rever = interiorCode < 0?1:0;
	interiorCode = interiorCode<0?-interiorCode:interiorCode;
	type = interiorCode/1000;
	list = interiorCode%1000;
	
	totalSlot = xObj.xObjData[type][list].slot;
	
	
	
	
	
	if(rever == 0)
	{
	
		x3[0][0] = 23-67+20;
		x3[0][1] = 43-67+20;
		x3[0][2] = 64-67+20;
		
		y3[0][0] = 43-200+5+xObj.img[type][list].h/2;
		y3[0][1] = 53-200+5+xObj.img[type][list].h/2;
		y3[0][2] = 63-200+5+xObj.img[type][list].h/2;
		
		x3[1][0] = 23-67+20;
		x3[1][1] = 43-67+20;
		x3[1][2] = 64-67+20;
		
		y3[1][0] = 79-200+5+xObj.img[type][list].h/2;
		y3[1][1] = 89-200+5+xObj.img[type][list].h/2;
		y3[1][2] = 99-200+5+xObj.img[type][list].h/2;
		
		x3[2][0] = 23-67+20;
		x3[2][1] = 43-67+20;
		x3[2][2] = 64-67+20;
		
		y3[2][0] = 113-200+5+xObj.img[type][list].h/2;
		y3[2][1] = 123-200+5+xObj.img[type][list].h/2;
		y3[2][2] = 133-200+5+xObj.img[type][list].h/2;
	}
	else
	{
		x3[0][0] = 23-65+20;
		x3[0][1] = 43-65+20;
		x3[0][2] = 64-65+20;
		
		y3[0][2] = 43-200+5+xObj.img[type][list].h/2;
		y3[0][1] = 53-200+5+xObj.img[type][list].h/2;
		y3[0][0] = 63-200+5+xObj.img[type][list].h/2;
		
		x3[1][0] = 23-65+20;
		x3[1][1] = 43-65+20;
		x3[1][2] = 64-65+20;
		
		y3[1][2] = 79-200+5+xObj.img[type][list].h/2;
		y3[1][1] = 89-200+5+xObj.img[type][list].h/2;
		y3[1][0] = 99-200+5+xObj.img[type][list].h/2;
		
		x3[2][0] = 23-65+20;
		x3[2][1] = 43-65+20;
		x3[2][2] = 64-65+20;
		
		y3[2][2] = 113-200+5+xObj.img[type][list].h/2;
		y3[2][1] = 123-200+5+xObj.img[type][list].h/2;
		y3[2][0] = 133-200+5+xObj.img[type][list].h/2;
	}
	
	if(interiorNum != DONT)
	{
		switch(totalSlot)
		{
		case 9:
			for(int i=2;i>=0;i--)
				drawHangerItem(x+x3[2][i], y+y3[2][i],xSellTableInfo[floor][interiorNum].xSlot[2].code);
			break;
		case 6:
			drawHangerItem(x+x3[2][2], y+y3[2][2],xSellTableInfo[floor][interiorNum].xSlot[5].code);
			drawHangerItem(x+x3[2][1], y+y3[2][1],xSellTableInfo[floor][interiorNum].xSlot[4].code);
			drawHangerItem(x+x3[2][0], y+y3[2][0],xSellTableInfo[floor][interiorNum].xSlot[3].code);
			break;
		case 3:
			for(int i=2;i>=0;i--)
				drawHangerItem(x+x3[2][i], y+y3[2][i],xSellTableInfo[floor][interiorNum].xSlot[i].code);
			break;
		}
	}
			
	drawImage(&xObj.imgAccessoryLayer[list][0], x, y, 0, 0, xObj.imgAccessoryLayer[list][0].w, xObj.imgAccessoryLayer[list][0].h, VH);
	
	if(interiorNum != DONT)
	{
		switch(totalSlot)
		{
		case 9:
			for(int i=2;i>=0;i--)
				drawHangerItem(x+x3[1][i], y+y3[1][i],xSellTableInfo[floor][interiorNum].xSlot[1].code);
			break;
		case 6:
			drawHangerItem(x+x3[1][2], y+y3[1][2],xSellTableInfo[floor][interiorNum].xSlot[2].code);
			drawHangerItem(x+x3[1][1], y+y3[1][1],xSellTableInfo[floor][interiorNum].xSlot[1].code);
			drawHangerItem(x+x3[1][0], y+y3[1][0],xSellTableInfo[floor][interiorNum].xSlot[0].code);
			break;
		}
	}
	
	drawImage(&xObj.imgAccessoryLayer[list][1], x, y, 0, 0, xObj.imgAccessoryLayer[list][1].w, xObj.imgAccessoryLayer[list][1].h, VH);
	if(interiorNum != DONT)
	{
		switch(totalSlot)
		{
		case 9:
			for(int i=2;i>=0;i--)
				drawHangerItem(x+x3[0][i], y+y3[0][i],xSellTableInfo[floor][interiorNum].xSlot[0].code);
			break;
		}
	}
	drawImage(&xObj.imgAccessoryLayer[list][2], x, y, 0, 0, xObj.imgAccessoryLayer[list][2].w, xObj.imgAccessoryLayer[list][2].h, VH);
	
}

void minigameFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_MINIGAME);
		for(int slot=0;slot<16;slot++)
			freeImg(&imgMiniGameIcon[slot]);
		
		for(int slot=0;slot<16;slot++)
		{
			switch(xMiniGame.xMiniGameSlot[slot].slotType)
			{
			case MINIGAME_TYPE_TREND:
				sprintf(strTempS, "minigametrendicon%d.png",xMiniGame.xMiniGameSlot[slot].slotImgNum);
				break;
			case MINIGAME_TYPE_TIRED:
				sprintf(strTempS, "minigamecandyicon%d.png",xMiniGame.xMiniGameSlot[slot].slotImgNum);
				break;
			case MINIGAME_TYPE_GOLD:
				sprintf(strTempS, "minigamegoldicon%d.png",xMiniGame.xMiniGameSlot[slot].slotImgNum);
				break;
			case MINIGAME_TYPE_LOOK:
				sprintf(strTempS, "minigamelookicon%d.png",xMiniGame.xMiniGameSlot[slot].slotImgNum);
				break;
			case MINIGAME_TYPE_MODEL:
				sprintf(strTempS, "minigamemodelicon%d.png",xMiniGame.xMiniGameSlot[slot].slotImgNum);
				break;
			case MINIGAME_TYPE_INTERIOR:
				sprintf(strTempS, "minigameinterioricon%d.png",xMiniGame.xMiniGameSlot[slot].slotImgNum);
				break;
			case MINIGAME_TYPE_FASHIONOPEN:
				sprintf(strTempS, "minigamefashionicon%d.png",xMiniGame.xMiniGameSlot[slot].slotImgNum);
				break;
			}
						
			switch(xMiniGame.xMiniGameSlot[slot].slotType)
			{
			case MINIGAME_TYPE_INTERIOR222:
				break;
			default:
				loadImg(strTempS, &imgMiniGameIcon[slot]);
				break;
			}
		}
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_MINIGAME].img);
		for(int slot=0;slot<16;slot++)
			freeImg(&imgMiniGameIcon[slot]);
	}
}

void initMiniGame()
{
	////////////캔디머신///////
	xWorldMap.state = WORLDMAP_STATE_MINIGAME;
	xMiniGame.nowTired = 0;
	xMiniGame.showTired = 0;
	xMiniGame.autoCnt = 0;
		
	XMINIGAMESLOT xMiniGameSlotTemp;
	
	int select0;
	int select1;
	for(int i=0;i<10;i++)
	{
		select0 = ranDom(0, xMiniGame.xDragScroll.totalNum-1);
		select1 = ranDom(0, xMiniGame.xDragScroll.totalNum-1);
		
		memcpy(&xMiniGameSlotTemp, &xMiniGame.xMiniGameSlot[select0], sizeof(XMINIGAMESLOT));
		memcpy(&xMiniGame.xMiniGameSlot[select0], &xMiniGame.xMiniGameSlot[select1], sizeof(XMINIGAMESLOT));
		memcpy(&xMiniGame.xMiniGameSlot[select1], &xMiniGameSlotTemp, sizeof(XMINIGAMESLOT));
	}
	
	minigameFreeLoad(TRUE);
		
	xMiniGame.mainAnyCnt = 0;	
	xMiniGame.inputCandyAnyCnt = DONT;
	xMiniGame.playCandyAnyCnt = DONT;
}
void drawMiniGame()
{
	int px = cx;
	int py = cy+15;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_15_MINIGAME_MENUTOUCH:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	drawBgFillRect();
	
	++xMiniGame.mainAnyCnt;
			
	
	//메인배경
	subTemp[10] = xMiniGame.mainAnyCnt;
	if(subTemp[10] >= 0)
	{
		switch(subTemp[10])
		{
		case 0:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 50;
			break;
		case 1:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 130;
			break;
		case 2:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 120;
			break;
		case 3:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 110;
			break;
		case 4:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 105;
			break;
		}
		drawPacker(imgMiniGameBg, px, py, 0, 0, imgW(imgMiniGameBg), imgH(imgMiniGameBg), VH);
		xGame.isReSizeDraw = FALSE;
	}
	
	
	subTemp[10] = xMiniGame.mainAnyCnt-5;
	if(subTemp[10] >= 0)
	{
		switch(subTemp[10])
		{
			case 0:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 50;
				break;
			case 1:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 130;
				break;
			case 2:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 120;
				break;
			case 3:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 110;
				break;
			case 4:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 105;
				break;
			default:
				xGame.isReSizeDraw = TRUE;
				switch(subTemp[10]%20)
			{
				case 0:
					xGame.reSize = 140;
					setAlpha(120);
					break;
				case 1:
				case 19:
					xGame.reSize = 136;
					setAlpha(130);
					break;
				case 2:
				case 18:
					xGame.reSize = 132;
					setAlpha(140);
					break;
				case 3:
				case 17:
					xGame.reSize = 128;
					setAlpha(150);
					break;
				case 4:
				case 16:
					xGame.reSize = 124;
					setAlpha(160);
					break;
				case 5:
				case 15:
					xGame.reSize = 120;
					setAlpha(170);
					break;
				case 6:
				case 14:
					xGame.reSize = 116;
					setAlpha(180);
					break;
				case 7:
				case 13:
					xGame.reSize = 112;
					setAlpha(195);
					break;
				case 8:
				case 12:
					xGame.reSize = 108;
					setAlpha(210);
					break;
				case 9:
				case 11:
					xGame.reSize = 104;
					setAlpha(225);
					break;
				case 10:
					xGame.reSize = 100;
					break;
					
			}
				break;
		}
		//뺑뺑이
		xGame.isRotate = TRUE;
		xGame.rotateNum = 360-((gameCnt%180)*2);
		drawPacker(imgEff3, px-70, py-100, 0, 0, imgW(imgEff3), imgH(imgEff3), VH);
		setAlpha(ALPHA_MAX);
		xGame.isRotate = FALSE;
		xGame.isReSizeDraw = FALSE;
	}

	
	subTemp[10] = xMiniGame.mainAnyCnt-5;
	if(subTemp[10] >= 0)
	{
		switch(subTemp[10])
		{
			case 0:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 50;
				break;
			case 1:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 130;
				break;
			case 2:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 120;
				break;
			case 3:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 110;
				break;
			case 4:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 105;
				break;
		}
		
		//문구
		drawPacker(imgMiniGameObj4, px, py-154, 0, 0, imgW(imgMiniGameObj4), imgH(imgMiniGameObj4), VH);
		
		
		xGame.isReSizeDraw = FALSE;
		
	}
	
	subTemp[10] = xMiniGame.mainAnyCnt-6;
	if(subTemp[10] < 0)
		return;
	
		
	
	//상세항목
	subTemp[XPOS] = px-45;
	subTemp[YPOS] = py+115;
	
	xMiniGame.xDragScroll.posGab = 152;
	
	int iMax = xMiniGame.xDragScroll.totalNum;
	
	
	
	switch(xMiniGame.state)
	{
	case MINIGAME_STATE_MAIN:
		if(xMiniGame.xDragScroll.touchXpos == DONT)
		{
			if(++xMiniGame.autoCnt > 30)
			{
				xMiniGame.autoCnt = 0;
				xMiniGame.xDragScroll.speed = -76;
			}
		}
		break;
	case MINIGAME_STATE_PLAY:
        while (true)
        {
            ++xMiniGame.anyCnt;
            if(xMiniGame.anyCnt == 1)
            {
                xMiniGame.xDragScroll.pos = 0;
                xMiniGame.xDragScroll.selectNum = xMiniGame.selectSlot;
                xMiniGame.xDragScroll.speed = 0;
            }
            else
            {
                if(-90+xMiniGame.anyCnt <= 0)
                    xMiniGame.xDragScroll.speed = -155+xMiniGame.anyCnt;
                
                if(xMiniGame.anyCnt == 104-12)
                    setEff(subTemp[XPOS]-25, subTemp[YPOS]-30,180);
                if(xMiniGame.anyCnt == 104-11)
                    setEff(subTemp[XPOS]+30, subTemp[YPOS]+25,180);
                if(xMiniGame.anyCnt == 104-10)
                    setEff(subTemp[XPOS]+30, subTemp[YPOS]-25,180);
                if(xMiniGame.anyCnt == 104-9)
                {
                    setEff(subTemp[XPOS]-30, subTemp[YPOS]+25,180);
                    setEff(subTemp[XPOS], subTemp[YPOS],180);
                }
                
                if(xMiniGame.anyCnt > 104)
                {
                    playSnd(SND_MINIGAME_RESULT);
                    xMiniGame.state = MINIGAME_STATE_RESULT;
                    xMiniGame.playCandyAnyCnt = DONT;
                    xMiniGame.nowTired = 0;
                    xMiniGame.isSkip = false;
                    
                    if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
                    {
                        switch(xQuestTuto.nowNum)
                        {
                            case TUTO_15_MINIGAME_START:
                                xQuestTuto.isTutoClean = TRUE;
                                break;
                        }
                    }
                }
            }
            
            if(xMiniGame.isSkip == true)
                dragScrollPrc(&xMiniGame.xDragScroll,0,TRUE);
            
            if(xMiniGame.isSkip == false)
                break;
        }
		break;
	}
	dragScrollPrc(&xMiniGame.xDragScroll,0,TRUE);
	
	int pos;
	gSetClip(true,subTemp[XPOS]-160, 0, 320, lcdH);
	int slot;
	for(int i=-3;i<3;i++)
	{
		slot = xMiniGame.xDragScroll.selectNum+i;
		
		if(slot < 0)
			slot = iMax + slot;
		else if(slot >= iMax)
			slot = slot-iMax;
		
		pos = xMiniGame.xDragScroll.pos+(xMiniGame.xDragScroll.posGab*i);
		
		switch(xMiniGame.xMiniGameSlot[slot].slotType)
		{
		case MINIGAME_TYPE_FASHIONOPEN:
		case MINIGAME_TYPE_INTERIOR222:
			drawPacker(imgMiniGameObj6, subTemp[XPOS]+pos,subTemp[YPOS], 0, 0, imgW(imgMiniGameObj6), imgH(imgMiniGameObj6), VH);
			break;
		default:
			drawPacker(imgMiniGameObj7, subTemp[XPOS]+pos,subTemp[YPOS], 0, 0, imgW(imgMiniGameObj7), imgH(imgMiniGameObj7), VH);
			break;
		}
		
		switch(xMiniGame.xMiniGameSlot[slot].slotType)
		{
		case MINIGAME_TYPE_INTERIOR222:
			setMapData(xMiniGame.xMiniGameSlot[slot].slotCode.oriData);
			setDrawObjCenter(xMap.type,xMap.listNum);
			if(xDrawObjCenter.reSize != 100)
			{
				xGame.fgameScaleCx =subTemp[XPOS]+pos;
				xGame.fgameScaleCy =lcdH-(subTemp[YPOS]-15);
				xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
			}
			drawObj(subTemp[XPOS]+pos+xDrawObjCenter.w, subTemp[YPOS]-15+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
			xGame.fgameScale = 1.0f;
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			break;
		default:
			drawImage(&imgMiniGameIcon[slot], subTemp[XPOS]+pos, subTemp[YPOS]-15, 0, 0, imgMiniGameIcon[slot].w, imgMiniGameIcon[slot].h, VH);
			break;
		}
		
		switch(xMiniGame.xMiniGameSlot[slot].slotType)
		{
		case MINIGAME_TYPE_TREND:
			sprintf(strTempS,"유행발생");
			break;
		case MINIGAME_TYPE_TIRED:
			sprintf(strTempS,"%d캔디",xMiniGame.xMiniGameSlot[slot].slotCode.oriData);
			break;
		case MINIGAME_TYPE_LOOK:
			sprintf(strTempS,"%d룩",xMiniGame.xMiniGameSlot[slot].slotCode.oriData);
			break;
		case MINIGAME_TYPE_GOLD:
			setCommaNum(strTempB, xMiniGame.xMiniGameSlot[slot].slotCode.oriData);
			sprintf(strTempS,"%s골드",strTempB);
			break;
		case MINIGAME_TYPE_MODEL:
			if(xMiniGame.xMiniGameSlot[slot].slotCode.oriData == 0)
				sprintf(strTempS,"캐스팅권(골드)");
			else
				sprintf(strTempS,"캐스팅권(룩)");
			break;
		case MINIGAME_TYPE_INTERIOR:
			sprintf(strTempS,"가구획득권");
			break;
		case MINIGAME_TYPE_INTERIOR222:
			sprintf(strTempS,"%s",xObj.xObjData[xMiniGame.xMiniGameSlot[slot].slotCode.oriData/1000][xMiniGame.xMiniGameSlot[slot].slotCode.oriData%1000].strName);
			break;
		case MINIGAME_TYPE_FASHIONOPEN:
			sprintf(strTempS,"눈의여왕세트");
			break;
		}
		gDrawStringBold(subTemp[XPOS]+pos, subTemp[YPOS]+72, strTempS, VH,97,255,227,44,27,26);
	}

	gSetClip(false,0, 0, lcdW, lcdH);
	drawPacker(imgMiniGameObj1, subTemp[XPOS],subTemp[YPOS], 0, 0, imgW(imgMiniGameObj1), imgH(imgMiniGameObj1), VH);
		
	if(xMiniGame.state != MINIGAME_STATE_MAIN)
	{
		if((gameCnt/3)%2 == 0)
			drawPacker(imgMiniGameObj5, subTemp[XPOS],subTemp[YPOS], 0, 0, imgW(imgMiniGameObj5), imgH(imgMiniGameObj5), VH);
	}
	
	//게이지
	if(xMiniGame.showTired < xMiniGame.nowTired * 100)
	{
		xMiniGame.showTired++;
		xMiniGame.showTired += (xMiniGame.nowTired * 100 - xMiniGame.showTired)/2;
	}
	if(xMiniGame.showTired > xMiniGame.nowTired * 100)
		xMiniGame.showTired = xMiniGame.nowTired * 100;
	subTemp[WPOS] = imgH(imgMiniGameObj0) * xMiniGame.showTired / (xMiniGame.userTired.oriData*100);
	subTemp[XPOS] = px+146;
	subTemp[YPOS] = py+22;
	
	switch(xMiniGame.gageAnyCnt++)
	{
	case 0:
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_WHITEALPHA;
		xGame.blendNum = ALPHA_MAX;
		break;
	case 1:
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_WHITEALPHA;
		xGame.blendNum = 150;
		break;
	case 2:
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_WHITEALPHA;
		xGame.blendNum = 100;
		break;
	case 3:
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_WHITEALPHA;
		xGame.blendNum = 50;
		break;
	default:
		xMiniGame.gageAnyCnt = 10;
		break;
	}
	
	drawPacker(imgMiniGameObj0, subTemp[XPOS],subTemp[YPOS]+imgH(imgMiniGameObj0)-subTemp[WPOS], 0, imgH(imgMiniGameObj0)-subTemp[WPOS], imgW(imgMiniGameObj0), subTemp[WPOS], TL);
	xGame.isBlend = FALSE;
	/*
	gSetColor(255, 255, 255);
	setFontSize(8);
	sprintf(strTempS, "%d/%d",xMiniGame.nowTired,USETIRED);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+5, strTempS, VH);
	setFontSize(11);
	*/
	
	//버튼(캔디넣기)
	subTemp[XPOS] = px+178;
	subTemp[YPOS] = py+76;
	
	
	
	int inputCandyImgNum = 0;
	
	
	
	if(xMiniGame.inputCandyAnyCnt != DONT)
	{
		if(++xMiniGame.inputCandyAnyCnt > 5)
		{
			playSnd(SND_MINIGAME_INPUTCANDY);
			xMiniGame.gageAnyCnt = 0;
			xMiniGame.inputCandyAnyCnt = DONT;
		}
		
		switch(xMiniGame.inputCandyAnyCnt)
		{
		case DONT:
			inputCandyImgNum = 0;
			break;
		default:
			inputCandyImgNum = xMiniGame.inputCandyAnyCnt;
			break;
		}
	}
	
	drawPacker(imgMiniGameObj2, subTemp[XPOS]+61, subTemp[YPOS]-61, 0, imgH(imgMiniGameObj2)/6 * inputCandyImgNum, imgW(imgMiniGameObj2), imgH(imgMiniGameObj2)/6, VH);
	if(inputCandyImgNum == 0 || inputCandyImgNum == 1)
		drawNumPacker(imgWorldMapTired2, subTemp[XPOS]+61+36, subTemp[YPOS]-61+30, (xMiniGame.userTired.oriData-xModelSkill.bonusPer[MODELSKILL_TYPE_MINIGAME_CANDY]), -3, VH);

	
	
	
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xMiniGame.xTouchBtnInput.xPos, xMiniGame.xTouchBtnInput.yPos, xMiniGame.xTouchBtnInput.wPos, xMiniGame.xTouchBtnInput.hPos);
	setAlpha(ALPHA_MAX);
	 */

	
	//버튼(아이템뽑기)
	subTemp[XPOS] = px+178;
	subTemp[YPOS] = py+184;
	
	if(xMiniGame.state == MINIGAME_STATE_PLAY)
	{
		switch(++xMiniGame.playCandyAnyCnt2)
		{
		case 1:
		case 13:
			xGame.isRotate = TRUE;
			xGame.rotateNum = -45;
			break;
		case 2:
		case 12:
			xGame.isRotate = TRUE;
			xGame.rotateNum = -90;
			break;
		case 3:
		case 11:
			xGame.isRotate = TRUE;
			xGame.rotateNum = -135;
			break;
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
			xGame.isRotate = TRUE;
			xGame.rotateNum = -180;
			break;
		}
	}
	else
		xMiniGame.playCandyAnyCnt2 = 0;
		
	
	
	
	if(xMiniGame.userTired.oriData == xMiniGame.nowTired)
	{
		if(++xMiniGame.playCandyAnyCnt > 20)
		{
			xMiniGame.playCandyAnyCnt = 20;
		}
	}
		
	
	drawPacker(imgMiniGameBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgMiniGameBtn), imgH(imgMiniGameBtn), VH);
	xGame.isRotate = FALSE;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_15_MINIGAME_START:
			if(xMiniGame.state == MINIGAME_STATE_MAIN)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		}
	}
	
	xMiniGame.xTouchBtnPlay.wPos = imgW(imgMiniGameBtn)+40;
	xMiniGame.xTouchBtnPlay.hPos = imgH(imgMiniGameBtn)+140;
	xMiniGame.xTouchBtnPlay.xPos = subTemp[XPOS] - xMiniGame.xTouchBtnPlay.wPos/2;
	xMiniGame.xTouchBtnPlay.yPos = subTemp[YPOS]-60 - xMiniGame.xTouchBtnPlay.hPos/2;
	
	/*
	
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xMiniGame.xTouchBtnPlay.xPos, xMiniGame.xTouchBtnPlay.yPos, xMiniGame.xTouchBtnPlay.wPos, xMiniGame.xTouchBtnPlay.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	
	
	//나가기
	subTemp[XPOS] = px+225;
	subTemp[YPOS] = py-270;

	xTouchClr.wPos = 120;
	xTouchClr.hPos = 120;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_15_RESULT:
			if(xMiniGame.state == MINIGAME_STATE_MAIN)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		}
	}
		
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
	/*
 	gSetColor(255, 255, 255);
 	fillRect(px-50, py-50, 100, 100);
 	gSetColor(0, 0, 0);
 	sprintf(strTempS, "카운트:%d",xMiniGame.playCount);
 	gDrawString(px, py-15, strTempS, VH);
 	sprintf(strTempS, "확률단계:%d",xMiniGame.perSlotNum);
 	gDrawString(px, py+15, strTempS, VH);
	 */
}

void drawMiniGameResultSub()
{
	int px = cx;
	int py = cy;
	
	switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotType)
	{
	case MINIGAME_TYPE_MODEL:
			drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);

			setFontSize(14);
			gDrawStringBold(px, py-116, "슬롯 추가", VH, 97, 255, 227, 44, 27, 26);
			setFontSize(11);
			
			gSetColor(44, 27, 26);
			gDrawString(px, py-16, "구매 시 보유 슬롯이 5개가 추가 됩니다.\n슬롯을 구매하시겠습니까?", VH);
						
			drawPacker(imgInfoBar1, px,py+70, 0, 0, imgW(imgInfoBar1), imgH(imgInfoBar1), VH);
			drawIcon(px-82,py+70, ICON_TYPE_LOOK);
			gSetColor(255, 255, 255);
			gDrawString(px+82,py+70, "10", VR);
			
			drawBtn(px,py+156,BTN_YESNO);
		break;

	}
}

void drawMiniGameResult()
{
	int px = cx;
	int py = cy;
	
	drawPacker(imgQuestResult0, px, py, 0, 0, imgW(imgQuestResult0), imgH(imgQuestResult0), VH);
	setFontSize(14);
	gDrawStringBold(px+4, py-189, "보상 아이템", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	drawPacker(imgQuestGiftIcon, px-70, py-190, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
	
	
	
	switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotType)
	{
	case MINIGAME_TYPE_TREND:
		drawImage(&imgMiniGameIcon[xMiniGame.selectSlot], px, py-60, 0, 0, imgMiniGameIcon[xMiniGame.selectSlot].w, imgMiniGameIcon[xMiniGame.selectSlot].h, VH);
		setMapData(xMiniGame.resultCode);
		sprintf(strTempS, "유행 발생");
		break;
	case MINIGAME_TYPE_TIRED:
		drawImage(&imgMiniGameIcon[xMiniGame.selectSlot], px, py-60, 0, 0, imgMiniGameIcon[xMiniGame.selectSlot].w, imgMiniGameIcon[xMiniGame.selectSlot].h, VH);
		sprintf(strTempS,"%d캔디",xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
		break;
	case MINIGAME_TYPE_LOOK:
		drawImage(&imgMiniGameIcon[xMiniGame.selectSlot], px, py-60, 0, 0, imgMiniGameIcon[xMiniGame.selectSlot].w, imgMiniGameIcon[xMiniGame.selectSlot].h, VH);
		sprintf(strTempS,"%d룩",xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
		break;
	case MINIGAME_TYPE_GOLD:
		drawImage(&imgMiniGameIcon[xMiniGame.selectSlot], px, py-60, 0, 0, imgMiniGameIcon[xMiniGame.selectSlot].w, imgMiniGameIcon[xMiniGame.selectSlot].h, VH);
		setCommaNum(strTempB, xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
		sprintf(strTempS,"%s골드",strTempB);
		break;
	case MINIGAME_TYPE_MODEL:
		drawImage(&imgMiniGameIcon[xMiniGame.selectSlot], px, py-60, 0, 0, imgMiniGameIcon[xMiniGame.selectSlot].w, imgMiniGameIcon[xMiniGame.selectSlot].h, VH);
		if(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData == 0)
			sprintf(strTempS,"캐스팅권(골드)");
		else
			sprintf(strTempS,"캐스팅권(룩)");
		break;
	case MINIGAME_TYPE_INTERIOR:
	case MINIGAME_TYPE_INTERIOR222:
		//획득한 가구 그리기
		setMapData(xMiniGame.resultCode);
		
		setDrawObjCenter(xMap.type,xMap.listNum);
		if(xDrawObjCenter.reSize != 100)
		{
			xGame.fgameScaleCx =px;
			xGame.fgameScaleCy =lcdH-(py-60);
			xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
		}
			drawObj(px+xDrawObjCenter.w, py-60+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
		xGame.fgameScale = 1.0f;
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
		
		sprintf(strTempS, "[%s]획득",xObj.xObjData[xMap.type][xMap.listNum].strName);
		break;
	case MINIGAME_TYPE_FASHIONOPEN:
		setMapData(xMiniGame.resultCode);
		//획득한 의상
		gSetClip(true,0, py-60-95, lcdW, 190);
		drawFittingF(px, py-60, xMiniGame.resultCode, 75);
		gSetClip(false,0, 0, lcdW, lcdH);
		sprintf(strTempS, "[%s]",xFashionData[xMap.type][xMap.listNum].strName);
		break;
	}
	
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px, py+74, strTempS, VH);
	setFontSize(11);
	
	
	drawPacker(imgQuestResult1, px, py+169, 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	setFontSize(14);
	gDrawStringBold(px-2, py+169-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = px-xTouchOk.wPos/2;
	xTouchOk.yPos = py+169-xTouchOk.hPos/2;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_15_RESULT:
			xTutoInfo.x[xTutoInfo.totalNum] = px;
			xTutoInfo.y[xTutoInfo.totalNum] = py+169;
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
}

void setMiniGamePlay()
{
    xMiniGame.isSkip = false;
	setQuest(14, 1, DONT);
		
	setTired(-((xMiniGame.userTired.oriData-xModelSkill.bonusPer[MODELSKILL_TYPE_MINIGAME_CANDY])));
	setFiveRocksCustom("재화","캔디소모","캔디머신","NULL",1);
	
	 xMiniGame.perSlotNum = 0;
	for(int i=0;i<5;i++)
	{
		if(xMiniGame.playCount <= xMiniGame.xMiniGameSlot[0].perCount[i])
		{
		 xMiniGame.perSlotNum = i;
		 break;
		}
	}
	
		
		
	xMiniGame.state = MINIGAME_STATE_PLAY;
	xMiniGame.anyCnt = 0;

	int ranDomTemp;
	int perTemp = 0;
	
	ranDomTemp = ranDom(0, 1000-1);
	
	//printf("랜덤값>>%d\n",ranDomTemp);
	
			
	for(int i=0;i<xMiniGame.xDragScroll.totalNum;i++)
	{
		perTemp += xMiniGame.xMiniGameSlot[i].per[xMiniGame.perSlotNum];
				
        
        
		if(xMiniGame.xMiniGameSlot[i].slotType == MINIGAME_TYPE_FASHIONOPEN)
		{
			if(xModelSkill.bonusPer[MODELSKILL_TYPE_MINIGAME_SNOW] > 0)
			{
				perTemp -= xMiniGame.xMiniGameSlot[i].per[xMiniGame.perSlotNum];
				for(int rere=0;rere<xModelSkill.bonusPer[MODELSKILL_TYPE_MINIGAME_SNOW];rere++)
				{
					perTemp += xMiniGame.xMiniGameSlot[i].per[xMiniGame.perSlotNum];
				}
			}
		}
		
		
		//printf("perTemp>>%d\n",perTemp);
		//printf("xMiniGame.xMiniGameSlot[%d].per[%d]>>%d\n",i,xMiniGame.perSlotNum,xMiniGame.xMiniGameSlot[i].per[xMiniGame.perSlotNum]);
				
		if(ranDomTemp < perTemp)
		{
			xMiniGame.selectSlot = i;
			break;
		}
        
        
        
        
        if(xMiniGame.xMiniGameSlot[i].slotType == MINIGAME_TYPE_FASHIONOPEN)
        {
            if(xAmulet.buff[JEWELBUFF_TYPE_MINIGAME] > 0)
            {
                if(ranDom(0, 10000-1) < xAmulet.buff[JEWELBUFF_TYPE_MINIGAME])
                {
                    xMiniGame.selectSlot = i;
                    break;
                }
            }
        }
	}
    
	xMiniGame.playCount += xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].count;
	if(xMiniGame.playCount<0)
		xMiniGame.playCount = 0;
		
	M_Boolean isErr=FALSE;
	
	int totalSlot=0;
	int slot[2048];
	int totalSlotPoint=0;
	int slotPoint[2048];
	int totalSlotCash=0;
	int slotCash[2048];
			
	switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotType)
	{
	case MINIGAME_TYPE_TREND:
		if(xLock.isLock[LOCK_TYPE_TREND] == TRUE)
		{
			isErr = TRUE;
		}
		else
		{
			setTrendTemp(ranDom(0,1),0);
			xMiniGame.resultCode = xTrend.itemCodeTemp;
		}
		setFiveRocksCustom("캔디머신","플레이수","유행발생","NULL",1);
		break;
	case MINIGAME_TYPE_TIRED:
		sprintf(xRocks.strTemp,"캔디%d개",xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
		setFiveRocksCustom("캔디머신","플레이수",xRocks.strTemp,"NULL",1);
		break;
	case MINIGAME_TYPE_LOOK:
		sprintf(xRocks.strTemp,"룩%d개",xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
		setFiveRocksCustom("캔디머신","플레이수",xRocks.strTemp,"NULL",1);
		break;
	case MINIGAME_TYPE_MODEL:
		if(xLock.isLock[LOCK_TYPE_MODEL] == TRUE)
		{
			isErr = TRUE;
		}
		else
		{
			
			if(xModel.totalInventoryModel >= xModel.totalInventoryModelMax)
			{
				isErr = TRUE;
			}
			else if(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData == 0)
			{
				switch(xModelData[xModel.newModelCode].grade)
				{
				case 0:	setFiveRocksCustom("캔디머신","플레이수","일반캐스팅권","C급",1);break;
				case 1:	setFiveRocksCustom("캔디머신","플레이수","일반캐스팅권","B급",1);break;
				case 2:	setFiveRocksCustom("캔디머신","플레이수","일반캐스팅권","A급",1);break;
				case 3:	setFiveRocksCustom("캔디머신","플레이수","일반캐스팅권","S급",1);break;
				}
			}
			else
			{
				switch(xModelData[xModel.newModelCode].grade)
				{
				case 0:	setFiveRocksCustom("캔디머신","플레이수","고급캐스팅권","C급",1);break;
				case 1:	setFiveRocksCustom("캔디머신","플레이수","고급캐스팅권","B급",1);break;
				case 2:	setFiveRocksCustom("캔디머신","플레이수","고급캐스팅권","A급",1);break;
				case 3:	setFiveRocksCustom("캔디머신","플레이수","고급캐스팅권","S급",1);break;
				}
			}
		}
		break;
	case MINIGAME_TYPE_INTERIOR:
		totalSlot = 0;
		totalSlotCash = 0;
		for(int z=0;z<xInterior.totalNum;z++)
		{
			for(int i=0;i<xInterior.totalSlot[z];i++)
			{
				setMapData(xInterior.xSlot[z][i].codeTeam[0]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				switch(xMap.type)
				{
				case INTERIOR_TYPE_OBJ:
				case INTERIOR_TYPE_OBJFLOOR:
				case INTERIOR_TYPE_WALLITEM:
					if(xObj.xObjData[xMap.type][xMap.listNum].lv <= xSaveTemp.lv.oriData)
					{
						slot[totalSlot++] = (xMap.type*1000)+xMap.listNum;
						if(xObj.xObjData[xMap.type][xMap.listNum].priceType == 0)
							slotPoint[totalSlotPoint++] = (xMap.type*1000)+xMap.listNum;
						else
							slotCash[totalSlotCash++] = (xMap.type*1000)+xMap.listNum;
					}
					break;
				}
			}
		}
		
		if(ranDom(0, 100) < 80)
		{
			if(totalSlotPoint > 0)
				xMiniGame.resultCode = slotPoint[ranDom(0,totalSlotPoint-1)];
			else if(totalSlot > 0)
				xMiniGame.resultCode = slot[ranDom(0,totalSlot-1)];
			else
				isErr = TRUE;
		}
		else
		{
			if(totalSlotCash > 0)
				xMiniGame.resultCode = slotCash[ranDom(0,totalSlotCash-1)];
			else if(totalSlot > 0)
				xMiniGame.resultCode = slot[ranDom(0,totalSlot-1)];
			else
				isErr = TRUE;
		}
			
			
			
		if(isErr == FALSE)
			setFiveRocksCustom("캔디머신","플레이수","랜덤가구",xObj.xObjData[xMiniGame.resultCode/1000][xMiniGame.resultCode%1000].strName,1);
			
		break;
	case MINIGAME_TYPE_INTERIOR222:
		xMiniGame.resultCode = xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData;
		setFiveRocksCustom("캔디머신","플레이수","지정가구",xObj.xObjData[xMiniGame.resultCode/1000][xMiniGame.resultCode%1000].strName,1);
		break;
	case MINIGAME_TYPE_FASHIONOPEN:
		totalSlot = 0;
		for(int i=0;i<FASHIONDATATYPEMAX;i++)
		{
			for(int j=0;j<FASHIONDATAMAX;j++)
			{
				if(xInventoryFashion.isOpen[i][j] == FALSE  && xFashionData[i][j].isStaff == 2 && xSaveTemp.lv.oriData >= xFashionData[i][j].lv)
				{
					slot[totalSlot++] = (i*1000)+j;
				}
			}
		}
		
		if(totalSlot == 0)
			isErr = TRUE;
		else
			xMiniGame.resultCode = slot[ranDom(0,totalSlot-1)];
		setFiveRocksCustom("캔디머신","플레이수","한정의상",xObj.xObjData[xMiniGame.resultCode/1000][xMiniGame.resultCode%1000].strName,1);
		break;
	case MINIGAME_TYPE_GOLD:
		sprintf(xRocks.strTemp,"골드%d개",xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData);
		setFiveRocksCustom("캔디머신","플레이수",xRocks.strTemp,"NULL",1);
		break;
	}
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_15_MINIGAME_START:
			isErr = TRUE;
			break;
		}
	}
	
	if(isErr == TRUE)
	{
		for(int i=0;i<xMiniGame.xDragScroll.totalNum;i++)
		{
			
			if(xMiniGame.xMiniGameSlot[i].slotType == MINIGAME_TYPE_TIRED)
			{
				xMiniGame.selectSlot = i;
				break;
			}
		}
	}
		
	////////////////////////////////////////////////////////////
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
	////////////////////////////////////////////////////////////
	////////////////////////////////////////////
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETETC, FALSE);
	///////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////
	xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 2;//0:골드,1프리미엄,2캔디머쉰,3직원의상,모델뽑기
	xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;//아이템종류(0~5)직원의상 구매시
	xEventQueueNet.code[xEventQueueNet.totalNum] = 1;
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BUYGOLD, TRUE);
	///////////////////////////////////////////////////////////////////
}


void setEff(int x,int y,int reSize)
{
	for(int i=0;i<EFFMAX;i++)
	{
		if(xEff[i].state == EFF_STATE_DONT)
		{
			xEff[i].state = EFF_STATE_PLAY;
			xEff[i].anyCnt = 0;
			xEff[i].x = x;
			xEff[i].y = y;
			xEff[i].reSize = reSize;
			break;
		}
	}
}

void drawEff()
{
	
	for(int i=0;i<EFFMAX;i++)
	{
		if(xEff[i].state == EFF_STATE_PLAY)
		{
			xGame.isBlend = TRUE;
			xGame.blendType = BLEND_ADDP;
			if(xEff[i].reSize !=100)
			{
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = xEff[i].reSize;
			}
			drawPacker(imgEff0, xEff[i].x, xEff[i].y, 0, imgH(imgEff0)/10*xEff[i].anyCnt, imgW(imgEff0), imgH(imgEff0)/10, VH);
			xGame.isReSizeDraw = FALSE;
			xGame.isBlend = FALSE;
			
			if(++xEff[i].anyCnt >= 10)
				xEff[i].state = EFF_STATE_DONT;
		}
	}
}



void loadImgObj(int type,int listNum)
{
	if(xObj.img[type][listNum].texture == NULL)
	{
		
		if(xWorldMap.state != WORLDMAP_STATE_INTERIORSHOP)
			xloadImg.isLoad = FALSE;
		
		if(xloadImg.isLoad == TRUE)
		{
		}
		else
		{
			xloadImg.isLoad = TRUE;
			sprintf(strTempS, "tile%d_%d.png",type,listNum);
			if(type == INTERIOR_TYPE_FLOORTILE || type == INTERIOR_TYPE_WALLTILE)		//바닥
				xGame.isUnAnti = TRUE;
			loadImgDocuments(strTempS, &xObj.img[type][listNum]);
			xGame.isUnAnti = FALSE;
			
			
			
			
			switch(type)
			{
				case INTERIOR_TYPE_WALLTILE:		//벽지일 경우 추가 로딩
					sprintf(strTempS, "tile%d_%db.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgWallTop[listNum]);
					break;
				case INTERIOR_TYPE_FITTINGROOM:		//피팅룸일경우 열리는경우까지 로딩해준다
					sprintf(strTempS, "tile%d_%db.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgFittingRoomOpen[listNum]);
					break;
				case INTERIOR_TYPE_SHOWWINDOW:		//쇼윈도우는 뚜껑
					sprintf(strTempS, "tile%d_%db.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgShowWindowTop[listNum]);
					break;
				case INTERIOR_TYPE_HANGER:			//헹거일경우 추가이미지 로딩해준다
					sprintf(strTempS, "tile%d_%db.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgHangerLayer[listNum]);
					break;
				case INTERIOR_TYPE_ACCESSORY:
					sprintf(strTempS, "tile%d_%d_1.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgAccessoryLayer[listNum][0]);
					sprintf(strTempS, "tile%d_%d_2.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgAccessoryLayer[listNum][1]);
					sprintf(strTempS, "tile%d_%d_3.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgAccessoryLayer[listNum][2]);
					break;
				case INTERIOR_TYPE_DOOR:
					sprintf(strTempS, "tile%d_%db.png",type,listNum);
					loadImgDocuments(strTempS, &xObj.imgDoorOpen[listNum]);
					break;
			}
		}
	}
}




void drawObj(int x,int y,int type,int listNum,int rever,M_Boolean isFrame,int mapX,int mapY)
{

	if(xObj.img[type][listNum].texture == NULL)
	{
		loadImgObj(type,listNum);
		xGame.isRotate = TRUE;
		xGame.rotateNum = 360-(gameCnt%120)*3;
		drawPacker(imgLoadingIcon0, x, y, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
		xGame.isRotate = FALSE;
	}
	else
	{
		drawImage(&xObj.img[type][listNum], x+xObj.xObjData[type][listNum].x[rever], y+xObj.xObjData[type][listNum].y[rever], 0, 0, xObj.img[type][listNum].w, xObj.img[type][listNum].h, VH);
		
		if(xWorldMap.state == WORLDMAP_STATE_INTERIORSHOP)
		{
			switch(type)
			{
			case INTERIOR_TYPE_FLOORTILE:
				drawPacker(imgTileFrame0, x+xObj.xObjData[type][listNum].x[rever], y+xObj.xObjData[type][listNum].y[rever], 0, 0, imgW(imgTileFrame0), imgH(imgTileFrame0), VH);
				break;
			case INTERIOR_TYPE_WALLTILE:
				drawPacker(imgTileFrame1, x+xObj.xObjData[type][listNum].x[rever], y+xObj.xObjData[type][listNum].y[rever], 0, 0, imgW(imgTileFrame1), imgH(imgTileFrame1), VH);
				break;
			}
		}
		
		if(type == INTERIOR_TYPE_WALLTILE)
		{
			if(xWorldMap.state == WORLDMAP_STATE_INTERIOR)
			{
				if(xInterior.xBuildSlot.codeTeam[0] != 0)
				{
					int buildItemType = xInterior.xBuildSlot.codeTeam[0]/1000;
					int buildItemListNum = xInterior.xBuildSlot.codeTeam[0]%1000;
					int buildItemRever = xInterior.xBuildSlot.codeTeam[0] < 0?1:0;
					
					if(buildItemType < 0)
						buildItemType = -buildItemType;
					
					if(buildItemListNum < 0)
						buildItemListNum = -buildItemListNum;
					
					//0해당사항아님
					//1성공
					//2실패
					int checkState = 0;
					switch(buildItemType)
					{
					case INTERIOR_TYPE_WALLITEM:
					case INTERIOR_TYPE_SHOWWINDOW:
					case INTERIOR_TYPE_DOOR:
						if(xInterior.buildMapTileYpos -xMap.shopPointY+1 == 0)		//x좌표설치중
						{
							for(int w=0;w<xObj.xObjData[buildItemType][buildItemListNum].w[buildItemRever];w++)
							{
								if((mapX+(5*xMap.nowFloor)) == xInterior.buildMapTileXpos+w)
								{
									isSubTemp[0] = checkBuildPos(buildItemType,buildItemListNum,buildItemRever);
									
									
									if(isSubTemp[0] == FALSE)
										checkState = 1;
									else
										checkState = 2;
									/*
									if(xMap.interiorDataWall[xMap.nowFloor][0][(xInterior.buildMapTileXpos+w-xMap.shopPointX)] == TRUE)
										checkState = 2;
									else
										checkState = 1;
									*/
								}
							}
						}
						else
						{
							for(int h=0;h<xObj.xObjData[buildItemType][buildItemListNum].h[buildItemRever];h++)
							{
								if(mapY+(5*xMap.nowFloor) == xInterior.buildMapTileYpos+h)
								{
									isSubTemp[0] = checkBuildPos(buildItemType,buildItemListNum,buildItemRever);
									if(isSubTemp[0] == FALSE)
										checkState = 1;
									else
										checkState = 2;
									/*
									if(xMap.interiorDataWall[xMap.nowFloor][1][(xInterior.buildMapTileYpos+h-xMap.shopPointY)] == TRUE)
										checkState = 2;
									else
										checkState = 1;
									*/
								}
							}
						}
							
						switch(checkState)
						{
						case 0:	//0해당사항아님
							break;
						case 1:	//1성공
							drawPacker(imgBuildTileOk1, x+xObj.xObjData[type][listNum].x[rever], y+xObj.xObjData[type][listNum].y[rever], 0, 0, imgW(imgBuildTileOk1), imgH(imgBuildTileOk1), VH);
							break;
						case 2:	//2실패
							xInterior.isBuildOkBtn = FALSE;
							drawPacker(imgBuildTileErr1, x+xObj.xObjData[type][listNum].x[rever], y+xObj.xObjData[type][listNum].y[rever], 0, 0, imgW(imgBuildTileErr1), imgH(imgBuildTileErr1), VH);
							break;
						}
						break;
					}
				}
			}
		}
	}
}



void trendFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_TREND);
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_TREND].img);
	}
}
void drawTrend()
{
	int px =  cx;
	int py = cy;
	int iMax;
		
	switch(xTrend.state)
	{
	case TREND_STATE_NEW:
		drawTrendInfo();
		break;
	case TREND_STATE_EMPTYERR:
		drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);

		
		gSetColor(44, 27, 26);
		gDrawString(px,py-36, "유행정보 슬롯이 꽉 찼습니다.\n새 유행정보로 변경하시겠습니까?", VH);
		drawPacker(imgPopupBtn0, px-100, py+156, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		gDrawStringBold(px-100, py+156, "변경", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
		xTouchOk.wPos = imgW(imgPopupBtn0);
		xTouchOk.hPos = imgH(imgPopupBtn0)/2;
		xTouchOk.xPos = px-100 - xTouchOk.wPos/2;
		xTouchOk.yPos = py+156 - xTouchOk.hPos/2;;
			
		drawPacker(imgPopupBtn2, px+100, py+156, 0, imgH(imgPopupBtn2)/2, imgW(imgPopupBtn2), imgH(imgPopupBtn2)/2, VH);
		gDrawStringBold(px+100, py+156, "취소", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 77, 77, 77);
		xTouchClr.wPos = imgW(imgPopupBtn2);
		xTouchClr.hPos = imgH(imgPopupBtn2)/2;
		xTouchClr.xPos = px+100 - xTouchClr.wPos/2;
		xTouchClr.yPos = py+156 - xTouchClr.hPos/2;;
		break;
	case TREND_STATE_CHANGESLOT:
	case TREND_STATE_MAIN:
		drawPacker(imgTrendBg, px, py, 0, 0, imgW(imgTrendBg), imgH(imgTrendBg), VH);

		//세부메뉴
		iMax = TRENDMAX;
		
		for(int i=0;i<iMax;i++)
		{
			subTemp[XPOS] = px-125+(i*250);
			subTemp[YPOS] = py+23;
									
			if(xTrend.isOpen[i] == FALSE)
			{
				drawPacker(imgTrendSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgTrendSlot1), imgH(imgTrendSlot1), VH);
				//레벨제한에 걸림
				switch(i)
				{
				case 0:
					setFontSize(14);
					gDrawStringBold(subTemp[XPOS],subTemp[YPOS]-142, "의상슬롯", VH, 97, 255, 227, 44, 27, 26);
					setFontSize(11);
					drawPacker(imgTrendLv0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgTrendLv0), imgH(imgTrendLv0), VH);
					break;
				case 1:
					setFontSize(14);
					gDrawStringBold(subTemp[XPOS],subTemp[YPOS]-142, "잡화슬롯", VH, 97, 255, 227, 44, 27, 26);
					setFontSize(11);
					drawPacker(imgTrendLv1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgTrendLv1), imgH(imgTrendLv1), VH);
					break;
				}
			}
			else
			{
				if(xTrend.itemCode[i] == DONT)
				{
					drawPacker(imgTrendSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgTrendSlot1), imgH(imgTrendSlot1), VH);
					drawPacker(imgTrendSlot2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgTrendSlot2), imgH(imgTrendSlot2), VH);
					switch(i)
					{
					case 0:
						setFontSize(14);
						gDrawStringBold(subTemp[XPOS],subTemp[YPOS]-142, "의상슬롯", VH, 97, 255, 227, 44, 27, 26);
						setFontSize(11);
						gDrawStringBold(subTemp[XPOS],subTemp[YPOS]-6, "현재 유행되고 있는\n의상이 없습니다.", VH, 255, 255, 255, 82, 49, 38);
						break;
					case 1:
						setFontSize(14);
						gDrawStringBold(subTemp[XPOS],subTemp[YPOS]-142, "잡화슬롯", VH, 97, 255, 227, 44, 27, 26);
						setFontSize(11);
						gDrawStringBold(subTemp[XPOS],subTemp[YPOS]-6, "현재 유행되고 있는\n잡화가 없습니다.", VH, 255, 255, 255, 82, 49, 38);
						break;
					}
					
					drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS]+150, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
					sprintf(strTempS, "%d",xShop.premiumPrice[(2+i)].oriData);
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-3, subTemp[YPOS]+150-3-12, imgW(imgProductionMenuObj0)/8*6, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VR);
					gDrawStringBold(subTemp[XPOS]-3, subTemp[YPOS]+150-3-12, strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
					switch(i)
					{
					case 0:
						gDrawStringBold(subTemp[XPOS]-3, subTemp[YPOS]+150-3+10, "의상티켓 구매", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
						break;
					case 1:
						gDrawStringBold(subTemp[XPOS]-3, subTemp[YPOS]+150-3+10, "잡화티켓 구매", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
						break;
					}
					
				}
				else
				{
					drawPacker(imgTrendSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgTrendSlot0), imgH(imgTrendSlot0), VH);
					setMapData(xTrend.itemCode[i]);
					drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,80);
					setFontSize(14);
					gDrawStringBold(subTemp[XPOS],subTemp[YPOS]-142, xFashionData[xMap.type][xMap.listNum].strName, VH, 97, 255, 227, 44, 27, 26);
					setFontSize(11);
					
					
					
					int perTemp = (xTrend.per[i]+(xTrend.per[i]*xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER]/100));
					//기능
					
					if((perTemp/10)%10 == 0)
						sprintf(strTempS, "판매가격이 %d배 증가!",perTemp/100);
					else
						sprintf(strTempS, "판매가격이 %d.%d배 증가!",perTemp/100,(perTemp/10)%10);
												
					gSetColor(132,107,94);
					gDrawString(subTemp[XPOS],subTemp[YPOS]+119, strTempS, VH);
					
					
					gSetColor(44, 27, 26);
					
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					sprintf(strTempB,"%sG",strTempS);
					gDrawString(subTemp[XPOS]-30,subTemp[YPOS]+144, strTempB, VR);
					gSetColor(251, 51, 23);
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData*perTemp/100);
					sprintf(strTempB,"%sG",strTempS);
					setFontSize(14);
					gDrawString(subTemp[XPOS]+10,subTemp[YPOS]+144, strTempB, VL);
					setFontSize(11);
					drawPacker(imgTrendArrow, subTemp[XPOS]-50,subTemp[YPOS]+144, 0, 0, imgW(imgTrendArrow), imgH(imgTrendArrow), VH);
					
					//시간
					
					drawTimeSprintf(strTempS,(xTrend.endTime[i] - xCalendar.nowTime),1);
					drawIcon(subTemp[XPOS]+6-60,subTemp[YPOS]+173, ICON_TYPE_TIME);
					setFontSize(14);
					gDrawStringBold(subTemp[XPOS]+16,subTemp[YPOS]+173, strTempS, VH, 255, 76, 28, 44, 27, 26);
					setFontSize(11);
				}
			}
			
			xTouchTrendSlot[i].wPos = imgW(imgTrendSlot0);
			xTouchTrendSlot[i].hPos = imgH(imgTrendSlot0);
			xTouchTrendSlot[i].xPos = subTemp[XPOS] - xTouchTrendSlot[i].wPos/2;
			xTouchTrendSlot[i].yPos = subTemp[YPOS] - xTouchTrendSlot[i].hPos/2;
			
			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xTouchTrendSlot[i].xPos, xTouchTrendSlot[i].yPos, xTouchTrendSlot[i].wPos, xTouchTrendSlot[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
		}
		
		
		//거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
		xTouchClr.wPos = 90;
		xTouchClr.hPos = 90;
		xTouchClr.xPos = px +200;
		xTouchClr.yPos = py-260;
			
			
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_21_RESULT:
				xTutoInfo.x[xTutoInfo.totalNum] = xTouchClr.xPos+xTouchClr.wPos/2;
				xTutoInfo.y[xTutoInfo.totalNum] = xTouchClr.yPos+xTouchClr.hPos/2;
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				break;
			}
		}
			
		
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
		setAlpha(ALPHA_MAX);
		 */
		break;
	}	
}


void drawTrendInfo()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	if(xWorldMap.newModelAnyCnt == 0)
		playSnd(SND_MODEL_CASTING);
	
	if(xWorldMap.newModelAnyCnt == NEWMODELANYCNTMAX)
	{
		playSnd(SND_MODEL_RESULT);

	}
	
	if(++xWorldMap.newModelAnyCnt < NEWMODELANYCNTMAX)
	{
		subTemp[XPOS] = cx;
		subTemp[YPOS] = cy;
		
		int tAlpha = ALPHA_MAX;
		xGame.blendNum = 0;
		int tW;
		switch(xWorldMap.newModelAnyCnt)
		{
			case 30:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	1 * ALPHA_MAX;		break;
			case 31:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.9 * ALPHA_MAX;	break;
			case 32:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.8 * ALPHA_MAX;	break;
			case 33:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.7 * ALPHA_MAX;	break;
			case 34:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.6 * ALPHA_MAX;	break;
			case 35:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.5 * ALPHA_MAX;	break;
			case 36:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.4 * ALPHA_MAX;	break;
			case 37:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.3 * ALPHA_MAX;	break;
			case 38:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.2 * ALPHA_MAX;	break;
			case 39:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.1 * ALPHA_MAX;	break;
			case 40:tAlpha=100*ALPHA_MAX/100;xGame.blendNum= 0;		break;
			case 41:tAlpha=90*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 42:tAlpha=80*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 43:tAlpha=70*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 44:tAlpha=60*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 45:tAlpha=50*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 46:tAlpha=40*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 47:tAlpha=30*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 48:tAlpha=20*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			case 49:tAlpha=10*ALPHA_MAX/100;xGame.blendNum=	0;		break;
			default:
				if(xWorldMap.newModelAnyCnt>=50)
				{
					tAlpha=0;
					//종료처리
					xWorldMap.newModelAnyCnt = NEWMODELANYCNTMAX;
					
				}
				break;
		}
		
		xGame.blendType = BLEND_WHITEALPHA;
		tW = imgW(imgFittingMenu2)*(xWorldMap.newModelAnyCnt)/30;
		if(tW > imgW(imgFittingMenu2))
			tW = imgW(imgFittingMenu2);
		setAlpha(tAlpha);
		if(xGame.blendNum != 0)
			xGame.isBlend = TRUE;
		
		
//		drawModelRotEff(subTemp[XPOS], subTemp[YPOS],gameCnt);
		drawPacker(imgHiPing0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgHiPing0), imgH(imgHiPing0), VH);
	
		drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS]+84, 0, imgH(imgFittingMenu2)/4*3, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
		drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS]+84, 0, imgH(imgFittingMenu2)/4*2, tW, imgH(imgFittingMenu2)/4, VL);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+84, "의상과 배율을 결정 중", VH, 255, 255, 255, 186, 70, 10);
		setAlpha(ALPHA_MAX);
				
		switch(xWorldMap.trendInType)
		{
		case 0:
		case 1:
			drawPacker(imgTrendText, subTemp[XPOS], subTemp[YPOS]+130, 0, imgH(imgTrendText)/2*xWorldMap.trendInType, imgW(imgTrendText), imgH(imgTrendText)/2, VH);
			break;
		}
		xGame.isBlend = FALSE;
		
		return;
	}
		
	if(xWorldMap.newModelAnyCnt == NEWMODELANYCNTMAX+1)
	{
		makeFire(px-160-30, py-45-30, 10);
		makeFire(px-160+30, py-45-30, 10);
		makeFire(px-160-30, py-45+30, 10);
		makeFire(px-160+30, py-45+30, 10);
		makeFire(px-160, py-45, 15);
	}

	makeColorPaper(1);
		
	if(xQuestTuto.state == QUEST_TUTO_KEY)
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_21_TRENDNEW:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
		
	int trendCode;
	int trendPer;
	
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	drawPacker(imgTrendTitle, px, py-208, 0, 0, imgW(imgTrendTitle), imgH(imgTrendTitle), VH);

	subTemp[XPOS] = px+108;
	subTemp[YPOS] = py-96;
	
	
	sprintf(strTempS, "새 유행정보 발생!!");
	trendCode = xTrend.itemCodeTemp;
	trendPer = xTrend.perTemp;

	setFontSize(20);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VH, 97, ALPHA_MAX, 227, 44, 27, 26);
	setFontSize(14);
	setMapData(trendCode);
	sprintf(strTempS, "<%s>",xFashionData[xMap.type][xMap.listNum].strName);
	gSetColor(82, 49, 38);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
	
	
	int perTemp = (trendPer+(trendPer*xModelSkill.bonusPer[MODELSKILL_TYPE_TREND_PER]/100));
	//기능
	
	if((perTemp/10)%10 == 0)
		sprintf(strTempS, "판매가격이 %d배 증가!",perTemp/100);
	else
		sprintf(strTempS, "판매가격이 %d.%d배 증가!",perTemp/100,(perTemp/10)%10);
	
	
	gSetColor(82, 49, 38);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+64+30, strTempS, VH);
	
	gDrawString(px, py+87, "해당 유행정보를 바로 적용하시겠어요?", VH);
	setFontSize(11);
	drawImage(&imgLvUp[2], px-160,py-45, 0, 0, imgLvUp[2].w, imgLvUp[2].h, VH);
	drawFittingF(px-160,py-45, trendCode, 100);
			
	
	if(xWorldMap.isTuto == TRUE && (xQuestTuto.nowNum == TUTO_21_TRENDNEW || xQuestTuto.nowNum == TUTO_21_TRENDOK))
	{
		
		drawPacker(imgPopupBtn0, px, py+158, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		setFontSize(20);
		gDrawStringBold(px-3, py+158-3, "유행 적용", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
		setFontSize(11);
		xTouchOk.wPos = imgW(imgPopupBtn1);
		xTouchOk.hPos = imgH(imgPopupBtn1)/2;
		xTouchOk.xPos = px- xTouchOk.wPos/2;
		xTouchOk.yPos = py+158 - xTouchOk.hPos/2;;
		
		
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_21_TRENDOK:
				xTutoInfo.x[xTutoInfo.totalNum] = px;
				xTutoInfo.y[xTutoInfo.totalNum] = py+158;
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				break;
			}
		}
	}
	else
	{
		drawPacker(imgPopupBtn0, px+100, py+158, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		setFontSize(20);
		gDrawStringBold(px+100-3, py+158-3, "유행 적용", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
		setFontSize(11);
		xTouchOk.wPos = imgW(imgPopupBtn1);
		xTouchOk.hPos = imgW(imgPopupBtn1)/2;
		xTouchOk.xPos = px+100 - xTouchOk.wPos/2;
		xTouchOk.yPos = py+158 - xTouchOk.hPos/2;;
		
		drawPacker(imgPopupBtn2, px-100, py+158, 0, imgH(imgPopupBtn2)/2, imgW(imgPopupBtn2), imgH(imgPopupBtn2)/2, VH);
		setFontSize(20);
		gDrawStringBold(px-100-3, py+158-3, "적용 안함", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 77, 77, 77);
		setFontSize(11);
		xTouchClr.wPos = imgW(imgPopupBtn2);
		xTouchClr.hPos = imgH(imgPopupBtn2)/2;
		xTouchClr.xPos = px-100-xTouchClr.wPos/2;
		xTouchClr.yPos = py+158-xTouchClr.hPos/2;
	}
}

void worldMapNoticeFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		
	}
	else
	{
		//다운로드 이미지들
		for(int i=0;i<xNoticeWorldMap.totalNum;i++)
		{
			freeImg(&xNoticeWorldMap.imgNotice[i]);
		}
	}
}

void drawNotice()
{
	int px = cx;
	int py = cy;
	int pos;
	
	
	drawBgFillRect();
		
	subTemp[XPOS] = px;
	subTemp[YPOS] = py-42;
	
	gSetColor(232, 212, 198);
	fillRect(subTemp[XPOS]-844/2, subTemp[YPOS]-470/2, 844, 470);
	
	xNoticeWorldMap.xTouchOk.wPos = 600;
	xNoticeWorldMap.xTouchOk.hPos = 300;
	xNoticeWorldMap.xTouchOk.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchOk.wPos/2;
	xNoticeWorldMap.xTouchOk.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchOk.hPos/2;
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xNoticeWorldMap.xTouchOk.xPos, xNoticeWorldMap.xTouchOk.yPos, xNoticeWorldMap.xTouchOk.wPos, xNoticeWorldMap.xTouchOk.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	xNoticeWorldMap.xDragScroll.totalNum = xNoticeWorldMap.totalNum;
	xNoticeWorldMap.xDragScroll.posGab = 842;
	dragScrollPrc(&xNoticeWorldMap.xDragScroll,0,FALSE);
	int slotNum;
	gSetClip(true,subTemp[XPOS]-844/2, 0, 844, lcdH);
	for(int i=-1;i<=1;i++)
	{
		if(xNoticeWorldMap.xDragScroll.selectNum+i >= 0 && xNoticeWorldMap.xDragScroll.selectNum+i < xNoticeWorldMap.xDragScroll.totalNum)
		{
			slotNum = xNoticeWorldMap.xDragScroll.selectNum+i;
			pos = xNoticeWorldMap.xDragScroll.pos+(xNoticeWorldMap.xDragScroll.posGab*i);
			
			
			
			
			//이미지 로딩여부 확인
			if(xNoticeWorldMap.imgNotice[slotNum].texture != NULL)
			{
				drawImage(&xNoticeWorldMap.imgNotice[slotNum], subTemp[XPOS]+pos, subTemp[YPOS], 0, 0, xNoticeWorldMap.imgNotice[slotNum].w, xNoticeWorldMap.imgNotice[slotNum].h, VH);
			}
			else
			{
				xGame.isRotate = TRUE;
				xGame.rotateNum = 360-(gameCnt%120)*3;
				drawPacker(imgLoadingIcon0, subTemp[XPOS]+pos,subTemp[YPOS], 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
				xGame.isRotate = FALSE;
				
				//이미지다운상태확인(등록,다운중,다운완료)
				switch(xNoticeWorldMap.downLoadImgState[slotNum])
				{
				case FRIENDDOWNLOADIMG_STATE_DONT:
					//대기상태라면 이미지 다운로드 큐에 등록해주자
					//////////////////////////////////////////////////////////////////
					xEventQueueNet.slotNum[xEventQueueNet.totalNum] = slotNum;
					addEventQueueNet(0, 0, NETQUEUE_TYPE_NOTICEIMGDOWNLOAD, FALSE);
					//////////////////////////////////////////////////////////////////
					xNoticeWorldMap.downLoadImgState[slotNum] = FRIENDDOWNLOADIMG_STATE_EVENT;
					break;
				case FRIENDDOWNLOADIMG_STATE_EVENT:
				case FRIENDDOWNLOADIMG_STATE_DOWNING:
					//다운중 상태라면 완료 될때까지 기다리자
					break;
				case FRIENDDOWNLOADIMG_STATE_OK:
					//다운완료 상태라면 loadImg
					sprintf(strTempS, "notice%d.png",slotNum);
					loadImgDocuments(strTempS, &xNoticeWorldMap.imgNotice[slotNum]);
					break;
				}
			}
		}
	}
    gSetClip(false,0, 0, lcdW, lcdH);
	drawPacker(imgWorldMapNotice0, px, py, 0, 0, imgW(imgWorldMapNotice0), imgH(imgWorldMapNotice0), VH);
	
	
	for(int i=0;i<xNoticeWorldMap.totalNum;i++)
	{
		subTemp[XPOS] = px+380-(55*((xNoticeWorldMap.totalNum-1)-i));
		subTemp[YPOS] = py-244;
		
		drawPacker(imgWorldMapNotice1, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice1)/2*(i == xNoticeWorldMap.xDragScroll.selectNum?1:0), 0, imgW(imgWorldMapNotice1)/2, imgH(imgWorldMapNotice1), VH);
		drawNumPacker(imgWorldMapNoticeNum, subTemp[XPOS], subTemp[YPOS], i+1, 0, VH);
	}
	
	subTemp[XPOS] = px-422-3;
	subTemp[YPOS] = py-42;
	if(xNoticeWorldMap.xDragScroll.selectNum > 0)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);

	
	xNoticeWorldMap.xTouchLeft.wPos = 160;
	xNoticeWorldMap.xTouchLeft.hPos = 160;
	xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
	xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
	setAlpha(ALPHA_MAX);
	*/
		
	
	subTemp[XPOS] = px+422;
	subTemp[YPOS] = py-42;
	if(xNoticeWorldMap.xDragScroll.selectNum < xNoticeWorldMap.totalNum-1)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);

	xNoticeWorldMap.xTouchRight.wPos = 160;
	xNoticeWorldMap.xTouchRight.hPos = 160;
	xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
	xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
	setAlpha(ALPHA_MAX);
	 */
		
	subTemp[XPOS] = px+320;
	subTemp[YPOS] = py+241;
	drawBtn(subTemp[XPOS], subTemp[YPOS], BTN_OK_CONFIRM);
}


void drawNoticePopup()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	subTemp[XPOS] = px;
	subTemp[YPOS] = py-42;
	
	gSetColor(232, 212, 198);
	fillRect(subTemp[XPOS]-844/2, subTemp[YPOS]-470/2, 844, 470);
	
	xNoticeWorldMap.xTouchOk.wPos = 600;
	xNoticeWorldMap.xTouchOk.hPos = 300;
	xNoticeWorldMap.xTouchOk.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchOk.wPos/2;
	xNoticeWorldMap.xTouchOk.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchOk.hPos/2;
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchOk.xPos, xNoticeWorldMap.xTouchOk.yPos, xNoticeWorldMap.xTouchOk.wPos, xNoticeWorldMap.xTouchOk.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	for(int i=0;i<xNoticeWorldMap.totalNum;i++)
	{
		if(xNoticeWorldMap.imgNotice[i].texture == NULL)
		{
			if(xSave.noticeDayPopup[i] != xCalendar.nowDay)
			{
				//이미지다운상태확인(등록,다운중,다운완료)
				switch(xNoticeWorldMap.downLoadImgState[i])
				{
				case FRIENDDOWNLOADIMG_STATE_DONT:
					//대기상태라면 이미지 다운로드 큐에 등록해주자
					//////////////////////////////////////////////////////////////////
					xEventQueueNet.slotNum[xEventQueueNet.totalNum] = i;
					addEventQueueNet(0, 0, NETQUEUE_TYPE_NOTICEIMGDOWNLOAD, FALSE);
					//////////////////////////////////////////////////////////////////
					xNoticeWorldMap.downLoadImgState[i] = FRIENDDOWNLOADIMG_STATE_EVENT;
					break;
				case FRIENDDOWNLOADIMG_STATE_EVENT:
				case FRIENDDOWNLOADIMG_STATE_DOWNING:
					//다운중 상태라면 완료 될때까지 기다리자
					break;
				case FRIENDDOWNLOADIMG_STATE_OK:
					//다운완료 상태라면 loadImg
					sprintf(strTempS, "notice%d.png",i);
					loadImgDocuments(strTempS, &xNoticeWorldMap.imgNotice[i]);
					break;
				}
			}
		}
	}

	int slotNum;
	gSetClip(true,subTemp[XPOS]-844/2, 0, 844, lcdH);
	slotNum = xNoticeWorldMap.nowPopupNum;
			//이미지 로딩여부 확인
	if(xNoticeWorldMap.imgNotice[slotNum].texture != NULL)
	{
		drawImage(&xNoticeWorldMap.imgNotice[slotNum], subTemp[XPOS], subTemp[YPOS], 0, 0, xNoticeWorldMap.imgNotice[slotNum].w, xNoticeWorldMap.imgNotice[slotNum].h, VH);
	}
	else
	{
		xGame.isRotate = TRUE;
		xGame.rotateNum = 360-(gameCnt%120)*3;
		drawPacker(imgLoadingIcon0, subTemp[XPOS],subTemp[YPOS], 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
		xGame.isRotate = FALSE;
	}
    gSetClip(false,0, 0, lcdW, lcdH);
	drawPacker(imgWorldMapNotice0, px, py, 0, 0, imgW(imgWorldMapNotice0), imgH(imgWorldMapNotice0), VH);
			
	drawPacker(imgWorldMapNotice3, px-363-30, py+242, 0, 0, imgW(imgWorldMapNotice3), imgH(imgWorldMapNotice3), VH);
	if(xNoticeWorldMap.isOneDay == TRUE)
		drawPacker(imgQuestV, px-363-30, py+242-14, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
	
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px-363, py+242, "오늘하루 그만보기", VL);
	setFontSize(11);
	xNoticeWorldMap.xTouchOneDay.wPos = 300;
	xNoticeWorldMap.xTouchOneDay.hPos = 100;
	xNoticeWorldMap.xTouchOneDay.xPos = px-363+60-xNoticeWorldMap.xTouchOneDay.wPos/2;
	xNoticeWorldMap.xTouchOneDay.yPos = py+248-xNoticeWorldMap.xTouchOneDay.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchOneDay.xPos, xNoticeWorldMap.xTouchOneDay.yPos, xNoticeWorldMap.xTouchOneDay.wPos, xNoticeWorldMap.xTouchOneDay.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	subTemp[XPOS] = px+320;
	subTemp[YPOS] = py+241;
	drawBtn(subTemp[XPOS], subTemp[YPOS], BTN_OK_CONFIRM);
		
	/*
	gSetColor(255, 0, 0);
	fillRect(px-100, py-100, 200, 200);
	gSetColor(255, 255, 255);
	sprintf(strTempS, "%s",xNoticeWorldMap.strImgUrl[xNoticeWorldMap.nowPopupNum]);
	gDrawString(px, py-20, strTempS, VH);
	sprintf(strTempS, "%s",xNoticeWorldMap.strRinkUrl[xNoticeWorldMap.nowPopupNum]);
	gDrawString(px, py+20, strTempS, VH);
	
	sprintf(strTempS, "%d/%d",xNoticeWorldMap.nowPopupNum,xNoticeWorldMap.totalNum);
	gDrawString(px, py-40, strTempS, VH);
	 */
}

int nextNoticePopup(int nowNum)
{
	int resultNum = DONT;
    
    if(xCalendar.nowDay_Hacking != 0)
    {
        if(xSaveNoticePopup.day != xCalendar.nowDay_Hacking)
        {
            xSaveNoticePopup.day = xCalendar.nowDay_Hacking;
            xSaveNoticePopup.totalNum = 0;
            gameSave(SAVE_SLOT_NOTICEPOPUP);
        }
    }
    
	//다음 팝업검색
	for(int i=nowNum+1;i<xNoticeWorldMap.totalNum;i++)
	{
        
        bool isCheck = false;
        for(int k=0;k<xSaveNoticePopup.totalNum;k++)
        {
            if(xSaveNoticePopup.code[k] == xNoticeWorldMap.code[i])
            {
                isCheck = true;
                break;
            }
        }
        
        if(isCheck == false)
            return i;
	}
	return resultNum;
}


void setShop(int type)
{
	xWorldMap.isCashShop = TRUE;
	setShopTab(type);
	shopImgFreeLoad(TRUE);
}

void shopImgFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		loadImg("shopbg.png", &imgShopBg);
		loadImg("couponbg.png", &imgCouponBg);
		loadImg("shoptabicon.png", &imgShopTabIcon);
		loadImg("shoptab.png", &imgShopTab);
		loadImg("shopmusicicon.png", &imgShopMusicIcon);
		loadImg("selectsongslot.png", &imgSelectSongSlot);
		
		if(xWorldMap.isFirstIap == TRUE)
		{
			loadImg("cashshop1.png", &imgCashShop[1]);
		}
		
		loadImg("aliceshockicon.png", &imgAliceShockIcon);
		loadImg("aliceshockarrow.png", &imgAliceShockArrow);
						
		loadImg("cashevent.png", &imgCashEvent);
	}
	else
	{
		freeImg(&imgShopBg);
		freeImg(&imgCouponBg);
		freeImg(&imgShopTabIcon);
		freeImg(&imgShopTab);
		freeImg(&imgShopMusicIcon);
		freeImg(&imgSelectSongSlot);
		freeImg(&imgCashShop[1]);
		
		//그릴때 바로 로딩하는 이미지
		for(int i=0;i<CASHSHOPICONMAX;i++)
		{
			freeImg(&imgShopMoneyIcon[i]);
			freeImg(&imgShopPremiumIcon[i]);
		}
		
		freeImg(&imgAliceShockIcon);
		freeImg(&imgAliceShockArrow);
				
		freeImg(&imgCashEvent);
	}
}

void drawShop()
{
	int px = cx;
	int py = cy;
	int pos;
	int slotNum;
	
		
	if(xWorldMap.isAppReview == TRUE)
		xShop.totalTabB = 3;
	else
		xShop.totalTabB = 4;		
	
    
    drawBgFillRect();
	drawImage(&imgShopBg, px, py, 0, 0, imgShopBg.w, imgShopBg.h, VH);
		

	
	subTemp[XPOS] = px-383;
	subTemp[YPOS] = py-150;
	drawImage(&imgShopTab, subTemp[XPOS], subTemp[YPOS]+(xShop.selectTabB*96), 0, 0, imgShopTab.w, imgShopTab.h, VH);
	for(int i=0;i<xShop.totalTabB;i++)
	{
		drawImage(&imgShopTabIcon, subTemp[XPOS], subTemp[YPOS]+(i*96), imgShopTabIcon.w/4*i, 0, imgShopTabIcon.w/4, imgShopTabIcon.h, VH);
				
		xShop.xTouchTabB[i].wPos = imgShopTab.w;
		xShop.xTouchTabB[i].hPos = imgShopTab.h;
		xShop.xTouchTabB[i].xPos = subTemp[XPOS]-xShop.xTouchTabB[i].wPos/2;
		xShop.xTouchTabB[i].yPos = subTemp[YPOS]+(i*96)-xShop.xTouchTabB[i].hPos/2;
	}
	
	//세부메뉴
	int totalNum;
	switch(xShop.selectTabB)
	{
	case SHOPTAB_TYPE_MONEY:
		totalNum = xShop.totalMoneyTab;
            
        drawImage(&imgMileageIcon[3], lcdW-imgMileageIcon[3].w/2, 197, 0, 0, imgMileageIcon[3].w, imgMileageIcon[3].h, VH);
            
		break;
	case SHOPTAB_TYPE_PREMIUM:
		totalNum = SHOPTABPREMIUMMAX;
		break;
	case SHOPTAB_TYPE_MUSIC:
		totalNum = xSongSet.totalSong;
		break;
	}
	
			
	if(xShop.selectTabB == SHOPTAB_TYPE_COUPON)
	{
		subTemp[XPOS] = px+45;
		subTemp[YPOS] = py+35;
		
		drawImage(&imgCouponBg, subTemp[XPOS], subTemp[YPOS], 0, 0, imgCouponBg.w, imgCouponBg.h, VH);
		
		
		
		xShop.xTouchCoupon.wPos = 500;
		xShop.xTouchCoupon.hPos = 80;
		xShop.xTouchCoupon.xPos = subTemp[XPOS]-xShop.xTouchCoupon.wPos/2;
		xShop.xTouchCoupon.yPos = subTemp[YPOS]+16-xShop.xTouchCoupon.hPos/2;
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xShop.xTouchCoupon.xPos, xShop.xTouchCoupon.yPos, xShop.xTouchCoupon.wPos, xShop.xTouchCoupon.hPos);
		setAlpha(ALPHA_MAX);
		 */
		
		setFontSize(20);
		gSetColor(255, 255, 255);
		
		int strByte = getStringByte(xShop.strCoupon);
		int kor = strByte/1000;
		int eng = strByte%1000;
		int korEng = kor+eng;
		if(korEng == 0)
			gDrawString(subTemp[XPOS], subTemp[YPOS]+16, "쿠폰번호를 입력해주세요", VH);
		else
			gDrawString(subTemp[XPOS], subTemp[YPOS]+16, xShop.strCoupon, VH);
		setFontSize(11);
		
		drawBtn(subTemp[XPOS],subTemp[YPOS]+130, BTN_OK_CONFIRM);
	}
	else
	{
		if(xShop.selectTabB == SHOPTAB_TYPE_MONEY && xWorldMap.isFirstIap == TRUE)
			drawImage(&imgCashShop[1], px-260, py-223, 0, 0, imgCashShop[1].w, imgCashShop[1].h, VH);
		
		
		xShop.xDragScroll.totalNum = 1+(totalNum-1)/8;
		xShop.xDragScroll.posGab = 640;
		
		dragScrollPrc(&xShop.xDragScroll,0,FALSE);
		gSetClip(true,px-260, 0, 600, lcdH);
		
		for(int page=-1;page<=1;page++)
		{
			if(xShop.xDragScroll.selectNum+page >= 0 && xShop.xDragScroll.selectNum+page < xShop.xDragScroll.totalNum)
			{
				for(int i=0;i<8;i++)
				{
					if(((xShop.xDragScroll.selectNum+page)*8)+i >= totalNum)
						break;
					
					pos = xShop.xDragScroll.pos+(xShop.xDragScroll.posGab*page);
					subTemp[XPOS] = px-185+pos+((i%4)*150);
					subTemp[YPOS] = py-120+((i/4)*236);
					
					slotNum = ((xShop.xDragScroll.selectNum+page)*8)+i;
					drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
							
					
					switch(xShop.selectTabB)
					{
					case SHOPTAB_TYPE_MONEY:
						if(xWorldMap.isFirstIap == TRUE && xShop.moneyType[slotNum] == 0)
							drawPacker(imgCashShop0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCashShop0), imgH(imgCashShop0), VH);

							
						drawShopMoneyIcon(subTemp[XPOS],subTemp[YPOS],slotNum);
							
							
						if(xWorldMap.isFirstIap == TRUE && xShop.moneyType[slotNum] == 0)
						{
							setFontSize(8);
							gDrawStringBold(subTemp[XPOS],subTemp[YPOS]+35, "첫구매 혜택!", VH, 86, 255, 220, 82, 49, 38);
							sprintf(strTempS, "%d룩 추가 보너스!",xShop.moneyPriceFirstBonus[slotNum]);
							gDrawStringBold(subTemp[XPOS],subTemp[YPOS]+35+17, strTempS, VH, 86, 255, 220, 82, 49, 38);
							setFontSize(11);
							switch(xShop.moneyType[slotNum])
							{
							case 0:		//룩									
								setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData+xShop.moneyPriceFirstBonus[slotNum]);
								sprintf(strTempS, "%s 룩",strTempB);
								break;
							case 1:		//골드
								setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData);
								sprintf(strTempS, "%s 골드",strTempB);
								break;
							}
						}
						else
						{
													
							switch(xShop.moneyType[slotNum])
							{
							case 0:		//룩
								setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData);
								sprintf(strTempS, "%s 룩",strTempB);
								break;
							case 1:		//골드
								setCommaNum(strTempB, xShop.moneyPoint[slotNum].oriData);
								sprintf(strTempS, "%s 골드",strTempB);
								break;
							}
						}
							
						gSetColor(44, 27, 26);
						setLabelWidth(150);
						gDrawString(subTemp[XPOS], subTemp[YPOS]+82, strTempS, VH);
						setLabelWidth(0);
							

						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						switch(xShop.moneyType[slotNum])
						{
						case 0:		//룩
							setCommaNum(strTempB, xShop.moneyPrice[slotNum].oriData);
							sprintf(strTempS, "%s원",strTempB);
							break;
						case 1:		//골드
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							setCommaNum(strTempS, xShop.moneyPrice[slotNum].oriData);
							break;
						}

						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
							
											
						if(xShop.moneyPriceBonus[slotNum] > 0)
						{
							drawPacker(imgSlotBonus0, subTemp[XPOS]+45, subTemp[YPOS]-45, 0, 0, imgW(imgSlotBonus0), imgH(imgSlotBonus0), VH);
							

							switch(xShop.moneyType[slotNum])
							{
							case 0:		//룩
								setFontSize(8);
								gDrawStringBold(subTemp[XPOS]+45+5, subTemp[YPOS]-45, "룩", VL, 255, 255, 255, 82, 49, 38);
								setFontSize(11);
								sprintf(strTempS,"%d", xShop.moneyPriceBonus[slotNum]);
								if(xShop.moneyPriceBonus[slotNum] >= 100)
								{
									setFontSize(14);
									gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-1, strTempS, VR, 255, 255, 255, 82, 49, 38);
									setFontSize(11);
								}
								else
								{
									setFontSize(20);
									gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-1, strTempS, VR, 255, 255, 255, 82, 49, 38);
									setFontSize(11);
								}
									
								break;
							case 1:		//골드
								setFontSize(8);
								setCommaNum(strTempS, xShop.moneyPriceBonus[slotNum]);
								gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-9, strTempS, VH, 255, 255, 255, 82, 49, 38);
								gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45+8, "GOLD", VH, 255, 255, 255, 82, 49, 38);
								setFontSize(11);
								break;
							}
							
						}
							
						break;
					case SHOPTAB_TYPE_PREMIUM:
						drawShopPremiumIcon(subTemp[XPOS],subTemp[YPOS],slotNum);
							
						gSetColor(44, 27, 26);
						setLabelWidth(150);
						gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xShop.strPremiumName[slotNum], VH);
						setLabelWidth(0);
							
						
						drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
						switch(xShop.premiumPriceType[slotNum])
						{
						case 2:
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*6, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							break;
						default:
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*xShop.premiumPriceType[slotNum], 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							break;
						}
							
							
							
						
						setCommaNum(strTempS, xShop.premiumPrice[slotNum].oriData);
							
							
						gSetColor(44, 27, 26);
						gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
												
						break;
					case SHOPTAB_TYPE_MUSIC:
						drawImage(&imgShopMusicIcon, subTemp[XPOS],subTemp[YPOS], 0, 0, imgShopMusicIcon.w, imgShopMusicIcon.h, VH);
							
						gSetColor(44, 27, 26);
						setLabelWidth(150);
						gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xSongSet.strSongTitle[slotNum], VH);
						setLabelWidth(0);
											

						if(xSongSet.selectSong == slotNum)
						{
							//현재 재생중인 곡
							drawImage(&imgSelectSongSlot, subTemp[XPOS], subTemp[YPOS]+36, 0, 0, imgSelectSongSlot.w, imgSelectSongSlot.h, VH);
						}
						else if(xSongSet.isSongOpen[slotNum] == TRUE)
						{
							//구매한곡
							drawImage(&imgFittingBg[2], subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgFittingBg[2].w, imgFittingBg[2].h, VH);
						}
						else
						{
							//미구매곡
							drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+123, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
							drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+123, imgW(imgProductionMenuObj0)/8*xSongSet.songPriceType[slotNum], 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
							setCommaNum(strTempS, xSongSet.songPrice[slotNum]);
							
							gSetColor(44, 27, 26);
							gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+123, strTempS, VR);
						}
						
							
						break;
					}
				
					
					if(page == 0)
					{
						xShop.xTouchSelectSlot[i].wPos = imgW(imgProductionMenuSlot0);
						xShop.xTouchSelectSlot[i].hPos = imgH(imgProductionMenuSlot0);
						xShop.xTouchSelectSlot[i].xPos = subTemp[XPOS] - xShop.xTouchSelectSlot[i].wPos/2;
						xShop.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xShop.xTouchSelectSlot[i].hPos/2;
					}
				}
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
		subTemp[XPOS] = px+40-340-3;
		subTemp[YPOS] = py+30;
		if(xShop.xDragScroll.selectNum > 0)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchLeft.wPos = 80;
		xNoticeWorldMap.xTouchLeft.hPos = 80;
		xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
		xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		
		subTemp[XPOS] = px+40+340;
		subTemp[YPOS] = py+30;
		if(xShop.xDragScroll.selectNum < xShop.xDragScroll.totalNum-1)
			drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
		
		xNoticeWorldMap.xTouchRight.wPos = 80;
		xNoticeWorldMap.xTouchRight.hPos = 80;
		xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
		xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
		 setAlpha(ALPHA_MAX);
		 */

	}
		
    

    
    
    
	switch(xShop.selectTabB)
	{
	case SHOPTAB_TYPE_MONEY:
		if(xWorldMap.isOpen_CASH10000 == TRUE)
			drawImage(&imgCashEvent, lcdW, lcdH, 0, 0, imgCashEvent.w, imgCashEvent.h, BR);
		break;
	}
	
	
	subTemp[XPOS] = px+431;
	subTemp[YPOS] = py-282;
	
	drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
	
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;

	/*
	gSetColor(255,0,0);
	setAlpha(100);
	fillRect(xTouchClr.xPos,xTouchClr.yPos,xTouchClr.wPos,xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	*/
}

void setShopTab(int selectTab)
{
	xShop.selectTabB = selectTab;
	xShop.xDragScroll.selectNum = 0;
	xShop.xDragScroll.speed = 0;
	xShop.xDragScroll.pos = 0;
	xShop.selectSlot = DONT;
}

void drawShopMoneyIcon(int x,int y,int index)
{

	sprintf(strTempS,"shopmoneyicon%d.png",index);

	
	if(imgShopMoneyIcon[index].texture == NULL)
	{
		loadImg(strTempS, &imgShopMoneyIcon[index]);
	}	
	drawImage(&imgShopMoneyIcon[index], x, y, 0, 0, imgShopMoneyIcon[index].w, imgShopMoneyIcon[index].h, VH);
}

void drawShopPremiumIcon(int x,int y,int index)
{
	if(imgShopPremiumIcon[index].texture == NULL)
	{
		sprintf(strTempS,"shoppremiumicon%d.png", index);
		loadImg(strTempS, &imgShopPremiumIcon[index]);
	}
	drawImage(&imgShopPremiumIcon[index], x, y, 0, 0, imgShopPremiumIcon[index].w, imgShopPremiumIcon[index].h, VH);
}


void drawCarWorldMap(int x,int y,int code,int pos,int anyCnt,int reSize)
{
	int tireX[2][2];
	int tireY[2][2];
	//월드맵
	 tireX[0][0] = -1;
	 tireY[0][0] = -24;
	 
	 tireX[0][1] = 66;
	 tireY[0][1] = -57;
	 
	 tireX[1][0] = -11;
	 tireY[1][0] = -25;
	 
	 tireX[1][1] = 56;
	 tireY[1][1] = -58;
	
	
	switch(pos)
	{
	case MOVETYPE_XPLUS:
	case MOVETYPE_YPLUS:
		switch(code)
		{
		case 0:
			y += imgH(imgWorldMapCar00)/2;
			break;
		case 1:
			y += imgH(imgWorldMapCar10)/2;
			break;
		}
			
		
		break;
	case MOVETYPE_XMINUS:
	case MOVETYPE_YMINUS:
		switch(code)
		{
		case 0:
			y += imgH(imgWorldMapCar01)/2;
			break;
		case 1:
			y += imgH(imgWorldMapCar11)/2;
			break;
		}
		break;
	}
	
	if(reSize != 100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = reSize;
	}
		
	switch(pos)
	{
	case MOVETYPE_XPLUS:
		drawPacker(imgTire, x+tireX[0][0], y+tireY[0][0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x+tireX[0][1], y+tireY[0][1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		break;
	case MOVETYPE_XMINUS:
		drawPacker(imgTire, x+tireX[1][0], y+tireY[1][0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x+tireX[1][1], y+tireY[1][1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		break;
	case MOVETYPE_YPLUS:
		xGame.isReverse = TRUE;
		drawPacker(imgTire, x-tireX[0][0], y+tireY[0][0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x-tireX[0][1], y+tireY[0][1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		xGame.isReverse = FALSE;
		break;
	case MOVETYPE_YMINUS:
		xGame.isReverse = TRUE;
		drawPacker(imgTire, x-tireX[1][0], y+tireY[1][0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x-tireX[1][1], y+tireY[1][1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		xGame.isReverse = FALSE;
		break;
	}	
	
	
	switch(pos)
	{
	case MOVETYPE_XPLUS:
		switch(code)
		{
		case 0:drawPacker(imgWorldMapCar00, x, y, 0, 0, imgW(imgWorldMapCar00), imgH(imgWorldMapCar00), BH);break;
		case 1:drawPacker(imgWorldMapCar10, x, y, 0, 0, imgW(imgWorldMapCar10), imgH(imgWorldMapCar10), BH);break;
		}
		break;
	case MOVETYPE_XMINUS:
		switch(code)
		{
		case 0:drawPacker(imgWorldMapCar01, x, y, 0, 0, imgW(imgWorldMapCar01), imgH(imgWorldMapCar01), BH);break;
		case 1:drawPacker(imgWorldMapCar11, x, y, 0, 0, imgW(imgWorldMapCar11), imgH(imgWorldMapCar11), BH);break;
		}
		break;
	case MOVETYPE_YPLUS:
		xGame.isReverse = TRUE;
		switch(code)
		{
		case 0:drawPacker(imgWorldMapCar00, x, y, 0, 0, imgW(imgWorldMapCar00), imgH(imgWorldMapCar00), BH);break;
		case 1:drawPacker(imgWorldMapCar10, x, y, 0, 0, imgW(imgWorldMapCar10), imgH(imgWorldMapCar10), BH);break;
		}
		xGame.isReverse = FALSE;
		break;
	case MOVETYPE_YMINUS:
		xGame.isReverse = TRUE;
		switch(code)
		{
		case 0:drawPacker(imgWorldMapCar01, x, y, 0, 0, imgW(imgWorldMapCar01), imgH(imgWorldMapCar01), BH);break;
		case 1:drawPacker(imgWorldMapCar11, x, y, 0, 0, imgW(imgWorldMapCar11), imgH(imgWorldMapCar11), BH);break;
		}
		xGame.isReverse = FALSE;
		break;
	}
	xGame.isReSizeDraw = FALSE;
}


void drawCar(int x,int y,int code,int pos,int anyCnt,int reSize)
{
	
	int rX[2];
	int rY[2];
	if(imgCar[code][0].texture == NULL)
	{
		sprintf(strTempS,"car_%d_0.png", code);
		loadImg(strTempS, &imgCar[code][0]);
		sprintf(strTempS,"car_%d_1.png", code);
		loadImg(strTempS, &imgCar[code][1]);
	}
	
	switch(pos)
	{
	case MOVETYPE_XPLUS:
	case MOVETYPE_YPLUS:
		y += imgCar[code][0].h/2;
		break;
	case MOVETYPE_XMINUS:
	case MOVETYPE_YMINUS:
		y += imgCar[code][1].h/2;
		break;
	}
	
    bool isResize = false;
	if(reSize != 100)
	{
		//xGame.isReSizeDraw = TRUE;
		//xGame.reSize = reSize;
        
        isResize = true;
        xGame.fgameScaleCx =x;
        xGame.fgameScaleCy =lcdH-y;
        xGame.fgameScale = reSize*0.01f;
        reSize = 100;
	}
    
    
    
    
	
	switch(pos)
	{
	case MOVETYPE_XPLUS:
		rX[0] = (xCar.tireX[code][0][0])*reSize/100;
		rY[0] = -imgCar[code][0].h/2;
		rY[0] += ((y+xCar.tireY[code][0][0])-(y-imgCar[code][0].h/2))*reSize/100;
			
		//바퀴위치 - 중앙위치
		rX[1] = (xCar.tireX[code][0][1])*reSize/100;
		rY[1] = -imgCar[code][0].h/2;
		rY[1] += ((y+xCar.tireY[code][0][1])-(y-imgCar[code][0].h/2))*reSize/100;

			
		drawPacker(imgTire, x+rX[0], y+rY[0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x+rX[1], y+rY[1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		break;
	case MOVETYPE_XMINUS:
		rX[0] = (xCar.tireX[code][1][0])*reSize/100;
		rY[0] = -imgCar[code][1].h/2;
		rY[0] += ((y+xCar.tireY[code][1][0])-(y-imgCar[code][1].h/2))*reSize/100;
		
		//바퀴위치 - 중앙위치
		rX[1] = (xCar.tireX[code][1][1])*reSize/100;
		rY[1] = -imgCar[code][1].h/2;
		rY[1] += ((y+xCar.tireY[code][1][1])-(y-imgCar[code][1].h/2))*reSize/100;
			
		drawPacker(imgTire, x+rX[0], y+rY[0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x+rX[1], y+rY[1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		break;
	case MOVETYPE_YPLUS:
		rX[0] = (xCar.tireX[code][0][0])*reSize/100;
		rY[0] = -imgCar[code][0].h/2;
		rY[0] += ((y+xCar.tireY[code][0][0])-(y-imgCar[code][0].h/2))*reSize/100;
		
		//바퀴위치 - 중앙위치
		rX[1] = (xCar.tireX[code][0][1])*reSize/100;
		rY[1] = -imgCar[code][0].h/2;
		rY[1] += ((y+xCar.tireY[code][0][1])-(y-imgCar[code][0].h/2))*reSize/100;
			
		xGame.isReverse = TRUE;
		drawPacker(imgTire, x-rX[0], y+rY[0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x-rX[1], y+rY[1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		xGame.isReverse = FALSE;
		break;
	case MOVETYPE_YMINUS:
		rX[0] = (xCar.tireX[code][1][0])*reSize/100;
		rY[0] = -imgCar[code][1].h/2;
		rY[0] += ((y+xCar.tireY[code][1][0])-(y-imgCar[code][1].h/2))*reSize/100;
		
		//바퀴위치 - 중앙위치
		rX[1] = (xCar.tireX[code][1][1])*reSize/100;
		rY[1] = -imgCar[code][1].h/2;
		rY[1] += ((y+xCar.tireY[code][1][1])-(y-imgCar[code][1].h/2))*reSize/100;

		xGame.isReverse = TRUE;
		drawPacker(imgTire, x-rX[0], y+rY[0], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		drawPacker(imgTire, x-rX[1], y+rY[1], 0, imgH(imgTire)/4*(3-(anyCnt%4)), imgW(imgTire), imgH(imgTire)/4, VH);
		xGame.isReverse = FALSE;
		break;
	}
				
			
	
		
	
	
	switch(pos)
	{
	case MOVETYPE_XPLUS:
		drawImage(&imgCar[code][0], x, y, 0, 0, imgCar[code][0].w, imgCar[code][0].h, BH);
		break;
	case MOVETYPE_XMINUS:
		drawImage(&imgCar[code][1], x, y, 0, 0, imgCar[code][1].w, imgCar[code][1].h, BH);
		break;
	case MOVETYPE_YPLUS:
		xGame.isReverse = TRUE;
		drawImage(&imgCar[code][0], x, y, 0, 0, imgCar[code][0].w, imgCar[code][0].h, BH);
		xGame.isReverse = FALSE;
		break;
	case MOVETYPE_YMINUS:
		xGame.isReverse = TRUE;
		drawImage(&imgCar[code][1], x, y, 0, 0, imgCar[code][1].w, imgCar[code][1].h, BH);
		xGame.isReverse = FALSE;
		break;
	}	
	xGame.isReSizeDraw = FALSE;
    
    if(isResize == true)
    {
        xGame.fgameScale = 1.0f;
        xGame.fgameScaleCx =cx;
        xGame.fgameScaleCy =cy;
    }
    
}

void addOrderNpc()
{
	int totalNumOpen = 0;
	int slotOpen[256];
	int totalNumNo = 0;
	int slotNo[256];
	
	int totalNum = 0;
	int slot[256];
    
    
    int totalNumALL = 0;
    int slotALL[2560];
    
    
    
	for(int i=0;i<FASHIONDATATYPEMAX;i++)
	{
		for(int j=0;j<xCatalog.totalSlot[i];j++)
		{
			setMapData(xCatalog.xSlot[i][j].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
			if(xFashionData[xMap.type][xMap.listNum].lv >= xSaveTemp.lv.oriData-3 && xFashionData[xMap.type][xMap.listNum].lv <= xSaveTemp.lv.oriData+1)
			{
				if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
					slotNo[totalNumNo++] = xCatalog.xSlot[i][j].code;
				else
					slotOpen[totalNumOpen++] = xCatalog.xSlot[i][j].code;
								
				slot[totalNum++] = xCatalog.xSlot[i][j].code;
			}
            
            if(xFashionData[xMap.type][xMap.listNum].lv <= xSaveTemp.lv.oriData)
                slotALL[totalNumALL++] = xCatalog.xSlot[i][j].code;;
            
		}
	}
	
	if(totalNum == 0)
	{
        xOrder.xSlotListData[xOrder.totalNumListData].state = ORDERSLOT_STATE_CLOSE;
        xOrder.xSlotListData[xOrder.totalNumListData].friendType = 1;
        xOrder.xSlotListData[xOrder.totalNumListData++].code = slotALL[ranDom(0, totalNumALL-1)];
	}
	else if(FALSE)//ranDom(0, 100) < 30)
	{
		if(totalNumNo == 0)
		{
			xOrder.xSlotListData[xOrder.totalNumListData].state = ORDERSLOT_STATE_CLOSE;
			xOrder.xSlotListData[xOrder.totalNumListData].friendType = 1;
			xOrder.xSlotListData[xOrder.totalNumListData++].code = slot[ranDom(0, totalNum-1)];
		}
		else
		{
			xOrder.xSlotListData[xOrder.totalNumListData].state = ORDERSLOT_STATE_CLOSE;
			xOrder.xSlotListData[xOrder.totalNumListData].friendType = 1;
			xOrder.xSlotListData[xOrder.totalNumListData++].code = slotNo[ranDom(0, totalNumNo-1)];
		}
	}
	else
	{
		if(totalNumOpen == 0)
		{
			xOrder.xSlotListData[xOrder.totalNumListData].state = ORDERSLOT_STATE_CLOSE;
			xOrder.xSlotListData[xOrder.totalNumListData].friendType = 1;
			xOrder.xSlotListData[xOrder.totalNumListData++].code = slot[ranDom(0, totalNum-1)];
		}
		else
		{
			xOrder.xSlotListData[xOrder.totalNumListData].state = ORDERSLOT_STATE_CLOSE;
			xOrder.xSlotListData[xOrder.totalNumListData].friendType = 1;
			xOrder.xSlotListData[xOrder.totalNumListData++].code = slotOpen[ranDom(0, totalNumOpen-1)];
		}
	}	
	////////////////////////////////////////////////////////////
	xEventQueueNet.key[xEventQueueNet.totalNum] = xNetData.userNum;
	xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xOrder.totalNumListData-1;
	xEventQueueNet.code[xEventQueueNet.totalNum] = xOrder.xSlotListData[xOrder.totalNumListData-1].code;
	xEventQueueNet.action[xEventQueueNet.totalNum] = 1;	//0:친구1:NPC
	xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDORDER, TRUE);
	////////////////////////////////////////////////////////////
}

void addOrderQuest(int code)
{
	
	
	xOrder.xSlotListData[xOrder.totalNumListData].state = ORDERSLOT_STATE_CLOSE;
	xOrder.xSlotListData[xOrder.totalNumListData].friendType = 2;
	xOrder.xSlotListData[xOrder.totalNumListData++].code = code;
	
	////////////////////////////////////////////////////////////
	xEventQueueNet.key[xEventQueueNet.totalNum] = xNetData.userNum;
	xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xOrder.totalNumListData-1;
	xEventQueueNet.code[xEventQueueNet.totalNum] = xOrder.xSlotListData[xOrder.totalNumListData-1].code;
	xEventQueueNet.action[xEventQueueNet.totalNum] = 2;	//0:친구1:NPC 2:QUEST
	xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDORDER, TRUE);
	////////////////////////////////////////////////////////////
	setOrderList();
}


M_Boolean checkOrderQuest(int code)
{
	//불러오기전이면 일단 무조건 성공처리
	if(xOrder.isNetLoad == FALSE)
		return TRUE;
	
	for(int i=0;i<xOrder.totalNumListData;i++)
	{
		if(xOrder.xSlotListData[i].friendType == 2 && xOrder.xSlotListData[i].code == code)
			return TRUE;
	}
	return FALSE;
}


void setCarStorage(int type)
{
	
	xDragScrollCarStorageSlot.pos = 0;
	
	xCar.toalSlot = 0;
		
	
	switch(type)
	{
	case 1:		//구매한차량
		//3번기본차에 대한 처리
		if(xCar.isOpen[3] == TRUE && xCarPark[0].carNum != 3  && xCarPark[1].carNum != 3  && xCarPark[2].carNum != 3)
			xCar.slotCode[xCar.toalSlot++] = 3;
		break;
	}
	
	
	for(int i=0;i<xShop.carTotalNum;i++)
	{
		xCar.isSlotInfo[xCar.toalSlot] = FALSE;
		switch(type)
		{
		case 1:		//구매한차량
			if(xCar.isOpen[xShop.carSlot[i]] == TRUE && xCarPark[0].carNum != xShop.carSlot[i]  && xCarPark[1].carNum != xShop.carSlot[i]  && xCarPark[2].carNum != xShop.carSlot[i])
				xCar.slotCode[xCar.toalSlot++] = xShop.carSlot[i];
			break;
		case 2:		// 미구매차량
			if(xCar.isOpen[xShop.carSlot[i]] == FALSE)
				xCar.slotCode[xCar.toalSlot++] = xShop.carSlot[i];
			break;	//미구매차량
		}
	}
}

void carStorageFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_CARSTORAGE);
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_CARSTORAGE].img);
		M_Boolean isCarUse[CARDATAMAX];
		for(int i=0;i<CARDATAMAX;i++)
			isCarUse[i] = FALSE;
		
		for(int c=0;c<CARKPARKMAX;c++)
		{
			if(xCarPark[c].carNum != DONT)
			{
				isCarUse[xCarPark[c].carNum] = TRUE;
			}
		}
		
		
		for(int i=0;i<CARDATAMAX;i++)
		{
			if(isCarUse[i] == FALSE)
			{
				freeImg(&imgCar[i][0]);
				freeImg(&imgCar[i][1]);
			}
		}
		

		
		
	}
}

void drawCarStorage()
{
	int px = cx;
	int py = cy;
	int pos;
	int iMax;
	int slotCode;
	
	
	
	
	
	
	drawPacker(imgCarStorageBg, px, py, 0, 0, imgW(imgCarStorageBg), imgH(imgCarStorageBg), VH);

	subTemp[XPOS] = px-330;
	subTemp[YPOS] = py-112;
	
	drawPacker(imgCarStorageTabB, subTemp[XPOS], subTemp[YPOS]+(100*xCar.selectTabS), 0, 0, imgW(imgCarStorageTabB), imgH(imgCarStorageTabB), VH);
	
	for(int i=0;i<3;i++)
	{
		drawPacker(imgCarStorageTabIcon, subTemp[XPOS], subTemp[YPOS]+(100*i), 0, imgH(imgCarStorageTabIcon)/3*i, imgW(imgCarStorageTabIcon), imgH(imgCarStorageTabIcon)/3, VH);
		
		/*
		switch(i)
		{
		case 0:sprintf(strTempS, "주문장"); break;
		case 1:sprintf(strTempS, "주차장"); break;
		case 2:sprintf(strTempS, "차량구매"); break;
		}
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+35+6+(100*i), strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
		 */
		
		xCar.xTouchTabS[i].wPos = imgW(imgCarStorageTabB);
		xCar.xTouchTabS[i].hPos = imgH(imgCarStorageTabB);
		xCar.xTouchTabS[i].xPos = subTemp[XPOS]-xCar.xTouchTabS[i].wPos/2;
		xCar.xTouchTabS[i].yPos = subTemp[YPOS]+(100*i)-xCar.xTouchTabS[i].hPos/2;
		
	}
			
	if(xCar.selectTabS == 0)
	{
		if(xOrder.isNew == TRUE)
			setOrderNewSave();
	}

	
	M_Boolean isWaitCar = FALSE;
	for(int c=0;c<CARKPARKMAX;c++)
	{
		
		if(xSaveTemp.lv.oriData >= xCarPark[c].lv)
		{
			if(xCarPark[c].carNum != DONT)
			{
				if(xCarPark[c].state == CARPARK_STATE_READ)
				{
					isWaitCar = TRUE;
				}
			}
		}
	}
	
	
	//세부메뉴
	subTemp[XPOS] = px-160;
	subTemp[YPOS] = py+30;
	
	switch(xCar.selectTabS)
	{
	case 0:
			
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_20_ORDER_MENUTOUCH:
				xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
			
			
			
		if(xOrder.totalNumList == 0)
		{
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"받은 주문장이 없습니다.");
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"친구들과 교류를 통해 주문장을 획득해 보세요.");
			drawLinkInfo(px-180,py+15,0);
		}
						
			
		xDragScrollCarStorageSlot.totalNum = xOrder.totalNumList;//xOrder.totalNumList 이건 주문장 받은 수
		xDragScrollCarStorageSlot.posGab = 214;
		xDragScrollCarStorageSlot.endPos = -(((xDragScrollCarStorageSlot.totalNum-3)*xDragScrollCarStorageSlot.posGab));

		if(xDragScrollCarStorageSlot.totalNum < 3)
			xDragScrollCarStorageSlot.endPos = 0;
			
		iMax = xDragScrollCarStorageSlot.totalNum;
		dragScrollPrc(&xDragScrollCarStorageSlot,1,FALSE);
			
		
		//주문장 받은거 그리는 곳
		gSetClip(true,px-270, 0, 644, lcdH);
		for(int i=0;i<iMax;i++)
		{
			pos = xDragScrollCarStorageSlot.pos+(xDragScrollCarStorageSlot.posGab*i);
			if(subTemp[XPOS]+pos < -xDragScrollCarStorageSlot.posGab || subTemp[XPOS]+pos > lcdW+xDragScrollCarStorageSlot.posGab)
				continue;
			
			slotCode = xOrder.xSlotListData[xOrder.slotNumList[i]].code;
						
			setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
			
			
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].friendType)
			{
			case 0:	//친구
				drawFriendProfile(subTemp[XPOS]+pos-56, subTemp[YPOS]-63, xFriendData[xOrder.xSlotListData[xOrder.slotNumList[i]].friendNum].userNum, 50);
				
				break;
			case 1:	//NPC
				drawNpcPhoto(subTemp[XPOS]+pos-56, subTemp[YPOS]-63,(slotCode%6),50);
				break;
			case 2:	//QUEST
				drawNpcPhoto(subTemp[XPOS]+pos-56, subTemp[YPOS]-63,1,50);
				break;
			}
						
			drawPacker(imgOrderSlot0, subTemp[XPOS]+pos,subTemp[YPOS], 0, 0, imgW(imgOrderSlot0), imgH(imgOrderSlot0), VH);
			
			
			
				
			
			
			
			
			
			
			
			
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].state)
			{
			case ORDERSLOT_STATE_CLOSE:
				drawPacker(imgCarStorageSlot1, subTemp[XPOS]+pos+81,subTemp[YPOS]-165, 0, 0, imgW(imgCarStorageSlot1), imgH(imgCarStorageSlot1), VH);
				break;
			}

			gSetColor(255, 255, 255);
			setFontSize(14);
			gDrawString(subTemp[XPOS]+pos,subTemp[YPOS]-141, xFashionData[xMap.type][xMap.listNum].strName, VH);
			setFontSize(11);
			
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].state)
			{
			case ORDERSLOT_STATE_CLOSE:
				if(isWaitCar == FALSE)
					drawPacker(imgOrderSlot4, subTemp[XPOS]-3+pos,subTemp[YPOS]-10, 0, 0, imgW(imgOrderSlot4), imgH(imgOrderSlot4), VH);
				else
					drawPacker(imgOrderSlot1, subTemp[XPOS]-3+pos,subTemp[YPOS]-10, 0, 0, imgW(imgOrderSlot1), imgH(imgOrderSlot1), VH);
				break;
			}
						
			drawFittingF(subTemp[XPOS]+pos,subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
			
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].state)
			{
			case ORDERSLOT_STATE_CAR:
				setAlpha(210);
				drawPacker(imgOrderSlot2, subTemp[XPOS]-3+pos,subTemp[YPOS]-10, 0, 0, imgW(imgOrderSlot2), imgH(imgOrderSlot2), VH);
				setAlpha(ALPHA_MAX);
				break;
			}
			
			
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].state)
			{
			case ORDERSLOT_STATE_CLOSE:
				if(isWaitCar == FALSE)
					drawPacker(imgOrderSlot5, subTemp[XPOS]-3+pos,subTemp[YPOS]+55, 0, 0, imgW(imgOrderSlot5), imgH(imgOrderSlot5)/3, VH);
				break;
			case ORDERSLOT_STATE_CAR:
				drawPacker(imgOrderSlot5, subTemp[XPOS]-3+pos,subTemp[YPOS]+55, 0, imgH(imgOrderSlot5)/3, imgW(imgOrderSlot5), imgH(imgOrderSlot5)/3, VH);
				break;
			}
									
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].friendType)
			{
			case 0:	//친구
				sprintf(strTempS, "친구주문장");
				break;
			case 1:	//NPC
				sprintf(strTempS, "NPC주문장");
				break;
			case 2:	//QUEST
				sprintf(strTempS, "QUEST주문장");
				
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_20_ORDER_ORDERSELECT:
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+pos;
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						break;
					}
				}
				break;
			}
			
			setFontSize(8);
			gSetColor(82, 49, 38);
			gDrawString(subTemp[XPOS]+pos-45+19, subTemp[YPOS]-80, strTempS, VL);
			setFontSize(11);
			
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].friendType)
			{
			case 0:	//친구
				sprintf(strTempS, "%s",xFriendData[xOrder.xSlotListData[xOrder.slotNumList[i]].friendNum].strNickName);
				break;
			case 1:	//NPC
				sprintf(strTempS, "%s",xNpc[(slotCode%6)].strName);
				break;
			case 2:	//QUEST
				sprintf(strTempS, "%s",xFriendData[xOrder.xSlotListData[xOrder.slotNumList[i]].friendNum].strNickName);
				break;
			}
			gDrawStringBold(subTemp[XPOS]+pos-45+20, subTemp[YPOS]-80+24, strTempS, VL,255,255,255,82,49,38);
			
			//카카오톡 아이콘
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].friendType)
			{
			case 0:	//친구
				xFriendData[xOrder.xSlotListData[xOrder.slotNumList[i]].friendNum].isKakao = checkKakaoFriend(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[i]].friendNum].strKakaoId);
				if(xFriendData[xOrder.xSlotListData[xOrder.slotNumList[i]].friendNum].isKakao == TRUE)
				{
					drawPacker(imgKakaoIcon, subTemp[XPOS]+pos-78,subTemp[YPOS]-78-6, 0, 0, imgW(imgKakaoIcon), imgH(imgKakaoIcon), VH);
				}
				break;
			}
			
			if(xOrder.isKakaoMessage_Net == TRUE)
			{
				if(xOrder.selectSlot == i)
				{
					xGame.isRotate = TRUE;
					xGame.rotateNum = 360-(gameCnt%120)*3;
					drawPacker(imgLoadingIcon0, subTemp[XPOS]+pos, subTemp[YPOS], 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
					xGame.isRotate = FALSE;
				}
				
			}
			
			
			
			//주문시간
			xCar.selectCarPark = getCarParkSlotNum(xOrder.xSlotListData[xOrder.slotNumList[i]].key);
			
			switch(xOrder.xSlotListData[xOrder.slotNumList[i]].state)
			{
			case ORDERSLOT_STATE_CLOSE:
				drawPacker(imgInfoBar5, subTemp[XPOS]+pos, subTemp[YPOS]+105, 0, 0, imgW(imgInfoBar5), imgH(imgInfoBar5), VH);
				drawIcon(subTemp[XPOS]+pos-66,subTemp[YPOS]+105, ICON_TYPE_TIME);
				setFontSize(14);
				gSetColor(82,49,38);
				gDrawString(subTemp[XPOS]+pos+66+4,subTemp[YPOS]+105, "배송대기", VR);
				setFontSize(11);
				break;
			case ORDERSLOT_STATE_CAR:
				drawPacker(imgInfoBar5, subTemp[XPOS]+pos, subTemp[YPOS]+105, 0, 0, imgW(imgInfoBar5), imgH(imgInfoBar5), VH);
				drawIcon(subTemp[XPOS]+pos-66,subTemp[YPOS]+105, ICON_TYPE_TIME);
				drawTimeSprintf(strTempS,(xCarPark[xCar.selectCarPark].endTime-xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_TIME] - xCalendar.nowTime),1);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]+pos+66+4,subTemp[YPOS]+105, strTempS, VR,251,51,23,17,11,11);
				setFontSize(11);
                    
                    
                    
                    
				break;
			}
												
			drawPacker(imgInfoBar5, subTemp[XPOS]+pos, subTemp[YPOS]+105+37, 0, 0, imgW(imgInfoBar5), imgH(imgInfoBar5), VH);
			drawPacker(imgQuestGiftIcon, subTemp[XPOS]+pos-66,subTemp[YPOS]+105+37, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
			gSetColor(82,49,38);
						
			int money = (xFashionData[xMap.type][xMap.listNum].makeNum.oriData * xFashionData[xMap.type][xMap.listNum].sellPrice.oriData)+2000;
			
			if(xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_MONEY] > 0)
				money += money*xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_MONEY]/100;
			
			setCommaNum(strTempS, money);
			sprintf(strTempB,"%sG",strTempS);
			setFontSize(14);
			gDrawString(subTemp[XPOS]+pos+66+4,subTemp[YPOS]+105+37, strTempB, VR);
			setFontSize(11);
			
			if(xQuestTuto.state == QUEST_TUTO_SHOW)
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_20_ORDER_INFOSHOW:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+pos;
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+105+(37/2);
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
		//여기까지
				
		xDragScrollCarStorageSlot.selectNum = (-xDragScrollCarStorageSlot.pos/xDragScrollCarStorageSlot.posGab);
		for(int i=0;i<4;i++)
		{
			xTouchCatalogSNo[i].wPos = imgW(imgOrderSlot5)/2;
			xTouchCatalogSNo[i].hPos = imgH(imgOrderSlot5);
			xTouchCatalogSNo[i].xPos = subTemp[XPOS]+(xDragScrollCarStorageSlot.posGab*i)+(xDragScrollCarStorageSlot.pos%xDragScrollCarStorageSlot.posGab) - xTouchCatalogSNo[i].wPos;
			xTouchCatalogSNo[i].yPos = subTemp[YPOS] - xTouchCatalogSNo[i].hPos/2;
						
			xTouchCatalogSYes[i].wPos = imgW(imgOrderSlot5)/2;
			xTouchCatalogSYes[i].hPos = imgH(imgOrderSlot5);
			xTouchCatalogSYes[i].xPos = subTemp[XPOS]+(xDragScrollCarStorageSlot.posGab*i)+(xDragScrollCarStorageSlot.pos%xDragScrollCarStorageSlot.posGab);
			xTouchCatalogSYes[i].yPos = subTemp[YPOS] - xTouchCatalogSYes[i].hPos/2;
			
			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xTouchCatalogSYes[i].xPos, xTouchCatalogSYes[i].yPos, xTouchCatalogSYes[i].wPos, xTouchCatalogSYes[i].hPos);
			 setAlpha(ALPHA_MAX);
			 
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xTouchCatalogSNo[i].xPos, xTouchCatalogSNo[i].yPos, xTouchCatalogSNo[i].wPos, xTouchCatalogSNo[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
			
			xTouchCatalogS[i].wPos = imgW(imgOrderSlot1);
			xTouchCatalogS[i].hPos = imgH(imgOrderSlot1);
			xTouchCatalogS[i].xPos = subTemp[XPOS]+(xDragScrollCarStorageSlot.posGab*i)+(xDragScrollCarStorageSlot.pos%xDragScrollCarStorageSlot.posGab) - xTouchCatalogS[i].wPos/2;
			xTouchCatalogS[i].yPos = subTemp[YPOS] - xTouchCatalogS[i].hPos/2;
			
			xTouchCatalogDel[i].wPos = 60;
			xTouchCatalogDel[i].hPos = 60;
			xTouchCatalogDel[i].xPos = subTemp[XPOS]+81+(xDragScrollCarStorageSlot.posGab*i)+(xDragScrollCarStorageSlot.pos%xDragScrollCarStorageSlot.posGab) - xTouchCatalogDel[i].wPos/2;
			xTouchCatalogDel[i].yPos = subTemp[YPOS]-165 - xTouchCatalogDel[i].hPos/2;
            
            
            xOrder.xTouchProfile[i].wPos = 40;
            xOrder.xTouchProfile[i].hPos = 40;
            xOrder.xTouchProfile[i].xPos = subTemp[XPOS]-56+(xDragScrollCarStorageSlot.posGab*i)+(xDragScrollCarStorageSlot.pos%xDragScrollCarStorageSlot.posGab) - xOrder.xTouchProfile[i].wPos/2;
            xOrder.xTouchProfile[i].yPos = subTemp[YPOS]-63- xOrder.xTouchProfile[i].hPos/2;
            
            /*
            gSetColor(255, 0, 0);
            setAlpha(100);
            fillRect(xOrder.xTouchProfile[i].xPos, xOrder.xTouchProfile[i].yPos, xOrder.xTouchProfile[i].wPos, xOrder.xTouchProfile[i].hPos);
            setAlpha(ALPHA_MAX);
             */
            
            
			
			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xTouchCatalogDel[i].xPos, xTouchCatalogDel[i].yPos, xTouchCatalogDel[i].wPos, xTouchCatalogDel[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
		}
			
		break;
	case 1:
	case 2:
			
		if(xCar.selectTabS == 1)
		{
			if(xCar.toalSlot == 0)
			{
				xLinkInfo.total = 0;
				sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"더 이상 배치 가능한 차량이 없습니다.");
				drawLinkInfo(px-180,py+15,0);
			}
		}
			
		xDragScrollCarStorageSlot.totalNum = xCar.toalSlot;
		xDragScrollCarStorageSlot.posGab = 214;
		xDragScrollCarStorageSlot.endPos = -(((xDragScrollCarStorageSlot.totalNum-3)*xDragScrollCarStorageSlot.posGab));
		
		
		if(xDragScrollCarStorageSlot.totalNum < 3)
			xDragScrollCarStorageSlot.endPos = 0;
		
		iMax = xDragScrollCarStorageSlot.totalNum;
		
		dragScrollPrc(&xDragScrollCarStorageSlot,1,FALSE);
		
		gSetClip(true,px-270, 0, 644, lcdH);
		for(int i=0;i<iMax;i++)
		{
			pos = xDragScrollCarStorageSlot.pos+(xDragScrollCarStorageSlot.posGab*i);
			if(subTemp[XPOS]+pos < -xDragScrollCarStorageSlot.posGab || subTemp[XPOS]+pos > lcdW+xDragScrollCarStorageSlot.posGab)
				continue;
			
			drawPacker(imgCarStorageSlot0, subTemp[XPOS]+pos,subTemp[YPOS], 0, 0, imgW(imgCarStorageSlot0), imgH(imgCarStorageSlot0), VH);
			

			gSetColor(255, 255, 255);
			setFontSize(14);
			gDrawString(subTemp[XPOS]+pos,subTemp[YPOS]-141, xCarData[xCar.slotCode[i]].strName, VH);
			setFontSize(11);

			
			drawCar(subTemp[XPOS]+pos,subTemp[YPOS]-40, xCar.slotCode[i], MOVETYPE_XPLUS, gameCnt%4, 60);
			
					
			/*
			if(xCar.isSlotInfo[i] == TRUE)
			{
				drawImage(&imgCarStorageSlotInfo, subTemp[XPOS]-3+pos,subTemp[YPOS]-10, 0, 0, imgCarStorageSlotInfo.w, imgCarStorageSlotInfo.h, VH);
				
				gSetColor(255, 255, 255);
				gDrawString(subTemp[XPOS]+pos,subTemp[YPOS]-30+6-10, "차량정보", VH);
				
				gSetColor(178,161,158);
				gDrawString(subTemp[XPOS]-82+pos,subTemp[YPOS]+59-12-30+6-10, "골드", VL);
				gSetColor(255, 255, 255);
				sprintf(strTempS, "+%d %% 획득",xCarData[xCar.slotCode[i]].bonusGold);
				gDrawString(subTemp[XPOS]+78+pos,subTemp[YPOS]+59-12-30+6-10, strTempS, VR);
				
				gSetColor(178,161,158);
				gDrawString(subTemp[XPOS]-82+pos,subTemp[YPOS]+59+12-30+6-10, "경험치", VL);
				gSetColor(255, 255, 255);
				sprintf(strTempS, "+%d %% 획득",xCarData[xCar.slotCode[i]].bonusExp);
				gDrawString(subTemp[XPOS]+78+pos,subTemp[YPOS]+59+12-30+6-10, strTempS, VR);
			}
			*/
			
			if(xSaveTemp.lv.oriData < xCarData[xCar.slotCode[i]].lv)
			{
				drawPacker(imgLock2, subTemp[XPOS]-14+pos, subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
				sprintf(strTempS,"Lv.%d%d", xCarData[xCar.slotCode[i]].lv/10,xCarData[xCar.slotCode[i]].lv%10);
				gDrawStringBold(subTemp[XPOS]-14+7+pos, subTemp[YPOS]+50, strTempS, VL, 255, 255, 255, 82, 49, 38);
			}
			
			switch(xCar.selectTabS)
			{
				case 1:		//주차장
					drawPacker(imgInfoBar5, subTemp[XPOS]+pos, subTemp[YPOS]+125, 0, 0, imgW(imgInfoBar5), imgH(imgInfoBar5), VH);
					drawIcon(subTemp[XPOS]+pos-66,subTemp[YPOS]+125, ICON_TYPE_TIME);
					gSetColor(82,49,38);
					drawTimeSprintf(strTempS,xCarData[xCar.slotCode[i]].timePer.oriData,2);
					setFontSize(14);
					gDrawString(subTemp[XPOS]+pos+66+4,subTemp[YPOS]+125, strTempS, VR);
					setFontSize(11);
					break;
				case 2:		//차량구매
					switch(xCarData[xCar.slotCode[i]].priceType)
					{
					case 0:		//골드
					case 1:		//캐쉬
						drawPacker(imgInfoBar5, subTemp[XPOS]+pos, subTemp[YPOS]+105, 0, 0, imgW(imgInfoBar5), imgH(imgInfoBar5), VH);
						drawIcon(subTemp[XPOS]+pos-66,subTemp[YPOS]+105, ICON_TYPE_TIME);
						gSetColor(82,49,38);
						drawTimeSprintf(strTempS,xCarData[xCar.slotCode[i]].timePer.oriData,2);
						setFontSize(14);
						gDrawString(subTemp[XPOS]+pos+66+4,subTemp[YPOS]+105, strTempS, VR);
						setFontSize(11);
						
						drawPacker(imgInfoBar5, subTemp[XPOS]+pos, subTemp[YPOS]+105+37, 0, 0, imgW(imgInfoBar5), imgH(imgInfoBar5), VH);
						switch(xCarData[xCar.slotCode[i]].priceType)
					{
						case 0:		//골드
							drawIcon(subTemp[XPOS]+pos-66,subTemp[YPOS]+105+37, ICON_TYPE_GOLD);
							break;
						case 1:		//캐쉬
							drawIcon(subTemp[XPOS]+pos-66,subTemp[YPOS]+105+37, ICON_TYPE_LOOK);
							break;
					}
						gSetColor(82,49,38);
						setCommaNum(strTempS, xCarData[xCar.slotCode[i]].price.oriData);
						setFontSize(14);
						gDrawString(subTemp[XPOS]+pos+66+4,subTemp[YPOS]+105+37, strTempS, VR);
						setFontSize(11);
						break;
					case 2:	//QUEST
						drawPacker(imgTextQuest, subTemp[XPOS]+pos,subTemp[YPOS]+105, 0, 0, imgW(imgTextQuest), imgH(imgTextQuest), VH);
						drawPacker(imgInfoBar5, subTemp[XPOS]+pos, subTemp[YPOS]+105+37, 0, 0, imgW(imgInfoBar5), imgH(imgInfoBar5), VH);
						drawIcon(subTemp[XPOS]+pos-66,subTemp[YPOS]+105+37, ICON_TYPE_TIME);
						gSetColor(82,49,38);
						drawTimeSprintf(strTempS,xCarData[xCar.slotCode[i]].timePer.oriData,2);
						setFontSize(14);
						gDrawString(subTemp[XPOS]+pos+66+4,subTemp[YPOS]+105+37, strTempS, VR);
						setFontSize(11);
						break;
				}
					break;
			}
		}
		
		gSetClip(false,0, 0, lcdW, lcdH);
		
		
		//거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
		for(int i=0;i<CARDATAMAX;i++)
		{
			xCar.xTouchChangeBtn[i].wPos = imgW(imgCarStorageSlot0);
			xCar.xTouchChangeBtn[i].hPos = imgH(imgCarStorageSlot0);
			xCar.xTouchChangeBtn[i].xPos = subTemp[XPOS]+(xDragScrollCarStorageSlot.posGab*i)+(xDragScrollCarStorageSlot.pos) - xCar.xTouchChangeBtn[i].wPos/2;
			xCar.xTouchChangeBtn[i].yPos = subTemp[YPOS] - xCar.xTouchChangeBtn[i].hPos/2;
			
			
			xCar.xTouchInfoBtn[i].wPos = 60;
			xCar.xTouchInfoBtn[i].hPos = 60;
			xCar.xTouchInfoBtn[i].xPos = subTemp[XPOS]+60+(xDragScrollCarStorageSlot.posGab*i)+(xDragScrollCarStorageSlot.pos) - xCar.xTouchInfoBtn[i].wPos/2;
			xCar.xTouchInfoBtn[i].yPos = subTemp[YPOS]-70 - xCar.xTouchInfoBtn[i].hPos/2;
			
			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xCar.xTouchInfoBtn[i].xPos, xCar.xTouchInfoBtn[i].yPos, xCar.xTouchInfoBtn[i].wPos, xCar.xTouchInfoBtn[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
			
			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xCar.xTouchChangeBtn[i].xPos, xCar.xTouchChangeBtn[i].yPos, xCar.xTouchChangeBtn[i].wPos, xCar.xTouchChangeBtn[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
		}

		break;
	}
	
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = px+365-xTouchClr.wPos/2;
	xTouchClr.yPos = py-200-xTouchClr.hPos/2;


	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	*/

}

void drawOrderRecv()
{
	int px = cx;
	int py = cy;
	
	setMapData(xOrder.xSlotNumRecv[0].code);
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	drawPacker(imgOrderTitle, px, py-208, 0, 0, imgW(imgOrderTitle), imgH(imgOrderTitle), VH);
		
	subTemp[XPOS] = px+108;
	subTemp[YPOS] = py-96;
	sprintf(strTempS, "의상도착");
	
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VH, 97, ALPHA_MAX, 227, 44, 27, 26);
	gSetColor(44, 27, 26);
	
	if(xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_RECV] > 0)
		sprintf(strTempB, "%s님이\n<%s %d벌(+%d)>\n을 보내셨습니다",xFriendData[xOrder.xSlotNumRecv[0].friendNum].strNickName,xFashionData[xMap.type][xMap.listNum].strName,xFashionData[xMap.type][xMap.listNum].makeNum.oriData,xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_RECV]);
	else
		sprintf(strTempB, "%s님이\n<%s %d벌>\n을 보내셨습니다",xFriendData[xOrder.xSlotNumRecv[0].friendNum].strNickName,xFashionData[xMap.type][xMap.listNum].strName,xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempB, VH);
	setFontSize(11);	
	drawPacker(imgTrendInfoSlot, px-160,py-45, 0, 0, imgW(imgTrendInfoSlot), imgH(imgTrendInfoSlot), VH);
	drawFittingF(px-160,py-45, (xMap.type*1000)+xMap.listNum, 100);
	drawFriendProfile(px-160+80-2,py-45+80-3, xFriendData[xOrder.xSlotNumRecv[0].friendNum].userNum, 76);
	drawPacker(imgPhotoBg, px-160+80,py-45+80, 0, 0, imgW(imgPhotoBg), imgH(imgPhotoBg), VH);

	
	
		
	drawBtn(px, py+154, BTN_OK_CONFIRM);
}

void drawCarOrderInfo()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
		
		
	int orderSlotNum = getOrderSlotNum(xCarPark[xCar.selectCarPark].orderKey);
	setMapData(xOrder.xSlotListData[orderSlotNum].code);
	
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_20_ORDER_CARINFOSELECT:
			if(xOrder.xSlotListData[orderSlotNum].friendType == 2)
			{
				if(xCarPark[xCar.selectCarPark].endTime - xCalendar.nowTime > 3)
					xCarPark[xCar.selectCarPark].endTime = xCalendar.nowTime+3;
			}
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
		
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	drawPacker(imgOrderTitle, px, py-208, 0, 0, imgW(imgOrderTitle), imgH(imgOrderTitle), VH);
	
	subTemp[XPOS] = px+108;
	subTemp[YPOS] = py-136;
	
	setFontSize(14);
	
	if(xOrder.xSlotListData[orderSlotNum].friendType == 0)
	{
		sprintf(strTempS, "%s님에게",xFriendData[xOrder.xSlotListData[orderSlotNum].friendNum].strNickName);
		sprintf(strTempB, "%s를",xFashionData[xMap.type][xMap.listNum].strName);
	}
	else if(xOrder.xSlotListData[orderSlotNum].friendType == 1)
	{
		sprintf(strTempS, "%s님에게",xNpc[(xOrder.xSlotListData[orderSlotNum].code%6)].strName);
		sprintf(strTempB, "%s를",xFashionData[xMap.type][xMap.listNum].strName);
	}
	else
	{
		sprintf(strTempS, "%s님에게","레베카");
		sprintf(strTempB, "%s를",xFashionData[xMap.type][xMap.listNum].strName);
	}
	
	gDrawString(subTemp[XPOS], subTemp[YPOS]+52-30, strTempS, VH);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+52, strTempB, VH);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+52+30, "배송중입니다.", VH);
	setFontSize(11);
	
	
	drawImage(&imgLvUp[2], px-160,py-45, 0, 0, imgLvUp[2].w, imgLvUp[2].h, VH);
	drawFittingF(px-160,py-45, xOrder.xSlotListData[orderSlotNum].code, 100);
	
	
	
	
	if(xOrder.xSlotListData[orderSlotNum].friendType == 1)
		drawNpcPhoto(px-160+80,py-45+80,(xOrder.xSlotListData[orderSlotNum].code%6),86);
	else
		drawFriendProfile(px-160+80,py-45+80, xFriendData[xOrder.xSlotListData[orderSlotNum].friendNum].userNum, 86);
	drawPacker(imgPhotoBg, px-160+80+2,py-45+80+4, 0, 0, imgW(imgPhotoBg), imgH(imgPhotoBg), VH);

		
	drawBtn(px, py+158, BTN_OK_CONFIRM);
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_20_ORDER_CARINFOEXIT:
			xTutoInfo.x[xTutoInfo.totalNum] = px;
			xTutoInfo.y[xTutoInfo.totalNum] = py+158;
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
	
	
	
	subTemp[XPOS] = px+108;
	subTemp[YPOS] = py-10;
	
	
	drawPacker(imgInfoBar6, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgInfoBar6), imgH(imgInfoBar6), VH);
	drawIcon(subTemp[XPOS]-66,subTemp[YPOS], ICON_TYPE_TIME);
	

	
	int endTimeTemp = xCarPark[xCar.selectCarPark].endTime;
	if(xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_TIME] > 0)
		endTimeTemp -= xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_TIME];
		
	drawTimeSprintf(strTempS,endTimeTemp - xCalendar.nowTime,1);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]+66+4,subTemp[YPOS], strTempS, VR,255,76,28,44,27,26);
	setFontSize(11);
		
	int fastCash = getFastTimeCash(xCarPark[xCar.selectCarPark].endTime - xCalendar.nowTime);
				
	subTemp[XPOS] = px+108;
	subTemp[YPOS] = py+60;
			
	drawPacker(imgQuestBtn1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestBtn1)/2, imgW(imgQuestBtn1), imgH(imgQuestBtn1)/2, VH);
	drawIcon(subTemp[XPOS]-2-8, subTemp[YPOS]-3-12, ICON_TYPE_LOOK);
	setFontSize(14);
	sprintf(strTempS,"%d",fastCash);
	gDrawStringBold(subTemp[XPOS]-2+8, subTemp[YPOS]-3-12, strTempS, VH, 255, 255, 255, 186, 70, 10);
	gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-3+12, "즉시완료", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
			
	
	xQuestInfo.xTouchFastCash.wPos = imgW(imgQuestBtn1);
	xQuestInfo.xTouchFastCash.hPos = imgH(imgQuestBtn1)/2;
	xQuestInfo.xTouchFastCash.xPos = subTemp[XPOS]-xQuestInfo.xTouchFastCash.wPos/2;
	xQuestInfo.xTouchFastCash.yPos = subTemp[YPOS]-xQuestInfo.xTouchFastCash.hPos/2;
}




int getOrderSlotNum(int key)
{

	
	int resultSlotNum = DONT;
	
	
	for(int i=0;i<xOrder.totalNumListData;i++)
	{
		if(xOrder.xSlotListData[i].key == key)
		{
			resultSlotNum = i;
			break;
		}
	}
		
	
	if(resultSlotNum == DONT)
	{
		//if(xOrder.isNetLoad == TRUE)
		//	printf("주문장 검색 실패 확인필요!!!!");
	}
	return resultSlotNum;
}



void drawFriendProfile(int x,int y,int userNum,int reSize)
{
	int slotNum = DONT;
	
	if(reSize != 100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = reSize;
	}
	
	//유저넘버 슬롯번호 찾기
	slotNum = getFriendSlot(userNum);
	
	if(slotNum == DONT || xFriendData[slotNum].strUrl[0] == 0 || xFriendData[slotNum].strUrl[0] == '0')
	{
//		if(xFriendData[slotNum].sex == 0)
//			drawPacker(imgUserPhoto0, x, y, 0, 0, imgW(imgUserPhoto0), imgH(imgUserPhoto0), VH);
//		else
//			drawPacker(imgUserPhoto1, x, y, 0, 0, imgW(imgUserPhoto1), imgH(imgUserPhoto1), VH);
        
        drawImage(&imgNonProfile, x, y, 0, 0, imgNonProfile.w, imgNonProfile.h, VH);
        
		//printf("여기들어오면 에러 유저등록 다시 확인하자");
	}
	else
	{
		//이미지 로딩여부 확인
		if(imgFriend[slotNum].texture != NULL)
		{
			drawImage(&imgFriend[slotNum], x, y, 0, 0, imgFriend[slotNum].w, imgFriend[slotNum].h, VH);
		}
		else
		{
//			if(xFriendData[slotNum].sex == 0)
//				drawPacker(imgUserPhoto0, x, y, 0, 0, imgW(imgUserPhoto0), imgH(imgUserPhoto0), VH);
//			else
//				drawPacker(imgUserPhoto1, x, y, 0, 0, imgW(imgUserPhoto1), imgH(imgUserPhoto1), VH);
            
            drawImage(&imgNonProfile, x, y, 0, 0, imgNonProfile.w, imgNonProfile.h, VH);
			
			//이미지다운상태확인(등록,다운중,다운완료)
			switch(xFriendData[slotNum].downLoadImgState)
			{
			case FRIENDDOWNLOADIMG_STATE_DONT:
                if(++xFriendData[slotNum].waitCnt > 10)
                {
				//대기상태라면 이미지 다운로드 큐에 등록해주자
				//////////////////////////////////////////////////////////////////
				xEventQueueNet.slotNum[xEventQueueNet.totalNum] = slotNum;
				addEventQueueNet(0, 0, NETQUEUE_TYPE_FRIENDIMGDOWNLOAD, FALSE);
				//////////////////////////////////////////////////////////////////
				xFriendData[slotNum].downLoadImgState = FRIENDDOWNLOADIMG_STATE_EVENT;
                }
				break;
			case FRIENDDOWNLOADIMG_STATE_EVENT:
			case FRIENDDOWNLOADIMG_STATE_DOWNING:
				//다운중 상태라면 완료 될때까지 기다리자
				break;
			case FRIENDDOWNLOADIMG_STATE_OK:
				//다운완료 상태라면 loadImg
				sprintf(strTempS, "friend%d.png",userNum);
				loadImgDocuments(strTempS, &imgFriend[slotNum]);
				break;
			}
		}
	}
	xGame.isReSizeDraw = FALSE;
}

int addFriendData(int userNum)
{
	int slotNum = DONT;
	if(xFriend.totalNumFriendData < FRIENDMAX)
	{
		slotNum = xFriend.totalNumFriendData;
		xFriendData[slotNum].userNum = userNum;
		xFriendData[slotNum].downLoadImgState = FRIENDDOWNLOADIMG_STATE_DONT;		
		xFriend.totalNumFriendData++;
	}
	return slotNum;
}

int getFriendSlot(int userNum)
{
	int userNumTemp;
	int result = DONT;
	for(int i=0;i<xFriend.totalNumFriendData;i++)
	{
		
		userNumTemp = xFriendData[i].userNum;
		if(userNumTemp == userNum)
		{
			result = i;
			break;
		}
	}
	return result;
}


int getFriendSlot_KAKAOID(char* strId)
{
	int result = DONT;
	for(int i=0;i<xFriend.totalNumFriendData;i++)
	{
		if(strcmp(xFriendData[i].strKakaoId, strId) == 0)
		{
			result = i;
			break;
		}
	}
	return result;
}




void drawFriendList()
{
	int px = 0;
	int py = lcdH-imgH(imgFriendBg);
	int iMax;
	int pos;
	
	
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		if(xWorldMap.isFriendMap == FALSE)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_28_ADDFRIEND_ADDEXIT:
				if(xFriend.state == FRIEND_STATE_PLAY)
					xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
	}
    
	drawBgFillRect();
	drawPacker(imgFriendBg, px, py, 0, 0, imgW(imgFriendBg), imgH(imgFriendBg), TL);
		
	//리스트,팔로우
	for(int i=0;i<3;i++)
	{
        switch(i)
        {
        case 0: //리스트
            subTemp[XPOS] = px+734+(1*156);
            subTemp[YPOS] = py+22;
            break;
        case 1: //팔로워
            subTemp[XPOS] = px+734+(2*156);
            subTemp[YPOS] = py+22;
            break;
            break;
        case 2: //즐겨찾기
            subTemp[XPOS] = px+734;
            subTemp[YPOS] = py+22;
            break;
        }
		
		drawPacker(imgFriendTab, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgFriendTab)/2*(xFriend.selectTabB == i?1:0), imgW(imgFriendTab), imgH(imgFriendTab)/2, VH);
		
		switch(i)
		{
		case 0:
			drawPacker(imgFriendTabIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFriendTabIcon0), imgH(imgFriendTabIcon0), VH);
			break;
		case 1:
			drawPacker(imgFriendTabIcon1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFriendTabIcon1), imgH(imgFriendTabIcon1), VH);
			break;
        case 2:
            drawPacker(imgFriendTabIcon2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFriendTabIcon2), imgH(imgFriendTabIcon2), VH);
            break;
		}
		
		xFriend.xTouchTabB[i].wPos = imgW(imgFriendTab);
		xFriend.xTouchTabB[i].hPos = imgH(imgFriendTab)/2;
		xFriend.xTouchTabB[i].xPos = subTemp[XPOS]-xFriend.xTouchTabB[i].wPos/2;
		xFriend.xTouchTabB[i].yPos = subTemp[YPOS]-xFriend.xTouchTabB[i].hPos/2;
		
		/*
		setAlpha(100);
		gSetColor(255, 0, 0);
		fillRect(xFriend.xTouchTabB[i].xPos, xFriend.xTouchTabB[i].yPos, xFriend.xTouchTabB[i].wPos, xFriend.xTouchTabB[i].hPos);
		setAlpha(ALPHA_MAX);
		 */
		
	}
		
		
	//랜덤친구
	subTemp[XPOS] = px+920;
	subTemp[YPOS] = py+72;
	drawPacker(imgFriendRandomBtn, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgFriendRandomBtn)/2, imgW(imgFriendRandomBtn), imgH(imgFriendRandomBtn)/2, VH);
	xFriend.xTouchRandomBtn.wPos = imgW(imgFriendRandomBtn);
	xFriend.xTouchRandomBtn.hPos = imgH(imgFriendRandomBtn)/2;
	xFriend.xTouchRandomBtn.xPos = subTemp[XPOS]-xFriend.xTouchRandomBtn.wPos/2;
	xFriend.xTouchRandomBtn.yPos = subTemp[YPOS]-xFriend.xTouchRandomBtn.hPos/2;
	
	//편집
	subTemp[XPOS] = px+920+130;
	subTemp[YPOS] = py+72;
	
	int imgDelNum = 1;
	if(xFriend.isDelMode == TRUE)
		imgDelNum = 0;
	else if(xFriend.selectTabB != 0)
		imgDelNum = 0;
		
		
	drawPacker(imgFriendEditBtn, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgFriendEditBtn)/2*imgDelNum, imgW(imgFriendEditBtn), imgH(imgFriendEditBtn)/2, VH);
	xFriend.xTouchEditBtn.wPos = imgW(imgFriendEditBtn);
	xFriend.xTouchEditBtn.hPos = imgH(imgFriendEditBtn)/2;
	xFriend.xTouchEditBtn.xPos = subTemp[XPOS]-xFriend.xTouchEditBtn.wPos/2;
	xFriend.xTouchEditBtn.yPos = subTemp[YPOS]-xFriend.xTouchEditBtn.hPos/2;
	
	switch(xFriend.selectTabB)
	{
	case 0:
    case 2:
		//아이콘 설명
		subTemp[XPOS] = px+300;
		subTemp[YPOS] = py+72;
		drawPacker(imgFriendInfoIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFriendInfoIcon0), imgH(imgFriendInfoIcon0), VH);
		gDrawStringBold(subTemp[XPOS]+30, subTemp[YPOS], "헬프 가능", VL, 255, 255, 255, 82, 49, 38);
		
		subTemp[XPOS] = px+300+145;
		subTemp[YPOS] = py+72;
		drawPacker(imgFriendInfoIcon1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFriendInfoIcon1), imgH(imgFriendInfoIcon1), VH);
		gDrawStringBold(subTemp[XPOS]+30, subTemp[YPOS], "주문배송 요청 가능(Lv.12)", VL, 255, 255, 255, 82, 49, 38);
		break;
	case 1:
		subTemp[XPOS] = px+300;
		subTemp[YPOS] = py+72;
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "나를 따르는 친구입니다.친구 추가를 해주세요.", VL, 255, 255, 255, 82, 49, 38);
		break;
	}
		
    
    //친구수
    subTemp[XPOS] = cx+240;
    subTemp[YPOS] = py+72;
    
    drawImage(&imgFriendMaxIcon, subTemp[XPOS]-60, subTemp[YPOS], 0, 0, imgFriendMaxIcon.w, imgFriendMaxIcon.h, VH);
    sprintf(strTempS, "%d/%d",xFriend.totalFriend,150);
    gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 255, 255, 255, 82, 49, 38);
        
    
    
	//세부메뉴
	switch(xFriend.selectTabB)
	{
	case 0:	//리스트
    case 2:	//즐겨찾기
		xDragScrollFriendSlot.totalNum = xFriend.totalNumList;
		break;
	case 1:	//팔로워
		xDragScrollFriendSlot.totalNum = xFriend.totalNumListFollow;
		break;
	}
	
	//xFriendData[xFriend.dataSlotNumList[i]].socialCount
	//xFriendData[xFriend.dataSlotNumList[i]].todayOrder
	//xFriendData[xFriend.dataSlotNumList[i]].isVote
				
	xDragScrollFriendSlot.posGab = 156;
	
	xDragScrollFriendSlot.endPos = -(((((xDragScrollFriendSlot.totalNum+1)/2)-7)*xDragScrollFriendSlot.posGab));
	
	if(((xDragScrollFriendSlot.totalNum+1)/2) < 7)
		xDragScrollFriendSlot.endPos = 0;
	
	iMax = xDragScrollFriendSlot.totalNum;
	dragScrollPrc(&xDragScrollFriendSlot,1,FALSE);
	
	if(iMax == 0)
	{
		isSubTemp[13] = FALSE;
		for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
		{
			if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFRIENDLIST)
			{
				isSubTemp[13] = TRUE;
				break;
			}
		}
		if(isSubTemp[13] == FALSE)
		{
			
			switch(xFriend.selectTabB)
			{
			case 0:
				if(0 == xFriend.nowPageNumList)
				{
					//////////////////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumList;
					xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumList;
					xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//0:친구리스트1:팔로잉
					++xFriend.nowPageNumList;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
					//////////////////////////////////////////////////////////////////////////////////////////
				}
				break;
			case 1:
				if(0 == xFriend.nowPageNumListFollow)
				{
					//////////////////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumListFollow;
					xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumListFollow;
					xEventQueueNet.action[xEventQueueNet.totalNum] = 1;		//0:친구리스트1:팔로잉
					++xFriend.nowPageNumListFollow;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
					//////////////////////////////////////////////////////////////////////////////////////////
				}
				else
				{
					xLinkInfo.total = 0;
					sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"따르는 친구가 없습니다.");
					sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"소셜 활동이나 패션쇼를 통해 자신을 더욱 어필해 보세요.");
					drawLinkInfo(px+180,py+300,0);
				}
				break;
            case 2:
                if(0 == xFriend.nowPageNumList)
                {
                    //////////////////////////////////////////////////////////////////////////////////////////
                    xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumList;
                    xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumList;
                    xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//0:친구리스트1:팔로잉
                    ++xFriend.nowPageNumList;
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
                    //////////////////////////////////////////////////////////////////////////////////////////
                }
                else
                {
                xLinkInfo.total = 0;
                sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"즐겨찾기에 추가한 친구가 없습니다.");
                sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"친구리스트의 별표아이콘 즐겨찾기버튼을 이용해 추가해주세요");
                drawLinkInfo(px+180,py+300,0);
                }
                break;
			}
		}
	}
			
	for(int i=0;i<iMax;i++)
	{
		pos = xDragScrollFriendSlot.pos+(xDragScrollFriendSlot.posGab*(i/2));
		
		subTemp[XPOS] = px+90+pos;
		subTemp[YPOS] = py+209+((i%2)*208);
		if(subTemp[XPOS] < -xDragScrollFriendSlot.posGab || subTemp[XPOS] > lcdW+xDragScrollFriendSlot.posGab)
			continue;
				
		switch(xFriend.selectTabB)
		{
		case 0:
        case 2:
			if(xFriend.dataSlotNumList[i] == DONT)
			{
				drawPacker(imgFriendSlot2, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgFriendSlot2), imgH(imgFriendSlot2), VH);
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					if(xWorldMap.isFriendMap == FALSE)
					{
						switch(xQuestTuto.nowNum)
						{
							case TUTO_28_ADDFRIEND_MENUTOUCH:
								xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
								xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
								break;
						}
					}
				}
			}
			else
			{
				drawFriendProfile(subTemp[XPOS],subTemp[YPOS],xFriendData[xFriend.dataSlotNumList[i]].userNum,130);
				
				if(xFriendData[xFriend.dataSlotNumList[i]].isPM == TRUE || xFriendData[xFriend.dataSlotNumList[i]].isAlliance == TRUE)
					drawPacker(imgFriendSlot1, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgFriendSlot1), imgH(imgFriendSlot1), VH);
				else
					drawPacker(imgFriendSlot0, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgFriendSlot0), imgH(imgFriendSlot0), VH);
				
				if(xFriendData[xFriend.dataSlotNumList[i]].isKakao == TRUE)
					drawPacker(imgFriendKakaoIcon, subTemp[XPOS]-48,subTemp[YPOS]-48, 0, 0, imgW(imgFriendKakaoIcon), imgH(imgFriendKakaoIcon), VH);
				
				if(xFriendData[xFriend.dataSlotNumList[i]].friendState == 1)
					drawPacker(imgFriendVisitIcon, subTemp[XPOS]+48,subTemp[YPOS]-48, 0, 0, imgW(imgFriendVisitIcon), imgH(imgFriendVisitIcon), VH);
				
				if(xFriendData[xFriend.dataSlotNumList[i]].socialCount > 0)
					drawPacker(imgFriendInfoIcon0, subTemp[XPOS]-48,subTemp[YPOS]+48, 0, 0, imgW(imgFriendInfoIcon0), imgH(imgFriendInfoIcon0), VH);
				
				if(xFriendData[xFriend.dataSlotNumList[i]].todayOrder == FALSE)
					drawPacker(imgFriendInfoIcon1, subTemp[XPOS]+48,subTemp[YPOS]+48, 0, 0, imgW(imgFriendInfoIcon1), imgH(imgFriendInfoIcon1), VH);
                
                if(xFriendData[xFriend.dataSlotNumList[i]].isPM == false)
                {
                    if(xFriendData[xFriend.dataSlotNumList[i]].isBookMark == true)
                        drawImage(&imgFriendList[1], subTemp[XPOS]-48,subTemp[YPOS]-48, 0, imgFriendList[1].h/2, imgFriendList[1].w, imgFriendList[1].h/2, VH);
                    else
                        drawImage(&imgFriendList[1], subTemp[XPOS]-48,subTemp[YPOS]-48, 0, 0, imgFriendList[1].w, imgFriendList[1].h/2, VH);
                    
                    if(xFriendData[xFriend.dataSlotNumList[i]].loginDay != 0)
                    {
                        drawImage(&imgFriendList[0], subTemp[XPOS],subTemp[YPOS]-48, 0, 0, imgFriendList[0].w, imgFriendList[0].h, VH);
                        
                        if(xFriendData[xFriend.dataSlotNumList[i]].loginDay == DONT)
                            sprintf(strTempS, "미등록");
                        else
                            sprintf(strTempS, "%d일전",xFriendData[xFriend.dataSlotNumList[i]].loginDay);
                                
                        setFontSizeORI(16);
                        gSetColor(255, 255, 255);
                        gDrawString(subTemp[XPOS],subTemp[YPOS]-48, strTempS, VH);
                        setFontSize(11);
                    }
                }
                
				//drawImage(&imgFriendStateIcon, subTemp[XPOS]-45+pos,subTemp[YPOS]+74,	imgFriendStateIcon.w/2*xFriendData[xFriend.dataSlotNumList[i]].todayVisit, 0, imgFriendStateIcon.w/2, imgFriendStateIcon.h/3, VH);
				//drawImage(&imgFriendStateIcon, subTemp[XPOS]+pos,subTemp[YPOS]+74,		imgFriendStateIcon.w/2*xFriendData[xFriend.dataSlotNumList[i]].todayOrder, imgFriendStateIcon.h/3, imgFriendStateIcon.w/2, imgFriendStateIcon.h/3, VH);
				//drawImage(&imgFriendStateIcon, subTemp[XPOS]+45+pos,subTemp[YPOS]+74,	imgFriendStateIcon.w/2*xFriendData[xFriend.dataSlotNumList[i]].friendState, imgFriendStateIcon.h/3*2, imgFriendStateIcon.w/2, imgFriendStateIcon.h/3, VH);
				
				
				sprintf(strTempS, "%s",xFriendData[xFriend.dataSlotNumList[i]].strNickName);
				gSetColor(255, 255, 255);
				gDrawString(subTemp[XPOS],subTemp[YPOS]-88, strTempS, VH);
				
				sprintf(strTempS, "LV %d",xFriendData[xFriend.dataSlotNumList[i]].lv);
				gSetColor(82, 49, 38);
				gDrawString(subTemp[XPOS],subTemp[YPOS]+78, strTempS, VH);
				
				
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					if(xFriend.state == FRIEND_STATE_PLAY)
					{
						switch(xQuestTuto.nowNum)
						{
							case TUTO_7_RESULT:
							case TUTO_27_HELP_FLOORMOVE0:
							case TUTO_17_MAIL_FRIEND:
							case TUTO_18_FRIENDMODEL_MENUTOUCH:
								if(xFriendData[xFriend.dataSlotNumList[i]].isPM == TRUE)
								{
									xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
									xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
								}
								break;
							case TUTO_28_ADDFRIEND_ADDRESULT:
								if(xQuestTuto.tempValue == xFriendData[xFriend.dataSlotNumList[i]].userNum)
								{
									xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
									xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
								}
								break;
						}
					}
				}
				
				
				if((i+1)/10 >= xFriend.nowPageNumList)
				{
					isSubTemp[13] = FALSE;
					for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
					{
						if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFRIENDLIST)
						{
							isSubTemp[13] = TRUE;
							break;
						}
					}
					if(isSubTemp[13] == FALSE)
					{
						//////////////////////////////////////////////////////////////////////////////////////////
						xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumList;
						xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumList;
						xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//0:친구리스트1:팔로잉
						++xFriend.nowPageNumList;
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
						//////////////////////////////////////////////////////////////////////////////////////////
					}
				}
				if(xFriend.isDelMode == TRUE && xFriendData[xFriend.dataSlotNumList[i]].isPM == FALSE && xFriendData[xFriend.dataSlotNumList[i]].isAlliance == FALSE)
                {
                    if(xFriend.selectTabB == 0)
                        drawPacker(imgFriendDelBtn, subTemp[XPOS]+50,subTemp[YPOS]-96, 0, 0, imgW(imgFriendDelBtn), imgH(imgFriendDelBtn), VH);
                }
												
			}
			break;
		case 1:
			drawFriendProfile(subTemp[XPOS],subTemp[YPOS],xFriendData[xFriend.dataSlotNumListFollow[i]].userNum,130);
			drawPacker(imgFriendSlot0, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgFriendSlot0), imgH(imgFriendSlot0), VH);
							
			sprintf(strTempS, "%s",xFriendData[xFriend.dataSlotNumListFollow[i]].strNickName);
			gSetColor(255, 255, 255);
			gDrawString(subTemp[XPOS],subTemp[YPOS]-88, strTempS, VH);
			
			sprintf(strTempS, "LV %d",xFriendData[xFriend.dataSlotNumListFollow[i]].lv);
			gSetColor(82, 49, 38);
			gDrawString(subTemp[XPOS],subTemp[YPOS]+78, strTempS, VH);
				
			if(xFriendData[xFriend.dataSlotNumListFollow[i]].isKakao == TRUE)
				drawPacker(imgFriendKakaoIcon, subTemp[XPOS]-48, subTemp[YPOS]-48, 0, 0, imgW(imgFriendKakaoIcon), imgH(imgFriendKakaoIcon), VH);
				
			if(xFriendData[xFriend.dataSlotNumListFollow[i]].isAdd == FALSE)
				drawPacker(imgFriendAdd0, subTemp[XPOS]+34, subTemp[YPOS]+34, 0, 0, imgW(imgFriendAdd0), imgH(imgFriendAdd0), VH);
			else
			{
				drawPacker(imgFriendAdd2, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgFriendAdd2), imgH(imgFriendAdd2), VH);
				drawPacker(imgFriendAdd1, subTemp[XPOS], subTemp[YPOS]+40, 0, 0, imgW(imgFriendAdd1), imgH(imgFriendAdd1), VH);
			}
							
			if((i+1)/10 >= xFriend.nowPageNumListFollow)
			{
				isSubTemp[13] = FALSE;
				for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
				{
					if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFRIENDLIST)
					{
						isSubTemp[13] = TRUE;
						break;
					}
				}
				if(isSubTemp[13] == FALSE)
				{
					//////////////////////////////////////////////////////////////////////////////////////////
					xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumListFollow;
					xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumListFollow;
					xEventQueueNet.action[xEventQueueNet.totalNum] = 1;		//0:친구리스트1:팔로잉
					++xFriend.nowPageNumListFollow;
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
					//////////////////////////////////////////////////////////////////////////////////////////
				}
			}
			break;
		}
	}
		
	xDragScrollFriendSlot.selectNum = (-xDragScrollFriendSlot.pos/xDragScrollFriendSlot.posGab);
	if(xDragScrollFriendSlot.selectNum < 0)
		xDragScrollFriendSlot.selectNum = 0;
	
	for(int i=0;i<16;i++)
	{
		subTemp[XPOS] = px+90+(i/2*xDragScrollFriendSlot.posGab);
		subTemp[YPOS] = py+206+((i%2)*208);
				
		
		
		
		xFriend.xTouchSelectSlot[i].wPos = imgW(imgFriendSlot0);
		xFriend.xTouchSelectSlot[i].hPos = imgH(imgFriendSlot0);
		xFriend.xTouchSelectSlot[i].xPos = subTemp[XPOS]+(xDragScrollFriendSlot.pos%xDragScrollFriendSlot.posGab) - xFriend.xTouchSelectSlot[i].wPos/2;
		xFriend.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xFriend.xTouchSelectSlot[i].hPos/2;
		
		xFriend.xTouchSelectDelBtn[i].wPos = imgW(imgFriendDelBtn);
		xFriend.xTouchSelectDelBtn[i].hPos = imgH(imgFriendDelBtn);
		xFriend.xTouchSelectDelBtn[i].xPos = subTemp[XPOS]+50+(xDragScrollFriendSlot.pos%xDragScrollFriendSlot.posGab) - xFriend.xTouchSelectDelBtn[i].wPos/2;
		xFriend.xTouchSelectDelBtn[i].yPos = subTemp[YPOS]-96 - xFriend.xTouchSelectDelBtn[i].hPos/2;
		
        
        xFriend.xTouchSelectBookMark[i].wPos = 40;
        xFriend.xTouchSelectBookMark[i].hPos = 40;
        xFriend.xTouchSelectBookMark[i].xPos = subTemp[XPOS]-45+(xDragScrollFriendSlot.pos%xDragScrollFriendSlot.posGab) - xFriend.xTouchSelectBookMark[i].wPos/2;
        xFriend.xTouchSelectBookMark[i].yPos = subTemp[YPOS]-45 - xFriend.xTouchSelectBookMark[i].hPos/2;
        
        
        
        
        
        
        /*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xFriend.xTouchSelectSlot[i].xPos, xFriend.xTouchSelectSlot[i].yPos, xFriend.xTouchSelectSlot[i].wPos, xFriend.xTouchSelectSlot[i].hPos);
		fillRect(xFriend.xTouchSelectDelBtn[i].xPos, xFriend.xTouchSelectDelBtn[i].yPos, xFriend.xTouchSelectDelBtn[i].wPos, xFriend.xTouchSelectDelBtn[i].hPos);
        
        fillRect(xFriend.xTouchSelectBookMark[i].xPos, xFriend.xTouchSelectBookMark[i].yPos, xFriend.xTouchSelectBookMark[i].wPos, xFriend.xTouchSelectBookMark[i].hPos);
        
        
		setAlpha(ALPHA_MAX);
         */


	}
	 	
	xTouchClr.xPos = 0;
	xTouchClr.yPos = 0;
	xTouchClr.wPos = lcdW;
	xTouchClr.hPos = 160;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
    
    
    setFastScroll(cx-480,lcdH-32,960,30,&xDragScrollFriendSlot);
    drawFastScroll();
    
}

void drawFriendAdd()
{
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		if(xWorldMap.isFriendMap == FALSE)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_28_ADDFRIEND_MENUTOUCH:
				xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
	}
				
	int px = cx;
	int py = cy+20;
	int iMax;
	int pos;
		
	drawBgFillRect();
	
	drawPacker(imgAddFriendBg, px, py, 0, 0, imgW(imgAddFriendBg), imgH(imgAddFriendBg), VH);
	
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = px+280-xTouchClr.wPos/2;
	xTouchClr.yPos = py-248-xTouchClr.hPos/2;

	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
		
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		if(xWorldMap.isFriendMap == FALSE)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_28_ADDFRIEND_ADDEXIT:
				xTutoInfo.x[xTutoInfo.totalNum] = xTouchClr.xPos+xTouchClr.wPos/2;
				xTutoInfo.y[xTutoInfo.totalNum] = xTouchClr.yPos+xTouchClr.hPos/2;
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				break;
			}
		}
	}
		
	for(int i=0;i<2;i++)
	{
		subTemp[XPOS] = px-50+(i*86);
		subTemp[YPOS] = py-230;
		if(xFriend.addFriendTab==i)
			drawPacker(imgAddFriendTab0, subTemp[XPOS], subTemp[YPOS], imgW(imgAddFriendTab0)/2, 0, imgW(imgAddFriendTab0)/2, imgH(imgAddFriendTab0), VH);
		drawPacker(imgAddFriendTab2, subTemp[XPOS], subTemp[YPOS]-9, imgW(imgAddFriendTab2)/4*i, 0, imgW(imgAddFriendTab2)/4, imgH(imgAddFriendTab2), VH);
				
		xFriend.xTouchAddTab[i].wPos = imgW(imgAddFriendTab0)/2;
		xFriend.xTouchAddTab[i].hPos = imgH(imgAddFriendTab0);
		xFriend.xTouchAddTab[i].xPos = subTemp[XPOS]-xFriend.xTouchAddTab[i].wPos/2;
		xFriend.xTouchAddTab[i].yPos = subTemp[YPOS]-xFriend.xTouchAddTab[i].hPos/2;
				
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			if(xWorldMap.isFriendMap == FALSE)
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_28_ADDFRIEND_ADDTOUCH:
					if(i==0 && i !=xFriend.addFriendTab)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				}
			}
		}
				
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xFriend.xTouchAddTab[i].xPos, xFriend.xTouchAddTab[i].yPos, xFriend.xTouchAddTab[i].wPos, xFriend.xTouchAddTab[i].hPos);
		setAlpha(ALPHA_MAX);
		 */
	}
	
	//int scrollW = getScrollW(&xFriend.xDragScrollRanDomList,366,imgFriendScroll.h);
	//drawImage(&imgFriendScroll, px+380, py-97+scrollW, 0, 0, imgFriendScroll.w, imgFriendScroll.h, VH);
	
	int setClipY;
	int setClipH;
	
	//추천친구
	switch(xFriend.addFriendTab)
	{
	case 0:
		xFriend.xDragScrollRanDomList.totalNum = xFriend.totalNumListRanDom;
		xFriend.xDragScrollRanDomList.posGab = 88;
		xFriend.xDragScrollRanDomList.endPos = -(((xFriend.xDragScrollRanDomList.totalNum-5)*xFriend.xDragScrollRanDomList.posGab));
		
		if(xFriend.xDragScrollRanDomList.totalNum < 5)
			xFriend.xDragScrollRanDomList.endPos = 0;
		
		iMax = xFriend.xDragScrollRanDomList.totalNum;
		dragScrollPrc(&xFriend.xDragScrollRanDomList,1,FALSE);
		gSetClip(true,0, py-193, lcdW, 455);
		for(int i=0;i<iMax;i++)
		{
			pos = xFriend.xDragScrollRanDomList.pos+(xFriend.xDragScrollRanDomList.posGab*i);
			subTemp[XPOS] = px;
			subTemp[YPOS] = py-140+pos;
			if(subTemp[YPOS] < -xFriend.xDragScrollRanDomList.posGab || subTemp[YPOS] > lcdW+xFriend.xDragScrollRanDomList.posGab)
				continue;
						
			drawFriendProfile(subTemp[XPOS]-255, subTemp[YPOS],xFriendData[xFriend.dataSlotNumListRanDom[i]].userNum,65);
			drawPacker(imgAddFriendSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgAddFriendSlot), imgH(imgAddFriendSlot), VH);			
			drawPacker(imgMailSex, subTemp[XPOS]-180, subTemp[YPOS], imgW(imgMailSex)/2*xFriendData[xFriend.dataSlotNumListRanDom[i]].sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);

			sprintf(strTempS,"%s",xFriendData[xFriend.dataSlotNumListRanDom[i]].strNickName);
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS]-180+20, subTemp[YPOS], strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
			setFontSize(11);
			getSprintfArea(strTempS,xFriendData[xFriend.dataSlotNumListRanDom[i]].area);
			sprintf(strTempB, "Lv.%d / %d세 / %s",xFriendData[xFriend.dataSlotNumListRanDom[i]].lv,(xCalendar.nowYear+1)-xFriendData[xFriend.dataSlotNumListRanDom[i]].age,strTempS);
			gSetColor(82, 49, 38);
			gDrawString(subTemp[XPOS]-10, subTemp[YPOS], strTempB, VL);
			
			
			if(xFriendData[xFriend.dataSlotNumListRanDom[i]].isAdd == FALSE)
			{
				drawPacker(imgQuestResult1, subTemp[XPOS]+230, subTemp[YPOS], 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgAddFriendBtn)/2, VH);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]+230-2, subTemp[YPOS]-2, "친구추가", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
				setFontSize(11);

				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					if(xWorldMap.isFriendMap == FALSE)
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_28_ADDFRIEND_ADDTOUCH:
							if(i < 4)
							{
								xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+230;
								xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
							}
							break;
						}
					}
				}
			}
			else
			{
				drawPacker(imgQuestResult1, subTemp[XPOS]+230, subTemp[YPOS], 0, 0, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]+230-2, subTemp[YPOS]-3, "추가완료", VH, 166, 156, 126, 81, 19, 2);
				setFontSize(11);
				
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					if(xWorldMap.isFriendMap == FALSE)
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_28_ADDFRIEND_ADDINFO:
							if(xQuestTuto.tempValue == xFriendData[xFriend.dataSlotNumListRanDom[i]].userNum)
							{
								xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+230;
								xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
							}
							break;
						}
					}
				}
			}
			
		}
		gSetClip(false,0, 0, lcdW, lcdH);
		
		subTemp[XPOS] = px;
		subTemp[YPOS] = py-140;
		xFriend.xDragScrollRanDomList.selectNum = (-xFriend.xDragScrollRanDomList.pos/xFriend.xDragScrollRanDomList.posGab);
		
		for(int i=0;i<6;i++)
		{
			
			xFriend.xTouchFriendAddBtn[i].wPos = imgW(imgAddFriendBtn);
			xFriend.xTouchFriendAddBtn[i].hPos = imgH(imgAddFriendBtn)/2;
			xFriend.xTouchFriendAddBtn[i].xPos = subTemp[XPOS]+230 - xFriend.xTouchFriendAddBtn[i].wPos/2;
			xFriend.xTouchFriendAddBtn[i].yPos = subTemp[YPOS]+(xFriend.xDragScrollRanDomList.posGab*i)+(xFriend.xDragScrollRanDomList.pos%xFriend.xDragScrollRanDomList.posGab) - xFriend.xTouchFriendAddBtn[i].hPos/2;
			
			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xFriend.xTouchFriendAddBtn[i].xPos, xFriend.xTouchFriendAddBtn[i].yPos, xFriend.xTouchFriendAddBtn[i].wPos, xFriend.xTouchFriendAddBtn[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
			
		}
		break;
	case 1:
		subTemp[XPOS] = px;
		subTemp[YPOS] = py-146;
		drawPacker(imgAddFriendTextBox, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgAddFriendTextBox), imgH(imgAddFriendTextBox), VH);
		gSetColor(255, 255, 255);
		setFontSize(14);
		if(xFriend.strUserName[0] == 0)
			gDrawString(subTemp[XPOS]-72, subTemp[YPOS], "아이디를 입력해주세요", VH);
		else
			gDrawString(subTemp[XPOS]-72, subTemp[YPOS], xFriend.strUserName, VH);
		setFontSize(11);
		
		
		xFriend.xTouchTextBox.wPos = 430;
		xFriend.xTouchTextBox.hPos = 50;
		xFriend.xTouchTextBox.xPos = subTemp[XPOS]-72 - xFriend.xTouchTextBox.wPos/2;
		xFriend.xTouchTextBox.yPos = subTemp[YPOS]-xFriend.xTouchTextBox.hPos/2;
		
		xFriend.xTouchSearch.wPos = 120;
		xFriend.xTouchSearch.hPos = 50;
		xFriend.xTouchSearch.xPos = subTemp[XPOS]+218-xFriend.xTouchSearch.wPos/2;
		xFriend.xTouchSearch.yPos = subTemp[YPOS]-xFriend.xTouchSearch.hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xFriend.xTouchTextBox.xPos, xFriend.xTouchTextBox.yPos, xFriend.xTouchTextBox.wPos, xFriend.xTouchTextBox.hPos);
		 fillRect(xFriend.xTouchSearch.xPos, xFriend.xTouchSearch.yPos, xFriend.xTouchSearch.wPos, xFriend.xTouchSearch.hPos);
		 setAlpha(ALPHA_MAX);
		 */
		
		subTemp[XPOS] = px;
		subTemp[YPOS] = py-50;
		switch(xFriend.addState)
		{
		case FRIENDADD_STATE_RESULT:
			
			drawFriendProfile(subTemp[XPOS]-255, subTemp[YPOS],xFriendData[xFriend.dataSlotNumListRanDom[0]].userNum,65);
			drawPacker(imgAddFriendSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgAddFriendSlot), imgH(imgAddFriendSlot), VH);
			
			drawPacker(imgMailSex, subTemp[XPOS]-180, subTemp[YPOS], imgW(imgMailSex)/2*xFriendData[xFriend.dataSlotNumListRanDom[0]].sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);

			sprintf(strTempS,"%s",xFriendData[xFriend.dataSlotNumListRanDom[0]].strNickName);
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS]-180+20, subTemp[YPOS], strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
			setFontSize(11);
			getSprintfArea(strTempS,xFriendData[xFriend.dataSlotNumListRanDom[0]].area);
			sprintf(strTempB, "Lv.%d / %d세 / %s",xFriendData[xFriend.dataSlotNumListRanDom[0]].lv,(xCalendar.nowYear+1)-xFriendData[xFriend.dataSlotNumListRanDom[0]].age,strTempS);
			gSetColor(82, 49, 38);
			gDrawString(subTemp[XPOS]-10, subTemp[YPOS], strTempB, VL);
			
			
			if(xFriendData[xFriend.dataSlotNumListRanDom[0]].isAdd == FALSE)
			{
				drawPacker(imgQuestResult1, subTemp[XPOS]+230, subTemp[YPOS], 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]-2+230, subTemp[YPOS]-2, "친구추가", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
				setFontSize(11);
			}
			else
			{
				drawPacker(imgQuestResult1, subTemp[XPOS]+230, subTemp[YPOS], 0, 0, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]-2+230, subTemp[YPOS]-3, "추가완료", VH, 166, 156, 126, 81, 19, 2);
				setFontSize(11);
			}
			
			xFriend.xTouchFriendAddBtn[0].wPos = imgW(imgAddFriendBtn);
			xFriend.xTouchFriendAddBtn[0].hPos = imgH(imgAddFriendBtn)/2;
			xFriend.xTouchFriendAddBtn[0].xPos = subTemp[XPOS]+230-xFriend.xTouchFriendAddBtn[0].wPos/2;
			xFriend.xTouchFriendAddBtn[0].yPos = subTemp[YPOS]-xFriend.xTouchFriendAddBtn[0].hPos/2;
			break;
		case FRIENDADD_STATE_NOTUSER:
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, "해당유저가 존재하지 않습니다", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
			break;
		}
		break;
	case 2:	//카카오어플
			
		if(xKakaoData.totalFriendInfoApp == 0)
		{
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"추가 가능한 친구가 없습니다.");
			drawLinkInfo(px-155,py+10,0);
		}
			
		xFriend.xDragScrollRanDomList.totalNum = xKakaoData.totalFriendInfoApp;
		xFriend.xDragScrollRanDomList.posGab = 88;
		xFriend.xDragScrollRanDomList.endPos = -(((xFriend.xDragScrollRanDomList.totalNum-5)*xFriend.xDragScrollRanDomList.posGab));
		
		if(xFriend.xDragScrollRanDomList.totalNum < 5)
			xFriend.xDragScrollRanDomList.endPos = 0;
		
		iMax = xFriend.xDragScrollRanDomList.totalNum;
		dragScrollPrc(&xFriend.xDragScrollRanDomList,1,FALSE);
		gSetClip(true,0, py-193, lcdW, 455);
		for(int i=0;i<iMax;i++)
		{
			pos = xFriend.xDragScrollRanDomList.pos+(xFriend.xDragScrollRanDomList.posGab*i);
			subTemp[XPOS] = px;
			subTemp[YPOS] = py-140+pos;
			if(subTemp[YPOS] < -xFriend.xDragScrollRanDomList.posGab || subTemp[YPOS] > lcdW+xFriend.xDragScrollRanDomList.posGab)
				continue;
			
			drawFriendProfile(subTemp[XPOS]-255, subTemp[YPOS],xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].userNum,65);
			drawPacker(imgAddFriendSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgAddFriendSlot), imgH(imgAddFriendSlot), VH);
			
						
			int kakaoSlot = checkKakaoAppInvite(xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].strKakaoId);
			
			xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].isAdd = FALSE;
			if(kakaoSlot != DONT && xSaveKakaoApp.isDel[kakaoSlot] == FALSE)
				xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].isAdd = TRUE;
									
			if(kakaoSlot != DONT)
			{
				if(xSaveKakaoApp.strNickName[kakaoSlot][0] == 0 || xSaveKakaoApp.strNickName[kakaoSlot][0] == '0')
					sprintf(strTempS,"%s",xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].strNickName);
				else
					sprintf(strTempS,"%s(%s)",xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].strNickName,xSaveKakaoApp.strNickName[kakaoSlot]);
			}
			else
				sprintf(strTempS,"%s",xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].strNickName);
								
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS]-185, subTemp[YPOS]+1, strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
			setFontSize(11);
			
			if(kakaoSlot == DONT && xSaveKakaoApp.isDel[kakaoSlot] == FALSE)
			{
				gSetColor(82, 49, 38);
				gDrawString(subTemp[XPOS]+230, subTemp[YPOS]-2, "매장오픈중", VH);
			}
			else if(xFriendData[xKakaoData.xFriendInfoApp[i].friendNum].isAdd == FALSE)
			{
				drawPacker(imgQuestResult1, subTemp[XPOS]+230, subTemp[YPOS], 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]-2+230, subTemp[YPOS]-2, "친구추가", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
				setFontSize(11);
			}
			else
			{
				drawPacker(imgQuestResult1, subTemp[XPOS]+230, subTemp[YPOS], 0, 0, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]-2+230, subTemp[YPOS]-3, "추가완료", VH, 166, 156, 126, 81, 19, 2);
				setFontSize(11);
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
		
		subTemp[XPOS] = px;
		subTemp[YPOS] = py-140;
		xFriend.xDragScrollRanDomList.selectNum = (-xFriend.xDragScrollRanDomList.pos/xFriend.xDragScrollRanDomList.posGab);
		
		for(int i=0;i<6;i++)
		{
			
			xFriend.xTouchFriendAddBtn[i].wPos = imgW(imgAddFriendBtn);
			xFriend.xTouchFriendAddBtn[i].hPos = imgH(imgAddFriendBtn)/2;
			xFriend.xTouchFriendAddBtn[i].xPos = subTemp[XPOS]+230 - xFriend.xTouchFriendAddBtn[i].wPos/2;
			xFriend.xTouchFriendAddBtn[i].yPos = subTemp[YPOS]+(xFriend.xDragScrollRanDomList.posGab*i)+(xFriend.xDragScrollRanDomList.pos%xFriend.xDragScrollRanDomList.posGab) - xFriend.xTouchFriendAddBtn[i].hPos/2;
			
			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xFriend.xTouchFriendAddBtn[i].xPos, xFriend.xTouchFriendAddBtn[i].yPos, xFriend.xTouchFriendAddBtn[i].wPos, xFriend.xTouchFriendAddBtn[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
		}
		break;
	case 3:	//카카오초대
		drawPacker(imgAddKakao0, px, py, 0, 0, imgW(imgAddKakao0), imgH(imgAddKakao0), VH);\
			
			
		if(xKakaoData.totalFriendInfoApp == 0)
		{
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"추가 가능한");
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"친구가 없습니다");
			
			drawLinkInfo(px-260,py+20,1);
		}
			
		
		subTemp[XPOS] = px+62;
		subTemp[YPOS] = py-158;
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, "친구를 초대 시", VL, 86, 255, 220, 32, 21, 19);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+14, "푸짐한 선물을 드려요!", VL, 86, 255, 220, 32, 21, 19);
			
		subTemp[XPOS] = px+62;
		subTemp[YPOS] = py-98;
		drawPacker(imgAddKakao4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgAddKakao4), imgH(imgAddKakao4), VH);\
		sprintf(strTempS, "내가 초대한 친구:  %d명",xKakao.totalKakaoInvite.oriData);
		gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS]+1, strTempS, VL, 255, 255, 255, 74, 63, 62);
		
		//보상
		for(int i=0;i<5;i++)
		{
			subTemp[XPOS] = px+21;
			subTemp[YPOS] = py-46+(i*63);
			
			switch(xKakao.inviteType[i])
			{
			case KAKAOINVITE_TYPE_GOLD:
			case KAKAOINVITE_TYPE_LOOK:
			case KAKAOINVITE_TYPE_CANDY:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 50;
				drawImage(&imgMiniGameIcon[i], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMiniGameIcon[i].w, imgMiniGameIcon[i].h, VH);
				xGame.isReSizeDraw = FALSE;
				break;
			case KAKAOINVITE_TYPE_INTERIOR:
				setMapData(xKakao.inviteNum[i].oriData);
				setDrawObjCenter(xMap.type,xMap.listNum);
				if(xDrawObjCenter.reSize != 100)
				{
					xGame.fgameScaleCx =subTemp[XPOS];
					xGame.fgameScaleCy =lcdH-subTemp[YPOS];
					xGame.fgameScale = xDrawObjCenter.reSize*0.005f;
				}
				drawObj(subTemp[XPOS]+xDrawObjCenter.w, subTemp[YPOS]+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
				xGame.fgameScale = 1.0f;
				xGame.fgameScaleCx =cx;
				xGame.fgameScaleCy =cy;
				break;
			case KAKAOINVITE_TYPE_MODEL_CA:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 50;
				drawImage(&imgMiniGameIcon[i], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMiniGameIcon[i].w, imgMiniGameIcon[i].h, VH);
				xGame.isReSizeDraw = FALSE;
				break;
			case KAKAOINVITE_TYPE_MODEL_BS:
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = 50;
				drawImage(&imgMiniGameIcon[i], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMiniGameIcon[i].w, imgMiniGameIcon[i].h, VH);
				xGame.isReSizeDraw = FALSE;
				break;
			}
			
			gSetColor(82, 49, 38);
			gDrawString(subTemp[XPOS]+138, subTemp[YPOS], xKakao.strInviteText[i], VH);
			
			if((i==1&&xKakao.totalKakaoInvite.oriData>=10)
			   ||(i==2&&xKakao.totalKakaoInvite.oriData>=20)
			   ||(i==3&&xKakao.totalKakaoInvite.oriData>=30)
			   ||(i==4&&xKakao.totalKakaoInvite.oriData>=40))
			{
				drawPacker(imgAddKakao3, subTemp[XPOS]+115, subTemp[YPOS], 0, 0, imgW(imgAddKakao3), imgH(imgAddKakao3), VH);\
				gDrawStringBold(subTemp[XPOS]+115, subTemp[YPOS], "보상완료", VH, 86, 255, 220, 33, 20, 20);
			}
		}
						
		//친구리스트
		xFriend.xDragScrollRanDomList.totalNum = xKakaoData.totalFriendInfo;
		xFriend.xDragScrollRanDomList.posGab = 90;
		xFriend.xDragScrollRanDomList.endPos = -(((xFriend.xDragScrollRanDomList.totalNum-4)*xFriend.xDragScrollRanDomList.posGab));
		
		if(xFriend.xDragScrollRanDomList.totalNum < 4)
			xFriend.xDragScrollRanDomList.endPos = 0;
		else
			xFriend.xDragScrollRanDomList.endPos += 60;
		
		iMax = xFriend.xDragScrollRanDomList.totalNum;
		dragScrollPrc(&xFriend.xDragScrollRanDomList,1,FALSE);
		
		setClipY = py-180;
		setClipH = 431;
		gSetClip(true,0, setClipY, lcdW, setClipH);
		for(int i=0;i<iMax;i++)
		{
			pos = xFriend.xDragScrollRanDomList.pos+(xFriend.xDragScrollRanDomList.posGab*i);
			subTemp[XPOS] = px-162;
			subTemp[YPOS] = py-135+pos;
			if(subTemp[YPOS] < -xFriend.xDragScrollRanDomList.posGab || subTemp[YPOS] > lcdW+xFriend.xDragScrollRanDomList.posGab)
				continue;
			
			drawFriendProfile(subTemp[XPOS]-80, subTemp[YPOS],xFriendData[xKakaoData.xFriendInfo[i].friendNum].userNum,65);
			drawPacker(imgAddKakao1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgAddKakao1), imgH(imgAddKakao1), VH);

			//gSetClip(subTemp[XPOS]+40-79, setClipY, 158, setClipH);
			gDrawStringBold(subTemp[XPOS]+40, subTemp[YPOS]-18, xFriendData[xKakaoData.xFriendInfo[i].friendNum].strNickName, VH,255,255,255,82,49,38);
			//gSetClip(0, setClipY, lcdW, setClipH);
			drawPacker(imgAddKakao2, subTemp[XPOS]+40, subTemp[YPOS]+18, 0, imgH(imgAddKakao2)/2*(xKakaoData.xFriendInfo[i].isInvite == TRUE?0:1), imgW(imgAddKakao2), imgH(imgAddKakao2)/2, VH);
						
			if(i == xKakaoData.inveiteKakaoSlotNum)
			{
				if(xKakaoData.inveiteKeyReturn == TRUE)
				{
				xGame.isRotate = TRUE;
				xGame.rotateNum = 360-(gameCnt%120)*3;
				drawPacker(imgLoadingIcon0, subTemp[XPOS]+40, subTemp[YPOS]+18, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
				xGame.isRotate = FALSE;
				}
				xKakao.bonusXPos = subTemp[XPOS]+40;
				xKakao.bonusYPos = subTemp[YPOS]+18;
			}
		}
		gSetClip(false,0, 0, lcdW, lcdH);
			
		subTemp[XPOS] = px-162;
		subTemp[YPOS] = py-135;
		xFriend.xDragScrollRanDomList.selectNum = (-xFriend.xDragScrollRanDomList.pos/xFriend.xDragScrollRanDomList.posGab);

		for(int i=0;i<6;i++)
		{
			xFriend.xTouchFriendAddBtn[i].wPos = imgW(imgAddKakao2);
			xFriend.xTouchFriendAddBtn[i].hPos = imgH(imgAddKakao2)/2+30;
			xFriend.xTouchFriendAddBtn[i].xPos = subTemp[XPOS]+40 - xFriend.xTouchFriendAddBtn[i].wPos/2;
			xFriend.xTouchFriendAddBtn[i].yPos = subTemp[YPOS]+18-15+(xFriend.xDragScrollRanDomList.posGab*i)+(xFriend.xDragScrollRanDomList.pos%xFriend.xDragScrollRanDomList.posGab) - xFriend.xTouchFriendAddBtn[i].hPos/2;

			/*
			 gSetColor(255, 0, 0);
			 setAlpha(100);
			 fillRect(xFriend.xTouchFriendAddBtn[i].xPos, xFriend.xTouchFriendAddBtn[i].yPos, xFriend.xTouchFriendAddBtn[i].wPos, xFriend.xTouchFriendAddBtn[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */

		}
		break;
	}
}

void drawFriendMapLoading()
{
	int loadImgNum = 0;
		
	switch(xFriendMap.state)
	{
	case FRIENDMAP_STATE_LOADING0_START:
		freeImg(&imgLoadingBg);
		if(xMainMenu.totalLoadingImg > 0)
			loadImgNum = ranDom(0, xMainMenu.totalLoadingImg-1);
		
		sprintf(strTempS,"loadingbg%d.png", xMainMenu.loadingImgSlot[loadImgNum]);
		loadImgDocuments(strTempS, &imgLoadingBg);
			
		friendListFreeLoad(FALSE);
		xFriendMap.isLoadingOk = FALSE;
		netSend(CMD_GETGAMEDATA, DONT);
		xFriendMap.state = FRIENDMAP_STATE_LOADING0_ING;
		break;
	case FRIENDMAP_STATE_LOADING0_ING:
		if(xFriendMap.isLoadingOk == TRUE)
		{
			xFriendMap.state = FRIENDMAP_STATE_LOADING1_START;
		}
		break;
	case FRIENDMAP_STATE_LOADING1_START:
		xFriendMap.isLoadingOk = FALSE;
		xNetGetMap.action = 1;	//친구매장
		xNetGetMap.userNum = xFriendData[xFriendMap.selectDataSlotNum].userNum;	//친구아이디
		xNetGetMap.friendNum = xNetData.userNum;	//내번호
		netSend(CMD_GETMAP, 0);
		xFriendMap.state = FRIENDMAP_STATE_LOADING1_ING;
		break;
	case FRIENDMAP_STATE_LOADING1_ING:
		if(xFriendMap.isLoadingOk == TRUE)
		{
			xFriendMap.state = FRIENDMAP_STATE_LOADING2_START;
		}
		break;
	case FRIENDMAP_STATE_LOADING2_START:
		xFriendMap.isLoadingOk = FALSE;
		xNetSetPush.state = 0;
		xNetSetPush.userNum = xFriendData[xFriendMap.selectDataSlotNum].userNum;	//친구아이디
		netSend(CMD_SETPUSH, DONT);
		xFriendMap.state = FRIENDMAP_STATE_LOADING2_ING;
		break;
	case FRIENDMAP_STATE_LOADING2_ING:
		if(xFriendMap.isLoadingOk == TRUE)
		{
			xFriendMap.state = FRIENDMAP_STATE_LOADING3_START;
		}
		break;
	case FRIENDMAP_STATE_LOADING3_START:
		xFriendMap.isLoadingOk = FALSE;
		xFriendMap.state = FRIENDMAP_STATE_LOADING3_ING;
						
		xNetMySocialList.floor = 0;
		if(xWorldMap.isFriendMap == FALSE)
			xNetMySocialList.userNum = xNetData.userNum;
		else
			xNetMySocialList.userNum = xFriendData[xFriendMap.selectDataSlotNum].userNum;
		netSend(CMD_USERSOCIALLIST, DONT);			
		break;
	case FRIENDMAP_STATE_LOADING3_ING:
		if(xFriendMap.isLoadingOk == TRUE)
		{
			setState(GAME_WORLDMAP, PLAY_PLAY, DONT);
			xFriendMap.state = FRIENDMAP_STATE_PLAY;
		}
		break;
	}
	drawImage(&imgLoadingBg, cx, cy, 0, 0, imgLoadingBg.w, imgLoadingBg.h, VH);
	drawLodingText();
}


void friendOrderFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		loadImg("friendorderbg.png", &imgFriendOrderBg);
	}
	else
	{
		freeImg(&imgFriendOrderBg);
	}
	
}

void drawFriendOrder()
{
	int px = cx;
	int py = cy;
	int iMax;
	int pos;
	
	drawBgFillRect();
	
	drawImage(&imgFriendOrderBg, px, py, 0, 0, imgFriendOrderBg.w, imgFriendOrderBg.h, VH);
	
	subTemp[XPOS] = px-282;
	subTemp[YPOS] = py-254;
	
	
	drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xFriendMap.selectDataSlotNum].userNum, 86);
	drawPacker(imgPhotoBg, subTemp[XPOS]+2,subTemp[YPOS]+4, 0, 0, imgW(imgPhotoBg), imgH(imgPhotoBg), VH);

	
	gSetColor(133, 80, 56);
	setFontSize(14);
	sprintf(strTempS, "%s님의 주문배송",xFriendData[xFriendMap.selectDataSlotNum].strNickName);
	gDrawStringBold(subTemp[XPOS]+60, subTemp[YPOS]+30, strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
	setFontSize(11);
	
	
						
	//친구 주문장 리스트를 요청한다
	//친구 의상정보를 얻어온다
	
	subTemp[XPOS] = px-68;
	subTemp[YPOS] = py-128;
	

	
	xFriend.xDragScrollOrderList.totalNum = xOrder.totalNumListDataFriend;
	xFriend.xDragScrollOrderList.posGab = 124;
	
	xFriend.xDragScrollOrderList.endPos = -(((xFriend.xDragScrollOrderList.totalNum-4)*xFriend.xDragScrollOrderList.posGab));
	
	if(xFriend.xDragScrollOrderList.totalNum < 4)
		xFriend.xDragScrollOrderList.endPos = 0;
	else
		xFriend.xDragScrollOrderList.endPos -= 82;
		
		
	
	iMax = xFriend.xDragScrollOrderList.totalNum;
	dragScrollPrc(&xFriend.xDragScrollOrderList,1,FALSE);
	//int scrollW = getScrollW(&xFriend.xDragScrollOrderList,406,imgFriendScroll.h);
	//drawImage(&imgFriendScroll, px+327, py-150+scrollW, 0, 0, imgFriendScroll.w, imgFriendScroll.h, VH);
	
	
	gSetClip(true,0, py-200, lcdW, 425);
	for(int i=0;i<iMax;i++)
	{
		pos = xFriend.xDragScrollOrderList.pos+(xFriend.xDragScrollOrderList.posGab*i);
		if(subTemp[YPOS]+pos < -xFriend.xDragScrollOrderList.posGab || subTemp[YPOS]+pos > lcdW+xFriend.xDragScrollOrderList.posGab)
			continue;
						
		setMapData(xOrder.xSlotListDataFriend[i].code);
		
		drawFriendProfile(subTemp[XPOS]-206, subTemp[YPOS]-3+pos,xOrder.xSlotListDataFriend[i].friendNum,100);
		drawPacker(imgAddFriendSlot, subTemp[XPOS]+60, subTemp[YPOS]+pos, 0, 0, imgW(imgAddFriendSlot), imgH(imgAddFriendSlot), VH);
		
		setFontSize(14);
		sprintf(strTempS,"%s(Lv.%d)",xFriendData[xOrder.xSlotListDataFriend[i].friendNum].strNickName,xFriendData[xOrder.xSlotListDataFriend[i].friendNum].lv);
		gDrawStringBold(subTemp[XPOS]-120, subTemp[YPOS]+pos-18, strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 27, 26);
		sprintf(strTempS,"<%s %d개> 주문 부탁해요~",xFashionData[xMap.type][xMap.listNum].strName,xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
		gSetColor(44, 27, 26);
		gDrawString(subTemp[XPOS]-120, subTemp[YPOS]+pos+18, strTempS, VL);
		setFontSize(11);
				
		switch(xOrder.xSlotListDataFriend[i].state)
		{
		case ORDERSLOT_STATE_CLOSE:
			sprintf(strTempS,"미수락");
			break;
		case ORDERSLOT_STATE_END:
			sprintf(strTempS,"최종완료");
			break;
		case ORDERSLOT_STATE_CAR:
			sprintf(strTempS,"배송중");
			break;
		default:
			sprintf(strTempS,"개발자확인");
			break;
		}
		
		setFontSize(14);
		switch(xOrder.xSlotListDataFriend[i].state)
		{
		case ORDERSLOT_STATE_CLOSE:
		case ORDERSLOT_STATE_END:
			gDrawStringBold(subTemp[XPOS]+320, subTemp[YPOS]+pos, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 26, 27);
			break;
		default:
			gDrawStringBold(subTemp[XPOS]+320, subTemp[YPOS]+pos, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
			break;
		}
		setFontSize(11);
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
		
	xTouchClr.xPos = px+285;
	xTouchClr.yPos = py-270;
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;

	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
}

void friendOrderItemFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		loadImg("friendorderitembg.png",&imgFriendOrderItemBg);
		loadImg("friendorderselectslot.png", &imgFriendOrderSelectSlot);
	}
	else
	{
		freeImg(&imgFriendOrderItemBg);
		freeImg(&imgFriendOrderSelectSlot);
	}
}

void drawFriendOrderItem()
{
	
	int px = cx;
	int py = cy+24;
	
	drawBgFillRect();
		
	drawImage(&imgFriendOrderItemBg, px, py-14, 0, 0, imgFriendOrderItemBg.w, imgFriendOrderItemBg.h, VH);
	
	gSetColor(82, 49, 38);
	gDrawString(px-300, py-228, "주문요청 시 캔디 1개를 보상으로 드립니다.", VL);
	
	//작은 메뉴
	int iMaxTabS;
	iMaxTabS = 7;
	subTemp[XPOS] = px-185;
	subTemp[YPOS] = py-298;
	for(int i=0;i<iMaxTabS;i++)
	{
		if(i == xCatalog.selectTabS)
		{
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], imgW(imgMenu8)/2, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6-18, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*i, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
			
			
			switch(i)
			{
			case 0:sprintf(strTempS, "아우터");break;
			case 1:sprintf(strTempS, "상의");break;
			case 2:sprintf(strTempS, "하의");break;
			case 3:sprintf(strTempS, "원피스");break;
			case 4:sprintf(strTempS, "신발");break;
			case 5:sprintf(strTempS, "가방");break;
			case 6:sprintf(strTempS, "기타");break;
			}
			gDrawStringBold(subTemp[XPOS]+(i*76), subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
			
		}
		else
		{
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], 0, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*i, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
		}
	}
			
	for(int i=0;i<iMaxTabS;i++)
	{
		xTouchCatalogTabS[i].wPos = imgW(imgMenu8)/2-10;
		xTouchCatalogTabS[i].hPos = imgH(imgMenu8);
		xTouchCatalogTabS[i].xPos = subTemp[XPOS]+5+(i*76) - xTouchCatalogTabS[i].wPos/2;
		xTouchCatalogTabS[i].yPos = subTemp[YPOS] - xTouchCatalogTabS[i].hPos/2;
	}
	
	
	if(xCatalog.totalSlotS == 0)
	{
		xLinkInfo.total = 0;
		sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"요청 가능한 의상이 없습니다.");
		drawLinkInfo(px-180,py+17,0);
	}
	//
	
	
	subTemp[XPOS] = px+290;
	subTemp[YPOS] = py-227;
	
	if(xSaveTemp.friendOrderNum+xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_SELECTITEM] < 0)
		drawNumPacker(imgWorldMapNum0, subTemp[XPOS], subTemp[YPOS], 0, -3, VR);
	else
		drawNumPacker(imgWorldMapNum0, subTemp[XPOS], subTemp[YPOS], xSaveTemp.friendOrderNum+xModelSkill.bonusPer[MODELSKILL_TYPE_ORDER_SELECTITEM], -3, VR);
	drawPacker(imgWorldMapLv7, subTemp[XPOS]+12, subTemp[YPOS], 0, 0, imgW(imgWorldMapLv7)/2, imgH(imgWorldMapLv7), VH);
	
	

	//세부메뉴
	xDragScrollCatalogS.totalNum = 1+(xCatalog.totalSlotS-1)/8;
	xDragScrollCatalogS.posGab = 640;
	
	dragScrollPrc(&xDragScrollCatalogS,0,FALSE);
	
	int slotCode;
	int slotNum;
	int pos;
	
	int setClipX = px-310;
	int setClipW = 600;
	gSetClip(true,setClipX, 0, setClipW, lcdH);
	
	for(int page=-1;page<=1;page++)
	{
		if(xDragScrollCatalogS.selectNum+page >= 0 && xDragScrollCatalogS.selectNum+page < xDragScrollCatalogS.totalNum)
		{
			for(int i=0;i<8;i++)
			{
				if(((xDragScrollCatalogS.selectNum+page)*8)+i >= xCatalog.totalSlotS)
					break;
				
				pos = xDragScrollCatalogS.pos+(xDragScrollCatalogS.posGab*page);
				subTemp[XPOS] = px-235+pos+((i%4)*150);
				subTemp[YPOS] = py-134+((i/4)*230);
				
				slotNum = ((xDragScrollCatalogS.selectNum+page)*8)+i;
				slotCode = xCatalog.xSlotS[slotNum].code;
				
				setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
				//성별
				drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFashionData[xMap.type][xMap.listNum].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
		
				
				//아이템명
				//gSetClip(setClipX, subTemp[YPOS]-imgH(imgProductionMenuSlot0)/2, setClipW, imgH(imgProductionMenuSlot0));
				drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
				//gSetClip(setClipX, 0, setClipW, lcdH);
				gSetColor(44, 27, 26);
				setLabelWidth(150);
				gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFashionData[xMap.type][xMap.listNum].strName, VH);
				setLabelWidth(0);
								
				
			
				if(xCatalog.selectSlot == slotNum)
				{
					drawImage(&imgFriendOrderSelectSlot, subTemp[XPOS],subTemp[YPOS]+43, 0, 0, imgFriendOrderSelectSlot.w, imgFriendOrderSelectSlot.h, VH);
					
				}
				else
				{
					
					//주문시간
					drawPacker(imgInfoBar3, subTemp[XPOS], subTemp[YPOS]+108, 0, 0, imgW(imgInfoBar3), imgH(imgInfoBar3), VH);
					drawTimeSprintf(strTempS,xFashionData[xMap.type][xMap.listNum].makeTime.oriData,2);
					sprintf(strTempB, "%s/%d벌",strTempS,xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					gSetColor(44, 27, 26);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+108, strTempB, VR);
					//주문가격
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+108+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+108+22, imgW(imgProductionMenuObj0)/8*5, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					gSetColor(44, 27, 26);
					
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+108+22, strTempS, VR);
				}
				
				if(page == 0)
				{
					xTouchCatalogS[i].wPos = 150;
					xTouchCatalogS[i].hPos = 220;
					xTouchCatalogS[i].xPos = subTemp[XPOS] - xTouchCatalogS[i].wPos/2;
					xTouchCatalogS[i].yPos = subTemp[YPOS]+50 - xTouchCatalogS[i].hPos/2;

					/*
					 gSetColor(255, 0, 0);
					 setAlpha(100);
					 fillRect(xTouchCatalogS[i].xPos, xTouchCatalogS[i].yPos, xTouchCatalogS[i].wPos, xTouchCatalogS[i].hPos);
					 setAlpha(ALPHA_MAX);
					 */

					
					xTouchOrderMakeBtn[i].wPos = 150;
					xTouchOrderMakeBtn[i].hPos = 50;
					xTouchOrderMakeBtn[i].xPos = subTemp[XPOS]-xTouchOrderMakeBtn[i].wPos/2;
					xTouchOrderMakeBtn[i].yPos = subTemp[YPOS]+130-xTouchOrderMakeBtn[i].hPos/2;
					
					/*
					gSetColor(255, 255, 255);
					setAlpha(100);
					fillRect(xTouchOrderMakeBtn[i].xPos, xTouchOrderMakeBtn[i].yPos, xTouchOrderMakeBtn[i].wPos, xTouchOrderMakeBtn[i].hPos);
					setAlpha(ALPHA_MAX);
					 */
				}
			}
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	/*
	//리스트탭
	subTemp[XPOS] = px+215;
	subTemp[YPOS] = py-240;
	
	if(xCatalog.isListOpen == FALSE)
	{
		drawPacker(imgProductionMenuListTab, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuListTab)/2, imgH(imgProductionMenuListTab), TL);
		switch(xCatalog.selectTabList)
		{
			case DONT:
				sprintf(strTempS, "레벨");
				break;
			case 0:
				sprintf(strTempS, "제작시간");
				break;
		}
		gDrawStringBold(subTemp[XPOS]-8+imgW(imgProductionMenuListTab)/4, subTemp[YPOS]+25, strTempS, VH, 255, 255, 255, 186, 70, 10);
	}
	else
	{
		drawPacker(imgProductionMenuListTab, subTemp[XPOS], subTemp[YPOS], imgW(imgProductionMenuListTab)/2, 0, imgW(imgProductionMenuListTab)/2, imgH(imgProductionMenuListTab), TL);
		
		switch(xCatalog.selectTabList)
		{
			case DONT:
				sprintf(strTempS, "레벨");
				break;
			case 0:
				sprintf(strTempS, "제작시간");
				break;
		}
		
		gDrawStringBold(subTemp[XPOS]-8+imgW(imgProductionMenuListTab)/4, subTemp[YPOS]+25, strTempS, VH, 255, 255, 255, 186, 70, 10);
		
		gDrawStringBold(subTemp[XPOS]-8+imgW(imgProductionMenuListTab)/4, subTemp[YPOS]+25+27, "레벨", VH, 255, 255, 255, 186, 70, 10);
		gDrawStringBold(subTemp[XPOS]-8+imgW(imgProductionMenuListTab)/4, subTemp[YPOS]+25+(27*2), "제작시간", VH, 255, 255, 255, 186, 70, 10);
	}
	
	
	xModel.xTouchListTab[0].wPos = imgW(imgProductionMenuListTab)/2;
	xModel.xTouchListTab[0].hPos = 26;
	xModel.xTouchListTab[0].xPos = subTemp[XPOS];
	xModel.xTouchListTab[0].yPos = subTemp[YPOS]+5;
	
	xModel.xTouchListTab[1].wPos = imgW(imgProductionMenuListTab)/2;
	xModel.xTouchListTab[1].hPos = 26;
	xModel.xTouchListTab[1].xPos = subTemp[XPOS];
	xModel.xTouchListTab[1].yPos = subTemp[YPOS]+27+5;
	
	xModel.xTouchListTab[2].wPos = imgW(imgProductionMenuListTab)/2;
	xModel.xTouchListTab[2].hPos = 26;
	xModel.xTouchListTab[2].xPos = subTemp[XPOS];
	xModel.xTouchListTab[2].yPos = subTemp[YPOS]+(27*2)+5;
	
	*/
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 for(int i=0;i<4;i++)
	 {
	 fillRect(xModel.xTouchListTab[i].xPos, xModel.xTouchListTab[i].yPos, xModel.xTouchListTab[i].wPos, xModel.xTouchListTab[i].hPos);
	 }
	 setAlpha(ALPHA_MAX);
	 */
	
	
	subTemp[XPOS] = px-8-335-3;
	subTemp[YPOS] = py+20;
	if(xDragScrollCatalogS.selectNum > 0)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchLeft.wPos = 80;
	xNoticeWorldMap.xTouchLeft.hPos = 80;
	xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
	xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	
	
	subTemp[XPOS] = px-8+335;
	subTemp[YPOS] = py+20;
	if(xDragScrollCatalogS.selectNum < xDragScrollCatalogS.totalNum-1)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchRight.wPos = 80;
	xNoticeWorldMap.xTouchRight.hPos = 80;
	xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
	xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	subTemp[XPOS] = px+335;
	subTemp[YPOS] = py-282;
		
	xTouchClr.wPos = 70;
	xTouchClr.hPos = 70;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;

	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
    */
}

void drawMailTextBox()
{
	int px = cx;
	int py = 150;
	
	drawBgFillRect();
	subTemp[XPOS] = px-135;
	subTemp[YPOS] = py-10;
	
	if(xWorldMap.isFriendMap == FALSE)
		drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xNetData.userNum, 100);
	else
		drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xFriendMap.selectDataSlotNum].userNum, 100);
	
	drawPacker(imgMailBg1, px, py, 0, 0, imgW(imgMailBg1), imgH(imgMailBg1), VH);
	
	
	subTemp[XPOS] = px-71;
	subTemp[YPOS] = py-60;
	
	if(xWorldMap.isFriendMap == FALSE)
		sprintf(strTempS, "To.%s",xSaveTemp.strNickName);
	else
		sprintf(strTempS, "To.%s",xFriendData[xFriendMap.selectDataSlotNum].strNickName);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VL, 255, 255, 255, 64,36,29);
	
	setFontSize(8);
	setLabelWidth(200);
	gSetColor(64,36,29);
	gDrawString(subTemp[XPOS]+10, subTemp[YPOS]+25, xMail.strTextBox, VL);
	setFontSize(11);
		
	subTemp[XPOS] = px-65;
	subTemp[YPOS] = py+90;
	drawPacker(imgQuestResult1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = subTemp[XPOS]-xTouchOk.wPos/2;
	xTouchOk.yPos = subTemp[YPOS]-xTouchOk.hPos/2;
	
	
	subTemp[XPOS] = px+65;
	subTemp[YPOS] = py+90;
	drawPacker(imgQuestResult2, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestResult2)/2, imgW(imgQuestResult2), imgH(imgQuestResult2)/2, VH);
	gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "취소", VH, 255, 255, 255, 77, 77, 77);
	
	xTouchClr.wPos = imgW(imgQuestResult2);
	xTouchClr.hPos = imgH(imgQuestResult2)/2;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
}


void drawMail()
{
	int px = cx;
	int py = cy;
	int iMax;
	int pos;
    
    drawBgFillRect();
	
	if(xQuestTuto.state == QUEST_TUTO_KEY)
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_17_MAILSELECT:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	
	if(xWorldMap.isFriendMap == FALSE)
	{
		if(xMail.selectTab == 0)
		{
			if(xSave.mailLastKey != xMail.mailLastKey)
			{
				xSave.mailLastKey = xMail.mailLastKey;
				gameSave(SAVE_SLOT_GAME);
			}
		}
		
	}
	
	
	
	
	
	subTemp[XPOS] = px-390;
	subTemp[YPOS] = py-143;
	if(xWorldMap.isFriendMap == FALSE)
	{
		switch(xMail.selectTab)
		{
		case 1:
			drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xMail.pmUserId, 150);
			break;
		default:
			drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xNetData.userNum, 150);
			break;
		}
	}
	else
		drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xFriendMap.selectDataSlotNum].userNum, 150);
	
	drawPacker(imgMailBg0, px, py, 0, 0, imgW(imgMailBg0), imgH(imgMailBg0), VH);

	
	subTemp[XPOS] = px-380;
	subTemp[YPOS] = py-275;
	setFontSize(14);
	if(xWorldMap.isFriendMap == FALSE)
	{
		for(int i=0;i<3;i++)
		{
			drawPacker(imgMailTab2, subTemp[XPOS]+(155*i), subTemp[YPOS], imgW(imgMailTab2)/2 * (xMail.selectTab == i ? 1:0), 0, imgW(imgMailTab2)/2, imgH(imgMailTab2), VH);
			switch(i)
			{
			case 0:sprintf(strTempS,"방명록");break;
			case 1:sprintf(strTempS,"게시판");break;
			case 2:sprintf(strTempS,"선물함");break;
			}
			drawPacker(imgMailGiftIcon, subTemp[XPOS]-38+(155*i), subTemp[YPOS]+10+3, imgW(imgMailGiftIcon)/3*i, 0, imgW(imgMailGiftIcon)/3, imgH(imgMailGiftIcon), VH);
			gDrawStringBold(subTemp[XPOS]+20+(155*i), subTemp[YPOS]+10+4, strTempS, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
			
			if(i == 2)
			{
				if((xMail.giftLastKey != 0 || xSave.giftLastKey != 0) && xSave.giftLastKey != xMail.giftLastKey)
				{
					drawNewIcon(subTemp[XPOS]+50+(155*i), subTemp[YPOS]-15);
				}
			}
			
			xMail.xTouchTab[i].wPos = imgW(imgMailTab2)/2;
			xMail.xTouchTab[i].hPos = imgH(imgMailTab2);
			xMail.xTouchTab[i].xPos = subTemp[XPOS]+(155*i) - xMail.xTouchTab[i].wPos/2;
			xMail.xTouchTab[i].yPos = subTemp[YPOS] - xMail.xTouchTab[i].hPos/2;
		}
	}
	else
	{
		drawPacker(imgMailTab2, subTemp[XPOS], subTemp[YPOS], imgW(imgMailTab2)/2, 0, imgW(imgMailTab2)/2, imgH(imgMailTab2), VH);
		drawPacker(imgMailGiftIcon, subTemp[XPOS]-38, subTemp[YPOS]+15+3, 0, 0, imgW(imgMailGiftIcon)/3, imgH(imgMailGiftIcon), VH);
		gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS]+15+4, " 방명록 ", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	}
	setFontSize(11);
		
	subTemp[XPOS] = px-390;
	subTemp[YPOS] = py-38;
	if(xWorldMap.isFriendMap == FALSE)
	{
		
		switch(xMail.selectTab)
		{
		case 0:
		case 2:
			drawPacker(imgMailSex, subTemp[XPOS]-68, subTemp[YPOS], imgW(imgMailSex)/2*xSaveTemp.sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS]+13, subTemp[YPOS], xSaveTemp.strNickName, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
			setFontSize(11);
			
			gSetColor(82, 49, 38);
			sprintf(strTempS, "Lv.%d / %d세",xSaveTemp.lv.oriData,(xCalendar.nowYear+1)-xSaveTemp.age);
			gDrawString(subTemp[XPOS]+13,subTemp[YPOS]+24,strTempS,VH);
			break;
		case 1:
				
			int slotNum = getFriendSlot(xMail.pmUserId);
			drawPacker(imgMailSex, subTemp[XPOS]-68, subTemp[YPOS], imgW(imgMailSex)/2*xFriendData[slotNum].sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS]+13, subTemp[YPOS], xFriendData[slotNum].strNickName, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
			setFontSize(11);
			gSetColor(82, 49, 38);
			sprintf(strTempS, "Lv.%d / %d세",xSaveTemp.lv.oriData,(xCalendar.nowYear+1)-xFriendData[slotNum].age);
			gDrawString(subTemp[XPOS]+13,subTemp[YPOS]+24,strTempS,VH);
			break;
		}
		
		
	}
	else
	{
		drawPacker(imgMailSex, subTemp[XPOS]-68, subTemp[YPOS], imgW(imgMailSex)/2*xFriendData[xFriendMap.selectDataSlotNum].sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);
		setFontSize(14);
		gDrawStringBold(subTemp[XPOS]+13, subTemp[YPOS], xFriendData[xFriendMap.selectDataSlotNum].strNickName, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
		setFontSize(11);
		
		gSetColor(82, 49, 38);
		sprintf(strTempS, "Lv.%d / %d세",xFriendData[xFriendMap.selectDataSlotNum].lv,(xCalendar.nowYear+1)-xFriendData[xFriendMap.selectDataSlotNum].age);
		gDrawString(subTemp[XPOS]+13,subTemp[YPOS]+24,strTempS,VH);
	}	
	
	subTemp[XPOS] = px-390;
	subTemp[YPOS] = py+25;
	setFontSize(8);
	if(xWorldMap.isFriendMap == FALSE)
	{
		switch(xMail.selectTab)
		{
		case 0:
		case 2:
			sprintf(strTempS, "%s 님의 한마디",xSaveTemp.strNickName);
			break;
		case 1:
			int slotNum = getFriendSlot(xMail.pmUserId);
			sprintf(strTempS, "%s 님의 한마디",xFriendData[slotNum].strNickName);
			break;
		}
		
	}
	else
		sprintf(strTempS, "%s 님의 한마디",xFriendData[xFriendMap.selectDataSlotNum].strNickName);
	gDrawStringBold(subTemp[XPOS]-68, subTemp[YPOS]-5, strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
			
	gSetColor(82, 49, 38);
	setLabelWidth(140);
	switch(xMail.selectTab)
	{
	case 1:
		gDrawString(subTemp[XPOS]-68,subTemp[YPOS]+24,xMail.strTodayPm,TL);
		break;
	default:
		gDrawString(subTemp[XPOS]-68,subTemp[YPOS]+24,xMail.strToday,TL);
		break;

	}
	setLabelWidth(0);
			
	subTemp[XPOS] = px-387;
	subTemp[YPOS] = py+278;
	
	if(xWorldMap.isFriendMap == FALSE && (xMail.selectTab == 0 || xMail.selectTab == 2))
	{
		setFontSize(14);
		drawPacker(imgMailBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgMailBtn0)/2, imgW(imgMailBtn0), imgH(imgMailBtn0)/2, VH);
		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-3, "한마디 수정", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 21, 97, 96);
		setFontSize(11);
		xMail.xTouchToday.wPos = imgW(imgMailBtn0);
		xMail.xTouchToday.hPos = imgH(imgMailBtn0)/2;
		xMail.xTouchToday.xPos = subTemp[XPOS]-xMail.xTouchToday.wPos/2;
		xMail.xTouchToday.yPos = subTemp[YPOS]-xMail.xTouchToday.hPos/2;
	}
	else if(xWorldMap.isAppReview == FALSE && xWorldMap.isFriendMap == TRUE)
	{
		drawPacker(imgPopupBtn0, subTemp[XPOS]-2, subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		drawPacker(imgQuestGiftIcon, subTemp[XPOS]-57, subTemp[YPOS]-5, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
		setFontSize(20);
		gDrawStringBold(subTemp[XPOS]+8-2, subTemp[YPOS]-2, "선물하기", VH, 255, 255, 255, 186, 70, 10);
		setFontSize(11);
				
		xMail.xTouchCashGiftBtn.wPos = imgW(imgPopupBtn0);
		xMail.xTouchCashGiftBtn.hPos = imgH(imgPopupBtn0)/2;
		xMail.xTouchCashGiftBtn.xPos = subTemp[XPOS]-xMail.xTouchCashGiftBtn.wPos/2;
		xMail.xTouchCashGiftBtn.yPos = subTemp[YPOS]-xMail.xTouchCashGiftBtn.hPos/2;
	}
	
			
	subTemp[XPOS] = px+89;
	subTemp[YPOS] = py-160;
	
	switch(xMail.selectTab)
	{
	case 0:
	case 1:
		drawPacker(imgMailTextBox, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgMailTextBox), imgH(imgMailTextBox), VH);
		gSetColor(255, 255, 255);
		setFontSize(14);
            
        gSetClip(true, subTemp[XPOS]-71-240, subTemp[YPOS]-40, 480, 80);
            
		if(strlen(xMail.strTextBox) > 0)
			gDrawString(subTemp[XPOS]-66, subTemp[YPOS], xMail.strTextBox, VH);
		else
			gDrawString(subTemp[XPOS]-66, subTemp[YPOS], "방명록을 남겨주세요.", VH);
            
        gSetClip(false, subTemp[XPOS]-66-180, subTemp[YPOS]-40, 360, 80);
			
					
		
		gDrawStringBold(subTemp[XPOS]+252, subTemp[YPOS], "전송", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
		setFontSize(11);
		
		
		
		xMail.xTouchTextBox.wPos = 500;
		xMail.xTouchTextBox.hPos = 50;
		xMail.xTouchTextBox.xPos = subTemp[XPOS]-66 - xMail.xTouchTextBox.wPos/2;
		xMail.xTouchTextBox.yPos = subTemp[YPOS]-xMail.xTouchTextBox.hPos/2;
		
		xMail.xTouchSendBtn.wPos = 120;
		xMail.xTouchSendBtn.hPos = 50;
		xMail.xTouchSendBtn.xPos = subTemp[XPOS]+252-xMail.xTouchSendBtn.wPos/2;
		xMail.xTouchSendBtn.yPos = subTemp[YPOS]-xMail.xTouchSendBtn.hPos/2;
		
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
				case TUTO_17_MAIL_FRIEND:
					if(xWorldMap.isFriendMap == TRUE)
					{
						if(strlen(xMail.strTextBox) > 0)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+252;
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
						else
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]-66;
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					break;
			}
		}
		
		
		drawPacker(imgSecret0, subTemp[XPOS]-330, subTemp[YPOS]-52, 0, 0, imgW(imgSecret0), imgH(imgSecret0), VL);
		if(xMail.isSecret == TRUE)
			drawPacker(imgQuestV, subTemp[XPOS]-330+15, subTemp[YPOS]-52-20, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
		
		xMail.xTouchSecret.wPos = imgW(imgSecret0)+20;
		xMail.xTouchSecret.hPos = imgH(imgSecret0)+20;
		xMail.xTouchSecret.xPos = subTemp[XPOS]-330;
		xMail.xTouchSecret.yPos = subTemp[YPOS]-54-xMail.xTouchSecret.hPos/2;
		break;
	}

	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xMail.xTouchSendBtn.xPos, xMail.xTouchSendBtn.yPos, xMail.xTouchSendBtn.wPos, xMail.xTouchSendBtn.hPos);
	fillRect(xMail.xTouchSecret.xPos, xMail.xTouchSecret.yPos, xMail.xTouchSecret.wPos, xMail.xTouchSecret.hPos);
	setAlpha(ALPHA_MAX);
	 */
		
	xMail.xDragScrollSlot.totalNum = xMail.totalMailSlot;
	xMail.xDragScrollSlot.posGab = 140;
			
	if(0 >= xMail.pageNum)
	{
		isSubTemp[13] = FALSE;
		for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
		{
			if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_MAILLIST || xEventQueueNet.type[ee] == NETQUEUE_TYPE_GIFTLIST)
			{
				isSubTemp[13] = TRUE;
				break;
			}
		}
		
		if(isSubTemp[13] == FALSE)
		{
			//////////////////////////////////////////////////////////////////////////////////////////
			switch(xMail.selectTab)
			{
			case 0:
			case 2:
				if(xWorldMap.isFriendMap == FALSE)
					xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
				else
					xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
				break;
			case 1:
				xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xMail.pmUserId;
				break;
			}
								
			xEventQueueNet.code[xEventQueueNet.totalNum] = xMail.rowNum;
			xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xMail.pageNum;
			xMail.pageNum++;
			switch(xMail.selectTab)
			{
			case 0:
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
				break;
			case 1:
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
				break;
			case 2:
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GIFTLIST, TRUE);
				break;
			}
			//////////////////////////////////////////////////////////////////////////////////////////
		}
	}
	
	switch (xMail.selectTab)
	{
		case 0:
		case 1:
			subTemp[XPOS] = px+90;
			subTemp[YPOS] = py-40;
			gSetClip(true,0, py-120, lcdW, 410);
			xMail.xDragScrollSlot.endPos = -(((xMail.xDragScrollSlot.totalNum-2)*xMail.xDragScrollSlot.posGab));
			
			if(xMail.xDragScrollSlot.totalNum <= 2)
				xMail.xDragScrollSlot.endPos = 0;
			else
				xMail.xDragScrollSlot.endPos += 110;
			break;
		case 2:
			subTemp[XPOS] = px+90;
			subTemp[YPOS] = py-40-96;
			gSetClip(true,0, py-216, lcdW, 506);
			xMail.xDragScrollSlot.endPos = -(((xMail.xDragScrollSlot.totalNum-3)*xMail.xDragScrollSlot.posGab));
			
			if(xMail.xDragScrollSlot.totalNum <= 3)
				xMail.xDragScrollSlot.endPos = 0;
			else
				xMail.xDragScrollSlot.endPos += 70;
			break;
	}
	
	iMax = xMail.xDragScrollSlot.totalNum;
	dragScrollPrc(&xMail.xDragScrollSlot,1,FALSE);
	
	

	//방명록과 게시글
	for(int i=0;i<iMax;i++)
	{
		pos = xMail.xDragScrollSlot.pos+(xMail.xDragScrollSlot.posGab*i);
		if(subTemp[YPOS]+pos < -xMail.xDragScrollSlot.posGab || subTemp[YPOS]+pos > lcdW+xMail.xDragScrollSlot.posGab)
			continue;
		
		switch (xMail.selectTab)
		{
		case 0:
		case 1:
			if(xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum == xNetData.userNum)
			{
				
				drawFriendProfile(subTemp[XPOS]+284, subTemp[YPOS]+pos, xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum, 100);
				drawPacker(imgMailSlotBg1, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgMailSlotBg1), imgH(imgMailSlotBg1), VH);
				
				gSetColor(255, 255, 255);
				sprintf(strTempS, "%s(Lv.%d)",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName,xFriendData[xMail.xMailSlot[i].friendDataSlotNum].lv);
				if(xMail.xMailSlot[i].isSecret == TRUE)
					drawPacker(imgSecret1, subTemp[XPOS]-205-106-13, subTemp[YPOS]+pos-48, 0, 0, imgW(imgSecret1), imgH(imgSecret1), VH);
				gDrawString(subTemp[XPOS]-205-106, subTemp[YPOS]+pos-48, strTempS, VL);
				gDrawString(subTemp[XPOS]+310-100, subTemp[YPOS]+pos-48, xMail.xMailSlot[i].strTime, VR);
								
				gSetColor(44, 27, 26);
				setLabelWidth(510);
				gDrawString(subTemp[XPOS]-210-100, subTemp[YPOS]+pos-18, xMail.xMailSlot[i].strText, TL);
				setLabelWidth(0);
				
				drawPacker(imgFriendDelBtn, subTemp[XPOS]+330, subTemp[YPOS]+pos-56, 0, 0, imgW(imgFriendDelBtn), imgH(imgFriendDelBtn), VH);
			}
			else
			{
				drawFriendProfile(subTemp[XPOS]-282, subTemp[YPOS]+pos, xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum, 100);
				drawPacker(imgMailSlotBg0, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgMailSlotBg0), imgH(imgMailSlotBg0), VH);
				
				gSetColor(255, 255, 255);
				sprintf(strTempS, "%s(Lv.%d)",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName,xFriendData[xMail.xMailSlot[i].friendDataSlotNum].lv);
				if(xMail.xMailSlot[i].isSecret == TRUE)
					drawPacker(imgSecret1, subTemp[XPOS]-205-13, subTemp[YPOS]+pos-48, 0, 0, imgW(imgSecret1), imgH(imgSecret1), VH);
				
				gDrawString(subTemp[XPOS]-205, subTemp[YPOS]+pos-48, strTempS, VL);
				gDrawString(subTemp[XPOS]+310, subTemp[YPOS]+pos-48, xMail.xMailSlot[i].strTime, VR);
				
				gSetColor(44, 27, 26);
				setLabelWidth(510);
				gDrawString(subTemp[XPOS]-210, subTemp[YPOS]+pos-18, xMail.xMailSlot[i].strText, TL);
				setLabelWidth(0);
				
				if((xWorldMap.isFriendMap == FALSE && xMail.selectTab == 0) || xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum == xNetData.userNum)
					drawPacker(imgFriendDelBtn, subTemp[XPOS]+330, subTemp[YPOS]+pos-56, 0, 0, imgW(imgFriendDelBtn), imgH(imgFriendDelBtn), VH);
			}
			break;
		case 2:
							
			drawFriendProfile(subTemp[XPOS]-282, subTemp[YPOS]+pos, xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum, 100);
			drawPacker(imgMailSlotBg0, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgMailSlotBg0), imgH(imgMailSlotBg0), VH);
			
			gSetColor(255, 255, 255);
			sprintf(strTempS, "%s(Lv.%d)",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName,xFriendData[xMail.xMailSlot[i].friendDataSlotNum].lv);
			gDrawString(subTemp[XPOS]-224, subTemp[YPOS]+pos-48, strTempS, VL);
			gDrawString(subTemp[XPOS]+310, subTemp[YPOS]+pos-48, xMail.xMailSlot[i].strTime, VR);
							
							
				
			if(xMail.xMailSlot[i].type == 0)
			{
				gSetColor(44, 27, 26);
				setLabelWidth(560);
				sprintf(strTempS, "%s님이 보낸 선물입니다.",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName);
				gDrawString(subTemp[XPOS]-210, subTemp[YPOS]+pos-10, strTempS, VL);
				setLabelWidth(0);
			}
			else
			{
				gSetColor(44, 27, 26);
				setLabelWidth(560);
				gDrawString(subTemp[XPOS]-210, subTemp[YPOS]+pos-10, xMail.xMailSlot[i].strText, VL);
				setLabelWidth(0);
			}
				
				
								
			switch(xMail.xMailSlot[i].giftType)
			{
			case 0:	//의상 아이템
				setMapData(xMail.xMailSlot[i].giftValue.oriData);
				sprintf(strTempS, "첨부선물 : %s(의상)",xFashionData[xMap.type][xMap.listNum].strName);
				break;
			case 1:	//인테리어
				setMapData(xMail.xMailSlot[i].giftValue.oriData);
				sprintf(strTempS, "첨부선물 : %s(인테리어)",xObj.xObjData[xMap.type][xMap.listNum].strName);
				break;
			case 2:	//골드
				setCommaNum(strTempB, xMail.xMailSlot[i].giftValue.oriData);
				sprintf(strTempS, "첨부선물 : %s골드",strTempB);
				break;
			case 3:	//룩
				sprintf(strTempS, "첨부선물 : %d룩",xMail.xMailSlot[i].giftValue.oriData);
				break;
			case 4:	//캔디(추가)
				sprintf(strTempS, "첨부선물 : %d캔디",xMail.xMailSlot[i].giftValue.oriData);
				break;
			case 5:	//일반 모델 캐스팅권(추가)
				sprintf(strTempS, "첨부선물 : 일반 캐스팅");
				break;
			case 6:	//고급 모델 캐스팅권(추가)
				sprintf(strTempS, "첨부선물 : 고급 캐스팅");
				break;
			case 7:	//유행 티켓(의상)
				sprintf(strTempS, "첨부선물 : 의상 유행 티켓");
				break;
			case 8:	//유행 티켓(잡화)
				sprintf(strTempS, "첨부선물 : 잡화 유행 티켓");
				break;
            case 9:	//A급 모델 캐스팅권
                sprintf(strTempS, "첨부선물 : A급 모델 캐스팅");
                break;
            case 10://S급 모델 캐스팅권
                sprintf(strTempS, "첨부선물 : S급 모델 캐스팅");
                break;
            case 11://A~S급 모델 캐스팅권
                sprintf(strTempS, "첨부선물 : A~S급 모델 캐스팅");
                break;
            case 12://경험치
                setCommaNum(strTempB, xMail.xMailSlot[i].giftValue.oriData);
                sprintf(strTempS, "첨부선물 : %s경험치",strTempB);
                break;
            case 13://지정 모델 확정권
                sprintf(strTempS, "첨부선물 : %s(%s급모델)",xModelData[xMail.xMailSlot[i].giftValue.oriData].strName,getGradeName(xModelData[xMail.xMailSlot[i].giftValue.oriData].grade));
                break;
            case 14: //허니팡 횟수 추가
                sprintf(strTempS, "첨부선물 : 허니팡 횟수 추가 아이템");
                break;
			}
			
			gDrawString(subTemp[XPOS]-210, subTemp[YPOS]+pos-31+60, strTempS, VL);
			
			if(xMail.xMailSlot[i].isRecvOk == FALSE)
			{
				
				if(xWorldMap.isFriendMap == FALSE)
				{
					if(i == 0)
					{
						if(xSave.giftLastKey != xMail.giftLastKey)
						{
							xSave.giftLastKey = xMail.giftLastKey;
							gameSave(SAVE_SLOT_GAME);
						}
					}
				}
				drawPacker(imgMailGiftBtn, subTemp[XPOS]+273, subTemp[YPOS]+pos+6, 0, 0, imgW(imgMailGiftBtn), imgH(imgMailGiftBtn), VH);
			}
			else
			{
				if(xWorldMap.isFriendMap == FALSE)
				{
					if(i == 0)
					{
						if(xSave.giftLastKey != 0 || xMail.giftLastKey != 0)
						{
							xMail.giftLastKey = 0;
							xSave.giftLastKey = 0;
							gameSave(SAVE_SLOT_GAME);
						}
					}
				}
			}

			break;
		}		
		
		if((i+1)/10 >= xMail.pageNum)
		{
			isSubTemp[13] = FALSE;
			for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
			{
				if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_MAILLIST || xEventQueueNet.type[ee] == NETQUEUE_TYPE_GIFTLIST)
				{
					isSubTemp[13] = TRUE;
					break;
				}
			}
			
			if(isSubTemp[13] == FALSE)
			{
				//////////////////////////////////////////////////////////////////////////////////////////
				switch(xMail.selectTab)
				{
				case 0:
				case 2:
					if(xWorldMap.isFriendMap == FALSE)
						xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
					else
						xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
					break;
				case 1:
					xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xMail.pmUserId;
					break;
				}
				
				xEventQueueNet.code[xEventQueueNet.totalNum] = xMail.rowNum;
				xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xMail.pageNum;
				xMail.pageNum++;
				switch(xMail.selectTab)
				{
				case 0:
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
					break;
				case 1:
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
					break;
				case 2:
					addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GIFTLIST, TRUE);
					break;
				}
				//////////////////////////////////////////////////////////////////////////////////////////
			}
		}
	}
    gSetClip(false,0, 0, lcdW, lcdH);
	
	switch (xMail.selectTab)
	{
	case 0:
	case 1:
		if(xMail.xDragScrollSlot.totalNum == 0)
		{
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"방명록에 남겨진 글이 없습니다.");
			drawLinkInfo(px-100,py+40,0);
		}
		break;
	case 2:
		if(xMail.xDragScrollSlot.totalNum == 0)
		{
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"받은 선물이 없습니다.");
			drawLinkInfo(px-40,py+40,0);
		}
		break;
	}
	
	xMail.xDragScrollSlot.selectNum = (-xMail.xDragScrollSlot.pos/xMail.xDragScrollSlot.posGab);
	for(int i=0;i<4;i++)
	{
		xMail.xTouchDelBtn[i].wPos = 50;
		xMail.xTouchDelBtn[i].hPos = 50;
		xMail.xTouchDelBtn[i].xPos = subTemp[XPOS]+330 - xMail.xTouchDelBtn[i].wPos/2;
		xMail.xTouchDelBtn[i].yPos = subTemp[YPOS]-56+(xMail.xDragScrollSlot.posGab*i)+(xMail.xDragScrollSlot.pos%xMail.xDragScrollSlot.posGab) - xMail.xTouchDelBtn[i].hPos/2;
		
		
		xMail.xTouchGiftBtn[i].wPos = imgW(imgMailGiftBtn);
		xMail.xTouchGiftBtn[i].hPos = imgH(imgMailGiftBtn);
		xMail.xTouchGiftBtn[i].xPos = subTemp[XPOS]+273-xMail.xTouchGiftBtn[i].wPos/2;
		xMail.xTouchGiftBtn[i].yPos = subTemp[YPOS]+6+(xMail.xDragScrollSlot.posGab*i)+(xMail.xDragScrollSlot.pos%xMail.xDragScrollSlot.posGab)-xMail.xTouchGiftBtn[i].hPos/2;
		
		xMail.xTouchProFileBtn[i].wPos = 100;
		xMail.xTouchProFileBtn[i].hPos = 100;
		if(xFriendData[xMail.xMailSlot[xMail.xDragScrollSlot.selectNum+i].friendDataSlotNum].userNum == xNetData.userNum)
		{
			xMail.xTouchProFileBtn[i].xPos = subTemp[XPOS]+284 - xMail.xTouchProFileBtn[i].wPos/2;
			xMail.xTouchProFileBtn[i].yPos = subTemp[YPOS]+(xMail.xDragScrollSlot.posGab*i)+(xMail.xDragScrollSlot.pos%xMail.xDragScrollSlot.posGab) - xMail.xTouchProFileBtn[i].hPos/2;
		}
		else
		{
			xMail.xTouchProFileBtn[i].xPos = subTemp[XPOS]-284 - xMail.xTouchProFileBtn[i].wPos/2;
			xMail.xTouchProFileBtn[i].yPos = subTemp[YPOS]+(xMail.xDragScrollSlot.posGab*i)+(xMail.xDragScrollSlot.pos%xMail.xDragScrollSlot.posGab) - xMail.xTouchProFileBtn[i].hPos/2;
		}
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xMail.xTouchProFileBtn[i].xPos, xMail.xTouchProFileBtn[i].yPos, xMail.xTouchProFileBtn[i].wPos, xMail.xTouchProFileBtn[i].hPos);
		fillRect(xMail.xTouchGiftBtn[i].xPos, xMail.xTouchGiftBtn[i].yPos, xMail.xTouchGiftBtn[i].wPos, xMail.xTouchGiftBtn[i].hPos);
		setAlpha(ALPHA_MAX);
		*/
	}
		
	subTemp[XPOS] = px+440;
	subTemp[YPOS] = py-280;
	
	xTouchClr.wPos = 100;
	xTouchClr.hPos = 100;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_17_RESULT:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		case TUTO_17_MAIL_FRIEND:
			if(xWorldMap.isFriendMap == FALSE)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		}
	}
		
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
}

void drawMiniProFile()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	drawFriendProfile(px-100, py-71, xFriendData[xMiniProfile.friendDataSlotNum].userNum, 150);
	drawPacker(imgMiniProFileBg, px, py, 0, 0, imgW(imgMiniProFileBg), imgH(imgMiniProFileBg), VH);
	
	subTemp[XPOS] = px+80;
	subTemp[YPOS] = py-86;
	
	drawPacker(imgMailSex, subTemp[XPOS]-68, subTemp[YPOS]+2, imgW(imgMailSex)/2*xFriendData[xMiniProfile.friendDataSlotNum].sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS]+4, xFriendData[xMiniProfile.friendDataSlotNum].strNickName, VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	
	gSetColor(82, 49, 38);
	getSprintfArea(strTempS,xFriendData[xMiniProfile.friendDataSlotNum].area);
	sprintf(strTempB, "Lv.%d / %d세 / %s",xFriendData[xMiniProfile.friendDataSlotNum].lv,(xCalendar.nowYear+1)-xFriendData[xMiniProfile.friendDataSlotNum].age,strTempS);
	gDrawString(subTemp[XPOS]+70,subTemp[YPOS]+34,strTempB,VR);
	
	subTemp[XPOS] = px-166;
	subTemp[YPOS] = py+28;
	setFontSize(8);
	sprintf(strTempS, "%s 님의 한마디",xFriendData[xMiniProfile.friendDataSlotNum].strNickName);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-4, strTempS, VL, 255, 170, 21, 44, 27, 26);
	setFontSize(11);
	
	gSetColor(82, 49, 38);
	setLabelWidth(320);
	gDrawString(subTemp[XPOS],subTemp[YPOS]+20,xMiniProfile.strToday,TL);
	setLabelWidth(0);
	
	subTemp[XPOS] = px;
	subTemp[YPOS] = py+185;
		
	setFontSize(20);
	if(xFriendData[xMiniProfile.friendDataSlotNum].isFriend == 0)	//친구추가
	{
		drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "친구추가", VH, 255, 255, 255, 186, 70, 10);
		xMiniProfile.xTouchFriendShopBtn.wPos = imgW(imgPopupBtn1);
		xMiniProfile.xTouchFriendShopBtn.hPos = imgH(imgPopupBtn1)/2;
		xMiniProfile.xTouchFriendShopBtn.xPos = subTemp[XPOS]-xMiniProfile.xTouchFriendShopBtn.wPos/2;
		xMiniProfile.xTouchFriendShopBtn.yPos = subTemp[YPOS]-xMiniProfile.xTouchFriendShopBtn.hPos/2;
	}
	else
	{
		drawPacker(imgPopupBtn0, subTemp[XPOS]+90, subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		xFriendData[xMiniProfile.friendDataSlotNum].isAdd = TRUE;
		xFriendData[xMiniProfile.friendDataSlotNum].todayOrder = TRUE;
		gDrawStringBold(subTemp[XPOS]+90-2, subTemp[YPOS]-2, "친구샵 방문", VH, 255, 255, 255, 186, 70, 10);
		xMiniProfile.xTouchFriendShopBtn.wPos = imgW(imgPopupBtn1);
		xMiniProfile.xTouchFriendShopBtn.hPos = imgH(imgPopupBtn1)/2;
		xMiniProfile.xTouchFriendShopBtn.xPos = subTemp[XPOS]+90-xMiniProfile.xTouchFriendShopBtn.wPos/2;
		xMiniProfile.xTouchFriendShopBtn.yPos = subTemp[YPOS]-xMiniProfile.xTouchFriendShopBtn.hPos/2;
			
		
		if(xWorldMap.isAppReview == FALSE)
		{
			drawPacker(imgPopupBtn0, subTemp[XPOS]-90-2, subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
			drawPacker(imgQuestGiftIcon, subTemp[XPOS]-90-57, subTemp[YPOS]-5, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
			setFontSize(20);
			gDrawStringBold(subTemp[XPOS]-90+8-2, subTemp[YPOS]-2, "선물하기", VH, 255, 255, 255, 186, 70, 10);
			setFontSize(11);
			
			xMail.xTouchCashGiftBtn.wPos = imgW(imgPopupBtn0);
			xMail.xTouchCashGiftBtn.hPos = imgH(imgPopupBtn0)/2;
			xMail.xTouchCashGiftBtn.xPos = subTemp[XPOS]-90-xMail.xTouchCashGiftBtn.wPos/2;
			xMail.xTouchCashGiftBtn.yPos = subTemp[YPOS]-xMail.xTouchCashGiftBtn.hPos/2;
		}
	}
	setFontSize(11);
	
	
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xMiniProfile.xTouchFriendShopBtn.xPos, xMiniProfile.xTouchFriendShopBtn.yPos, xMiniProfile.xTouchFriendShopBtn.wPos, xMiniProfile.xTouchFriendShopBtn.hPos);
	setAlpha(ALPHA_MAX);
	*/
	
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = px+173-xTouchClr.wPos/2;
	xTouchClr.yPos = py-183-xTouchClr.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
}

void drawGiftShopResult()
{
	int px = cx;
	int py = cy;
	
	drawPacker(imgQuestResult0, px, py, 0, 0, imgW(imgQuestResult0), imgH(imgQuestResult0), VH);
	setFontSize(14);
	gDrawStringBold(px+4, py-189, "보상 아이템", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	drawPacker(imgQuestGiftIcon, px-70, py-190, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
	
	
	switch(xMail.xMailSlot[xMail.selectSlot].giftType)
	{
	case 0:	//의상 아이템
		//획득한 의상
		setMapData(xMail.xMailSlot[xMail.selectSlot].giftValue.oriData);
		drawFittingF(px, py-60, xMail.xMailSlot[xMail.selectSlot].giftValue.oriData, 80);
		sprintf(strTempS, "[%s]획득",xFashionData[xMap.type][xMap.listNum].strName);
		break;
	case 1:	//인테리어
		setMapData(xMail.xMailSlot[xMail.selectSlot].giftValue.oriData);
	
			
		setDrawObjCenter(xMap.type,xMap.listNum);
		if(xDrawObjCenter.reSize != 100)
		{
			xGame.fgameScaleCx =px;
			xGame.fgameScaleCy =lcdH-(py-60);
			xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
		}
			drawObj(px+xDrawObjCenter.w, py-60+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
		xGame.fgameScale = 1.0f;
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
			
		sprintf(strTempS, "[%s]획득",xObj.xObjData[xMap.type][xMap.listNum].strName);
		break;
	case 2:	//골드
		setCommaNum(strTempB, xMail.xMailSlot[xMail.selectSlot].giftValue.oriData);
		sprintf(strTempS, "%s골드",strTempB);
		drawImage(&imgGiftGoldIcon, px, py-60, 0, 0, imgGiftGoldIcon.w, imgGiftGoldIcon.h, VH);
		break;
	case 3:	//룩
		sprintf(strTempS, "%d룩",xMail.xMailSlot[xMail.selectSlot].giftValue.oriData);
		drawImage(&imgGiftLookIcon, px, py-60, 0, 0, imgGiftLookIcon.w, imgGiftLookIcon.h, VH);
		break;
	case 4:	//캔디(추가)
		sprintf(strTempS, "%d캔디",xMail.xMailSlot[xMail.selectSlot].giftValue.oriData);
		drawImage(&imgGiftCandyIcon, px, py-60, 0, 0, imgGiftCandyIcon.w, imgGiftCandyIcon.h, VH);
		break;
	case 5:	//일반 모델 캐스팅권(추가)
		sprintf(strTempS, "일반 캐스팅");
		drawImage(&imgGiftModelCastingCAIcon, px, py-60, 0, 0, imgGiftModelCastingCAIcon.w, imgGiftModelCastingCAIcon.h, VH);
		break;
	case 6:	//고급 모델 캐스팅권(추가)
		sprintf(strTempS, "고급 캐스팅");
		drawImage(&imgGiftModelCastingBSIcon, px, py-60, 0, 0, imgGiftModelCastingBSIcon.w, imgGiftModelCastingBSIcon.h, VH);
		break;
	case 7:	//유행 티켓(의상)
		sprintf(strTempS, "의상 유행 티켓");
		drawImage(&imgGiftTrendHangerIcon, px, py-60, 0, 0, imgGiftTrendHangerIcon.w, imgGiftTrendHangerIcon.h, VH);
		break;
	case 8:	//유행 티켓(잡화)
		sprintf(strTempS, "잡화 유행 티켓");
		drawImage(&imgGiftTrendAccessoryIcon, px, py-60, 0, 0, imgGiftTrendAccessoryIcon.w, imgGiftTrendAccessoryIcon.h, VH);
		break;
    case 9:	//A급 모델 캐스팅권
        sprintf(strTempS, "A급 모델 캐스팅");
        drawImage(&imgCastingAIcon, px, py-60, 0, 0, imgCastingAIcon.w, imgCastingAIcon.h, VH);
        break;
    case 10://S급 모델 캐스팅권
        sprintf(strTempS, "S급 모델 캐스팅");
        drawImage(&imgCastingSIcon, px, py-60, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
        break;
    case 11://A~S급 모델 캐스팅권
        sprintf(strTempS, "A~S급 모델 캐스팅");
        drawImage(&imgCastingASIcon, px, py-60, 0, 0, imgCastingASIcon.w, imgCastingASIcon.h, VH);
        break;
    case 12://경험치
        sprintf(strTempS, "%d경험치",xMail.xMailSlot[xMail.selectSlot].giftValue.oriData);
        drawImage(&imgGiftExpIcon, px, py-60, 0, 0, imgGiftExpIcon.w, imgGiftExpIcon.h, VH);
        break;
    case 13://지정 모델 확정권
        sprintf(strTempS, "%s(%s급모델)",xModelData[xMail.xMailSlot[xMail.selectSlot].giftValue.oriData].strName,getGradeName(xModelData[xMail.xMailSlot[xMail.selectSlot].giftValue.oriData].grade));
        break;
    case 14://허니팡 횟수 추가
        drawClubItem(px, py-60, 0);
        sprintf(strTempS, "허니팡 횟수 추가");
//            drawImage(&imgGiftExpIcon, px, py-60, 0, 0, imgGiftExpIcon.w, imgGiftExpIcon.h, VH);
        break;
    }
	
	
	
				
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px, py+74, strTempS, VH);
	setFontSize(11);
	
	drawPacker(imgQuestResult1, px, py+169, 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	setFontSize(14);
	gDrawStringBold(px-2, py+169-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = px-xTouchOk.wPos/2;
	xTouchOk.yPos = py+169-xTouchOk.hPos/2;
}


void setDialog(M_Char *fileName, M_Int32 sentence, M_Int32 width, M_Int8 line)
{
    M_Int32 ret, blank;
	M_Int32 i, k;
	M_Int32 index, length;
	M_Int32 x;
	M_Int32 resSize;	
	M_Char lineData[DIALOG_TEXT_ROW];
	M_Int32 nTotalSentence, num;
	char strTemp[128];
	
	xDialog.playerLeftTemp = DONT;
	xDialog.playerRightTemp = DONT;
 	
	if(sentence == 0)
	{
		playState = PLAY_DIALOG;
		xDialog.state = DIALOG_FADEIN;
		xDialog.anyCnt = 0;
		
		freeImg(&xDialog.imgPlayer[0][0]);
		freeImg(&xDialog.imgPlayer[0][1]);
		freeImg(&xDialog.imgPlayer[0][2]);
		freeImg(&xDialog.imgPlayer[0][3]);
		freeImg(&xDialog.imgPlayer[1][0]);
		freeImg(&xDialog.imgPlayer[1][1]);
		freeImg(&xDialog.imgPlayer[1][2]);
		freeImg(&xDialog.imgPlayer[1][3]);
	}
	
	
    sprintf(xDialog.strFile,"%s",fileName);

    
    loadFileData(xDialog.strFile, bufData, &bufDataSize);
    
    
	MEMSET(lineData);
	MEMSET(xDialog.strText);
	
	xDialog.whoAnyCnt = 0;
	
	xDialog.showFontCnt = 0;
	xDialog.showFontLineCnt = 0;
	
	xDialog.lineC = 0;
	xDialog.lineF = 0;
	xDialog.lineV = 0;
	xDialog.lineT = 0;
	xDialog.pageT = 0;
	xDialog.pageC = 0;
	
	xDialog.lineV = line;
	
	x = ret = blank = index = length = 0;
	
		
	
	nTotalSentence = getByteToInt(bufData, index);
	index += sizeof(M_Int32);
	
	for(i=0; i<nTotalSentence; i++)
	{
		num = getByteToInt(bufData, index);
		index += sizeof(M_Int32);
				
		if(sentence != num)
		{
			index += sizeof(M_Int32);
			
			index += sizeof(M_Int32);
			index += sizeof(M_Int32);
			index += sizeof(M_Int32);
			index += sizeof(M_Int32);
			index += sizeof(M_Int32);
			index += sizeof(M_Int32);		
			length = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
			index += length;
			
		}
		else
		{
			index += sizeof(M_Int32);
			
			
			xDialog.playerLeft = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
			
			xDialog.playerRight = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
			
			xDialog.player = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
			
			xDialog.face = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
						
			xDialog.place = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
						
			xDialog.next = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
			
			length = getByteToInt(bufData, index);
			index += sizeof(M_Int32);
			
			length += index;			
			blank = index;
			
			for(k=index; k<length; k++)
			{
				//UTF8파싱
				//아스키코드 < 0x80
				//2바이트 < 0x800
				//3바이트 < 0x10000				
                if((unsigned char)bufData[k] >= 0xA4)
				{
                    lineData[ret++] = bufData[k++];
                    lineData[ret++] = bufData[k++];
                    lineData[ret++] = bufData[k];
                    
                    x += DIALOG_KORWIDTH;
                    
				}
				else
				{
                    if(k == blank && bufData[k] == 0x20)
                        continue;
                    else if(bufData[k] == '@')
                    {
                        for(int nn=0;nn<strlen(xSaveTemp.strNickName);nn++)
                        {
                            lineData[ret++] = xSaveTemp.strNickName[nn];
                        }
                    }
                    else if(bufData[k] == '|' && bufData[k+1] == 'n')
                    {
                        k++;
                        x += width;
                    }
                    else
                    {
                        lineData[ret++] = bufData[k];
                        x += DIALOG_ENGWIDTH;
                    }
					
				}
				if(x >= width || k == (length-1))
				{
					memcpy(xDialog.strText[xDialog.lineT++], (void*)lineData, ret);
					
					x = ret = 0;
                    
					if(xDialog.lineT >= DIALOG_TEXT_COL)
						break;
					blank = k+1;
				}
			}
            
			xDialog.pageC = 0;
			xDialog.pageT = xDialog.lineT / xDialog.lineV;
			
			if(xDialog.pageT > 0 && xDialog.lineT % xDialog.lineV == 0)
				xDialog.pageT--;			
			break;
		}
	}
}

void drawDialog()
{
	M_Int32 cline;
	M_Int32 nFontH = 28;
	
	M_Boolean isDraw = TRUE;
	
	M_Boolean isTitle = FALSE;
	M_Boolean titleAlpha = 0;
	
	int startCnt;
	
	xGame.isAlphaTest = TRUE;
	
	M_Boolean isFade = FALSE;
	if(xQuestInfo.totalNum > 0
	   && xQuestInfo.xSlot[0].type == QUEST_TYPE_MAIN
	   && xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkType[0] == 71)
	{
		isFade = TRUE;
	}
	
	
	xDialog.isUiShow = FALSE;
	if(isFade == FALSE)
	{
		xDialog.isUiShow = TRUE;
		if(xDialog.state == DIALOG_FADEIN)
		{
			xDialog.state = DIALOG_PLAY;
		}
		if(xDialog.state == DIALOG_FADEOUT)
		{
			playState = PLAY_PLAY;
			
			if(xQuestInfo.totalNum > 0
			   && xQuestInfo.xSlot[0].type == QUEST_TYPE_MAIN
			   && xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkType[0] != 20
			   && xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkType[0] != 71)
			{
				xQuestInfo.selectSlot = 0;
				xWorldMap.state = WORLDMAP_STATE_QUESTINFO;
				xQuestInfo.state = QUESTINFO_STATE_PLAY;
				xQuestMain.state = QUEST_STATE_PLAY;
				///////////////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.action[xEventQueueNet.totalNum]=1;		//0튜토리얼,1메인,2일반
				xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, FALSE);
				///////////////////////////////////////////////////////////////////////////////////////
			}
			return;
		}
	}
		
	switch(xDialog.state)
	{
	case DIALOG_FADEIN:
		//조금씩 어두워지고
		switch(xDialog.anyCnt++)
		{
		case 0:xDialog.isUiShow = TRUE;	setAlpha(20);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 1:xDialog.isUiShow = TRUE;	setAlpha(40);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 2:xDialog.isUiShow = TRUE;	setAlpha(60);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 3:xDialog.isUiShow = TRUE;	setAlpha(80);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 4:xDialog.isUiShow = TRUE;	setAlpha(100);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 5:xDialog.isUiShow = TRUE;	setAlpha(120);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 6:xDialog.isUiShow = TRUE;	setAlpha(140);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 7:xDialog.isUiShow = TRUE;	setAlpha(160);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 8:xDialog.isUiShow = TRUE;	setAlpha(180);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 9:xDialog.isUiShow = TRUE;	setAlpha(200);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 10:xDialog.isUiShow = TRUE;	setAlpha(220);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 11:xDialog.isUiShow = TRUE;	setAlpha(240);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		//default:xDialog.isUiShow = TRUE;	setAlpha(ALPHA_MAX);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);return;break;
		case 40:setAlpha(240);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 41:setAlpha(220);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 42:setAlpha(200);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 43:setAlpha(180);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 44:setAlpha(160);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 45:setAlpha(140);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 46:setAlpha(120);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 47:setAlpha(100);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 48:setAlpha(80);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 49:setAlpha(60);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 50:setAlpha(40);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 51:setAlpha(20);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 52:setAlpha(0);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 53:setAlpha(0);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 54:setAlpha(0);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
		case 55:
			xDialog.state = DIALOG_PLAY;
			break;
		default:xDialog.isUiShow = TRUE;	setAlpha(ALPHA_MAX);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		}
		
		startCnt = xDialog.anyCnt-3;
					
		if(startCnt >= 0 && startCnt <= 51)
		{
			switch(xDialog.anyCnt-3)
			{
			case 0:isTitle = TRUE;titleAlpha=20;break;
			case 1:isTitle = TRUE;titleAlpha=40;break;
			case 2:isTitle = TRUE;titleAlpha=60;break;
			case 3:isTitle = TRUE;titleAlpha=80;break;
			case 4:isTitle = TRUE;titleAlpha=100;break;
			case 5:isTitle = TRUE;titleAlpha=120;break;
			case 6:isTitle = TRUE;titleAlpha=140;break;
			case 7:isTitle = TRUE;titleAlpha=160;break;
			case 8:isTitle = TRUE;titleAlpha=180;break;
			case 9:isTitle = TRUE;titleAlpha=200;break;
			case 10:isTitle = TRUE;titleAlpha=220;break;
			case 11:isTitle = TRUE;titleAlpha=240;break;
				
				
			case 40:isTitle = TRUE;titleAlpha=240;break;
			case 41:isTitle = TRUE;titleAlpha=220;break;
			case 42:isTitle = TRUE;titleAlpha=200;break;
			case 43:isTitle = TRUE;titleAlpha=180;break;
			case 44:isTitle = TRUE;titleAlpha=160;break;
			case 45:isTitle = TRUE;titleAlpha=140;break;
			case 46:isTitle = TRUE;titleAlpha=120;break;
			case 47:isTitle = TRUE;titleAlpha=100;break;
			case 48:isTitle = TRUE;titleAlpha=80;break;
			case 49:isTitle = TRUE;titleAlpha=60;break;
			case 50:isTitle = TRUE;titleAlpha=40;break;
			case 51:isTitle = TRUE;titleAlpha=20;break;
			default:isTitle = TRUE;titleAlpha=ALPHA_MAX;break;
			}
		}
		break;
	case DIALOG_FADEOUT:
		//조금씩 어두워지고
		switch(++xDialog.anyCnt)
		{
		case 20:xDialog.isUiShow = TRUE;	setAlpha(240);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 21:xDialog.isUiShow = TRUE;	setAlpha(220);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 22:xDialog.isUiShow = TRUE;	setAlpha(200);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 23:xDialog.isUiShow = TRUE;	setAlpha(180);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 24:xDialog.isUiShow = TRUE;	setAlpha(160);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 25:xDialog.isUiShow = TRUE;	setAlpha(140);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 26:xDialog.isUiShow = TRUE;	setAlpha(120);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 27:xDialog.isUiShow = TRUE;	setAlpha(100);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 28:xDialog.isUiShow = TRUE;	setAlpha(80);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 29:xDialog.isUiShow = TRUE;	setAlpha(60);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 30:xDialog.isUiShow = TRUE;	setAlpha(40);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 31:xDialog.isUiShow = TRUE;	setAlpha(20);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);isDraw = FALSE;break;
		case 32:
			xDialog.isUiShow = TRUE;
			playState = PLAY_PLAY;
			return;
			break;
		}
		break;
	}
	
	if(isDraw == TRUE)
	{
		int px =cx;
		int py =lcdH;
		
		if(++xDialog.whoAnyCnt > 100)
			xDialog.whoAnyCnt = 100;

		
		if(xDialog.playerLeftTemp != xDialog.playerLeft)
		{
			xDialog.playerLeftTemp = xDialog.playerLeft;
						
			freeImg(&xDialog.imgPlayer[0][0]);
			freeImg(&xDialog.imgPlayer[0][1]);
			freeImg(&xDialog.imgPlayer[0][2]);
			freeImg(&xDialog.imgPlayer[0][3]);
				
			if(xDialog.playerLeft == 6)				//주인공
			{
				
				if(xSaveTemp.sex == 0)
				{
					sprintf(strTempS, "popupnpc%d.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][0]);
					sprintf(strTempS, "popupnpc%da.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][1]);
					sprintf(strTempS, "popupnpc%db.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][2]);
					sprintf(strTempS, "popupnpc%dc.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][3]);
				}
				else
				{
					sprintf(strTempS, "popupnpc%dman.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][0]);
					sprintf(strTempS, "popupnpc%daman.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][1]);
					sprintf(strTempS, "popupnpc%dbman.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][2]);
					sprintf(strTempS, "popupnpc%dcman.png",xDialog.playerLeft);
					loadImg(strTempS, &xDialog.imgPlayer[0][3]);
				}
			}
			else if(xDialog.playerLeft == 9)		//해설
			{
				
			}
			else
			{
				sprintf(strTempS, "popupnpc%d.png",xDialog.playerLeft);
				loadImg(strTempS, &xDialog.imgPlayer[0][0]);
				sprintf(strTempS, "popupnpc%da.png",xDialog.playerLeft);
				loadImg(strTempS, &xDialog.imgPlayer[0][1]);
				sprintf(strTempS, "popupnpc%db.png",xDialog.playerLeft);
				loadImg(strTempS, &xDialog.imgPlayer[0][2]);
				sprintf(strTempS, "popupnpc%dc.png",xDialog.playerLeft);
				loadImg(strTempS, &xDialog.imgPlayer[0][3]);
			}
		}
		
		if(xDialog.playerRightTemp != xDialog.playerRight)
		{
			xDialog.playerRightTemp = xDialog.playerRight;
			
			freeImg(&xDialog.imgPlayer[1][0]);
			freeImg(&xDialog.imgPlayer[1][1]);
			freeImg(&xDialog.imgPlayer[1][2]);
			freeImg(&xDialog.imgPlayer[1][3]);
				
			if(xDialog.playerRight == 6)				//주인공
			{
				
				if(xSaveTemp.sex == 0)
				{
					sprintf(strTempS, "popupnpc%d.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][0]);
					sprintf(strTempS, "popupnpc%da.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][1]);
					sprintf(strTempS, "popupnpc%db.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][2]);
					sprintf(strTempS, "popupnpc%dc.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][3]);
				}
				else
				{
					sprintf(strTempS, "popupnpc%dman.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][0]);
					sprintf(strTempS, "popupnpc%daman.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][1]);
					sprintf(strTempS, "popupnpc%dbman.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][2]);
					sprintf(strTempS, "popupnpc%dcman.png",xDialog.playerRight);
					loadImg(strTempS, &xDialog.imgPlayer[1][3]);
				}
			}
			else if(xDialog.playerRight == 9)		//해설
			{
				
			}
			else
			{
				sprintf(strTempS, "popupnpc%d.png",xDialog.playerRight);
				loadImg(strTempS, &xDialog.imgPlayer[1][0]);
				sprintf(strTempS, "popupnpc%da.png",xDialog.playerRight);
				loadImg(strTempS, &xDialog.imgPlayer[1][1]);
				sprintf(strTempS, "popupnpc%db.png",xDialog.playerRight);
				loadImg(strTempS, &xDialog.imgPlayer[1][2]);
				sprintf(strTempS, "popupnpc%dc.png",xDialog.playerRight);
				loadImg(strTempS, &xDialog.imgPlayer[1][3]);
			}
		}
		
		
		
		if(isFade == TRUE)
			drawBgFillRect();
		
		
		
		subTemp[XPOS] = px;
		subTemp[YPOS] = py-300;
		
		if(isFade == FALSE)
			subTemp[YPOS] += 40;
		
		switch(xDialog.player)
		{
		case 6: //"주인공");
			sprintf(strTempS, "%s",xSaveTemp.strNickName);
			break;
		case 9: //"해설");
			sprintf(strTempS, "나레이션");
			break;
		default:
			sprintf(strTempS, "%s",xNpc[xDialog.player].strName);
			break;
		}
		
		
		switch(xDialog.player)
		{
		case 9:	//해설
			drawPacker(imgDialogBg2, subTemp[XPOS], subTemp[YPOS]+150-10, 0, 0, imgW(imgDialogBg2), imgH(imgDialogBg2), VH);
			gSetColor(82, 49, 38);
			setFontSize(14);
			for(int i=0; i<xDialog.lineV; i++)
			{
				cline = (xDialog.pageC * xDialog.lineV) + i;
				if(cline < xDialog.lineT)
					gDrawString(subTemp[XPOS]-233, subTemp[YPOS]-61+(i*(nFontH))+150, xDialog.strText[cline],VL);
			}
			setFontSize(11);
			break;
		default:
			if(xDialog.player == xDialog.playerLeft)
				xGame.isReverse = TRUE;
			drawPacker(imgDialogBg0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgDialogBg0), imgH(imgDialogBg0), VH);
			
			xGame.isReverse = FALSE;
			
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS]-231, subTemp[YPOS]-79, strTempS, VL,ALPHA_MAX,ALPHA_MAX,ALPHA_MAX,82, 49, 38);
			setFontSize(11);
			gSetColor(82, 49, 38);
			setFontSize(14);
			for(int i=0; i<xDialog.lineV; i++)
			{
				cline = (xDialog.pageC * xDialog.lineV) + i;
				if(cline < xDialog.lineT)
				{
					gDrawString(subTemp[XPOS]-233, subTemp[YPOS]-41+(i*(nFontH)), xDialog.strText[cline],VL );
				}
			}
			setFontSize(11);
			break;
		}

		
				
		subTemp[XPOS] = px;
		subTemp[YPOS] = py-40;
		if(isFade == FALSE)
			subTemp[YPOS] += 40;
		if(xDialog.playerRight != xDialog.playerLeft)
		{
			/*
			xGame.isBlend = TRUE;
			xGame.blendType = BLEND_BLACK;
			xGame.blendNum = 180;
			 */
			
			switch(xDialog.playerLeft)
			{
			case 6:
			case 3:
			case 8:
				break;
			default:
				xGame.isReverse = TRUE;
				break;
			}
			
			drawImage(&xDialog.imgPlayer[0][0], subTemp[XPOS]-370, subTemp[YPOS], 0, 0, xDialog.imgPlayer[0][0].w, xDialog.imgPlayer[0][0].h, BH);
			drawImage(&xDialog.imgPlayer[0][1], subTemp[XPOS]-370, subTemp[YPOS]-xDialog.imgPlayer[0][0].h, 0, 0, xDialog.imgPlayer[0][1].w, xDialog.imgPlayer[0][1].h, BH);
			xGame.isReverse = FALSE;

				
			drawImage(&xDialog.imgPlayer[1][0], subTemp[XPOS]+370, subTemp[YPOS], 0, 0, xDialog.imgPlayer[1][0].w, xDialog.imgPlayer[1][0].h, BH);
			drawImage(&xDialog.imgPlayer[1][1], subTemp[XPOS]+370, subTemp[YPOS]-xDialog.imgPlayer[1][0].h, 0, 0, xDialog.imgPlayer[1][1].w, xDialog.imgPlayer[1][1].h, BH);
			xGame.isBlend = FALSE;
		}

		if(xDialog.player == xDialog.playerLeft)
		{
			switch(xDialog.playerLeft)
			{
			case 6:
			case 3:
			case 8:
				break;
			default:
				xGame.isReverse = TRUE;
				break;
			}
			
			drawImage(&xDialog.imgPlayer[0][0], subTemp[XPOS]-370, subTemp[YPOS], 0, 0, xDialog.imgPlayer[0][0].w, xDialog.imgPlayer[0][0].h, BH);
			drawImage(&xDialog.imgPlayer[0][xDialog.face+1], subTemp[XPOS]-370, subTemp[YPOS]-xDialog.imgPlayer[0][0].h, 0, 0, xDialog.imgPlayer[0][xDialog.face+1].w, xDialog.imgPlayer[0][xDialog.face+1].h, BH);
			xGame.isReverse = FALSE;
		}
		else
		{
			drawImage(&xDialog.imgPlayer[1][0], subTemp[XPOS]+370, subTemp[YPOS], 0, 0, xDialog.imgPlayer[1][0].w, xDialog.imgPlayer[1][0].h, BH);
			drawImage(&xDialog.imgPlayer[1][xDialog.face+1], subTemp[XPOS]+370, subTemp[YPOS]-xDialog.imgPlayer[1][0].h, 0, 0, xDialog.imgPlayer[1][xDialog.face+1].w, xDialog.imgPlayer[1][xDialog.face+1].h, BH);
		}
				
					
		
		if(isFade == TRUE)
		{
			subTemp[XPOS] = lcdW-55;
			subTemp[YPOS] = 73;
			drawPacker(imgDialogSkipBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgDialogSkipBtn), imgH(imgDialogSkipBtn), VH);
		}
		
		xDialog.xTouchSkip.wPos = imgW(imgDialogSkipBtn);
		xDialog.xTouchSkip.hPos = imgH(imgDialogSkipBtn);
		xDialog.xTouchSkip.xPos = subTemp[XPOS]-xDialog.xTouchSkip.wPos/2;
		xDialog.xTouchSkip.yPos = subTemp[YPOS]-xDialog.xTouchSkip.hPos/2;
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xDialog.xTouchSkip.xPos, xDialog.xTouchSkip.yPos, xDialog.xTouchSkip.wPos, xDialog.xTouchSkip.hPos);
		setAlpha(ALPHA_MAX);
		*/
		
		
		subTemp[XPOS] = cx;
		subTemp[YPOS] = cy-242;
		if(isFade == TRUE)
		{
			drawPacker(imgDialogBg1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgDialogBg1), imgH(imgDialogBg1), VH);
			setFontSize(20);
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+1, xQuestDataMain[xQuestInfo.xSlot[0].questNum].strTitle, VH,ALPHA_MAX,ALPHA_MAX,ALPHA_MAX,82, 49, 38);
			setFontSize(11);
		}
		
		if(isFade == TRUE)
		{
			gSetColor(0, 0, 0);
			fillRect(0, 0, lcdW, 40);
			fillRect(0, lcdH-40, lcdW, 40);
		}
		
		switch(xDialog.state)
		{
		case DIALOG_FADEOUT:
			//조금씩 어두워지고
			switch(xDialog.anyCnt)
			{
			case 1:	setAlpha(20);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 2:	setAlpha(40);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 3:	setAlpha(60);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 4:	setAlpha(80);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 5:	setAlpha(100);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 6:	setAlpha(120);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 7:	setAlpha(140);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 8:	setAlpha(160);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 9:	setAlpha(180);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 10:setAlpha(200);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 11:setAlpha(220);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			case 12:setAlpha(240);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			default:setAlpha(ALPHA_MAX);gSetColor(0, 0, 0);fillRect(0, 0, lcdW, lcdH);setAlpha(ALPHA_MAX);break;
			}
			break;
		}
	}
	
	if(isTitle == TRUE)
	{
		subTemp[XPOS] = cx;
		subTemp[YPOS] = cy;
		setAlpha(titleAlpha*ALPHA_MAX/100);
		drawPacker(imgDialogBg3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgDialogBg3), imgH(imgDialogBg3), VH);
		
		sprintf(strTempS, "Episode %d 시작",xQuestDataMain[xQuestInfo.xSlot[0].questNum].lv);
		gSetColor(158, 141, 136);
		gDrawString(subTemp[XPOS]-160, subTemp[YPOS]-20, strTempS, VL);
		
		gSetColor(ALPHA_MAX, ALPHA_MAX, ALPHA_MAX);
		setFontSize(14);
		gDrawString(subTemp[XPOS]-160, subTemp[YPOS]+16, xQuestDataMain[xQuestInfo.xSlot[0].questNum].strTitle, VL);
		setFontSize(11);
		
		setAlpha(ALPHA_MAX);
	}
	
	xGame.isAlphaTest = FALSE;
}


void drawDialogTuto()
{
	M_Int32 cline;
	M_Int32 nFontH = 24;
		
	if(xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == TRUE)
		return;
	
	M_Boolean isCheck = FALSE;
	//안그림 체크
	if(isCheck == FALSE)
	{
		switch(xWorldMap.state)
		{
		case WORLDMAP_STATE_QUESTINFO:	//퀘스트
		case WORLDMAP_STATE_NOTICE:
		case WORLDMAP_STATE_NOTICEPOPUP:
			break;
		case WORLDMAP_STATE_SEVERSELL:
		case WORLDMAP_STATE_ACCESSBONUS:
			return;
			break;
		}
	}
	
	if(isCheck == FALSE)
	{
		switch(xWorldMap.state)
		{
		case WORLDMAP_STATE_STAFF:			//직원샵
			isCheck = TRUE;
			break;
		}
		
		if(isCheck == TRUE)
		{
			xDialog.x = cx;
			xDialog.y =	115;
			xDialog.ank = VH;
		}
	}
	
	if(isCheck == FALSE)
	{
		/////상단///
		//팝업종류
		if(playState == PLAY_MSG)
			isCheck = TRUE;
		switch(xWorldMap.state)
		{
		case WORLDMAP_STATE_MODEL:			//모델리스트
			if(xModel.state != MODELCOLLECT_STATE_FITTING)
				isCheck = TRUE;
			break;
		case WORLDMAP_STATE_MODEL_FRIEND:
		case WORLDMAP_STATE_FRIENDLIST:		//친구리스트
		case WORLDMAP_STATE_SELL:		//판매대
			isCheck = TRUE;
			break;
		case WORLDMAP_STATE_FASHIONSHOWNEW:		//패션쇼의준비쪽
			switch(xFashionShow.state)
			{
			case FASHIONSHOW_STATE_SELECTMODEL:
			case FASHIONSHOW_STATE_DRESSCODE:
				isCheck = TRUE;
				break;
			}
				
				
			break;
		}
		
		
		if(isCheck == TRUE)
		{
			xDialog.x = cx;
			xDialog.y =	60;
			xDialog.ank = VH;
		}
	}
	
	//////하단//////
	if(isCheck == FALSE)
	{
		switch(xWorldMap.state)
		{
		case WORLDMAP_STATE_MODEL:			//모델리스트
			if(xModel.state == MODELCOLLECT_STATE_FITTING)
				isCheck = TRUE;
			break;
		case WORLDMAP_STATE_PRODUCTIONMENU:	//의상제작
		case WORLDMAP_STATE_INTERIORSHOP:	//인테리어샵
		case WORLDMAP_STATE_CARSTORAGE:		//주문배송
		case WORLDMAP_STATE_MAIL:			//방명록
		case WORLDMAP_STATE_PLAY:			//월드맵
		case WORLDMAP_STATE_FITTING:		//피팅
		case WORLDMAP_STATE_INTERIOR:		//편집모드
		case WORLDMAP_STATE_STAFFMAKE:		//스테프만들기
			isCheck = TRUE;
			break;
		case WORLDMAP_STATE_FASHIONSHOWNEW:	//패션쇼메인메뉴쪽은 하단,패션쇼런웨이게임
			switch(xFashionShow.state)
			{
			case FASHIONSHOW_STATE_MAIN:
			case FASHIONSHOW_STATE_FITTING:
			case FASHIONSHOW_STATE_RUNWAY:
			case FASHIONSHOW_STATE_INFO:
			case FASHIONSHOW_STATE_NOTICE_MAIN:
			case FASHIONSHOW_STATE_RUNWAYRESULT:
				isCheck = TRUE;
				break;
			}
			break;
		}
		
		if(isCheck == TRUE)
		{
			xDialog.x = cx;
			xDialog.y =	lcdH-60;
			xDialog.ank = VH;
		}
	}
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_17_RESULT:
		case TUTO_27_RESULT:
		case TUTO_24_UI_MENU:
		case TUTO_22_MODELCASTING:
		case TUTO_6_INTERIOR_MENUTOUCH0:
		case TUTO_6_INTERIOR_MENUTOUCH1:
		case TUTO_6_INTERIOR_EDITMENUTOUCH:
		case TUTO_8_INTERIOR_TABTOUCH:
		case TUTO_8_INTERIOR_OK:
		case TUTO_9_INTERIOR_TABTOUCH:
		case TUTO_10_INTERIOR_TABTOUCH:
		case TUTO_13_STAFF_MENUTOUCH:
		case TUTO_14_STAFF_MENUTOUCH:
		case TUTO_15_MINIGAME_MENUTOUCH:
		case TUTO_26_INTERIOR_MENUTOUCH0:
		case TUTO_26_INTERIOR_MENUTOUCH1:
		case TUTO_7_RESULT:
		case TUTO_17_MAIL_FRIEND:
		case TUTO_18_FRIENDMODEL_MENUTOUCH:
		case TUTO_27_HELP_FLOORMOVE0:
		case TUTO_27_HELP_HELP:
		case TUTO_28_ADDFRIEND_MENUTOUCH:
		case TUTO_13_STAFF_BUY:
		case TUTO_14_STAFF_BUY:
		case TUTO_30_INTERIOR_TABTOUCH:
		case TUTO_30_INTERIOR_OK:
			if(xWorldMap.state == WORLDMAP_STATE_PLAY)
				isCheck = FALSE;
			break;
		}
	}
				
	
	if(isCheck == FALSE)
	{
		/////기본////
		xDialog.x = cx;
		xDialog.y =	180;
		xDialog.ank = VH;
	}
		
	
	if(xDialog.next != DONT || xDialog.pageC < xDialog.pageT)
		drawBgFillRect();
	
	if(++xDialog.whoAnyCnt > 100)
		xDialog.whoAnyCnt = 100;
	
	switch(xDialog.ank)
	{
	case DONT:
		return;
		break;
	case VL:
		subTemp[XPOS] = xDialog.x+imgW(imgTutoInfo3)/2;
		subTemp[YPOS] = xDialog.y;
		break;
	case VR:
		subTemp[XPOS] = xDialog.x-imgW(imgTutoInfo3)/2;
		subTemp[YPOS] = xDialog.y;
		break;
	case VH:
		subTemp[XPOS] = xDialog.x;
		subTemp[YPOS] = xDialog.y;
		break;
	}
	
	//기본틀
	drawPacker(imgTutoInfo3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgTutoInfo3), imgH(imgTutoInfo3), VH);
	//캐릭터
	drawPacker(imgTutoInfo5, subTemp[XPOS]-218, subTemp[YPOS]-14, 0, imgH(imgTutoInfo5)/4*xDialog.player, imgW(imgTutoInfo5), imgH(imgTutoInfo5)/4, VH);
			
	//다음페이지여부
	if(xDialog.next != DONT || xDialog.pageC < xDialog.pageT)
	{
		if((gameCnt/10)%2== 0)
			drawPacker(imgTutoInfo4, subTemp[XPOS]+236, subTemp[YPOS]+1, 0, 0, imgW(imgTutoInfo4), imgH(imgTutoInfo4), VH);
	}
	
	
	
		
	for(int i=0; i<xDialog.lineV; i++)
	{
		cline = (xDialog.pageC * xDialog.lineV) + i;
		if(cline < xDialog.lineT)
		{
			gDrawStringBold(subTemp[XPOS]-167, subTemp[YPOS]-10+(i*(nFontH)), xDialog.strText[cline],VL,255,255,255,146,78,32);
		}
	}
}

void keyDialogTuto(M_Int32 type,M_Int32 param1,M_Int32 param2)
{
	if(touchType == USER_POINT_RELEASE_EVENT)
	{
		 if(xDialog.pageC < xDialog.pageT)
		 {
			 xDialog.whoAnyCnt = 0;
			 xDialog.pageC++;
			 xDialog.showFontLineCnt = 0;
			 xDialog.showFontCnt = 0;
		 }
		 else
		 {
			 xDialog.whoAnyCnt = 0;
			 if(xDialog.next == DONT)
			 {
				 //완료시처리
				 //xDialog.state = DIALOG_FADEOUT;
				 //xDialog.anyCnt = 0;
			 }
			 else
			 {
				 int subState = playState;
				 setDialog(xDialog.strFile, xDialog.next, DIALOG_WIDTH, 2);
				 playState = subState;
			 }
		 }
	}
}

void keyDialog(M_Int32 type,M_Int32 param1,M_Int32 param2)
{
	M_Int32 tempH,i,cline;
	
	if(xDialog.state != DIALOG_PLAY)
		return;
	
	if(touchType == USER_POINT_RELEASE_EVENT)
	{	
		tempH = 0;
		for(i=0; i<xDialog.lineV; i++)
		{
			cline = (xDialog.pageC * xDialog.lineV) + i;
			
			if(cline < xDialog.lineT)
				tempH++;
		}
		
		if(isTouch == TRUE)
		{
			if(touchCheck(&xDialog.xTouchSkip) == TRUE)
			{
				playSnd(SND_MENU_OK);
				xDialog.showFontLineCnt = tempH;
				xDialog.pageC = xDialog.pageT;
				xDialog.next = DONT;
				xTouch.xPos = 0;
				xTouch.yPos = 0;
				keyDialog(type,param1,param2);
			}
			else
			{
				/*
				if(xDialog.showFontLineCnt < tempH)
				{
					xDialog.showFontLineCnt++;
				}
				else */if(xDialog.pageC < xDialog.pageT)
				{
					xDialog.whoAnyCnt = 0;
					xDialog.pageC++;
					xDialog.showFontLineCnt = 0;
					xDialog.showFontCnt = 0;
				}
				else
				{
					xDialog.whoAnyCnt = 0;
					if(xDialog.next == DONT)
					{
						//완료시처리
						xDialog.state = DIALOG_FADEOUT;
						xDialog.anyCnt = 0;
						
						
					}
					else
					{
						
						
						setDialog(xDialog.strFile, xDialog.next, DIALOG_WIDTH, DIALOG_VIEWLINE);
					}
				}
			}
		}
	}
}

//퀘스트 발생검사
void prcQuest()
{
	int mainQuestCnt;
	
	xQuestInfo.totalProductionSlotCode = 0;
	xQuestInfo.totalInteriorSlotCode = 0;
	xQuestInfo.totalStaffSlotCode = 0;
	
	//레벨업에 따른 추가
	if(xLvUp.interiorInfoCode != DONT)
		xQuestInfo.interiorSlotCode[xQuestInfo.totalInteriorSlotCode++] = xLvUp.interiorInfoCode;
	if(xLvUp.productionInfoCode != DONT)
		xQuestInfo.productionSlotCode[xQuestInfo.totalProductionSlotCode++] = xLvUp.productionInfoCode;
	
	
	
	for(int i=0;i<xQuestInfo.totalNum;i++)
	{
		int totalCheck = getQuestCheckTotalNum(i);
		int questCheckType;
		int questCheckCode;
		int questCheckNow;
		int questCheckMax;
		
		int prcTemp[5];
		
		M_Boolean isClear[3];
		isClear[0] = TRUE;
		isClear[1] = TRUE;
		isClear[2] = TRUE;
		
		
		
		for(int k=0;k<totalCheck;k++)
		{
			isClear[k] = FALSE;
			switch(xQuestInfo.xSlot[i].type)
			{
			case QUEST_TYPE_MAIN:
				questCheckType = xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkType[k];
				questCheckCode = xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkCode[k];
				questCheckNow = xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[k];
				questCheckMax = xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkMax[k];
				isClear[k] = xQuestDataMain[xQuestInfo.xSlot[i].questNum].isCheckClean[k];
				break;
			case QUEST_TYPE_NORMAL:
				questCheckType = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkType[k];
				questCheckCode = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkCode[k];
				questCheckNow = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkNow[k];
				questCheckMax = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkMax[k];
				isClear[k] = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].isCheckClean[k];
				break;
			}
            
            
            
			
			if(questCheckNow < questCheckMax)
			{
				switch(questCheckType)
				{
				case 0://	의상 구매
				case 1://	의상 주문
				case 35://	의상 빠른주문
				case 42://	주문된 %s 진열하기
					xQuestInfo.productionSlotCode[xQuestInfo.totalProductionSlotCode++] = questCheckCode;					
					break;
				case 5://	인테리어 구매
				case 6://	인테리어 진열
					xQuestInfo.interiorSlotCode[xQuestInfo.totalInteriorSlotCode++] = questCheckCode;
					break;
				case 19://	직원 꾸미기
				case 34://	응대직원 꾸미기
					xQuestInfo.staffSlotCode[xQuestInfo.totalStaffSlotCode++] = questCheckCode/100000;
					xQuestInfo.staffSlotCode[xQuestInfo.totalStaffSlotCode++] = questCheckCode%100000;
					break;
				}
				switch(questCheckType)
				{
				case 0:			//의상구매
					if(xInventoryFashion.isOpen[questCheckCode/1000][questCheckCode%1000] == TRUE)
						setQuest(0,1,questCheckCode);		//의상오픈
					break;
				case 11:		//명성
					if(questCheckNow != xSaveTemp.fame.oriData)
						setQuest(11, xSaveTemp.fame.oriData, DONT);
					break;
				case 12:		//돈
					if(questCheckNow != xSaveTemp.money.oriData)
						setQuest(12, xSaveTemp.money.oriData, DONT);
					break;
				case 17:		//샵타이틀
						
					break;
				case 28:		//증축
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						if(xMap.totalFloor == 2)
							setQuest(28, 1, DONT);
					}
					break;
				case 32:		//확장
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						if(xWorldMap.isExtensionEvent == FALSE)
						{
							if(xMap.extension >= questCheckCode)
								setQuest(32, 99, questCheckCode);
						}
					}
												
						
					break;
				case 36:		//얼마 이상 의상 구매
					for(int i=0;i<FASHIONDATATYPEMAX;i++)
					{
						for(int j=0;j<FASHIONDATAMAX;j++)
						{
							if(xInventoryFashion.isOpen[i][j] == TRUE)
							{
								if(questCheckNow < xFashionData[i][j].price.oriData)
									setQuest(36, xFashionData[i][j].price.oriData, DONT);
							}
						}
					}
					break;
				case 39://	명성도 %d 이상 의상 구매
					for(int i=0;i<FASHIONDATATYPEMAX;i++)
					{
						for(int j=0;j<FASHIONDATAMAX;j++)
						{
							if(xInventoryFashion.isOpen[i][j] == TRUE)
							{
								if(questCheckNow < xFashionData[i][j].fame.oriData)
									setQuest(39, xFashionData[i][j].fame.oriData, DONT);
							}
						}
					}
					break;
				case 40://	의상 라이센스 %d개 이상 보유하기
					prcTemp[0] = 0;
					for(int i=0;i<FASHIONDATATYPEMAX;i++)
					{
						for(int j=0;j<FASHIONDATAMAX;j++)
						{
							if(xInventoryFashion.isOpen[i][j] == TRUE)
							{
								++prcTemp[0];
							}
						}
					}
					if(questCheckNow < prcTemp[0])
						setQuest(40, prcTemp[0], DONT);
					break;
				case 48://	마네킹 레이어드 %d회 달성하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
						for(int floor=0;floor<xMap.totalFloor;floor++)
						{
							for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
							{
								if(xShowWindowInfo[floor][ss].isUse == TRUE)
								{
									int layeredNum = 0;
									for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
									{
										if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
											layeredNum++;
									}
									if(prcTemp[0] < layeredNum)
										prcTemp[0] = layeredNum;
								}
							}
						}
						if(questCheckNow < prcTemp[0])
							setQuest(48, prcTemp[0], DONT);
						
					}
						
						
					
						
						
					break;
				case 92://	마네킹 넣어입기로 레이어드 x회 코디하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
						for(int floor=0;floor<xMap.totalFloor;floor++)
						{
							for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
							{
								if(xShowWindowInfo[floor][ss].isUse == TRUE)
								{
									if(xShowWindowInfo[floor][ss].xF.isInFitting == TRUE)
									{
										int layeredNum = 0;
										for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
										{
											if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
												layeredNum++;
										}
										if(prcTemp[0] < layeredNum)
											prcTemp[0] = layeredNum;
									}
								}
							}
						}
						if(questCheckNow < prcTemp[0])
							setQuest(92, prcTemp[0], DONT);
						
					}
					
					break;
				case 52://	남자 모델 %d명 피팅하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
						for(int i=0;i<xModel.totalInventoryModel;i++)
						{
							if(xModelData[xInventoryModel[i].code].sex == 1)
							{
								int layeredNum = 0;
								for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
								{
									if(xInventoryModel[i].xF.code[ff] != DONT)
										layeredNum++;
								}
								if(layeredNum > 0)
									prcTemp[0]++;
							}
						}
						if(questCheckNow < prcTemp[0])
							setQuest(52, prcTemp[0], DONT);
					}
					break;
				case 55://	모델 %d명 보유하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						if(questCheckNow != xModel.totalInventoryModel)
							setQuest(55, xModel.totalInventoryModel, DONT);
					}
					break;
				case 56://	선호도 %d%% 달성하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						if(questCheckNow < xInShopPer.inShopPerTotal.oriData)
							setQuest(56, xInShopPer.inShopPerTotal.oriData, DONT);
					}
					break;
				case 57://	캔디 모으기
					if(questCheckNow != xSaveTemp.tired.oriData)
						setQuest(57, xSaveTemp.tired.oriData, DONT);
					break;
				case 69://	남자마네킹 레이어드 %d회 달성하기(%d/%d)
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
						for(int floor=0;floor<xMap.totalFloor;floor++)
						{
							for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
							{
								if(xShowWindowInfo[floor][ss].isUse == TRUE)
								{
									int layeredNum = 0;
									for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
									{
										if(xShowWindowInfo[floor][ss].gender == 1)
										{
											if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
												layeredNum++;
										}
									}
									if(prcTemp[0] < layeredNum)
										prcTemp[0] = layeredNum;
								}
							}
						}
						if(questCheckNow < prcTemp[0])
							setQuest(69, prcTemp[0], DONT);
					}
					break;
				case 82://	의상 동시에 x벌 진열하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
						for(int floor=0;floor<xMap.totalFloor;floor++)
							prcTemp[0]+=xSell.totalIngHangerSlot[floor];
																		
						if(questCheckNow != prcTemp[0])
							setQuest(82, prcTemp[0], DONT);
					}
					break;
				case 83://	잡화 동시에 x개 진열하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
						for(int floor=0;floor<xMap.totalFloor;floor++)
							prcTemp[0]+=xSell.totalIngAccessorySlot[floor];
						
						if(questCheckNow != prcTemp[0])
							setQuest(83, prcTemp[0], DONT);
					}
					break;
				case 89://	활동 중인 모델 의상 x벌 마네킹에게 입히기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
							
						for(int floor=0;floor<xMap.totalFloor;floor++)
						{
							for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
							{
								if(xShowWindowInfo[floor][ss].isUse == TRUE && xShowWindowInfo[floor][ss].isFitting == TRUE)
								{
									for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
									{
										if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
										{
											for(int k=0;k<MODELMAINSLOTMAX;k++)
											{
												switch(xModelMainSlot[k].state)
												{
												case MODELMAINSLOT_STATE_WAIT:
												case MODELMAINSLOT_STATE_PLAY:
													xModelMainSlot[k].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[k].modelKey);
													for(int ffff=0;ffff<SPRIT_IMGLAYERMAX;ffff++)
													{
														if(xInventoryModel[xModelMainSlot[k].inventoryNum].xF.code[ffff] != DONT)
														{
															if(xShowWindowInfo[floor][ss].xF.code[ff] == xInventoryModel[xModelMainSlot[k].inventoryNum].xF.code[ffff])
																prcTemp[0]++;
														}
													}
													break;
												}
											}
										}
									}
								}
							}
						}
						if(questCheckNow < prcTemp[0])
							setQuest(89, prcTemp[0], DONT);
					}
					break;
				case 94://	샵에 모델 x명 배치하기
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						prcTemp[0] = 0;
						for(int k=0;k<MODELMAINSLOTMAX;k++)
						{
							switch(xModelMainSlot[k].state)
							{
								case MODELMAINSLOT_STATE_WAIT:
								case MODELMAINSLOT_STATE_PLAY:
									prcTemp[0]++;
									break;
							}
						}
						if(questCheckNow < prcTemp[0])
							setQuest(94, prcTemp[0], DONT);
					}
					break;
				case 71://	보상없는 시나리오진행
						
					if(xWorldMap.isQuestResult == FALSE && playState != PLAY_DIALOG
						&& xWorldMap.state != WORLDMAP_STATE_NOTICE
					   && xWorldMap.state != WORLDMAP_STATE_NOTICEPOPUP
					   && xWorldMap.state != WORLDMAP_STATE_SEVERSELL)
						
					{
						xWorldMap.isKeyReturn = TRUE;
						if(++xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[0] > xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkMax[0]-10)
						{
							//완료
							xWorldMap.isKeyReturn = FALSE;
							xWorldMap.isQuestResult = TRUE;
							xQuestInfo.selectSlot = i;
							
                            
                            switch(xQuestMain.nowNum)
                            {
                                case 4:
                                case 14:
                                case 23:
                                case 29:
                                case 36:
                                case 41:
                                case 45:
                                case 51:
                                case 55:
                                case 58:
                                case 61:
                                case 65:
                                case 68:
                                case 70:
                                    sprintf(xRocks.strTemp, "%s(LV.%d)",xQuestDataMain[xQuestMain.nowNum].strTitle,xQuestDataMain[xQuestMain.nowNum].lv);
                                    setFiveRocksCustom("퍼널분석",xRocks.strTemp,"NULL","NULL",1);
                                    break;
                            }
                            
                            
							xQuestMain.nowNum++;
							
							xQuestMain.state = QUEST_STATE_WAIT;
							///////////////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.action[xEventQueueNet.totalNum]=1;		//0튜토리얼,1메인,2일반
							xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
							///////////////////////////////////////////////////////////////////////////////////////
							for(int i=xQuestInfo.selectSlot;i<xQuestInfo.totalNum;i++)
							{
								xQuestInfo.xSlot[i].questNum = xQuestInfo.xSlot[i+1].questNum;
								xQuestInfo.xSlot[i].type = xQuestInfo.xSlot[i+1].type;
							}
							xQuestInfo.totalNum--;
									
							if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
								xWorldMap.state = WORLDMAP_STATE_PLAY;
							xWorldMap.isQuestResult = FALSE;
						}
					}
					break;
				case 72://	보상없는 튜토리얼진행
					if(xWorldMap.isQuestResult == FALSE && playState != PLAY_DIALOG
					   && xWorldMap.state != WORLDMAP_STATE_NOTICE
					   && xWorldMap.state != WORLDMAP_STATE_NOTICEPOPUP
					   && xWorldMap.state != WORLDMAP_STATE_SEVERSELL)
					{
						xWorldMap.isKeyReturn = TRUE;
						if(++xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[0] > xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkMax[0]-10)
						{
							//완료
							xWorldMap.isKeyReturn = FALSE;
							xWorldMap.isQuestResult = TRUE;
							xQuestInfo.selectSlot = i;
                            
                            switch(xQuestMain.nowNum)
                            {
                            case 4:
                            case 14:
                            case 23:
                            case 29:
                            case 36:
                            case 41:
                            case 45:
                            case 51:
                            case 55:
                            case 58:
                            case 61:
                            case 65:
                            case 68:
                            case 70:
                                sprintf(xRocks.strTemp, "%s(LV.%d)",xQuestDataMain[xQuestMain.nowNum].strTitle,xQuestDataMain[xQuestMain.nowNum].lv);
                                setFiveRocksCustom("퍼널분석",xRocks.strTemp,"NULL","NULL",1);
                                break;
                            }
                            
                            
							xQuestMain.nowNum++;
							
							xQuestMain.state = QUEST_STATE_WAIT;
							///////////////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.action[xEventQueueNet.totalNum]=1;		//0튜토리얼,1메인,2일반
							xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
							///////////////////////////////////////////////////////////////////////////////////////
							for(int i=xQuestInfo.selectSlot;i<xQuestInfo.totalNum;i++)
							{
								xQuestInfo.xSlot[i].questNum = xQuestInfo.xSlot[i+1].questNum;
								xQuestInfo.xSlot[i].type = xQuestInfo.xSlot[i+1].type;
							}
							xQuestInfo.totalNum--;
							
							if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
								xWorldMap.state = WORLDMAP_STATE_PLAY;
							xWorldMap.isQuestResult = FALSE;
						}
					}
					break;
				case 20:		//튜토리얼
					if(playState == PLAY_PLAY && xWorldMap.state == WORLDMAP_STATE_PLAY)
					{
						if(xWorldMap.isTuto == FALSE && xWorldMap.isQuestResult == FALSE)
						{
							//튜토리얼 발생
							xWorldMap.isTuto = TRUE;
							xQuestTuto.state = QUEST_TUTO_WAIT;
						}
							
						if(xWorldMap.isTuto == TRUE)
						{
							if(xQuestTuto.nowNum/1000 != xQuestDataMain[xQuestInfo.xSlot[0].questNum].dialogNum)
								xQuestTuto.nowNum = xQuestDataMain[xQuestInfo.xSlot[0].questNum].dialogNum*1000;
							
							switch(xQuestTuto.nowNum)
							{
							case TUTO_20_ORDER_MENUTOUCH:
							case TUTO_20_ORDER_INFOSHOW:
							case TUTO_20_ORDER_ORDERSELECT:
							case TUTO_20_ORDER_CARSELECT:
							case TUTO_20_ORDER_CARINFOSELECT:
							case TUTO_20_ORDER_CARINFOEXIT:
								if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
								{
									if(xOrder.isNetLoad == TRUE && checkOrderQuest(0) == FALSE)
									{
										addOrderQuest(0);
									}
								}
								break;
							}
						}
					}
					break;
				case 21:		//주문장 넣어주기
						
					if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
					{
						if(xOrder.isNetLoad == TRUE && checkOrderQuest(questCheckCode) == FALSE)
						{
							addOrderQuest(questCheckCode);
						}
					}
					break;
				case 35:		//의상 즉시 주문
					for(int type=0;type<2;type++)
					{
						for(int k=0;k<6;k++)
						{
							if(xProductionMenu.slotCode[type][k] != DONT)
								setMapData(xProductionMenu.slotCode[type][k]);
							if(xProductionMenu.state[type][k] == PRODUCTIONMENUSLOT_STATE_PLAY
							   && xProductionMenu.slotCode[type][k] != DONT
							   && xProductionMenu.slotFlowTime[type][k]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
							{
								//의상 즉시 주문
								if(questCheckCode == xProductionMenu.slotCode[type][k])
									setQuest(35, 1, xProductionMenu.slotCode[type][k]);
							}
						}
					}
					break;
				}
			}
		}		
		
		
		if(playState == PLAY_PLAY && xWorldMap.isQuestResult == FALSE && (xWorldMap.state == WORLDMAP_STATE_PLAY || xWorldMap.state == WORLDMAP_STATE_PRODUCTIONMENU || xWorldMap.state == WORLDMAP_STATE_SELL))
		{
			if(isClear[0] == TRUE && isClear[1] == TRUE && isClear[2] == TRUE)
			{
				playSnd(SND_QUEST_RESULT);
				xWorldMap.isQuestResult = TRUE;
				xQuestInfo.selectSlot = i;
			}
		}
	}
	
		
	if(xWorldMap.isLvUp == FALSE && xWorldMap.isTuto == FALSE && xWorldMap.isQuestResult == FALSE)
	{
		//메인퀘스트 발생
		if(playState == PLAY_PLAY && xWorldMap.state == WORLDMAP_STATE_PLAY)
		{
			switch(xQuestMain.state)
			{
			case QUEST_STATE_WAIT:		//퀘스트 발생 조건 체크
				if(xSaveTemp.lv.oriData >= xQuestDataMain[xQuestMain.nowNum].lv && xQuestMain.nowNum < xQuestMain.totalNum)
				{
					M_Boolean isCheck = FALSE;
					if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 71 && xWorldMap.state != WORLDMAP_STATE_PLAY)//	보상없는 시나리오진행
						isCheck = TRUE;
					else if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 71 && xWorldMap.isFriendMap == TRUE)
						isCheck = TRUE;
					else if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 71 && xWorldMap.isCashShop == TRUE)
						isCheck = TRUE;
					else if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 71 && xFriendMap.isPlay == TRUE)
						isCheck = TRUE;
					
					else if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 72 && xWorldMap.state != WORLDMAP_STATE_PLAY)//	보상없는 시나리오진행
						isCheck = TRUE;
					else if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 72 && xWorldMap.isFriendMap == TRUE)
						isCheck = TRUE;
					else if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 72 && xWorldMap.isCashShop == TRUE)
						isCheck = TRUE;
					else if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 72 && xFriendMap.isPlay == TRUE)
						isCheck = TRUE;
					
					
					if(isCheck == FALSE)
					{
						for(int i=xQuestInfo.totalNum;i>0;i--)
						{
							xQuestInfo.xSlot[i].type = xQuestInfo.xSlot[i-1].type;
							xQuestInfo.xSlot[i].questNum = xQuestInfo.xSlot[i-1].questNum;
						}
						xQuestInfo.xSlot[0].type = QUEST_TYPE_MAIN;
						xQuestInfo.xSlot[0].questNum = xQuestMain.nowNum;
						xQuestInfo.selectSlot = 0;
						xQuestInfo.totalNum++;
						xQuestMain.state = QUEST_STATE_NEW;
						
						///////////////////////////////////////////////////////////////////////////////////////
						xEventQueueNet.action[xEventQueueNet.totalNum]=1;		//0튜토리얼,1메인,2일반
						xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, FALSE);
						///////////////////////////////////////////////////////////////////////////////////////
						if(xQuestDataMain[xQuestMain.nowNum].checkType[0] == 20)
						{
							xQuestTuto.nowNum = xQuestDataMain[xQuestMain.nowNum].dialogNum*1000;
							

							xWorldMap.isTuto = TRUE;
							xQuestTuto.state = QUEST_TUTO_WAIT;
							///저장하기///
							///////////////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.action[xEventQueueNet.totalNum]=0;		//0튜토리얼,1메인,2일반
							xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
							///////////////////////////////////////////////////////////////////////////////////////
						}
						else
						{
							if(xQuestDataMain[xQuestMain.nowNum].dialogNum == DONT)
							{
							}
							else
							{
								sprintf(strTempS, "quest%d.txt",xQuestDataMain[xQuestMain.nowNum].dialogNum);
								setDialog(strTempS, 0, DIALOG_WIDTH, DIALOG_VIEWLINE);
							}
						}
					}
				}
				break;
			}
			
			mainQuestCnt = 0;
			if(xQuestInfo.totalNum > 0 && xQuestInfo.xSlot[0].type == QUEST_TYPE_MAIN)
				mainQuestCnt = 1;
			
			
			//일반퀘스트 발생
			for(int i=0;i<xQuestInfo.totalNumNormal;i++)
			{
				//if(xQuestInfo.totalNum-mainQuestCnt >= 2)
				//	break;
				
				if(xQuestDataNormal[i].isClear == FALSE)
				{
					
					switch(xQuestDataNormal[i].state)
					{
					case QUEST_STATE_WAIT:		//퀘스트 발생 조건 체크
						if(xSaveTemp.lv.oriData >= xQuestDataNormal[i].lv && (xQuestDataNormal[i].endQuestNum == -1 || xQuestDataNormal[xQuestDataNormal[i].endQuestNum].isClear == TRUE))
						{
							xQuestDataNormal[i].state = QUEST_STATE_NEW;
							///////////////////////////////////////////////////////////////////////////////////////
							xEventQueueNet.action[xEventQueueNet.totalNum]=2;		//0튜토리얼,1메인,2일반
							xEventQueueNet.slotNum[xEventQueueNet.totalNum]=i;		//일반퀘스트슬롯번호
							addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, FALSE);
							///////////////////////////////////////////////////////////////////////////////////////
							
							xQuestInfo.xSlot[xQuestInfo.totalNum].type = QUEST_TYPE_NORMAL;
							xQuestInfo.xSlot[xQuestInfo.totalNum].questNum = i;
							xQuestInfo.totalNum++;
						}
						break;
					}
				}
			}
		}
	}
}

void drawWorldmapQuestIcon(int x,int y,int iconNum)
{
	if(imgQuestIcon[iconNum].texture == NULL)
	{
		sprintf(strTempS, "questicon%d.png",iconNum);
		loadImgDocuments(strTempS, &imgQuestIcon[iconNum]);
	}
	
	drawImage(&imgQuestIcon[iconNum], x, y, 0, 0, imgQuestIcon[iconNum].w, imgQuestIcon[iconNum].h, VH);
}

void drawQuestIcon()
{
	int px = 50;
	int py = 296;
	
	int iMax;
	int pos;
	M_Boolean isNew;
	M_Boolean isComplete;
		
	subTemp[XPOS] = px;
	subTemp[YPOS] = py;	
	
	xQuestInfo.xDragScrollSlot.totalNum = xQuestInfo.totalNum;
	xQuestInfo.xDragScrollSlot.posGab = 84;
	xQuestInfo.xDragScrollSlot.endPos = -(((xQuestInfo.xDragScrollSlot.totalNum-3)*xQuestInfo.xDragScrollSlot.posGab));

	iMax = xQuestInfo.xDragScrollSlot.totalNum;
	dragScrollPrc(&xQuestInfo.xDragScrollSlot,1,FALSE);
	
	xQuestInfo.xTouchClip.xPos = 0;
	xQuestInfo.xTouchClip.yPos = py-47;
	xQuestInfo.xTouchClip.wPos = 100;
	xQuestInfo.xTouchClip.hPos = 260;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xQuestInfo.xTouchClip.xPos, xQuestInfo.xTouchClip.yPos, xQuestInfo.xTouchClip.wPos, xQuestInfo.xTouchClip.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	if(xQuestInfo.xDragScrollSlot.pos < 0)
		drawPacker(imgQuestArrow, px, py-57, 0, 0, imgW(imgQuestArrow)/2, imgH(imgQuestArrow), VH);
	if(xQuestInfo.xDragScrollSlot.pos > xQuestInfo.xDragScrollSlot.endPos)
		drawPacker(imgQuestArrow, px, py+223, imgW(imgQuestArrow)/2, 0, imgW(imgQuestArrow)/2, imgH(imgQuestArrow), VH);
	//
	
	gSetClip(true,0, xQuestInfo.xTouchClip.yPos, lcdW, xQuestInfo.xTouchClip.hPos);
	for(int i=0;i<iMax;i++)
	{
		pos = xQuestInfo.xDragScrollSlot.pos+(xQuestInfo.xDragScrollSlot.posGab*i);
		if(subTemp[YPOS]+pos < -xQuestInfo.xDragScrollSlot.posGab || subTemp[YPOS]+pos > lcdW+xQuestInfo.xDragScrollSlot.posGab)
			continue;
		
		
		if(xQuestInfo.xSlot[i].barAnyCnt != 0)
		{
			switch(--xQuestInfo.xSlot[i].barAnyCnt)
			{
			case 29:
			case 0:
				setAlpha(50);
				break;
			case 28:
			case 1:
				setAlpha(100);
				break;
			case 27:
			case 2:
				setAlpha(150);
				break;
			case 26:
			case 3:
				setAlpha(200);
				break;
			default:
				break;
			}
			drawPacker(imgQuestBar, subTemp[XPOS]-10, subTemp[YPOS]+2+pos, 0, 0, imgW(imgQuestBar), imgH(imgQuestBar), VL);
			gSetColor(44, 27, 26);
						
			getSprintfQuestCheck(i,xQuestInfo.xSlot[i].barCheckNum);
			gDrawString(subTemp[XPOS]-10+imgW(imgQuestBar)/2, subTemp[YPOS]-2+pos, strTempS, VH);
			setAlpha(ALPHA_MAX);			
		}
		
		int iconNum;
		isNew = FALSE;
		isComplete = FALSE;
		
		M_Boolean isClear[3];
		isClear[0] = TRUE;
		isClear[1] = TRUE;
		isClear[2] = TRUE;
		
		int totalCheck = getQuestCheckTotalNum(i);

		for(int k=0;k<totalCheck;k++)
		{
			switch(xQuestInfo.xSlot[i].type)
			{
			case QUEST_TYPE_MAIN:
				isClear[k] = xQuestDataMain[xQuestInfo.xSlot[i].questNum].isCheckClean[k];
					
					
				break;
			case QUEST_TYPE_NORMAL:
				isClear[k] = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].isCheckClean[k];
								break;
			}
		}

		
		
		switch(xQuestInfo.xSlot[i].type)
		{
		case QUEST_TYPE_MAIN:
			iconNum = xQuestDataMain[xQuestInfo.xSlot[i].questNum].iconNum;
			if(xQuestMain.state == QUEST_STATE_NEW)
				isNew = TRUE;
			break;
		case QUEST_TYPE_NORMAL:
			iconNum = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].iconNum;
			if(xQuestDataNormal[xQuestInfo.xSlot[i].questNum].state == QUEST_STATE_NEW)
				isNew = TRUE;
			break;
		}
		
		if(isClear[0] == TRUE && isClear[1] == TRUE && isClear[2] == TRUE)
			isComplete = TRUE;
				
		switch(xQuestInfo.xSlot[i].type)
		{
		case QUEST_TYPE_MAIN:
			drawNpcIcon(subTemp[XPOS], subTemp[YPOS]+pos, xQuestDataMain[xQuestInfo.xSlot[i].questNum].npcCode);
			break;
		default:
			drawWorldmapQuestIcon(subTemp[XPOS], subTemp[YPOS]+pos,iconNum);
			break;
		}
		
		
		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_24_UI_QUEST0:
			case TUTO_24_UI_QUEST1:
				if(i < 4)
				{
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+pos;
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
				}
				break;
			}
		}
		
		switch(xQuestInfo.xSlot[i].type)
		{
			case QUEST_TYPE_MAIN:
				drawPacker(imgQuestMainIcon, subTemp[XPOS]+40, subTemp[YPOS]-20+pos, 0, 0, imgW(imgQuestMainIcon), imgH(imgQuestMainIcon), VH);
				break;
		}
		
		/*
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_WHITEALPHA;
		switch(gameCnt%15)
		{
		case 0:case 14:	xGame.blendNum = ALPHA_MAX;break;
		case 1:case 13:	xGame.blendNum = 200;break;
		case 2:case 12:	xGame.blendNum = 150;break;
		case 3:case 11:	xGame.blendNum = 100;break;
		case 4:case 10:	xGame.blendNum = 50;break;
		default:
			xGame.isBlend = FALSE;
			break;
		}
		 */
		
		
		if(isComplete == TRUE)
		{
			drawPacker(imgQuestInfo, subTemp[XPOS]+15, subTemp[YPOS]+pos+32, 0, imgH(imgQuestInfo)/2, imgW(imgQuestInfo), imgH(imgQuestInfo)/2, VH);
		}
		else if(isNew == TRUE)
		{
			drawPacker(imgQuestInfo, subTemp[XPOS]+15, subTemp[YPOS]+pos+32, 0, 0, imgW(imgQuestInfo), imgH(imgQuestInfo)/2, VH);
		}
		
		//xGame.isBlend = FALSE;
		
		setUiHide();
	}
	gSetClip(false,0, 0, lcdW, lcdH);
		
	xQuestInfo.xDragScrollSlot.selectNum = (-xQuestInfo.xDragScrollSlot.pos/xQuestInfo.xDragScrollSlot.posGab);
	for(int i=0;i<5;i++)
	{
		xQuestInfo.xTouchSlot[i].wPos = 60;
		xQuestInfo.xTouchSlot[i].hPos = 60;
		xQuestInfo.xTouchSlot[i].xPos = subTemp[XPOS] - xQuestInfo.xTouchSlot[i].wPos/2;
		xQuestInfo.xTouchSlot[i].yPos = subTemp[YPOS]+(xQuestInfo.xDragScrollSlot.posGab*i)+(xQuestInfo.xDragScrollSlot.pos%xQuestInfo.xDragScrollSlot.posGab) - xQuestInfo.xTouchSlot[i].hPos/2;
		
		/*
		 gSetColor(255, 255, 255);
		 setAlpha(100);
		 fillRect(xQuestInfo.xTouchSlot[i].xPos, xQuestInfo.xTouchSlot[i].yPos, xQuestInfo.xTouchSlot[i].wPos, xQuestInfo.xTouchSlot[i].hPos);
		 setAlpha(ALPHA_MAX);
		 */

	}	
}

void drawQuestInfo()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	
	
	subTemp[XPOS] = px-246;
	subTemp[YPOS] = py-184-14;
	
	gSetColor(255, 255, 255);
	int npcNum;

	switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
	{
	case QUEST_TYPE_MAIN:
		npcNum = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].npcCode;
		break;
	case QUEST_TYPE_NORMAL:
		npcNum = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].npcCode;
		break;
	}
	
	drawNpcPhoto(subTemp[XPOS], subTemp[YPOS]-5,npcNum,100);
	drawPacker(imgQuestBg, px, py, 0, 0, imgW(imgQuestBg), imgH(imgQuestBg), VH);
	setFontSize(14);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+58, xNpc[npcNum].strName, VH);
	setFontSize(11);
	
	subTemp[XPOS] = px-136;
	subTemp[YPOS] = py-226-20;
	
	int iconNum = 0;
	switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
	{
	case QUEST_TYPE_MAIN:
		iconNum = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].iconNum;
		sprintf(strTempS, "%s",xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strTitle);
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 50;
		drawNpcIcon(subTemp[XPOS]-26, subTemp[YPOS], xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].npcCode);
		xGame.isReSizeDraw = FALSE;
		break;
	case QUEST_TYPE_NORMAL:
		iconNum = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].iconNum;
		sprintf(strTempS, "%s",xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strTitle);
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 50;
		drawWorldmapQuestIcon(subTemp[XPOS]-26, subTemp[YPOS],iconNum);
		xGame.isReSizeDraw = FALSE;
		break;
	}
	setFontSize(20);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	
	
	gSetColor(82, 49, 38);
	setLabelWidth(440);
	
	switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
	{
	case QUEST_TYPE_MAIN:
		sprintf(strTempB, "%s",xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strInfo);
		break;
	case QUEST_TYPE_NORMAL:
		sprintf(strTempB, "%s",xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strInfo);
		break;
	}
	setFontSize(14);
	gDrawString(subTemp[XPOS]-38, subTemp[YPOS]+76, strTempB, VL);
	setFontSize(11);
	setLabelWidth(0);

	subTemp[XPOS] = px-264;
	subTemp[YPOS] = py-43+92-14;
	//수행목표
	int totalCheck = getQuestCheckTotalNum(xQuestInfo.selectSlot);
	
	gSetColor(82, 49, 38);
	setFontSize(14);
	for(int i=0;i<totalCheck;i++)
	{
		getSprintfQuestCheck(xQuestInfo.selectSlot,i);
		gDrawString(subTemp[XPOS]-20, subTemp[YPOS]-6-((totalCheck-1)*30)+(i*60), strTempS, VL);
	}
	setFontSize(11);
	
	subTemp[XPOS] = px-264;
	subTemp[YPOS] = py+167-7;
	//완료보상
		
	int totalGift=0;
	int point = 0;
	int exp = 0;
	int look = 0;
	int fame = 0;
	
	char strGiftName[128];
	
	M_Boolean isGift = FALSE;	
	
	for(int i=0;i<3;i++)
	{
		switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
		{
		case QUEST_TYPE_MAIN:
			switch(xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i])
			{
			case DONT:
				break;
			case 0:	//골드
				point+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 1:	//exp
				exp+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 2:	//look
				look+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 3:	//의상
				isGift = TRUE;
				setMapData(xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]);
				sprintf(strGiftName,"%s", xFashionData[xMap.type][xMap.listNum].strName);
				break;
			case 4:	//인테리어
				isGift = TRUE;
				setMapData(xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]);
				sprintf(strGiftName,"%s", xObj.xObjData[xMap.type][xMap.listNum].strName);
				break;
			case 5:	//자동차
				isGift = TRUE;
				sprintf(strGiftName,"%s", xCarData[xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]].strName);
				break;
			case 6:	//모델
				isGift = TRUE;
				sprintf(strGiftName,"%s", "모델 미구현");
				break;
			case 7://명성
				fame+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			}
			break;
		case QUEST_TYPE_NORMAL:
			switch(xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i])
			{
			case DONT:
				break;
			case 0:	//골드
				point+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 1:	//exp
				exp+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 2:	//look
				look+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 3:	//의상
				isGift = TRUE;
				setMapData(xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]);
				sprintf(strGiftName,"%s", xFashionData[xMap.type][xMap.listNum].strName);
				break;
			case 4:	//인테리어
				isGift = TRUE;
				setMapData(xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]);
				sprintf(strGiftName,"%s", xObj.xObjData[xMap.type][xMap.listNum].strName);
				break;
			case 5:	//자동차
				isGift = TRUE;
				sprintf(strGiftName,"%s", xCarData[xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[i]].strName);
				break;
			case 6:	//모델
				isGift = TRUE;
				sprintf(strGiftName,"%s", "모델 미구현");
				break;
			case 7://명성
				fame+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			}
			break;
		}
	}
	
		
	if(point > 0)
		totalGift++;
	if(exp > 0)
		totalGift++;
	if(look > 0)
		totalGift++;
	if(fame > 0)
		totalGift++;
	
	subTemp[WPOS] = 0;
	if(point > 0)
	{
		drawIcon(subTemp[XPOS]-30+subTemp[WPOS]-(totalGift*75)+292, subTemp[YPOS]+66, ICON_TYPE_GOLD);
		gSetColor(82, 49, 38);
		setCommaNum(strTempS, point);
		setFontSize(20);
		gDrawString(subTemp[XPOS]-10+subTemp[WPOS]-(totalGift*75)+293, subTemp[YPOS]+66, strTempS, VL);
		setFontSize(11);
		subTemp[WPOS]+=130;
	}
	if(exp > 0)
	{
		drawIcon(subTemp[XPOS]-30+subTemp[WPOS]-(totalGift*75)+292, subTemp[YPOS]+66, ICON_TYPE_EXP);
		gSetColor(82, 49, 38);
		setCommaNum(strTempS, exp);
		setFontSize(20);
		gDrawString(subTemp[XPOS]-10+subTemp[WPOS]-(totalGift*75)+293, subTemp[YPOS]+66, strTempS, VL);
		setFontSize(11);
		subTemp[WPOS]+=130;
	}
	if(look > 0)
	{
		drawIcon(subTemp[XPOS]-30+subTemp[WPOS]-(totalGift*75)+292, subTemp[YPOS]+66, ICON_TYPE_LOOK);
		gSetColor(82, 49, 38);
		setCommaNum(strTempS, look);
		setFontSize(20);
		gDrawString(subTemp[XPOS]-10+subTemp[WPOS]-(totalGift*75)+293, subTemp[YPOS]+66, strTempS, VL);
		setFontSize(11);
		subTemp[WPOS]+=130;
	}
	if(fame > 0)
	{
		drawIcon(subTemp[XPOS]-30+subTemp[WPOS]-(totalGift*75)+292, subTemp[YPOS]+66, ICON_TYPE_FAME);
		gSetColor(82, 49, 38);
		setCommaNum(strTempS, fame);
		setFontSize(20);
		gDrawString(subTemp[XPOS]-10+subTemp[WPOS]-(totalGift*75)+293, subTemp[YPOS]+66, strTempS, VL);
		setFontSize(11);
	}
	if(isGift == TRUE)
		drawPacker(imgQuestGiftIcon, subTemp[XPOS]+112, subTemp[YPOS]-8, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
	
	xQuestInfo.xTouchGiftIcon.wPos = imgW(imgQuestGiftIcon);
	xQuestInfo.xTouchGiftIcon.hPos = imgH(imgQuestGiftIcon);
	xQuestInfo.xTouchGiftIcon.xPos = subTemp[XPOS]+90 - xQuestInfo.xTouchGiftIcon.wPos/2;
	xQuestInfo.xTouchGiftIcon.yPos = subTemp[YPOS]-6 - xQuestInfo.xTouchGiftIcon.hPos/2;
		
	subTemp[XPOS] = px+230;
	subTemp[YPOS] = py-43+90-14;
	
	M_Boolean isClear[3];
	isClear[0] = TRUE;
	isClear[1] = TRUE;
	isClear[2] = TRUE;
	int questType;
		
	for(int i=0;i<totalCheck;i++)
	{
		switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
		{
		case QUEST_TYPE_MAIN:
			isClear[i] = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[i];
			questType = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[i];
			break;
		case QUEST_TYPE_NORMAL:
			isClear[i] = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].isCheckClean[i];
			questType = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].checkType[i];
			break;
		}
		
		if(isClear[i] == TRUE)
			drawPacker(imgQuestV, subTemp[XPOS], subTemp[YPOS]-4-((totalCheck-1)*30)+(60*i), 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
		else
		{
			
			if(questShortCut(questType,FALSE,DONT) == TRUE)
			{
				drawPacker(imgQuestBtn0, subTemp[XPOS], subTemp[YPOS]-((totalCheck-1)*30)+(60*i), 0, imgH(imgQuestBtn0)/2, imgW(imgQuestBtn0), imgH(imgQuestBtn0)/2, VH);
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-3-((totalCheck-1)*30)+(60*i), "바로가기", VH, 255, 255, 255, 21, 97, 96);
				setFontSize(11);
			}
		}
		
		xQuestInfo.xTouchMove[i].wPos = imgW(imgQuestBtn0);
		xQuestInfo.xTouchMove[i].hPos = imgH(imgQuestBtn0)/2;
		xQuestInfo.xTouchMove[i].xPos = subTemp[XPOS]-xQuestInfo.xTouchMove[i].wPos/2;
		xQuestInfo.xTouchMove[i].yPos = subTemp[YPOS]-((totalCheck-1)*30)+(60*i)-xQuestInfo.xTouchMove[i].hPos/2;
	}
	
	subTemp[XPOS] = px+240;
	subTemp[YPOS] = py+223;
	
	int fastCash;
	
	switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
	{
	case QUEST_TYPE_MAIN:
		fastCash = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].fastCash;
		break;
	case QUEST_TYPE_NORMAL:
		fastCash = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].fastCash;
		break;
	}
	sprintf(strTempS, "%d",fastCash);
	
	if(isClear[0] == TRUE && isClear[1] == TRUE && isClear[2] == TRUE)
	{
		drawPacker(imgQuestBtn1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestBtn1)/2, imgW(imgQuestBtn1), imgH(imgQuestBtn1)/2, VH);
		setFontSize(14);
		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-3, "보상받기", VH, 255, 255, 255, 186, 70, 10);
		setFontSize(11);
	}
	else if(fastCash > 0)
	{
		drawPacker(imgQuestBtn1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestBtn1)/2, imgW(imgQuestBtn1), imgH(imgQuestBtn1)/2, VH);
		drawIcon(subTemp[XPOS]-2-8, subTemp[YPOS]-3-12, ICON_TYPE_LOOK);
		setFontSize(14);
		gDrawStringBold(subTemp[XPOS]-2+8, subTemp[YPOS]-3-12, strTempS, VH, 255, 255, 255, 186, 70, 10);
		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-3+12, "즉시완료", VH, 255, 255, 255, 186, 70, 10);
		setFontSize(11);
	}
	else
	{
		drawPacker(imgQuestBtn1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestBtn1)/2, imgW(imgQuestBtn1), imgH(imgQuestBtn1)/2, VH);

		drawIcon(subTemp[XPOS]-2-8, subTemp[YPOS]-3-12, ICON_TYPE_LOOK);
		setFontSize(14);
		gDrawStringBold(subTemp[XPOS]-2+8, subTemp[YPOS]-3-12, "0", VH, 255, 255, 255, 77, 77, 77);
		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-3+12, "즉시완료", VH, 255, 255, 255, 77, 77, 77);
		setFontSize(11);
	}
	
	xQuestInfo.xTouchFastCash.wPos = imgW(imgQuestBtn1);
	xQuestInfo.xTouchFastCash.hPos = imgH(imgQuestBtn1)/2;
	xQuestInfo.xTouchFastCash.xPos = subTemp[XPOS]-xQuestInfo.xTouchFastCash.wPos/2;
	xQuestInfo.xTouchFastCash.yPos = subTemp[YPOS]-xQuestInfo.xTouchFastCash.hPos/2;
	
	subTemp[XPOS] = px+280;
	subTemp[YPOS] = py-250;
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */

}

void drawQuestInfoGiftPopup()
{
	int px = cx;
	int py = cy;

	drawPacker(imgQuestResult0, px, py, 0, 0, imgW(imgQuestResult0), imgH(imgQuestResult0), VH);
	setFontSize(14);
	gDrawStringBold(px+4, py-189, "보상 아이템", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	drawPacker(imgQuestGiftIcon, px-70, py-190, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
	
	int type;
	int code;
	int maxNum;
	
	switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
	{
	case QUEST_TYPE_MAIN:
		type = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[0];
		code = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[0];
		maxNum = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[0].oriData;
		break;
	case QUEST_TYPE_NORMAL:
		type = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[0];
		code = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftCode[0];
		maxNum = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[0].oriData;
		break;
	}
		
	
	
	switch(type)
	{
	case 3:	//의상
		setMapData(code);
		sprintf(strTempS, "%s",xFashionData[xMap.type][xMap.listNum].strName);
		drawFittingF(px, py-60, code, 100);
		break;
	case 4:	//인테리어
		setMapData(code);
		sprintf(strTempS, "%s",xObj.xObjData[xMap.type][xMap.listNum].strName);
						
		setDrawObjCenter(xMap.type,xMap.listNum);
		if(xDrawObjCenter.reSize != 100)
		{
			xGame.fgameScaleCx =px;
			xGame.fgameScaleCy =lcdH-(py-60);
			xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
		}
			drawObj(px+xDrawObjCenter.w, py-60+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
		xGame.fgameScale = 1.0f;
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
		break;
	case 5:	//자동차
		sprintf(strTempS, "%s",xCarData[code].strName);
		drawCar(px, py-60, code, MOVETYPE_XPLUS, gameCnt%4, 100);
		break;
	case 6:	//모델
		sprintf(strTempS, "%s","모델");
		break;
	}
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(px-10, py-60-10, 20, 20);
	setAlpha(ALPHA_MAX);
	*/

	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px, py+74, strTempS, VH);
	setFontSize(11);
		
	drawPacker(imgQuestResult1, px, py+169, 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	setFontSize(14);
	gDrawStringBold(px-2, py+169-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = px-xTouchOk.wPos/2;
	xTouchOk.yPos = py+169-xTouchOk.hPos/2;
}


void drawNpcPhoto(int x,int y,int npcNum,int reSize)
{
	if(imgPopupNpcProfile[npcNum].texture == NULL)
	{
		sprintf(strTempS,"popupnpcicon%d.png", npcNum);
		loadImg(strTempS, &imgPopupNpcProfile[npcNum]);
	}
	
	if(reSize != 100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = reSize;
	}
	
	drawImage(&imgPopupNpcProfile[npcNum], x, y, 0, 0, imgPopupNpcProfile[npcNum].w, imgPopupNpcProfile[npcNum].h, VH);
	xGame.isReSizeDraw = FALSE;
}

void drawNpcIcon(int x,int y,int npcNum)
{
	if(imgPopupNpcProfileIcon[npcNum].texture == NULL)
	{
		sprintf(strTempS,"popupnpcicon%da.png", npcNum);
		loadImg(strTempS, &imgPopupNpcProfileIcon[npcNum]);
	}
	drawImage(&imgPopupNpcProfileIcon[npcNum], x, y, 0, 0, imgPopupNpcProfileIcon[npcNum].w, imgPopupNpcProfileIcon[npcNum].h, VH);
}

void getSprintfQuestCheck(int slotNum,int checkNum)
{
	int type;
	int nowNum;
	int maxNum;
	int code;
	
	int typeNum;
	int listNum;
	
	char strInfo[512];
	
    
    if(xWorldMap.state == WORLDMAP_STATE_EVENTQUEST)
    {
        type = xEventQuest.xData[slotNum][checkNum].checkType;
        nowNum = xEventQuest.xData[slotNum][checkNum].checkNow;
        maxNum = xEventQuest.xData[slotNum][checkNum].checkMax;
        code = xEventQuest.xData[slotNum][checkNum].checkCode;
    }
    else
    {
    
        switch(xQuestInfo.xSlot[slotNum].type)
        {
        case QUEST_TYPE_MAIN:
            type = xQuestDataMain[xQuestInfo.xSlot[slotNum].questNum].checkType[checkNum];
            nowNum = xQuestDataMain[xQuestInfo.xSlot[slotNum].questNum].checkNow[checkNum];
            maxNum = xQuestDataMain[xQuestInfo.xSlot[slotNum].questNum].checkMax[checkNum];
            code = xQuestDataMain[xQuestInfo.xSlot[slotNum].questNum].checkCode[checkNum];
            sprintf(strInfo, "%s",xQuestDataMain[xQuestInfo.xSlot[slotNum].questNum].strSubInfo);
            break;
        case QUEST_TYPE_NORMAL:
            type = xQuestDataNormal[xQuestInfo.xSlot[slotNum].questNum].checkType[checkNum];
            nowNum = xQuestDataNormal[xQuestInfo.xSlot[slotNum].questNum].checkNow[checkNum];
            maxNum = xQuestDataNormal[xQuestInfo.xSlot[slotNum].questNum].checkMax[checkNum];
            code = xQuestDataNormal[xQuestInfo.xSlot[slotNum].questNum].checkCode[checkNum];
            sprintf(strInfo, "%s",xQuestDataNormal[xQuestInfo.xSlot[slotNum].questNum].strSubInfo);
            break;
        }
    }
	
	
	
	
	
	
	switch(type)
	{
	case 19://	직원 꾸미기
	case 34://	직원 꾸미기
		code = code/100000;
		break;
	}
	
	typeNum = code / 1000;
	listNum = code % 1000;
		
	if(nowNum>maxNum)
		nowNum = maxNum;
		
	switch(type)
	{
	case 0://	의상 구매
		sprintf(strTempS, "%s 라이선스 구매",xFashionData[typeNum][listNum].strName);
		break;
	case 1://	의상 주문
		sprintf(strTempS, "%s 제작하기(%d/%d)",xFashionData[typeNum][listNum].strName,nowNum,maxNum);
		break;
	case 2://	의상 판매
		sprintf(strTempS, "%s 판매하기(%d/%d)",xFashionData[typeNum][listNum].strName,nowNum,maxNum);
		break;
	case 3://	유행 의상 주문
		sprintf(strTempS, "현재 유행중인 의상 제작하기(%d/%d)",nowNum,maxNum);
		break;
	case 4://	유행 의상 판매
		sprintf(strTempS, "현재 유행중인 의상 판매하기(%d/%d)",nowNum,maxNum);
		break;
	case 5://	인테리어 구매
		sprintf(strTempS, "%s 구매하기(%d/%d)",xObj.xObjData[typeNum][listNum].strName,nowNum,maxNum);
		break;
	case 6://	인테리어 진열
		sprintf(strTempS, "%s 배치하기(%d/%d)",xObj.xObjData[typeNum][listNum].strName,nowNum,maxNum);
		break;
	case 7://	친구 추가
		sprintf(strTempS, "친구 추가하기(%d/%d)",nowNum,maxNum);
		break;
	case 8://	친구 샵 도움
		sprintf(strTempS, "친구샵 도움주기(%d/%d)",nowNum,maxNum);
		break;
	case 9://	친구에게 주문배송 요청
		sprintf(strTempS, "친구에게 요청한 주문배송 완료받기(%d/%d)",nowNum,maxNum);
		break;
	case 10://	요청받은 주문배송 처리
		sprintf(strTempS, "요청받은 주문배송 처리하기(%d/%d)",nowNum,maxNum);
		break;
	case 11://	명성도 달성
		sprintf(strTempS, "명성도 달성하기(%d/%d)",nowNum,maxNum);
		break;
	case 12://	골드 달성
		sprintf(strTempS, "골드 달성하기(%d/%d)",nowNum,maxNum);
		break;
	case 13://	계산 후 퇴장하는 손님 보너스 터치
		sprintf(strTempS, "계산 후 퇴장하는 손님 보너스 터치(%d/%d)",nowNum,maxNum);
		break;
	case 14://	캔디머신 진행
		sprintf(strTempS, "캔디머신 이용하기(%d/%d)",nowNum,maxNum);
		break;
	case 15://	모델 피팅
		sprintf(strTempS, "모델 피팅하기(%d/%d)",nowNum,maxNum);
		break;
	case 16://	패션쇼 참가
		sprintf(strTempS, "패션쇼 참가하기");
		break;
	case 17://	칭호 개수 달성
		sprintf(strTempS, "칭호 개수 달성하기(%d/%d)",nowNum,maxNum);
		break;
	case 18://	직원 고용
		sprintf(strTempS, "직원 고용하기");
		break;
	case 19://	카운터 직원 꾸미기
		sprintf(strTempS, "카운터 직원 %s로 꾸미기",xFashionData[typeNum][listNum].strName);
		break;
	case 20://	튜토리얼 진행
		sprintf(strTempS, "%s",strInfo);
		break;
	case 21://	주문장퀘스트 완료
		sprintf(strTempS, "주문장(%s)배송하기(%d/%d)",xFashionData[typeNum][listNum].strName,nowNum,maxNum);
		break;
	case 22://	프로필 사진변경
		sprintf(strTempS, "프로필 사진변경하기");
		break;
	case 23://	모델 구매
		sprintf(strTempS, "모델캐스팅 하기(%d/%d)",nowNum,maxNum);
		break;
	case 24://	타일 구매
		sprintf(strTempS, "타일 구매하기(%d/%d)",nowNum,maxNum);
		break;
	case 25://	벽지 구매
		sprintf(strTempS, "벽지 구매하기(%d/%d)",nowNum,maxNum);
		break;
	case 26://	투데이 글 바꾸기
		sprintf(strTempS, "방명록 투데이 변경하기");
		break;
	case 27://	친구샵에서 방명록 글 남기기
		sprintf(strTempS, "친구샵에 방명록 남기기(%d/%d)",nowNum,maxNum);
		break;
	case 28://	증축
		sprintf(strTempS, "증축하기");
		break;
	case 29://	샵 청소하기
		sprintf(strTempS, "샵 청소하기(%d/%d)",nowNum,maxNum);
		break;
	case 30://	모델 캐스팅하기
		sprintf(strTempS, "모델 캐스팅하기(%d/%d)",nowNum,maxNum);
		break;
	case 31://	레베카 샵 방문하기
		sprintf(strTempS, "친구메뉴를 통해 레베카샵 방문하기");
		break;
	case 32://	확장
		sprintf(strTempS, "%d x %d으로 샵 확장하기",maxNum+8,maxNum+8);
		break;
	case 33://	의상 즉시 판매
		sprintf(strTempS, "진열되어 있는 의상 즉시판매(%d/%d)",nowNum,maxNum);
		break;
	case 34://	응대 직원 꾸미기
		sprintf(strTempS, "응대 직원 %s로 꾸미기",xFashionData[typeNum][listNum].strName);
		break;
	case 35://	의상 즉시 주문
		sprintf(strTempS, "%s 즉시 제작하기(%d/%d)",xFashionData[typeNum][listNum].strName,nowNum,maxNum);
		break;
	case 36://	얼마 이상 의상 구매
		sprintf(strTempS, "라이선스 가격 %d골드 이상 의상 구매",maxNum);
		break;
	case 37://	판매 단가 %d원 이상 의상 주문
		sprintf(strTempS, "수익금 %d골드 이상 의상 판매",maxNum);
		break;
	case 38://	주문 수량 %d벌 이상 의상 주문
		sprintf(strTempS, "제작 수량 %d벌 이상 의상 제작",maxNum);
		break;
	case 39://	명성도 %d 이상 의상 구매
		sprintf(strTempS, "라이선스 명성도 %d 이상 의상 구매",maxNum);
		break;
	case 40://	의상 라이센스 %d개 이상 보유하기
		sprintf(strTempS, "의상 라이선스 %d개 이상 보유하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 41://	주문된 의상 진열
		sprintf(strTempS, "의상(잡화) %d개 진열하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 42://	주문된 %s 진열하기
		sprintf(strTempS, "%s 진열하기(%d/%d)",xFashionData[typeNum][listNum].strName,nowNum,maxNum);
		break;
	case 43://	친구에게 주문배송 요청하기
		sprintf(strTempS, "친구에게 주문배송 요청하기(%d/%d)",nowNum,maxNum);
		break;
	case 44://	친구 패션쇼 추천하기
		sprintf(strTempS, "친구 패션쇼 추천하기(%d/%d)",nowNum,maxNum);
		break;
	case 45://	친구 패션쇼 구경하기
		sprintf(strTempS, "친구 패션쇼 구경하기(%d/%d)",nowNum,maxNum);
		break;
	case 46://	패션쇼 %d점 달성하기
		sprintf(strTempS, "패션쇼 %d점 달성하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 47://	보류
		sprintf(strTempS, "보류 구현중(CODE:%d)",type);
		break;
	case 48://	마네킹 레이어드 %d회 달성하기
		sprintf(strTempS, "마네킹 레이어드 %d회 달성하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 49://	친구 모델 추천하기
		sprintf(strTempS, "친구 모델 추천하기(%d/%d)",nowNum,maxNum);
		break;
	case 50://	보류
		sprintf(strTempS, "보류(CODE:%d)",type);
		break;
	case 51://	여자 모델 %d명 피팅하기
		sprintf(strTempS, "여자모델 %d명 피팅하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 52://	남자 모델 %d명 피팅하기
		sprintf(strTempS, "남자모델 %d명 피팅하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 53:// 모델업그레이드 하기
		sprintf(strTempS, "모델 업그레이드 하기(%d/%d)",nowNum,maxNum);
		break;
	case 54:// xx등급 이상 모델 캐스팅하기
		switch(code)
		{
		case 0:sprintf(strTempS, "C등급 이상 모델 캐스팅하기");	break;
		case 1:sprintf(strTempS, "B등급 이상 모델 캐스팅하기");	break;
		case 2:sprintf(strTempS, "A등급 이상 모델 캐스팅하기");	break;
		case 3:sprintf(strTempS, "S등급 이상 모델 캐스팅하기");	break;
		}
		break;
	case 55://	모델 %d명 보유하기
		sprintf(strTempS, "모델 %d명 보유하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 56://	선호도 %d%% 달성하기
		sprintf(strTempS, "선호도 %d%% 달성하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 57://	캔디 모으기
		sprintf(strTempS, "캔디 모으기(%d/%d)",nowNum,maxNum);
		break;
	case 58://	카운터 직원 헤어or메이크업 구매하기
		sprintf(strTempS, "카운터 직원 헤어or메이크업 구매하기(%d/%d)",nowNum,maxNum);
		break;
	case 59://	카운터 직원 의상 구매하기
		sprintf(strTempS, "카운터 직원 의상 구매하기(%d/%d)",nowNum,maxNum);
		break;
	case 60://	응대 직원 헤어or메이크업 구매하기
		sprintf(strTempS, "응대 직원 헤어or메이크업 구매하기(%d/%d)",nowNum,maxNum);
		break;
	case 61://	응대 직원 의상 구매하기
		sprintf(strTempS, "응대 직원 의상 구매하기(%d/%d)",nowNum,maxNum);
		break;
	case 62://	쇼파에서 핸드폰 만지는 손님 터치
		sprintf(strTempS, "쇼파에서 핸드폰 만지는 손님 터치(%d/%d)",nowNum,maxNum);
		break;
	case 63://	쇼파에서 커피 요청하는 손님 터치
		sprintf(strTempS, "쇼파에서 커피 요청하는 손님 터치(%d/%d)",nowNum,maxNum);
		break;
	case 64://	쇼파에서 패드 요청하는 손님 터치
		sprintf(strTempS, "쇼파에서 패드 요청하는 손님 터치(%d/%d)",nowNum,maxNum);
		break;
	case 65://	마네킹에서 발생하는 보너스 터치
		sprintf(strTempS, "마네킹에서 발생하는 보너스 터치(%d/%d)",nowNum,maxNum);
		break;
	case 66://	유행 의상 구매하는 손님 보너스 터치
		sprintf(strTempS, "유행 의상 구매하는 손님 보너스 터치(%d/%d)",nowNum,maxNum);
		break;
	case 67://	샵 대표 모델이 주는 보너스 터치
		sprintf(strTempS, "모델 활동 보상 획득(%d/%d)",nowNum,maxNum);
		break;
	case 68://	쇼파에서 잡지 요청하는 손님 터치
		sprintf(strTempS, "쇼파에서 잡지 요청하는 손님 터치(%d/%d)",nowNum,maxNum);
		break;
	case 69://	남자마네킹 레이어드 %d회 달성하기(%d/%d)
		sprintf(strTempS, "남자마네킹 레이어드 %d회 달성하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 71://	보상없는 시나리오진행
		sprintf(strTempS, "시나리오 진행중");
		break;
	case 72://	보상없는 튜토리얼진행
		sprintf(strTempS, "튜토리얼 진행중");
		break;
	case 73://	%d개 제작하기
		sprintf(strTempS, "의상이나 잡화 %d개 제작(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 74://	의상이나 잡화 %d개 진열(%d/%d)
		sprintf(strTempS, "41번과중복(기획확인)");
		break;
	case 75://	여성용 의상 %d회 진열하기 진열(%d/%d)
		sprintf(strTempS, "여성용 의상 %d회 진열하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 76://	남성용 의상 %d회 진열하기 진열(%d/%d)
		sprintf(strTempS, "남성용 의상 %d회 진열하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 77://	마네킹 피팅 의상을 요청하는 손님 터치(%d/%d)0
		sprintf(strTempS, "마네킹 피팅 의상을 요청하는 손님 터치(%d/%d)",nowNum,maxNum);
		break;
	case 78://	모델 활동으로 %d원 벌기(%d/%d)
		sprintf(strTempS, "모델 활동으로 %d골드 벌기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 79://	모델 활동으로 경험치 %d획득하기(%d/%d)
		sprintf(strTempS, "모델 활동으로 경험치 %d획득하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 80://	피팅룸을 이용하는 여자 손님 터치하기
		sprintf(strTempS, "피팅룸을 이용하는 여자 손님 터치하기(%d/%d)",nowNum,maxNum);
		break;
	case 81://	피팅룸을 이용하는 남자 손님 터치하기
		sprintf(strTempS, "피팅룸을 이용하는 남자 손님 터치하기(%d/%d)",nowNum,maxNum);
		break;
	case 82://	의상 동시에 x벌 진열하기0
		sprintf(strTempS, "의상 동시에 %d벌 진열하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 83://	잡화 동시에 x개 진열하기0
		sprintf(strTempS, "잡화 동시에 %d개 진열하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 84://	xx 테마 인테리어 구매하기0 테마번호/999		0
		sprintf(strTempS, "%s 테마 인테리어 구매하기(%d/%d)",xInterior.strThemaName[code],nowNum,maxNum);
		break;
	case 85://	(특정의상카테고리)만 이용해 골드 x 벌기 카테고리/99999
		switch(code)
		{
		case 0:sprintf(strTempS, "아우터를 판매해 골드 %d벌기(%d/%d)",maxNum,nowNum,maxNum);break;
		case 1:sprintf(strTempS, "상의를 판매해 골드 %d벌기(%d/%d)",maxNum,nowNum,maxNum);break;
		case 2:sprintf(strTempS, "하의를 판매해 골드 %d벌기(%d/%d)",maxNum,nowNum,maxNum);break;
		case 3:sprintf(strTempS, "원피스를 판매해 골드 %d벌기(%d/%d)",maxNum,nowNum,maxNum);break;
		case 4:sprintf(strTempS, "신발을 판매해 골드 %d벌기(%d/%d)",maxNum,nowNum,maxNum);break;
		case 5:sprintf(strTempS, "가방을 판매해 골드 %d벌기(%d/%d)",maxNum,nowNum,maxNum);break;
		case 6:sprintf(strTempS, "기타(사용안함 기획수정하기)");break;
		}
		break;
	case 86://	친구에게 x회 도움받기
		sprintf(strTempS, "친구에게 %d회 도움받기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 87://	캔디머신으로 x원 모으기
		sprintf(strTempS, "캔디머신으로 %d골드 모으기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 88://	선호도 x% 상태로 의상 x벌 판매하기
		sprintf(strTempS, "선호도 %d%% 이상으로 판매완료 %d회 하기(%d/%d)",code,maxNum,nowNum,maxNum);
		break;
	case 89://	활동 중인 모델 의상 x벌 마네킹에게 입히기
		sprintf(strTempS, "활동 중인 모델 의상 %d벌 마네킹에게 입히기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 90://	소셜의상 x벌 획득하기
		sprintf(strTempS, "소셜의상 %d벌 획득하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 91://	모델이 주는 활동 보상 x번 획득하기
		sprintf(strTempS, "모델이 주는 활동 보상 %d번 획득하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 92://	마네킹 넣어입기로 레이어드 x회 코디하기
		sprintf(strTempS, "마네킹 넣어입기로 레이어드 %d회 코디하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 93://	유행 중인 의상 x벌 판매 완료하기
		sprintf(strTempS, "4번 중복");
		break;
	case 94://	샵에 모델 x명 배치하기0
		sprintf(strTempS, "샵에 모델 %d명 배치하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 95://	남자 모델만 이용해 패션쇼 xx점 달성하기0
		sprintf(strTempS, "남자 모델만 이용해 패션쇼 %d점 달성하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 96://	여자 모델만 이용해 패션쇼 xx점 달성하기0
		sprintf(strTempS, "여자 모델만 이용해 패션쇼 %d점 달성하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 97://	커플손님에게 의상 x벌 판매하기
		sprintf(strTempS, "커플손님에게 의상 %d벌 판매하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	case 98://	캔디 x개 획득하기
		sprintf(strTempS, "친구샵에서 캔디 %d개 획득하기(%d/%d)",maxNum,nowNum,maxNum);
		break;
	}
}

int	getQuestCheckTotalNum(int slotNum)
{
	int result = 0;

	for(int i=0;i<3;i++)
	{
		switch(xQuestInfo.xSlot[slotNum].type)
		{
		case QUEST_TYPE_MAIN:
			if(xQuestDataMain[xQuestInfo.xSlot[slotNum].questNum].checkType[i] != DONT)
				result++;
			break;
		case QUEST_TYPE_NORMAL:
			if(xQuestDataNormal[xQuestInfo.xSlot[slotNum].questNum].checkType[i] != DONT)
				result++;
			break;
		}
	}
	return result;
}

void setQuest(int checkType,int num,int code)
{
	int totalCheck;
	int questCheckType;
	M_Boolean isBarCancel = FALSE;
    bool isUpdate = false;
	for(int i=0;i<xQuestInfo.totalNum;i++)
	{
		totalCheck = getQuestCheckTotalNum(i);
		for(int k=0;k<totalCheck;k++)
		{
			switch(xQuestInfo.xSlot[i].type)
			{
			case QUEST_TYPE_MAIN:
				questCheckType = xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkType[k];
				break;
			case QUEST_TYPE_NORMAL:
				questCheckType = xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkType[k];
				break;
			}
					
			if(questCheckType == checkType)
			{
				switch(xQuestInfo.xSlot[i].type)
				{
				case QUEST_TYPE_MAIN:
					if(code == DONT ||checkType == 88 || code == xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkCode[k]%100000 || (code == xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkCode[k]/100000 && xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkCode[k]/100000 != 0))
					{
                        isUpdate = false;
						switch(checkType)
						{
						case 11:	//명성도
						case 12:	//골드달성
						case 17:	//칭호 갯수
						case 36:	//얼마이상구매						
						case 37://	판매 단가 %d원 이상 의상 주문
						case 38://	주문수량 %d벌 이상 의상 주문
						case 39://	명성도 %d 이상 의상 구매
						case 40://	의상 라이센스 %d개 이상 보유하기
						case 46://	패션쇼 %d점 달성하기
						case 48://	마네킹 레이어드 %d회 달성하기
						case 51://	여자 모델 %d명 피팅하기
						case 52://	남자 모델 %d명 피팅하기
						case 55://	모델 %d명 보유하기
						case 56://	선호도 %d%% 달성하기
						case 57://	캔디 모으기
						case 69://	남자마네킹 레이어드 %d회 달성하기(%d/%d)
						case 82://	의상 동시에 x벌 진열하기
						case 83://	잡화 동시에 x개 진열하기
						case 89://	활동 중인 모델 의상 x벌 마네킹에게 입히기
						case 92://	마네킹 넣어입기로 레이어드 x회 코디하기
						case 94://	샵에 모델 x명 배치하기
						case 95://	남자 모델만 이용해 패션쇼 xx점 달성하기
						case 96://	여자 모델만 이용해 패션쇼 xx점 달성하기
                            if(num > xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[k])
                            {
                                isUpdate = true;
                                xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[k] = num;
                                
                            }
							break;
						case 88://	선호도 x% 상태로 의상 x벌 판매하기		0
							if(code >= xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkCode[k])
                            {
                                isUpdate = true;
								xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[k] += num;
                            }
							else
								isBarCancel = TRUE;
							break;
						default:
                            isUpdate = true;
							xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[k] += num;
                                
                                

                                
							break;
						}
						
						switch(checkType)
						{
						case 57://	캔디 모으기
						case 12:	//골드달성
						case 56://	선호도 %d%% 달성하기
						case 55://	모델 %d명 보유하기
						case 82://	의상 동시에 x벌 진열하기
						case 83://	잡화 동시에 x개 진열하기
						case 37://	판매 단가 %d원 이상 의상 주문
							break;
						default:
							if(isBarCancel == FALSE)
							{
								if(xQuestDataMain[xQuestInfo.xSlot[i].questNum].isCheckClean[k] == FALSE)
								{
                                    
                                    if(isUpdate == true)
                                    {
                                        xQuestInfo.xSlot[i].barAnyCnt = 30;
                                        xQuestInfo.xSlot[i].barCheckNum = k;
                                        
                                        getSprintfQuestCheck(i,xQuestInfo.xSlot[i].barCheckNum);
                                        sprintf(xQuestInfo.strBarText[i], "%s",strTempS);
                                        
                                        xQuestInfo.xDragScrollSlot.pos = -(i*xQuestInfo.xDragScrollSlot.posGab);
                                    }
								}
                                
                                if(isUpdate == true)
                                {
                                    ///////////////////////////////////////////////////////////////////////////////////////
                                    xEventQueueNet.action[xEventQueueNet.totalNum]=1;		//0튜토리얼,1메인,2일반
                                    xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
                                    ///////////////////////////////////////////////////////////////////////////////////////
                                }
							}
							break;
						}
						
						if(xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkNow[k] >= xQuestDataMain[xQuestInfo.xSlot[i].questNum].checkMax[k])
							xQuestDataMain[xQuestInfo.xSlot[i].questNum].isCheckClean[k] = TRUE;
					}
					break;
				case QUEST_TYPE_NORMAL:
					if(code == DONT||checkType == 88 || code == xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkCode[k]%100000 || (code == xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkCode[k]/100000 && xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkCode[k]/100000 !=0))
					{
                        isUpdate = false;
						
						switch(checkType)
						{
						case 11:	//명성도
						case 12:	//골드
						case 17:	//칭호 갯수
						case 36:	//얼마이상구매
						case 38://	주문수량 %d벌 이상 의상 주문
						case 39://	명성도 %d 이상 의상 구매
						case 40://	의상 라이센스 %d개 이상 보유하기
						case 46://	패션쇼 %d점 달성하기
						case 48://	마네킹 레이어드 %d회 달성하기
						case 51://	여자 모델 %d명 피팅하기
						case 52://	남자 모델 %d명 피팅하기
						case 55://	모델 %d명 보유하기
						case 56://	선호도 %d%% 달성하기
						case 57://	캔디 모으기
						case 69://	남자마네킹 레이어드 %d회 달성하기(%d/%d)
						case 82://	의상 동시에 x벌 진열하기
						case 83://	잡화 동시에 x개 진열하기
						case 89://	활동 중인 모델 의상 x벌 마네킹에게 입히기
						case 92://	마네킹 넣어입기로 레이어드 x회 코디하기
						case 94://	샵에 모델 x명 배치하기
						case 95://	남자 모델만 이용해 패션쇼 xx점 달성하기
						case 96://	여자 모델만 이용해 패션쇼 xx점 달성하기
                            
                            if(num > xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkNow[k])
                            {
                                isUpdate = true;
                                xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkNow[k] = num;
                            }
							break;
						case 88://	선호도 x% 상태로 의상 x벌 판매하기		0
							if(code >= xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkCode[k])
                            {
                                isUpdate = true;
								xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkNow[k] += num;
                            }
							else
								isBarCancel = TRUE;
							break;
						default:
                            isUpdate = true;
							xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkNow[k] += num;
							break;
						}
						
						
						switch(checkType)
						{
						case 57://	캔디 모으기
						case 12:	//골드달성
						case 37://	판매 단가 %d원 이상 의상 주문
						case 56://	선호도 %d%% 달성하기
						case 55://	모델 %d명 보유하기
						case 82://	의상 동시에 x벌 진열하기
						case 83://	잡화 동시에 x개 진열하기
							break;
						default:
							if(isBarCancel == FALSE)
							{
								if(xQuestDataNormal[xQuestInfo.xSlot[i].questNum].isCheckClean[k] == FALSE)
								{
                                    if(isUpdate == true)
                                    {
                                        xQuestInfo.xSlot[i].barAnyCnt = 30;
                                        xQuestInfo.xSlot[i].barCheckNum = k;
                                        getSprintfQuestCheck(i,xQuestInfo.xSlot[i].barCheckNum);
                                        sprintf(xQuestInfo.strBarText[i], "%s",strTempS);
                                        
                                        xQuestInfo.xDragScrollSlot.pos = -(i*xQuestInfo.xDragScrollSlot.posGab);
                                    }
								}
								
                                if(isUpdate == true)
                                {
                                    ///////////////////////////////////////////////////////////////////////////////////////
                                    xEventQueueNet.action[xEventQueueNet.totalNum]=2;									//0튜토리얼,1메인,2일반
                                    xEventQueueNet.slotNum[xEventQueueNet.totalNum]=xQuestInfo.xSlot[i].questNum;		//일반퀘스트슬롯번호
                                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
                                    ///////////////////////////////////////////////////////////////////////////////////////
                                }
							}
							break;
						}
						
						if(xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkNow[k] >= xQuestDataNormal[xQuestInfo.xSlot[i].questNum].checkMax[k])
							xQuestDataNormal[xQuestInfo.xSlot[i].questNum].isCheckClean[k] = TRUE;
					}
					break;
				}
			}
		}
	}
    
    setEventQuest(checkType,num,code);
}


int questShortCut(int questType,M_Boolean isState,int questCode)
{
	if(xWorldMap.isFriendMap == TRUE)
		return FALSE;
	
	
	switch(questType)
	{
	case 0://	의상 구매
		if(isState == TRUE)
		{
			int slotNum;
			setStateProductionMenu();
			slotNum = linkProductionMenu(questCode);
			
			if(slotNum != DONT)
			{
				xDragScrollCatalogS.selectNum = slotNum/8;
			}			
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 1://	의상 주문
		if(isState == TRUE)
		{
			int slotNum;
			setStateProductionMenu();
			slotNum = linkProductionMenu(questCode);
			
			if(slotNum != DONT)
			{
				xDragScrollCatalogS.selectNum = slotNum/8;
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;

	case 3://	유행 의상 주문
	case 4://	유행 의상 판매
		if(isState == TRUE)
		{
			playSnd(SND_POPUP_SHOW);
			trendFreeLoad(TRUE);
			
			xWorldMap.isTrend = TRUE;
			xTrend.state = TREND_STATE_MAIN;
			xTrend.selectSlot = DONT;
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 5://	인테리어 구매
	case 6://	인테리어 진열
		if(isState == TRUE)
		{
			setBuildCheck();
			int slotNum = linkInteriorShop(questCode);
			interiorShopFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
			if(slotNum != DONT)
			{
				xDragScrollInteriorS.selectNum = slotNum/8;
			}
			
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 7://	친구 추가
	case 8://	친구 샵 도움
	case 9://	친구에게 주문배송 요청
		if(isState == TRUE)
		{
			//친구메뉴
			setStateFriendList();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 10://	요청받은 주문배송 처리
		if(isState == TRUE)
		{
			carStorageFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
			xCar.selectTabS = 0;
			setOrderList();
			xWorldMap.isKeyReturn = TRUE;
			xOrder.totalNumListData = 0;
			xOrder.isNetLoad = FALSE;
			addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
		}
		else
			return TRUE;
		break;
	case 11://	명성도 달성
		if(isState == TRUE)
		{
			xInterior.selectTabB = 1;
			xInterior.selectTabS = 0;
			setBuildCheck();
			setInteriorTabChange();
			interiorShopFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
			xDragScrollInteriorS.selectNum = 0;
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 12://	골드 달성
		if(isState == TRUE)
		{
			setShop(SHOPTAB_TYPE_MONEY);
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 14://	캔디머신 진행
		if(isState == TRUE)
		{
			initMiniGame();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 15:	//모델피팅
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 16:
		if(isState == TRUE)
		{
			setStateFashion();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 19://	직원 꾸미기
		if(isState == TRUE)
		{
			int selectStaffSlot = DONT;
			for(int s=0;s<xStaff.totalStaffSlot;s++)
			{
				switch(xMap.nowFloor)
				{
				case 0:
					if(xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_1F)
						selectStaffSlot = s;
					break;
				case 1:
					if(xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_2F)
						selectStaffSlot = s;
					break;
				case 2:
					if(xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_3F)
						selectStaffSlot = s;
					break;
				}
				if(selectStaffSlot != DONT)
					break;								
			}
			if(selectStaffSlot != DONT)
			{
				setStateStaff(selectStaffSlot);
				int slotNum;
				
				
				switch(xFitting.gender)
				{
				case 0:
					slotNum = linkStaffMenu(questCode%100000);
					break;
				case 1:
					slotNum = linkStaffMenu(questCode/100000);
					
					break;
				}
				
				
				if(slotNum != DONT)
				{
					xDragScrollFittingS.selectNum = slotNum/8;
				}
			}
			
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 21://	퀘스트 주문장
		if(isState == TRUE)
		{
			
			carStorageFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_CARSTORAGE;
			xCar.selectTabS = 0;
			setOrderList();
			xOrder.totalNumListData = 0;
			xOrder.isNetLoad = FALSE;
			addEventQueueNet(xTouch.xPos, xTouch.xPos, NETQUEUE_TYPE_ORDERLIST, FALSE);
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;		
		break;
	case 22://	프로필 사진변경
		if(isState == TRUE)
		{
            setQuest(22, 1, DONT);
            //프로필 변경 UI 이미지 로드 KBY 2018.2.26
            profilePhotoFreeLoad_FP(true);
			xWorldMap.state = WORLDMAP_STATE_PROFILE;
            //////////////////////////////////////////////////
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 23://	모델구매
		if(isState == TRUE)
		{
			setShop(SHOPTAB_TYPE_PREMIUM);
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 24://	타일 구매
		if(isState == TRUE)
		{
			xInterior.selectTabB = 1;
			xInterior.selectTabS = 3;
			setBuildCheck();
			setInteriorTabChange();
			interiorShopFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
			xDragScrollInteriorS.selectNum = 0;
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 25://	벽지 구매
		if(isState == TRUE)
		{
			xInterior.selectTabB = 1;
			xInterior.selectTabS = 4;
			setBuildCheck();
			setInteriorTabChange();
			interiorShopFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
			xDragScrollInteriorS.selectNum = 0;
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 26://	투데이 글 바꾸기
		if(isState == TRUE)
		{
			setStateMail();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 27://	친구샵에서 방명록 글 남기기
		if(isState == TRUE)
		{
			//친구메뉴
			setStateFriendList();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 31://	레베카 샵 방문하기
		if(isState == TRUE)
		{
			//친구메뉴
			setStateFriendList();
			
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 32://	확장
		if(isState == TRUE)
		{
			xInterior.selectTabB = 2;
			xInterior.selectTabS = 0;
			setBuildCheck();
			setInteriorTabChange();
			interiorShopFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
		}
		else
			return TRUE;
		break;
	case 34://	응대직원 꾸미기
		if(isState == TRUE)
		{
			int selectStaffSlot = DONT;
			for(int s=0;s<xStaff.totalStaffSlot;s++)
			{
				switch(xMap.nowFloor)
				{
				case 0:
					if(xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_1F)
						selectStaffSlot = s;
					break;
				case 1:
					if(xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_2F)
						selectStaffSlot = s;
					break;
				case 2:
					if(xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_3F)
						selectStaffSlot = s;
					break;
				}
				if(selectStaffSlot != DONT)
					break;
			}
			if(selectStaffSlot != DONT)
			{
				setStateStaff(selectStaffSlot);
				int slotNum;
				
				
				switch(xFitting.gender)
				{
				case 0:
					slotNum = linkStaffMenu(questCode%100000);
					break;
				case 1:
					slotNum = linkStaffMenu(questCode/100000);
					break;
				}
				
				if(slotNum != DONT)
				{
					
					xDragScrollFittingS.selectNum = slotNum/8;
				}
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 35://	의상 빠른주문
		if(isState == TRUE)
		{
			int slotNum;
			setStateProductionMenu();
			slotNum = linkProductionMenu(questCode);
			
			if(slotNum != DONT)
			{
				xDragScrollCatalogS.selectNum = slotNum/8;
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 37://	판매 단가 %d원 이상 의상 주문
		if(isState == TRUE)
		{
			xQuestInfo.isProductionInfo = TRUE;
			setStateProductionMenu();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 36://	얼마 이상 의상 구매
	case 38://	주문수량 %d벌 이상 의상 주문
	case 39://	명성도 %d 이상 의상 구매
	case 40://	의상 라이선스 %d개 이상 보유하기
		if(isState == TRUE)
		{
			setStateProductionMenu();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 41://	주문된 의상 진열
		if(isState == TRUE)
		{
			setLinkSellTable(DONT,DONT);
			if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
			{
				setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
				sprintf(xPopup.strText, "진열할 공간이 부족합니다.");
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 42://	주문된 %s 진열하기
		if(isState == TRUE)
		{
			setLinkSellTable(questCode,DONT);
			if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
			{
				setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
				sprintf(xPopup.strText, "진열할 공간이 부족합니다.");
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 43://	친구에게 주문배송 요청하기
		if(isState == TRUE)
		{
			//친구메뉴
			setStateFriendList();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 44://	친구 패션쇼 추천하기
		if(isState == TRUE)
		{
			setStateFashion();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 45://	친구 패션쇼 구경하기
		if(isState == TRUE)
		{
			setStateFashion();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 46://	패션쇼 %d점 달성하기
		if(isState == TRUE)
		{
			setStateFashion();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 48://	마네킹 레이어드 %d회 달성하기
		if(xFitting.totalShowWindow[xMap.nowFloor] > 0 && xSell.totalSell[xMap.nowFloor] > 0)
		{
			if(isState == TRUE)
			{
				xWorldMap.state = WORLDMAP_STATE_PLAY;
				xQuestInfo.isShowwindowInfo = TRUE;
			}
			else
				return TRUE;
		}
		break;
	case 69://	남자마네킹 레이어드 %d회 달성하기(%d/%d)
		if(xFitting.totalShowWindow[xMap.nowFloor] > 0 && xSell.totalSex[1][xMap.nowFloor] > 0)
		{
			if(isState == TRUE)
			{
				xWorldMap.state = WORLDMAP_STATE_PLAY;
				xQuestInfo.isShowwindowInfo = TRUE;
			}
			else
				return TRUE;
		}
		break;
	case 49://	친구 모델 추천하기
		if(isState == TRUE)
		{
			//친구메뉴
			setStateFriendList();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;	
	case 51://	여자 모델 %d명 피팅하기
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 52://	남자 모델 %d명 피팅하기
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 53:// 모델업그레이드 하기
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 54:// xx등급 이상 모델 캐스팅하기
		if(isState == TRUE)
		{
			setShop(SHOPTAB_TYPE_PREMIUM);
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 55://	모델 %d명 보유하기
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 57://	캔디 모으기
		if(isState == TRUE)
		{
			setShop(SHOPTAB_TYPE_PREMIUM);
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 58://	카운터 직원 헤어or메이크업 구매하기
	case 60://	응대 직원 헤어or메이크업 구매하기
		if(isState == TRUE)
		{
			int selectStaffSlot = DONT;
			for(int s=0;s<xStaff.totalStaffSlot;s++)
			{
				switch(xMap.nowFloor)
				{
				case 0:
					if(questType == 58 && xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_1F)
						selectStaffSlot = s;
					else if(questType == 60 && xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_1F)
						selectStaffSlot = s;
					break;
				case 1:
					if(questType == 58 && xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_2F)
						selectStaffSlot = s;
					else if(questType == 60 && xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_2F)
						selectStaffSlot = s;
					break;
				case 2:
					if(questType == 58 && xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_3F)
						selectStaffSlot = s;
					else if(questType == 60 && xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_3F)
						selectStaffSlot = s;
					break;
				}
				if(selectStaffSlot != DONT)
					break;
			}
			if(selectStaffSlot != DONT)
			{
				setStateStaff(selectStaffSlot);
			}

			xFitting.selectTabB = 0;
			setFittingTabChange();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 59://	카운터 직원 의상 구매하기
	case 61://	응대 직원 의상 구매하기
		if(isState == TRUE)
		{
			int selectStaffSlot = DONT;
			for(int s=0;s<xStaff.totalStaffSlot;s++)
			{
				switch(xMap.nowFloor)
				{
					case 0:
						if(questType == 59 && xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_1F)
							selectStaffSlot = s;
						else if(questType == 61 && xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_1F)
							selectStaffSlot = s;
						break;
					case 1:
						if(questType == 59 && xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_2F)
							selectStaffSlot = s;
						else if(questType == 61 && xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_2F)
							selectStaffSlot = s;
						break;
					case 2:
						if(questType == 59 && xStaff.staffSlot[s] == STAFF_SLOT_PAYMENTASSISTANT_3F)
							selectStaffSlot = s;
						else if(questType == 61 && xStaff.staffSlot[s] == STAFF_SLOT_SHOPASSISTANT1_3F)
							selectStaffSlot = s;
						break;
				}
				if(selectStaffSlot != DONT)
					break;
			}
			if(selectStaffSlot != DONT)
			{
				setStateStaff(selectStaffSlot);
			}
			xFitting.selectTabB = 2;
			setFittingTabChange();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 73://	%d개 제작하기
		if(isState == TRUE)
		{
			setStateProductionMenu();
		}
		else
			return TRUE;
		break;
	case 75://	여성용 의상 %d회 진열하기 진열(%d/%d)
	case 76://	남성용 의상 %d회 진열하기 진열(%d/%d)
		if(isState == TRUE)
		{
			setLinkSellTable(DONT,DONT);
			if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
			{
				setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
				sprintf(xPopup.strText, "진열할 공간이 부족합니다.");
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 78://	모델 활동으로 %d원 벌기(%d/%d)
	case 79://	모델 활동으로 경험치 %d획득하기(%d/%d)
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 82://	의상 동시에 x벌 진열하기0
		if(isState == TRUE)
		{
			setLinkSellTable(DONT,INTERIOR_TYPE_HANGER);
			if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
			{
				setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
				sprintf(xPopup.strText, "진열할 공간이 부족합니다.");
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 83://	잡화 동시에 x개 진열하기0
		if(isState == TRUE)
		{
			setLinkSellTable(DONT,INTERIOR_TYPE_ACCESSORY);
			if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
			{
				setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
				sprintf(xPopup.strText, "진열할 공간이 부족합니다.");
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 84://	xx 테마 인테리어 구매하기0 테마번호/999		0
		if(isState == TRUE)
		{
			setBuildCheck();
			interiorShopFreeLoad(TRUE);
			xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
			xInterior.selectTabB = 3;
			xInterior.selectTabS = 0;
			setInteriorTabChange();
			
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 85://	(특정의상카테고리)만 이용해 골드 x 벌기 카테고리/999	0
		if(isState == TRUE)
		{
			setLinkSellTable(DONT,DONT);
			if(xWorldMap.state == WORLDMAP_STATE_QUESTINFO)
			{
				setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
				sprintf(xPopup.strText, "진열할 공간이 부족합니다.");
			}
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 87://	캔디머신으로 x원 모으기
		if(isState == TRUE)
		{
			initMiniGame();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 89://	활동 중인 모델 의상 x벌 마네킹에게 입히기
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 90://	소셜의상 x벌 획득하기		0
		if(isState == TRUE)
		{
			//친구메뉴
			setStateFriendList();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 91://	모델이 주는 활동 보상 x번 획득하기		0
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 92://	마네킹 넣어입기로 레이어드 x회 코디하기
		if(xFitting.totalShowWindow[xMap.nowFloor] > 0 && xSell.totalSell[xMap.nowFloor] > 0)
		{
			if(isState == TRUE)
			{
				xWorldMap.state = WORLDMAP_STATE_PLAY;
				xQuestInfo.isShowwindowInfo = TRUE;
			}
			else
				return TRUE;
		}
		break;
	case 94://	샵에 모델 x명 배치하기
		if(isState == TRUE)
		{
			setStateModel();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 95://	남자 모델만 이용해 패션쇼 xx점 달성하기
		if(isState == TRUE)
		{
			setStateFashion();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	case 96://	여자 모델만 이용해 패션쇼 xx점 달성하기
		if(isState == TRUE)
		{
			setStateFashion();
			xWorldMap.isKeyReturn = TRUE;
		}
		else
			return TRUE;
		break;
	}
	return FALSE;
}




void drawFingerPoint(int x,int y,M_Boolean isBgImg)
{
	int px = x;
	int py = y;
	int anyNum;
	int alpha;
	int resize;
	
	if(isBgImg == TRUE)
	{
		for(int e=0;e<2;e++)
		{
			switch(((gameCnt)+(e*10))%21)
			{
				case 0:	 alpha=100;resize=68;break;
				case 1:	 alpha=95;resize=73;break;
				case 2:	 alpha=90;resize=78;break;
				case 3:	 alpha=85;resize=84;break;
				case 4:	 alpha=80;resize=89;break;
				case 5:	 alpha=75;resize=95;break;
				case 6:	 alpha=70;resize=100;break;
				case 7:	 alpha=65;resize=106;break;
				case 8:	 alpha=60;resize=111;break;
				case 9:	 alpha=55;resize=117;break;
				case 10: alpha=50;resize=122;break;
				case 11:	 alpha=45;resize=127;break;
				case 12:	 alpha=40;resize=133;break;
				case 13:	 alpha=35;resize=138;break;
				case 14:	 alpha=30;resize=144;break;
				case 15:	 alpha=25;resize=149;break;
				case 16:	 alpha=20;resize=155;break;
				case 17:	 alpha=15;resize=160;break;
				case 18:	 alpha=10;resize=166;break;
				case 19:	 alpha=5;resize=171;break;
				case 20:	 alpha=0;resize=177;break;
			}
			
			resize*=2.5;
			
			setAlpha(alpha*0.5f*ALPHA_MAX/100);
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = resize;
			drawPacker(imgTutoInfo1, px, py, 0, 0, imgW(imgTutoInfo1), imgH(imgTutoInfo1), VH);
			setAlpha(ALPHA_MAX);
			xGame.isReSizeDraw = FALSE;
		}
	}
	
	//손가락
	switch((gameCnt/3)%4)
	{
		case 0:
			anyNum=0;
			break;
		case 1:
		case 3:
			anyNum=1;
			break;
		case 2:
			anyNum=2;
			break;
	}
	
	drawPacker(imgTutoInfo2, px+30, py-27, 0, imgH(imgTutoInfo2)/3*anyNum, imgW(imgTutoInfo2), imgH(imgTutoInfo2)/3, VH);
	drawPacker(imgTutoInfo6, px+30+15, py-27-35, 0, 0, imgW(imgTutoInfo6), imgH(imgTutoInfo6), VH);
}






//피팅







void drawTutoInfo()
{
	int px = cx;
	int py = cy;
				
	if(xTutoInfo.totalNum <= 0)
		return;
	if(xWorldMap.state == WORLDMAP_STATE_NOTICE)
		return;
	
	if(xWorldMap.state == WORLDMAP_STATE_NOTICEPOPUP)
		return;
		
	if(xWorldMap.state == WORLDMAP_STATE_SEVERSELL)
		return;
	if(xFriendMap.isPlay == TRUE)
		return;
	
	for(int i=0;i<xTutoInfo.totalNum;i++)
	{
		int alpha;
		int resize;
		
		px = xTutoInfo.x[i];
		py = xTutoInfo.y[i];
				
		switch(xTutoInfo.type[i])
		{
		case TUTOINFO_TYPE_ARROW:
			drawFingerPoint(px,py,TRUE);
			break;
		case TUTOINFO_TYPE_ARROW_NOTBG:
			drawFingerPoint(px,py,FALSE);
			break;
		case TUTOINFO_TYPE_SHOW:
			for(int e=0;e<2;e++)
			{
				switch(((gameCnt)+(e*10))%21)
				{
					case 0:	 alpha=100;resize=68;break;
					case 1:	 alpha=95;resize=73;break;
					case 2:	 alpha=90;resize=78;break;
					case 3:	 alpha=85;resize=84;break;
					case 4:	 alpha=80;resize=89;break;
					case 5:	 alpha=75;resize=95;break;
					case 6:	 alpha=70;resize=100;break;
					case 7:	 alpha=65;resize=106;break;
					case 8:	 alpha=60;resize=111;break;
					case 9:	 alpha=55;resize=117;break;
					case 10: alpha=50;resize=122;break;
					case 11:	 alpha=45;resize=127;break;
					case 12:	 alpha=40;resize=133;break;
					case 13:	 alpha=35;resize=138;break;
					case 14:	 alpha=30;resize=144;break;
					case 15:	 alpha=25;resize=149;break;
					case 16:	 alpha=20;resize=155;break;
					case 17:	 alpha=15;resize=160;break;
					case 18:	 alpha=10;resize=166;break;
					case 19:	 alpha=5;resize=171;break;
					case 20:	 alpha=0;resize=177;break;
				}
				
				resize*=2.5f;
				
				setAlpha((alpha*0.5f)*ALPHA_MAX/100);
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = resize;
				drawPacker(imgTutoInfo0, px, py, 0, 0, imgW(imgTutoInfo0), imgH(imgTutoInfo0), VH);
				setAlpha(ALPHA_MAX);
				xGame.isReSizeDraw = FALSE;
			}
			break;
		case TUTOINFO_TYPE_TEXT:
			setAlpha(200);
			drawPacker(imgQuestBar, px, py+3, 0, 0, imgW(imgQuestBar), imgH(imgQuestBar), VH);
			setAlpha(ALPHA_MAX);
			drawNpcIcon(px-230, py,0);
			gDrawStringBold(px, py,xTutoInfo.strText[i] , VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 44, 26, 27);
			break;
		}
	}
}


void prcTuto()
{
	xTutoInfo.totalNum = 0;
	
	
	
	
	
		
	
	if(xWorldMap.isTuto == FALSE)
	{
		for(int tu=0;tu<TUTOLIMITMAX;tu++)
			xTutoLimit.isLock[tu] = FALSE;
	}
		

	if(xWorldMap.isTuto == TRUE && xWorldMap.isQuestResult == FALSE)
	{
		if(xWorldMap.isFriendMap == TRUE)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_27_HELP_FLOORMOVE0:
			case TUTO_27_HELP_FLOORMOVE1:
			case TUTO_27_HELP_HELP:
			case TUTO_27_HELP_SOCIALINFO:
			case TUTO_27_RESULT:
				break;
			default:
				xWorldMap.isExternal = FALSE;
				break;
			}
		}
		else
			xWorldMap.isExternal = FALSE;
		
		switch(xQuestTuto.state)
		{
		case QUEST_TUTO_WAIT:
			if(xWorldMap.state != WORLDMAP_STATE_NOTICE && xWorldMap.state != WORLDMAP_STATE_NOTICEPOPUP && xWorldMap.state != WORLDMAP_STATE_SEVERSELL)
			{
				xQuestTuto.state = QUEST_TUTO_DIALOG;
				sprintf(strTempS,"tuto%d.txt",xQuestTuto.nowNum);
				int tempState = playState;
				setDialog(strTempS, 0, DIALOG_WIDTH, 2);
				playState = tempState;
			}
			break;
		case QUEST_TUTO_DIALOG:
			//초기화
			if(playState == PLAY_PLAY || playState == PLAY_MSG)
			{
				
				xQuestTuto.anyCnt = 0;
				xQuestTuto.isTutoClean = FALSE;
				
				//대사전
				switch(xQuestTuto.nowNum)
				{
				case TUTO_0_PAYMENT1F:
					break;
				}
														
				if(xDialog.next != DONT || xDialog.pageC < xDialog.pageT)
					break;
								
				for(int tu=0;tu<TUTOLIMITMAX;tu++)
					xTutoLimit.isLock[tu] = FALSE;
				
				//대사후
				switch(xQuestTuto.nowNum)
				{
				case TUTO_0_PAYMENT1F:
					stateStaffMake(STAFF_SLOT_PAYMENTASSISTANT_1F,STAFFMAKE_INTYPE_INIT);
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_0_PAYMENT1F_SEXINFO:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_0_PAYMENT1F_NAMEINFO:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_0_PAYMENT1F_MAKETOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					break;
				case TUTO_0_PAYMENT1F_NPCINFO:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					///저장하기///
					break;
				case TUTO_0_SHOPASSISTANT1F:
					stateStaffMake(STAFF_SLOT_SHOPASSISTANT1_1F,STAFFMAKE_INTYPE_INIT);
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_0_SHOPASSISTANT1F_MAKETOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					break;
				case TUTO_0_SHOPASSISTANT1F_NPCINFO:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_0_RESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					//투토리얼 보상//
					break;
				case TUTO_1_PRODUCTIONTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_COUNTER] = FALSE;
					break;
				case TUTO_1_PRODUCTIONOPENFASHIONSHOW:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_1_PRODUCTIONTOPTABTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY1] = FALSE;
					break;
				case TUTO_1_PRODUCTIONTOPFASHIONTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					break;
				case TUTO_1_PRODUCTIONTOPFASHIONWAITSHOW:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_1_PRODUCTIONMAKE:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					break;
				case TUTO_1_PRODUCTIONINGSHOW:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_1_PRODUCTIONFASTCASH0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE1] = FALSE;
					break;
				case TUTO_1_PRODUCTIONFASTCASH1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE1] = FALSE;
					break;
				case TUTO_1_PRODUCTIONOK:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					break;
				case TUTO_1_PRODUCTIONEXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CLOSE] = FALSE;
					break;
				case TUTO_1_SELLTABLETOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP2] = FALSE;
					break;
				case TUTO_1_SELLTABLESTART0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DP);
					break;
				case TUTO_1_SELLTABLESTART1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DP);
					break;
				case TUTO_1_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_CLOSE] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_2_PRODUCTIONTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_COUNTER] = FALSE;
					break;
				case TUTO_2_PRODUCTIONTOPFASHIONTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY2] = FALSE;
					break;
				case TUTO_2_PRODUCTIONMAKE:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					break;
				case TUTO_2_PRODUCTIONFASTCASH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE1] = FALSE;
					break;
				case TUTO_2_PRODUCTIONOK:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					break;
				case TUTO_2_PRODUCTIONEXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CLOSE] = FALSE;
					break;
				case TUTO_2_SELLTABLETOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP2] = FALSE;
					break;
				case TUTO_2_SELLTABLESTART0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DP);
					break;
				case TUTO_2_SELLTABLESTART1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DP);
					break;
				case TUTO_2_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_CLOSE] = FALSE;
					//투토리얼 보상//
					break;						
						
						
				
				case TUTO_6_INTERIOR_MENUTOUCH0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE] = FALSE;
					break;
				case TUTO_6_INTERIOR_TABTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] = FALSE;
					break;
				case TUTO_6_INTERIOR_ITEMTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] = FALSE;
					break;
				case TUTO_6_INTERIOR_MOVE:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE] = FALSE;
					break;
				case TUTO_6_INTERIOR_ROT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE] = FALSE;
					break;
				case TUTO_6_INTERIOR_CLR:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_6_INTERIOR_OK:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_OK] = FALSE;
					//저장
					break;
				case TUTO_6_INTERIOR_EXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT] = FALSE;
					//저장
					break;
				case TUTO_6_INTERIOR_MENUTOUCH1:
					xSwitchWorldMapUi.state = SWITCH_STATE_OFF;
					xSwitchWorldMapUi.anyCnt = 0;
					xSwitchWorldMapUi_Up.state = SWITCH_STATE_OFF;
					xSwitchWorldMapUi_Up.anyCnt = 0;
						
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDIT] = FALSE;
					break;
				case TUTO_6_INTERIOR_EDITMENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDIT] = FALSE;
					break;
				case TUTO_6_INTERIOR_EDITITEM:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SELECT] = FALSE;
					break;
				case TUTO_6_INTERIOR_INVEN:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_6_INTERIOR_OK2:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_OK] = FALSE;
					break;
				case TUTO_6_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_7_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDS);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS_PM] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_8_INTERIOR_TABTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE] = FALSE;
						
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] = FALSE;
					break;
				case TUTO_8_INTERIOR_OK:
					xQuestTuto.state = QUEST_TUTO_KEY;
						
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] = FALSE;
						
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_OK] = FALSE;
					//저장
					break;
				case TUTO_8_INTERIOR_EXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT] = FALSE;
					//저장
					break;
				case TUTO_8_INTERIOR_MAKENPC:
					if(xWorldMap.doorCode >= 0)
					{
						int worldmapNpcNum = makeWorldMapNpc(xWorldMap.doorMakeX-2,xWorldMap.doorMakeY+3,ranDom(0,7),xMap.speedTable[3],MOVETYPE_YMINUS);
						xWorldMapNpc[worldmapNpcNum].isInShop = TRUE;
					}
					else
					{
						int worldmapNpcNum = makeWorldMapNpc(xWorldMap.doorMakeX-3,xWorldMap.doorMakeY-2,ranDom(0,7),xMap.speedTable[3],MOVETYPE_XPLUS);
						xWorldMapNpc[worldmapNpcNum].isInShop = TRUE;
					}
												
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					break;
				case TUTO_8_INTERIOR_NPCTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					break;
				case TUTO_8_RESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					//투토리얼 보상//
					break;
				case TUTO_9_INTERIOR_TABTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE] = FALSE;
					break;
				case TUTO_9_INTERIOR_OK:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] = FALSE;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_OK] = FALSE;
					//저장
					break;
				case TUTO_9_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_10_INTERIOR_TABTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE] = FALSE;
						
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY2] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] = FALSE;
					break;
				case TUTO_10_INTERIOR_EXTENSION:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY2] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0] = FALSE;
					break;
				case TUTO_10_RESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					//투토리얼 보상//
					break;
				case TUTO_11_SHOWWINDOWSELECT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MANNEQUIN] = FALSE;
					break;
				case TUTO_11_SHOWWINDOWLAYEREDSHOW:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_11_SHOWWINDOWLAYERED5:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY2] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY3] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY4] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY5] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY6] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_FITTING] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LEFT] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RIGHT] = FALSE;
					break;
				case TUTO_11_SHOWWINDOWRESET:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RESET] = FALSE;
					break;
				case TUTO_11_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_EXIT] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_12_SHOWWINDOWSELECT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MANNEQUIN] = FALSE;
					break;
				case TUTO_12_SHOWWINDOWFITTING:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY2] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_FITTING] = FALSE;
					break;
				case TUTO_12_SHOWWINDOWIN0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKIN] = FALSE;
					break;
				case TUTO_12_SHOWWINDOWIN1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKIN] = FALSE;
					break;
				case TUTO_12_SHOWWINDOWOUT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKOUT] = FALSE;
					break;
				case TUTO_12_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_EXIT] = FALSE;
					//투토리얼 보상//
					break;						
				case TUTO_13_STAFF_MENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STAFF] = FALSE;
					break;
				case TUTO_13_STAFF_BUY:
					xQuestTuto.state = QUEST_TUTO_KEY;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EDIT] = TRUE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EXIT] = TRUE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_SAVE] = TRUE;
					//저장
					break;
				case TUTO_13_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STAFF);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EXIT] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_14_STAFF_MENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STAFF] = FALSE;
					break;
				case TUTO_14_STAFF_BUY:
					xQuestTuto.state = QUEST_TUTO_KEY;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EDIT] = TRUE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EXIT] = TRUE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_SAVE] = TRUE;
					//저장
					break;
				case TUTO_14_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STAFF);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EXIT] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_15_MINIGAME_MENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_CANDY] = FALSE;
					break;
				case TUTO_15_MINIGAME_START:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MINIGAME);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MINIGAME_PLAY] = FALSE;
					if(xSaveTemp.tired.oriData < xMiniGame.userTired.oriData)
						initSecurity(&xSaveTemp.tired, xMiniGame.userTired.oriData);
					break;
				case TUTO_15_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MINIGAME);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MINIGAME_EXIT] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_16_FAMESHOW:
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_16_RESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					//투토리얼 보상//
					break;
				case TUTO_17_MAILSELECT:
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xMap.pointX = 480;
					xMap.pointY = -791;
					xWorldMap.fscale = 0.77f;
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_POSTBOX] = FALSE;
					break;
				case TUTO_17_MAIL_FRIEND:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDS);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_LIST] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS_PM] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_GUESTBOOK] = FALSE;
					initTutoLimit(TUTOLIMIT_MAIL);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_EXIT] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_TEXTBOXFRIEND] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_SENDFRIEND] = FALSE;
					break;
				case TUTO_17_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MAIL);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_EXITFRIEND] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HOME] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_18_FRIENDMODEL_MENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDS);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS_PM] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_MODEL] = FALSE;
					break;
				case TUTO_18_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HOME] = FALSE;
					//투토리얼 보상//
					break;
				case TUTO_19_INSHOPPERSELECT:
					xInShopPer.isSellTime = FALSE;
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PREFERENCE] = FALSE;
					break;
				case TUTO_19_RESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					//투토리얼 보상//
					break;
												
				case TUTO_20_ORDER_MENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DELIVERY] = FALSE;
					break;
				case TUTO_20_ORDER_INFOSHOW:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_20_ORDER_ORDERSELECT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DELIVERY);
					break;
				case TUTO_20_ORDER_CARSELECT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DELIVERY);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SLOT1] = FALSE;
					break;
				case TUTO_20_ORDER_CARINFOSELECT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DELIVERY);
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					break;
				case TUTO_20_ORDER_CARINFOEXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_DELIVERY);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_OK] = FALSE;
					break;
				case TUTO_20_ORDER_OK:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					initTutoLimit(TUTOLIMIT_DELIVERY);
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					break;
				case TUTO_20_RESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					//투토리얼 보상//
					break;
				case TUTO_21_TRENDNEW:
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xQuestTuto.state = QUEST_TUTO_KEY;
					setTrendTemp(0,0);
					playSnd(SND_TREND_POPUP);
					trendFreeLoad(TRUE);
					xWorldMap.isTrend = TRUE;
					xWorldMap.trendInType = 2;	//0오전1오후2그외
					xTrend.state = TREND_STATE_NEW;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_TREND] = FALSE;
					break;
				case TUTO_21_TRENDOK:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_TREND] = FALSE;
					break;
				case TUTO_21_TRENDICON:
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_TREND] = FALSE;
					break;
				case TUTO_21_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_TREND);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_TREND_EXIT] = FALSE;
					break;
				case TUTO_22_MODELCASTING:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MODELMENU] = FALSE;
					initTutoLimit(TUTOLIMIT_MODEL);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_CASTING] = FALSE;
					break;
				case TUTO_22_MODELCASTINGEXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MODEL);
					break;
				case TUTO_22_MODELMAINSLOTSELECT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MODEL);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_EMPTY] = FALSE;
					break;
				case TUTO_22_MODELSELECTMODEL:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MODEL);
					break;
				case TUTO_22_MODELMODELINFO:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MODEL);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFO] = FALSE;
					break;
				case TUTO_22_MODELGIFTINFOSHOW:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_22_MODELFITTINGBTN:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MODEL);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOBTN0] = FALSE;
					break;
				case TUTO_22_MODELFITTINGOK:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FITTING);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY2] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_FITTING] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_SAVE] = FALSE;
					break;
				case TUTO_22_MODELEXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MODEL);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOEXIT] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_EXIT] = FALSE;
					break;
				case TUTO_22_MODELMAPMODELSTART:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MODEL] = FALSE;
					break;
				case TUTO_22_MODELMAPMODELINFO:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MODEL] = FALSE;
					break;
				case TUTO_22_MODELMAPMODELINFOEXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_MODEL);
					break;
				case TUTO_22_RESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 0;
					break;
				case TUTO_23_FASHIONSHOWSELECT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					xMap.pointX = 480;
					xMap.pointY = 96;
					xWorldMap.fscale = 0.77f;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FASHIONSHOW] = FALSE;
					initTutoLimit(TUTOLIMIT_FASHIONSHOW);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_READBTN] = FALSE;
					break;
				case TUTO_23_FASHIONSHOWDRESSCODE:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FASHIONSHOW);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SELECTMODEL] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_START] = FALSE;
					break;
				case TUTO_23_FASHIONSHOWSTART:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FASHIONSHOW);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SELECTMODEL] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_START] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_FITTING] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LINK] = TRUE;
                    xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_READBTN] = FALSE;
												
					if(xSaveTemp.tired.oriData < xFashionShow.userTired.oriData)
						initSecurity(&xSaveTemp.tired, xFashionShow.userTired.oriData);
					break;
				case TUTO_23_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FASHIONSHOW);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_EXIT] = FALSE;
					break;
				case TUTO_24_UI_PHOTO:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_NICKNAME:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_LV:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_FAME0:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_FAME1:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_CANDY:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_LOOK:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_GOLD:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_QUEST0:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_QUEST1:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_ETC:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_MENU:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_UI_FRIEND:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_24_RESULT:
					xWorldMap.isExternal = FALSE;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_25_FASHIONOPEN_PRODUCTIONTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_COUNTER] = FALSE;
					break;
				case TUTO_25_FASHIONOPEN_TAB:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY1] = FALSE;
					break;
				case TUTO_25_FASHIONOPEN_ITEM:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_LICENCE] = FALSE;
					break;
				case TUTO_25_FASHIONOPEN_BUY:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_LICENCE] = FALSE;
					break;
				case TUTO_25_FASHIONOPEN_BUYTAB:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY7] = FALSE;
					break;
				case TUTO_25_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_PRODUCE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CLOSE] = FALSE;
					break;
				case TUTO_26_INTERIOR_MENUTOUCH0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE] = FALSE;
					break;
				case TUTO_26_INTERIOR_TABTOUCH0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU3] = FALSE;
					break;
				case TUTO_26_INTERIOR_ITEMTOUCH0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					break;
				case TUTO_26_INTERIOR_ALL0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_ALL] = FALSE;
					break;
				case TUTO_26_INTERIOR_OK0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_ALL] = FALSE;
					//저장
					break;
				case TUTO_26_INTERIOR_MENUTOUCH1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SHOP] = FALSE;
					break;
				case TUTO_26_INTERIOR_TABTOUCH1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU4] = FALSE;
					break;
				case TUTO_26_INTERIOR_ITEMTOUCH1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					break;
				case TUTO_26_INTERIOR_ALL1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_ALL] = FALSE;
					break;
				case TUTO_26_INTERIOR_OK1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_ALL] = FALSE;
					//저장
					break;
				case TUTO_26_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT] = FALSE;
					break;
				case TUTO_27_HELP_FLOORMOVE0:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR1] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDS);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS_PM] = FALSE;
					break;
				case TUTO_27_HELP_FLOORMOVE1:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR2] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_EXTERNAL] = FALSE;
					break;
				case TUTO_27_HELP_HELP:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HELP] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR1] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR2] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_EXTERNAL] = FALSE;
					break;
				case TUTO_27_HELP_SOCIALINFO:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_27_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FRIENDSHOP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HOME] = FALSE;
					break;
				case TUTO_28_ADDFRIEND_MENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS] = FALSE;
					initTutoLimit(TUTOLIMIT_FRIENDS);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_ADD] = FALSE;
					break;
				case TUTO_28_ADDFRIEND_ADDTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_ADDFRIENDS);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_ADD] = FALSE;
					break;
				case TUTO_28_ADDFRIEND_ADDINFO:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_28_ADDFRIEND_ADDEXIT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_ADDFRIENDS);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_CLOSE] = FALSE;
					break;
				case TUTO_28_ADDFRIEND_ADDRESULT:
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_28_RESULT:
					xWorldMap.state = WORLDMAP_STATE_PLAY;
					xQuestTuto.state = QUEST_TUTO_SHOW;
					xQuestTuto.anyCnt = 30;
					break;
				case TUTO_29_FASHIONSHOWRANK_MENUTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					xMap.pointX = 480;
					xMap.pointY = 96;
					xWorldMap.fscale = 0.77f;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FASHIONSHOW] = FALSE;
					break;
				case TUTO_29_FASHIONSHOWRANK_REPLAY:
					xQuestTuto.isTemp = FALSE;
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FASHIONSHOW);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_RANK0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFO] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOREPLAY] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SKIP] = FALSE;
					break;
				case TUTO_29_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_FASHIONSHOW);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOEXIT] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_EXIT] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SKIP] = FALSE;
					break;
				case TUTO_30_INTERIOR_TABTOUCH:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_WORLDMAP);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDIT] = FALSE;
												
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SHOP] = TRUE;
					
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU3] = FALSE;
					break;
				case TUTO_30_INTERIOR_OK:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_STORE);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY0] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU3] = FALSE;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE] = FALSE;
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_OK] = FALSE;
					break;
				case TUTO_30_RESULT:
					xQuestTuto.state = QUEST_TUTO_KEY;
					initTutoLimit(TUTOLIMIT_EDIT);
					xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT] = FALSE;
					break;
				}
			}
			break;
		case QUEST_TUTO_RESULT:
			switch(xQuestTuto.nowNum-1)
			{
			case TUTO_0_RESULT:
			case TUTO_1_RESULT:
			case TUTO_2_RESULT:
			case TUTO_6_RESULT:
			case TUTO_7_RESULT:
			case TUTO_8_RESULT:
			case TUTO_9_RESULT:
			case TUTO_10_RESULT:
			case TUTO_11_RESULT:
			case TUTO_12_RESULT:
			case TUTO_13_RESULT:
			case TUTO_14_RESULT:
			case TUTO_15_RESULT:
			case TUTO_16_RESULT:
			case TUTO_17_RESULT:
			case TUTO_18_RESULT:
			case TUTO_19_RESULT:
			case TUTO_20_RESULT:
			case TUTO_21_RESULT:
			case TUTO_22_RESULT:
			case TUTO_23_RESULT:
			case TUTO_24_RESULT:
			case TUTO_25_RESULT:
			case TUTO_26_RESULT:
			case TUTO_27_RESULT:
			case TUTO_28_RESULT:
			case TUTO_29_RESULT:
			case TUTO_30_RESULT:
				///////////////////////////////튜토리얼 완료///////////////////////////
				xWorldMap.isTuto = FALSE;
				xWorldMap.isQuestResult = TRUE;
				playSnd(SND_QUEST_RESULT);
				xQuestInfo.selectSlot = 0;
				break;
			case TUTO_6_INTERIOR_OK:
			case TUTO_6_INTERIOR_EXIT:
			case TUTO_8_INTERIOR_OK:
			case TUTO_8_INTERIOR_EXIT:
			case TUTO_9_INTERIOR_OK:
			case TUTO_13_STAFF_BUY:
			case TUTO_14_STAFF_BUY:
			case TUTO_26_INTERIOR_OK0:
			case TUTO_26_INTERIOR_OK1:
			case TUTO_20_ORDER_CARSELECT:
				///저장하기///
				///////////////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.action[xEventQueueNet.totalNum]=0;		//0튜토리얼,1메인,2일반
				xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, TRUE);
				///////////////////////////////////////////////////////////////////////////////////////
				xQuestTuto.state = QUEST_TUTO_WAIT;
				break;
			default:
				xQuestTuto.state = QUEST_TUTO_WAIT;
				break;
			}
			if(xWorldMap.isQuestResult == TRUE)
				playSnd(SND_QUEST_RESULT);				
			break;
		default:
			switch(xQuestTuto.state)
			{
			case QUEST_TUTO_SHOW:
				if(--xQuestTuto.anyCnt <= 0 && xQuestTuto.isTutoClean == TRUE)
				{
					xTutoInfo.totalNum = 0;
					xQuestTuto.nowNum++;
					xQuestTuto.state = QUEST_TUTO_RESULT;
				}
				else
					xQuestTuto.isTutoClean = FALSE;
					
				break;
			case QUEST_TUTO_KEY:
				if(xQuestTuto.isTutoClean == TRUE)
				{
					xTutoInfo.totalNum = 0;
					xQuestTuto.nowNum++;
					xQuestTuto.state = QUEST_TUTO_RESULT;
				}
				break;
			}
			break;			
		}
	}
}


void drawStaffMake()
{
	int px = cx;
	int py = cy;
	
	
	drawBgFillRect();
		

	drawImage(&imgStaffMakeBg, px, py, 0, 0, imgStaffMakeBg.w, imgStaffMakeBg.h, VH);
	
	setFontSize(14);
	gDrawStringBold(px+25, py-121, "성별 선택", VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);		//황토
	gDrawStringBold(px+25, py+2, "이름 입력", VL, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);		//황토
	setFontSize(11);
	
	subTemp[XPOS] = px-125;
	subTemp[YPOS] = py;
	
	
	
	
	
	
	
	xGame.fgameScale = 0.9f;
	xGame.fgameScaleCx = subTemp[XPOS];
	xGame.fgameScaleCy = lcdH-subTemp[YPOS];
	drawFittingBody(subTemp[XPOS], subTemp[YPOS],&xStaffMake.xF[xStaffMake.sex],&xStaffMake.xFace[xStaffMake.sex],TRUE,xStaffMake.sex);
	xGame.fgameScaleCx = cx;
	xGame.fgameScaleCy = cy;
	xGame.fgameScale = 1.0f;
	
	
	if(xQuestTuto.state == QUEST_TUTO_SHOW)
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_0_PAYMENT1F:
		case TUTO_0_SHOPASSISTANT1F:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
			break;
		}
	}
		
	subTemp[XPOS] = px+50;
	subTemp[YPOS] = py-60;
	drawImage(&imgStaffMake[0], subTemp[XPOS], subTemp[YPOS], 0, imgStaffMake[0].h/2*(xStaffMake.sex == 0?0:1), imgStaffMake[0].w/2, imgStaffMake[0].h/2, VH);
	drawImage(&imgStaffMake[0], subTemp[XPOS]+118, subTemp[YPOS], imgStaffMake[0].w/2, imgStaffMake[0].h/2*(xStaffMake.sex == 1?0:1), imgStaffMake[0].w/2, imgStaffMake[0].h/2, VH);
		
	xStaffMake.xTouchSex[0].wPos = imgStaffMake[0].w/2;
	xStaffMake.xTouchSex[0].hPos = imgStaffMake[0].h/2;
	xStaffMake.xTouchSex[0].xPos = subTemp[XPOS]-xStaffMake.xTouchSex[0].wPos/2;
	xStaffMake.xTouchSex[0].yPos = subTemp[YPOS]-xStaffMake.xTouchSex[0].hPos/2;
	
	xStaffMake.xTouchSex[1].wPos = imgStaffMake[0].w/2;
	xStaffMake.xTouchSex[1].hPos = imgStaffMake[0].h/2;
	xStaffMake.xTouchSex[1].xPos = subTemp[XPOS]+118-xStaffMake.xTouchSex[1].wPos/2;
	xStaffMake.xTouchSex[1].yPos = subTemp[YPOS]-xStaffMake.xTouchSex[1].hPos/2;
	
	
	if(xQuestTuto.state == QUEST_TUTO_SHOW)
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_0_PAYMENT1F_SEXINFO:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+59;
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
			break;
		}
	}
	
		
	subTemp[XPOS] = px+107;
	subTemp[YPOS] = py+56;
	gSetColor(255, 255, 255);
	
	gDrawString(subTemp[XPOS], subTemp[YPOS], xStaffMake.strName, VH);
		
	xStaffMake.xTouchName.wPos = 200;
	xStaffMake.xTouchName.hPos = 70;
	xStaffMake.xTouchName.xPos = subTemp[XPOS]-xStaffMake.xTouchName.wPos/2;
	xStaffMake.xTouchName.yPos = subTemp[YPOS]-xStaffMake.xTouchName.hPos/2;
	
	
	if(xQuestTuto.state == QUEST_TUTO_SHOW)
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_0_PAYMENT1F_NAMEINFO:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
			break;
		}
	}
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		if(playState == PLAY_PLAY)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_0_PAYMENT1F_MAKETOUCH:
				if(strcmp("1층계산", xStaffMake.strName) == 0 || strlen(xStaffMake.strName) < 3 || strlen(xStaffMake.strName) > 15)
				{
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				}
				break;
			case TUTO_0_SHOPASSISTANT1F_MAKETOUCH:
				if(strcmp("1층점원", xStaffMake.strName) == 0 || strlen(xStaffMake.strName) < 3 || strlen(xStaffMake.strName) > 15)
				{
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				}
				break;
			}
		}
	}
	
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xStaffMake.xTouchName.xPos, xStaffMake.xTouchName.yPos, xStaffMake.xTouchName.wPos, xStaffMake.xTouchName.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
	/*
	subTemp[XPOS] = px+105;
	subTemp[YPOS] = py+43+70;
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "직원의 이름과 성별은", VH, 88, 255, 220, 32, 20, 20);		//녹색
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+28, "설정 후 변경 불가합니다.", VH, 88, 255, 220, 32, 20, 20);		//녹색
	 */
	
	subTemp[XPOS] = px;
	subTemp[YPOS] = py+202;
	drawBtn(subTemp[XPOS], subTemp[YPOS], BTN_OK_CONFIRM);
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		if(playState == PLAY_PLAY)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_0_PAYMENT1F_MAKETOUCH:
				if(strcmp("1층계산", xStaffMake.strName) != 0 && strlen(xStaffMake.strName) >= 3 && strlen(xStaffMake.strName) <= 15)
				{
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				}
				break;
			case TUTO_0_SHOPASSISTANT1F_MAKETOUCH:
				if(strcmp("1층점원", xStaffMake.strName) != 0 && strlen(xStaffMake.strName) >= 3 && strlen(xStaffMake.strName) <= 15)
				{
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				}
				break;
			}
		}
	}
}

void drawQuestResult()
{
	int px = cx;
	int py = cy;
	
	
	int totalGift=0;
	int point = 0;
	int exp = 0;
	int look = 0;
	int fame = 0;
	int speakingNpc = 0;
	M_Boolean isGift = FALSE;
	
	int type[10];
	int value[10];
	int totalNum = 0;
		
	for(int i=0;i<3;i++)
	{
		switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
		{
		case QUEST_TYPE_MAIN:
			sprintf(xPopup.strText,"<%s>",xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strTitle);
			sprintf(xPopup.strTitle, "%s",xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strEnd);
			speakingNpc = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].npcCode;
			switch(xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i])
			{
			case DONT:
				break;
			case 0:	//골드
				point+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 1:	//exp
				exp+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 2:	//look
				look+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 7:	//fame
				fame+=xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			default:
				isGift = TRUE;
				break;
			}
			type[totalNum] = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i];
			value[totalNum] = xQuestDataMain[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
			totalNum++;
			break;
		case QUEST_TYPE_NORMAL:
			sprintf(xPopup.strText,"<%s>",xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strTitle);
			sprintf(xPopup.strTitle, "%s",xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].strEnd);
			speakingNpc = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].npcCode;
			switch(xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i])
			{
			case DONT:
				break;
			case 0:	//골드
				point+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 1:	//exp
				exp+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 2:	//look
				look+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			case 7:	//fame
				fame+=xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
				break;
			default:
				isGift = TRUE;
				break;
			}
			type[totalNum] = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftType[i];
			value[totalNum] = xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].giftMax[i].oriData;
			totalNum++;
			break;
		}
	}
	
	
	for(int i=0;i<totalNum;i++)
	{
		subTemp[XPOS] = px-110;
		subTemp[YPOS] = py+40;
		subTemp[WPOS] = 0;
		
		switch(type[i])
		{
			case 0:	//골드
				drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-(i*50), subTemp[YPOS], ICON_TYPE_GOLD);
				gSetColor(82, 49, 38);
				setFontSize(14);
				sprintf(strTempS, "%d",value[i]);
				gDrawString(subTemp[XPOS]+subTemp[WPOS]-(i*50), subTemp[YPOS], strTempS, VL);
				setFontSize(11);
				subTemp[WPOS]+=100;
				break;
			case 1:	//exp
				drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-(i*50), subTemp[YPOS], ICON_TYPE_EXP);
				gSetColor(82, 49, 38);
				setFontSize(14);
				sprintf(strTempS, "%d",value[i]);
				gDrawString(subTemp[XPOS]+subTemp[WPOS]-(i*50), subTemp[YPOS], strTempS, VL);
				setFontSize(11);
				subTemp[WPOS]+=100;
				break;
			case 2:	//look
				drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-(i*50), subTemp[YPOS], ICON_TYPE_LOOK);
				gSetColor(82, 49, 38);
				setFontSize(14);
				sprintf(strTempS, "%d",value[i]);
				gDrawString(subTemp[XPOS]+subTemp[WPOS]-(i*50), subTemp[YPOS], strTempS, VL);
				setFontSize(11);
				subTemp[WPOS]+=100;
				break;
			case 7:	//fame
				drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-(i*50), subTemp[YPOS], ICON_TYPE_FAME);
				gSetColor(82, 49, 38);
				setFontSize(14);
				sprintf(strTempS, "%d",value[i]);
				gDrawString(subTemp[XPOS]+subTemp[WPOS]-(i*50), subTemp[YPOS], strTempS, VL);
				setFontSize(11);
				subTemp[WPOS]+=100;
				break;
		}
	}
	
/*
	if(point > 0)
		totalGift++;
	if(exp > 0)
		totalGift++;
	if(look > 0)
		totalGift++;
	if(fame > 0)
		totalGift++;
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	
	subTemp[XPOS] = px-110;
	subTemp[YPOS] = py+40;
	subTemp[WPOS] = 0;
	if(exp > 0)
	{
		drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], ICON_TYPE_EXP);
		gSetColor(82, 49, 38);
		setFontSize(14);
		sprintf(strTempS, "%d",exp);
		gDrawString(subTemp[XPOS]+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], strTempS, VL);
		setFontSize(11);
		subTemp[WPOS]+=100;
	}
	if(look > 0)
	{
		drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], ICON_TYPE_LOOK);
		gSetColor(82, 49, 38);
		setFontSize(14);
		sprintf(strTempS, "%d",look);
		gDrawString(subTemp[XPOS]+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], strTempS, VL);
		setFontSize(11);
		subTemp[WPOS]+=100;
	}
	
	if(point > 0)
	{
		drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], ICON_TYPE_GOLD);
		gSetColor(82, 49, 38);
		setFontSize(14);
		sprintf(strTempS, "%d",point);
		gDrawString(subTemp[XPOS]+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], strTempS, VL);
		setFontSize(11);
		subTemp[WPOS]+=100;
	}
	
	if(fame > 0)
	{
		drawIcon(subTemp[XPOS]-20+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], ICON_TYPE_FAME);
		gSetColor(82, 49, 38);
		setFontSize(14);
		sprintf(strTempS, "%d",fame);
		gDrawString(subTemp[XPOS]+subTemp[WPOS]-((totalGift-1)*50), subTemp[YPOS], strTempS, VL);
		setFontSize(11);
	}
*/
	/*
	if(isGift == TRUE)
		drawImage(&imgQuestGiftIcon, subTemp[XPOS]+90, subTemp[YPOS]-6, 0, 0, imgQuestGiftIcon.w, imgQuestGiftIcon.h, VH);
	xQuestInfo.xTouchGiftIcon.wPos = imgQuestGiftIcon.w;
	xQuestInfo.xTouchGiftIcon.hPos = imgQuestGiftIcon.h;
	xQuestInfo.xTouchGiftIcon.xPos = subTemp[XPOS]+90 - xQuestInfo.xTouchGiftIcon.wPos/2;
	xQuestInfo.xTouchGiftIcon.yPos = subTemp[YPOS]-6 - xQuestInfo.xTouchGiftIcon.hPos/2;
	*/
		
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px-110,py-36,xPopup.strText,VH);
	gDrawString(px-110,py-36+25,"퀘스트 완료 보상",VH);
	setFontSize(11);
	
	if(speakingNpc != DONT)
	{
		if(xPopup.speakingNpcNum != speakingNpc)
		{
			xPopup.speakingNpcNum = speakingNpc;
			
			freeImg(&imgPopupNpc[0]);
			freeImg(&imgPopupNpc[1]);
			freeImg(&imgPopupNpc[2]);
			freeImg(&imgPopupNpc[3]);
			
			sprintf(strTempS, "popupnpc%d.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[0]);
			sprintf(strTempS, "popupnpc%da.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[1]);
			sprintf(strTempS, "popupnpc%db.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[2]);
			sprintf(strTempS, "popupnpc%dc.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[3]);
		}
	}
	
	if(xPopup.speakingNpcNum != DONT)
	{
		drawPacker(imgPopup2, px-16,py-150, 0, 0, imgW(imgPopup2), imgH(imgPopup2), VH);
		gSetColor(138, 117, 111);
		setFontSize(14);
		setLabelWidth(180);
		gDrawString(px-16,py-176,xPopup.strTitle,VH);
		setLabelWidth(0);
		setFontSize(11);
						
		drawImage(&imgPopupNpc[0], px+180,py+200, 0, 0, imgPopupNpc[0].w, imgPopupNpc[0].h, BH);
		drawImage(&imgPopupNpc[1], px+180,py+200-imgPopupNpc[0].h, 0, 0, imgPopupNpc[1].w, imgPopupNpc[1].h, BH);
	}
	drawBtn(px-105,py+156,BTN_OK_CONFIRM);
}


//void drawModelList()
//{
//	int px = cx;
//	int py = cy-30;
//	xModel.totalListNum = 0;
//	switch(xModel.state)
//	{
//	case MODELCOLLECT_STATE_SELECTMODEL:
//	case MODELCOLLECT_STATE_SELECTMODELCASTING:
//			
//		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//		{
//			switch(xQuestTuto.nowNum)
//			{
//			case TUTO_22_MODELMAINSLOTSELECT:
//				xQuestTuto.isTutoClean = TRUE;
//				break;
//			}
//		}
//			
//		for(int i=0;i<xModel.totalInventoryModel;i++)
//		{
//			M_Boolean isCheck = FALSE;
//			for(int k=0;k<MODELMAINSLOTMAX;k++)
//			{
//				switch(xModelMainSlot[k].state)
//				{
//					case MODELMAINSLOT_STATE_WAIT:
//					case MODELMAINSLOT_STATE_PLAY:
//						xModelMainSlot[k].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[k].modelKey);
//						if(xModelMainSlot[k].inventoryNum == i)
//							isCheck = TRUE;
//						break;
//				}
//				
//			}
//			if(isCheck == FALSE)
//				xModel.listNumSlot[xModel.totalListNum++] = i;
//		}
//		break;
//	case MODELCOLLECT_STATE_LIST:
//	case MODELCOLLECT_STATE_LISTCASTING:
//	case MODELCOLLECT_STATE_LISTINFO:
//		for(int i=0;i<xModel.totalInventoryModel;i++)
//			xModel.listNumSlot[xModel.totalListNum++] = i;
//		break;
//	}
//	
//	gSetColor(0, 0, 0);
//	fillRect(0, 0, lcdW, lcdH);
//	drawPacker(imgModelBg0, px, py, 0, 0, imgW(imgModelBg0), imgH(imgModelBg0), VH);
//			
//	subTemp[XPOS] = px;
//	subTemp[YPOS] = py-222;
//		
//	//타이틀
//	switch(xModel.state)
//	{
//	case MODELCOLLECT_STATE_LIST:
//	case MODELCOLLECT_STATE_LISTCASTING:
//	case MODELCOLLECT_STATE_LISTINFO:
//		sprintf(strTempS, "모델 리스트");
//		break;
//	default:
//		sprintf(strTempS, "배치하실 모델을 선택해 주세요");
//		break;
//	}
//	setFontSize(20);
//	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VH, 86, 255, 220, 33, 20, 20);
//	setFontSize(11);
//	
//	//세부메뉴
//	xModel.xDragScrollS.totalNum = xModel.totalListNum;
//	xModel.xDragScrollS.posGab = 190;
//	xModel.xDragScrollS.endPos = -(((xModel.xDragScrollS.totalNum-5)*xModel.xDragScrollS.posGab));
//	if(xModel.xDragScrollS.totalNum < 5)
//		xModel.xDragScrollS.endPos = 0;
//	
//	dragScrollPrc(&xModel.xDragScrollS,1,FALSE);
//	int iMax = xModel.xDragScrollS.totalNum;
//			
//	int slotNum;
//	int code;
//	int upGrade;
//	int pos;
//	for(int i=0;i<iMax;i++)
//	{
//		pos = xModel.xDragScrollS.pos+(xModel.xDragScrollS.posGab*i);
//		subTemp[XPOS] = px-380+pos;
//		subTemp[YPOS] = py;
//		
//		if(subTemp[XPOS] < -xModel.xDragScrollS.posGab)
//			continue;
//		if(subTemp[XPOS] > lcdW+xModel.xDragScrollS.posGab)
//			continue;
//	
//		slotNum = xModel.listNumSlot[i];
//		code = xInventoryModel[slotNum].code;
//		upGrade = xInventoryModel[slotNum].upGrade;
//					
//		XFACE xFaceTemp;
//		xFaceTemp.hairNum = code+1000;
//		xFaceTemp.faceNum = code+1000;
//		xFaceTemp.faceType = FACE_TYPE_NORMAL;
//				
//		drawFittingBody(subTemp[XPOS], subTemp[YPOS]+25,&xInventoryModel[slotNum].xF,&xFaceTemp,TRUE,xModelData[xInventoryModel[slotNum].code].sex);
//		
//		if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//		{
//			switch(xQuestTuto.nowNum)
//			{
//			case TUTO_22_MODELSELECTMODEL:
//				if(xModel.state == MODELCOLLECT_STATE_SELECTMODEL)
//				{
//					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+25;
//					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//				}
//				break;
//			}
//		}
//
//		if(getModelMainSlot(xInventoryModel[slotNum].key) != DONT)
//		{
//			int fsInfoW = 0;
//			int fsInfoH = 0;
//			
//			switch(gameCnt%29)
//			{
//				case 0:fsInfoW =0;fsInfoH =	0;break;
//				case 1:fsInfoW =-0.026;fsInfoH =	0.024;break;
//				case 2:fsInfoW =-0.116;fsInfoH =	0.105;break;
//				case 3:fsInfoW =-0.294;fsInfoH =	0.265;break;
//				case 4:fsInfoW =-0.6;fsInfoH =	0.541;break;
//				case 5:fsInfoW =-1.12;fsInfoH =	1.01;break;
//				case 6:fsInfoW =-2.087;fsInfoH =	1.883;break;
//				case 7:fsInfoW =-7.291;fsInfoH =	6.575;break;
//				case 8:fsInfoW =-12.493;fsInfoH =	11.267;break;
//				case 9:fsInfoW =-13.46;fsInfoH =	12.139;break;
//				case 10:fsInfoW =-13.978;fsInfoH =	12.606;break;
//				case 11:fsInfoW =-14.288;fsInfoH =	12.886;break;
//				case 12:fsInfoW =-14.468;fsInfoH =	13.048;break;
//				case 13:fsInfoW =-14.561;fsInfoH =	13.132;break;
//				case 14:fsInfoW =-14.592;fsInfoH =	13.16;break;
//				case 15:fsInfoW =-14.566;fsInfoH =	13.137;break;
//				case 16:fsInfoW =-14.475;fsInfoH =	13.054;break;
//				case 17:fsInfoW =-14.298;fsInfoH =	12.895;break;
//				case 18:fsInfoW =-13.992;fsInfoH =	12.619;break;
//				case 19:fsInfoW =-13.473;fsInfoH =	12.15;break;
//				case 20:fsInfoW =-12.504;fsInfoH =	11.277;break;
//				case 21:fsInfoW =-7.302;fsInfoH =	6.585;break;
//				case 22:fsInfoW =-2.098;fsInfoH =	1.892;break;
//				case 23:fsInfoW =-1.132;fsInfoH =	1.021;break;
//				case 24:fsInfoW =-0.611;fsInfoH =	0.551;break;
//				case 25:fsInfoW =-0.301;fsInfoH =	0.272;break;
//				case 26:fsInfoW =-0.12;fsInfoH =	0.108;break;
//				case 27:fsInfoW =-0.027;fsInfoH =	0.025;break;
//				case 28:fsInfoW =0;fsInfoH =	0;break;
//			}
//			drawPacker(imgTutoInfo7, subTemp[XPOS], subTemp[YPOS]-180+fsInfoH, 0, 0, imgW(imgTutoInfo7), imgH(imgTutoInfo7), VH);
//			drawPacker(imgModelGuestSlot, subTemp[XPOS], subTemp[YPOS]-150, 0, 0, imgW(imgModelGuestSlot), imgH(imgModelGuestSlot), VH);
//		}
//			
//
//		switch(xModel.state)
//		{
//		case MODELCOLLECT_STATE_SELECTMODEL:
//		case MODELCOLLECT_STATE_SELECTMODELCASTING:
//			subTemp[YPOS] += 145;
//			break;
//		default:
//			subTemp[YPOS] += 200;
//			break;
//		}
//		
//		xGame.fgameScaleCx = subTemp[XPOS];
//		xGame.fgameScaleCy = lcdH-subTemp[YPOS];
//		xGame.fgameScale = 0.7f;
//		
//		
//		switch(xModelData[code].grade)
//		{
//		case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
//		case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
//		case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
//		case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
//		}
//		
//		for(int k=0;k<xModelData[code].upGradeMax;k++)
//		{
//			if(upGrade > k)
//				drawPacker(imgModelLv, subTemp[XPOS]-23+12+(24*k), subTemp[YPOS], imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//			else
//				drawPacker(imgModelLv, subTemp[XPOS]-23+12+(24*k), subTemp[YPOS], 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//		}
//		drawModelName(subTemp[XPOS]+25+12, subTemp[YPOS]+37,code);
//						
//		xGame.fgameScaleCx = cx;
//		xGame.fgameScaleCy = cy;
//		xGame.fgameScale = 1.0f;
//		
//		
//		int giftTypeImgNum;
//		switch(xModel.state)
//		{
//		case MODELCOLLECT_STATE_SELECTMODEL:
//		case MODELCOLLECT_STATE_SELECTMODELCASTING:
//			drawPacker(imgModelBg1, subTemp[XPOS], subTemp[YPOS]+73, 0, 0, imgW(imgModelBg1), imgH(imgModelBg1), VH);
//			switch(xModelData[code].giftType)
//			{
//			case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=5;break;
//			case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=1;break;
//			case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=6;break;
//			case MODEL_GIFTTYPE_EXP:giftTypeImgNum=3;break;
//			}
//			drawPacker(imgProductionMenuObj0, subTemp[XPOS]-22, subTemp[YPOS]+75+10, imgW(imgProductionMenuObj0)/8*giftTypeImgNum, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
//			gSetColor(55, 24, 12);
//			sprintf(strTempS, "%d",getModelGiftNum(slotNum,0));
//			gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+75+10, strTempS, VR);
//								
//			gSetColor(55, 24, 12);
//			drawTimeSprintf(strTempS,getModelGiftTime(slotNum,0),4);
//			gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+75-14, strTempS, VR);
//			break;
//		}
//	}
//	
//	//거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
//	subTemp[XPOS] = px-380;
//	subTemp[YPOS] = py+30;
//	xModel.xDragScrollS.selectNum = (-xModel.xDragScrollS.pos/xModel.xDragScrollS.posGab);
//	for(int i=0;i<=6;i++)
//	{
//		xModel.xTouchSelectSlot[i].wPos = xModel.xDragScrollS.posGab-4;
//		xModel.xTouchSelectSlot[i].hPos = 420;
//		xModel.xTouchSelectSlot[i].xPos = subTemp[XPOS]+(xModel.xDragScrollS.posGab*i)+(xModel.xDragScrollS.pos%xModel.xDragScrollS.posGab) - xModel.xTouchSelectSlot[i].wPos/2;
//		xModel.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xModel.xTouchSelectSlot[i].hPos/2;
//			
//		/*
//		gSetColor(255, 0, 0);
//		setAlpha(100);
//		fillRect(xModel.xTouchSelectSlot[i].xPos, xModel.xTouchSelectSlot[i].yPos, xModel.xTouchSelectSlot[i].wPos, xModel.xTouchSelectSlot[i].hPos);
//		setAlpha(ALPHA_MAX);
//		 */
//	}
//				
//	subTemp[XPOS] = lcdW-97;
//	subTemp[YPOS] = lcdH-47;
//	
//	drawPacker(imgModelCastingBtn0, subTemp[XPOS]+3, subTemp[YPOS]+1, 0, 0, imgW(imgModelCastingBtn0), imgH(imgModelCastingBtn0), VH);
//	drawPacker(imgModelCastingBtn1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelCastingBtn1), imgH(imgModelCastingBtn1), VH);
//	
//	int castImgNum = DONT;
//	switch(gameCnt%50)
//	{
//	case 41:castImgNum = 0;	break;
//	case 42:castImgNum = 1;	break;
//	case 43:castImgNum = 2;	break;
//	case 44:castImgNum = 3;	break;
//	case 45:castImgNum = 4;	break;
//	}
//	
//	if(castImgNum != DONT)
//	{
//		xGame.isBlend = TRUE;
//		xGame.blendType = BLEND_ADDP;
//		drawPacker(imgModelCastingBtn2, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgModelCastingBtn2)/5*castImgNum, imgW(imgModelCastingBtn2), imgH(imgModelCastingBtn2)/5, VH);
//		xGame.isBlend = FALSE;
//	}
//	
//	if(gameCnt%50 == 0)
//	{
//		setModelEff(subTemp[XPOS]-63, subTemp[YPOS]-26);
//		setModelEff(subTemp[XPOS]+67, subTemp[YPOS]+23);
//	}
//
//	
//	
//	xModel.xTouchCastingBtn.wPos = imgW(imgModelCastingBtn1);
//	xModel.xTouchCastingBtn.hPos = imgH(imgModelCastingBtn1);
//	xModel.xTouchCastingBtn.xPos = subTemp[XPOS]-xModel.xTouchCastingBtn.wPos/2;
//	xModel.xTouchCastingBtn.yPos = subTemp[YPOS]-xModel.xTouchCastingBtn.hPos/2;
//	
//	
//	subTemp[XPOS] = lcdW-40;
//	subTemp[YPOS] = py-232;
//		
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_RESULT:
//			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//			break;
//		}
//	}
//		
//	xTouchClr.wPos = 80;
//	xTouchClr.hPos = 80;
//	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
//	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
//	
//    /*
//	gSetColor(255, 0, 0);
//	setAlpha(100);
//	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
//	setAlpha(ALPHA_MAX);
//    */
//
//}



//void drawModelUpGrade()
//{
//	int px = cx;
//	int py = cy;
//	
//	drawBgFillRect();
//	drawPacker(imgModelUpGradeBg, px-3, py-3, 0, 0, imgW(imgModelUpGradeBg), imgH(imgModelUpGradeBg), VH);
//		
//	int iMax;
//	int pos;
//	int code;
//	int upGrade;
//	
//	code = xInventoryModel[xModelUpGrade.inventoryNum].code;
//	upGrade = xInventoryModel[xModelUpGrade.inventoryNum].upGrade;
//	
//	
//		
//	subTemp[XPOS] = px-320;
//	subTemp[YPOS] = py-106;
//	
//	XFACE xFaceTemp;
//	xFaceTemp.hairNum = 1000+code;
//	xFaceTemp.faceNum = 1000+code;
//	xFaceTemp.faceType = FACE_TYPE_SMILE;
//	drawFittingBody(subTemp[XPOS], subTemp[YPOS]+60,&xInventoryModel[xModelUpGrade.inventoryNum].xF,&xFaceTemp,TRUE,xModelData[code].sex);
//	
//	
//	subTemp[XPOS] = px-320;
//	subTemp[YPOS] = py+143;
//	gSetColor(255, 255, 255);
//	gDrawString(subTemp[XPOS]-88, subTemp[YPOS]-6, "모델 랭크", VL);
//	gDrawString(subTemp[XPOS]-88, subTemp[YPOS]-6+20, "모델 레벨", VL);
//	gDrawString(subTemp[XPOS]-88, subTemp[YPOS]-6+40, "레이어드 수", VL);
//
//	
//	gSetColor(253, 173, 10);
//	switch(xModelData[code].grade)
//	{
//	case 0:sprintf(strTempS,"C랭크");break;
//	case 1:sprintf(strTempS,"B랭크");break;
//	case 2:sprintf(strTempS,"A랭크");break;
//	case 3:sprintf(strTempS,"S랭크");break;
//	}
//	gDrawString(subTemp[XPOS]+88, subTemp[YPOS]-6, strTempS, VR);
//	
//	
//	xGame.isReSizeDraw = TRUE;
//	xGame.reSize = 80;
//	for(int k=0;k<xModelData[code].upGradeMax;k++)
//	{
//		if(upGrade > k)
//			drawPacker(imgModelLv, subTemp[XPOS]+2+(20*k), subTemp[YPOS]+20-7, imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//		else
//			drawPacker(imgModelLv, subTemp[XPOS]+2+(20*k), subTemp[YPOS]+20-7, 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//	}
//	xGame.isReSizeDraw = FALSE;
//	
//	
//		
//	sprintf(strTempS, "%d회",xModelData[code].layeredNum+getModelLayered(xModelUpGrade.inventoryNum,0));
//	gDrawString(subTemp[XPOS]+88, subTemp[YPOS]-6+40, strTempS, VR);
//	
//	
//	subTemp[XPOS] = px-320;
//	subTemp[YPOS] = py+238;
//	
//	gSetColor(254, 177, 0);
//	gDrawString(subTemp[XPOS]-88, subTemp[YPOS]-36, "활동 보상", VL);
//
//	drawIcon(subTemp[XPOS]-90+10,subTemp[YPOS]-6, ICON_TYPE_TIME);
//	gSetColor(255, 255, 255);
//	drawTimeSprintf(strTempS,getModelGiftTime(xModelUpGrade.inventoryNum,0),4);
//	gDrawString(subTemp[XPOS]-90+10+20, subTemp[YPOS]-6, strTempS, VL);
//		
//	drawPacker(imgModelMainInfo4, subTemp[XPOS]-10, subTemp[YPOS]-4, 0, 0, imgW(imgModelMainInfo4), imgH(imgModelMainInfo4), VH);
//	
//	//254	188	10
//	gSetColor(254, 188, 10);
//	setCommaNum(strTempS, getModelGiftNum(xModelUpGrade.inventoryNum,0));
//	gDrawString(subTemp[XPOS]+90, subTemp[YPOS]-6, strTempS, VR);
//	
//	int giftTypeImgNum;
//	switch(xModelData[code].giftType)
//	{
//		case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=ICON_TYPE_GOLD;break;
//		case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=ICON_TYPE_LOOK;break;
//		case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=ICON_TYPE_CANDY;break;
//		case MODEL_GIFTTYPE_EXP:giftTypeImgNum=ICON_TYPE_EXP;break;
//	}
//	drawIcon(subTemp[XPOS]+15, subTemp[YPOS]-6, giftTypeImgNum);
//
//	//세부메뉴
//	subTemp[XPOS] = px-88;
//	subTemp[YPOS] = py-38;
//	
//	xModelUpGrade.xDragScrollS.totalNum = xModelUpGrade.totalModelList;
//	xModelUpGrade.xDragScrollS.posGab = 202;
//	
//	xModelUpGrade.xDragScrollS.endPos = -(((xModelUpGrade.xDragScrollS.totalNum-3)*xModelUpGrade.xDragScrollS.posGab));
//	
//	if(xModelUpGrade.xDragScrollS.totalNum < 3)
//		xModelUpGrade.xDragScrollS.endPos = 0;
//	
//	iMax = xModelUpGrade.xDragScrollS.totalNum;
//	dragScrollPrc(&xModelUpGrade.xDragScrollS,1,FALSE);
//	
//	gSetClip(true,px+110-305,0,610,lcdH);
//	
//	for(int i=0;i<iMax;i++)
//	{
//		pos = xModelUpGrade.xDragScrollS.pos+(xModelUpGrade.xDragScrollS.posGab*i);
//		if(subTemp[XPOS]+pos < -xModelUpGrade.xDragScrollS.posGab)
//			continue;
//				
//		if(xModelUpGrade.isUpgrade == TRUE && xModelUpGrade.selectSlot == i)
//			continue;
//			
//		drawModelSlot(subTemp[XPOS]+pos,subTemp[YPOS],xModelUpGrade.modelListSlot[i]);
//			
//		
//				
//		if(xModelUpGrade.selectSlot == i)
//		{
//			xModelUpGrade.slotX = subTemp[XPOS]+pos;
//			xModelUpGrade.slotY = subTemp[YPOS];
//			drawPacker(imgModelUpGradeSlot1, subTemp[XPOS]+pos, subTemp[YPOS], 0, 0, imgW(imgModelUpGradeSlot1), imgH(imgModelUpGradeSlot1), VH);
//		}
//		else if(xModelUpGrade.selectSlot != DONT)
//			drawPacker(imgModelUpGradeSlot2, subTemp[XPOS]+pos, subTemp[YPOS], 0, 0, imgW(imgModelUpGradeSlot2), imgH(imgModelUpGradeSlot2), VH);
//	}
//    gSetClip(false,0, 0, lcdW, lcdH);
//	//거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
//	xModelUpGrade.xDragScrollS.selectNum = (-xModelUpGrade.xDragScrollS.pos/xModelUpGrade.xDragScrollS.posGab);
//	for(int i=0;i<4;i++)
//	{
//		xModelUpGrade.xTouchSelectSlot[i].wPos = xModelUpGrade.xDragScrollS.posGab-4;
//		xModelUpGrade.xTouchSelectSlot[i].hPos = 300;
//		xModelUpGrade.xTouchSelectSlot[i].xPos = subTemp[XPOS]+(xModelUpGrade.xDragScrollS.posGab*i)+(xModelUpGrade.xDragScrollS.pos%xModelUpGrade.xDragScrollS.posGab) - xModelUpGrade.xTouchSelectSlot[i].wPos/2;
//		xModelUpGrade.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xModelUpGrade.xTouchSelectSlot[i].hPos/2;
//		
//		/*
//		gSetColor(255, 0, 0);
//		setAlpha(100);
//		fillRect(xModelUpGrade.xTouchSelectSlot[i].xPos, xModelUpGrade.xTouchSelectSlot[i].yPos, xModelUpGrade.xTouchSelectSlot[i].wPos, xModelUpGrade.xTouchSelectSlot[i].hPos);
//		setAlpha(ALPHA_MAX);
//		 */
//	}
//		
//	subTemp[XPOS] = px+315;
//	subTemp[YPOS] = py+210;
//	setFontSize(20);
//		
//	M_Boolean isClose = FALSE;
//	
//	
//	switch(xModelUpGrade.upgradeType)
//	{
//	case 0:
//		sprintf(strTempS,"업그레이드");
//		if(xInventoryModel[xModelUpGrade.inventoryNum].upGrade >= xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax)
//		{
//			isClose = TRUE;
//		}
//		break;
//	case 1:
//		sprintf(strTempS,"조합하기");
//		break;
//	}
//		
//	if(isClose == FALSE && xModelUpGrade.selectSlot >= 0 && xModelUpGrade.selectSlot < xModelUpGrade.totalModelList)
//	{
//		drawPacker(imgUpGrageBtn, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgUpGrageBtn)/2, imgW(imgUpGrageBtn), imgH(imgUpGrageBtn)/2, VH);
//		gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 255, 255, 255, 186, 70, 10);
//	}
//	else
//	{
//		
//		drawPacker(imgUpGrageBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgUpGrageBtn), imgH(imgUpGrageBtn)/2, VH);
//		gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 166, 156, 126, 81, 19, 2);
//	}
//	setFontSize(11);
//	xTouchOk.wPos = imgW(imgUpGrageBtn);
//	xTouchOk.hPos = imgH(imgUpGrageBtn)/2;
//	xTouchOk.xPos = subTemp[XPOS]-xTouchOk.wPos/2;
//	xTouchOk.yPos = subTemp[YPOS]-xTouchOk.hPos/2;
//		
//	xTouchClr.wPos = 100;
//	xTouchClr.hPos = 100;
//	xTouchClr.xPos = px+402-xTouchClr.wPos/2;
//	xTouchClr.yPos = py-250-xTouchClr.hPos/2;
//	
//	/*
//	gSetColor(255, 0, 0);
//	setAlpha(100);
//	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
//	setAlpha(ALPHA_MAX);
//	 */
//	
//	
//	switch(xModelUpGrade.upgradeType)
//	{
//	case 0:
//		gDrawStringBold(px-162, py+170, "업그레이드에 이용되는 모델은 사라집니다.", VL, 97, 255, 227, 44, 27, 26);
//		break;
//	case 1:
//		gDrawStringBold(px-162, py+170, "조합 성공시 윗등급의 모델이 랜덤하게 나와요", VL, 97, 255, 227, 44, 27, 26);
//		break;
//	}
//	int per = 0;
//	int price = 0;
//	if(xModelUpGrade.selectSlot != DONT)
//	{
//		per = getModelUpgradePer(xModelUpGrade.inventoryNum,xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]);
//		price = getModelUpgradePrice(xModelUpGrade.inventoryNum,xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]);
//	}
//	gDrawStringBold(px-183, py+225, "비용", VL, 97, 255, 227, 44, 27, 26);
//	gDrawStringBold(px+35, py+225, "확률", VL, 97, 255, 227, 44, 27, 26);
//	
//	setCommaNum(strTempS, price);
//	setFontSize(14);
//	gDrawStringBold(px-40, py+225, strTempS, VR, 97, 255, 227, 44, 27, 26);
//	setFontSize(11);
//	
//	
//	
//	
//	
//	setFontSize(14);
//	sprintf(strTempS, " %d%% ",per);
//	gDrawStringBold(px+180, py+225, strTempS, VR, 97, 255, 227, 44, 27, 26);
//	setFontSize(11);
//	
//	if(xModelUpGrade.totalModelList == 0)
//	{
//		setFontSize(14);
//		switch(xModelUpGrade.upgradeType)
//		{
//		case 0:
//			xLinkInfo.total = 0;
//			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"모델을 업그레이드 하실려면");
//			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"다른 모델이 필요합니다.");
//			drawLinkInfo(px-70,py-40,0);
//
//			break;
//		case 1:
//			xLinkInfo.total = 0;
//			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"업그레이드가 완료된");
//			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"동일등급의 모델이 필요합니다.");
//			drawLinkInfo(px-70,py-40,0);
//			break;
//		}
//		setFontSize(11);
//	}
//}


//void drawModelSlot(int x,int y,int selectNum)
//{
//	
//	XFACE xFaceTemp;
//	int code = xInventoryModel[selectNum].code;
//	int upGrade = xInventoryModel[selectNum].upGrade;
//	
//	
//	
//	drawPacker(imgModelUpGradeSlot0, x,y, 0, 0, imgW(imgModelUpGradeSlot0), imgH(imgModelUpGradeSlot0), VH);
//	
//	xFaceTemp.hairNum = 1000+code;
//	xFaceTemp.faceNum = 1000+code;
//	xFaceTemp.faceType = FACE_TYPE_SMILE;
//	xGame.fgameScale = 0.7f;
//	xGame.fgameScaleCx = x;
//	xGame.fgameScaleCy = lcdH-(y-50);
//	drawFittingBody(x, y-50,&xInventoryModel[selectNum].xF,&xFaceTemp,TRUE,xModelData[code].sex);
//	xGame.fgameScaleCx = cx;
//	xGame.fgameScaleCy = cy;
//	xGame.fgameScale = 1.0f;
//	
//	
//	xGame.isReSizeDraw = TRUE;
//	xGame.reSize = 70;
//	drawModelName(x, y+74, code);
//	xGame.isReSizeDraw = FALSE;
//			
//	gSetColor(255, 255, 255);
//	gDrawString(x-88, y+108, "모델 랭크", VL);
//	gDrawString(x-88, y+108+20, "모델 레벨", VL);
//	gDrawString(x-88, y+108+40, "레이어드 수", VL);
//	
//	
//	gSetColor(253, 173, 10);
//	switch(xModelData[code].grade)
//	{
//	case 0:sprintf(strTempS,"C랭크");break;
//	case 1:sprintf(strTempS,"B랭크");break;
//	case 2:sprintf(strTempS,"A랭크");break;
//	case 3:sprintf(strTempS,"S랭크");break;
//	}
//	gDrawString(x+80, y+108, strTempS, VR);
//	
//	
//	xGame.isReSizeDraw = TRUE;
//	xGame.reSize = 80;
//	for(int k=0;k<xModelData[code].upGradeMax;k++)
//	{
//		if(upGrade > k)
//			drawPacker(imgModelLv, x-5+(20*k), y+114+20-7, imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//		else
//			drawPacker(imgModelLv, x-5+(20*k), y+114+20-7, 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//	}
//	xGame.isReSizeDraw = FALSE;
//	
//	sprintf(strTempS, "%d회",xModelData[code].layeredNum+getModelLayered(selectNum,0));
//	gDrawString(x+80, y+108+40, strTempS, VR);
//}
//
//void drawNewModel()
//{
//	int px = cx;
//	int py = cy;
//	
//	drawBgFillRect();
//	int startAnyCnt;
//	int alpha = 100;
//	int resize = 100;
//	int rot = 0;
//	int x;
//	int y;
//	
//	startAnyCnt = xWorldMap.newModelAnyCnt-72;
//	
//	if(startAnyCnt >= 0)
//	{
//		drawModelRotEff(px+132, py-90,startAnyCnt);
//	}
//	
//	startAnyCnt = xWorldMap.newModelAnyCnt;
//	
//	if(startAnyCnt >= 0)
//	{
//		switch(startAnyCnt)
//		{
//		case 0:alpha=	100;resize=	0;x=	480;y=	320;rot=	0;break;
//		case 1:alpha=	100;resize=	24;x=	480;y=	320;rot=	0;break;
//		case 2:alpha=	100;resize=	48;x=	480;y=	320;rot=	0;break;
//		case 3:alpha=	100;resize=	72;x=	480;y=	320;rot=	0;break;
//		case 4:alpha=	100;resize=	96;x=	480;y=	320;rot=	0;break;
//		case 5:alpha=	100;resize=	120;x=	480;y=	320;rot=	0;break;
//		case 6:alpha=	100;resize=	113.333;x=	480;y=	320;rot=	0;break;
//		case 7:alpha=	100;resize=	106.667;x=	480;y=	320;rot=	0;break;
//		case 8:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 9:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 10:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 11:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 12:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 13:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 14:alpha=	100;resize=	100;x=	480;y=	326.001;rot=	0;break;
//		case 15:alpha=	100;resize=	100;x=	480;y=	332.006;rot=	0;break;
//		case 16:alpha=	100;resize=	100;x=	480;y=	338;rot=	0;break;
//		case 17:alpha=	100;resize=	100;x=	480;y=	331.999;rot=	0;break;
//		case 18:alpha=	100;resize=	100;x=	480;y=	325.994;rot=	0;break;
//		case 19:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 20:alpha=	100;resize=	100;x=	480;y=	326.001;rot=	0;break;
//		case 21:alpha=	100;resize=	100;x=	480;y=	331.995;rot=	0;break;
//		case 22:alpha=	100;resize=	100;x=	480;y=	338;rot=	0;break;
//		case 23:alpha=	100;resize=	100;x=	480;y=	331.999;rot=	0;break;
//		case 24:alpha=	100;resize=	100;x=	480;y=	325.994;rot=	0;break;
//		case 25:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 26:alpha=	100;resize=	100;x=	480;y=	326.001;rot=	0;break;
//		case 27:alpha=	100;resize=	100;x=	480;y=	331.995;rot=	0;break;
//		case 28:alpha=	100;resize=	100;x=	480;y=	338;rot=	0;break;
//		case 29:alpha=	100;resize=	100;x=	480;y=	331.999;rot=	0;break;
//		case 30:alpha=	100;resize=	100;x=	480;y=	325.994;rot=	0;break;
//		case 31:alpha=	100;resize=	100;x=	480;y=	320;rot=	0;break;
//		case 32:alpha=	100;resize=	100;x=	480;y=	326.004;rot=	0;break;
//		case 33:alpha=	100;resize=	100;x=	480;y=	332.004;rot=	0;break;
//		case 34:alpha=	100;resize=	100;x=	480;y=	338;rot=	0;break;
//		case 35:alpha=	100;resize=	100;x=	480;y=	338;rot=	-14;break;
//		case 36:alpha=	100;resize=	100;x=	480;y=	338;rot=	-14;break;
//		case 37:alpha=	100;resize=	100;x=	480;y=	338;rot=	-14;break;
//		case 38:alpha=	100;resize=	100;x=	480;y=	338;rot=	-14;break;
//		case 39:alpha=	83.3333;resize=	133.333;x=	480;y=	338;rot=	-14;break;
//		case 40:alpha=	66.6667;resize=	166.667;x=	480;y=	338;rot=	-14;break;
//		case 41:alpha=	50;resize=	200;x=	480;y=	338;rot=	-14;break;
//		case 42:alpha=	33.3333;resize=	233.333;x=	480;y=	338;rot=	-14;break;
//		case 43:alpha=	16.6667;resize=	266.667;x=	480;y=	338;rot=	-14;break;
//		default:alpha=	0;resize=	300;x=	480;y=	338;rot=	-14;break;
//		}
//
//		x -=480;
//		y -=320;
//		x +=cx;
//		y +=cy;
//		
//		if(alpha != 100)
//			setAlpha(alpha*ALPHA_MAX/100);
//		
//		if(resize != 100)
//		{
//			xGame.isReSizeDraw = TRUE;
//			xGame.reSize = resize;
//		}
//		
//		if(rot != 0)
//		{
//			xGame.isRotate = TRUE;
//			xGame.rotateNum = rot;
//		}
//		if(startAnyCnt >= 35)
//		{
//			switch(xWorldMap.newModelType)
//			{
//			case 0:
//            case 3:
//				drawPacker(imgNewModel1, x,	y, 0, 0, imgW(imgNewModel1), imgH(imgNewModel1), VH);
//				break;
//			case 1:
//			case 2:
//            case 4:
//				drawPacker(imgNewModel3, x,	y, 0, 0, imgW(imgNewModel3), imgH(imgNewModel3), VH);
//				break;
//			}
//		}
//		else
//		{
//			switch(xWorldMap.newModelType)
//			{
//			case 0:
//            case 3:
//				drawPacker(imgNewModel0, x,	y, 0, 0, imgW(imgNewModel0), imgH(imgNewModel0), VH);
//				break;
//			case 1:
//			case 2:
//            case 4:
//				drawPacker(imgNewModel2, x,	y, 0, 0, imgW(imgNewModel2), imgH(imgNewModel2), VH);
//				break;
//			}
//		}
//		xGame.isRotate = FALSE;
//		xGame.isReSizeDraw = FALSE;
//		setAlpha(ALPHA_MAX);
//	}
//	
//	
//	XFITTINGLAYER xFTemp;
//	for(int i=0;i<16;i++)
//		xFTemp.code[i] = DONT;
//	drawModelShow(xModel.newModelCode,&xFTemp,xWorldMap.newModelAnyCnt-44);
//	
//	if(xWorldMap.newModelAnyCnt == 0)
//		playSnd(SND_MODEL_CASTING);
//		
//	if(xWorldMap.newModelAnyCnt == 45)
//	{
//		playSnd(SND_MODEL_RESULT);
//		setQuest(23,1,DONT);
//	}
//	
//	++xWorldMap.newModelAnyCnt;
//}
//
//
//int addInventoryModel(int modelCode)
//{
//	setModelList(DONT);
//	
//	
//	int checkSort = DONT;
//	for(int i=0;i<xModel.totalInventoryModel;i++)
//	{
//		if((xModelData[modelCode].grade > xModelData[xInventoryModel[i].code].grade)
//		   ||(xModelData[modelCode].grade == xModelData[xInventoryModel[i].code].grade && xInventoryModel[i].upGrade == 0 && xInventoryModel[i].code >= modelCode))
//		{
//			checkSort = i;
//			break;
//		}
//	}
//	if(checkSort != DONT)
//	{
//		for(int i=xModel.totalInventoryModel;i>checkSort;i--)
//		{
//			memcpy(&xInventoryModel[i], &xInventoryModel[i-1], sizeof(xInventoryModel[i]));
//		}
//	}
//	else
//		checkSort = xModel.totalInventoryModel;
//	
//	xInventoryModel[checkSort].key = DONT;
//	xInventoryModel[checkSort].vote = 0;
//	xInventoryModel[checkSort].isMapShow = FALSE;
//	xInventoryModel[checkSort].upGrade = 0;
//	xInventoryModel[checkSort].code = modelCode;
//	
//	
//	if(xModelData[modelCode].isOpen == FALSE)
//	{
//		xModelData[modelCode].isOpen = TRUE;
//	}
//	
//	xModel.totalInventoryModel++;
//	
//	
//	return checkSort;	
//}
//
//int addInventoryModel_FRIEND(int modelCode)
//{
//	int checkSort = 0;
//	for(int i=0;i<xModel.totalInventoryModel_FRIEND;i++)
//	{
//		if((xModelData[modelCode].grade > xModelData[xInventoryModel_FRIEND[i].code].grade)
//		   ||(xModelData[modelCode].grade == xModelData[xInventoryModel_FRIEND[i].code].grade && xInventoryModel_FRIEND[i].upGrade == 0 && xInventoryModel_FRIEND[i].code >= modelCode))
//		{
//			checkSort = i;
//			break;
//		}
//	}
//	
//	for(int i=xModel.totalInventoryModel_FRIEND;i>checkSort;i--)
//	{
//		memcpy(&xInventoryModel_FRIEND[i], &xInventoryModel_FRIEND[i-1], sizeof(xInventoryModel_FRIEND[i]));
//	}
//	
//	xInventoryModel_FRIEND[checkSort].upGrade = 0;
//	xInventoryModel_FRIEND[checkSort].code = modelCode;
//	
//	xModel.totalInventoryModel_FRIEND++;
//	
//	return checkSort;
//}
//
//void outPutInventoryModel(int slotNum)
//{
//	/////////////////////////////////////////////////////////////////////
//	int eslot = slotNum;
//	xEventQueueNet.action[xEventQueueNet.totalNum] = 2;//0:신규,1:업데이트,2삭제
//	xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
//	xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
//	xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
//	for(int f=0;f<16;f++)
//	{
//		xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
//	}
//	xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
//	xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInventoryModel[eslot].xF.isInFitting==FALSE?0:1;
//	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
//	/////////////////////////////////////////////////////////////////////
//	
//		
//	for(int i=slotNum;i<xModel.totalInventoryModel;i++)
//	{
//		if(xModelUpGrade.inventoryNum == i+1)
//			xModelUpGrade.inventoryNum = i;
//		
//		memcpy(&xInventoryModel[i], &xInventoryModel[i+1], sizeof(xInventoryModel[i]));
//	}
//	xModel.totalInventoryModel--;
//}
//
//void setModelList(int grade)
//{
//	for(int i=0;i<xModel.totalInventoryModel;i++)
//	{
//		if(xInventoryModel[i].code == DONT)
//		{
//			outPutInventoryModel(i);
//			i--;
//		}
//	}
//}
//
//void sortModelList()
//{
//	XINVENTORYMODEL xInventoryModelTemp;
//	
//	
//	for(int i=0;i<xModel.totalInventoryModel;i++)
//	{
//		xInventoryModel[i].xF.layeredNum = 0;
//		for(int f=0;f<16;f++)
//		{
//			if(xInventoryModel[i].xF.code[f] != DONT)
//				xInventoryModel[i].xF.layeredNum++;
//		}
//	}
//	
//	M_Boolean isCheck;
//	for(int i=0;i<xModel.totalInventoryModel;i++)
//	{
//		for(int j=i+1;j<xModel.totalInventoryModel;j++)
//		{
//			isCheck =FALSE;
//			if(xInventoryModel[i].xF.layeredNum == 0 &&  xInventoryModel[j].xF.layeredNum > 0)
//			{
//				isCheck = TRUE;
//			}
//			
//			else if(((xInventoryModel[i].xF.layeredNum > 0 &&  xInventoryModel[j].xF.layeredNum > 0)||(xInventoryModel[i].xF.layeredNum == 0 &&  xInventoryModel[j].xF.layeredNum == 0))
//				&& (xModelData[xInventoryModel[i].code].grade < xModelData[xInventoryModel[j].code].grade))
//			{
//				isCheck = TRUE;
//			}
//
//			else if(((xInventoryModel[i].xF.layeredNum > 0 &&  xInventoryModel[j].xF.layeredNum > 0)||(xInventoryModel[i].xF.layeredNum == 0 &&  xInventoryModel[j].xF.layeredNum == 0))
//				&& (xModelData[xInventoryModel[i].code].grade == xModelData[xInventoryModel[j].code].grade)
//				&& (xInventoryModel[i].upGrade < xInventoryModel[j].upGrade))
//			{
//				isCheck = TRUE;
//			}
//			if(isCheck == TRUE)
//		    {
//				memcpy(&xInventoryModelTemp,&xInventoryModel[i],sizeof(xInventoryModelTemp));
//				memcpy(&xInventoryModel[i],&xInventoryModel[j],sizeof(xInventoryModelTemp));
//				memcpy(&xInventoryModel[j],&xInventoryModelTemp,sizeof(xInventoryModelTemp));
//		    }
//		}
//	}
//}
//
//void sortModelListFriend()
//{
//	XINVENTORYMODEL xInventoryModelTemp;
//	
//	
//	for(int i=0;i<xModel.totalInventoryModel_FRIEND;i++)
//	{
//		xInventoryModel_FRIEND[i].xF.layeredNum = 0;
//		for(int f=0;f<16;f++)
//		{
//			if(xInventoryModel_FRIEND[i].xF.code[f] != DONT)
//				xInventoryModel_FRIEND[i].xF.layeredNum++;
//		}
//	}
//	
//	M_Boolean isCheck;
//	for(int i=0;i<xModel.totalInventoryModel_FRIEND;i++)
//	{
//		for(int j=i+1;j<xModel.totalInventoryModel_FRIEND;j++)
//		{
//			isCheck =FALSE;
//			if(xInventoryModel_FRIEND[i].xF.layeredNum == 0 &&  xInventoryModel_FRIEND[j].xF.layeredNum > 0)
//			{
//				isCheck = TRUE;
//			}
//			
//			else if(((xInventoryModel_FRIEND[i].xF.layeredNum > 0 &&  xInventoryModel_FRIEND[j].xF.layeredNum > 0)||(xInventoryModel_FRIEND[i].xF.layeredNum == 0 &&  xInventoryModel_FRIEND[j].xF.layeredNum == 0))
//					&& (xModelData[xInventoryModel_FRIEND[i].code].grade < xModelData[xInventoryModel_FRIEND[j].code].grade))
//			{
//				isCheck = TRUE;
//			}
//			else if(((xInventoryModel_FRIEND[i].xF.layeredNum > 0 &&  xInventoryModel_FRIEND[j].xF.layeredNum > 0)||(xInventoryModel_FRIEND[i].xF.layeredNum == 0 &&  xInventoryModel_FRIEND[j].xF.layeredNum == 0))
//					&& (xModelData[xInventoryModel_FRIEND[i].code].grade == xModelData[xInventoryModel_FRIEND[j].code].grade)
//					&& (xInventoryModel_FRIEND[i].upGrade < xInventoryModel_FRIEND[j].upGrade))
//			{
//				isCheck = TRUE;
//			}
//			if(isCheck == TRUE)
//		    {
//				memcpy(&xInventoryModelTemp,&xInventoryModel_FRIEND[i],sizeof(xInventoryModelTemp));
//				memcpy(&xInventoryModel_FRIEND[i],&xInventoryModel_FRIEND[j],sizeof(xInventoryModelTemp));
//				memcpy(&xInventoryModel_FRIEND[j],&xInventoryModelTemp,sizeof(xInventoryModelTemp));
//		    }
//		}
//	}
//}
//
//
//void setModelUpGradeList(int slotNum)
//{
//	xModelUpGrade.totalModelList = 0;
//	
//	for(int i=0;i<xModel.totalInventoryModel;i++)
//	{
//		if(i != slotNum && xInventoryModel[i].code != DONT && getModelMainSlot(xInventoryModel[i].key) == DONT)
//		{
//			switch(xModelUpGrade.upgradeType)
//			{
//			case 0:
//				xModelUpGrade.modelListSlot[xModelUpGrade.totalModelList++] = i;
//				break;
//			case 1:
//				if(xInventoryModel[i].upGrade == xModelData[xInventoryModel[i].code].upGradeMax)
//				{
//					if(xModelData[xInventoryModel[slotNum].code].grade == xModelData[xInventoryModel[i].code].grade)
//					{
//						xModelUpGrade.modelListSlot[xModelUpGrade.totalModelList++] = i;
//					}
//				}
//				break;
//			}
//		}
//	}
//}
//
//void setNewModel(int type)
//{
//	setQuest(30,1,DONT);
//	
//	xCollection.selectSkill = DONT;
//	xWorldMap.isNewModel = TRUE;
//	xWorldMap.newModelAnyCnt = 0;
//	xWorldMap.newModelType = type;
//	
//	int selectSlot = 0;
//	int selectGrade = 0;
//	int perTemp = 0;
//	int perRandom = ranDom(0, 1000-1);
//	
//	
//	switch(type)
//	{
//	case 0: //일반뽑기권
//		for(int i=0;i<xModel.newModelTotal[type];i++)
//		{
//			if(xModel.newModelCountNum <= xModel.newModelCount[i])
//			{
//				selectSlot = i;
//				break;
//			}
//		}
//		for(int i=0;i<4;i++)
//		{
//			perTemp += xModel.newModelPer[selectSlot][i];
//			if(perRandom < perTemp)
//			{
//				selectGrade = i;
//				break;
//			}
//		}
//		xModel.newModelCountNum+=xModel.newModelCountPlus[selectSlot][selectGrade];
//		break;
//	case 1: //프리미엄
//	case 2: //A~S
//		for(int i=0;i<xModel.newModelTotal[1];i++)
//		{
//			if(xModel.newModelCountNum <= xModel.newModelCount_Cash[i])
//			{
//				selectSlot = i;
//				break;
//			}
//		}
//		for(int i=0;i<4;i++)
//		{
//			perTemp += xModel.newModelPer_Cash[selectSlot][i];
//			if(perRandom < perTemp)
//			{
//				selectGrade = i;
//				break;
//			}
//		}
//            
//        if(xAmulet.buff[JEWELBUFF_TYPE_CASTING_S] > 0)
//        {
//            if(ranDom(0, 10000-1) < xAmulet.buff[JEWELBUFF_TYPE_CASTING_S])      //안오는얘
//            {
//                selectGrade = 3;
//            }
//        }
//        
//		xModel.newModelCountNum+=xModel.newModelCountPlus_Cash[selectSlot][selectGrade];
//		break;
//    case 3:     //A급확정
//        selectGrade = 2;
//        break;
//    case 4:     //S급확정
//        selectGrade = 3;
//        break;
//    case 5: //캐릭지정
//        break;
//	}
//    
//    if(type == 5)
//    {
//        xModel.newModelCode = xMail.giftModelCode;
//
//        if(xModelData[xModel.newModelCode].grade >= 2)
//            xWorldMap.newModelType = 1;
//        else
//            xWorldMap.newModelType = 0;
//    }
//    else
//    {
//        switch(selectGrade)
//        {
//        case 0:
//            xModel.newModelCode = xModel.ranDomSlotC[ranDom(0,xModel.totalRanDomSlotC-1)];
//            break;
//        case 1:
//            xModel.newModelCode = xModel.ranDomSlotB[ranDom(0,xModel.totalRanDomSlotB-1)];
//            if(type == 2)
//                xModel.newModelCode = xModel.ranDomSlotA[ranDom(0,xModel.totalRanDomSlotA-1)];
//            break;
//        case 2:
//            xModel.newModelCode = xModel.ranDomSlotA[ranDom(0,xModel.totalRanDomSlotA-1)];
//            break;
//        case 3:
//            xModel.newModelCode = xModel.ranDomSlotS[ranDom(0,xModel.totalRanDomSlotS-1)];
//            break;
//        }
//    }
//	
//	
//	switch(type)
//	{
//	case 0:
//	case 1:
//		///////////////////////////////////////////////////////////////////
//		xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 1;//0:골드,1프리미엄,2캔디머쉰,3직원의상,모델뽑기
//		xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;//아이템종류(0~5)직원의상 구매시
//		xEventQueueNet.code[xEventQueueNet.totalNum] = type;
//		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BUYGOLD, TRUE);
//		///////////////////////////////////////////////////////////////////
//		break;
//	}
//	
//	///////////////////////////////////////////////////////////////////
//	xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 4;//0:골드,1프리미엄,2캔디머쉰,3직원의상,4모델뽑기,100:첫구매이벤트,101:스페션세일이벤트,102:리뷰이벤트,200:해킹로그,300:출석로그,301:친구초대로그
//	xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;//아이템종류(0~5)직원의상 구매시
//	xEventQueueNet.code[xEventQueueNet.totalNum] = xModel.newModelCode;
//	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BUYGOLD, TRUE);
//	///////////////////////////////////////////////////////////////////
//
//
//	if(type == 0 || type == 1)
//	{
//		switch(selectGrade)
//		{
//		case 0:
//			sprintf(xRocks.strTemp, "%s",xModelData[xModel.newModelCode].strName);
//			if(type == 0)
//				setFiveRocksCustom("모델","일반캐스팅","C급",xRocks.strTemp,1);
//			else
//				setFiveRocksCustom("모델","고급캐스팅","C급",xRocks.strTemp,1);
//			break;
//		case 1:
//			sprintf(xRocks.strTemp, "%s",xModelData[xModel.newModelCode].strName);
//			if(type == 0)
//				setFiveRocksCustom("모델","일반캐스팅","B급",xRocks.strTemp,1);
//			else
//				setFiveRocksCustom("모델","고급캐스팅","B급",xRocks.strTemp,1);
//			break;
//		case 2:
//			sprintf(xRocks.strTemp, "%s",xModelData[xModel.newModelCode].strName);
//			if(type == 0)
//				setFiveRocksCustom("모델","일반캐스팅","A급",xRocks.strTemp,1);
//			else
//				setFiveRocksCustom("모델","고급캐스팅","A급",xRocks.strTemp,1);
//			break;
//		case 3:
//			sprintf(xRocks.strTemp, "%s",xModelData[xModel.newModelCode].strName);
//			if(type == 0)
//				setFiveRocksCustom("모델","일반캐스팅","S급",xRocks.strTemp,1);
//			else
//				setFiveRocksCustom("모델","고급캐스팅","S급",xRocks.strTemp,1);
//			break;
//		}                  
//	}
//	
//	if(xModel.newModelCountNum < 0)
//		xModel.newModelCountNum = 0;
//}


void drawFashionShowMainNew()
{
	int px = cx;
	int py = cy;
	
	drawPacker(imgFsBg, px, py, 0, 0, imgW(imgFsBg), imgH(imgFsBg), VH);
	subTemp[XPOS] = px+430;
	subTemp[YPOS] = py-280;
		
	switch(xFashionShow.state)
	{
	case FASHIONSHOW_STATE_MAIN:
	case FASHIONSHOW_STATE_INFO:
	case FASHIONSHOW_STATE_NOTICE_MAIN:
		drawPacker(imgFsBackBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsBackBtn), imgH(imgFsBackBtn)/2, VH);
		break;
	default:
		drawPacker(imgFsBackBtn, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgFsBackBtn)/2, imgW(imgFsBackBtn), imgH(imgFsBackBtn)/2, VH);
		break;
	}
	
	xTouchClr.wPos = imgW(imgFsBackBtn);
	xTouchClr.hPos = imgH(imgFsBackBtn)/2;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
		
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_23_RESULT:
		case TUTO_29_RESULT:
			if(xFashionShow.state == FASHIONSHOW_STATE_MAIN)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		case TUTO_29_FASHIONSHOWRANK_MENUTOUCH:
			xQuestTuto.isTutoClean = TRUE;
			break;
		case TUTO_29_FASHIONSHOWRANK_REPLAY:
			if(xQuestTuto.isTemp == TRUE)
				xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xFashionShow.xTouchNoticeBtn.xPos, xFashionShow.xTouchNoticeBtn.yPos, xFashionShow.xTouchNoticeBtn.wPos, xFashionShow.xTouchNoticeBtn.hPos);
	setAlpha(ALPHA_MAX);
	*/
	
	int iMax;
	int pos;
	int code;
	int upGrade;
	M_Boolean isSelect;
	int strLen;
	switch(xFashionShow.state)
	{
	case FASHIONSHOW_STATE_MAIN:
	case FASHIONSHOW_STATE_INFO:
	case FASHIONSHOW_STATE_NOTICE_MAIN:
		
		subTemp[XPOS] = px+76;
		subTemp[YPOS] = py-282;
		
		drawPacker(imgFsObj1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsObj1), imgH(imgFsObj1), VH);
		
		strLen = strlen(xFashionShow.strNoticeBar)*4;
		
		if(++xFashionShow.noticeBarAnyCnt > strLen)
			xFashionShow.noticeBarAnyCnt = 0;
		
		gSetClip(true,subTemp[XPOS]-45-(488/2), 0, 480, lcdH);
		setFontSize(20);
		gDrawStringBold(subTemp[XPOS]+300-(xFashionShow.noticeBarAnyCnt*5), subTemp[YPOS]+3, xFashionShow.strNoticeBar, VL, 97, 255, 227, 44, 27, 26);
		setFontSize(11);
		gSetClip(false,0, 0, lcdW, lcdH);
		
		if(xFashionShow.state == FASHIONSHOW_STATE_MAIN)
		{
			if(gameCnt%50 == 0)
			{
				setModelEff(subTemp[XPOS]+241-36, subTemp[YPOS]);
				setModelEff(subTemp[XPOS]+241+26, subTemp[YPOS]-16);
				setModelEff(subTemp[XPOS]+241+13, subTemp[YPOS]+13);
			}
		}
				
		xFashionShow.xTouchNoticeBtn.wPos = 120;
		xFashionShow.xTouchNoticeBtn.hPos = 100;
		xFashionShow.xTouchNoticeBtn.xPos = subTemp[XPOS]+241-xFashionShow.xTouchNoticeBtn.wPos/2;
		xFashionShow.xTouchNoticeBtn.yPos = subTemp[YPOS]-xFashionShow.xTouchNoticeBtn.hPos/2;

		drawPacker(imgFsRankBg, px-215, py+12, 0, 0, imgW(imgFsRankBg), imgH(imgFsRankBg), VH);
		for(int i=0;i<3;i++)
		{
			subTemp[XPOS] = px-181+(i*78);
			subTemp[YPOS] = py-202;
			
			if(i == xFashionShow.selectRankTabS)
				drawPacker(imgFsRankTab, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsRankTab), imgH(imgFsRankTab), VH);
						
			switch(i)
			{
			case 0:
				drawPacker(imgFsRankTabIcon0, subTemp[XPOS], subTemp[YPOS]-2, 0, 0, imgW(imgFsRankTabIcon0), imgH(imgFsRankTabIcon0), VH);
				break;
			case 1:
				drawPacker(imgFsRankTabIcon1, subTemp[XPOS], subTemp[YPOS]-2, 0, 0, imgW(imgFsRankTabIcon1), imgH(imgFsRankTabIcon1), VH);
				break;
			case 2:
				drawPacker(imgFsRankTabIcon2, subTemp[XPOS], subTemp[YPOS]-2, 0, 0, imgW(imgFsRankTabIcon2), imgH(imgFsRankTabIcon2), VH);
				break;
			}
						
			xFashionShow.xTouchRankTabSBtn[i].wPos = imgW(imgFsRankTabIcon0);
			xFashionShow.xTouchRankTabSBtn[i].hPos = imgH(imgFsRankTabIcon0);
			xFashionShow.xTouchRankTabSBtn[i].xPos = subTemp[XPOS]-xFashionShow.xTouchRankTabSBtn[i].wPos/2;
			xFashionShow.xTouchRankTabSBtn[i].yPos = subTemp[YPOS]-xFashionShow.xTouchRankTabSBtn[i].hPos/2;
			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_29_FASHIONSHOWRANK_REPLAY:
					if(i==0 && i != xFashionShow.selectRankTabS)
					{
						if(xFashionShow.state == FASHIONSHOW_STATE_MAIN)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					break;
				}
			}
		}
			
			
		if(0 >= xFashionShow.nowPageNumList[xFashionShow.selectRankTabS])
		{
			isSubTemp[13] = FALSE;
			for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
			{
				if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFASHIONSHOWRANK)
				{
					isSubTemp[13] = TRUE;
					break;
				}
			}
			if(isSubTemp[13] == FALSE)
			{
				//////////////////////////////////////////////////////////////////////////////////////////
				xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFashionShow.nowPageNumList[xFashionShow.selectRankTabS];
				xEventQueueNet.action[xEventQueueNet.totalNum] = xFashionShow.selectRankTabS;
				//0모든정보 1:랭킹정보(추가되는 랭킹페이지 전용)
				if(xFashionShow.nowPageNumList[xFashionShow.selectRankTabS] == 0)
					xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
				else
					xEventQueueNet.code[xEventQueueNet.totalNum] = 1;
				++xFashionShow.nowPageNumList[xFashionShow.selectRankTabS];
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFASHIONSHOWRANK, TRUE);
				//////////////////////////////////////////////////////////////////////////////////////////
			}
		}
			
		if(xFashionShow.isSeverNumLoad == FALSE)
		{
			xGame.isRotate = TRUE;
			xGame.rotateNum = 360-(gameCnt%120)*3;
			drawPacker(imgLoadingIcon0, px-220, py+20, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
			xGame.isRotate = FALSE;
		}
			
			
		//내랭킹정보
		subTemp[XPOS] = px-216;
		subTemp[YPOS] = py-110;
		drawFriendProfile(subTemp[XPOS]-110, subTemp[YPOS]-3, xNetData.userNum, 60);
		drawPacker(imgFsRankSlot4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsRankSlot4), imgH(imgFsRankSlot4), VH);
						
		sprintf(strTempS, "%d(%d표)",xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].score,xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].vote);
		
		gDrawStringBold(subTemp[XPOS]-73, subTemp[YPOS]-19, strTempS, VL, 252, 154, 18, 44, 27, 26);
			setFontSize(14);
		gDrawStringBold(subTemp[XPOS]-73, subTemp[YPOS]+11, xSaveTemp.strNickName, VL, 252, 255, 255, 82, 49, 38);
		setFontSize(11);
			
		if(xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].rank == 0)
		{
			gDrawStringBold(subTemp[XPOS]-189, subTemp[YPOS]-2, "미참여", VH, 86,	255,220 , 33, 20, 20);
		}
		else
		{			
			sprintf(strTempS, "%d위",xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].rank);
			if(xFashionShow.selectRankTabS == 1)
			{
				int per = 100;
				if(xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].totalPeople != 0)
					per = (xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].rank*100/xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].totalPeople);
				
				gDrawStringBold(subTemp[XPOS]-189, subTemp[YPOS]-9, strTempS, VH, 86,	255,220 , 33, 20, 20);
				setFontSize(8);
				sprintf(strTempS, "(%d%%)",per);
				gDrawStringBold(subTemp[XPOS]-189, subTemp[YPOS]+9, strTempS, VH, 86,	255,220 , 33, 20, 20);
				setFontSize(11);
			}
			else
				gDrawStringBold(subTemp[XPOS]-189, subTemp[YPOS]-2, strTempS, VH, 86,	255,220 , 33, 20, 20);
		}
				
		drawPacker(imgFsRankBtn0, subTemp[XPOS]+116, subTemp[YPOS]+1, 0, 0, imgW(imgFsRankBtn0), imgH(imgFsRankBtn0)/2, VH);
		drawPacker(imgFsRankBtn1, subTemp[XPOS]+188, subTemp[YPOS]+1, 0, 0, imgW(imgFsRankBtn1), imgH(imgFsRankBtn1)/2, VH);
			
		xFashionShow.xDragScrollRank.totalNum = xFashionShow.totalRankList[xFashionShow.selectRankTabS];
		xFashionShow.xDragScrollRank.posGab = 94;
		
		xFashionShow.xDragScrollRank.endPos = -(((xFashionShow.xDragScrollRank.totalNum-4)*xFashionShow.xDragScrollRank.posGab));
		
		if(xFashionShow.xDragScrollRank.totalNum < 4)
			xFashionShow.xDragScrollRank.endPos = 0;
		else
			xFashionShow.xDragScrollRank.endPos += 5;
		
		iMax = xFashionShow.xDragScrollRank.totalNum;
		
		dragScrollPrc(&xFashionShow.xDragScrollRank,1,FALSE);
		
		gSetClip(true,0, py-70, lcdW, 430);
		for(int i=0;i<iMax;i++)
		{
			pos = xFashionShow.xDragScrollRank.pos+(xFashionShow.xDragScrollRank.posGab*i);
			subTemp[XPOS] = px-216;
			subTemp[YPOS] = py-14+pos;
			if(subTemp[YPOS] < -xFashionShow.xDragScrollRank.posGab || subTemp[YPOS] > lcdH+xFashionShow.xDragScrollRank.posGab)
				continue;
			
			drawFriendProfile(subTemp[XPOS]-110, subTemp[YPOS]-3, xFashionShow.xRankSlot[xFashionShow.selectRankTabS][i].userCode, 60);
			
			switch(i)
			{
			case 0:
				drawPacker(imgFsRankSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsRankSlot0), imgH(imgFsRankSlot0), VH);
				break;
			case 1:
				drawPacker(imgFsRankSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsRankSlot1), imgH(imgFsRankSlot1), VH);
				break;
			case 2:
				drawPacker(imgFsRankSlot2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsRankSlot2), imgH(imgFsRankSlot2), VH);
				break;
			default:
				drawPacker(imgFsRankSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsRankSlot3), imgH(imgFsRankSlot3), VH);
				break;
			}
			
			if(i>=3)
				drawNumPacker(imgFsRankNum, subTemp[XPOS]-189, subTemp[YPOS]-3, i+1, -4, VH);

						
			
			
			sprintf(strTempS, "%d(%d표)",xFashionShow.xRankSlot[xFashionShow.selectRankTabS][i].score,xFashionShow.xRankSlot[xFashionShow.selectRankTabS][i].vote);
			
			gDrawStringBold(subTemp[XPOS]-73, subTemp[YPOS]-19, strTempS, VL, 252, 154, 18, 44, 27, 26);
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS]-73, subTemp[YPOS]+11, xFriendData[xFashionShow.xRankSlot[xFashionShow.selectRankTabS][i].friendDataNum].strNickName, VL, 252, 255, 255, 44, 27, 26);
			setFontSize(11);
			
			drawPacker(imgFsRankBtn0, subTemp[XPOS]+116, subTemp[YPOS]+1, 0, imgH(imgFsRankBtn0)/2, imgW(imgFsRankBtn0), imgH(imgFsRankBtn0)/2, VH);
			
			switch(xFashionShow.selectRankTabS)
			{
			case 0:
				drawPacker(imgFsRankBtn1, subTemp[XPOS]+188, subTemp[YPOS]+1, 0, imgH(imgFsRankBtn1)/2*(xFashionShow.xRankSlot[xFashionShow.selectRankTabS][i].isVote == FALSE?1:0), imgW(imgFsRankBtn1), imgH(imgFsRankBtn1)/2, VH);
				break;
			default:
				drawPacker(imgFsRankBtn1, subTemp[XPOS]+188, subTemp[YPOS]+1, 0, 0, imgW(imgFsRankBtn1), imgH(imgFsRankBtn1)/2, VH);
				break;
			}
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_29_FASHIONSHOWRANK_REPLAY:
					if(xFashionShow.selectRankTabS==0)
					{
						if(xFashionShow.state == FASHIONSHOW_STATE_MAIN)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+116;
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					break;
				}
			}
						
			switch(xFashionShow.selectRankTabS)
			{
			case 0:
				break;
			default:
				if((i+1)/10 >= xFashionShow.nowPageNumList[xFashionShow.selectRankTabS])
				{
					isSubTemp[13] = FALSE;
					for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
					{
						if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFASHIONSHOWRANK)
						{
							isSubTemp[13] = TRUE;
							break;
						}
					}
					if(isSubTemp[13] == FALSE)
					{
						//////////////////////////////////////////////////////////////////////////////////////////
						xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFashionShow.nowPageNumList[xFashionShow.selectRankTabS];
						xEventQueueNet.action[xEventQueueNet.totalNum] = xFashionShow.selectRankTabS;
						//0모든정보 1:랭킹정보(추가되는 랭킹페이지 전용)
						if(xFashionShow.nowPageNumList[xFashionShow.selectRankTabS] == 0)
							xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
						else
							xEventQueueNet.code[xEventQueueNet.totalNum] = 1;
						++xFashionShow.nowPageNumList[xFashionShow.selectRankTabS];
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFASHIONSHOWRANK, TRUE);
						//////////////////////////////////////////////////////////////////////////////////////////
					}
				}
				break;
			}
		}
		
		gSetClip(false,0, 0, lcdW, lcdH);
		
		
		subTemp[XPOS] = px-216;
		subTemp[YPOS] = py-14;
		xFashionShow.xDragScrollRank.selectNum = (-xFashionShow.xDragScrollRank.pos/xFashionShow.xDragScrollRank.posGab);
		for(int i=0;i<5;i++)
		{
			
			xFashionShow.xTouchRankSlot[i].wPos = imgW(imgFsRankSlot0);
			xFashionShow.xTouchRankSlot[i].hPos = imgH(imgFsRankSlot0)/2;
			xFashionShow.xTouchRankSlot[i].xPos = subTemp[XPOS]-xFashionShow.xTouchRankSlot[i].wPos/2;
			xFashionShow.xTouchRankSlot[i].yPos = subTemp[YPOS]+(xFashionShow.xDragScrollRank.posGab*(i))+(xFashionShow.xDragScrollRank.pos%xFashionShow.xDragScrollRank.posGab) - xFashionShow.xTouchRankSlot[i].hPos/2;
			
			xFashionShow.xTouchRankBtn[0][i].wPos = imgW(imgFsRankBtn0);
			xFashionShow.xTouchRankBtn[0][i].hPos = imgH(imgFsRankBtn0)/2;
			xFashionShow.xTouchRankBtn[0][i].xPos = subTemp[XPOS]+116-xFashionShow.xTouchRankBtn[0][i].wPos/2;
			xFashionShow.xTouchRankBtn[0][i].yPos = subTemp[YPOS]+(xFashionShow.xDragScrollRank.posGab*(i))+(xFashionShow.xDragScrollRank.pos%xFashionShow.xDragScrollRank.posGab) - xFashionShow.xTouchRankBtn[0][i].hPos/2;
			
			xFashionShow.xTouchRankBtn[1][i].wPos = imgW(imgFsRankBtn1);
			xFashionShow.xTouchRankBtn[1][i].hPos = imgH(imgFsRankBtn1)/2;
			xFashionShow.xTouchRankBtn[1][i].xPos = subTemp[XPOS]+188-xFashionShow.xTouchRankBtn[1][i].wPos/2;
			xFashionShow.xTouchRankBtn[1][i].yPos = subTemp[YPOS]+(xFashionShow.xDragScrollRank.posGab*(i))+(xFashionShow.xDragScrollRank.pos%xFashionShow.xDragScrollRank.posGab) - xFashionShow.xTouchRankBtn[1][i].hPos/2;
			
			/*
			 gSetColor(255, 255, 255);
			 setAlpha(100);
			 fillRect(xFashionShow.xTouchRankBtn[0][i].xPos, xFashionShow.xTouchRankBtn[0][i].yPos, xFashionShow.xTouchRankBtn[0][i].wPos, xFashionShow.xTouchRankBtn[0][i].hPos);
			 fillRect(xFashionShow.xTouchRankBtn[1][i].xPos, xFashionShow.xTouchRankBtn[1][i].yPos, xFashionShow.xTouchRankBtn[1][i].wPos, xFashionShow.xTouchRankBtn[1][i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
		}
		

		subTemp[XPOS] = px+185;
		subTemp[YPOS] = py+210;
			
		if(xFashionShow.isSeverNumLoad == FALSE)
		{
			xGame.isRotate = TRUE;
			xGame.rotateNum = 360-(gameCnt%120)*3;
			drawPacker(imgLoadingIcon0, px+270, py+10, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
			xGame.isRotate = FALSE;
		}
		else if(xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].rank == 0)
		{
			gDrawStringBold(px+270, py+4, "이번주 패션쇼를 참가한 이력이 없습니다.", VH, 97, 255, 227, 44, 27, 26);
		}
		else
		{
			drawPacker(imgModelSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelSlot1), imgH(imgModelSlot1), VH);
			//아랫조명
			drawPacker(imgModelSlot2, subTemp[XPOS], subTemp[YPOS]-177, 0, 0, imgW(imgModelSlot2), imgH(imgModelSlot2), VH);
			
			//윗조명
			xGame.isBlend = TRUE;
			xGame.blendType = BLEND_ADDP;
			drawPacker(imgModelSlot3, subTemp[XPOS]+9, subTemp[YPOS]-242, 0, 0, imgW(imgModelSlot3), imgH(imgModelSlot3), VH);
			xGame.isBlend = FALSE;
			
			
			int slotTemp = (gameCnt/90)%xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].totalModel;
			
			//마네킹
			XFACE xFaceTemp;
			int modelCode = xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].modelCode[slotTemp];
			
			xFaceTemp.hairNum = modelCode+1000;
			xFaceTemp.faceNum = modelCode+1000;
			xFaceTemp.faceType = FACE_TYPE_SMILE;
			
			XFITTINGLAYER xFTemp;
			memcpy(&xFTemp, &xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].xF[slotTemp], sizeof(xFTemp));
			
			xGame.fgameScale = 1.4f;
			xGame.fgameScaleCx = subTemp[XPOS]-2;
			xGame.fgameScaleCy = lcdH-(subTemp[YPOS]-202);
			
			drawFittingBody(subTemp[XPOS]-2, subTemp[YPOS]-202,&xFTemp,&xFaceTemp,TRUE,xModelData[modelCode].sex);
			
			xGame.fgameScale = 1.0f;
			xGame.fgameScaleCx = cx;
			xGame.fgameScaleCy = cy;
			
			subTemp[XPOS] = px+410;
			subTemp[YPOS] = py-100;
			
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 70;
			switch(xModelData[modelCode].grade)
			{
			case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]-110, subTemp[YPOS]+12, 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
			case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]-110, subTemp[YPOS]+12, 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
			case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]-110, subTemp[YPOS]+12, 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
			case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]-110, subTemp[YPOS]+12, 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
			}
			xGame.isReSizeDraw = FALSE;
			
			drawModelName(subTemp[XPOS]-20, subTemp[YPOS], modelCode);

			
			for(int k=0;k<xModelData[modelCode].upGradeMax;k++)
			{
				if(xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].modelUpgrade[slotTemp] > k)
					drawPacker(imgModelLv, subTemp[XPOS]-77+(26*k), subTemp[YPOS]+35, imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
				else
					drawPacker(imgModelLv, subTemp[XPOS]-77+(26*k), subTemp[YPOS]+35, 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
			}
			
			drawPacker(imgFsObj0, subTemp[XPOS], subTemp[YPOS]+70, 0, 0, imgW(imgFsObj0), imgH(imgFsObj0), TH);
			
			
			
			
			gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+119, "획득점수", VL, 255, 255, 255, 82, 49, 38);
			setFontSize(14);
			sprintf(strTempS,"%d",xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].score);
			gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+114+31, strTempS, VL, 86, 255, 220, 44, 26, 27);
			setFontSize(11);
			sprintf(strTempS,"(%d표)",xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].vote);
			gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+114+31+22, strTempS, VL, 86, 255, 220, 44, 26, 27);

			switch(xFashionShow.selectRankTabS)
			{
			case 0: gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+194, "친구랭킹", VL, 255, 255, 255, 82, 49, 38);break;
			case 1: gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+194, "월드랭킹", VL, 255, 255, 255, 82, 49, 38);break;
			case 2: gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+194, "추천랭킹", VL, 255, 255, 255, 82, 49, 38);break;
			}
			
			
			
			
			
			
			
			
			
			
			
			setFontSize(14);
			sprintf(strTempS,"%d위",xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].rank);
			gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+194+31, strTempS, VL, 86, 255, 220, 44, 26, 27);
			setFontSize(11);
			gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+252, "참가모델수", VL, 255, 255, 255, 82, 49, 38);
			setFontSize(14);
			sprintf(strTempS,"%d명",xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].totalModel);
			gDrawStringBold(subTemp[XPOS]-40, subTemp[YPOS]+252+31, strTempS, VL, 86, 255, 220, 44, 26, 27);
			setFontSize(11);
		}						
		break;
	case FASHIONSHOW_STATE_SELECTMODEL:
	case FASHIONSHOW_STATE_DRESSCODE:
			
		drawPacker(imgFsObj3, px-348, 40, 0, 0, imgW(imgFsObj3), imgH(imgFsObj3), VH);
			

		if(xModel.totalInventoryModel == 0)
		{
			xLinkInfo.total = 0;
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"보유하신 모델이 없습니다.");
			sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"모델을 캐스팅 해주세요.");
			drawLinkInfo(px-160,py+30,1);
		}
						
			
		xFashionShow.xDragScrollSelectModel.totalNum = xModel.totalInventoryModel;
		xFashionShow.xDragScrollSelectModel.posGab = 250;
		
		xFashionShow.xDragScrollSelectModel.endPos = -(((xFashionShow.xDragScrollSelectModel.totalNum-3)*xFashionShow.xDragScrollSelectModel.posGab));
		
		if(xFashionShow.xDragScrollSelectModel.totalNum < 4)
			xFashionShow.xDragScrollSelectModel.endPos = 0;
		else
			xFashionShow.xDragScrollSelectModel.endPos += 206;
		
		iMax = xFashionShow.xDragScrollSelectModel.totalNum;
		
		dragScrollPrc(&xFashionShow.xDragScrollSelectModel,1,FALSE);
		
		
		xFashionShow.selectSlotCnt = 0;
		for(int i=0;i<iMax;i++)
		{
			pos = xFashionShow.xDragScrollSelectModel.pos+(xFashionShow.xDragScrollSelectModel.posGab*i);
			subTemp[XPOS] = px-350+pos;
			subTemp[YPOS] = py+2;
			
			isSelect = FALSE;
			for(int s=0;s<FASHIONSHOW_SELECTMAX;s++)
			{
				if(xFashionShow.selectSlot[s] == i)
				{
					isSelect = TRUE;
					xFashionShow.selectSlotCnt++;
				}
			}
				
			if(subTemp[XPOS] < -xFashionShow.xDragScrollSelectModel.posGab || subTemp[XPOS] > lcdW+xFashionShow.xDragScrollSelectModel.posGab)
				continue;
						
			code = xInventoryModel[i].code;
			upGrade = xInventoryModel[i].upGrade;
			
			drawPacker(imgFsModelSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsModelSlot0), imgH(imgFsModelSlot0), VH);
			
			//마네킹
			XFACE xFaceTemp;
			int modelCode = code;
			xFaceTemp.hairNum = modelCode+1000;
			xFaceTemp.faceNum = modelCode+1000;
			xFaceTemp.faceType = FACE_TYPE_SMILE;
									
			drawFittingBody(subTemp[XPOS], subTemp[YPOS]-40,&xInventoryModel[i].xF,&xFaceTemp,TRUE,xModelData[modelCode].sex);


            
            if(xFashionShow.serverSex != DONT)
            {
                if(xFashionShow.serverSex == xModelData[modelCode].sex)
                {
                    drawPacker(imgDressCodeSex, subTemp[XPOS]+87, subTemp[YPOS]-187, imgW(imgDressCodeSlot)/2*xFashionShow.serverSex, 0, imgW(imgDressCodeSex)/2, imgH(imgDressCodeSex), VH);
                    
                    setAlpha(getBlinkAlpha());
                    
                    if(++xModel.blinkEffAnyCnt_sex[i]%40 == 0)
                        makeBlinkEff2(subTemp[XPOS]+87+(ranDom(-40, 40)), subTemp[YPOS]-187+(ranDom(-40, 40)),0);
                    
                    drawImage(&imgDressCodeEff[0], subTemp[XPOS]+87, subTemp[YPOS]-187, imgDressCodeEff[0].w/2*xFashionShow.serverSex, 0, imgDressCodeEff[0].w/2, imgDressCodeEff[0].h, VH);
                    setAlpha(ALPHA_MAX);
                }
            }
                
            
            
            
						
			switch(xModelData[modelCode].grade)
			{
			case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]+18-90, subTemp[YPOS]-175-6+335, 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
			case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]+18-90, subTemp[YPOS]-175-6+335, 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
			case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]+18-90, subTemp[YPOS]-175-6+335, 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
			case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]+18-90, subTemp[YPOS]-175-6+335, 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
			}
			
			drawModelName(subTemp[XPOS]+25, subTemp[YPOS]-175+335, modelCode);
			
			for(int k=0;k<xModelData[modelCode].upGradeMax;k++)
			{
				if(upGrade > k)
					drawPacker(imgModelLv, subTemp[XPOS]+29-57+(26*k), subTemp[YPOS]-175+30+335, imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
				else
					drawPacker(imgModelLv, subTemp[XPOS]+29-57+(26*k), subTemp[YPOS]-175+30+335, 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
			}
			
			//선택됨
			if(isSelect == TRUE)
			{
				drawPacker(imgFsModelSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsModelSlot1), imgH(imgFsModelSlot1), VH);
			}
			else
			{
				if(xWorldMap.isTuto == TRUE)
				{
					switch(xQuestTuto.nowNum)
					{
						case TUTO_23_FASHIONSHOWSTART:
							if(xFashionShow.state == FASHIONSHOW_STATE_SELECTMODEL)
							{
								if(playState == PLAY_PLAY)
								{
									if(xFashionShow.selectSlotCnt < 5)
									{
										xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
										xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
										xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
									}
								}
							}
							break;
					}
				}
			}
			
		}
			
		subTemp[XPOS] = px-350;
		subTemp[YPOS] = py+2;
		xFashionShow.xDragScrollSelectModel.selectNum = (-xFashionShow.xDragScrollSelectModel.pos/xFashionShow.xDragScrollSelectModel.posGab);
		for(int i=0;i<5;i++)
		{
			xFashionShow.xTouchSelectSlot[i].wPos = imgW(imgFsModelSlot0);
			xFashionShow.xTouchSelectSlot[i].hPos = imgH(imgFsModelSlot0);
			xFashionShow.xTouchSelectSlot[i].xPos = subTemp[XPOS] + (xFashionShow.xDragScrollSelectModel.posGab*(i))+(xFashionShow.xDragScrollSelectModel.pos%xFashionShow.xDragScrollSelectModel.posGab) - xFashionShow.xTouchSelectSlot[i].wPos/2;
			xFashionShow.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xFashionShow.xTouchSelectSlot[i].hPos/2;
			
			
			xFashionShow.xTouchFittingSlot[i].wPos = imgW(imgFsModelSlot0);
			xFashionShow.xTouchFittingSlot[i].hPos = 80;
			xFashionShow.xTouchFittingSlot[i].xPos = subTemp[XPOS] + (xFashionShow.xDragScrollSelectModel.posGab*(i))+(xFashionShow.xDragScrollSelectModel.pos%xFashionShow.xDragScrollSelectModel.posGab) - xFashionShow.xTouchFittingSlot[i].wPos/2;
			xFashionShow.xTouchFittingSlot[i].yPos = subTemp[YPOS]+180 - xFashionShow.xTouchFittingSlot[i].hPos/2;
						
			/*
			 gSetColor(255, 255, 255);
			 setAlpha(100);
			 fillRect(xFashionShow.xTouchSelectSlot[i].xPos, xFashionShow.xTouchSelectSlot[i].yPos, xFashionShow.xTouchSelectSlot[i].wPos, xFashionShow.xTouchSelectSlot[i].hPos);
			 setAlpha(ALPHA_MAX);
			 */
		}
			
		subTemp[XPOS] = px-130;
		subTemp[YPOS] = 42;
		for(int i=0;i<5;i++)
			drawPacker(imgFsSelectInfo, subTemp[XPOS]+(i*66), subTemp[YPOS], imgW(imgFsSelectInfo)/5*i, imgH(imgFsSelectInfo)/2*(i < xFashionShow.selectSlotCnt?1:0), imgW(imgFsSelectInfo)/5, imgH(imgFsSelectInfo)/2, VH);
						
		subTemp[XPOS] = lcdW-270;
		subTemp[YPOS] = 37;
		drawPacker(imgDressCodeIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgDressCodeIcon0), imgH(imgDressCodeIcon0), VH);
			
		subTemp[11] = DONT;
		switch(gameCnt%50)
		{
		case 41:subTemp[11] = 0;	break;
		case 42:subTemp[11] = 1;	break;
		case 43:subTemp[11] = 2;	break;
		case 44:subTemp[11] = 3;	break;
		case 45:subTemp[11] = 4;	break;
		}
		
		if(subTemp[11] != DONT)
		{
			drawPacker(imgDressCodeIcon1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgDressCodeIcon1)/5*subTemp[11], imgW(imgDressCodeIcon1), imgH(imgDressCodeIcon1)/5, VH);
		}
			
									
		xFashionShow.xTouchDressCodeIcon.wPos = imgW(imgDressCodeIcon0);
		xFashionShow.xTouchDressCodeIcon.hPos = imgH(imgDressCodeIcon0);
		xFashionShow.xTouchDressCodeIcon.xPos = subTemp[XPOS]-xFashionShow.xTouchDressCodeIcon.wPos/2;
		xFashionShow.xTouchDressCodeIcon.yPos = subTemp[YPOS]-xFashionShow.xTouchDressCodeIcon.hPos/2;
		break;
	}

	subTemp[XPOS] = px+380;
	subTemp[YPOS] = py+276;
	
	drawPacker(imgFsObj2, subTemp[XPOS]-71, subTemp[YPOS], 0, 0, imgW(imgFsObj2), imgH(imgFsObj2), VH);
		
	if(xFashionShow.isTodayFree == TRUE)
	{
		drawPacker(imgFashionShowFree, subTemp[XPOS]-143, subTemp[YPOS]-4, 0, 0, imgW(imgFashionShowFree), imgH(imgFashionShowFree), VH);
	}
	else
	{
		gSetColor(254, 225, 11);
		sprintf(strTempS, "%d",xSaveTemp.tired.oriData);
		setFontSize(20);
		gDrawString(subTemp[XPOS]-129, subTemp[YPOS]+1, strTempS, VR);
		setFontSize(11);
	}
	
	switch(xFashionShow.state)
	{
	case FASHIONSHOW_STATE_MAIN:
	case FASHIONSHOW_STATE_NOTICE_MAIN:
	case FASHIONSHOW_STATE_INFO:
		drawPacker(imgFsBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsBtn0), imgH(imgFsBtn0), VH);
		if(xWorldMap.isTuto == TRUE)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_23_FASHIONSHOWSELECT:
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
				break;
			}
		}
					
		break;
	case FASHIONSHOW_STATE_SELECTMODEL:
	case FASHIONSHOW_STATE_DRESSCODE:
		drawPacker(imgFsBtn2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsBtn2), imgH(imgFsBtn2), VH);
		drawPacker(imgFsBtn1, subTemp[XPOS]+50, subTemp[YPOS]-37, 0, 0, imgW(imgFsBtn1), imgH(imgFsBtn1), VH);
		drawNumPacker(imgFsBtn3, subTemp[XPOS]+50+15, subTemp[YPOS]-37-3, (xFashionShow.userTired.oriData-xModelSkill.bonusPer[MODELSKILL_TYPE_RUNWAY_CANDY]), -2, VR);

            
            
        //오늘 입장가능 횟수
        drawPacker(imgFsObj4, subTemp[XPOS]-416, subTemp[YPOS]+6, 0, 0, imgW(imgFsObj4), imgH(imgFsObj4), VH);
        setFontSize(21);
        gSetColor(255, 255, 255);
            sprintf(strTempS, "%d/%d",xFashionShow.remainCount,xFashionShow.maxCount);
        gDrawString(subTemp[XPOS]-282, subTemp[YPOS]+6+1, strTempS, VH);
        setFontSize(11);
            
		if(xWorldMap.isTuto == TRUE)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_23_FASHIONSHOWSTART:
				if(xFashionShow.state == FASHIONSHOW_STATE_SELECTMODEL)
				{
					if(xFashionShow.selectSlotCnt > 0)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
				}
				break;
			}
		}
			
		if(xWorldMap.isTuto == TRUE)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_23_FASHIONSHOWSELECT:
				xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
		break;
	}
	
	
	
	xFashionShow.xTouchStartBtn.wPos = imgW(imgFsBtn0);
	xFashionShow.xTouchStartBtn.hPos = imgH(imgFsBtn0);
	xFashionShow.xTouchStartBtn.xPos = subTemp[XPOS]-xFashionShow.xTouchStartBtn.wPos/2;
	xFashionShow.xTouchStartBtn.yPos = subTemp[YPOS]-xFashionShow.xTouchStartBtn.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xFashionShow.xTouchStartBtn.xPos, xFashionShow.xTouchStartBtn.yPos, xFashionShow.xTouchStartBtn.wPos, xFashionShow.xTouchStartBtn.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
}


void drawDressCode()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	drawPacker(imgDressCodeBg, px, py, 0, 0, imgW(imgDressCodeBg), imgH(imgDressCodeBg), VH);
	setFontSize(8);
	gDrawStringBold(px-170, py-120-10, "드레스아이콘을 활용해 보세요", VH, 97, 255, 227, 44, 27, 26);
	gDrawStringBold(px-170, py-120+10, "고득점을 노릴수 있어요", VH, 97, 255, 227, 44, 27, 26);
	setFontSize(11);
	int slotCnt = 0;
	
    
	for(int ttt=0;ttt<xFashionShow.serverTotalTrend;ttt++)
	{
		subTemp[XPOS] = px+8+((slotCnt%3)*107);
		subTemp[YPOS] = py-204+((slotCnt/3)*150);
		drawPacker(imgDressCodeSlot, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2, 0, imgW(imgDressCodeSlot)/2, imgH(imgDressCodeSlot), VH);
		drawFittingF(subTemp[XPOS], subTemp[YPOS], xFashionShow.severTrendSlot[ttt], 45);
		setMapData(xFashionShow.severTrendSlot[ttt]);
		sprintf(strTempS, "%s",xFashionData[xMap.type][xMap.listNum].strName);
		gSetColor(172,148,131);
		setFontSize(8);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
		setFontSize(11);
		slotCnt++;
	}
	
	for(int ttt=0;ttt<xFashionShow.serverTotalConcept;ttt++)
	{
		subTemp[XPOS] = px+8+((slotCnt%3)*107);
		subTemp[YPOS] = py-204+((slotCnt/3)*150);
		
		drawPacker(imgDressCodeSlot, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2, 0, imgW(imgDressCodeSlot)/2, imgH(imgDressCodeSlot), VH);
		drawPacker(imgConceptionIcon, subTemp[XPOS], subTemp[YPOS], imgW(imgConceptionIcon)/9*xFashionShow.severConceptSlot[ttt], 0, imgW(imgConceptionIcon)/9, imgH(imgConceptionIcon), VH);
		getFashionConceptStr(strTempS,xFashionShow.severConceptSlot[ttt]);
		gSetColor(172,148,131);
		setFontSize(8);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
		setFontSize(11);
		slotCnt++;
	}
	for(int ttt=0;ttt<xFashionShow.serverTotalColor;ttt++)
	{
		subTemp[XPOS] = px+8+((slotCnt%3)*107);
		subTemp[YPOS] = py-204+((slotCnt/3)*150);
		drawPacker(imgDressCodeSlot, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2, 0, imgW(imgDressCodeSlot)/2, imgH(imgDressCodeSlot), VH);
		switch(xFashionShow.severColorSlot[ttt])
		{
		case 0:drawPacker(imgColorIcon0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon0), imgH(imgColorIcon0), VH);break;
		case 1:drawPacker(imgColorIcon1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon1), imgH(imgColorIcon1), VH);break;
		case 2:drawPacker(imgColorIcon2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon2), imgH(imgColorIcon2), VH);break;
		case 3:drawPacker(imgColorIcon3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon3), imgH(imgColorIcon3), VH);break;
		case 4:drawPacker(imgColorIcon4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon4), imgH(imgColorIcon4), VH);break;
		case 5:drawPacker(imgColorIcon5, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon5), imgH(imgColorIcon5), VH);break;
		case 6:drawPacker(imgColorIcon6, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon6), imgH(imgColorIcon6), VH);break;
		case 7:drawPacker(imgColorIcon7, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon7), imgH(imgColorIcon7), VH);break;
		case 8:drawPacker(imgColorIcon8, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon8), imgH(imgColorIcon8), VH);break;
		case 9:drawPacker(imgColorIcon9, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon9), imgH(imgColorIcon9), VH);break;
		case 10:drawPacker(imgColorIcon10, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon10), imgH(imgColorIcon10), VH);break;
		case 11:drawPacker(imgColorIcon11, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgColorIcon11), imgH(imgColorIcon11), VH);break;
				
		}
				
		getFashionColorStr(strTempS,xFashionShow.severColorSlot[ttt]);
		gSetColor(172,148,131);
		setFontSize(8);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
		setFontSize(11);
		slotCnt++;
	}
	
	if(xFashionShow.serverSex != DONT)
	{
		subTemp[XPOS] = px+8+((slotCnt%3)*107);
		subTemp[YPOS] = py-204+((slotCnt/3)*150);
		drawPacker(imgDressCodeSlot, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2, 0, imgW(imgDressCodeSlot)/2, imgH(imgDressCodeSlot), VH);
		drawPacker(imgDressCodeSex, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2*xFashionShow.serverSex, 0, imgW(imgDressCodeSex)/2, imgH(imgDressCodeSex), VH);
		sprintf(strTempS, "%s",xFashionShow.serverSex ==0?"여자":"남자");
		gSetColor(172,148,131);
		setFontSize(8);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
		setFontSize(11);
		slotCnt++;
	}
	
	if(xFashionShow.serverInOut != DONT)
	{
		subTemp[XPOS] = px+8+((slotCnt%3)*107);
		subTemp[YPOS] = py-204+((slotCnt/3)*150);
		drawPacker(imgDressCodeSlot, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2, 0, imgW(imgDressCodeSlot)/2, imgH(imgDressCodeSlot), VH);
		drawPacker(imgDressCodeInOut, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeInOut)/2*xFashionShow.serverInOut, 0, imgW(imgDressCodeInOut)/2, imgH(imgDressCodeInOut), VH);
		sprintf(strTempS, "%s",xFashionShow.serverInOut ==0?"턱아웃":"턱인");
		gSetColor(172,148,131);
		setFontSize(8);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
		setFontSize(11);
		slotCnt++;
	}
	
	if(xFashionShow.serverLayeredMin != DONT)
	{
		subTemp[XPOS] = px+8+((slotCnt%3)*107);
		subTemp[YPOS] = py-204+((slotCnt/3)*150);
		drawPacker(imgDressCodeSlot, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2, 0, imgW(imgDressCodeSlot)/2, imgH(imgDressCodeSlot), VH);
		drawPacker(imgDressCodeLayered0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgDressCodeLayered0), imgH(imgDressCodeLayered0), VH);
		drawPacker(imgDressCodeLayered2, subTemp[XPOS]-13, subTemp[YPOS]+30, imgW(imgDressCodeLayered2)/10*xFashionShow.serverLayeredMin, 0, imgW(imgDressCodeLayered2)/10, imgH(imgDressCodeLayered2), VR);
		drawPacker(imgDressCodeLayered3, subTemp[XPOS]-13, subTemp[YPOS]+30, 0, 0, imgW(imgDressCodeLayered3), imgH(imgDressCodeLayered3)/2, VL);
		sprintf(strTempS, "레이어드횟수");
		gSetColor(172,148,131);
		setFontSize(8);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
		setFontSize(11);
		slotCnt++;
	}
	
	if(xFashionShow.serverLayeredMax != DONT)
	{
		subTemp[XPOS] = px+8+((slotCnt%3)*107);
		subTemp[YPOS] = py-204+((slotCnt/3)*150);
		drawPacker(imgDressCodeSlot, subTemp[XPOS], subTemp[YPOS], imgW(imgDressCodeSlot)/2, 0, imgW(imgDressCodeSlot)/2, imgH(imgDressCodeSlot), VH);
		drawPacker(imgDressCodeLayered0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgDressCodeLayered0), imgH(imgDressCodeLayered0), VH);
		drawPacker(imgDressCodeLayered2, subTemp[XPOS]-13, subTemp[YPOS]+30, imgW(imgDressCodeLayered2)/10*xFashionShow.serverLayeredMax, 0, imgW(imgDressCodeLayered2)/10, imgH(imgDressCodeLayered2), VR);
		drawPacker(imgDressCodeLayered3, subTemp[XPOS]-13, subTemp[YPOS]+30, 0, 0, imgW(imgDressCodeLayered3), imgH(imgDressCodeLayered3)/2, VL);
		sprintf(strTempS, "레이어드횟수");
		gSetColor(172,148,131);
		setFontSize(8);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+64, strTempS, VH);
		setFontSize(11);
		slotCnt++;
	}
	
	subTemp[XPOS] = px+120;
	subTemp[YPOS] = py+239;
	drawBtn(subTemp[XPOS], subTemp[YPOS], BTN_OK_CONFIRM);
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_23_FASHIONSHOWDRESSCODE:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
}


int getModelKeyToSlotNum(int key)
{
	int resultSlotNum = DONT;
	
	for(int i=0;i<xModel.totalInventoryModel;i++)
	{
		if(xInventoryModel[i].key == key)
		{
			resultSlotNum = i;
			break;
		}
	}
	return resultSlotNum;
}

int getModelKeyToSlotNumFRIEND(int key)
{
	int resultSlotNum = DONT;
	
	for(int i=0;i<xModel.totalInventoryModel_FRIEND;i++)
	{
		if(xInventoryModel_FRIEND[i].key == key)
		{
			resultSlotNum = i;
			break;
		}
	}
	return resultSlotNum;
}


void setStaffFitting()
{
	int codeHairNow;
	int codeHairNew;
	int codeFaceNow;
	int codeFaceNew;
	int layer[16];
	//////////////////////실제 피팅 내용 스태프에 적용하기////////////////////////////
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
		codeHairNow = xPaymentAssistant[0].xFace.hairNum;
		codeHairNew = xFitting.xFace.hairNum;
		codeFaceNow = xPaymentAssistant[0].xFace.faceNum;
		codeFaceNew = xFitting.xFace.faceNum;
		for(int l=0;l<16;l++)
			layer[l] = xPaymentAssistant[0].xF.code[l];
		
		memcpy(&xPaymentAssistant[0].xF,&xFitting.xF[xFitting.gender],sizeof(xPaymentAssistant[0].xF));
		memcpy(&xPaymentAssistant[0].xFace,&xFitting.xFace,sizeof(xPaymentAssistant[0].xFace));
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		codeHairNow = xShopAssistant[0][0].xFace.hairNum;
		codeHairNew = xFitting.xFace.hairNum;
		codeFaceNow = xShopAssistant[0][0].xFace.faceNum;
		codeFaceNew = xFitting.xFace.faceNum;
		for(int l=0;l<16;l++)
			layer[l] = xShopAssistant[0][0].xF.code[l];
		
		memcpy(&xShopAssistant[0][0].xF,&xFitting.xF[xFitting.gender],sizeof(xShopAssistant[0][0].xF));
		memcpy(&xShopAssistant[0][0].xFace,&xFitting.xFace,sizeof(xShopAssistant[0][0].xFace));
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
		codeHairNow = xPaymentAssistant[1].xFace.hairNum;
		codeHairNew = xFitting.xFace.hairNum;
		codeFaceNow = xPaymentAssistant[1].xFace.faceNum;
		codeFaceNew = xFitting.xFace.faceNum;
		for(int l=0;l<16;l++)
			layer[l] = xPaymentAssistant[1].xF.code[l];
		
		memcpy(&xPaymentAssistant[1].xF,&xFitting.xF[xFitting.gender],sizeof(xPaymentAssistant[1].xF));
		memcpy(&xPaymentAssistant[1].xFace,&xFitting.xFace,sizeof(xPaymentAssistant[1].xFace));
		break;
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		codeHairNow = xShopAssistant[1][0].xFace.hairNum;
		codeHairNew = xFitting.xFace.hairNum;
		codeFaceNow = xShopAssistant[1][0].xFace.faceNum;
		codeFaceNew = xFitting.xFace.faceNum;
		for(int l=0;l<16;l++)
			layer[l] = xShopAssistant[1][0].xF.code[l];
		
		memcpy(&xShopAssistant[1][0].xF,&xFitting.xF[xFitting.gender],sizeof(xShopAssistant[1][0].xF));
		memcpy(&xShopAssistant[1][0].xFace,&xFitting.xFace,sizeof(xShopAssistant[1][0].xFace));
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		codeHairNow = xPaymentAssistant[2].xFace.hairNum;
		codeHairNew = xFitting.xFace.hairNum;
		codeFaceNow = xPaymentAssistant[2].xFace.faceNum;
		codeFaceNew = xFitting.xFace.faceNum;
		for(int l=0;l<16;l++)
			layer[l] = xPaymentAssistant[2].xF.code[l];
		
		memcpy(&xPaymentAssistant[2].xF,&xFitting.xF[xFitting.gender],sizeof(xPaymentAssistant[2].xF));
		memcpy(&xPaymentAssistant[2].xFace,&xFitting.xFace,sizeof(xPaymentAssistant[2].xFace));
		break;
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		codeHairNow = xShopAssistant[2][0].xFace.hairNum;
		codeHairNew = xFitting.xFace.hairNum;
		codeFaceNow = xShopAssistant[2][0].xFace.faceNum;
		codeFaceNew = xFitting.xFace.faceNum;
		for(int l=0;l<16;l++)
			layer[l] = xShopAssistant[2][0].xF.code[l];
		
		memcpy(&xShopAssistant[2][0].xF,&xFitting.xF[xFitting.gender],sizeof(xShopAssistant[2][0].xF));
		memcpy(&xShopAssistant[2][0].xFace,&xFitting.xFace,sizeof(xShopAssistant[2][0].xFace));
		break;
	}
	
	//////////////////////////////////////////////////////////////////////////////////
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		for(int i=0;i<16;i++)
		{
			if(xFitting.xF[xFitting.gender].code[i] != DONT)
				setQuest(19, 1, xFitting.xF[xFitting.gender].code[i]);
		}
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
	case STAFF_SLOT_SHOPASSISTANT1_2F:
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		for(int i=0;i<16;i++)
		{
			if(xFitting.xF[xFitting.gender].code[i] != DONT)
				setQuest(34, 1, xFitting.xF[xFitting.gender].code[i]);
		}
		break;
	}
	
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
		xEventQueueNet.floor[xEventQueueNet.totalNum] = 0;
		xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
		sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xPaymentAssistant[0].strName);
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		xEventQueueNet.floor[xEventQueueNet.totalNum] = 0;
		xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
		sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xShopAssistant[0][0].strName);
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
		xEventQueueNet.floor[xEventQueueNet.totalNum] = 1;
		xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
		sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xPaymentAssistant[1].strName);
		break;
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		xEventQueueNet.floor[xEventQueueNet.totalNum] = 1;
		xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
		sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xShopAssistant[1][0].strName);
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		xEventQueueNet.floor[xEventQueueNet.totalNum] = 2;
		xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
		sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xPaymentAssistant[2].strName);
		break;
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		xEventQueueNet.floor[xEventQueueNet.totalNum] = 2;
		xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
		sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum],"%s",xShopAssistant[2][0].strName);
		break;
	}
	xEventQueueNet.sex[xEventQueueNet.totalNum] = xFitting.gender;
	xEventQueueNet.layer[xEventQueueNet.totalNum][0] = xFitting.xFace.hairNum;
	xEventQueueNet.layer[xEventQueueNet.totalNum][1] = xFitting.xFace.faceNum;
	
	for(int f=0;f<16;f++)
	{
		if(xFitting.xF[xFitting.gender].code[f] != DONT)
		{
			switch(xFitting.xF[xFitting.gender].code[f]/1000)
			{
				case 1://상의
					xEventQueueNet.layer[xEventQueueNet.totalNum][2] = xFitting.xF[xFitting.gender].code[f];
					break;
				case 2://하의
					xEventQueueNet.layer[xEventQueueNet.totalNum][3] = xFitting.xF[xFitting.gender].code[f];
					break;
				case 3://원피스
					xEventQueueNet.layer[xEventQueueNet.totalNum][4] = xFitting.xF[xFitting.gender].code[f];
					break;
				case 4://신발
					xEventQueueNet.layer[xEventQueueNet.totalNum][5] = xFitting.xF[xFitting.gender].code[f];
					break;
			}
		}
	}
	
	xEventQueueNet.open[xEventQueueNet.totalNum] = xFitting.xF[xFitting.gender].isInFitting;
	
	if(xEventQueueNet.layer[xEventQueueNet.totalNum][2] == 0)
		xEventQueueNet.layer[xEventQueueNet.totalNum][2] = DONT;
	if(xEventQueueNet.layer[xEventQueueNet.totalNum][3] == 0)
		xEventQueueNet.layer[xEventQueueNet.totalNum][3] = DONT;
	if(xEventQueueNet.layer[xEventQueueNet.totalNum][4] == 0)
		xEventQueueNet.layer[xEventQueueNet.totalNum][4] = DONT;
	if(xEventQueueNet.layer[xEventQueueNet.totalNum][5] == 0)
		xEventQueueNet.layer[xEventQueueNet.totalNum][5] = DONT;
	
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_STAFF, TRUE);
	//////////////////////////////////////////////////////////////////////////////////
}


void drawModelFitting()
{
	int px = cx;
	int py = cy;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_22_MODELFITTINGBTN:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	//피팅창
    drawBgFillRect();
	drawImage(&imgFittingBg[0], px, py, 0, 0, imgFittingBg[0].w, imgFittingBg[0].h, VH);
	
	//카테고리탭
	int iMaxTabS;
	iMaxTabS = FITTINGTABMAX;
	subTemp[XPOS] = px-395;
	subTemp[YPOS] = py-275;
	
	
	for(int i=0;i<iMaxTabS;i++)
	{
		int h=0;
		if(i == xFitting.selectTabB)
		{
			h=-18;
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], imgW(imgMenu8)/2, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			
			switch(i)
			{
			case 0:sprintf(strTempS, "아우터");break;
			case 1:sprintf(strTempS, "상의");break;
			case 2:sprintf(strTempS, "하의");break;
			case 3:sprintf(strTempS, "원피스");break;
			case 4:sprintf(strTempS, "신발");break;
			case 5:sprintf(strTempS, "가방");break;
			case 6:sprintf(strTempS, "기타");break;
			}
			gDrawStringBold(subTemp[XPOS]+(i*76), subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
		}
		else
		{
			h=0;
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], 0, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_22_MODELFITTINGOK:
					if(checkXfLimit(&xFitting.xF[xFitting.gender]) == FALSE)
					{
						if(i == 1 || i == 2)
						{
							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
						}
					}
					break;
				}
			}
			
		}
		drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*i, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
	}
	
	for(int i=0;i<iMaxTabS;i++)
	{
		
		xTouchFittingTabB[i].wPos = imgW(imgMenu8)/2-10;
		xTouchFittingTabB[i].hPos = imgH(imgMenu8);
		xTouchFittingTabB[i].xPos = subTemp[XPOS]+5+(i*76) - xTouchFittingTabB[i].wPos/2;
		xTouchFittingTabB[i].yPos = subTemp[YPOS] - xTouchFittingTabB[i].hPos/2;
	}

	
	//성별
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py-198;
	setFontSize(14);
	drawModelNameString(subTemp[XPOS], subTemp[YPOS], VH, xInventoryModel[xModelFitting.inventoryNum].code);
	setFontSize(11);

			
	//피팅창
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+5;
	drawImage(&imgFittingBg[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingBg[1].w, imgFittingBg[1].h, VH);
	drawPacker(imgCatalogSex, subTemp[XPOS]-94,subTemp[YPOS]-175, imgW(imgCatalogSex)/2*xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);

	
			
	//레이어드수파악
	xFitting.xF[xFitting.gender].layeredNum = 0;
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xFitting.xF[xFitting.gender].code[ff] != DONT)
			xFitting.xF[xFitting.gender].layeredNum++;
	}
			
	XFACE xFaceTemp;
	xFaceTemp.hairNum = 1000+xInventoryModel[xModelFitting.inventoryNum].code;
	xFaceTemp.faceNum = 1000+xInventoryModel[xModelFitting.inventoryNum].code;
	xFaceTemp.faceType = 0;
	drawFittingBody(subTemp[XPOS], subTemp[YPOS],&xFitting.xF[xFitting.gender],&xFaceTemp,TRUE,xFitting.gender);
		
	//레이어드정보
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+208;
	subTemp[WPOS] = imgW(imgFittingMenu2) * xFitting.xF[xFitting.gender].layeredNum / (xModelData[xInventoryModel[xModelFitting.inventoryNum].code].layeredNum+getModelLayered(xModelFitting.inventoryNum,0));
	
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*3, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*2, subTemp[WPOS], imgH(imgFittingMenu2)/4, VL);
	drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
	
	gDrawStringBold(subTemp[XPOS]-60, subTemp[YPOS], "레이어드", VL, 255, 170, 21, 44, 27, 26);
	
	
	
	

	
	sprintf(strTempS, "%d/%d",xFitting.xF[xFitting.gender].layeredNum,xModelData[xInventoryModel[xModelFitting.inventoryNum].code].layeredNum+getModelLayered(xModelFitting.inventoryNum,0));
	gDrawStringBold(subTemp[XPOS]+84, subTemp[YPOS], strTempS, VR, 255, 170, 21, 44, 27, 26);
	
	//버튼
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+268;
	//원래대로
	drawPacker(imgBtn2, subTemp[XPOS]-56, subTemp[YPOS], 0, imgH(imgBtn2)/2, imgW(imgBtn2), imgH(imgBtn2)/2, VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-2-56, subTemp[YPOS]-2-12, "모두", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
	gDrawStringBold(subTemp[XPOS]-2-56-2, subTemp[YPOS]-2+12, "벗기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
	setFontSize(11);

	
	
	drawPacker(imgBtn1, subTemp[XPOS]+40, subTemp[YPOS], 0, imgH(imgBtn1)/2, imgW(imgBtn1), imgH(imgBtn1)/2, VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-4+40, subTemp[YPOS]-2, "적용하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
	setFontSize(11);

		
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_22_MODELFITTINGOK:
			if(checkXfLimit(&xFitting.xF[xFitting.gender]) == TRUE)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+40;
				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		}
	}
	
	xTouchFittingReset.wPos = imgW(imgBtn2);
	xTouchFittingReset.hPos = imgH(imgBtn2)/2;
	xTouchFittingReset.xPos = subTemp[XPOS]-56-xTouchFittingReset.wPos/2;
	xTouchFittingReset.yPos = subTemp[YPOS]-xTouchFittingReset.hPos/2;
	
	xTouchFittingSave.wPos = imgW(imgBtn1);
	xTouchFittingSave.hPos = imgH(imgBtn1)/2;
	xTouchFittingSave.xPos = subTemp[XPOS]+40-xTouchFittingSave.wPos/2;
	xTouchFittingSave.yPos = subTemp[YPOS]-xTouchFittingSave.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchFittingSave.xPos, xTouchFittingSave.yPos, xTouchFittingSave.wPos, xTouchFittingSave.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	
	//세부메뉴
	subTemp[XPOS] = px-350;
	subTemp[YPOS] = py+76;
	
	xFitting.totalNumS = xFitting.totalSlot[xFitting.selectTabB];
	
	xDragScrollFittingS.totalNum = 1+(xFitting.totalNumS-1)/8;
	xDragScrollFittingS.posGab = 640;
	
	
	if(xFitting.totalNumS == 0)
	{
		
		xLinkInfo.total = 0;
		sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"피팅 가능한 의상이 없습니다.");
		sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"의상 라이센스를 구매 해주세요.");
		drawLinkInfo(px-280,py-10,0);
				
		drawPacker(imgPopupBtn0, px-100, py+110, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		setFontSize(20);
		gDrawStringBold(px-100, py+110, "의상 구매", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
		setFontSize(11);
		
		xTouchLink.wPos = imgW(imgPopupBtn0);
		xTouchLink.hPos = imgH(imgPopupBtn0)/2;
		xTouchLink.xPos = px-75-xTouchLink.wPos/2;
		xTouchLink.yPos = py+110-xTouchLink.hPos/2;
	}
	

	
	dragScrollPrc(&xDragScrollFittingS,0,FALSE);
	
	int totalLayer = 0;
	int layerInfo[20];
	M_Boolean isAdd = FALSE;
	
	int slotCode;
	int slotNum;
	int pos;
	
	for(int i=0;i<xFitting.totalNumS;i++)
	{
		slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
		setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
		
		isAdd = FALSE;
		for(int k=0;k<totalLayer;k++)
		{
			if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
			{
				isAdd = TRUE;
				break;
			}
			else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
			{
				isAdd = TRUE;
				for(int kk=totalLayer;kk>k;kk--)
				{
					layerInfo[kk] = layerInfo[kk-1];
				}
				layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
				totalLayer++;
				break;
			}
		}
		
		if(isAdd == FALSE)
		{
			layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
		}
	}
			
	
	
	
	int setClipX = px-410;
	int setClipW = 600;
    
    
	gSetClip(true,setClipX, 0, setClipW, lcdH);

	for(int page=-1;page<=1;page++)
	{
		if(xDragScrollFittingS.selectNum+page >= 0 && xDragScrollFittingS.selectNum+page < xDragScrollFittingS.totalNum)
		{
			for(int i=0;i<8;i++)
			{
				if(((xDragScrollFittingS.selectNum+page)*8)+i >= xFitting.totalNumS)
					break;
				
				pos = xDragScrollFittingS.pos+(xDragScrollFittingS.posGab*page);
				subTemp[XPOS] = px-335+pos+((i%4)*150);
				subTemp[YPOS] = py-105+((i/4)*236);
				
				slotNum = ((xDragScrollFittingS.selectNum+page)*8)+i;
				slotCode = xFitting.xSlot[xFitting.selectTabB][slotNum].code;
				drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
				setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
				
				//성별
				drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFashionData[xMap.type][xMap.listNum].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
				//아이템명
				drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);

				
				gSetColor(44, 27, 26);
				setLabelWidth(150);
				gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFashionData[xMap.type][xMap.listNum].strName, VH);
				setLabelWidth(0);
                
                
                
                bool isDressCode_Trend = false;
                bool isDressCode_Concept = false;
                bool isDressCode_Color = false;
                int DressCodeHH = 0;
                
                for(int ttt=0;ttt<xFashionShow.serverTotalTrend;ttt++)
                {
                    if(xFashionShow.severTrendSlot[ttt] == slotCode)
                    {
                        if(xModel.state!=MODELCOLLECT_STATE_FITTING)
                        {
                            isDressCode_Trend = true;
                        }
                    }
                }
                
                for(int ttt=0;ttt<xFashionShow.serverTotalConcept;ttt++)
                {
                    if(xFashionData[xMap.type][xMap.listNum].concept == xFashionShow.severConceptSlot[ttt])
                    {
                        if(xModel.state!=MODELCOLLECT_STATE_FITTING)
                        {
                            isDressCode_Concept = true;
                        }
                    }
                }
                
                for(int ttt=0;ttt<xFashionShow.serverTotalColor;ttt++)
                {
                    if(xFashionData[xMap.type][xMap.listNum].color == xFashionShow.severColorSlot[ttt])
                    {
                        if(xModel.state!=MODELCOLLECT_STATE_FITTING)
                        {
                            isDressCode_Color = true;
                        }
                    }
                }

                xGame.isReSizeDraw = true;
                xGame.reSize = 50;
                
                
                if(isDressCode_Trend == true)
                {
                    drawImage(&imgDressCodeEff[3], subTemp[XPOS]+55, subTemp[YPOS]-55, 0, 0, imgDressCodeEff[3].w, imgDressCodeEff[3].h, VH);
                    setAlpha(getBlinkAlpha());
                    
                    
                    
                    
                    if(++xFitting.blinkEffAnyCnt_trend[slotNum]%40 == 0)
                        makeBlinkEff2(subTemp[XPOS]+55+(ranDom(-20, 20)), subTemp[YPOS]-55+(ranDom(-20, 20)),0);
                    
                    drawImage(&imgDressCodeEff[2], subTemp[XPOS]+55, subTemp[YPOS]-55, 0, 0, imgDressCodeEff[2].w, imgDressCodeEff[2].h, VH);
                    setAlpha(ALPHA_MAX);
                    
                    DressCodeHH += 30;
                }
                if(isDressCode_Concept == true)
                {
                    drawPacker(imgCollectionConceptionIcon, subTemp[XPOS]+55, subTemp[YPOS]-55+DressCodeHH, imgW(imgCollectionConceptionIcon)/9*xFashionData[xMap.type][xMap.listNum].concept, 0, imgW(imgCollectionConceptionIcon)/9, imgH(imgCollectionConceptionIcon), VH);

                    setAlpha(getBlinkAlpha());
                    
                    if(++xFitting.blinkEffAnyCnt_concept[slotNum]%40 == 0)
                        makeBlinkEff2(subTemp[XPOS]+55+(ranDom(-20, 20)), subTemp[YPOS]-55+DressCodeHH+(ranDom(-20, 20)),0);
                    
                    drawImage(&imgDressCodeEff[2], subTemp[XPOS]+55, subTemp[YPOS]-55+DressCodeHH, 0, 0, imgDressCodeEff[2].w, imgDressCodeEff[2].h, VH);
                    setAlpha(ALPHA_MAX);
                    
                    DressCodeHH += 30;
                }
                if(isDressCode_Color == true)
                {
                    
                    int colorImgNum = imgCollectionColorIcon0+xFashionData[xMap.type][xMap.listNum].color;
                    drawPacker(colorImgNum, subTemp[XPOS]+55, subTemp[YPOS]-55+DressCodeHH, 0, 0, imgW(colorImgNum), imgH(colorImgNum), VH);
                    
                    
                    if(++xFitting.blinkEffAnyCnt_color[slotNum]%40 == 0)
                        makeBlinkEff2(subTemp[XPOS]+55+(ranDom(-20, 20)), subTemp[YPOS]-55+DressCodeHH+(ranDom(-20, 20)),0);
                    
                    setAlpha(getBlinkAlpha());
                    drawImage(&imgDressCodeEff[1], subTemp[XPOS]+55, subTemp[YPOS]-55+DressCodeHH, 0, 0, imgDressCodeEff[1].w, imgDressCodeEff[1].h, VH);
                    setAlpha(ALPHA_MAX);
                    DressCodeHH += 30;
                }
                xGame.isReSizeDraw = false;
                
                
                
				//레이어드번호
				if(totalLayer > 1)
				{
					drawPacker(imgFittingMenu4, subTemp[XPOS], subTemp[YPOS]+52, 0, 0, imgW(imgFittingMenu4), imgH(imgFittingMenu4), VH);
					for(int ll=0;ll<totalLayer;ll++)
					{
						if(layerInfo[ll] == xFashionData[xMap.type][xMap.listNum].layer)
						{
							switch(ll)
							{
							case 0:	sprintf(strTempS, "레이어드A");break;
							case 1:	sprintf(strTempS, "레이어드B");break;
							case 2:	sprintf(strTempS, "레이어드C");break;
							case 3:	sprintf(strTempS, "레이어드D");break;
                            case 4:sprintf(strTempS, "레이어드E");break;
							}
							
							gSetColor(255, 255, 255);
							gDrawString(subTemp[XPOS], subTemp[YPOS]+52, strTempS, VH);
							break;
						}
					}
				}
				//장착중임
				if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == slotCode)
				{
					drawPacker(imgFittingSelectSlot, subTemp[XPOS], subTemp[YPOS]+34, 0, 0, imgW(imgFittingSelectSlot), imgH(imgFittingSelectSlot), VH);
				}
				else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
				{
					drawPacker(imgProductionMenuSlot2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot2), imgH(imgProductionMenuSlot2), VH);
					gSetColor(255, 0, 0);
					gDrawString(subTemp[XPOS], subTemp[YPOS]-13, "피팅불가", VH);
					gSetColor(255, 255, 255);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+25, "현재 착용중인\n레이어드", VH);
				}
				else if(xFitting.xSlot[xFitting.selectTabB][slotNum].isModelUse == TRUE)
				{
					drawPacker(imgProductionMenuSlot2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot2), imgH(imgProductionMenuSlot2), VH);
					gSetColor(255, 0, 0);
					gDrawString(subTemp[XPOS], subTemp[YPOS]-13, "피팅불가", VH);
					gSetColor(255, 255, 255);
					gDrawString(subTemp[XPOS], subTemp[YPOS]+25, "다른모델이\n사용중입니다", VH);
				}
				
				if(page == 0)
				{
					xTouchFittingS[i].wPos = 150;
					xTouchFittingS[i].hPos = 220;
					xTouchFittingS[i].xPos = subTemp[XPOS] - xTouchFittingS[i].wPos/2;
					xTouchFittingS[i].yPos = subTemp[YPOS]+50 - xTouchFittingS[i].hPos/2;
					/*
					 gSetColor(255, 0, 0);
					 setAlpha(100);
					 fillRect(xTouchFittingS[0].xPos, xTouchFittingS[0].yPos, xTouchFittingS[0].wPos, xTouchFittingS[0].hPos);
					 setAlpha(ALPHA_MAX);
					 */
				}
			}
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	subTemp[XPOS] = px-108-335-3;
	subTemp[YPOS] = py+50;
	if(xDragScrollFittingS.selectNum > 0)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchLeft.wPos = 80;
	xNoticeWorldMap.xTouchLeft.hPos = 80;
	xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
	xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	
	
	subTemp[XPOS] = px-108+335;
	subTemp[YPOS] = py+50;
	if(xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchRight.wPos = 80;
	xNoticeWorldMap.xTouchRight.hPos = 80;
	xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
	xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	subTemp[XPOS] = px+356;
	subTemp[YPOS] = py+25;
	
	xTouchFittingMenu[0].wPos = 200;
	xTouchFittingMenu[0].hPos = 300;
	xTouchFittingMenu[0].xPos = subTemp[XPOS]+50-xTouchFittingMenu[0].wPos/2;
	xTouchFittingMenu[0].yPos = subTemp[YPOS]-xTouchFittingMenu[0].hPos/2;
	
	//넣어입기 빼입기
	if(xFitting.isInOutMenu == TRUE)
	{
		if(++xFitting.inOutCnt > 150)
			xFitting.isInOutMenu = FALSE;
		
		drawPacker(imgFittingMenu0, subTemp[XPOS]-130+10, subTemp[YPOS], 0, 0, imgW(imgFittingMenu0), imgH(imgFittingMenu0), VH);
		
		drawPacker(imgPopupBtnS1, subTemp[XPOS]-130, subTemp[YPOS]-26, 0, imgH(imgPopupBtnS1)/2, imgW(imgPopupBtnS1), imgH(imgPopupBtnS1)/2, VH);
		gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]-26, "넣어입기", VH, 255, 255, 255, 21, 97, 96);
		drawPacker(imgPopupBtnS2, subTemp[XPOS]-130, subTemp[YPOS]+26, 0, imgH(imgPopupBtnS2)/2, imgW(imgPopupBtnS2), imgH(imgPopupBtnS2)/2, VH);
		gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]+26, "빼입기", VH, 255, 255, 255, 77, 77, 77);
		
		
		xTouchFittingMenu[1].wPos = imgW(imgPopupBtnS1);
		xTouchFittingMenu[1].hPos = imgH(imgPopupBtnS1)/2;
		xTouchFittingMenu[1].xPos = subTemp[XPOS]-130-xTouchFittingMenu[1].wPos/2;
		xTouchFittingMenu[1].yPos = subTemp[YPOS]-26-xTouchFittingMenu[1].hPos/2;
		
		xTouchFittingMenu[2].wPos = imgW(imgPopupBtnS2);
		xTouchFittingMenu[2].hPos = imgH(imgPopupBtnS2)/2;
		xTouchFittingMenu[2].xPos = subTemp[XPOS]-130-xTouchFittingMenu[2].wPos/2;
		xTouchFittingMenu[2].yPos = subTemp[YPOS]+26-xTouchFittingMenu[2].hPos/2;
		
	}
	
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchFittingMenu[0].xPos, xTouchFittingMenu[0].yPos, xTouchFittingMenu[0].wPos, xTouchFittingMenu[0].hPos);
	 fillRect(xTouchFittingMenu[1].xPos, xTouchFittingMenu[1].yPos, xTouchFittingMenu[1].wPos, xTouchFittingMenu[1].hPos);
	 fillRect(xTouchFittingMenu[2].xPos, xTouchFittingMenu[2].yPos, xTouchFittingMenu[2].wPos, xTouchFittingMenu[2].hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	subTemp[XPOS] = px+471;
	subTemp[YPOS] = py-282;
	
	drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
	
	xTouchClr.wPos = imgW(imgBtn0);
	xTouchClr.hPos = imgH(imgBtn0)/2;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
		
	/*
	 gSetColor(255,0,0);
	 setAlpha(100);
	 fillRect(xTouchClr.xPos,xTouchClr.yPos,xTouchClr.wPos,xTouchClr.hPos);
	 setAlpha(ALPHA_MAX);
	 */
}

void drawRunWay()
{
	int px = cx;
	int py = cy;
	
	
	//changeTime
	
	gSetColor(0, 0, 0);
	fillRect(0, 0, lcdW, lcdH);		
	
	if(xRunWayEff.isFlashFast == TRUE)
	{
		if(++xRunWayEff.flashAnyCnt > 30)
		{
			xRunWayEff.isFlashFast = FALSE;
		}
		xRunWayEff.flashSpeed  = 1;
	}
	else
		xRunWayEff.flashSpeed  = 20;
	
	int flashRanDom;
	flashRanDom = ranDom(0, 100);
	
	if(gameCnt%xRunWayEff.flashSpeed == 0)
	{
		if(flashRanDom < 25)
		{
			setFlashEff(ranDom(cx-480, cx-480+420),ranDom(cy-200, cy-200+210),ranDom(50, 300),FALSE);
		}
		else if(flashRanDom < 25+25)
		{
			setFlashEff(ranDom(cx-480, cx-480+255),ranDom(cy, cy+320),ranDom(50, 300),FALSE);
		}
		else if(flashRanDom < 25+25+30)
		{
			setFlashEff(ranDom(cx-230, cx-230+700),ranDom(cy+140, cy+140+180),ranDom(50, 300),FALSE);
		}
		else
		{
			setFlashEff(ranDom(cx+100, cx+100+400),ranDom(cy, cy+150),ranDom(50, 300),FALSE);
		}
	}
	
	
	if(--xRunWay.dslrCnt	== 0)
	{
		if(xRunWayEff.isFlashFast == TRUE)
			xRunWay.dslrCnt = ranDom(10, 30);
		else
			xRunWay.dslrCnt = ranDom(50, 100);
		playSnd(SND_DSLR);
	}
	
    
	
	if(++xRunWayEff.changeTime > 70)
	{
		xRunWayEff.changeTime = 0;
		xRunWayEff.type = ranDom(RUNWAYEFF_TYPE_0, RUNWAYEFF_TYPE_2);
	}
	else if(xRunWayEff.changeTime > 60)
	{
		xRunWayEff.type = RUNWAYEFF_TYPE_DONT;
	}
	
	switch(xRunWayEff.type)
	{
	case RUNWAYEFF_TYPE_0:			//무난
		if(gameCnt%30 == 0)
			makeFashionEff(100,30);
		break;
	case RUNWAYEFF_TYPE_1:			//화려
		if(gameCnt%3 == 0)
			makeFashionEff(30,10);		
		break;
	case RUNWAYEFF_TYPE_2:			//스페셜
		makeFashionEff(lcdW,1000);
		break;
	}
	
	drawFashionEff();
	drawPacker(imgRunWayBg0, px, py, 0, 0, imgW(imgRunWayBg0), imgH(imgRunWayBg0), VH);

	
	
	
	XFACE xFaceTemp;
	xFaceTemp.hairNum = 0;
	xFaceTemp.faceNum = DONT;
	xFaceTemp.faceType = 0;
		
	switch(xRunWay.state)
	{
	case RUNWAY_STATE_PLAY:
		switch(++xRunWay.anyCnt)
		{
		case 50:
			if(xRunWay.maxModel > 0)
				xRunWay.modelState[0] = RUNWAYMODEL_STATE_START0;
			xRunWay.modelAnyCnt[0] = 0;
				
			xRunWay.modelX[0] = px+88;
			xRunWay.modelY[0] = -24;
			xRunWay.nowFrame[0] = 0;
			xRunWay.nowDelay[0] = 0;
				
			break;
		case 150:
			if(xRunWay.maxModel > 1)
				xRunWay.modelState[1] = RUNWAYMODEL_STATE_START0;
			xRunWay.modelAnyCnt[1] = 0;
			xRunWay.modelX[1] = px+88;
			xRunWay.modelY[1] = -24;
			xRunWay.nowFrame[1] = 0;
			xRunWay.nowDelay[1] = 0;
			break;
		case 250:
			if(xRunWay.maxModel > 2)
				xRunWay.modelState[2] = RUNWAYMODEL_STATE_START0;
			xRunWay.modelAnyCnt[2] = 0;
			xRunWay.modelX[2] = px+88;
			xRunWay.modelY[2] = -24;
			xRunWay.nowFrame[2] = 0;
			xRunWay.nowDelay[2] = 0;
			break;
		case 350:
			if(xRunWay.maxModel > 3)
				xRunWay.modelState[3] = RUNWAYMODEL_STATE_START0;
			xRunWay.modelAnyCnt[3] = 0;
			xRunWay.modelX[3] = px+88;
			xRunWay.modelY[3] = -24;
			xRunWay.nowFrame[3] = 0;
			xRunWay.nowDelay[3] = 0;
			break;
		case 450:
			if(xRunWay.maxModel > 4)
				xRunWay.modelState[4] = RUNWAYMODEL_STATE_START0;
			xRunWay.modelAnyCnt[4] = 0;
			xRunWay.modelX[4] = px+88;
			xRunWay.modelY[4] = -24;
			xRunWay.nowFrame[4] = 0;
			xRunWay.nowDelay[4] = 0;
			break;
		}
			
		if(xRunWay.modelState[xRunWay.maxModel-1] == RUNWAYMODEL_STATE_END)
		{
			setFashionShowResult();
		}				
		break;
	}
	
	for(int i=xRunWay.maxModel-1;i>=0;i--)
	{
		switch(xRunWay.modelState[i])
		{
		case RUNWAYMODEL_STATE_START0:
				
			xRunWay.modelX[i] += 4;
			xRunWay.modelY[i] += 2;
			
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowDelay = xRunWay.nowDelay[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowFrame = xRunWay.nowFrame[i];
            
			setSpritF(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.xF_Model[i],ACT_FRONT);
			xFaceTemp.faceNum = xRunWay.modelCode[i]+1000;
			xFaceTemp.hairNum = xRunWay.modelCode[i]+1000;
								
			xGame.fgameScale = 1.8f;
			xGame.fgameScaleCx =xRunWay.modelX[i];
			xGame.fgameScaleCy =lcdH-xRunWay.modelY[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[NPC_ACT_WALKING][ACT_BACK].buyItemCode = DONT;
			reverseSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],xRunWay.modelX[i], xRunWay.modelY[i],ACT_FRONT,&xFaceTemp);
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			xGame.fgameScale = 1.0f;
			
						
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.nowDelay[i],&xRunWay.nowFrame[i]))
			{
				xRunWay.nowFrame[i] = 0;
				xRunWay.nowDelay[i] = 0;
			}
			if(++xRunWay.modelAnyCnt[i] == 44)
			{
				xRunWay.modelState[i] = RUNWAYMODEL_STATE_START1;
				xRunWay.modelAnyCnt[i] = -1;
			}
			
			break;
		}
	}
	
	drawPacker(imgRunWayBg4, px-379, py-cy+imgH(imgRunWayBg4)/2, 0, 0, imgW(imgRunWayBg4), imgH(imgRunWayBg4), VL);

	
	
	int xx[20];
	int yy[20];
	
	int pointX = px-136;
	int pointY = py-80;
	
	xx[5] = pointX;
	yy[5] = pointY;
	xx[6] = xx[5]-90;
	yy[6] = yy[5]+33;
	xx[7] = xx[6]-90;
	yy[7] = yy[6]+33;
	xx[8] = xx[7]-90;
	yy[8] = yy[7]+33;
	
	xx[2] = pointX-54;
	yy[2] = pointY-88;
	xx[3] = pointX-170;
	yy[3] = pointY-20;
	xx[4] = pointX-320;
	yy[4] = pointY+26;
		
	xx[0] = pointX-130;
	yy[0] = pointY-63;
	xx[1] = pointX-262;
	yy[1] = pointY-20;
	
	
	
	
	for(int i=0;i<9;i++)
	{
		subTemp[XPOS] = xx[i];
		subTemp[YPOS] = yy[i];
		
		//xRunWay.actType_Guest[i] = NPC_ACT_STOP;
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT].nowDelay = xRunWay.nowDelay_Guest[i];
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT].nowFrame = xRunWay.nowFrame_Guest[i];
		
		xFaceTemp.faceNum = 0;
		xFaceTemp.hairNum = 0;
				
		setSpritF(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT],&xRunWay.xF_Guest[i],ACT_FRONT);
		xGame.fgameScale = 1.8f;
		xGame.fgameScaleCx =subTemp[XPOS];
		xGame.fgameScaleCy =lcdH-subTemp[YPOS];
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT].buyItemCode = DONT;
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT].buyItemCode = DONT;
		
		reverseSprit(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT],subTemp[XPOS], subTemp[YPOS],ACT_FRONT,&xRunWay.xFace_Guest[i]);
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
		xGame.fgameScale = 1.0f;
		
		switch(i)
		{
		case 5:			//앉아
		case 6:
		case 7:
		case 8:
			if(1 == prcSprit(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT],&xRunWay.nowDelay_Guest[i],&xRunWay.nowFrame_Guest[i]))
			{
				if(--xRunWay.applaudNum[i] < 0 && xRunWay.actType_Guest[i] == NPC_ACT_RUNWAY_CHAIR_APPLAUD)
				{
					xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_STOP;
					xRunWay.xFace_Guest[i].faceType = FACE_TYPE_NORMAL;
				}
				else if(xRunWay.actType_Guest[i] != NPC_ACT_RUNWAY_CHAIR_APPLAUD)
				{
					if(ranDom(0, 100) < 30)
					{
						switch(ranDom(0, 2))
						{
							case 0:	xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_ACTION0;break;
							case 1:	xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_ACTION1;break;
							case 2:	xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_ACTION2;break;
						}
					}
					else
						xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_STOP;					
				}
				
				xRunWay.nowFrame_Guest[i] = 0;
				xRunWay.nowDelay_Guest[i] = 0;
			}
			break;
		default:		//서있는
			if(1 == prcSprit(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT],&xRunWay.nowDelay_Guest[i],&xRunWay.nowFrame_Guest[i]))
			{
				if(--xRunWay.applaudNum[i] < 0 && xRunWay.actType_Guest[i] == NPC_ACT_APPLAUD )
				{
					
					
					xRunWay.actType_Guest[i] = NPC_ACT_STOP;
					xRunWay.xFace_Guest[i].faceType = FACE_TYPE_NORMAL;
				}
				
				xRunWay.nowFrame_Guest[i] = 0;
				xRunWay.nowDelay_Guest[i] = 0;
			}
			break;
		}
		
		
		
		setFontSize(8);
		if(xRunWay.strNickName_Guest[i][0] != '0')
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-106, xRunWay.strNickName_Guest[i], VH, 255, 255, 255, 44, 27, 26);
		setFontSize(11);
	}
				
	drawPacker(imgRunWayBg3, px, py, 0, 0, imgW(imgRunWayBg3), imgH(imgRunWayBg3), VH);
				
	for(int i=xRunWay.maxModel-1;i>=0;i--)
	{
		switch(xRunWay.modelState[i])
		{		
		case RUNWAYMODEL_STATE_START1:
			if(xRunWay.modelAnyCnt[i] == -1)
			{
				xRunWay.modelAnyCnt[i]++;
			}
			else
			{
				xRunWay.modelX[i] -= 4;
				xRunWay.modelY[i] += 2;
								
				xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowDelay = xRunWay.nowDelay[i];
				xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowFrame = xRunWay.nowFrame[i];
				
				
				
				xFaceTemp.faceNum = xRunWay.modelCode[i]+1000;
				xFaceTemp.hairNum = xRunWay.modelCode[i]+1000;
				setSpritF(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.xF_Model[i],ACT_FRONT);
				xGame.fgameScale = 1.8f;
				xGame.fgameScaleCx =xRunWay.modelX[i];
				xGame.fgameScaleCy =lcdH-xRunWay.modelY[i];
				xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].buyItemCode = DONT;
				xSpritNpc[NPC_ACT_WALKING][ACT_BACK].buyItemCode = DONT;
				drawSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],xRunWay.modelX[i], xRunWay.modelY[i],ACT_FRONT,&xFaceTemp);
				xGame.fgameScaleCx =cx;
				xGame.fgameScaleCy =cy;
				xGame.fgameScale = 1.0f;
				
				if(1 == prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.nowDelay[i],&xRunWay.nowFrame[i]))
				{
					xRunWay.nowFrame[i] = 0;
					xRunWay.nowDelay[i] = 0;
				}
				if(++xRunWay.modelAnyCnt[i] == 120)
				{
					
					
					
					xRunWay.modelState[i] = RUNWAYMODEL_STATE_START2;
					xRunWay.modelAnyCnt[i] = 0;
				}
			}
			break;
		case RUNWAYMODEL_STATE_START2:			
			xRunWay.modelX[i] += 4;
			xRunWay.modelY[i] += 2;
			
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowDelay = xRunWay.nowDelay[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowFrame = xRunWay.nowFrame[i];
			
			xFaceTemp.faceNum = xRunWay.modelCode[i]+1000;
			xFaceTemp.hairNum = xRunWay.modelCode[i]+1000;
			setSpritF(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.xF_Model[i],ACT_FRONT);
			xGame.fgameScale = 1.8f;
			xGame.fgameScaleCx =xRunWay.modelX[i];
			xGame.fgameScaleCy =lcdH-xRunWay.modelY[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[NPC_ACT_WALKING][ACT_BACK].buyItemCode = DONT;
			reverseSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],xRunWay.modelX[i], xRunWay.modelY[i],ACT_FRONT,&xFaceTemp);
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			xGame.fgameScale = 1.0f;
			
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.nowDelay[i],&xRunWay.nowFrame[i]))
			{
				xRunWay.nowFrame[i] = 0;
				xRunWay.nowDelay[i] = 0;
			}
			if(++xRunWay.modelAnyCnt[i] == 16)
			{
				xRunWay.modelState[i] = RUNWAYMODEL_STATE_SHOW;
				xRunWay.modelAnyCnt[i] = 0;
				xRunWay.nowFrame[i] = 0;
				xRunWay.nowDelay[i] = 0;
												
				switch(xRunWay.inType)
				{
				case RUNWAY_INTYPE_PLAY:
					xRunWayMiniGame[i].state = RUNWAYMINIGAME_STATE_PLAY;
					xRunWayMiniGame[i].anyCnt = 0;
						
					int grade = 0;
					int ranPer = 0;
					int totalRanPer = 0;
					int selectM = 0;
						
					grade = xModelData[xRunWay.modelCode[i]].grade;
				
					selectM = 0;
					totalRanPer = 0;
					ranPer = ranDom(0, 1000);
						
					for(int m=0;m<xModel.fashionShowBonusTotal[grade];m++)
					{
						totalRanPer += xModel.fashionShowBonusPer[grade][m];
						if(ranPer < totalRanPer)
						{
							selectM = m;
							break;
						}
					}
					xRunWayMiniGame[i].bonusType = xModel.fashionShowBonusPointType[grade][selectM];
					xRunWayMiniGame[i].bonusPoint = ranDom(xModel.fashionShowBonusPointMin[grade][selectM],xModel.fashionShowBonusPointMax[grade][selectM]);
					
						
						
					switch(xRunWayMiniGame[i].bonusType)
					{
					case 0:		//골드
						xModelSkill.bonusPer[MODELSKILL_RUNWAY_GOLD] = getSkillPer(xRunWay.modelCode[i],MODELSKILL_RUNWAY_GOLD);
						if(xModelSkill.bonusPer[MODELSKILL_RUNWAY_GOLD] > 0)
							xRunWayMiniGame[i].bonusPoint += xRunWayMiniGame[i].bonusPoint*xModelSkill.bonusPer[MODELSKILL_RUNWAY_GOLD]/100;
						break;
					case 2:		//경험치
						xModelSkill.bonusPer[MODELSKILL_RUNWAY_EXP] = getSkillPer(xRunWay.modelCode[i],MODELSKILL_RUNWAY_EXP);
						if(xModelSkill.bonusPer[MODELSKILL_RUNWAY_EXP] > 0)
							xRunWayMiniGame[i].bonusPoint += xRunWayMiniGame[i].bonusPoint*xModelSkill.bonusPer[MODELSKILL_RUNWAY_EXP]/100;
						break;
					}
					break;
				}
			}
			break;
		case RUNWAYMODEL_STATE_SHOW:
			xSpritNpc[NPC_ACT_POSE1][ACT_FRONT].nowDelay = xRunWay.nowDelay[i];
			xSpritNpc[NPC_ACT_POSE1][ACT_FRONT].nowFrame = xRunWay.nowFrame[i];
			
			xFaceTemp.faceNum = xRunWay.modelCode[i]+1000;
			xFaceTemp.hairNum = xRunWay.modelCode[i]+1000;
			setSpritF(&xSpritNpc[NPC_ACT_POSE1][ACT_FRONT],&xRunWay.xF_Model[i],ACT_FRONT);
			xGame.fgameScale = 1.8f;
			xGame.fgameScaleCx =xRunWay.modelX[i];
			xGame.fgameScaleCy =lcdH-xRunWay.modelY[i];
			xSpritNpc[NPC_ACT_POSE1][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[NPC_ACT_POSE1][ACT_BACK].buyItemCode = DONT;
			drawSprit(&xSpritNpc[NPC_ACT_POSE1][ACT_FRONT],xRunWay.modelX[i], xRunWay.modelY[i],ACT_FRONT,&xFaceTemp);
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			xGame.fgameScale = 1.0f;
			
				
			
			if(xRunWay.nowFrame[i] == 40)
			{
				for(int z=0;z<18;z++)
				{
					switch(z)
					{
					case 5:			//앉아
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
						xRunWay.actType_Guest[z] = NPC_ACT_RUNWAY_CHAIR_APPLAUD;
						break;
					default:		//서있는
						xRunWay.actType_Guest[z] = NPC_ACT_APPLAUD;
						break;
					}
					xRunWay.applaudNum[z] = ranDom(3, 6);
					
					xRunWay.xFace_Guest[i].faceType = FACE_TYPE_SMILE;
					xRunWay.nowFrame_Guest[z] = ranDom(0, 8);
					xRunWay.nowDelay_Guest[z] = 0;
				}
				playSnd(SND_APPLAUD);
			}
								
			
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_POSE1][ACT_FRONT],&xRunWay.nowDelay[i],&xRunWay.nowFrame[i]))
			{
				xRunWay.nowFrame[i] = 0;
				xRunWay.nowDelay[i] = 0;
				xRunWay.modelState[i] = RUNWAYMODEL_STATE_END0;
				xRunWay.modelAnyCnt[i] = 0;
				
						
			}
			break;
		case RUNWAYMODEL_STATE_END0:
			xRunWay.modelX[i] += 4;
			xRunWay.modelY[i] += 2;
						
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowDelay = xRunWay.nowDelay[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowFrame = xRunWay.nowFrame[i];
			
			xFaceTemp.faceNum = xRunWay.modelCode[i]+1000;
			xFaceTemp.hairNum = xRunWay.modelCode[i]+1000;
			setSpritF(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.xF_Model[i],ACT_FRONT);
			xGame.fgameScale = 1.8f;
			xGame.fgameScaleCx =xRunWay.modelX[i];
			xGame.fgameScaleCy =lcdH-xRunWay.modelY[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[NPC_ACT_WALKING][ACT_BACK].buyItemCode = DONT;
			reverseSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],xRunWay.modelX[i], xRunWay.modelY[i],ACT_FRONT,&xFaceTemp);
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			xGame.fgameScale = 1.0f;
			
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.nowDelay[i],&xRunWay.nowFrame[i]))
			{
				xRunWay.nowFrame[i] = 0;
				xRunWay.nowDelay[i] = 0;
			}
			if(++xRunWay.modelAnyCnt[i] == 16)
			{
				xRunWay.modelState[i] = RUNWAYMODEL_STATE_END1;
				xRunWay.modelAnyCnt[i] = 0;
				
				if(++xRunWay.nowModel > xRunWay.maxModel-1)
					xRunWay.nowModel = xRunWay.maxModel-1;
								
				xCollection.selectSkill = 0;
			}
			break;
		case RUNWAYMODEL_STATE_END1:
			xRunWay.modelX[i] += 4;
			xRunWay.modelY[i] -= 2;
			
			
			xSpritNpc[NPC_ACT_WALKING][ACT_BACK].nowDelay = xRunWay.nowDelay[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_BACK].nowFrame = xRunWay.nowFrame[i];
			
			xFaceTemp.faceNum = xRunWay.modelCode[i]+1000;
			xFaceTemp.hairNum = xRunWay.modelCode[i]+1000;
			setSpritF(&xSpritNpc[NPC_ACT_WALKING][ACT_BACK],&xRunWay.xF_Model[i],ACT_BACK);
			xGame.fgameScale = 1.8f;
			xGame.fgameScaleCx =xRunWay.modelX[i];
			xGame.fgameScaleCy =lcdH-xRunWay.modelY[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[NPC_ACT_WALKING][ACT_BACK].buyItemCode = DONT;
			drawSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_BACK],xRunWay.modelX[i], xRunWay.modelY[i],ACT_BACK,&xFaceTemp);
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			xGame.fgameScale = 1.0f;
				
				
			
			
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_BACK],&xRunWay.nowDelay[i],&xRunWay.nowFrame[i]))
			{
				xRunWay.nowFrame[i] = 0;
				xRunWay.nowDelay[i] = 0;
			}
			if(++xRunWay.modelAnyCnt[i] == 120)
			{
				xRunWay.modelState[i] = RUNWAYMODEL_STATE_END2;
				xRunWay.modelAnyCnt[i] = 0;
			}
			break;
		case RUNWAYMODEL_STATE_END2:
			xRunWay.modelX[i] += 4;
			xRunWay.modelY[i] += 2;
						
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowDelay = xRunWay.nowDelay[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].nowFrame = xRunWay.nowFrame[i];
			
			xFaceTemp.faceNum = xRunWay.modelCode[i]+1000;
			xFaceTemp.hairNum = xRunWay.modelCode[i]+1000;
			setSpritF(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.xF_Model[i],ACT_FRONT);
			xGame.fgameScale = 1.8f;
			xGame.fgameScaleCx =xRunWay.modelX[i];
			xGame.fgameScaleCy =lcdH-xRunWay.modelY[i];
			xSpritNpc[NPC_ACT_WALKING][ACT_FRONT].buyItemCode = DONT;
			xSpritNpc[NPC_ACT_WALKING][ACT_BACK].buyItemCode = DONT;
			reverseSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],xRunWay.modelX[i], xRunWay.modelY[i],ACT_FRONT,&xFaceTemp);
			xGame.fgameScaleCx =cx;
			xGame.fgameScaleCy =cy;
			xGame.fgameScale = 1.0f;
			
			if(1 == prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xRunWay.nowDelay[i],&xRunWay.nowFrame[i]))
			{
				xRunWay.nowFrame[i] = 0;
				xRunWay.nowDelay[i] = 0;
			}
			if(++xRunWay.modelAnyCnt[i] == 56)
			{
				xRunWay.modelState[i] = RUNWAYMODEL_STATE_END;
				xRunWay.modelAnyCnt[i] = 0;
			}
			break;
		}
	}
		
	drawPacker(imgRunWayBg5, px+cx, py-cy+imgH(imgRunWayBg5)/2, 0, 0, imgW(imgRunWayBg5), imgH(imgRunWayBg5), VR);
	
	pointX = px+350;
	pointY = py+95;
	
	xx[9] = pointX;
	yy[9] = pointY;
	xx[10] = xx[9]-80;
	yy[10] = yy[9]+38;
	xx[11] = xx[10]-80;
	yy[11] = yy[10]+38;
	xx[12] = xx[11]-80;
	yy[12] = yy[11]+38;
	
	xx[13] = pointX+100;
	yy[13] = pointY+1;
	xx[14] = pointX+3;
	yy[14] = pointY+50;
	xx[15] = pointX-137;
	yy[15] = pointY+96;
	
	xx[16] = pointX+83;
	yy[16] = pointY+43;
	xx[17] = pointX-50;
	yy[17] = pointY+90;
	
	
	
	for(int i=9;i<18;i++)
	{
		subTemp[XPOS] = xx[i];
		subTemp[YPOS] = yy[i];
		
		//xRunWay.actType_Guest[i] = NPC_ACT_STOP;
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_BACK].nowDelay = xRunWay.nowDelay_Guest[i];
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_BACK].nowFrame = xRunWay.nowFrame_Guest[i];
		
		xFaceTemp.faceNum = 0;
		xFaceTemp.hairNum = 0;
		
		setSpritF(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_BACK],&xRunWay.xF_Guest[i],ACT_BACK);
		xGame.fgameScale = 1.8f;
		xGame.fgameScaleCx =subTemp[XPOS];
		xGame.fgameScaleCy =lcdH-subTemp[YPOS];
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_FRONT].buyItemCode = DONT;
		xSpritNpc[xRunWay.actType_Guest[i]][ACT_BACK].buyItemCode = DONT;
		reverseSprit(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_BACK],subTemp[XPOS], subTemp[YPOS],ACT_BACK,&xRunWay.xFace_Guest[i]);
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
		xGame.fgameScale = 1.0f;
		
		
		switch(i)
		{
		case 9:
		case 10:
		case 11:
		case 12:
			if(1 == prcSprit(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_BACK],&xRunWay.nowDelay_Guest[i],&xRunWay.nowFrame_Guest[i]))
			{
				if(--xRunWay.applaudNum[i] < 0 && xRunWay.actType_Guest[i] == NPC_ACT_RUNWAY_CHAIR_APPLAUD )
				{
					xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_STOP;
					xRunWay.xFace_Guest[i].faceType = FACE_TYPE_NORMAL;
				}
				else if(xRunWay.actType_Guest[i] != NPC_ACT_RUNWAY_CHAIR_APPLAUD)
				{
					if(ranDom(0, 100) < 30)
					{
						switch(ranDom(0, 2))
						{
						case 0:	xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_ACTION0;break;
						case 1:	xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_ACTION1;break;
						case 2:	xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_ACTION2;break;
						}
					}
					else
						xRunWay.actType_Guest[i] = NPC_ACT_RUNWAY_CHAIR_STOP;
						
				}
				xRunWay.nowFrame_Guest[i] = 0;
				xRunWay.nowDelay_Guest[i] = 0;
			}
			break;
		default:
			if(1 == prcSprit(&xSpritNpc[xRunWay.actType_Guest[i]][ACT_BACK],&xRunWay.nowDelay_Guest[i],&xRunWay.nowFrame_Guest[i]))
			{
				if(--xRunWay.applaudNum[i] < 0 && xRunWay.actType_Guest[i] == NPC_ACT_APPLAUD )
				{
					xRunWay.actType_Guest[i] = NPC_ACT_STOP;
					xRunWay.xFace_Guest[i].faceType = FACE_TYPE_NORMAL;
				}
				xRunWay.nowFrame_Guest[i] = 0;
				xRunWay.nowDelay_Guest[i] = 0;
			}
			break;
		}
		
		
		
		setFontSize(8);
		if(xRunWay.strNickName_Guest[i][0] != '0')
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-106, xRunWay.strNickName_Guest[i], VH, 255, 255, 255, 44, 27, 26);
		setFontSize(11);
	}
		
	drawPacker(imgRunWayBg6, 0, py, 0, 0, imgW(imgRunWayBg6), imgH(imgRunWayBg6), VL);
	
	subTemp[XPOS] = lcdW-imgW(imgRunWaySkipBtn)/2;
	subTemp[YPOS] = lcdH-imgH(imgRunWaySkipBtn)/2;
	drawPacker(imgRunWaySkipBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgRunWaySkipBtn), imgH(imgRunWaySkipBtn), VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]+35, "건너뛰기", VH, 255, 255, 255, 82, 49, 38);
	setFontSize(11);
	
	xRunWay.xTouchSkip.wPos = imgW(imgRunWaySkipBtn);
	xRunWay.xTouchSkip.hPos = imgH(imgRunWaySkipBtn);
	xRunWay.xTouchSkip.xPos = subTemp[XPOS]-xRunWay.xTouchSkip.wPos/2;
	xRunWay.xTouchSkip.yPos = subTemp[YPOS]-xRunWay.xTouchSkip.hPos/2;
	
	drawSpotLight();
	
	subTemp[XPOS] = 60;
	subTemp[YPOS] = 57;
	
	
	drawFriendProfile(subTemp[XPOS], subTemp[YPOS]+3, 0, 100);
	
	subTemp[XPOS] = 0;
	subTemp[YPOS] = 0;
	drawPacker(imgWorldMapLv4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapLv4), imgH(imgWorldMapLv4), TL);
		
	for(int i=0;i<xRunWay.maxModel;i++)
	{
		subTemp[XPOS] = 145+(i*34);
		subTemp[YPOS] = 34;
		drawPacker(imgOrderBg, subTemp[XPOS], subTemp[YPOS], imgW(imgOrderBg)/2*(xRunWay.nowModel == i ? 1 : 0), 0, imgW(imgOrderBg)/2, imgH(imgOrderBg), VH);
		
		if(xRunWay.nowModel == i)
			drawPacker(imgOrderNum0, subTemp[XPOS], subTemp[YPOS], imgW(imgOrderNum0)/10*(i+1), 0, imgW(imgOrderNum0)/10, imgH(imgOrderNum0), VH);
		else
			drawPacker(imgOrderNum1, subTemp[XPOS], subTemp[YPOS], imgW(imgOrderNum1)/10*(i+1), 0, imgW(imgOrderNum1)/10, imgH(imgOrderNum1), VH);
	}
			
	subTemp[XPOS] = 145+(2*34);
	subTemp[YPOS] = 80;
	
	drawModelName(subTemp[XPOS], subTemp[YPOS], xRunWay.modelCode[xRunWay.nowModel]);
	
	drawFlashEff(FALSE);
	
	
	int miniGameH = 0;
	int miniGameReSizeX = 100;
	int miniGameReSizeY = 100;
	int miniGameRot = 0;
	
	
	miniGameReSizeX = 100;
	miniGameReSizeY = 100;
	miniGameH = 0;
	miniGameRot = 0;
	
	
	for(int i=0;i<RUNWAYMINIGAMEMAX;i++)
	{
	
		switch(xRunWayMiniGame[i].state)
		{
		case RUNWAYMINIGAME_STATE_DONT:
			break;
		case RUNWAYMINIGAME_STATE_PLAY:
				
			xRunWayMiniGame[i].x = xRunWay.modelX[i];
			xRunWayMiniGame[i].y = xRunWay.modelY[i]-130;
			switch(++xRunWayMiniGame[i].anyCnt)
			{
			case 1:	miniGameH =17.5;	miniGameReSizeX = 0;miniGameReSizeY = 0;miniGameRot=-24;break;
			case 2:	miniGameH =-0.75;	miniGameReSizeX = 49;miniGameReSizeY = 75;miniGameRot=-7;break;
			case 3:	miniGameH =-19;		miniGameReSizeX = 136;miniGameReSizeY = 207;miniGameRot=-11;break;
			case 4:	miniGameH =-14.248;	miniGameReSizeX = 126;miniGameReSizeY = 101;miniGameRot=-7;break;
			case 5:	miniGameH =-9.498;	miniGameReSizeX = 116;miniGameReSizeY = 135;miniGameRot=-3;break;
			case 6:	miniGameH =-4.745;	miniGameReSizeX = 108;miniGameReSizeY = 107;miniGameRot=-2;break;
			case 7:	miniGameH =0;		miniGameReSizeX = 105;miniGameReSizeY = 95;miniGameRot=-6;break;
			case 8:	miniGameH =0;		miniGameReSizeX = 103;miniGameReSizeY = 96;miniGameRot=-4;break;
			case 9:	miniGameH =0;		miniGameReSizeX = 101;miniGameReSizeY = 98;miniGameRot=-2;break;
			case 10:miniGameH =0;		miniGameReSizeX = 100;miniGameReSizeY = 100;miniGameRot=0;break;
			}
				
			if(miniGameRot != 0)
			{
				xGame.isRotate = TRUE;
				xGame.rotateNum = miniGameRot;
			}
			
			if(miniGameReSizeY != 100)
			{
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = miniGameReSizeY;
			}
						

			drawPacker(imgGiftIcon, xRunWayMiniGame[i].x, xRunWayMiniGame[i].y+miniGameH, 0, 0, imgW(imgGiftIcon), imgH(imgGiftIcon), VH);
				
				
			xRunWayMiniGame[i].xTouch.wPos = imgW(imgCompletionIcon)+20;
			xRunWayMiniGame[i].xTouch.hPos = imgH(imgCompletionIcon)+20;
			xRunWayMiniGame[i].xTouch.xPos = xRunWayMiniGame[i].x-xRunWayMiniGame[i].xTouch.wPos/2;
			xRunWayMiniGame[i].xTouch.yPos = xRunWayMiniGame[i].y-xRunWayMiniGame[i].xTouch.hPos/2;
				
				
			xGame.isRotate = FALSE;
			xGame.isReSizeDraw = FALSE;
			break;
		case RUNWAYMINIGAME_STATE_END:
			{
			if(++xRunWayMiniGame[i].anyCnt > 23)
				xRunWayMiniGame[i].state = RUNWAYMINIGAME_STATE_DONT;
			
			int eventBoxY;
			switch(xRunWayMiniGame[i].anyCnt+3)
			{
			case 3: 		xGame.reSize=100; 	setAlpha(100*255/100);break;
			case 4: 	 	xGame.reSize=123; 	setAlpha(90*255/100);break;
			case 5: 	 	xGame.reSize=147; 	setAlpha(80*255/100);break;
			case 6: 	 	xGame.reSize=159; 	setAlpha(70*255/100);break;
			case 7: 		xGame.reSize=166; 	setAlpha(60*255/100);break;
			case 8: 		xGame.reSize=171; 	setAlpha(50*255/100);break;
			case 9: 	 	xGame.reSize=174; 	setAlpha(40*255/100);break;
			case 10: 	 	xGame.reSize=177; 	setAlpha(30*255/100);break;
			case 11: 		xGame.reSize=178; 	setAlpha(20*255/100);break;
			case 12: 		xGame.reSize=179; 	setAlpha(10*255/100);break;
			default: 		xGame.reSize=0; 	setAlpha(0);break;
			}
			xGame.isReSizeDraw = TRUE;
			drawPacker(imgGiftIcon, xRunWayMiniGame[i].x, xRunWayMiniGame[i].y, 0, 0, imgW(imgGiftIcon), imgH(imgGiftIcon), VH);
			xGame.isReSizeDraw = FALSE;
			setAlpha(ALPHA_MAX);
			
			
			switch(xRunWayMiniGame[i].anyCnt+3)
			{
			case 1: 	eventBoxY=0; 	xGame.reSize=100;	setAlpha(100*255/100);break;
			case 2: 	eventBoxY=2; 	xGame.reSize=90; 	setAlpha(100*255/100);break;
			case 3: 	eventBoxY=3; 	xGame.reSize=80; 	setAlpha(100*255/100);break;
			case 4: 	eventBoxY=-1; 	xGame.reSize=95; 	setAlpha(100*255/100);break;
			case 5: 	eventBoxY=-5; 	xGame.reSize=110; 	setAlpha(100*255/100);break;
			case 6: 	eventBoxY=-1; 	xGame.reSize=108; 	setAlpha(100*255/100);break;
			case 7: 	eventBoxY=2; 	xGame.reSize=105; 	setAlpha(100*255/100);break;
			case 8: 	eventBoxY=0; 	xGame.reSize=103; 	setAlpha(100*255/100);break;
			case 9: 	eventBoxY=-3; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
			case 10: 	eventBoxY=-1; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
			case 11: 	eventBoxY=1; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
			case 12: 	eventBoxY=1; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
			case 13: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
			case 14: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(90*255/100);break;
			case 15: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(80*255/100);break;
			case 16: 	eventBoxY=0; 	xGame.reSize=100;	setAlpha(70*255/100);break;
			case 17: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(60*255/100);break;
			case 18: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(50*255/100);break;
			case 19: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(40*255/100);break;
			case 20: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(30*255/100);break;
			case 21: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(20*255/100);break;
			case 22: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(10*255/100);break;
			default: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(0*255/100);break;
			}
			
			xGame.isReSizeDraw = TRUE;
			drawPacker(imgGiftIcon, xRunWayMiniGame[i].x, xRunWayMiniGame[i].y+eventBoxY, 0, 0, imgW(imgGiftIcon), imgH(imgGiftIcon), VH);
			xGame.isReSizeDraw = FALSE;
			setAlpha(ALPHA_MAX);
			}
			break;
		}
	}
	drawRunwaySkillUi();
	
}

void drawRunWayResult()
{
	int px = cx;
	int py = cy;
	int startAnyCnt = 0;
	
	if(xFashionShow.isBestScoreEvent == TRUE)
	{
		startAnyCnt = xFashionShow.bestScoreAnyCnt-3;
		if(startAnyCnt >=0)
		{
			//뻉뺑이
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 100*2;
			switch(startAnyCnt)
			{
				case 0: xGame.reSize =250*2;break;
				case 1:	xGame.reSize =235*2;break;
				case 2:	xGame.reSize =220*2;break;
				case 3:	xGame.reSize =205*2;break;
				case 4:	xGame.reSize =190*2;break;
				case 5:	xGame.reSize =175*2;break;
				case 6:	xGame.reSize =160*2;break;
				case 7:	xGame.reSize =145*2;break;
				case 8:	xGame.reSize =130*2;break;
				case 9:	xGame.reSize =115*2;break;
			}
			xGame.isRotate = TRUE;
			xGame.rotateNum = 360-((gameCnt%180)*2);
			
			drawPacker(imgEff3, px, py, 0, 0, imgW(imgEff3), imgH(imgEff3), VH);
			setAlpha(ALPHA_MAX);
			xGame.isRotate = FALSE;
			xGame.isReSizeDraw = FALSE;
		}
	}
	
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	
	if(xPopup.speakingNpcNum != 0)
	{
		xPopup.speakingNpcNum = 0;
		
		freeImg(&imgPopupNpc[0]);
		freeImg(&imgPopupNpc[1]);
		freeImg(&imgPopupNpc[2]);
		freeImg(&imgPopupNpc[3]);
		
		sprintf(strTempS, "popupnpc%d.png",xPopup.speakingNpcNum);
		loadImg(strTempS, &imgPopupNpc[0]);
		sprintf(strTempS, "popupnpc%da.png",xPopup.speakingNpcNum);
		loadImg(strTempS, &imgPopupNpc[1]);
		sprintf(strTempS, "popupnpc%db.png",xPopup.speakingNpcNum);
		loadImg(strTempS, &imgPopupNpc[2]);
		sprintf(strTempS, "popupnpc%dc.png",xPopup.speakingNpcNum);
		loadImg(strTempS, &imgPopupNpc[3]);
	}
	
	if(xPopup.speakingNpcNum != DONT)
	{
		drawImage(&imgPopupNpc[0], px+200,py+200, 0, 0, imgPopupNpc[0].w, imgPopupNpc[0].h, BH);
		drawImage(&imgPopupNpc[1], px+200,py+200-imgPopupNpc[0].h, 0, 0, imgPopupNpc[1].w, imgPopupNpc[1].h, BH);
	}
	drawBtn(px-110,py+156,BTN_OK_CONFIRM);
	
	
	
	setFontSize(14);
	
	if(xRunWay.totalFashionShowScore <= 200)
		sprintf(strTempS, "컨디션이 별로 좋지 못 했나봐요.\n기량 발휘가 안된것 같아요.");
	else if(xRunWay.totalFashionShowScore <= 400)
		sprintf(strTempS, "좋은 조합이었네요.\n잘 봤습니다.");
	else if(xRunWay.totalFashionShowScore <= 500)
		sprintf(strTempS, "확실히 달라도 뭔가 다르네요.\n수고하셨어요.");
	else
		sprintf(strTempS, "와~ 정말 멋진 조합이네요.\n감탄했어요.");
	
	gDrawStringBold(px-261,py-150, strTempS, VL, 255, 255, 255, 82, 49, 38);
	setFontSize(11);
	
	
	px = cx-105;
	py = cy;
	
	drawPacker(imgRunWayResultBg0, px, py, 0, 0, imgW(imgRunWayResultBg0), imgH(imgRunWayResultBg0), VH);
	
	gDrawStringBold(px-145, py-91, "심사결과", VL, 255, 255, 255, 82, 49, 38);
	for(int m=0;m<xRunWay.maxModel;m++)
	{
		subTemp[XPOS] = px;
		subTemp[YPOS] = py-48+(m*20);
		
		gSetColor(82, 49, 38);
		sprintf(strTempS, "%s",xModelData[xRunWay.modelCode[m]].strName);
		gDrawString(subTemp[XPOS]-161, subTemp[YPOS], strTempS, VL);
		sprintf(strTempS, "%d점",xRunWay.modelScore[m]);
		gDrawString(subTemp[XPOS]+146, subTemp[YPOS], strTempS, VR);
	}
	
	
	
	subTemp[XPOS] = px;
	subTemp[YPOS] = py+78;
	setFontSize(14);
	sprintf(strTempS, "총점  %d점",xRunWay.totalFashionShowScore);
	gDrawStringBold(subTemp[XPOS]+146, subTemp[YPOS]-4, strTempS, VR, 255, 255, 255, 82, 49, 38);
	setFontSize(11);
	
	
	
	
	
	
	if(xFashionShow.isBestScoreEvent == TRUE)
	{
		subTemp[XPOS] = px-190;
		subTemp[YPOS] = py-160;
		xGame.blendType = BLEND_WHITEALPHA;
		switch(xFashionShow.bestScoreAnyCnt++)
		{
		case 0:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 300;
			break;
		case 1:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 200;
			break;
		case 2:
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 150;
			break;
		case 3:
			xGame.isBlend = TRUE;
			xGame.blendNum = ALPHA_MAX;
			break;
		case 4:
			xGame.isBlend = TRUE;
			xGame.blendNum = 225;
			break;
		case 5:
			xGame.isBlend = TRUE;
			xGame.blendNum = 200;
			break;
		case 6:
			xGame.isBlend = TRUE;
			xGame.blendNum = 175;
			break;
		case 7:
			xGame.isBlend = TRUE;
			xGame.blendNum = 150;
			break;
		case 8:
			xGame.isBlend = TRUE;
			xGame.blendNum = 125;
			break;
		case 9:
			xGame.isBlend = TRUE;
			xGame.blendNum = 100;
			break;
		case 10:
			xGame.isBlend = TRUE;
			xGame.blendNum = 75;
			break;
		case 11:
			xGame.isBlend = TRUE;
			xGame.blendNum = 50;
			break;
		case 12:
			xGame.isBlend = TRUE;
			xGame.blendNum = 25;
			break;
		}
		
		drawPacker(imgRunWayResultBg2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgRunWayResultBg2), imgH(imgRunWayResultBg2), VH);
		xGame.isReSizeDraw = FALSE;
		xGame.isBlend = FALSE;
	}
	
}

void setFashionShowResult()
{
	
	float dressScore;
	float dressScoreBonus;
	float trendBonus;
	float conceptBonus;
	float colorBonus;
	float finalDressSocre;
	float sumDressScore;
	float modelDressScore;
	float fashionShowBonus;
	float fashionShowScore;
	float sexBonus;
	float tuckBonus;
	float layeredBonus;
	float luckyPoint;
	float sumFashionShowScore;

	float layerNum;

	
	
	/*
	///////////////////
	i = 1;
	xBalance.BaseDressScore = atof(bData[i][1]);//(의상기본점수)
	xBalance.GoldDressScore = atof(bData[i][2]);//(골드의상점수산출)
	xBalance.CashDressScore = atof(bData[i][3]);//(캐쉬의상점수산출)
	xBalance.TrendBonus = atof(bData[i][4]);//(유행보너스)
	xBalance.ConceptBonus = atof(bData[i][5]);//(컨셉보너스)
	xBalance.ColorBonus = atof(bData[i][6]);//(색상보너스)
	xBalance.SexBonus = atof(bData[i][7]);//(성별보너스)
	xBalance.TuckBonus = atof(bData[i][8]);//(턱인턱아웃보너스)
	xBalance.LayeredBonus = atof(bData[i][9]);//(레이어드횟수보너스)
	//////////////////
	i = 3;
	xBalance.ModelS = atof(bData[i][1]);//(S등급모델)
	xBalance.ModelA = atof(bData[i][2]);//(A등급모델)
	xBalance.ModelB = atof(bData[i][3]);//(B등급모델)
	xBalance.ModelC = atof(bData[i][4]);//(C등급모델)
	xBalance.UpgradeA = atof(bData[i][5]);//(1단계업그레이드)
	xBalance.UpgradeB = atof(bData[i][6]);//(2단계업그레이드)
	xBalance.UpgradeC = atof(bData[i][7]);//(3단계업그레이드)
	xBalance.UpgradeD = atof(bData[i][8]);//(4단계업그레이드)
	xBalance.UpgradeE = atof(bData[i][9]);//(5단계업그레이드)
	//////////////////
	 */
	/*
	xFashionShow.serverTotalTrend;
	xFashionShow.severTrendSlot[5];
	
	xFashionShow.serverTotalConcept;
	xFashionShow.severConceptSlot[5];
	
	xFashionShow.serverTotalColor;
	xFashionShow.severColorSlot[5];
	
	xFashionShow.serverSex;
	xFashionShow.serverInOut;
	xFashionShow.serverLayeredMin;
	xFashionShow.serverLayeredMax;
	*/
	xFashionShow.isRankChangeEvent = FALSE;
	xFashionShow.isBestScoreEvent = FALSE;
	xFashionShow.bestScoreAnyCnt = 0;
	xFashionShow.bestScore = xFashionShow.xMyRankSlot[1].score;
	xFashionShow.bestRank = xFashionShow.xMyRankSlot[1].rank;

	
	
	if(xFashionShow.state == FASHIONSHOW_STATE_RUNWAY)
	{
		addDebug("!!!!!!!!!!!!!!!!!!!!시작!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		addDebug("!!!!!!!!!!!!!!!!!!!!시작!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		addDebug("!!!!!!!!!!!!!!!!!!!!시작!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		addDebug("!!!!!!!!!!!!!!!!!!!!시작!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		
		
		xRunWay.totalFashionShowScore = 0;
		sumFashionShowScore = 0;
		
		int colorMain;
		int conceptMain;
						
		for(int m=0;m<xRunWay.maxModel;m++)
		{
			sumDressScore = 0;
			modelDressScore = 0;
			layerNum = 0;
						
			//////////////////////////////////기준색뽑기/////////////////////
			int colorTemp[15];
			for(int i=0;i<15;i++)
				colorTemp[i] = 0;
			
			int conceptTemp[15];
			for(int i=0;i<15;i++)
				conceptTemp[i] = 0;
			
			for(int i=0;i<16;i++)
			{
				//색상이 가장많은색을 기준색으로하고 1:1:1일때
				if(xRunWay.xF_Model[m].code[i] != DONT)
				{
					setMapData(xRunWay.xF_Model[m].code[i]);
					//레이어갯수파악
					layerNum++;
					//가장많은색파악
					colorTemp[xFashionData[xMap.type][xMap.listNum].color]++;
					//가장많은컨셉파악
					conceptTemp[xFashionData[xMap.type][xMap.listNum].concept]++;
				}
			}
			int totalOverlapColor = 0;
			int overlapColorSlot[15];
			int totalOverlapConcept = 0;
			int overlapConceptSlot[15];
			
			colorMain = DONT;
			conceptMain = DONT;
			for(int i=0;i<15;i++)
			{
				if(colorTemp[i] > 0)
				{
					if(colorMain == DONT)
					{
						colorMain = i;
						totalOverlapColor = 0;
						overlapColorSlot[totalOverlapColor++] = i;
					}
					else
					{
						if(colorTemp[colorMain] == colorTemp[i])
						{
							overlapColorSlot[totalOverlapColor++] = i;
						}
						else if(colorTemp[colorMain] < colorTemp[i])
						{
							colorMain = i;
							totalOverlapColor = 0;
							overlapColorSlot[totalOverlapColor++] = i;
						}
					}
				}
				
				if(conceptTemp[i] > 0)
				{
					if(conceptMain == DONT)
					{
						conceptMain = i;
						totalOverlapConcept = 0;
						overlapConceptSlot[totalOverlapConcept++] = i;
					}
					else
					{
						if(conceptTemp[conceptMain] == conceptTemp[i])
						{
							overlapConceptSlot[totalOverlapConcept++] = i;
						}
						else if(conceptTemp[conceptMain] < conceptTemp[i])
						{
							conceptMain = i;
							totalOverlapConcept = 0;
							overlapConceptSlot[totalOverlapConcept++] = i;
						}
					}
				}
			}
			
			//이경우에는 겹치는 색깔이 있는경우이다 우선순위에 의한 설정을 해주자
			M_Boolean isCheck = FALSE;
			if(totalOverlapColor > 1)
			{
				for(int Ftype=0;Ftype<7;Ftype++)
				{
					if(isCheck == FALSE)
					{
						
						for(int i=0;i<16;i++)
						{
							if(xRunWay.xF_Model[m].code[i] != DONT)
							{
								setMapData(xRunWay.xF_Model[m].code[i]);
								
								for(int c=0;c<totalOverlapColor;c++)
								{
									if(xFashionData[xMap.type][xMap.listNum].color == overlapColorSlot[c])
									{
										//원피스->아우터->상의->하의->가방->신발->악세사리(기준색구하기)
										switch(Ftype)
										{
											case 0:
												if(xMap.type == F_TYPE_ONEPIECE)
													isCheck = TRUE;
												break;
											case 1:
												if(xMap.type == F_TYPE_OUTER)
													isCheck = TRUE;
												break;
											case 2:
												if(xMap.type == F_TYPE_TOP)
													isCheck = TRUE;
												break;
											case 3:
												if(xMap.type == F_TYPE_BOTTOM)
													isCheck = TRUE;
												break;
											case 4:
												if(xMap.type == F_TYPE_BAG)
													isCheck = TRUE;
												break;
											case 5:
												if(xMap.type == F_TYPE_SHOES)
													isCheck = TRUE;
												break;
											case 6:
												if(xMap.type == F_TYPE_ACCECSSORY)
													isCheck = TRUE;
												break;
										}
										
										if(isCheck == TRUE)
										{
											colorMain = overlapColorSlot[c];
											break;
										}
									}
								}
								if(isCheck == TRUE)
									break;
							}
						}
						if(isCheck == TRUE)
							break;
					}
				}
			}
			isCheck = FALSE;
			if(totalOverlapConcept > 1)
			{
				for(int Ftype=0;Ftype<7;Ftype++)
				{
					if(isCheck == FALSE)
					{
						for(int i=0;i<16;i++)
						{
							if(xRunWay.xF_Model[m].code[i] != DONT)
							{
								setMapData(xRunWay.xF_Model[m].code[i]);
								
								for(int c=0;c<totalOverlapConcept;c++)
								{
									if(xFashionData[xMap.type][xMap.listNum].concept == overlapConceptSlot[c])
									{
										//원피스->아우터->상의->하의->가방->신발->악세사리(기준색구하기)
										switch(Ftype)
										{
											case 0:
												if(xMap.type == F_TYPE_ONEPIECE)
													isCheck = TRUE;
												break;
											case 1:
												if(xMap.type == F_TYPE_OUTER)
													isCheck = TRUE;
												break;
											case 2:
												if(xMap.type == F_TYPE_TOP)
													isCheck = TRUE;
												break;
											case 3:
												if(xMap.type == F_TYPE_BOTTOM)
													isCheck = TRUE;
												break;
											case 4:
												if(xMap.type == F_TYPE_BAG)
													isCheck = TRUE;
												break;
											case 5:
												if(xMap.type == F_TYPE_SHOES)
													isCheck = TRUE;
												break;
											case 6:
												if(xMap.type == F_TYPE_ACCECSSORY)
													isCheck = TRUE;
												break;
										}
										
										if(isCheck == TRUE)
										{
											conceptMain = overlapConceptSlot[c];
											break;
										}
									}
								}
								if(isCheck == TRUE)
									break;
							}
						}
						if(isCheck == TRUE)
							break;
					}
				}
			}
			//////////////////////////////////기준색뽑기/////////////////////끝
			//의상 점수
			for(int i=0;i<16;i++)
			{
				if(xRunWay.xF_Model[m].code[i] != DONT)
				{					
					setMapData(xRunWay.xF_Model[m].code[i]);
					dressScore = 0;
					dressScoreBonus = 0;
					finalDressSocre = 0;
					
					//의상 가격에 따른 기본 점수
					float colorPer = getFashionColorPer(colorMain, xFashionData[xMap.type][xMap.listNum].color);
					float ConceptPer = getFashionConceptPer(conceptMain, xFashionData[xMap.type][xMap.listNum].concept);
										
					switch(xFashionData[xMap.type][xMap.listNum].priceType)
					{
					case 0:		//골드
						dressScore = xBalance.BaseDressScore+(xFashionData[xMap.type][xMap.listNum].price.oriData/xBalance.GoldDressScore);
						sprintf(strTempS,"dressScore(%.2f) = xBalance.BaseDressScore(%.2f)+((%d)/(%.2f))",dressScore,xBalance.BaseDressScore,xFashionData[xMap.type][xMap.listNum].price.oriData,xBalance.GoldDressScore);
						addDebug(strTempS);
						break;
					case 2:		//패션쇼옷
						dressScore = xBalance.BaseDressScore+(xFashionData[xMap.type][xMap.listNum].type2FashionShowScore/xBalance.GoldDressScore);
						sprintf(strTempS,"dressScore(%.2f) = xBalance.BaseDressScore(%.2f)+((%d)/(%.2f))",dressScore,xBalance.BaseDressScore,xFashionData[xMap.type][xMap.listNum].price.oriData,xBalance.GoldDressScore);
						addDebug(strTempS);
						break;
					case 1:		//캐쉬
						dressScore = xBalance.BaseDressScore+(xFashionData[xMap.type][xMap.listNum].price.oriData*xBalance.CashDressScore);
						sprintf(strTempS,"dressScore(%.2f) = xBalance.BaseDressScore(%.2f)+((%d)/(%.2f))",dressScore,xBalance.BaseDressScore,xFashionData[xMap.type][xMap.listNum].price.oriData,xBalance.CashDressScore);
						addDebug(strTempS);
						break;
					}
					
					dressScore += dressScore*getSkillPer(xRunWay.modelCode[m],(MODELSKILL_RUNWAY_CENCEPT_BONUS0+xFashionData[xMap.type][xMap.listNum].concept))/100;
					dressScore += dressScore*getSkillPer(xRunWay.modelCode[m],(MODELSKILL_RUNWAY_COLOR_BONUS0+xFashionData[xMap.type][xMap.listNum].color))/100;
										
					//눈의여왕세트
					if(xFashionData[xMap.type][xMap.listNum].isStaff == 2)
						dressScore += dressScore*getSkillPer(xRunWay.modelCode[m],MODELSKILL_RUNWAY_SNOW)/100;
					
					
					
					sprintf(strTempS,"[%d]%s>",m,xFashionData[xMap.type][xMap.listNum].strName);
					addDebug(strTempS);
					
					sprintf(strTempS,"기준색,내색:(%d,%d),기준컨셉,내컨셉:(%d,%d)",colorMain,xFashionData[xMap.type][xMap.listNum].color,conceptMain,xFashionData[xMap.type][xMap.listNum].concept);
					addDebug(strTempS);

					dressScore = dressScore*(colorPer+ConceptPer);
					sprintf(strTempS,"dressScore(%.2f) = dressScore(%.2f)*(색조합(%.2f)+컨셉조합(%.2f))",dressScore,dressScore,colorPer,ConceptPer);
					addDebug(strTempS);
					
					trendBonus = 0;
					for(int ttt=0;ttt<xFashionShow.serverTotalTrend;ttt++)
					{
						if(xFashionShow.severTrendSlot[ttt] == xRunWay.xF_Model[m].code[i])
						{
							trendBonus = xBalance.TrendBonus;		//연결완료
							break;
						}
					}
					
					conceptBonus = 0;
					for(int ttt=0;ttt<xFashionShow.serverTotalConcept;ttt++)
					{
						if(xFashionShow.severConceptSlot[ttt] == xFashionData[xMap.type][xMap.listNum].concept)
						{
							conceptBonus = xBalance.ConceptBonus;		//연결완료
							break;
						}
					}
					
					colorBonus = 0;
					for(int ttt=0;ttt<xFashionShow.serverTotalColor;ttt++)
					{
						if(xFashionShow.severColorSlot[ttt] == xFashionData[xMap.type][xMap.listNum].color)
						{
							colorBonus = xBalance.ColorBonus;		//연결완료
							break;
						}
					}
					
					dressScoreBonus = trendBonus+conceptBonus+colorBonus;
					finalDressSocre = dressScore+(dressScore*dressScoreBonus);
					sumDressScore += finalDressSocre;
										
					sprintf(strTempS,"dressScoreBonus(%.2f) = trendBonus(%.2f)+conceptBonus(%.2f)+colorBonus(%.2f)",dressScoreBonus,trendBonus,conceptBonus,colorBonus);
					addDebug(strTempS);
					sprintf(strTempS,"finalDressSocre(%.2f) = dressScore(%.2f)+(dressScore(%.2f)*dressScoreBonus(%.2f))",finalDressSocre,dressScore,dressScore,dressScoreBonus);
					addDebug(strTempS);
				}
			}
			
			modelDressScore = sumDressScore+(sumDressScore*(xBalance.Model[xModelData[xRunWay.modelCode[m]].grade]+xBalance.Upgrade[xRunWay.modelUpgrade[m]]));
			
			sprintf(strTempS,"[%d]모델점수:",m);
			addDebug(strTempS);
			sprintf(strTempS, "modelDressScore(%.2f) = sumDressScore(%.2f)+(sumDressScore(%.2f)*((%.2f)+(%.2f)))",modelDressScore,sumDressScore,sumDressScore,xBalance.Model[xModelData[xRunWay.modelCode[m]].grade],xBalance.Upgrade[xRunWay.modelUpgrade[m]]);
			addDebug(strTempS);
						
			sexBonus = 0;
			if(xModelData[xRunWay.modelCode[m]].sex == xFashionShow.serverSex)
				sexBonus = xBalance.SexBonus;		//연결완료
			
			tuckBonus = 0;
			if(xRunWay.xF_Model[m].isInFitting == xFashionShow.serverInOut)
				tuckBonus = xBalance.TuckBonus;		//연결완료
						
			layeredBonus = 0;
			layeredBonus = xBalance.LayeredBonus;	//연결완료
			if(xFashionShow.serverLayeredMin != DONT)
			{
				if(layerNum < xFashionShow.serverLayeredMin)
					layeredBonus = 0;	//연결완료
			}
			if(xFashionShow.serverLayeredMax != DONT)
			{
				if(layerNum > xFashionShow.serverLayeredMax)
					layeredBonus = 0;	//연결완료
			}
			
			fashionShowBonus = sexBonus+tuckBonus+layeredBonus;
			
			sprintf(strTempS,"fashionShowBonus(%.2f) = sexBonus(%.2f)+tuckBonus(%.2f)+layeredBonus(%.2f)",fashionShowBonus,sexBonus,tuckBonus,layeredBonus);
			addDebug(strTempS);
			
			fashionShowScore = modelDressScore+(modelDressScore*fashionShowBonus);
			
			sprintf(strTempS,"fashionShowScore(%.2f) = modelDressScore(%.2f)+modelDressScore(%.2f)+fashionShowBonus(%.2f)",fashionShowScore,modelDressScore,modelDressScore,fashionShowBonus);
			addDebug(strTempS);
			
			xRunWay.modelScore[m] = fashionShowScore;
			sumFashionShowScore += xRunWay.modelScore[m];
		}
		
		luckyPoint = (float)ranDom(xBalance.LuckyMin, xBalance.LuckyMax)*0.01f;
		xRunWay.totalFashionShowScore = sumFashionShowScore+(sumFashionShowScore*luckyPoint);
        
        xRunWay.totalFashionShowScore += xRunWay.totalFashionShowScore*xAmulet.buff[JEWELBUFF_TYPE_FASHIONSHOW]/100;
        
        
        
		sprintf(strTempS,"xRunWay.totalFashionShowScore(%d) = sumFashionShowScore(%.2f)+(sumFashionShowScore(%.2f)*luckyPoint(%.2f))",xRunWay.totalFashionShowScore,sumFashionShowScore,sumFashionShowScore,luckyPoint);
		addDebug(strTempS);
		
				
		
		switch(xRunWay.inType)
		{
		case RUNWAY_INTYPE_PLAY:
			xFashionShow.state = FASHIONSHOW_STATE_RUNWAYRESULT_NETWAIT;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETFASHIONSHOW, TRUE);
				
			if(xRunWay.totalFashionShowScore > xFashionShow.bestScore)
			{
				xFashionShow.isBestScoreEvent = TRUE;
				xFashionShow.bestScoreAnyCnt = 0;
				xFashionShow.xMyRankSlot[1].score = xRunWay.totalFashionShowScore;
			}
				
			for(int i=0;i<3;i++)
			{
				xFashionShow.xMyRankSlot[i].rank = 0;
				xFashionShow.xMyRankSlot[i].score = 0;
				
				xFashionShow.nowPageNumList[i] = 0;
				xFashionShow.totalRankList[i] = 0;
			}
				
			int sexCount[2];
			sexCount[0] = 0;
			sexCount[1] = 0;
				
			for(int m=0;m<xRunWay.maxModel;m++)
				sexCount[xModelData[xRunWay.modelCode[m]].sex]++;
				
			if(sexCount[0] == 0)
				setQuest(95, xRunWay.totalFashionShowScore, DONT);
			else if(sexCount[1] == 0)
				setQuest(96, xRunWay.totalFashionShowScore, DONT);								
			setQuest(46, xRunWay.totalFashionShowScore, DONT);
                
            setJewelQuest(1, xRunWay.totalFashionShowScore,DONT);
            setRivalQuest(4,xRunWay.totalFashionShowScore);        //패션쇼점수
			break;
		default:
				
			
				
			xFashionShow.state = FASHIONSHOW_STATE_RUNWAYRESULT;
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_29_FASHIONSHOWRANK_REPLAY:
					xQuestTuto.isTemp = TRUE;
					break;
				}
			}
			break;
		}
	}
}


void setFriendOrderTab()
{
	M_Boolean isCheck;
	xCatalog.totalSlotS = 0;
	
	for(int i=0;i<xCatalog.totalSlotFriendOrder[xCatalog.selectTabS];i++)
	{
		setMapData(xCatalog.xSlotFriendOrder[xCatalog.selectTabS][i].code);
		
		isCheck = FALSE;
		isCheck = TRUE;
		if(isCheck == TRUE)
			xCatalog.xSlotS[xCatalog.totalSlotS++].code = xMap.type*1000+xMap.listNum;
	}
	
	
	
	switch(xCatalog.selectTabList)
	{
	case DONT:		//레벨정렬
	case 0:	//제작시간
		for(int i=0;i<xCatalog.totalSlotS;i++)
		{
			int typeI = xCatalog.xSlotS[i].code/1000;
			int listNumI = xCatalog.xSlotS[i].code%1000;
			int tempCode;
			int checkSort;
			for(int j=0;j<i;j++)
			{
				int typeJ = xCatalog.xSlotS[j].code/1000;
				int listNumJ = xCatalog.xSlotS[j].code%1000;
				
				if(xFashionData[typeI][listNumI].lv <xFashionData[typeJ][listNumJ].lv)
				{
					tempCode = xCatalog.xSlotS[i].code;
					checkSort = j;
					for(int k=i;k>checkSort;k--)
						xCatalog.xSlotS[k].code = xCatalog.xSlotS[k-1].code;
					xCatalog.xSlotS[checkSort].code = tempCode;
					break;
				}
			}
		}
		break;
	}
	
	switch(xCatalog.selectTabList)
	{
	case 0:	//제작시간
		for(int i=0;i<xCatalog.totalSlotS;i++)
		{
			int typeI = xCatalog.xSlotS[i].code/1000;
			int listNumI = xCatalog.xSlotS[i].code%1000;
			int tempCode;
			int checkSort;
			for(int j=0;j<i;j++)
			{
				int typeJ = xCatalog.xSlotS[j].code/1000;
				int listNumJ = xCatalog.xSlotS[j].code%1000;
				
				if(xFashionData[typeI][listNumI].makeTime.oriData <xFashionData[typeJ][listNumJ].makeTime.oriData)
				{
					tempCode = xCatalog.xSlotS[i].code;
					checkSort = j;
					for(int k=i;k>checkSort;k--)
						xCatalog.xSlotS[k].code = xCatalog.xSlotS[k-1].code;
					xCatalog.xSlotS[checkSort].code = tempCode;
					break;
				}
			}
		}
		break;
	}
	
}




void checkExternMove()
{
	
	
	setSelectTileKeyEvent(MAP_TYPE_FLOORTILE0,0);
	int selectFloorNum = DONT;
	if(xSelectTileOne.state == SELECTTILE_STATE_PLAY)
	{
		//확장확인
		
		if(xWorldMap.isFriendMap == FALSE)
		{
			if(xMap.extension < EXTENSIONSHOPTILEMAX)
			{
				for(int x=xMap.shopPointX+xMap.shopPointW+1;x<xMap.shopPointX+xMap.shopPointW+4;x++)
				{
					for(int y=xMap.shopPointY;y<xMap.shopPointY+xMap.shopPointH;y++)
					{
						
						if(x==xSelectTileOne.tileNumX && y == xSelectTileOne.tileNumY)
						{
							selectFloorNum = 0;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
				}
				for(int y=xMap.shopPointY+xMap.shopPointH+1;y<xMap.shopPointY+xMap.shopPointH+4;y++)
				{
					for(int x=xMap.shopPointX;x<xMap.shopPointX+xMap.shopPointW;x++)
					{
						if(x==xSelectTileOne.tileNumX && y == xSelectTileOne.tileNumY)
						{
							selectFloorNum = 0;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
				}
				if(selectFloorNum != DONT)
				{
					if(xWorldMap.isTuto == FALSE)
					{
						if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EXPEND1] == TRUE)
						{
							
						}
						else
						{
							xInterior.selectTabB = 2;
							xInterior.selectTabS = 0;
							setBuildCheck();
							setInteriorTabChange();
							interiorShopFreeLoad(TRUE);
							xWorldMap.state = WORLDMAP_STATE_INTERIORSHOP;
						}
					}

					return;
				}
			}
		}
				
		
		selectFloorNum = DONT;
		if(xWorldMap.isExternal == TRUE)
		{
			for(int f=0;f<xMap.totalFloor;f++)
			{
				for(int x=xMap.shopPointX+xMap.shopPointW-5;x<xMap.shopPointX+xMap.shopPointW;x++)
				{
					for(int y=xMap.shopPointY;y<xMap.shopPointY+xMap.shopPointH;y++)
					{
						
						if(x-(f*5)==xSelectTileOne.tileNumX && y-(f*5) == xSelectTileOne.tileNumY)
						{
							selectFloorNum = f;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
					
				}
				if(selectFloorNum != DONT)
					break;
				for(int y=xMap.shopPointY+xMap.shopPointH-5;y<xMap.shopPointY+xMap.shopPointH;y++)
				{
					
					for(int x=xMap.shopPointX;x<xMap.shopPointX+xMap.shopPointW;x++)
					{
						if(x-(f*5)==xSelectTileOne.tileNumX && y-(f*5) == xSelectTileOne.tileNumY)
						{
							selectFloorNum = f;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
				}
				if(selectFloorNum != DONT)
					break;
			}
			
			if(selectFloorNum == DONT)
			{
				for(int x=xMap.shopPointX-((xMap.totalFloor-1)*5)-5;x<xMap.shopPointX+xMap.shopPointW-((xMap.totalFloor-1)*5)-5;x++)
				{
					for(int y=xMap.shopPointY-((xMap.totalFloor-1)*5)-5;y<xMap.shopPointY+xMap.shopPointH-((xMap.totalFloor-1)*5)-5;y++)
					{
						if(x == xSelectTileOne.tileNumX && y == xSelectTileOne.tileNumY)
						{
							selectFloorNum = xMap.totalFloor-1;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
				}
			}
			
			if(selectFloorNum != DONT)
			{
				if(selectFloorNum == 0 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR1] == TRUE)
				{
					
				}
				else if(selectFloorNum == 1 && xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR2] == TRUE)
				{
					
				}
				else
				{
					xWorldMap.isExternal = FALSE;
					xWorldMap.isFriendMapFloorInfo = FALSE;
					xMap.nowFloor = selectFloorNum;
				}
				
				
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					if(xWorldMap.isFriendMap == TRUE)
					{
						switch(xQuestTuto.nowNum)
						{
						case TUTO_27_HELP_FLOORMOVE1:
							xQuestTuto.isTutoClean = TRUE;
							break;
						}
					}
				}
								
				
			}
		}
		else
		{			
			for(int f=0;f<xMap.nowFloor+1;f++)
			{
				for(int x=xMap.shopPointX+xMap.shopPointW-5;x<xMap.shopPointX+xMap.shopPointW;x++)
				{
					for(int y=xMap.shopPointY;y<xMap.shopPointY+xMap.shopPointH;y++)
					{
						
						if(x-(f*5)==xSelectTileOne.tileNumX && y-(f*5) == xSelectTileOne.tileNumY)
						{
							selectFloorNum = f;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
					
				}
				if(selectFloorNum != DONT)
					break;
				for(int y=xMap.shopPointY+xMap.shopPointH-5;y<xMap.shopPointY+xMap.shopPointH;y++)
				{
					
					for(int x=xMap.shopPointX;x<xMap.shopPointX+xMap.shopPointW;x++)
					{
						if(x-(f*5)==xSelectTileOne.tileNumX && y-(f*5) == xSelectTileOne.tileNumY)
						{
							selectFloorNum = f;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
				}
				if(selectFloorNum != DONT)
					break;
			}
						
			if(selectFloorNum == DONT)
			{
				for(int x=xMap.shopPointX-((xMap.nowFloor)*5)-5;x<xMap.shopPointX+xMap.shopPointW-((xMap.nowFloor)*5)-5;x++)
				{
					for(int y=xMap.shopPointY-((xMap.nowFloor)*5)-5;y<xMap.shopPointY+xMap.shopPointH-((xMap.nowFloor)*5)-5;y++)
					{
						if(x == xSelectTileOne.tileNumX && y == xSelectTileOne.tileNumY)
						{
							selectFloorNum = xMap.nowFloor;
							break;
						}
					}
					if(selectFloorNum != DONT)
						break;
				}
			}
									
			if(selectFloorNum == DONT)
			{
				
				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_EXTERNAL] == TRUE)
				{
					
				}
				else
				{
					xWorldMap.isExternal = TRUE;
					xWorldMap.isFriendMapFloorInfo = FALSE;
				}
			}
			else if(selectFloorNum < xMap.nowFloor)
			{
				xWorldMap.isFriendMapFloorInfo = FALSE;
				xMap.nowFloor = selectFloorNum;
				if(xQuestTuto.state == QUEST_TUTO_KEY)
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_27_HELP_FLOORMOVE0:
						if(xMap.nowFloor == 0)
							xQuestTuto.isTutoClean = TRUE;
						break;
					}
				}
			}
		}
	}
	
	if(selectFloorNum == DONT)
	{
		if(xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_EXTERNAL] == TRUE)
		{
			
		}
		else
		{
			xWorldMap.isFriendMapFloorInfo = FALSE;
			xWorldMap.isExternal = TRUE;
		}
	}
}

void setDropIcon(int x,int y,int type0,int num0,int type1,int num1,int type2,int num2)
{	
	for(int i=0;i<DROPICONMAX;i++)
	{
		if(xDropIcon[i].state == DROPICON_STATE_DONT)
		{
			xDropIcon[i].state = DROPICON_STATE_DROP;
			xDropIcon[i].anyCnt = 0;
			xDropIcon[i].xPos = x;
			xDropIcon[i].yPos = y;
			xDropIcon[i].w[0] = 0;
			xDropIcon[i].h[0] = 0;
			xDropIcon[i].w[1] = 0;
			xDropIcon[i].h[1] = 0;
			xDropIcon[i].w[2] = 0;
			xDropIcon[i].h[2] = 0;
			xDropIcon[i].type[0] = DONT;
			xDropIcon[i].type[1] = DONT;
			xDropIcon[i].type[2] = DONT;
			

			switch(ranDom(0, 2))
			{
			case 0:
				if(type0 != DONT)
				{
					xDropIcon[i].type[0] = type0;
					xDropIcon[i].num[0]  = num0;
				}
				if(type1 != DONT)
				{
					xDropIcon[i].type[1] = type1;
					xDropIcon[i].num[1] = num1;
				}
				if(type2 != DONT)
				{
					xDropIcon[i].type[2] = type2;
					xDropIcon[i].num[2] = num2;
				}
				break;
			case 1:
				if(type2 != DONT)
				{
					xDropIcon[i].type[1] = type2;
					xDropIcon[i].num[1] = num2;
				}
				if(type0 != DONT)
				{
					xDropIcon[i].type[0] = type0;
					xDropIcon[i].num[0] = num0;
				}
				if(type1 != DONT)
				{
					xDropIcon[i].type[2] = type1;
					xDropIcon[i].num[2] = num1;
				}
				break;
			case 2:
				if(type1 != DONT)
				{
					xDropIcon[i].type[2] = type1;
					xDropIcon[i].num[2] = num1;
				}
				if(type2 != DONT)
				{
					xDropIcon[i].type[0] = type2;
					xDropIcon[i].num[0] = num2;
				}
				if(type0 != DONT)
				{
					xDropIcon[i].type[1] = type0;
					xDropIcon[i].num[1] = num0;
				}
				break;
			}
			break;
		}
	}
}

void drawDropIcon()
{
	M_Boolean isSndPlay[12];
	
	
	
	for(int i=0;i<12;i++)
	{
		isSndPlay[i] = FALSE;
		xWorldMap.DropTypeNum[i] = 0;
	}
	
	
	
	for(int i=0;i<DROPICONMAX;i++)
	{
		switch(xDropIcon[i].state)
		{
			
		case DROPICON_STATE_DROP:
			if(xDropIcon[i].anyCnt < 3)
			{
				switch(xDropIcon[i].type[xDropIcon[i].anyCnt])
				{
				case ICON_TYPE_EXP:
					if(isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] == FALSE)
					{
						isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] = TRUE;
						playSnd(SND_EXP);
					}
					break;
				case ICON_TYPE_GOLD:
					if(isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] == FALSE)
					{
						isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] = TRUE;
						playSnd(SND_GOLD);
					}
					break;
				case ICON_TYPE_FAME:
					if(isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] == FALSE)
					{
						isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] = TRUE;
						playSnd(SND_FAME);
					}
					break;
				case ICON_TYPE_FASHION_HANGER:
				case ICON_TYPE_FASHION_ACCESSORY:
						
					if(isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] == FALSE)
					{
						isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] = TRUE;
						playSnd(SND_FASHION);
					}
					break;
				case ICON_TYPE_CANDY:
					if(isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] == FALSE)
					{
						isSndPlay[xDropIcon[i].type[xDropIcon[i].anyCnt]] = TRUE;
						playSnd(SND_FAME);
					}
					break;
				}
			}
				
			//73
			
			switch(++xDropIcon[i].anyCnt)
			{
			case 1:xGame.reSize = 0;setAlpha(255);break;
			case 2:xGame.reSize = 69 ;setAlpha(225);break;
			case 3:xGame.reSize = 108 ;setAlpha(200);break;
			case 4:xGame.reSize = 128 ;setAlpha(175);break;
			case 5:xGame.reSize = 146 ;setAlpha(150);break;
			case 6:xGame.reSize = 163 ;setAlpha(125);break;
			case 7:xGame.reSize = 177 ;setAlpha(100);break;
			case 8:xGame.reSize = 188 ;setAlpha(75);break;
			case 9:xGame.reSize = 196 ;setAlpha(50);break;
			case 10:xGame.reSize = 200 ;setAlpha(25);break;
			default:xGame.reSize = 0 ;setAlpha(0);break;
			}
			xGame.isReSizeDraw = TRUE;
			drawPacker(imgEff1, xDropIcon[i].xPos, xDropIcon[i].yPos, 0, 0, imgW(imgEff1), imgH(imgEff1), VH);
			xGame.isReSizeDraw = FALSE;
			setAlpha(ALPHA_MAX);
				
							
			
				
			switch(xDropIcon[i].anyCnt)
			{
			case 1:	xDropIcon[i].x[0]=0;xDropIcon[i].y[0]=0;xDropIcon[i].x[1]=	0;xDropIcon[i].y[1]=	0;xDropIcon[i].x[2]=	0;xDropIcon[i].y[2]=	0;	break;
			case 2:	xDropIcon[i].x[0]=1;xDropIcon[i].y[0]=-2;xDropIcon[i].x[1]=	0;xDropIcon[i].y[1]=	-1;xDropIcon[i].x[2]=	-0.5;xDropIcon[i].y[2]=	0.5;	break;
			case 3:	xDropIcon[i].x[0]=6;xDropIcon[i].y[0]=-7;xDropIcon[i].x[1]=	0;xDropIcon[i].y[1]=	-6;xDropIcon[i].x[2]=	-0.5;xDropIcon[i].y[2]=	0;	break;
			case 4:	xDropIcon[i].x[0]=14;xDropIcon[i].y[0]=-13;xDropIcon[i].x[1]=	-4;xDropIcon[i].y[1]=	-22;xDropIcon[i].x[2]=	0.5;xDropIcon[i].y[2]=	-0.5;	break;
			case 5:	xDropIcon[i].x[0]=26;xDropIcon[i].y[0]=	-21;xDropIcon[i].x[1]=	-10;xDropIcon[i].y[1]=	-34;xDropIcon[i].x[2]=	3.5	;xDropIcon[i].y[2]=-3;	break;
			case 6:	xDropIcon[i].x[0]=38;xDropIcon[i].y[0]=	-23;xDropIcon[i].x[1]=	-18;xDropIcon[i].y[1]=	-45;xDropIcon[i].x[2]=	13;xDropIcon[i].y[2]=	-8.5;	break;
			case 7:	xDropIcon[i].x[0]=58;xDropIcon[i].y[0]=	-23;xDropIcon[i].x[1]=	-24;xDropIcon[i].y[1]=	-51;xDropIcon[i].x[2]=	21.5;xDropIcon[i].y[2]=	-12;	break;
			case 8:	xDropIcon[i].x[0]=78;xDropIcon[i].y[0]=	-19;xDropIcon[i].x[1]=	-30;xDropIcon[i].y[1]=	-56;xDropIcon[i].x[2]=	33;xDropIcon[i].y[2]=	-15.5;	break;
			case 9:	xDropIcon[i].x[0]=92;xDropIcon[i].y[0]=	-14;xDropIcon[i].x[1]=	-37;xDropIcon[i].y[1]=	-60;xDropIcon[i].x[2]=	43;xDropIcon[i].y[2]=	-17;	break;
			case 10:	xDropIcon[i].x[0]=109;xDropIcon[i].y[0]=	-3;xDropIcon[i].x[1]=	-44;xDropIcon[i].y[1]=	-62;xDropIcon[i].x[2]=	51;xDropIcon[i].y[2]=	-17;	break;
			case 11:	xDropIcon[i].x[0]=122;xDropIcon[i].y[0]=	6;xDropIcon[i].x[1]=	-51;xDropIcon[i].y[1]=	-62;xDropIcon[i].x[2]=	60;xDropIcon[i].y[2]=	-15.5;	break;
			case 12:	xDropIcon[i].x[0]=135;xDropIcon[i].y[0]=	20;xDropIcon[i].x[1]=	-61;xDropIcon[i].y[1]=	-59;xDropIcon[i].x[2]=	65.5;xDropIcon[i].y[2]=	-13;	break;
			case 13:	xDropIcon[i].x[0]=146;xDropIcon[i].y[0]=	33;xDropIcon[i].x[1]=	-67;xDropIcon[i].y[1]=	-55;xDropIcon[i].x[2]=	75.5;xDropIcon[i].y[2]=	-7.5;	break;
			case 14:	xDropIcon[i].x[0]=157;xDropIcon[i].y[0]=	54;xDropIcon[i].x[1]=	-73;xDropIcon[i].y[1]=	-51;xDropIcon[i].x[2]=	80.5;xDropIcon[i].y[2]=	-3.5;	break;
			case 15:	xDropIcon[i].x[0]=162;xDropIcon[i].y[0]=	66;xDropIcon[i].x[1]=	-81;xDropIcon[i].y[1]=	-44;xDropIcon[i].x[2]=	85.5;xDropIcon[i].y[2]=	1;	break;
			case 16:	xDropIcon[i].x[0]=166;xDropIcon[i].y[0]=	76;xDropIcon[i].x[1]=	-87;xDropIcon[i].y[1]=	-37;xDropIcon[i].x[2]=	88.5;xDropIcon[i].y[2]=	4;	break;
			case 17:	xDropIcon[i].x[0]=169;xDropIcon[i].y[0]=	82;xDropIcon[i].x[1]=	-94;xDropIcon[i].y[1]=	-26;xDropIcon[i].x[2]=	91.5;xDropIcon[i].y[2]=	9;	break;
			case 18:	xDropIcon[i].x[0]=170;xDropIcon[i].y[0]=	84;xDropIcon[i].x[1]=	-100;xDropIcon[i].y[1]=	-14;xDropIcon[i].x[2]=	94;xDropIcon[i].y[2]=	14;	break;
			case 19:	xDropIcon[i].x[0]=170;xDropIcon[i].y[0]=	84;xDropIcon[i].x[1]=	-110;xDropIcon[i].y[1]=	7;xDropIcon[i].x[2]=	95.5;xDropIcon[i].y[2]=	17.5;	break;
			case 20:	xDropIcon[i].x[0]=170;xDropIcon[i].y[0]=	84;xDropIcon[i].x[1]=	-116;xDropIcon[i].y[1]=	24;xDropIcon[i].x[2]=	97;xDropIcon[i].y[2]=	21;	break;
			case 21:	xDropIcon[i].x[0]=173;xDropIcon[i].y[0]=	84;xDropIcon[i].x[1]=	-123;xDropIcon[i].y[1]=	43;xDropIcon[i].x[2]=	98.5;xDropIcon[i].y[2]=	23;	break;
			case 22:	xDropIcon[i].x[0]=180;xDropIcon[i].y[0]=	83;xDropIcon[i].x[1]=	-127;xDropIcon[i].y[1]=	57;xDropIcon[i].x[2]=	99.5;xDropIcon[i].y[2]=	23.5;	break;
			case 23:	xDropIcon[i].x[0]=185;xDropIcon[i].y[0]=	85;xDropIcon[i].x[1]=	-129;xDropIcon[i].y[1]=	65;xDropIcon[i].x[2]=	100.5;xDropIcon[i].y[2]=	23;	break;
			case 24:	xDropIcon[i].x[0]=188;xDropIcon[i].y[0]=	88;xDropIcon[i].x[1]=	-130;xDropIcon[i].y[1]=	66;xDropIcon[i].x[2]=	103;xDropIcon[i].y[2]=	22.5;	break;
			case 25:	xDropIcon[i].x[0]=192;xDropIcon[i].y[0]=	92;xDropIcon[i].x[1]=	-131;xDropIcon[i].y[1]=	65;xDropIcon[i].x[2]=	105;xDropIcon[i].y[2]=	22.5;	break;
			case 26:	xDropIcon[i].x[0]=194;xDropIcon[i].y[0]=	95;xDropIcon[i].x[1]=	-135;xDropIcon[i].y[1]=	60;xDropIcon[i].x[2]=	107;xDropIcon[i].y[2]=	23.5;	break;
			case 27:	xDropIcon[i].x[0]=194;xDropIcon[i].y[0]=	96;xDropIcon[i].x[1]=	-140;xDropIcon[i].y[1]=	56;xDropIcon[i].x[2]=	108.5;xDropIcon[i].y[2]=	25;	break;
			case 28:	xDropIcon[i].x[0]=195;xDropIcon[i].y[0]=	96;xDropIcon[i].x[1]=	-142;xDropIcon[i].y[1]=	56;xDropIcon[i].x[2]=	110;xDropIcon[i].y[2]=	28;	break;
			case 29:	xDropIcon[i].x[0]=195;xDropIcon[i].y[0]=	96;xDropIcon[i].x[1]=	-144;xDropIcon[i].y[1]=	62;xDropIcon[i].x[2]=	110.5;xDropIcon[i].y[2]=	28.5;	break;
			case 30:	xDropIcon[i].x[0]=195;xDropIcon[i].y[0]=	96;xDropIcon[i].x[1]=	-150;xDropIcon[i].y[1]=	71;xDropIcon[i].x[2]=	111;xDropIcon[i].y[2]=	29;	break;
			case 31:	xDropIcon[i].x[0]=195;xDropIcon[i].y[0]=	96;xDropIcon[i].x[1]=	-152;xDropIcon[i].y[1]=	74;xDropIcon[i].x[2]=	111;xDropIcon[i].y[2]=	29;	break;
			default:	xDropIcon[i].x[0]=195;xDropIcon[i].y[0]=	96;xDropIcon[i].x[1]=	-153;xDropIcon[i].y[1]=	74;xDropIcon[i].x[2]=	111;xDropIcon[i].y[2]=	29;
				if(xDropIcon[i].anyCnt > 46)
				{
					xDropIcon[i].state = DROPICON_STATE_MOVE;
					xDropIcon[i].anyCnt = 2;
				}
				break;
			}
			break;
		case DROPICON_STATE_MOVE:
			xDropIcon[i].anyCnt=(float)xDropIcon[i].anyCnt*1.5f;
			for(int k=0;k<3;k++)
			{
				if(xDropIcon[i].type[k] != DONT)
				{
					int targetX = 0;
					int targetY = 0;
					
					switch(xDropIcon[i].type[k])
					{
					case ICON_TYPE_EXP:
						targetX = DROPMOVE_EXPX;
						targetY = DROPMOVE_EXPY;
						break;
					case ICON_TYPE_GOLD:
						targetX = DROPMOVE_GOLDX;
						targetY = DROPMOVE_GOLDY;
						break;
					case ICON_TYPE_FAME:
						targetX = DROPMOVE_FAMEX;
						targetY = DROPMOVE_FAMEY;
						break;
					case ICON_TYPE_FASHION_HANGER:
						targetX = DROPMOVE_FASHIONX_HANGER;
						targetY = DROPMOVE_FASHIONY_HANGER;
						break;
					case ICON_TYPE_FASHION_ACCESSORY:
						targetX = DROPMOVE_FASHIONX_ACCESSORY;
						targetY = DROPMOVE_FASHIONY_ACCESSORY;
						break;
					case ICON_TYPE_CANDY:
						targetX = DROPMOVE_CANDYX;
						targetY = DROPMOVE_CANDYY;
						break;
                    case ICON_TYPE_MILEAGE:
                        targetX = 180;
                        targetY = lcdH-58;
                        break;
					}
										
					int nowX = xDropIcon[i].xPos+xDropIcon[i].x[k]+xDropIcon[i].w[k];
					int nowY = xDropIcon[i].yPos+xDropIcon[i].y[k]+xDropIcon[i].h[k];
					
					
					float rad = getArcTan(nowX,nowY,targetX,targetY);
					float speedMax = getRadiusSpeed(targetX,targetY,nowX,nowY,rad);
					
					if(xDropIcon[i].anyCnt > speedMax)
					{
						xWorldMap.dropIconUiAnyCnt[xDropIcon[i].type[k]] = 0;
						xDropIcon[i].type[k] = DONT;
						
						M_Boolean isCheck = FALSE;
						for(int t=0;t<3;t++)
						{
							if(xDropIcon[i].type[t] != DONT)
								isCheck = TRUE;
						}
						if(isCheck == FALSE)
						{
							xDropIcon[i].state = DROPICON_STATE_DONT;
						}
					}
					else
					{
						getRadiusPos(nowX,nowY,xDropIcon[i].anyCnt,rad);
						xDropIcon[i].w[k] = xRadius.pos[XPOS] - (xDropIcon[i].xPos+xDropIcon[i].x[k]);
						xDropIcon[i].h[k] = xRadius.pos[YPOS] - (xDropIcon[i].yPos+xDropIcon[i].y[k]);
					}
				}
			}
			break;
		}
		if(xDropIcon[i].state != DROPICON_STATE_DONT)
		{
			for(int k=0;k<3;k++)
			{
				int imgType;
				int imgList;
				
				switch(xDropIcon[i].type[k])
				{
					case DONT:
						break;
					default:
						xWorldMap.DropTypeNum[xDropIcon[i].type[k]] += xDropIcon[i].num[k];
						
						xGame.isReSizeDraw = TRUE;
						xGame.reSize = 150;
						
						switch(xDropIcon[i].type[k])
						{
						case ICON_TYPE_FASHION_HANGER:
							imgType = xSaveTemp.socialItem[0]/1000;
							imgList = xSaveTemp.socialItem[0]%1000;
							loadFashionFImg(imgType,imgList);
							drawImage(&imgFittingItem[imgType][imgList], xDropIcon[i].xPos+xDropIcon[i].x[k]+xDropIcon[i].w[k], xDropIcon[i].yPos+xDropIcon[i].y[k]+xDropIcon[i].h[k], 0, 0, imgFittingItem[imgType][imgList].w, imgFittingItem[imgType][imgList].h, VH);
							break;
						case ICON_TYPE_FASHION_ACCESSORY:
							imgType = xSaveTemp.socialItem[1]/1000;
							imgList = xSaveTemp.socialItem[1]%1000;
							loadFashionFImg(imgType,imgList);
							drawImage(&imgFittingItem[imgType][imgList], xDropIcon[i].xPos+xDropIcon[i].x[k]+xDropIcon[i].w[k], xDropIcon[i].yPos+xDropIcon[i].y[k]+xDropIcon[i].h[k], 0, 0, imgFittingItem[imgType][imgList].w, imgFittingItem[imgType][imgList].h, VH);
							break;
                        case ICON_TYPE_MILEAGE:
                            drawImage(&imgMileageIcon[2], xDropIcon[i].xPos+xDropIcon[i].x[k]+xDropIcon[i].w[k], xDropIcon[i].yPos+xDropIcon[i].y[k]+xDropIcon[i].h[k], 0, 0, imgMileageIcon[2].w, imgMileageIcon[2].h, VH);
                            break;
						default:
							drawIcon(xDropIcon[i].xPos+xDropIcon[i].x[k]+xDropIcon[i].w[k], xDropIcon[i].yPos+xDropIcon[i].y[k]+xDropIcon[i].h[k], xDropIcon[i].type[k]);
							break;
						}
						if(xDropIcon[i].state == DROPICON_STATE_MOVE)
							if(ranDom(0, 100) < 10)
								makeBlinkEff(xDropIcon[i].xPos+xDropIcon[i].x[k]+xDropIcon[i].w[k], xDropIcon[i].yPos+xDropIcon[i].y[k]+xDropIcon[i].h[k]);
						
						xGame.isReSizeDraw = FALSE;
						break;
				}
			}
		}
	}
	
	xGame.isReSizeDraw = TRUE;
	switch(++xWorldMap.dropIconUiAnyCnt[ICON_TYPE_EXP])
	{
		case 1:xGame.reSize = 100;setAlpha(255*100/100);break;
		case 2:xGame.reSize = 113;setAlpha(255* 90/100);break;
		case 3:xGame.reSize = 129;setAlpha(255*80/100);break;
		case 4:xGame.reSize = 145;setAlpha(255*70/100);break;
		case 5:xGame.reSize = 160;setAlpha(255*60/100);break;
		case 6:xGame.reSize = 172;setAlpha(255*50/100);break;
		case 7:xGame.reSize = 182;setAlpha(255*40/100);break;
		case 8:xGame.reSize = 190;setAlpha(255*30/100);break;
		case 9:xGame.reSize = 196;setAlpha(255*20/100);break;
		case 10:xGame.reSize = 199;setAlpha(255*10/100);break;
		default:
			setAlpha(0);
			xWorldMap.dropIconUiAnyCnt[ICON_TYPE_EXP] = 11;
			xGame.isReSizeDraw = FALSE;
			xGame.isBlend = FALSE;
			break;
	}
		
    
    

	drawIcon(DROPMOVE_EXPX, DROPMOVE_EXPY, ICON_TYPE_EXP);
	xGame.isBlend = FALSE;
	setAlpha(ALPHA_MAX);
	xGame.isReSizeDraw = FALSE;
	
	
	xGame.isReSizeDraw = TRUE;
	switch(++xWorldMap.dropIconUiAnyCnt[ICON_TYPE_GOLD])
	{
		case 1:xGame.reSize = 100;setAlpha(255*100/100);break;
		case 2:xGame.reSize = 113;setAlpha(255* 90/100);break;
		case 3:xGame.reSize = 129;setAlpha(255*80/100);break;
		case 4:xGame.reSize = 145;setAlpha(255*70/100);break;
		case 5:xGame.reSize = 160;setAlpha(255*60/100);break;
		case 6:xGame.reSize = 172;setAlpha(255*50/100);break;
		case 7:xGame.reSize = 182;setAlpha(255*40/100);break;
		case 8:xGame.reSize = 190;setAlpha(255*30/100);break;
		case 9:xGame.reSize = 196;setAlpha(255*20/100);break;
		case 10:xGame.reSize = 199;setAlpha(255*10/100);break;
		default:
			setAlpha(0);
			xWorldMap.dropIconUiAnyCnt[ICON_TYPE_GOLD] = 11;
			xGame.isReSizeDraw = FALSE;
			xGame.isBlend = FALSE;
			break;
	}
	drawIcon(DROPMOVE_GOLDX, DROPMOVE_GOLDY, ICON_TYPE_GOLD);
	xGame.isBlend = FALSE;
	setAlpha(ALPHA_MAX);
	xGame.isReSizeDraw = FALSE;
	
	xGame.isReSizeDraw = TRUE;
	switch(++xWorldMap.dropIconUiAnyCnt[ICON_TYPE_FAME])
	{
		case 1:xGame.reSize = 100;setAlpha(255*100/100);break;
		case 2:xGame.reSize = 113;setAlpha(255* 90/100);break;
		case 3:xGame.reSize = 129;setAlpha(255*80/100);break;
		case 4:xGame.reSize = 145;setAlpha(255*70/100);break;
		case 5:xGame.reSize = 160;setAlpha(255*60/100);break;
		case 6:xGame.reSize = 172;setAlpha(255*50/100);break;
		case 7:xGame.reSize = 182;setAlpha(255*40/100);break;
		case 8:xGame.reSize = 190;setAlpha(255*30/100);break;
		case 9:xGame.reSize = 196;setAlpha(255*20/100);break;
		case 10:xGame.reSize = 199;setAlpha(255*10/100);break;
		default:
			setAlpha(0);
			xWorldMap.dropIconUiAnyCnt[ICON_TYPE_FAME] = 11;
			xGame.isReSizeDraw = FALSE;
			xGame.isBlend = FALSE;
			break;
	}
		
    
    
	drawIcon(DROPMOVE_FAMEX, DROPMOVE_FAMEY, ICON_TYPE_FAME);
	xGame.isBlend = FALSE;
	setAlpha(ALPHA_MAX);
	xGame.isReSizeDraw = FALSE;
			
	xWorldMap.uiShowMoney = xSaveTemp.money.oriData-xWorldMap.DropTypeNum[ICON_TYPE_GOLD];
	xWorldMap.uiShowFame = xSaveTemp.fame.oriData-xWorldMap.DropTypeNum[ICON_TYPE_FAME];
	xWorldMap.uiShowExp = xSaveTemp.exp.oriData-xWorldMap.DropTypeNum[ICON_TYPE_EXP];
				
	if(xSaveTemp.fame.oriData == xBalanceData.fameMax[xSaveTemp.lv.oriData])
		xWorldMap.uiShowFame = xSaveTemp.fame.oriData;
}

void drawEventBoxTouch(int x,int y,int img,int anyCnt)
{
	int eventBoxY;
		
	switch(anyCnt+3)
	{
		case 3: 		xGame.reSize=100; 	setAlpha(100*255/100);break;
		case 4: 	 	xGame.reSize=123; 	setAlpha(90*255/100);break;
		case 5: 	 	xGame.reSize=147; 	setAlpha(80*255/100);break;
		case 6: 	 	xGame.reSize=159; 	setAlpha(70*255/100);break;
		case 7: 		xGame.reSize=166; 	setAlpha(60*255/100);break;
		case 8: 		xGame.reSize=171; 	setAlpha(50*255/100);break;
		case 9: 	 	xGame.reSize=174; 	setAlpha(40*255/100);break;
		case 10: 	 	xGame.reSize=177; 	setAlpha(30*255/100);break;
		case 11: 		xGame.reSize=178; 	setAlpha(20*255/100);break;
		case 12: 		xGame.reSize=179; 	setAlpha(10*255/100);break;
		default: 		xGame.reSize=0; 	setAlpha(0);break;
	}
	xGame.isReSizeDraw = TRUE;
	
	drawPacker(img, x, y, 0, 0, imgW(img), imgH(img), VH);

	
	xGame.isReSizeDraw = FALSE;
	setAlpha(ALPHA_MAX);

	
	switch(anyCnt+3)
	{
	case 1: 	eventBoxY=0; 	xGame.reSize=100;	setAlpha(100*255/100);break;
	case 2: 	eventBoxY=2; 	xGame.reSize=90; 	setAlpha(100*255/100);break;
	case 3: 	eventBoxY=3; 	xGame.reSize=80; 	setAlpha(100*255/100);break;
	case 4: 	eventBoxY=-1; 	xGame.reSize=95; 	setAlpha(100*255/100);break;
	case 5: 	eventBoxY=-5; 	xGame.reSize=110; 	setAlpha(100*255/100);break;
	case 6: 	eventBoxY=-1; 	xGame.reSize=108; 	setAlpha(100*255/100);break;
	case 7: 	eventBoxY=2; 	xGame.reSize=105; 	setAlpha(100*255/100);break;
	case 8: 	eventBoxY=0; 	xGame.reSize=103; 	setAlpha(100*255/100);break;
	case 9: 	eventBoxY=-3; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
	case 10: 	eventBoxY=-1; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
	case 11: 	eventBoxY=1; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
	case 12: 	eventBoxY=1; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
	case 13: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(100*255/100);break;
	case 14: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(90*255/100);break;
	case 15: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(80*255/100);break;
	case 16: 	eventBoxY=0; 	xGame.reSize=100;	setAlpha(70*255/100);break;
	case 17: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(60*255/100);break;
	case 18: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(50*255/100);break;
	case 19: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(40*255/100);break;
	case 20: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(30*255/100);break;
	case 21: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(20*255/100);break;
	case 22: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(10*255/100);break;
	default: 	eventBoxY=0; 	xGame.reSize=100; 	setAlpha(0*255/100);break;
	}
	
	xGame.isReSizeDraw = TRUE;
	
	drawPacker(img, x, y+eventBoxY, 0, 0, imgW(img), imgH(img), VH);
	
	xGame.isReSizeDraw = FALSE;
	setAlpha(ALPHA_MAX);
}


void makeColorPaper(int makeNum)
{
	for(int k=0;k<COLORPAPERMAX;k++)
	{
		if(xColorPaper[k].state == COLORPAPER_STATE_DONT)
		{
			xColorPaper[k].state = COLORPAPER_STATE_PLAY;
			xColorPaper[k].xPos = ranDom(0, lcdW);
			xColorPaper[k].yPos = -30;
			xColorPaper[k].speed = ranDom(3, 15);
			xColorPaper[k].reSize = ranDom(50, 150);
			xColorPaper[k].rotSpeed = ranDom(3, 45);
			xColorPaper[k].r = ranDom(0, 255);
			xColorPaper[k].g = ranDom(0, 255);
			xColorPaper[k].b = ranDom(0, 255);
			
			xColorPaper[k].endCntNow = 0;
			xColorPaper[k].endCntMax = ranDom(1*30, 4*30);
			
			makeNum--;
			break;
		}
		
		if(makeNum == 0)
			break;
	}
}

void drawColorPaper()
{
	xGame.isReSizeDraw = TRUE;
	xGame.isRotate = TRUE;
//	xGame.isBlend = TRUE;
	xGame.blendType = BLEND_SETCOLOR;
	xGame.blendNum = ALPHA_MAX;
	for(int k=0;k<COLORPAPERMAX;k++)
	{
		if(xColorPaper[k].state == COLORPAPER_STATE_PLAY)
		{
			xGame.reSize = xColorPaper[k].reSize;
			xColorPaper[k].rot += xColorPaper[k].rotSpeed;
			if(xColorPaper[k].rot >= 360)
				xColorPaper[k].rot = xColorPaper[k].rot-360;
			
			xGame.rotateNum = xColorPaper[k].rot;
			
			gSetColor(xColorPaper[k].r, xColorPaper[k].g, xColorPaper[k].b);
			
			xColorPaper[k].yPos += xColorPaper[k].speed;
			
			++xColorPaper[k].endCntNow;
			switch(xColorPaper[k].endCntMax - xColorPaper[k].endCntNow)
			{
			case 0:setAlpha(0);	xColorPaper[k].state = COLORPAPER_STATE_DONT;break;
			case 1:setAlpha(255*10/100);break;
			case 2:setAlpha(255*20/100);break;
			case 3:setAlpha(255*30/100);break;
			case 4:setAlpha(255*40/100);break;
			case 5:setAlpha(255*50/100);break;
			case 6:setAlpha(255*60/100);break;
			case 7:setAlpha(255*70/100);break;
			case 8:setAlpha(255*80/100);break;
			case 9:setAlpha(255*90/100);break;
			}
			
			drawPacker(imgColorPaper, xColorPaper[k].xPos, xColorPaper[k].yPos, 0, 0, imgW(imgColorPaper), imgH(imgColorPaper), VH);
			setAlpha(ALPHA_MAX);
						
			if(xColorPaper[k].yPos > lcdH+30)
				xColorPaper[k].state = COLORPAPER_STATE_DONT;
		}
	}
	xGame.isReSizeDraw = FALSE;
	xGame.isRotate = FALSE;
	xGame.isBlend = FALSE;
}


void setFlashEff(int x,int y,int resize,M_Boolean isMapMode)
{
	for(int i=0;i<FLASHEFF;i++)
	{
		if(xFlashEff[i].state == FLASHEFF_STATE_DONT)
		{
			xFlashEff[i].state = FLASHEFF_STATE_PLAY;
			xFlashEff[i].isMapMode = isMapMode;
			xFlashEff[i].anyCnt = 0;
			xFlashEff[i].x = x;
			xFlashEff[i].y = y;
			xFlashEff[i].resize = resize;
			break;
		}
	}
}
void drawFlashEff(M_Boolean isMapMode)
{
	int x;
	int y;
	for(int i=0;i<FLASHEFF;i++)
	{
		if(xFlashEff[i].state == FLASHEFF_STATE_PLAY)
		{
			if(xFlashEff[i].isMapMode != isMapMode)
				continue;
			x = xFlashEff[i].x;
			y = xFlashEff[i].y;
			if(isMapMode == TRUE)
			{
				x += xMap.pointX;
				y += xMap.pointY;
				XGLITTEREFF xGlitterEff;
				xGlitterEff.state =  GLITTEREFF_STATE_PLAY;
				xGlitterEff.anyCnt = xFlashEff[i].anyCnt++;
				xGlitterEff.x = x;
				xGlitterEff.y = y;
				xGlitterEff.resizeMax = xFlashEff[i].resize;
				drawGlitterEff(&xGlitterEff);
				if(xGlitterEff.state ==  GLITTEREFF_STATE_DONT)
				{
					xFlashEff[i].state = FLASHEFF_STATE_DONT;
				}
			}
			else
			{
				xGame.isBlend = TRUE;
				xGame.blendType = BLEND_ADDP;
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = xFlashEff[i].resize;
				switch(++xFlashEff[i].anyCnt)
				{
				case 1:drawPacker(imgFashionShowEff0, x, y, 0, 0, imgW(imgFashionShowEff0), imgH(imgFashionShowEff0), VH);break;
				case 2:drawPacker(imgFashionShowEff1, x, y, 0, 0, imgW(imgFashionShowEff1), imgH(imgFashionShowEff1), VH);break;
				case 3:drawPacker(imgFashionShowEff2, x, y, 0, 0, imgW(imgFashionShowEff2), imgH(imgFashionShowEff2), VH);break;
				case 4:drawPacker(imgFashionShowEff3, x, y, 0, 0, imgW(imgFashionShowEff3), imgH(imgFashionShowEff3), VH);break;
				case 5:drawPacker(imgFashionShowEff4, x, y, 0, 0, imgW(imgFashionShowEff4), imgH(imgFashionShowEff4), VH);break;
				default:
					xFlashEff[i].state = FLASHEFF_STATE_DONT;
					break;
				}
				xGame.isReSizeDraw = FALSE;
				xGame.isBlend = FALSE;
			}
		}
	}
}
	

void makeFashionEff(int rectW,int speed)
{
	for(int i=0;i<RUNWAYEFFMAX;i++)
	{
		if(xRunWayEff.state[i] == RUNWAYEFF_STATE_DONT)
		{
			xRunWayEff.state[i] = RUNWAYEFF_STATE_PLAY;
			xRunWayEff.anyCnt[i] = 0;
			xRunWayEff.rectW[i] = rectW;
			xRunWayEff.x[i] = cx -350-xRunWayEff.rectW[i];
			xRunWayEff.speed[i] = speed;
			
			xRunWayEff.r[i] = ranDom(0, 255);
			xRunWayEff.g[i] = ranDom(0, 255);
			xRunWayEff.b[i] = ranDom(0, 255);
			break;
		}
	}
}
void drawFashionEff()
{
	for(int i=0;i<RUNWAYEFFMAX;i++)
	{
		if(xRunWayEff.state[i] == RUNWAYEFF_STATE_PLAY)
		{
			gSetColor(xRunWayEff.r[i], xRunWayEff.g[i], xRunWayEff.b[i]);
			fillRect(xRunWayEff.x[i], cy-100, xRunWayEff.rectW[i], 400);

			xRunWayEff.x[i] += xRunWayEff.speed[i];
			
			if(xRunWayEff.x[i] > cx+300)
				xRunWayEff.state[i] = RUNWAYEFF_STATE_DONT;
		}
	}
}

void setSpotLight(int code,int x,int y,float fspeed)
{
	xSpotLight.pointX[code] = x;
	xSpotLight.pointY[code] = y;
	xSpotLight.fspeed[code] = fspeed;

}
void drawSpotLight()
{
	
	xSpotLight.type[0] = 0;
	xSpotLight.type[1] = 1;

	for(int i=0;i<SPOTLIGHTMAX;i++)
	{
		
		if(xSpotLight.x[i]-xSpotLight.pointX[i]<3 && xSpotLight.x[i]-xSpotLight.pointX[i]>-3 && xSpotLight.y[i]-xSpotLight.pointY[i]<3 && xSpotLight.y[i]-xSpotLight.pointY[i]>-3)
		{
			if(--xSpotLight.wait[i] <= 0)
			{
				switch(i)
				{
				case 0:
					setSpotLight(i,ranDom(0,500),ranDom(0,377),(float)((float)ranDom(1, 20)/100.f));
					break;
				case 1:
					setSpotLight(i,ranDom(0,lcdW),ranDom(lcdH-300,lcdH),(float)((float)ranDom(1, 20)/100.f));
					break;
				}
			}
			
			
		}
		else
		{
			int targetX = xSpotLight.pointX[i];
 			int targetY = xSpotLight.pointY[i];
			int nowX = xSpotLight.x[i];
			int nowY = xSpotLight.y[i];
						
			float rad = getArcTan(nowX,nowY,targetX,targetY);
			float speedMax = getRadiusSpeed(targetX,targetY,nowX,nowY,rad);
									
			if(speedMax*xSpotLight.fspeed[i] < 2)
				getRadiusPos(nowX,nowY,2,rad);
			else
				getRadiusPos(nowX,nowY,speedMax*xSpotLight.fspeed[i],rad);
			xSpotLight.x[i] = xRadius.pos[XPOS];
			xSpotLight.y[i] = xRadius.pos[YPOS];
		}
		
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_ADDP;
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 600;
		switch(xSpotLight.type[i])
		{
		case 0:
			drawPacker(imgFashionShowEff5, xSpotLight.x[i], xSpotLight.y[i], 0, 0, imgW(imgFashionShowEff5), imgH(imgFashionShowEff5), VH);
			break;
		case 1:
			drawPacker(imgFashionShowEff6, xSpotLight.x[i], xSpotLight.y[i], 0, 0, imgW(imgFashionShowEff6), imgH(imgFashionShowEff6), VH);
			break;
		}
		xGame.isReSizeDraw = FALSE;
		xGame.isBlend = FALSE;
	}	
}

void setEventBoxPos(int cnt)
{
	float y;
	float scale;
	float rot;
	switch(cnt)
	{
	case 0:	scale=0;		y=52;		rot=0;			break;
	case 1:	scale=75;		y=40.5003;	rot=-5.5;		break;
	case 2:	scale=150;		y=29;		rot=-11;		break;
	case 3:	scale=134.444;	y=29.6166;	rot=-5.81481;	break;
	case 4:	scale=105.556;	y=33.1159;	rot=3.81481;	break;
	case 5:	scale=90;		y=35;		rot=9;			break;
	case 6:	scale=91.5625;	y=35.3134;	rot=7.59375;	break;
	case 7:	scale=95;		y=36.0019;	rot=4.5;		break;
	case 8:	scale=98.4375;	y=36.6996;	rot=1.40625;	break;
	default:scale=100;		y=37;		rot=0;			break;
	}
	y -= 37;
	
	xWorldMap.eventShowY = y;
	xWorldMap.eventShowScale = scale;
	xWorldMap.eventShowRot = rot;	
}


void setEmoticon(XEMOTICON *xEmoticon,int type)
{
	xEmoticon->state = EMOTICON_STATE_PLAY;
	xEmoticon->type = type;
	xEmoticon->anyCnt = 0;
}

void drawEmoticon(int x,int y,XEMOTICON *xEmoticon)
{
	int startCnt;
	int endCnt;
	int scale;
	int scale2;
	int alpha;
	int imgNum;
	int blendNum;
	int w;
	int h;
	
	xEmoticon->anyCnt++;
	startCnt = xEmoticon->anyCnt;
	
	if(startCnt < 0)
		return;
	
	setEventBoxPos(startCnt);
	if(xWorldMap.eventShowScale != 100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = xWorldMap.eventShowScale;
	}
	if(xWorldMap.eventShowRot != 0)
	{
		xGame.isRotate = TRUE;
		xGame.rotateNum = xWorldMap.eventShowRot;
	}
	//drawImage(&imgEmoticon[0], x, y+xWorldMap.eventShowY+3, 0, 0, imgEmoticon[0].w, imgEmoticon[0].h, VH);
	xGame.isRotate = FALSE;
	xGame.isReSizeDraw = FALSE;
	
	endCnt = 80;
	if(xEmoticon->anyCnt > endCnt)
	{
		xEmoticon->state = EMOTICON_STATE_DONT;
		return;
	}
	
	switch(xEmoticon->type)
	{
	case EMOTICON_TYPE_SMILE:
			 scale = 100;
			 alpha= ALPHA_MAX;
			 switch(startCnt)
			 {
					 
			 case 0:scale=4.32297;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 1:scale=5.44741;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 2:scale=6.73274;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 3:scale=8.19103;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 4:scale=9.83598;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 5:scale=11.6833;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 6:scale=13.751;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 7:scale=16.0603;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 8:scale=18.636;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 9:scale=21.5076;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 10:scale=24.711;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 11:scale=28.2899;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 12:scale=32.2993;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 13:scale=36.8095;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 14:scale=41.9133;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 15:scale=47.7373;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 16:scale=54.463;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 17:scale=62.3675;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 18:scale=71.9143;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 19:scale=83.9984;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 20:scale=100.84;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 21:scale=123;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 22:scale=122.642;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 23:scale=121.022;alpha=((startCnt*3)*ALPHA_MAX/100);break;
			 case 24:scale=116.774;break;
			 case 25:scale=111.835;break;
			 case 26:scale=108.549;break;
			 case 27:scale=106.322;break;
			 case 28:scale=104.709;break;
			 case 29:scale=103.493;break;
			 case 30:scale=102.557;break;
			 case 31:scale=101.829;break;
			 case 32:scale=101.264;break;
			 case 33:scale=100.83;break;
			 case 34:scale=100.505;break;
			 case 35:scale=100.271;break;
			 case 36:scale=100.115;break;
			 case 37:scale=100.028;break;
			 case 38:scale=100;break;
			 }
			 
			 switch(endCnt-xEmoticon->anyCnt)
			 {
			 case 9:alpha=90*ALPHA_MAX/100;break;
			 case 8:alpha=80*ALPHA_MAX/100;break;
			 case 7:alpha=70*ALPHA_MAX/100;break;
			 case 6:alpha=60*ALPHA_MAX/100;break;
			 case 5:alpha=50*ALPHA_MAX/100;break;
			 case 4:alpha=40*ALPHA_MAX/100;break;
			 case 3:alpha=30*ALPHA_MAX/100;break;
			 case 2:alpha=20*ALPHA_MAX/100;break;
			 case 1:alpha=10*ALPHA_MAX/100;break;
			 case 0:alpha=0*ALPHA_MAX/100;break;
			 }
			 
			if(startCnt > 38)
			{
				switch(startCnt%20)
				{
				case 0:scale=100;break;
				case 1:scale=100.258;break;
				case 2:scale=100.909;break;
				case 3:scale=101.828;break;
				case 4:scale=102.937;break;
				case 5:scale=104.179;break;
				case 6:scale=105.503;break;
				case 7:scale=106.86;break;
				case 8:scale=108.182;break;
				case 9:scale=109.35;break;
				case 10:scale=110;break;
				case 11:scale=107.861;break;
				case 12:scale=104.712;break;
				case 13:scale=103.002;break;
				case 14:scale=101.926;break;
				case 15:scale=101.199;break;
				case 16:scale=100.7;break;
				case 17:scale=100.364;break;
				case 18:scale=100.151;break;
				case 19:scale=100.035;break;
				}
			}

			
			 if(scale != 100)
			 {
			 xGame.isReSizeDraw = TRUE;
			 xGame.reSize = scale;
			 }
			 if(alpha != ALPHA_MAX)
				 setAlpha(alpha);
			 drawPacker(imgEmoticon, x, y, 0, 0, imgW(imgEmoticon), imgH(imgEmoticon)/26, VH);
			 xGame.isReSizeDraw = FALSE;
			 setAlpha(ALPHA_MAX);
		break;
	case EMOTICON_TYPE_ANGER:
			startCnt = xEmoticon->anyCnt-8;
			
			if(startCnt < 0)
				return;
			
			scale = 100;
			alpha = ALPHA_MAX;
			switch(startCnt)
		{
			case 0:scale=0;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 1:scale=0.4891312673;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 2:scale=2.108965638;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 3:scale=5.165085055;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 4:scale=10.12692824;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 5:scale=17.7809554;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 6:scale=29.62848148;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 7:scale=49.23561383;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 8:scale=88.8856111;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 9:scale=133.328;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 10:scale=123.2892349;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 11:scale=113.2629693;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 12:scale=107.1940454;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 13:scale=103.5416915;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 14:scale=101.4067769;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 15:scale=100.3168205;alpha=((startCnt*5)*ALPHA_MAX/100);break;
			case 16:scale=100;alpha=((startCnt*5)*ALPHA_MAX/100);break;
		}
			
			
			scale2 = 100;
			switch(endCnt-xEmoticon->anyCnt)
		{
			case 0:scale2=0;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 1:scale2=0.489;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 2:scale2=2.108;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 3:scale2=5.165;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 4:scale2=10.126;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 5:scale2=17.780;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 6:scale2=29.628;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 7:scale2=49.235;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 8:scale2=88.885;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 9:scale2=133.328;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 10:scale2=123.289;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 11:scale2=113.262;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 12:scale2=107.194;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 13:scale2=103.541;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 14:scale2=101.406;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 15:scale2=100.316;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
			case 16:scale2=100;alpha=(((endCnt-xEmoticon->anyCnt)*5)*ALPHA_MAX/100);break;
		}
			
			
			if(alpha != ALPHA_MAX)
			{
				setAlpha(alpha);
			}
			
			
			if(startCnt >= 45)
			{
				switch(startCnt%10)
				{
					case 0:imgNum = 16;break;
					case 1:imgNum = 17;break;
					case 2:imgNum = 18;break;
					case 3:imgNum = 19;break;
					case 4:imgNum = 20;break;
					case 5:imgNum = 21;break;
					case 6:imgNum = 22;break;
					case 7:imgNum = 23;break;
					case 8:imgNum = 24;break;
					case 9:imgNum = 25;break;
				}
				if(scale2 != 100)
				{
					xGame.isReSizeDraw = TRUE;
					xGame.reSize = scale2;
				}
				drawPacker(imgEmoticon, x, y, 0, imgH(imgEmoticon)/26*imgNum, imgW(imgEmoticon), imgH(imgEmoticon)/26, VH);
			}
			
			
			switch(startCnt%18)
		{
			case 0:
				imgNum = 5;
				break;
			case 1:
			case 17:
				imgNum = 6;
				break;
			case 2:
			case 16:
				imgNum = 7;
				break;
			case 3:
			case 15:
				imgNum = 8;
				break;
			case 4:
			case 14:
				imgNum = 9;
				break;
			case 5:
			case 13:
				imgNum = 10;
				break;
			case 6:
			case 12:
				imgNum = 11;
				break;
			case 7:
			case 11:
				imgNum = 12;
				break;
			case 8:
			case 10:
				imgNum = 13;
				break;
			case 9:
				imgNum = 14;
				break;
		}
			
			
			
			if(scale2 == 100 && scale != 100)
			{
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = scale;
			}
			drawPacker(imgEmoticon, x, y, 0, imgH(imgEmoticon)/26*imgNum, imgW(imgEmoticon), imgH(imgEmoticon)/26, VH);
			xGame.isReSizeDraw = FALSE;
			
			setAlpha(ALPHA_MAX);
			
			//번개
			startCnt -= 30;
			blendNum = 0;
			alpha = 0;
			w = 0;
			h = 0;
			scale = 0;
			switch(startCnt)
		{
			case 0:blendNum = 0;alpha=	25;scale=	100;w=	0;h=	0;break;
			case 1:blendNum = 0;alpha=	50;scale=	76.6667;w=	0;h=	0;break;
			case 2:blendNum = 0;alpha=	75;scale=	53.3333;w=	0;h=	0;break;
			case 3:blendNum = 0;alpha=	100;scale=	30;w=	0;h=	0;break;
			case 4:blendNum = 0;alpha=	100;scale=	30;w=	0.608;h=	-0.992;break;
			case 5:blendNum = 1;alpha=	100;scale=	30;w=	1.125;h=	-1.875;break;
			case 6:blendNum = 0.9;alpha=100;scale=	30;w=	-0.328;h=	0.303;break;
			case 7:blendNum = 0.8;alpha=100;scale=	30;w=	-1.75;h=	2.5;break;
			case 8:blendNum = 0.7;alpha=100;scale=	30;w=	-0.554;h=	0.892;break;
			case 9:blendNum = 0.6;alpha=100;scale=	30;w=	0.625;h=	-0.75;break;
			case 10:blendNum = 0.5;alpha=100;scale=	30;w=	-0.115;h=	0.236;break;
			case 11:blendNum = 0.4;alpha=100;scale=	30;w=	-0.875;h=	1.25;break;
			case 12:blendNum = 0.3;alpha=100;scale=	30;w=	-0.449;h=	0.633;break;
			case 13:blendNum = 0.2;alpha=100;scale=	30;w=	0;h=	0;break;
			case 14:blendNum = 0.1;alpha=100;scale=	30;w=	0;h=	0;break;
			case 15:blendNum = 0;alpha=	100;scale=	30;w=	0;h=	0;break;
			case 16:blendNum = 0;alpha=	90;scale=	30;w=	0;h=	0;break;
			case 17:blendNum = 0;alpha=	80;scale=	30;w=	0;h=	0;break;
			case 18:blendNum = 0;alpha=	70;scale=	30;w=	0;h=	0;break;
			case 19:blendNum = 0;alpha=	60;scale=	30;w=	0;h=	0;break;
			case 20:blendNum = 0;alpha=	50;scale=	30;w=	0;h=	0;break;
			case 21:blendNum = 0;alpha=	40;scale=	30;w=	0;h=	0;break;
			case 22:blendNum = 0;alpha=	30;scale=	30;w=	0;h=	0;break;
			case 23:blendNum = 0;alpha=	20;scale=	30;w=	0;h=	0;break;
			case 24:blendNum = 0;alpha=	10;scale=	30;w=	0;h=	0;break;
			case 25:blendNum = 0;alpha=	0;scale=	30;w=	0;h=	0;break;
		}
			
			
			
			
			
			if(blendNum != 0)
			{
				xGame.isBlend = TRUE;
				xGame.blendType = BLEND_WHITEALPHA;
				xGame.blendNum = blendNum*255.0f;
			}
			if(alpha != 100)
			{
				setAlpha(alpha*ALPHA_MAX/100);
			}
			if(scale != 100)
			{
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = scale;
			}
			drawPacker(imgEmoticon, x+w-6, y+h, 0, imgH(imgEmoticon)/26*15, imgW(imgEmoticon), imgH(imgEmoticon)/26, VH);
			xGame.isBlend = FALSE;
			xGame.isReSizeDraw = FALSE;
			setAlpha(ALPHA_MAX);
			
			
			startCnt -= 3;
			blendNum = 0;
			alpha = 0;
			w = 0;
			h = 0;
			scale = 0;
			switch(startCnt)
		{
			case 0:blendNum = 0;alpha=	25;scale=	100;w=	0;h=	0;break;
			case 1:blendNum = 0;alpha=	50;scale=	83;w=	0;h=	0;break;
			case 2:blendNum = 0;alpha=	75;scale=	66;w=	0;h=	0;break;
			case 3:blendNum = 0;alpha=	100;scale=	49;w=	0;h=	0;break;
			case 4:blendNum = 0;alpha=	100;scale=	49;w=	0.608;h=	-0.992;break;
			case 5:blendNum = 1;alpha=	100;scale=	49;w=	1.125;h=	-1.875;break;
			case 6:blendNum = 0.9;alpha=100;scale=	49;w=	-0.328;h=	0.303;break;
			case 7:blendNum = 0.8;alpha=100;scale=	49;w=	-1.75;h=	2.5;break;
			case 8:blendNum = 0.7;alpha=100;scale=	49;w=	-0.554;h=	0.892;break;
			case 9:blendNum = 0.6;alpha=100;scale=	49;w=	0.625;h=	-0.75;break;
			case 10:blendNum = 0.5;alpha=100;scale=	49;w=	-0.115;h=	0.236;break;
			case 11:blendNum = 0.4;alpha=100;scale=	49;w=	-0.875;h=	1.25;break;
			case 12:blendNum = 0.3;alpha=100;scale=	49;w=	-0.449;h=	0.633;break;
			case 13:blendNum = 0.2;alpha=100;scale=	49;w=	0;h=	0;break;
			case 14:blendNum = 0.1;alpha=100;scale=	49;w=	0;h=	0;break;
			case 15:blendNum = 0;alpha=	100;scale=	49;w=	0;h=	0;break;
			case 16:blendNum = 0;alpha=	90;scale=	49;w=	0;h=	0;break;
			case 17:blendNum = 0;alpha=	80;scale=	49;w=	0;h=	0;break;
			case 18:blendNum = 0;alpha=	70;scale=	49;w=	0;h=	0;break;
			case 19:blendNum = 0;alpha=	60;scale=	49;w=	0;h=	0;break;
			case 20:blendNum = 0;alpha=	50;scale=	49;w=	0;h=	0;break;
			case 21:blendNum = 0;alpha=	40;scale=	49;w=	0;h=	0;break;
			case 22:blendNum = 0;alpha=	30;scale=	49;w=	0;h=	0;break;
			case 23:blendNum = 0;alpha=	20;scale=	49;w=	0;h=	0;break;
			case 24:blendNum = 0;alpha=	10;scale=	49;w=	0;h=	0;break;
			case 25:blendNum = 0;alpha=	0;scale=	49;w=	0;h=	0;break;
		}
			if(blendNum != 0)
			{
				xGame.isBlend = TRUE;
				xGame.blendType = BLEND_WHITEALPHA;
				xGame.blendNum = blendNum*255.0f;
			}
			if(alpha != 100)
			{
				setAlpha(alpha*ALPHA_MAX/100);
			}
			if(scale != 100)
			{
				xGame.isReSizeDraw = TRUE;
				xGame.reSize = scale;
			}
			
			drawPacker(imgEmoticon, x+w-6, y+h, 0, imgH(imgEmoticon)/26*15, imgW(imgEmoticon), imgH(imgEmoticon)/26, VH);
			xGame.isBlend = FALSE;
			xGame.isReSizeDraw = FALSE;
			setAlpha(ALPHA_MAX);
		break;
	}
}

void addDebug(const char*strText)
{
/*
	if(xDebug.totalNum < DEBUGMAX-1)
		sprintf(xDebug.strTextp[xDebug.totalNum++], "%d.%s",xDebug.logCnt++,strText);
	else
	{
		for(int i=0;i<DEBUGMAX-1;i++)
		{
			sprintf(xDebug.strTextp[i], "%s",xDebug.strTextp[i+1]);
		}
		sprintf(xDebug.strTextp[xDebug.totalNum-1], "%d.%s",xDebug.logCnt++,strText);
	}
 */
}

void drawDebug()
{
	/*
	int px = 0;
	int py = 0;
	
	gSetColor(0, 0, 0);
	setAlpha(200);
	fillRect(px, py, lcdW, 400);
	gSetColor(255, 255, 255);
	setAlpha(ALPHA_MAX);
	for(int i=0;i<xDebug.totalNum;i++)
	{
		gDrawString(px+20, py+20+(i*18), xDebug.strTextp[i], VL);
	}
	 */
}

void worldMapInitImgLoad(int type)
{
	//베스트 모델 불러오기
	
	XFACE xFaceTemp;
	xFaceTemp.hairNum = DONT;
	xFaceTemp.faceNum = DONT;
	xFaceTemp.faceType = 0;
	switch(type)
	{
	case 0:		//베스트 모델
		for(int m=0;m<xWinnerModel.totalNum;m++)
		{
			setSpritF(&xSpritDrawSub,&xWinnerModel.xF[m],ACT_FRONT);
			xFaceTemp.hairNum = xWinnerModel.modelNum[m]+1000;
			xFaceTemp.faceNum = xWinnerModel.modelNum[m]+1000;
			drawHair(0,0,xFaceTemp.hairNum,0,0,0);
			drawFace(0,0,&xFaceTemp,0,0);
		}
		break;
	case 1:		//직원 불러오기
		for(int floor=0;floor<FLOORMAX;floor++)
		{
			setSpritF(&xSpritDrawSub,&xPaymentAssistant[floor].xF,ACT_FRONT);
			drawHair(0,0,xPaymentAssistant[floor].xFace.hairNum,0,0,0);
			drawFace(0,0,&xPaymentAssistant[floor].xFace,0,0);
			
			setSpritF(&xSpritDrawSub,&xShopAssistant[floor][0].xF,ACT_FRONT);
			drawHair(0,0,xShopAssistant[floor][0].xFace.hairNum,0,0,0);
			drawFace(0,0,&xShopAssistant[floor][0].xFace,0,0);
		}
		break;
	}
}

void prcGlitterEff(XGLITTEREFF xGlitterEff[],int x,int y)
{
	for(int glitterI=0;glitterI < 1/*GLITTEREFFMAXSUB*/; glitterI++)
	{
		if(xGlitterEff[glitterI].state == GLITTEREFF_STATE_PLAY)
		{
			xGlitterEff[glitterI].x = x+xGlitterEff[glitterI].rx;
			xGlitterEff[glitterI].y = y+xGlitterEff[glitterI].ry;
			drawGlitterEff(&xGlitterEff[glitterI]);
		}
	}
}

void drawGlitterEff(XGLITTEREFF *xGlitterEff)
{
	switch(xGlitterEff->anyCnt++)
	{
	case 0:	xGame.isReSizeDraw = TRUE; xGame.reSize = 0; break;
	case 1:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.5f; break;
	case 2:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*1.0f; break;
	case 3:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.9f; break;
	case 4:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.8f; break;
	case 5:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.7f; break;
	case 6:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.6f; break;
	case 7:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.5f; break;
	case 8:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.4f; break;
	case 9:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.3f; break;
	case 10:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.2f; break;
	case 11:	xGame.isReSizeDraw = TRUE; xGame.reSize = xGlitterEff->resizeMax*0.1f;
			xGlitterEff->state =  GLITTEREFF_STATE_DONT;
			break;
	}
		
	xGame.isBlend = TRUE;
	xGame.blendType = BLEND_ADDP;
	xGame.isRotate = TRUE;
	xGame.rotateNum = (xGlitterEff->anyCnt*3)%360;
	drawPacker(imgGlitterEff, xGlitterEff->x, xGlitterEff->y, 0, 0, imgW(imgGlitterEff), imgH(imgGlitterEff), VH);
	xGame.isRotate = FALSE;
	xGame.isBlend = FALSE;
	xGame.isReSizeDraw = FALSE;
}

void makeGlitterEff(XGLITTEREFF xGlitterEff[],int w,int h)
{
	for(int glitterI=0;glitterI < 1/*GLITTEREFFMAXSUB*/; glitterI++)
	{
		if(xGlitterEff[glitterI].state == GLITTEREFF_STATE_DONT)
		{
			xGlitterEff[glitterI].rx = w;
			xGlitterEff[glitterI].ry = h;
			xGlitterEff[glitterI].state = GLITTEREFF_STATE_PLAY;
			xGlitterEff[glitterI].resizeMax = ranDom(50, 100);
			xGlitterEff[glitterI].anyCnt = 0;
			break;
		}
	}
}

void drawCarBox(int x,int y,int carCode,int anyCnt,int pos)
{
	int alpha1;
	int y1;
	int alpha2;
	int y2;
	
	int x3;
	int y3;
	
	switch(pos)
	{
	case MOVETYPE_XPLUS:
	case MOVETYPE_YPLUS:
		y += imgCar[carCode][0].h/2;
		y += xCar.boxY[carCode][0];
		break;
	case MOVETYPE_XMINUS:
	case MOVETYPE_YMINUS:
		y += imgCar[carCode][1].h/2;
		y += xCar.boxY[carCode][1];
		break;
	}
	
	switch(pos)
	{
	case MOVETYPE_XPLUS:
		x -= xCar.boxX[carCode][0];
		break;
	case MOVETYPE_YPLUS:
		x += xCar.boxX[carCode][0];
		break;
	case MOVETYPE_XMINUS:
		x += xCar.boxX[carCode][1];
		break;
	case MOVETYPE_YMINUS:
		x -= xCar.boxX[carCode][1];
		break;
	}
			
	alpha1 = 100;
	y1 = 0;
	switch(anyCnt)
	{
	case 0:alpha1=0;y1=	0-73;break;
	case 1:alpha1=7;y1=	0-73;break;
	case 2:alpha1=14;y1=0-73;break;
	case 3:alpha1=22;y1=1-73;break;
	case 4:alpha1=29;y1=2-73;break;
	case 5:alpha1=36;y1=3-73;break;
	case 6:alpha1=43;y1=5-73;break;
	case 7:alpha1=51;y1=7-73;break;
	case 8:alpha1=58;y1=10-73;break;
	case 9:alpha1=65;y1=14-73;break;
	case 10:alpha1=72;y1=20-73;break;
	case 11:alpha1=79;y1=27-73;break;
	case 12:alpha1=87;y1=36-73;break;
	case 13:alpha1=94;y1=52-73;break;
	case 14:alpha1=100;y1=73-73;break;
	case 15:alpha1=100;y1=73-73;break;
	case 16:alpha1=100;y1=70-73;break;
	case 17:alpha1=100;y1=66-73;break;
	case 18:alpha1=100;y1=62-73;break;
	case 19:alpha1=100;y1=57-73;break;
	case 20:alpha1=100;y1=53-73;break;
	case 21:alpha1=100;y1=53-73;break;
	case 22:alpha1=100;y1=53-73;break;
	case 23:alpha1=100;y1=53-73;break;
	case 24:alpha1=100;y1=54-73;break;
	case 25:alpha1=100;y1=55-73;break;
	case 26:alpha1=100;y1=57-73;break;
	case 27:alpha1=100;y1=59-73;break;
	case 28:alpha1=100;y1=64-73;break;
	case 29:alpha1=100;y1=73-73;break;
	case 30:alpha1=100;y1=72-73;break;
	case 31:alpha1=100;y1=71-73;break;
	case 32:alpha1=100;y1=70-73;break;
	case 33:alpha1=100;y1=70-73;break;
	case 34:alpha1=100;y1=71-73;break;
	case 35:alpha1=100;y1=72-73;break;
	case 36:alpha1=100;y1=73-73;break;
	}
	
	alpha2 = 100;
	y2 = 0;
	switch(anyCnt)
	{
	case 0:case 1:case 2:case 3:alpha2=0;y2=	-73;break;
	case 4:alpha2=10;y2=-73;break;
	case 5:alpha2=20;y2=-73;break;
	case 6:alpha2=30;y2=-72;break;
	case 7:alpha2=40;y2=-71;break;
	case 8:alpha2=50;y2=-70;break;
	case 9:alpha2=60;y2=-68;break;
	case 10:alpha2=70;y2=-66;break;
	case 11:alpha2=80;y2=-63;break;
	case 12:alpha2=90;y2=-59;break;
	case 13:alpha2=100;y2=-53;break;
	case 14:alpha2=100;y2=-46;break;
	case 15:alpha2=100;y2=-37;break;
	case 16:alpha2=100;y2=-21;break;
	case 17:alpha2=100;y2=0;break;
	case 18:alpha2=100;y2=2;break;
	case 19:alpha2=100;y2=-1;break;
	case 20:alpha2=100;y2=-4;break;
	case 21:alpha2=100;y2=-8;break;
	case 22:alpha2=100;y2=-12;break;
	case 23:alpha2=100;y2=-14;break;
	case 24:alpha2=100;y2=-14;break;
	case 25:alpha2=100;y2=-14;break;
	case 26:alpha2=100;y2=-14;break;
	case 27:alpha2=100;y2=-13;break;
	case 28:alpha2=100;y2=-12;break;
	case 29:alpha2=100;y2=-11;break;
	case 30:alpha2=100;y2=-9;break;
	case 31:alpha2=100;y2=-6;break;
	case 32:alpha2=100;y2=0;break;
	case 33:alpha2=100;y2=-1;break;
	case 34:alpha2=100;y2=-2;break;
	case 35:alpha2=100;y2=-4;break;
	case 36:alpha2=100;y2=-3;break;
	case 37:alpha2=100;y2=-2;break;
	case 38:alpha2=100;y2=-1;break;
	case 39:alpha2=100;y2=0;break;
	}
	
	x3 = 0;
	y3 = 0;
	if(anyCnt >= 40)
	{
		x3 = ranDom(-1, 1);
		y3 = ranDom(-1, 1);
	}
	if(alpha1 != 100)
		setAlpha(alpha1*ALPHA_MAX/100);
	
	drawPacker(imgCarBox0, x+x3, y+y1+y3, 0, 0, imgW(imgCarBox0), imgH(imgCarBox0), BH);
	if(alpha2 != 100)
		setAlpha(alpha2*ALPHA_MAX/100);
	x3 = 0;
	y3 = 0;
	if(anyCnt >= 40)
	{
		x3 = ranDom(-1, 1);
		y3 = ranDom(-1, 1);
	}
	drawPacker(imgCarBox1, x+x3, y+y2+y3-43, 0, 0, imgW(imgCarBox1), imgH(imgCarBox1), BH);
	setAlpha(ALPHA_MAX);
}

void drawProductionArrow(int x,int y)
{
	int h;
	switch(gameCnt%21)
	{
	case 0:h=0;break;
	case 1:h=0;break;
	case 2:h=0;break;
	case 3:h=1;break;
	case 4:h=2;break;
	case 5:h=11;break;
	case 6:h=20;break;
	case 7:h=21;break;
	case 8:h=22;break;
	case 9:h=22;break;
	case 10:h=22;break;
	case 11:h=22;break;
	case 12:h=22;break;
	case 13:h=21;break;
	case 14:h=20;break;
	case 15:h=11;break;
	case 16:h=2;break;
	case 17:h=1;break;
	case 18:h=0;break;
	case 19:h=0;break;
	case 20:h=0;break;
	}
	drawPacker(imgProductionArrow, x, y+h, 0, 0, imgW(imgProductionArrow), imgH(imgProductionArrow), VH);
}

void setUiHide()
{
	if(xWorldMap.uiHideCnt < 0)
		xWorldMap.uiHideCnt = 0;
	
	if(xWorldMap.uiHideCnt > 10)
		xWorldMap.uiHideCnt = 10;

	int per = xWorldMap.uiHideCnt*ALPHA_MAX/10;
	setAlpha(per);
}

void getUiHide()
{
	setAlpha(ALPHA_MAX);
}

//type 0:옷1:악세     makeType 0:자동발생 1:캐쉬구매용
void setTrendTemp(int type,int makeType)
{
	int totalSlot=0;
	int slot[2048];
	int ranTemp;
		
	ranTemp = ranDom(0, 100);
	int lvLimitS;
	int lvLimitE;
	
	if(xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 41;
		lvLimitE = 100;
	}
	else if(xBalanceData.trend31Per[xSaveTemp.lv.oriData]+xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 31;
		lvLimitE = 40;
	}
	else if(xBalanceData.trend21Per[xSaveTemp.lv.oriData]+xBalanceData.trend31Per[xSaveTemp.lv.oriData]+xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 21;
		lvLimitE = 30;
	}
	else if(xBalanceData.trend11Per[xSaveTemp.lv.oriData]+xBalanceData.trend21Per[xSaveTemp.lv.oriData]+xBalanceData.trend31Per[xSaveTemp.lv.oriData]+xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 11;
		lvLimitE = 20;
	}
	else
	{
		lvLimitS = 0;
		lvLimitE = 10;
	}
	
    int totalOpen = 0;
    int openList[512];
    
    
    
    
	M_Boolean isCheck;
	for(int i=0;i<FASHIONDATATYPEMAX;i++)
	{
		for(int j=0;j<FASHIONDATAMAX;j++)
		{
			if(xInventoryFashion.isOpen[i][j] == TRUE  && xFashionData[i][j].isStaff == 0)
			{
				isCheck = FALSE;
				switch(type)
				{
				case 0:	//의상
					switch(i)
					{
					case F_TYPE_OUTER:
					case F_TYPE_TOP:
					case F_TYPE_BOTTOM:
					case F_TYPE_ONEPIECE:
						isCheck = TRUE;
						break;
					}
					break;
				case 1:	//잡화
					switch(i)
					{
					case F_TYPE_SHOES:
					case F_TYPE_BAG:
					case F_TYPE_ACCECSSORY:
						isCheck = TRUE;
						break;
					}
					break;
				}
								
				
				
				switch(xFashionData[i][j].makeTime.oriData)
				{
				case 45:
				case 300:
				case 600:
				case 1800:
				case 3600:
					break;
				default:
					isCheck = FALSE;
					break;
				}
				
                if(isCheck == TRUE)
                    openList[totalOpen++] = (i*1000)+j;
                
                if(xFashionData[i][j].lv < lvLimitS || xFashionData[i][j].lv > lvLimitE)
                    isCheck = FALSE;
                
				if(isCheck == TRUE)
					slot[totalSlot++] = (i*1000)+j;
			}
		}
	}
			
	if(totalSlot == 0)
    {
		xTrend.itemCodeTemp = openList[ranDom(0, totalOpen-1)];
    }
	else
		xTrend.itemCodeTemp = slot[ranDom(0, totalSlot-1)];
	
	setMapData(xTrend.itemCodeTemp);
	
	int trendTime = 60*60*24;
	xTrend.perTemp = 200;
	if(makeType == 0)
	{
		for(int tt=0;tt<xTrend.totalParser;tt++)
		{
			if(xTrend.parserMakeTime[tt] == xFashionData[xMap.type][xMap.listNum].makeTime.oriData && xTrend.parserPer[tt] == 2)
			{
				trendTime = xTrend.parserTime[tt];
				xTrend.perTemp = xTrend.parserPer[tt]*100;
				break;
			}
		}
	}
	else
	{
		ranTemp = ranDom(0, 100);
		int perPlus = 0;
		for(int tt=0;tt<xTrend.totalParser;tt++)
		{
			if(xTrend.parserMakeTime[tt] == xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
			{
				perPlus += xTrend.parserCheckPer[tt];
				if(ranTemp <= perPlus)
				{
					trendTime = xTrend.parserTime[tt];
					xTrend.perTemp = xTrend.parserPer[tt]*100;
					break;
				}
			}
		}
	}
		
	xTrend.timeTemp = trendTime;
	xWorldMap.newModelAnyCnt = 0;
			
	switch(xMap.type)
	{
	case F_TYPE_OUTER:
	case F_TYPE_TOP:
	case F_TYPE_BOTTOM:
	case F_TYPE_ONEPIECE:
		setFiveRocksCustom("유행","총유행발생","의상유행",xFashionData[xMap.type][xMap.listNum].strName,1);
		break;
	case F_TYPE_SHOES:
	case F_TYPE_BAG:
	case F_TYPE_ACCECSSORY:
		setFiveRocksCustom("유행","총유행발생","잡화유행",xFashionData[xMap.type][xMap.listNum].strName,1);
		break;
	}
}



void prcShowWindow()
{
	if(xWorldMap.isFriendMap == FALSE)
	{
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
			{
				if(xShowWindowInfo[floor][ss].isUse == TRUE && xShowWindowInfo[floor][ss].isFitting == TRUE)
				{
					if(xShowWindowInfo[floor][ss].isFameEvent == FALSE)
					{
						if(++xShowWindowInfo[floor][ss].fameEventStart > 30*60)
						{
							xShowWindowInfo[floor][ss].isFameEvent = TRUE;
							xShowWindowInfo[floor][ss].eventBoxShowAntCnt = 0;
						}
					}
					else
					{
						++xShowWindowInfo[floor][ss].fameEvent;
					}
				}
				else
				{
					xShowWindowInfo[floor][ss].isFameEvent = FALSE;
					xShowWindowInfo[floor][ss].fameEventStart = 0;
				}
			}
		}
	}
}




void resetDoor()
{
	//초기화
	for(int w=0;w<xMap.shopPointW;w++)
		xMap.data[0][5][xMap.shopPointX + w][xMap.shopPointY] = 0;
	for(int h=0;h<xMap.shopPointH;h++)
		xMap.data[0][5][xMap.shopPointX][xMap.shopPointY+h] = 0;
	
	
	xWorldMap.floorUpX = xMap.shopPointX+(xMap.shopPointW-1);
	xWorldMap.floorUpY = xMap.shopPointY;
	
	xWorldMap.floorDownX = xMap.shopPointX+(xMap.shopPointW-1)-2;
	xWorldMap.floorDownY = xMap.shopPointY;
		
	
	for(int w=0;w<xMap.shopPointW;w++)
	{
		
		if(xMap.data[0][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
		{
			setMapData(xMap.data[0][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			if(xMap.type == INTERIOR_TYPE_DOOR)
			{
				xWorldMap.doorX = xMap.shopPointX + w;
				xWorldMap.doorY = xMap.shopPointY - 1;
				xWorldMap.doorCode = xMap.data[0][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1];
				xWorldMap.doorKey = xMap.dataKey[0][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1];
				xWorldMap.doorMakeX = xMap.shopPointX + w+1;
				xWorldMap.doorMakeY = xMap.shopPointY;
				xMap.data[0][5][xWorldMap.doorMakeX][xWorldMap.doorMakeY] = 4;
				return;
			}
		}
	}
	
	for(int h=0;h<xMap.shopPointH;h++)
	{
		if(xMap.data[0][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
		{
			setMapData(xMap.data[0][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
			if(xMap.type == INTERIOR_TYPE_DOOR)
			{
				xWorldMap.doorX = xMap.shopPointX - 1;
				xWorldMap.doorY = xMap.shopPointY + h;
				xWorldMap.doorCode = xMap.data[0][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h];
				xWorldMap.doorKey = xMap.dataKey[0][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h];
				xWorldMap.doorMakeX = xMap.shopPointX;
				xWorldMap.doorMakeY = xMap.shopPointY+h+1;
				xMap.data[0][5][xWorldMap.doorMakeX][xWorldMap.doorMakeY] = -4;
				return;
			}
		}
	}
}

void drawExternalWallIcon(int x,int y,int code)
{
	
	if(imgExternalWallIcon[code].texture == NULL)
	{
		sprintf(strTempS, "externalwallc%d%d.png",code,0);
		loadImgDocuments(strTempS, &imgExternalWallIcon[code]);
	}
	drawImage(&imgExternalWallIcon[code], x, y, 0, 0, imgExternalWallIcon[code].w, imgExternalWallIcon[code].h, VH);
}

void setCallShopAssistant(int shopNpcNum,int assistantNum)
{
	int endX;
	int endY;
	int i = shopNpcNum;
	int k = assistantNum;
	//요청한 옷과 매칭되는 테이블을 찾는다 그 짧은사이에 사라졌을수도 있으니 그럴때는 그냥 NPC만 WAIT처리하면 된다!
	resetSellTableInfo(xShopNpc[i].floor);	//xSell.tableNumSlot_Total[xSell.totalTotal]
	int selectSellTable = DONT;
	for(int ss=0;ss<xSell.totalTotal[xShopNpc[i].floor];ss++)
	{
		setMapData(xSellTableInfo[xShopNpc[i].floor][xSell.tableNumSlot_Total[xShopNpc[i].floor][ss]].interiorCode);
		int type=xMap.type;
		int list=xMap.listNum;
		
		for(int tt=0;tt<xObj.xObjData[type][list].slot;tt++)
		{
			if(xSellTableInfo[xShopNpc[i].floor][xSell.tableNumSlot_Total[xShopNpc[i].floor][ss]].xSlot[tt].code == xShopNpc[i].buyItemCode_ASSISTCALL)
			{
				//검색된 테이블번호
				selectSellTable = xSell.tableNumSlot_Total[xShopNpc[i].floor][ss];
				break;
			}
		}
	}

	if(selectSellTable == DONT)
	{
		xShopNpc[i].state = SHOPNPC_STATE_WAIT;
		xShopNpc[i].anyCnt = 0;
		xShopAssistant[xShopNpc[i].floor][k].state = SHOPASSISTANT_STATE_WAIT;
		setSpeak(&xShopNpc[i].xSpeak, "요청한 옷이 없나요?", SPEAKFRAMEMAX);
	}
	else
	{
		//점원호출대기상태
		xShopNpc[i].state = SHOPNPC_STATE_CALLSHOPASSISTANTWAIT;
		xShopNpc[i].nowDelay = 0;
		xShopNpc[i].nowFrame = 0;
		if(xShowWindowInfo[xShopNpc[i].floor][xShopNpc[i].actInteriorNum].interiorCode >= 0)
			xShopNpc[i].actLook = MOVETYPE_XPLUS;
		else
			xShopNpc[i].actLook = MOVETYPE_YPLUS;
		//점원정보등록
		xShopAssistant[xShopNpc[i].floor][k].shopNpcNum = i;
		//검색된 테이블 연결
		xShopAssistant[xShopNpc[i].floor][k].sellTableNum = selectSellTable;
		//길찾기 알고리즘 등록
		setMapData(xSellTableInfo[xShopNpc[i].floor][xShopAssistant[xShopNpc[i].floor][k].sellTableNum].interiorCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
		if(xMap.rever == 0)
		{
			endX = xSellTableInfo[xShopNpc[i].floor][xShopAssistant[xShopNpc[i].floor][k].sellTableNum].x + 1;
			endY = xSellTableInfo[xShopNpc[i].floor][xShopAssistant[xShopNpc[i].floor][k].sellTableNum].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
			
			xShopAssistant[xShopNpc[i].floor][k].actLook = MOVETYPE_XMINUS;
		}
		else
		{
			endX = xSellTableInfo[xShopNpc[i].floor][xShopAssistant[xShopNpc[i].floor][k].sellTableNum].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
			endY = xSellTableInfo[xShopNpc[i].floor][xShopAssistant[xShopNpc[i].floor][k].sellTableNum].y + 1;
			
			xShopAssistant[xShopNpc[i].floor][k].actLook = MOVETYPE_YMINUS;
		}
		
		//이동경로에 문제있을때 NPC예외처리
		if(xSellTableInfo[xShopNpc[i].floor][xShopAssistant[xShopNpc[i].floor][k].sellTableNum].isAstarErr == TRUE)
		{
			xShopNpc[i].state = SHOPNPC_STATE_WAIT;
			xShopNpc[i].anyCnt = 0;
			//setSpeak(&xShopNpc[i].xSpeak, "점원테이블길찾기ERR_(개발확인)", SPEAKFRAMEMAX);
		}
		else if(setAstar(xShopAssistant[xShopNpc[i].floor][k].x-xMap.shopPointX, xShopAssistant[xShopNpc[i].floor][k].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,xShopNpc[i].floor) == FALSE)
		{
			xShopNpc[i].state = SHOPNPC_STATE_WAIT;
			xShopNpc[i].anyCnt = 0;
			//setSpeak(&xShopNpc[i].xSpeak, "점원테이블길찾기ERR_(개발확인)", SPEAKFRAMEMAX);
		}
		else
		{
			xShopAssistant[xShopNpc[i].floor][k].state = SHOPASSISTANT_STATE_SELLTABLEMOVE;
			if(ranDom(0, 100) < 50)
				setSpeak(&xShopAssistant[xShopNpc[i].floor][k].xSpeak, "잠시만 기다려 주세요.", SPEAKFRAMEMAX);
			else
				setSpeak(&xShopAssistant[xShopNpc[i].floor][k].xSpeak, "네,알겠습니다.", SPEAKFRAMEMAX);
				
			xShopAssistant[xShopNpc[i].floor][k].bestTotalCnt = xAstar.totalCnt;
			xShopAssistant[xShopNpc[i].floor][k].bestNowCnt = 0;
			for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
			{
				xShopAssistant[xShopNpc[i].floor][k].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
				xShopAssistant[xShopNpc[i].floor][k].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
			}
			
			//다음이동
			if(xShopAssistant[xShopNpc[i].floor][k].bestX[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt] < xShopAssistant[xShopNpc[i].floor][k].bestX[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt+1])
				xShopAssistant[xShopNpc[i].floor][k].moveType = MOVETYPE_XPLUS;
			else if(xShopAssistant[xShopNpc[i].floor][k].bestX[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt] > xShopAssistant[xShopNpc[i].floor][k].bestX[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt+1])
				xShopAssistant[xShopNpc[i].floor][k].moveType = MOVETYPE_XMINUS;
			else if(xShopAssistant[xShopNpc[i].floor][k].bestY[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt] < xShopAssistant[xShopNpc[i].floor][k].bestY[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt+1])
				xShopAssistant[xShopNpc[i].floor][k].moveType = MOVETYPE_YPLUS;
			else if(xShopAssistant[xShopNpc[i].floor][k].bestY[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt] > xShopAssistant[xShopNpc[i].floor][k].bestY[xShopAssistant[xShopNpc[i].floor][k].bestNowCnt+1])
				xShopAssistant[xShopNpc[i].floor][k].moveType = MOVETYPE_YMINUS;
		}
	}
}

void setStateFashion()
{
	xWorldMap.isSubLoading = TRUE;
	xWorldMap.subLoadingAntCnt = 0;
	xWorldMap.subLoadingState = WORLDMAP_STATE_FASHIONSHOWNEW;
	xFashionShow.isRankChangeEvent = FALSE;
	xFashionShow.isBestScoreEvent = FALSE;
    
    
    for(int s=0;s<FASHIONSHOW_SELECTMAX;s++)
        xFashionShow.selectSlot[s] = DONT;
    
    
	
}

void setStateModel()
{
	xWorldMap.isSubLoading = TRUE;
	xWorldMap.subLoadingAntCnt = 0;
	xWorldMap.subLoadingState = WORLDMAP_STATE_MODEL;
}

void modelImgLoad(M_Boolean isLoad)
{
	
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_MODEL);
		setPacker(PACKER_STATE_MODEL2);
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_MODEL].img);
		freeImg(&xPacker[PACKER_STATE_MODEL2].img);
	}
}

void mailFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_MAIL);
		loadImg("shopmoneyicon11.png",&imgGiftGoldIcon);
		loadImg("shopmoneyicon1.png",&imgGiftLookIcon);
		loadImg("shoppremiumicon5.png",&imgGiftCandyIcon);
						
		loadImg("shoppremiumicon0.png", &imgGiftModelCastingCAIcon);
		loadImg("shoppremiumicon1.png", &imgGiftModelCastingBSIcon);
		loadImg("shoppremiumicon2.png", &imgGiftTrendHangerIcon);
		loadImg("shoppremiumicon3.png", &imgGiftTrendAccessoryIcon);
        
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_MAIL].img);
		freeImg(&imgGiftGoldIcon);
		freeImg(&imgGiftLookIcon);
		freeImg(&imgGiftCandyIcon);
		
		freeImg(&imgGiftModelCastingCAIcon);
		freeImg(&imgGiftModelCastingBSIcon);
		freeImg(&imgGiftTrendHangerIcon);
		freeImg(&imgGiftTrendAccessoryIcon);
	}
}
/////////////////////////////////////////
//////우편함 수정 2018. 2. 23 KBY
void setStateMail()
{
//	mailFreeLoad(TRUE);
	
    mailFreeLoad_FP(true);
	
	xWorldMap.state = WORLDMAP_STATE_MAIL;
	xMail.state = MAIL_STATE_MAIN;
	
	memset(xMail.strTextBox, 0, sizeof(xMail.strTextBox));
	
	xMail.selectTab = 0;
	xMail.totalMailSlot = 0;
	xMail.rowNum = 0;
	xMail.pageNum = 0;

    
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PANGCOUNTCHECK, TRUE);
    
    
    
}

void friendListAddFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		for(int slot=0;slot<5;slot++)
		{
			switch(xKakao.inviteType[slot])
			{
			case KAKAOINVITE_TYPE_CANDY:
				sprintf(strTempS, "minigamecandyicon%d.png",xKakao.inviteIconNum[slot]);
				loadImg(strTempS, &imgMiniGameIcon[slot]);
				break;
			case KAKAOINVITE_TYPE_GOLD:
				sprintf(strTempS, "minigamegoldicon%d.png",xKakao.inviteIconNum[slot]);
				loadImg(strTempS, &imgMiniGameIcon[slot]);
				break;
			case KAKAOINVITE_TYPE_LOOK:
				sprintf(strTempS, "minigamelookicon%d.png",xKakao.inviteIconNum[slot]);
				loadImg(strTempS, &imgMiniGameIcon[slot]);
				break;
			case KAKAOINVITE_TYPE_INTERIOR:
				break;
			case KAKAOINVITE_TYPE_MODEL_CA:
				sprintf(strTempS, "shoppremiumicon0.png");
				loadImg(strTempS, &imgMiniGameIcon[slot]);
				break;
			case KAKAOINVITE_TYPE_MODEL_BS:
				sprintf(strTempS, "shoppremiumicon1.png");
				loadImg(strTempS, &imgMiniGameIcon[slot]);
				break;
			}
		}
	}
	else
	{
		for(int slot=0;slot<5;slot++)
		{
			freeImg(&imgMiniGameIcon[slot]);
		}
	}
}

void friendListFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_FRIENDLIST);
		////////////////////////////////////////////
        loadImg("friendmaxicon.png", &imgFriendMaxIcon);
        
        loadImg("friendlist0.png", &imgFriendList[0]);
        loadImg("friendlist1.png", &imgFriendList[1]);
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_FRIENDLIST].img);
        freeImg(&imgFriendMaxIcon);
        
        freeImg(&imgFriendList[0]);
        freeImg(&imgFriendList[1]);
        
        
		friendListAddFreeLoad(FALSE);
		for(int i=0;i<FRIENDMAX;i++)
			freeImg(&imgFriend[i]);
	}
}

void setStateFriendList()
{
	
	friendListFreeLoad(TRUE);
    friendListFreeLoad_FP(TRUE);
	
	xWorldMap.state = WORLDMAP_STATE_FRIENDLIST;
	xFriend.state = FRIEND_STATE_PLAY;
    xFriend_FP.state = FRIEND_FP_STATE_PLAY;
    xFriend_FP.SearchState=FRIENDSEARCH_FP_STATE_PLAY;
    
	xFriend.totalNumList = 0;
	xFriend.nowRowNumList = 0;
	xFriend.nowPageNumList = 0;
	xFriend.totalNumListFollow = 0;
	xFriend.nowRowNumListFollow = 0;
	xFriend.nowPageNumListFollow = 0;
    xFriend_FP.isTouchLeftArrow=false;
    xFriend_FP.isTouchRightArrow=false;
    xFriend_FP.isTouchRecommend=false;
    xFriend_FP.isTouchEdit=false;
    xFriend_FP.isTouchSearch=false;
    xFriend_FP.isTouchClr=false;
    
    for(int k=0;k<FRIENDSLOTMAX;k++)
    {
        xFriend_FP.isTouchVisit[k]=false;
        xFriend_FP.isTouchJoin[k]=false;
        xFriend_FP.isTouchDel[k]=false;
    }
}

void makeBlinkEff(int x,int y)
{
	if(xBlinkEff.totalNum > BLINKEFFMAX-3)
		return;
		
	xBlinkEff.fx[xBlinkEff.totalNum] = x;
	xBlinkEff.fy[xBlinkEff.totalNum] = y;
	xBlinkEff.anyCnt[xBlinkEff.totalNum] = 0;
	xBlinkEff.anyCntMax[xBlinkEff.totalNum] = ranDom(10, 60);
	xBlinkEff.fspeedY[xBlinkEff.totalNum] = (float)ranDom(20, 200)*0.01f;
	xBlinkEff.scale[xBlinkEff.totalNum] = ranDom(30, 150);
	xBlinkEff.fspeedRot[xBlinkEff.totalNum++] = ranDom(3, 20);
	
	
	
	
	
	
}


void makeBlinkEffAmulet(int x,int y)
{
    if(xBlinkEff.totalNum > BLINKEFFMAX-3)
        return;
    
    xBlinkEff.fx[xBlinkEff.totalNum] = x;
    xBlinkEff.fy[xBlinkEff.totalNum] = y;
    xBlinkEff.anyCnt[xBlinkEff.totalNum] = 0;
    xBlinkEff.anyCntMax[xBlinkEff.totalNum] = ranDom(20, 25);
    xBlinkEff.fspeedY[xBlinkEff.totalNum] = (float)ranDom(20, 40)*0.01f;
    xBlinkEff.scale[xBlinkEff.totalNum] = ranDom(70, 150);
    xBlinkEff.fspeedRot[xBlinkEff.totalNum++] = ranDom(3, 20);
}



void drawBlinkEff()
{
	for(int i=0;i<xBlinkEff.totalNum;i++)
	{
		xBlinkEff.fy[i] += xBlinkEff.fspeedY[i]*xBlinkEff.anyCnt[i];
		xGame.isBlend = TRUE;
		xGame.blendType = BLEND_ADDP;
		xGame.isRotate = TRUE;
		xBlinkEff.frot[i] += xBlinkEff.fspeedRot[i];
		xGame.rotateNum = xBlinkEff.frot[i];
		
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = (xBlinkEff.anyCntMax[i]-xBlinkEff.anyCnt[i])*xBlinkEff.scale[i]/xBlinkEff.anyCntMax[i];
		
		if(xWorldMap.state == WORLDMAP_STATE_PLAY)
			drawPacker(imgBlinkEff0, xBlinkEff.fx[i], xBlinkEff.fy[i], 0, 0, imgW(imgBlinkEff0), imgH(imgBlinkEff0), VH);


		
		xGame.isBlend = FALSE;
		xGame.isRotate = FALSE;
		xGame.isReSizeDraw = FALSE;
					
		if(++xBlinkEff.anyCnt[i] >= xBlinkEff.anyCntMax[i])
		{
			for(int k=i;k<xBlinkEff.totalNum-1;k++)
			{
				xBlinkEff.anyCnt[k] = xBlinkEff.anyCnt[k+1];
				xBlinkEff.anyCntMax[k] = xBlinkEff.anyCntMax[k+1];
				
				xBlinkEff.fx[k] = xBlinkEff.fx[k+1];
				xBlinkEff.fy[k] = xBlinkEff.fy[k+1];
				xBlinkEff.fspeedY[k] = xBlinkEff.fspeedY[k+1];
				xBlinkEff.frot[k] = xBlinkEff.frot[k+1];
				xBlinkEff.fspeedRot[k] = xBlinkEff.fspeedRot[k+1];
				xBlinkEff.scale[k] = xBlinkEff.scale[k+1];
				
			}
			xBlinkEff.totalNum--;
			i--;
		}
	}
}


XIMG* getImgFittingF(int type,int list,int layer1,int layer2)
{
	
	layer2 = xFashionData[type][list].layer;
	switch(type)
	{
	case 0:
		return &imgFittingF0[list][layer1][layer2];
		break;
	case 1:
		return &imgFittingF1[list][layer1][layer2];
		break;
	case 2:
		return &imgFittingF2[list][layer1][layer2];
		break;
	case 3:
		return &imgFittingF3[list][layer1][layer2];
		break;
	case 4:
		return &imgFittingF4[list][layer1][layer2];
		break;
	case 5:
		return &imgFittingF5[list][layer1][layer2];
		break;
	case 6:
		return &imgFittingF6[list][layer1][layer2];
		break;
			
	}
	return NULL;
	//
}


XIMG* getImgFittingFInOut(int type,int list,int layer1,int layer2)
{
	layer2 = xFashionData[type][list].layer;
	switch(type)
	{
	case 0:
		return &imgFittingFInOut0[list][layer1][layer2];
		break;
	case 1:
		return &imgFittingFInOut1[list][layer1][layer2];
		break;
	case 2:
		return &imgFittingFInOut2[list][layer1][layer2];
		break;
	case 3:
		return &imgFittingFInOut3[list][layer1][layer2];
		break;
	case 4:
		return &imgFittingFInOut4[list][layer1][layer2];
		break;
	case 5:
		return &imgFittingFInOut5[list][layer1][layer2];
		break;
	case 6:
		return &imgFittingFInOut6[list][layer1][layer2];
		break;			
	}
	return NULL;
}
																			
void setNpcStatePorterMove(int manNum,int womanNum)
{
	int endX;
	int endY;
	if(xShopNpc[womanNum].state == SHOPNPC_STATE_DONT || xShopNpc[womanNum].porterNpcNum != manNum || xShopNpc[womanNum].isPorter_woman == FALSE)
	{
		//사라지기
		//setSpeak(&xShopNpc[manNum].xSpeak, "짐꾼 여자찾기 오류11(개발확인)", SPEAKFRAMEMAX);
		setNpcStateExit(manNum, xShopNpc[manNum].floor);		
	}
	//층이동
	else if(xShopNpc[manNum].floor < xShopNpc[womanNum].floor)
	{
		//올라가기로
		setNpcStateFloorUp(manNum, xShopNpc[manNum].floor);
	}
	else if(xShopNpc[manNum].floor > xShopNpc[womanNum].floor)
	{
		//올라가기로
		setNpcStateFloorDown(manNum, xShopNpc[manNum].floor);
	}
	else if(xShopNpc[manNum].x != xShopNpc[womanNum].x_befor || xShopNpc[manNum].y != xShopNpc[womanNum].y_befor)
	{
		//따라가기
		xShopNpc[manNum].state = SHOPNPC_STATE_MOVE;
		
		endX = xShopNpc[womanNum].x_befor;
		endY = xShopNpc[womanNum].y_befor;
		//새위치 탐색
		if(setAstar(xShopNpc[manNum].x-xMap.shopPointX, xShopNpc[manNum].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,xShopNpc[manNum].floor) == FALSE)
		{
			//setSpeak(&xShopNpc[manNum].xSpeak, "짐꾼 여자찾기 오류22(개발확인)", SPEAKFRAMEMAX);
			if(xShopNpc[manNum].state != SHOPNPC_STATE_PORTER_WM_MAN_WAIT)
			{
				xShopNpc[manNum].state = SHOPNPC_STATE_PORTER_WM_MAN_WAIT;
				xShopNpc[manNum].nowDelay = 0;
				xShopNpc[manNum].nowFrame = 0;
			}			
		}
		else
		{
			xShopNpc[manNum].bestTotalCnt = xAstar.totalCnt;
			xShopNpc[manNum].bestNowCnt = 0;
			for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
			{
				xShopNpc[manNum].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
				xShopNpc[manNum].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
			}
			//다음이동
			if(xShopNpc[manNum].bestX[xShopNpc[manNum].bestNowCnt] < xShopNpc[manNum].bestX[xShopNpc[manNum].bestNowCnt+1])
				xShopNpc[manNum].moveType = MOVETYPE_XPLUS;
			else if(xShopNpc[manNum].bestX[xShopNpc[manNum].bestNowCnt] > xShopNpc[manNum].bestX[xShopNpc[manNum].bestNowCnt+1])
				xShopNpc[manNum].moveType = MOVETYPE_XMINUS;
			else if(xShopNpc[manNum].bestY[xShopNpc[manNum].bestNowCnt] < xShopNpc[manNum].bestY[xShopNpc[manNum].bestNowCnt+1])
				xShopNpc[manNum].moveType = MOVETYPE_YPLUS;
			else if(xShopNpc[manNum].bestY[xShopNpc[manNum].bestNowCnt] > xShopNpc[manNum].bestY[xShopNpc[manNum].bestNowCnt+1])
				xShopNpc[manNum].moveType = MOVETYPE_YMINUS;
		}
	}
	else
	{
		if(xShopNpc[manNum].state != SHOPNPC_STATE_PORTER_WM_MAN_WAIT)
		{
			xShopNpc[manNum].state = SHOPNPC_STATE_PORTER_WM_MAN_WAIT;
			xShopNpc[manNum].nowDelay = 0;
			xShopNpc[manNum].nowFrame = 0;
		}		
	}
}
																			
M_Boolean keyQuestIcon(int type, int param1, int param2,int touchId)
{
	M_Boolean isKeyEvent;
	int keyEventNum;
	//퀘스트
	if(xWorldMap.isExternal == FALSE && xQuestInfo.totalNum > 0)
	{
		if(type == MH_KEY_PRESSEVENT)
		{			
			if(touchType == USER_POINT_PRESS_EVENT)
			{
				if(touchCheck(&xQuestInfo.xTouchClip) == TRUE)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isQuestKey = TRUE;
				}
			}
			
			if(xWorldMap.isQuestKey == TRUE)
			{
				dragScrollKeyPrc(&xQuestInfo.xDragScrollSlot,2);
				return TRUE;
			}
		}
		else if(type == MH_KEY_RELEASEEVENT)
		{
			if(xWorldMap.isQuestKey == TRUE)
			{
				if(xQuestInfo.xDragScrollSlot.touchXposBefore != DONT)
				{
					dragScrollKeyPrc(&xQuestInfo.xDragScrollSlot,3);
				}
				else
				{
					isKeyEvent = FALSE;
					keyEventNum = 0;
					
					for(int i=0;i<5;i++)
					{
						if(touchCheck(&xQuestInfo.xTouchSlot[i]) == TRUE)
						{
							isKeyEvent = TRUE;
							keyEventNum = i;
							break;
						}
					}
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_QUEST] == TRUE || xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_QUEST] == TRUE)
					{
						isKeyEvent = FALSE;
					}
					
					if(isKeyEvent == TRUE)
					{
						int selectSlot = keyEventNum+xQuestInfo.xDragScrollSlot.selectNum;
												
						if(selectSlot >= 0 && selectSlot < xQuestInfo.xDragScrollSlot.totalNum)
						{
							xQuestInfo.selectSlot = selectSlot;
							xWorldMap.state = WORLDMAP_STATE_QUESTINFO;
							xQuestInfo.state = QUESTINFO_STATE_PLAY;
							
							switch(xQuestInfo.xSlot[xQuestInfo.selectSlot].type)
							{
							case QUEST_TYPE_MAIN:
								if(xQuestMain.state == QUEST_STATE_NEW)
								{
									xQuestMain.state = QUEST_STATE_PLAY;
									///////////////////////////////////////////////////////////////////////////////////////
									xEventQueueNet.action[xEventQueueNet.totalNum]=1;		//0튜토리얼,1메인,2일반
									xEventQueueNet.slotNum[xEventQueueNet.totalNum]=0;		//일반퀘스트슬롯번호
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, FALSE);
									///////////////////////////////////////////////////////////////////////////////////////
								}
								break;
							case QUEST_TYPE_NORMAL:
								if(xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].state == QUEST_STATE_NEW)
								{
									xQuestDataNormal[xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum].state = QUEST_STATE_PLAY;
									///////////////////////////////////////////////////////////////////////////////////////
									xEventQueueNet.action[xEventQueueNet.totalNum]=2;		//0튜토리얼,1메인,2일반
									xEventQueueNet.slotNum[xEventQueueNet.totalNum]=xQuestInfo.xSlot[xQuestInfo.selectSlot].questNum;		//일반퀘스트슬롯번호
									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_QUEST, FALSE);
									///////////////////////////////////////////////////////////////////////////////////////
								}
								break;
							}
						}
					}
				}
				xQuestInfo.xDragScrollSlot.touchXpos = DONT;
				xQuestInfo.xDragScrollSlot.touchYpos = DONT;
				xQuestInfo.xDragScrollSlot.touchXposBefore = DONT;
				xQuestInfo.xDragScrollSlot.touchYposBefore = DONT;
				xWorldMap.isQuestKey = FALSE;
				return TRUE;
			}
		}
	}
	return FALSE;
}
																			
void setStateStaff(int slot)
{
	//스태프꾸미기
	xFitting.selectTabB = 0;
	xWorldMap.state = WORLDMAP_STATE_STAFF;
	xFitting.isInOutMenu = FALSE;
	xStaff.state = STAFF_STATE_PLAY;
	xStaff.selectStaffSlot = slot;
		
	switch(xStaff.staffSlot[xStaff.selectStaffSlot])
	{
	case STAFF_SLOT_PAYMENTASSISTANT_1F:
		xFitting.gender = xPaymentAssistant[0].gender;
		memcpy(&xFitting.xF[xPaymentAssistant[0].gender],&xPaymentAssistant[0].xF,sizeof(xPaymentAssistant[0].xF));
		memcpy(&xFitting.xFace,&xPaymentAssistant[0].xFace,sizeof(xPaymentAssistant[0].xFace));
		break;
	case STAFF_SLOT_SHOPASSISTANT1_1F:
		xFitting.gender = xShopAssistant[0][0].gender;
		memcpy(&xFitting.xF[xShopAssistant[0][0].gender],&xShopAssistant[0][0].xF,sizeof(xShopAssistant[0][0].xF));
		memcpy(&xFitting.xFace,&xShopAssistant[0][0].xFace,sizeof(xShopAssistant[0][0].xFace));
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_2F:
		xFitting.gender = xPaymentAssistant[1].gender;
		memcpy(&xFitting.xF[xPaymentAssistant[1].gender],&xPaymentAssistant[1].xF,sizeof(xPaymentAssistant[1].xF));
		memcpy(&xFitting.xFace,&xPaymentAssistant[1].xFace,sizeof(xPaymentAssistant[1].xFace));
		break;
	case STAFF_SLOT_SHOPASSISTANT1_2F:
		xFitting.gender = xShopAssistant[1][0].gender;
		memcpy(&xFitting.xF[xShopAssistant[1][0].gender],&xShopAssistant[1][0].xF,sizeof(xShopAssistant[1][0].xF));
		memcpy(&xFitting.xFace,&xShopAssistant[1][0].xFace,sizeof(xShopAssistant[1][0].xFace));
		break;
	case STAFF_SLOT_PAYMENTASSISTANT_3F:
		xFitting.gender = xPaymentAssistant[2].gender;
		memcpy(&xFitting.xF[xPaymentAssistant[2].gender],&xPaymentAssistant[2].xF,sizeof(xPaymentAssistant[2].xF));
		memcpy(&xFitting.xFace,&xPaymentAssistant[2].xFace,sizeof(xPaymentAssistant[2].xFace));
		break;
	case STAFF_SLOT_SHOPASSISTANT1_3F:
		xFitting.gender = xShopAssistant[2][0].gender;
		memcpy(&xFitting.xF[xShopAssistant[2][0].gender],&xShopAssistant[2][0].xF,sizeof(xShopAssistant[2][0].xF));
		memcpy(&xFitting.xFace,&xShopAssistant[2][0].xFace,sizeof(xShopAssistant[2][0].xFace));
		break;
	}
	setFittingTabChange();
}
	
																			
																			
M_Boolean drawExtensionContract(int x,int y,int anyCnt)
{
	int xx;
	int yy;
	int alpha;
	int rot;
	int scale;
	M_Boolean isResult = FALSE;
	
	alpha = 100;
	scale = 100;
	rot = 0;
	xx = 480;
	yy = 320;
	
	switch(anyCnt)
	{
	case 0:alpha=	0;scale=	147;xx=	135;yy=	-84;rot=		662;break;
	case 1:alpha=	12.5;scale=	141.906;xx=	247.334;yy=	47.5449;rot=	590.245;break;
	case 2:alpha=	25;scale=	131.333;xx=	297.537;yy=	106.333;rot=	441.333;break;
	case 3:alpha=	37.5;scale=	122.887;xx=	333.449;yy=	148.386;rot=	322.364;break;
	case 4:alpha=	50;scale=	117.356;xx=	361.385;yy=	181.1;rot=	244.465;break;
	case 5:alpha=	62.5;scale=	113.418;xx=	383.96;yy=	207.536;rot=	188.997;break;
	case 6:alpha=	75;scale=	110.444;xx=	402.578;yy=	229.337;rot=	147.111;break;
	case 7:alpha=	87.5;scale=	108.121;xx=	418.101;yy=	247.515;rot=	114.378;break;
	case 8:alpha=	100;scale=	106.268;xx=	431.109;yy=	262.748;rot=	88.286;break;
	case 9:alpha=	100;scale=	104.776;xx=	442.011;yy=	275.515;rot=	67.2694;break;
	case 10:alpha=	100;scale=	103.57;xx=	451.121;yy=	286.182;rot=	50.2822;break;
	case 11:alpha=	100;scale=	102.598;xx=	458.673;yy=	295.026;rot=	36.5878;break;
	case 12:alpha=	100;scale=	101.821;xx=	464.854;yy=	302.264;rot=	25.6457;break;
	case 13:alpha=	100;scale=	101.21;xx=	469.812;yy=	308.07;rot=	17.0464;break;
	case 14:alpha=	100;scale=	100.743;xx=	473.675;yy=	312.593;rot=	10.4714;break;
	case 15:alpha=	100;scale=	100.402;xx=	476.544;yy=	315.953;rot=	5.66728;break;
	case 16:alpha=	100;scale=	100.172;xx=	478.506;yy=	318.251;rot=	2.42863;break;
	case 17:alpha=	100;scale=	100.042;xx=	479.636;yy=	319.574;rot=	0.586531;break;
	case 18:alpha=	100;scale=	100;xx=		480;	yy=	320;rot=	0;
			
			break;
	}
	
	
	
	switch(anyCnt)
	{
	case 118:setAlpha(ALPHA_MAX*90/100);break;
	case 119:setAlpha(ALPHA_MAX*80/100);break;
	case 120:setAlpha(ALPHA_MAX*70/100);break;
	case 121:setAlpha(ALPHA_MAX*60/100);break;
	case 122:setAlpha(ALPHA_MAX*50/100);break;
	case 123:setAlpha(ALPHA_MAX*40/100);break;
	case 124:setAlpha(ALPHA_MAX*30/100);break;
	case 125:setAlpha(ALPHA_MAX*20/100);break;
	case 126:setAlpha(ALPHA_MAX*10/100);break;
	default:
		if(anyCnt>120)
			setAlpha(0);
		break;
	}
	
	
	if(alpha != 100)
		setAlpha(alpha*ALPHA_MAX/100);
	if(rot != 0)
	{
		xGame.isRotate = TRUE;
		xGame.rotateNum = 360-rot;
	}
	if(scale !=100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = scale;
	}
	drawPacker(imgStamp2, x+xx-480, y+yy-320, 0, 0, imgW(imgStamp2), imgH(imgStamp2), VH);
	setAlpha(ALPHA_MAX);
	xGame.isRotate = FALSE;
	xGame.isReSizeDraw = FALSE;
	if(anyCnt >= 30)
	{
		switch(anyCnt)
		{
			case 118:setAlpha(ALPHA_MAX*90/100);break;
			case 119:setAlpha(ALPHA_MAX*80/100);break;
			case 120:setAlpha(ALPHA_MAX*70/100);break;
			case 121:setAlpha(ALPHA_MAX*60/100);break;
			case 122:setAlpha(ALPHA_MAX*50/100);break;
			case 123:setAlpha(ALPHA_MAX*40/100);break;
			case 124:setAlpha(ALPHA_MAX*30/100);break;
			case 125:setAlpha(ALPHA_MAX*20/100);break;
			case 126:setAlpha(ALPHA_MAX*10/100);break;
			default:
				if(anyCnt>120)
				{
					setAlpha(0);
					isResult = TRUE;
				}
				break;
		}
				
		drawStamp(x+200, y+130, anyCnt-30,0);
		
		if(anyCnt-30 == 17)
			makeFire(x+200, y+130, 15);
	}
	return isResult;	
}
																			
M_Boolean drawStamp(int x,int y,int anyCnt,int type)
{
	int stampX;
	int stampY;
	int stampAlpha;
	int stampRot;
	M_Boolean isResult = FALSE;
	
	stampAlpha = 0;
	stampRot = 0;
	switch(anyCnt)
	{
	case 0:stampAlpha=	0;stampX=	1033;stampY=	59;stampRot=	36;break;
	case 1:stampAlpha=	20;stampX=	1032.09;stampY=	58.7867;stampRot=	35.9538;break;
	case 2:stampAlpha=	40;stampX=	1029.26;stampY=	58.1302;stampRot=	35.8071;break;
	case 3:stampAlpha=	60;stampX=	1024.27;stampY=	57.0215;stampRot=	35.5459;break;
	case 4:stampAlpha=	80;stampX=	1016.9;stampY=	55.4791;stampRot=	35.1528;break;
	case 5:stampAlpha=	100;stampX=	1006.81;stampY=	53.5618;stampRot=	34.6054;break;
	case 6:stampAlpha=	100;stampX=	993.61;stampY=	51.387;stampRot=	33.8742;break;
	case 7:stampAlpha=	100;stampX=	976.81;stampY=	49.1599;stampRot=	32.9196;break;
	case 8:stampAlpha=	100;stampX=	955.77;stampY=	47.2172;stampRot=	31.6856;break;
	case 9:stampAlpha=	100;stampX=	929.664;stampY=	46.1021;stampRot=	30.0894;break;
	case 10:stampAlpha=	100;stampX=	897.386;stampY=	46.6882;stampRot=	28;break;
	case 11:stampAlpha=	100;stampX=	857.388;stampY=	50.4119;stampRot=	25.1886;break;
	case 12:stampAlpha=	100;stampX=	807.42;stampY=	59.7419;stampRot=	21.1988;break;
	case 13:stampAlpha=	100;stampX=	743.695;stampY=	79.3767;stampRot=	14.945;break;
	case 14:stampAlpha=	100;stampX=	658.082;stampY=	120.605;stampRot=	5.30108;break;
	case 15:stampAlpha=	100;stampX=	499;stampY=	268;stampRot=	0;break;
	case 16:stampAlpha=	100;stampX=	506.5;stampY=	258.5;stampRot=	0;break;
	case 17:stampAlpha=	100;stampX=	495;stampY=	273.75;stampRot=	0;
		playSnd(SND_LVUP_POPUP);		
		break;
	case 18:stampAlpha=	100;stampX=	502.75;stampY=	263.25;stampRot=	0;break;
	case 19:stampAlpha=	100;stampX=	499;stampY=	268;stampRot=	0;break;
	case 20:stampAlpha=	100;stampX=	499;stampY=	268;stampRot=	0;break;
	case 21:stampAlpha=	100;stampX=	499;stampY=	268;stampRot=	0;break;
	case 22:stampAlpha=	100;stampX=	499;stampY=	268;stampRot=	0;break;
	case 23:stampAlpha=	100;stampX=	499;stampY=	268;stampRot=	0;break;
	case 24:stampAlpha=	100;stampX=	499;stampY=	268;stampRot=	0;break;
	case 25:stampAlpha=	100;stampX=	499.208;stampY=	267.737;stampRot=	0;break;
	case 26:stampAlpha=	100;stampX=	501.054;stampY=	265.406;stampRot=	0;break;
	case 27:stampAlpha=	100;stampX=	505.33;stampY=	260.009;stampRot=	0;break;
	case 28:stampAlpha=	100;stampX=	513.025;stampY=	250.295;stampRot=	0;break;
	case 29:stampAlpha=	100;stampX=	525.995;stampY=	233.921;stampRot=	0;break;
	case 30:stampAlpha=	100;stampX=	548.406;stampY=	205.629;stampRot=	0;break;
	case 31:stampAlpha=	33.3333;stampX=	594.195;stampY=	147.824;stampRot=	0;break;
	case 32:stampAlpha=	0;stampX=	640;stampY=	90;stampRot=	0;
			break;
	case 60:
		isResult = TRUE;
		break;
	}
	if(anyCnt >= 17)
	{
		switch(type)
		{
		case 0:
            if(xWorldMap.state != WORLDMAP_STATE_RIVALINFO)
                drawPacker(imgStamp1, x, y, 0, 0, imgW(imgStamp1), imgH(imgStamp1), VH);
			break;
		case 1:
			drawImage(&imgAccessBonusBg[3], x, y, 0,0, imgAccessBonusBg[3].w, imgAccessBonusBg[3].h, VH);
			break;
		}
	}
	
	x -=476;
	y -=320;
	
	if(stampRot != 0)
	{
		xGame.isRotate = TRUE;
		xGame.rotateNum = 360-stampRot;
	}
	if(stampRot != 100)
		setAlpha(stampAlpha*ALPHA_MAX/100);
	switch(type)
	{
	case 0:
		drawPacker(imgStamp0, x+stampX, y+stampY, 0, 0, imgW(imgStamp0), imgH(imgStamp0), VH);
		break;
	case 1:
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 50;
		drawPacker(imgStamp0, x+stampX, y+stampY+10, 0, 0, imgW(imgStamp0), imgH(imgStamp0), VH);
		xGame.isReSizeDraw = FALSE;
		break;
	}
	
	
	xGame.isRotate = FALSE;
	setAlpha(ALPHA_MAX);
	
	return isResult;
	
	
}

																			
void drawExtensionTile(int anyCnt)
{
	int x;
	int y;
	int mapXpos;
	int mapYpos;
	int floor = 0;
	int eventAlpha;
	int rectX;
	int rectY;
	int rectW;
	int rectH;
	
	eventAlpha = ALPHA_MAX-(anyCnt*ALPHA_MAX/30);
	setAlpha(eventAlpha);
	for(y = xMap.shopPointY; y < xMap.shopPointY+xMap.shopPointH; y++)
	{
		x = xMap.shopPointX+xMap.shopPointW-1;
		
		//크릴위치 및 크기 설정
		mapXpos = xMap.pointX + (((y-(floor*5)) - (x-(floor*5))) * (TILEW / 2));
		
		if ((y + x) % 2 == 1)
			mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH) + (TILEH / 2);
		else
			mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH);
		
		drawPacker(imgExtensiontile, mapXpos, mapYpos-90, 0, 0, imgW(imgExtensiontile), imgH(imgExtensiontile), VH);
	}
	for(x = xMap.shopPointX; x < xMap.shopPointX+xMap.shopPointW; x++)
	{
		y = xMap.shopPointY+xMap.shopPointH-1;
		
		//크릴위치 및 크기 설정
		mapXpos = xMap.pointX + (((y-(floor*5)) - (x-(floor*5))) * (TILEW / 2));
		
		if ((y + x) % 2 == 1)
			mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH) + (TILEH / 2);
		else
			mapYpos = xMap.pointY+ ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH);
		
		drawPacker(imgExtensiontile, mapXpos, mapYpos-90, 0, 0, imgW(imgExtensiontile), imgH(imgExtensiontile), VH);
	}
	setAlpha(ALPHA_MAX);
		
	//크릴위치 및 크기 설정
	x = xMap.shopPointX;
	y = xMap.shopPointY;
	mapXpos =  (((y-(floor*5)) - (x-(floor*5))) * (TILEW / 2));
	
	if ((y + x) % 2 == 1)
		mapYpos =  ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH) + (TILEH / 2);
	else
		mapYpos =  ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH);
	rectX = mapXpos;
	rectY = mapYpos;
	
	
	x = xMap.shopPointX;
	y = xMap.shopPointY+xMap.shopPointH-1;;
	mapXpos = (((y-(floor*5)) - (x-(floor*5))) * (TILEW / 2));
	
	if ((y + x) % 2 == 1)
		mapYpos = ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH) + (TILEH / 2);
	else
		mapYpos = ((((y-(floor*5)) + (x-(floor*5))) / 2) * TILEH);
	
	
	rectW = (mapXpos - rectX)*2;
	rectH = (mapYpos - rectY)*2;
	rectX = rectX-(rectW/2);
	
	//if(gameCnt%2==0)
	//	setFlashEff(ranDom(rectX, rectX+rectW), ranDom(rectY, rectY+rectH), ranDom(30, 200), TRUE);
}

int getProductionIndex(int key)
{
    for(int k=0;k<xProduction_FP.totalData;k++)
    {
        if(xProduction_FP.xData[k].key == key)
            return k;
    }
    return DONT;
}

void productionFreeLoad_FP(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("productionbase.png",&imgProductionBg);
        loadImg("productionexiticon.png", &imgProductionMenuExitIcon);
        loadImg("productiontitle.png",&imgProductionTitle);
        loadImg("production_left.png",&imgProduction[0]);
        loadImg("production_main.png",&imgProduction[1]);
        loadImg("production_right.png",&imgProduction[2]);
        loadImg("production_arrow.png",&imgProduction[3]);
        loadImg("production_slot_arrow.png", &imgProduction[4]);
        loadImg("production_btn_upgrade.png", &imgProduction[5]);
        
        loadImg("production_name.png", &imgProduction[7]);
        loadImg("production_slot.png", &imgProduction[8]);
        loadImg("production_shadow.png", &imgProduction[9]);
        loadImg("production_text.png", &imgProduction[10]);
        loadImg("production_slot_inert.png", &imgProduction[11]);
        loadImg("production_slot_open.png", &imgProduction[12]);
        loadImg("production_close.png", &imgProduction[13]);
        loadImg("production_slot_complete.png", &imgProduction[14]);
        loadImg("production_text_complete.png", &imgProduction[15]);
        loadImg("production_btn_fast.png", &imgProduction[16]);
        loadImg("production_btn_fastdia.png", &imgProduction[17]);
        loadImg("popup_base.png", &imgProduction[18]);
        loadImg("default_btn_yesno.png", &imgProduction[19]);
        loadImg("carrot_icon.png", &imgProduction[20]);
        loadImg("flower_icon.png", &imgProduction[21]);
        loadImg("production_popup_info.png", &imgProduction[22]);
        loadImg("wealth_icon.png", &imgProduction[23]);
    }
    else
    {
        freeImg(&imgProductionBg);
        freeImg(&imgProductionMenuExitIcon);
        freeImg(&imgProductionTitle);
        freeImg(&imgProduction[0]);
        freeImg(&imgProduction[1]);
        freeImg(&imgProduction[2]);
        freeImg(&imgProduction[3]);
        freeImg(&imgProduction[4]);
        freeImg(&imgProduction[5]);
        freeImg(&imgProduction[7]);
        freeImg(&imgProduction[8]);
        freeImg(&imgProduction[9]);
        freeImg(&imgProduction[10]);
        freeImg(&imgProduction[11]);
        freeImg(&imgProduction[12]);
        freeImg(&imgProduction[13]);
        freeImg(&imgProduction[14]);
        freeImg(&imgProduction[15]);
        freeImg(&imgProduction[16]);
        freeImg(&imgProduction[17]);
        freeImg(&imgProduction[18]);
        freeImg(&imgProduction[19]);
        freeImg(&imgProduction[20]);
        freeImg(&imgProduction[21]);
        freeImg(&imgProduction[22]);
        freeImg(&imgProduction[23]);
    }
}

void drawProduction_FP()
{
    int px = cx;
    int py = cy;
    
    int pos;
    drawBgFillRect();
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-267;
    
   
    
    drawImage(&imgProductionBg, px, py+50, 0, 0, imgProductionBg.w,imgProductionBg.h,VH);
    
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-180;
    
    if(xProduction_FP.isTouchClr==false)
    {
        drawImage(&imgProductionMenuExitIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgProductionMenuExitIcon.w/2, imgProductionMenuExitIcon.h, VH);
    }
    else
    {
        drawImage(&imgProductionMenuExitIcon, subTemp[XPOS], subTemp[YPOS], imgProductionMenuExitIcon.w/2, 0, imgProductionMenuExitIcon.w/2, imgProductionMenuExitIcon.h, VH);
    }
    xTouchClr.wPos = imgProductionMenuExitIcon.w;
    xTouchClr.hPos = imgProductionMenuExitIcon.h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;

    subTemp[XPOS] = px-447;
    subTemp[YPOS] = py-180;
    
    drawImage(&imgProductionTitle, subTemp[XPOS], subTemp[YPOS], 0, 0, imgProductionTitle.w, imgProductionTitle.h, VH);
    
    subTemp[XPOS] = px-457;
    subTemp[YPOS] = py-180+50;
    sprintf(strTempS, "상의 제작기");
    setFontSizeORI(18);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);
    
    subTemp[XPOS] = px-447+60;
    subTemp[YPOS] = py-180+50;
    sprintf(strTempS, "Lv.9");
    setFontSizeORI(18);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);

    
    subTemp[XPOS] = px+2;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgProduction[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[1].w, imgProduction[1].h, VH);
    
    
    
    subTemp[XPOS] = px+410;
    subTemp[YPOS] = py-165;
    
    drawImage(&imgProduction[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[5].w/2, imgProduction[5].h, VH);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py-90;
    
    drawImage(&imgProduction[7], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[7].w, imgProduction[7].h, VH);
    int totalnum = xCatalog_FP.totalSlot[0];
    int slotCode;
    int slotNum;
    int temp;
    xCatalog_FP.totalSlotS = 0;
    for(int k=0;k<totalnum;k++)
    {
        temp=xCatalog_FP.xSlot[0][k].code;
        setMapData(temp);
        if(xFashionData_FP[xMap.type][xMap.listNum].lv<=xSaveTemp.lv.oriData)
        {
            xCatalog_FP.xSlotS[xCatalog_FP.totalSlotS].code = temp;
            xCatalog_FP.totalSlotS++;
        }
    }
//    xProduction_FP.xDragScrollProductionS.totalNum = 1+(totalnum-1)/8;
    xProduction_FP.xDragScrollProductionS.totalNum = 1+(xCatalog_FP.totalSlotS-1)/8;
    xProduction_FP.xDragScrollProductionS.posGab = 1280;
    
    dragScrollPrc(&xProduction_FP.xDragScrollProductionS, 0, FALSE);
    
    gSetClip(true, px-430, 0, 860, lcdH);
//    gSetColor(0,255,0);
//    setAlpha(100);
//    fillRect(px-430, 0, 860, lcdH);
//    setAlpha(ALPHA_MAX);
    for(int page =-1;page<=1;page++)
    {
        if(xProduction_FP.xDragScrollProductionS.selectNum+page>=0 && xProduction_FP.xDragScrollProductionS.selectNum+page<xProduction_FP.xDragScrollProductionS.totalNum)
        {
            for(int i=0;i<8;i++)
//            for(int i=0;i<totalnum;i++)
            {
                if(((xProduction_FP.xDragScrollProductionS.selectNum+page)*8)+i>=totalnum)
                    break;
                
                pos = xProduction_FP.xDragScrollProductionS.pos+(xProduction_FP.xDragScrollProductionS.posGab*page);
                subTemp[XPOS] = px-420+pos+((i%8)*105);
                subTemp[YPOS] = py-80;
                
                drawImage(&imgProduction[9], subTemp[XPOS]+45, subTemp[YPOS]+80, 0, 0, imgProduction[9].w, imgProduction[9].h, VH);
                
               
                
                slotNum = ((xProduction_FP.xDragScrollProductionS.selectNum+page)*8)+i;
//                slotCode = xCatalog_FP.xSlot[0][slotNum].code;
                slotCode = xCatalog_FP.xSlotS[slotNum].code;
                
                xProduction_FP.xTouchList[slotNum].wPos = 90;
                xProduction_FP.xTouchList[slotNum].hPos = 100;
                xProduction_FP.xTouchList[slotNum].xPos = subTemp[XPOS];
                xProduction_FP.xTouchList[slotNum].yPos = subTemp[YPOS];
                
//                gSetColor(255, 0, 0);
//                setAlpha(100);
//                fillRect(xProduction_FP.xTouchSlot[slotNum].xPos, xProduction_FP.xTouchSlot[slotNum].yPos, xProduction_FP.xTouchSlot[slotNum].wPos, xProduction_FP.xTouchSlot[slotNum].hPos);
//                setAlpha(ALPHA_MAX);

                setMapData(slotCode);
                loadFashionFImg_FP(xMap.type, xMap.listNum);
                
                xGame.fgameScale = 0.6f;
                xGame.fgameScaleCx = subTemp[XPOS]+110;
                xGame.fgameScaleCy = subTemp[YPOS];
                
             
                
                drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS]-20, 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
                
             
//                gSetColor(255, 0, 0);
//                setAlpha(100);
//                fillRect(subTemp[XPOS], subTemp[YPOS], 90, 100);
//                setAlpha(ALPHA_MAX);
                
                xGame.fgameScaleCx=cx;
                xGame.fgameScaleCy=cy;
                xGame.fgameScale = 1.0f;
                
//                gSetColor(0, 0, 0);
//                sprintf(strTempS,"%d",i);
//                gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
                
                
            }
        }
    }
    gSetClip(false, 0, 0, lcdW, lcdH);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+150;
    
    int maxSlot = 12;
    xProduction_FP.xDragScrollProductionB.totalNum = 1+(maxSlot-1)/6;
    xProduction_FP.xDragScrollProductionB.posGab = 1280;
    
    dragScrollPrc(&xProduction_FP.xDragScrollProductionB, 0, FALSE);
    
    gSetClip(true, px-440, py, 880, lcdH);
//    gSetColor(0,255,0);
//    setAlpha(100);
//    fillRect(px-440, py, 880, lcdH);
//    setAlpha(ALPHA_MAX);
    for(int page=-1;page<=1;page++)
    {
        if(xProduction_FP.xDragScrollProductionB.selectNum+page>=0 && xProduction_FP.xDragScrollProductionB.selectNum+page<xProduction_FP.xDragScrollProductionB.totalNum)
        {
            for(int i=0;i<6;i++)
            {
                if(((xProduction_FP.xDragScrollProductionB.selectNum+page)*6)+i>=maxSlot)
                    break;
                
                pos = xProduction_FP.xDragScrollProductionB.pos+(xProduction_FP.xDragScrollProductionB.posGab*page);
                
                subTemp[XPOS] = px-370+pos+((i%6)*147);
                subTemp[YPOS] = py+145;
                slotNum = ((xProduction_FP.xDragScrollProductionB.selectNum+page)*6)+i;
                slotCode = xProduction_FP.xData[xProduction_FP.index].xSlot[slotNum].itemCode;
                setMapData(slotCode);
                loadFashionFImg_FP(xMap.type, xMap.listNum);
                switch(xProduction_FP.xData[xProduction_FP.index].xSlot[slotNum].state)
                {
                    case -1:
                        drawImage(&imgProduction[11], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[11].w, imgProduction[11].h, VH);
                        drawImage(&imgProduction[13], subTemp[XPOS], subTemp[YPOS], imgProduction[13].w/2, 0, imgProduction[13].w/2, imgProduction[13].h, VH);
                        break;
                    case 0:
                        drawImage(&imgProduction[11], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[11].w, imgProduction[11].h, VH);
                        if(xProduction_FP.isTouchOpen==false)
                        {
                            drawImage(&imgProduction[12], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[12].w/2, imgProduction[12].h, VH);
                        }
                        else
                        {
                            drawImage(&imgProduction[12], subTemp[XPOS], subTemp[YPOS], imgProduction[12].w/2, 0, imgProduction[12].w/2, imgProduction[12].h, VH);
                        }
                        xProduction_FP.xTouchOpen.wPos = imgProduction[12].w/2+10;
                        xProduction_FP.xTouchOpen.hPos = imgProduction[12].h+10;
                        xProduction_FP.xTouchOpen.xPos = subTemp[XPOS]-xProduction_FP.xTouchOpen.wPos/2;
                        xProduction_FP.xTouchOpen.yPos = subTemp[YPOS]-xProduction_FP.xTouchOpen.hPos/2;
                        break;
                    case 1:
                        drawImage(&imgProduction[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[8].w, imgProduction[8].h, VH);
                        break;
                    case 2:
                        drawImage(&imgProduction[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[8].w, imgProduction[8].h, VH);
                        drawImage(&imgProduction[9], subTemp[XPOS], subTemp[YPOS]+15, 0, 0, imgProduction[9].w, imgProduction[9].h, VH);
                        
                        xGame.isReSizeDraw = true;
                        switch(gameCnt%61)
                        {
                            case 0:xGame.reSize =70;break;
                            case 1:xGame.reSize =70;break;
                            case 2:xGame.reSize =70;break;
                            case 3:xGame.reSize =70;break;
                            case 4:xGame.reSize =70;break;
                            case 5:xGame.reSize =70;break;
                            case 6:xGame.reSize =69;break;
                            case 7:xGame.reSize =69;break;
                            case 8:xGame.reSize =69;break;
                            case 9:xGame.reSize =69;break;
                            case 10:xGame.reSize =69;break;
                            case 11:xGame.reSize =68;break;
                            case 12:xGame.reSize =68;break;
                            case 13:xGame.reSize =68;break;
                            case 14:xGame.reSize =68;break;
                            case 15:xGame.reSize =68;break;
                            case 16:xGame.reSize =67;break;
                            case 17:xGame.reSize =67;break;
                            case 18:xGame.reSize =67;break;
                            case 19:xGame.reSize =67;break;
                            case 20:xGame.reSize =66;break;
                            case 21:xGame.reSize =66;break;
                            case 22:xGame.reSize =66;break;
                            case 23:xGame.reSize =66;break;
                            case 24:xGame.reSize =66;break;
                            case 25:xGame.reSize =65;break;
                            case 26:xGame.reSize =65;break;
                            case 27:xGame.reSize =65;break;
                            case 28:xGame.reSize =65;break;
                            case 29:xGame.reSize =65;break;
                            case 30:xGame.reSize =65;break;
                            case 31:xGame.reSize =65;break;
                            case 32:xGame.reSize =65;break;
                            case 33:xGame.reSize =65;break;
                            case 34:xGame.reSize =65;break;
                            case 35:xGame.reSize =65;break;
                            case 36:xGame.reSize =66;break;
                            case 37:xGame.reSize =66;break;
                            case 38:xGame.reSize =66;break;
                            case 39:xGame.reSize =66;break;
                            case 40:xGame.reSize =66;break;
                            case 41:xGame.reSize =67;break;
                            case 42:xGame.reSize =67;break;
                            case 43:xGame.reSize =67;break;
                            case 44:xGame.reSize =67;break;
                            case 45:xGame.reSize =68;break;
                            case 46:xGame.reSize =68;break;
                            case 47:xGame.reSize =68;break;
                            case 48:xGame.reSize =68;break;
                            case 49:xGame.reSize =68;break;
                            case 50:xGame.reSize =69;break;
                            case 51:xGame.reSize =69;break;
                            case 52:xGame.reSize =69;break;
                            case 53:xGame.reSize =69;break;
                            case 54:xGame.reSize =69;break;
                            case 55:xGame.reSize =70;break;
                            case 56:xGame.reSize =70;break;
                            case 57:xGame.reSize =70;break;
                            case 58:xGame.reSize =70;break;
                            case 59:xGame.reSize =70;break;
                            case 60:xGame.reSize =70;break;
                                
                        }
                        drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS]-15, 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
                        
                        xGame.isReSizeDraw=false;
                        
                        drawImage(&imgProduction[10], subTemp[XPOS], subTemp[YPOS]-70, 0, imgProduction[10].h/4*(gameCnt%4), imgProduction[10].w, imgProduction[10].h/4, VH);
                        
                        drawTimeSprintf(strTempS, xProduction_FP.EndTimer[xProduction_FP.index][slotNum], 1);
                        gSetColor(101, 48, 150);
                        setFontSizeORI(16);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]+35, strTempS, VH);
                        setFontSize(11);
                        drawImage(&imgProduction[16], subTemp[XPOS], subTemp[YPOS]+100, 0, 0, imgProduction[16].w, imgProduction[16].h, VH);
                        drawImage(&imgProduction[17], subTemp[XPOS]-10, subTemp[YPOS]+95, 0, 0, imgProduction[17].w, imgProduction[17].h, VH);
                        xProduction_FP.xTouchFast[slotNum].wPos = imgProduction[16].w;
                        xProduction_FP.xTouchFast[slotNum].hPos = imgProduction[16].h;
                        xProduction_FP.xTouchFast[slotNum].xPos = subTemp[XPOS] - xProduction_FP.xTouchFast[slotNum].wPos/2;
                        xProduction_FP.xTouchFast[slotNum].yPos = subTemp[YPOS]+100 - xProduction_FP.xTouchFast[slotNum].hPos/2;
                        break;
                    case 3:
                        drawImage(&imgProduction[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[8].w, imgProduction[8].h, VH);
                        drawImage(&imgProduction[9], subTemp[XPOS], subTemp[YPOS]+15, 0, 0, imgProduction[9].w, imgProduction[9].h, VH);
                        drawImage(&imgProduction[14], subTemp[XPOS]-1, subTemp[YPOS]-7, 0, 0, imgProduction[14].w, imgProduction[14].h, VH);
                        drawImage(&imgProduction[15], subTemp[XPOS]-2, subTemp[YPOS]-70, 0, 0, imgProduction[15].w, imgProduction[15].h, VH);
                        xGame.isReSizeDraw = true;
                        xGame.reSize = 70;
                        drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS]-15, 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
                        
                        xGame.isReSizeDraw=false;

                        break;
                    default:
                        break;
                }
                
//                if(xProduction_FP.xData[xProduction_FP.index].xSlot[slotNum].state==1)
//                {
//                    drawImage(&imgProduction[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[8].w, imgProduction[8].h, VH);
//                }
//                else
//                {
//                    drawImage(&imgProduction[11], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[11].w, imgProduction[11].h, VH);
//                    if(slotNum == xProduction_FP.xData[xProduction_FP.index].totalSlot&&slotNum<PRODUCTMENUSLOTMAX)
//                    {
//                        drawImage(&imgProduction[12], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[12].w/2, imgProduction[12].h, VH);
//                        xProduction_FP.xTouchOpen.wPos = imgProduction[12].w/2+10;
//                        xProduction_FP.xTouchOpen.hPos = imgProduction[12].h+10;
//                        xProduction_FP.xTouchOpen.xPos = subTemp[XPOS]-xProduction_FP.xTouchOpen.wPos/2;
//                        xProduction_FP.xTouchOpen.yPos = subTemp[YPOS]-xProduction_FP.xTouchOpen.hPos/2;
//                        
////                        gSetColor(255, 0, 0);
////                        setAlpha(100);
////                        fillRect(xProduction_FP.xTouchOpen.xPos, xProduction_FP.xTouchOpen.yPos, xProduction_FP.xTouchOpen.wPos, xProduction_FP.xTouchOpen.hPos);
////                        setAlpha(ALPHA_MAX);
//                    }
//                    else
//                    {
//                        drawImage(&imgProduction[13], subTemp[XPOS], subTemp[YPOS], imgProduction[13].w/2, 0, imgProduction[13].w/2, imgProduction[13].h, VH);
//                    }
//                }
                

                xProduction_FP.xTouchSlot[slotNum].wPos = imgProduction[8].w + 10;
                xProduction_FP.xTouchSlot[slotNum].hPos = imgProduction[8].h + 10;
                xProduction_FP.xTouchSlot[slotNum].xPos = subTemp[XPOS]-xProduction_FP.xTouchSlot[slotNum].wPos/2;
                xProduction_FP.xTouchSlot[slotNum].yPos = subTemp[YPOS]-xProduction_FP.xTouchSlot[slotNum].hPos/2;
//
//                
//                gSetColor(255, 0, 0);
//                setAlpha(100);
//                fillRect(xProduction_FP.xTouchSlot[slotNum].xPos, xProduction_FP.xTouchSlot[slotNum].yPos, xProduction_FP.xTouchSlot[slotNum].wPos, xProduction_FP.xTouchSlot[slotNum].hPos);
//                setAlpha(ALPHA_MAX);

                
//                gSetColor(0, 0, 0);
//                sprintf(strTempS,"%d",slotNum);
//                gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
                
            }
        }
    }
    gSetClip(false, 0, 0, lcdW, lcdH);
    
//    for(int i = 0; i < 12; i++)
//    {
//        gSetColor(255, 0, 0);
//        setAlpha(100);
//        fillRect(xProduction_FP.xTouchSlot[i].xPos, xProduction_FP.xTouchSlot[i].yPos, xProduction_FP.xTouchSlot[i].wPos, xProduction_FP.xTouchSlot[i].hPos);
//        setAlpha(ALPHA_MAX);
        
//        gSetColor(255, 0, 0);
//        setAlpha(100);
//        fillRect(xProduction_FP.xTouchFast[i].xPos, xProduction_FP.xTouchFast[i].yPos, xProduction_FP.xTouchFast[i].wPos, xProduction_FP.xTouchFast[i].hPos);
//        setAlpha(ALPHA_MAX);
//    }
    
    subTemp[XPOS] = px-448;
    subTemp[YPOS] = py-30;
    
    
    drawImage(&imgProduction[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[0].w, imgProduction[0].h, VH);
    
    xProduction_FP.xTouchLeftBtn.wPos = imgProduction[0].w+20;
    xProduction_FP.xTouchLeftBtn.hPos = imgProduction[0].h;
    xProduction_FP.xTouchLeftBtn.xPos = subTemp[XPOS]-xProduction_FP.xTouchLeftBtn.wPos/2-20;
    xProduction_FP.xTouchLeftBtn.yPos = subTemp[YPOS]-xProduction_FP.xTouchLeftBtn.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(0, 0, 255);
    //    fillRect(xProduction_FP.xTouchLeftBtn.xPos, xProduction_FP.xTouchLeftBtn.yPos, xProduction_FP.xTouchLeftBtn.wPos, xProduction_FP.xTouchLeftBtn.hPos);
    //    setAlpha(ALPHA_MAX);
    if(xProduction_FP.xDragScrollProductionS.selectNum<=0)
    {
        drawImage(&imgProduction[3], subTemp[XPOS], subTemp[YPOS], imgProduction[3].w/6*2, 0, imgProduction[3].w/6, imgProduction[3].h,VH);
    }
    else
    {
        if(xProduction_FP.isTouchLeftBtn==false)
        {
            drawImage(&imgProduction[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[3].w/6, imgProduction[3].h,VH);
        }
        else
        {
            drawImage(&imgProduction[3], subTemp[XPOS], subTemp[YPOS], imgProduction[3].w/6*4, 0, imgProduction[3].w/6, imgProduction[3].h,VH);
        }
    }
    subTemp[XPOS] = px+450;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgProduction[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[2].w, imgProduction[2].h, VH);
    
    xProduction_FP.xTouchRightBtn.wPos = imgProduction[2].w+20;
    xProduction_FP.xTouchRightBtn.hPos = imgProduction[2].h;
    xProduction_FP.xTouchRightBtn.xPos = subTemp[XPOS]-xProduction_FP.xTouchRightBtn.wPos/2+10;
    xProduction_FP.xTouchRightBtn.yPos = subTemp[YPOS]-xProduction_FP.xTouchRightBtn.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(0, 0, 255);
    //    fillRect(xProduction_FP.xTouchRightBtn.xPos, xProduction_FP.xTouchRightBtn.yPos, xProduction_FP.xTouchRightBtn.wPos, xProduction_FP.xTouchRightBtn.hPos);
    //    setAlpha(ALPHA_MAX);
    
    if(xProduction_FP.xDragScrollProductionS.selectNum>=xProduction_FP.xDragScrollProductionS.totalNum-1)
    {
        drawImage(&imgProduction[3], subTemp[XPOS], subTemp[YPOS], imgProduction[3].w/6*3, 0, imgProduction[3].w/6, imgProduction[3].h,VH);
    }
    
    else
    {
        if(xProduction_FP.isTouchRightBtn==false)
        {
            drawImage(&imgProduction[3], subTemp[XPOS], subTemp[YPOS], imgProduction[3].w/6, 0, imgProduction[3].w/6, imgProduction[3].h,VH);
        }
        else
        {
            drawImage(&imgProduction[3], subTemp[XPOS], subTemp[YPOS], imgProduction[3].w/6*5, 0, imgProduction[3].w/6, imgProduction[3].h,VH);
        }
    }
    
    subTemp[XPOS] = px-458;
    subTemp[YPOS] = py+135;
    if(xProduction_FP.xDragScrollProductionB.selectNum<=0)
    {
        drawImage(&imgProduction[4], subTemp[XPOS], subTemp[YPOS], imgProduction[4].w/6*2, 0, imgProduction[4].w/6, imgProduction[4].h, VH);
    }
    else
    {
        if(xProduction_FP.isTouchLeftArrow==true)
        {
            drawImage(&imgProduction[4], subTemp[XPOS], subTemp[YPOS], imgProduction[4].w/6*4, 0, imgProduction[4].w/6, imgProduction[4].h, VH);
        }
        else
        {
            drawImage(&imgProduction[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[4].w/6, imgProduction[4].h, VH);
        }
    }
    
    xProduction_FP.xTouchLeftArrow.wPos = 80;
    xProduction_FP.xTouchLeftArrow.hPos = 230;
    xProduction_FP.xTouchLeftArrow.xPos = subTemp[XPOS] - xProduction_FP.xTouchLeftArrow.wPos/2;
    xProduction_FP.xTouchLeftArrow.yPos = subTemp[YPOS] - xProduction_FP.xTouchLeftArrow.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(0, 0, 255);
    //    fillRect(xProduction_FP.xTouchLeftArrow.xPos, xProduction_FP.xTouchLeftArrow.yPos, xProduction_FP.xTouchLeftArrow.wPos, xProduction_FP.xTouchLeftArrow.hPos);
    //    setAlpha(ALPHA_MAX);
    
    
    subTemp[XPOS] = px+460;
    subTemp[YPOS] = py+135;
    if(xProduction_FP.xDragScrollProductionB.selectNum>=xProduction_FP.xDragScrollProductionB.totalNum-1)
    {
        drawImage(&imgProduction[4], subTemp[XPOS], subTemp[YPOS], imgProduction[4].w/6*3, 0, imgProduction[4].w/6, imgProduction[4].h, VH);
    }
    else
    {
        if(xProduction_FP.isTouchRightArrow==false)
        {
            drawImage(&imgProduction[4], subTemp[XPOS], subTemp[YPOS], imgProduction[4].w/6, 0, imgProduction[4].w/6, imgProduction[4].h, VH);
        }
        else
        {
            drawImage(&imgProduction[4], subTemp[XPOS], subTemp[YPOS], imgProduction[4].w/6*5, 0, imgProduction[4].w/6, imgProduction[4].h, VH);
        }
    }
    xProduction_FP.xTouchRightArrow.wPos = 80;
    xProduction_FP.xTouchRightArrow.hPos = 230;
    xProduction_FP.xTouchRightArrow.xPos = subTemp[XPOS] - xProduction_FP.xTouchRightArrow.wPos/2;
    xProduction_FP.xTouchRightArrow.yPos = subTemp[YPOS] - xProduction_FP.xTouchRightArrow.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(0, 0, 255);
    //    fillRect(xProduction_FP.xTouchRightArrow.xPos, xProduction_FP.xTouchRightArrow.yPos, xProduction_FP.xTouchRightArrow.wPos, xProduction_FP.xTouchRightArrow.hPos);
    //    setAlpha(ALPHA_MAX);

    M_Char Temp1[512];
    M_Char Temp2[512];
    
    if(xProduction_FP.isTouchProduct == true)
    {
        slotCode = xCatalog_FP.xSlot[0][xProduction_FP.selectProduct].code;
        setMapData(slotCode);
        loadFashionFImg_FP(xMap.type, xMap.listNum);
        xGame.isReSizeDraw = true;
        xGame.reSize = 60;
        
        subTemp[XPOS] = xTouch.xPos;
        subTemp[YPOS] = xTouch.yPos;
        drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
        
        xGame.isReSizeDraw = false;
        //제작의상 팝업
        if(xTouch.xPos+imgProduction[22].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgProduction[22].w/2-40;
            subTemp[YPOS] = xTouch.yPos;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgProduction[22].w/2+40;
            subTemp[YPOS] = xTouch.yPos;
        }
        
        drawImage(&imgProduction[22], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[22].w, imgProduction[22].h, VH);
        
        //제작의상 이름
        if(xTouch.xPos+imgProduction[22].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgProduction[22].w/2-40;
            subTemp[YPOS] = xTouch.yPos-imgProduction[22].h/2+25;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgProduction[22].w/2+40;
            subTemp[YPOS] = xTouch.yPos-imgProduction[22].h/2+25;
        }

        setFontSizeORI(16);
        sprintf(strTempS, "%s", xFashionData_FP[xMap.type][xMap.listNum].strName);
        gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 255, 255, 255, 101, 48, 150);
        setFontSize(11);
       
        //[0][2] 문자
        if(xTouch.xPos+imgProduction[22].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgProduction[22].w+10+15;
            subTemp[YPOS] = xTouch.yPos-10;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgProduction[22].w/4+40;
            subTemp[YPOS] = xTouch.yPos-10;
        }

        setFontSizeORI(15);
        gSetColor(101, 48, 150);
//        drawTimeSprintf(strTempS, xFashionData_FP[xMap.type][xMap.listNum].makeTime, 1);
        drawTimeSprintf(strTempS, 359999, 1);
//        drawTimeSprintf(strTempS, 3599, 1);
        gDrawString(subTemp[XPOS], subTemp[YPOS]+60, strTempS, VL);
        setFontSize(11);
        
        //[0][1] 문자
        setCommaNum(Temp1, 888);
        setCommaNum(Temp2, 888);
        setFontSizeORI(15);
        gSetColor(101, 48, 150);
        sprintf(strTempS, "%s/%s", Temp1, Temp2);
        gDrawString(subTemp[XPOS], subTemp[YPOS]+30, strTempS, VL);
        setFontSize(11);
        
        //[0][0] 문자
        setCommaNum(Temp1, 888);
        setCommaNum(Temp2, 888);
        setFontSizeORI(15);
        gSetColor(101, 48, 150);
        sprintf(strTempS, "%s/%s", Temp1, Temp2);
        gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
        setFontSize(11);

        //[0][2] 아이콘
        if(xTouch.xPos+imgProduction[22].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgProduction[22].w-10+15;
            subTemp[YPOS] = xTouch.yPos-10;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgProduction[22].w/4+20;
            subTemp[YPOS] = xTouch.yPos-10;
        }

        drawImage(&imgProduction[21], subTemp[XPOS], subTemp[YPOS]+60, 0, 0, imgProduction[21].w/8, imgProduction[21].h, VH);
        
        //[0][1] 아이콘
        
        drawImage(&imgProduction[21], subTemp[XPOS], subTemp[YPOS]+30, imgProduction[21].w/8*3, 0, imgProduction[21].w/8, imgProduction[21].h, VH);
        
        //[0][0] 아이콘
        
        drawImage(&imgProduction[21], subTemp[XPOS], subTemp[YPOS], imgProduction[21].w/8*4, 0, imgProduction[21].w/8, imgProduction[21].h, VH);
        
        
        //[1][2] 문자
        if(xTouch.xPos+imgProduction[22].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgProduction[22].w/4*3+52+12;
            subTemp[YPOS] = xTouch.yPos-10;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgProduction[22].w/4*3+15;
            subTemp[YPOS] = xTouch.yPos-10;
        }
        
        setFontSizeORI(15);
        setCommaNum(strTempS, 999999);
        gSetColor(101, 48, 150);
        gDrawString(subTemp[XPOS], subTemp[YPOS]+60, strTempS, VL);
        setFontSize(11);
        
        //[1][1] 문자
        
        
        setCommaNum(Temp1, 888);
        setCommaNum(Temp2, 888);
        sprintf(strTempS, "%s/%s", Temp1, Temp2);
        setFontSizeORI(15);
        gSetColor(101, 48, 150);
        gDrawString(subTemp[XPOS], subTemp[YPOS]+30, strTempS, VL);
        setFontSize(11);
        
        //[1][0] 문자

        setCommaNum(Temp1, 888);
        setCommaNum(Temp2, 888);
        sprintf(strTempS, "%s/%s", Temp1, Temp2);
        setFontSizeORI(15);
        gSetColor(101, 48, 150);
        gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
        setFontSize(11);

        
        //[1][2] 아이콘
        if(xTouch.xPos+imgProduction[22].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgProduction[22].w/2-35+15;
            subTemp[YPOS] = xTouch.yPos-10;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgProduction[22].w/2+60;
            subTemp[YPOS] = xTouch.yPos-10;
        }
        
        drawImage(&imgProduction[21], subTemp[XPOS], subTemp[YPOS]+60, imgProduction[21].w/8, 0, imgProduction[21].w/8, imgProduction[21].h, VH);
        
        //[1][1] 아이콘
        drawImage(&imgProduction[21], subTemp[XPOS], subTemp[YPOS]+30, imgProduction[21].w/8*2, 0, imgProduction[21].w/8, imgProduction[21].h, VH);
        
        //[1][0] 아이콘
        drawImage(&imgProduction[21], subTemp[XPOS], subTemp[YPOS], imgProduction[21].w/8*6, 0, imgProduction[21].w/8, imgProduction[21].h, VH);
    }
    
   
}

// 제작기 UI 그리는 곳
void drawProductionMenu()
{
	int type = 0;
	int code = 0;
	
//	if(xQuestTuto.state == QUEST_TUTO_KEY)
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_1_PRODUCTIONTOUCH:
//		case TUTO_2_PRODUCTIONTOUCH:
//		case TUTO_25_FASHIONOPEN_PRODUCTIONTOUCH:
//			xQuestTuto.isTutoClean = TRUE;
//			break;
//		}
//	}
//	
//	if(xQuestTuto.state == QUEST_TUTO_KEY)
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_25_FASHIONOPEN_PRODUCTIONTOUCH:
//		case TUTO_25_FASHIONOPEN_TAB:
//		case TUTO_25_FASHIONOPEN_ITEM:
//		case TUTO_25_FASHIONOPEN_BUY:
//			if(xInventoryFashion.isOpen[xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]/1000][xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]%1000] == TRUE)
//				xQuestTuto.isTutoClean = TRUE;
//			break;
//		}
//	}
		
	int px = cx-87;
	int py = cy;
    
    drawBgFillRect();
	drawPacker(imgProductionMenuBg, px, py, 0, 0, imgW(imgProductionMenuBg), imgH(imgProductionMenuBg), VH);
		
	//작은 메뉴
	int iMaxTabS;
	iMaxTabS = 8;
	subTemp[XPOS] = px-390;
	subTemp[YPOS] = py-275;
	for(int i=0;i<iMaxTabS;i++)
	{
		if(i == xCatalog.selectTabS)
		{
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], imgW(imgMenu8)/2, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
						
			switch(i)
			{
			case 7:
				drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6-18, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*11, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
				break;
			default:
				drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6-18, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*i, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
				break;
			}
			switch(i)
			{
			case 0:sprintf(strTempS, "아우터");break;
			case 1:sprintf(strTempS, "상의");break;
			case 2:sprintf(strTempS, "하의");break;
			case 3:sprintf(strTempS, "원피스");break;
			case 4:sprintf(strTempS, "신발");break;
			case 5:sprintf(strTempS, "가방");break;
			case 6:sprintf(strTempS, "기타");break;
			case 7:sprintf(strTempS, "전체");break;
			}
			gDrawStringBold(subTemp[XPOS]+(i*76), subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
			
//			if(xQuestTuto.state == QUEST_TUTO_KEY)
//			{
//				switch(xQuestTuto.nowNum)
//				{
//				case TUTO_1_PRODUCTIONTOPTABTOUCH:
//				case TUTO_25_FASHIONOPEN_TAB:
//					if(i == 1)
//						xQuestTuto.isTutoClean = TRUE;
//					break;
//				case TUTO_25_FASHIONOPEN_BUYTAB:
//					if(i == 7)
//						xQuestTuto.isTutoClean = TRUE;
//					break;
//				}
//			}
			
		}
		else
		{
			drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], 0, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);

			switch(i)
			{
			case 7:
				drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*11, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
				break;
			default:
				drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*i, imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
				break;
			}
			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_1_PRODUCTIONTOPTABTOUCH:
				case TUTO_25_FASHIONOPEN_TAB:
					if(i == 1)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				case TUTO_2_PRODUCTIONTOPFASHIONTOUCH:
					if(i == 2)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				case TUTO_25_FASHIONOPEN_BUYTAB:
					if(i == 7)
					{
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
					}
					break;
				}
			}
		}
		
		if(xQuestTuto.state == QUEST_TUTO_SHOW)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_1_PRODUCTIONOPENFASHIONSHOW:
				if(i==7)
				{
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]+(i*76);
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
				}
				break;
			}
		}
		
		//new표시
		//0:보통 1:new보여주기 2:확인한상태 3:완료
		for(int k=0;k<200;k++)
		{
			if(xSave.fashionNew[i][k] == 1 || xSave.fashionNew[i][k] == 2)
			{
				if(i == xCatalog.selectTabS)
					drawNewIcon(subTemp[XPOS]+(i*76)+21, subTemp[YPOS]-25-18);
				else
					drawNewIcon(subTemp[XPOS]+(i*76)+21, subTemp[YPOS]-25);
			}
		}
	}
	
	for(int i=0;i<iMaxTabS;i++)
	{
		xTouchCatalogTabS[i].wPos = imgW(imgMenu8)/2-10;
		xTouchCatalogTabS[i].hPos = imgH(imgMenu8);
		xTouchCatalogTabS[i].xPos = subTemp[XPOS]+5+(i*76) - xTouchCatalogTabS[i].wPos/2;
		xTouchCatalogTabS[i].yPos = subTemp[YPOS] - xTouchCatalogTabS[i].hPos/2;
	}

	//쇼핑 카트
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py-195;
		
	drawPacker(imgProductionMenuObj3, subTemp[XPOS]-47, subTemp[YPOS], 0, imgH(imgProductionMenuObj3)/2*(xProductionMenu.selectType==0?1:0), imgW(imgProductionMenuObj3)/2, imgH(imgProductionMenuObj3)/2, VH);
	drawPacker(imgProductionMenuObj3, subTemp[XPOS]+47, subTemp[YPOS], imgW(imgProductionMenuObj3)/2, imgH(imgProductionMenuObj3)/2*(xProductionMenu.selectType==1?1:0), imgW(imgProductionMenuObj3)/2, imgH(imgProductionMenuObj3)/2, VH);
	
	if(xProductionMenu.isOpen[1][0] == FALSE)
		drawPacker(imgProductionMenuObj9, subTemp[XPOS]+25, subTemp[YPOS]-38, 0, 0, imgW(imgProductionMenuObj9), imgH(imgProductionMenuObj9), VH);
	
	
	if(xProductionMenu.isSlotSaleEventOpen == TRUE)
	{
		int blendNum = 0;
		switch(gameCnt%50)
		{
		case 0:blendNum =255;break;
		case 1:blendNum =225;break;
		case 2:blendNum =200;break;
		case 3:blendNum =175;break;
		case 4:blendNum =150;break;
		case 5:blendNum =125;break;
		case 6:blendNum =100;break;
		case 7:blendNum =75;break;
		case 8:blendNum =50;break;
		case 9:blendNum =25;break;
		}
		
		if(blendNum > 0)
		{
			xGame.isBlend = TRUE;
			xGame.blendType = BLEND_WHITEALPHA;
			xGame.blendNum = blendNum;
		}
		drawPacker(imgProductionSlotSaleIcon, subTemp[XPOS]+90, subTemp[YPOS]-34, 0, 0, imgW(imgProductionSlotSaleIcon), imgH(imgProductionSlotSaleIcon), VH);
		xGame.isBlend = FALSE;
		
		
		if(ranDom(0, 100) < 50)
		{
			makeGlitterEff(&xProductionMenu.xGlitterEff,ranDom(-30, 30),ranDom(-30, 30));
		}
		prcGlitterEff(&xProductionMenu.xGlitterEff,subTemp[XPOS]+90,subTemp[YPOS]-34);
	}
		
		
	xProductionMenu.xTouchType.wPos = imgW(imgProductionMenuObj3)/2;
	xProductionMenu.xTouchType.hPos = imgH(imgProductionMenuObj3)/2;
	switch(xProductionMenu.selectType)
	{
	case PRODUCTIONMENU_TYPE_NORMAL:
		//퀵배송쪽 완료된게 잇을경우
		if(xProductionMenu.totalSuccessType[PRODUCTIONMENU_TYPE_PREMIUM] > 0)
			drawPacker(imgProductionMenuObj11, subTemp[XPOS]+25, subTemp[YPOS]-38, 0, 0, imgW(imgProductionMenuObj11), imgH(imgProductionMenuObj11), VH);
		xProductionMenu.xTouchType.xPos = subTemp[XPOS]+47-xProductionMenu.xTouchType.wPos/2;
		xProductionMenu.xTouchType.yPos = subTemp[YPOS]-xProductionMenu.xTouchType.hPos/2;
		break;
	case PRODUCTIONMENU_TYPE_PREMIUM:
		//일반배송 완료된게 잇을경우
		if(xProductionMenu.totalSuccessType[PRODUCTIONMENU_TYPE_NORMAL] > 0)
			drawPacker(imgProductionMenuObj11, subTemp[XPOS]-70, subTemp[YPOS]-38, 0, 0, imgW(imgProductionMenuObj11), imgH(imgProductionMenuObj11), VH);
		
		xProductionMenu.xTouchType.xPos = subTemp[XPOS]-47-xProductionMenu.xTouchType.wPos/2;
		xProductionMenu.xTouchType.yPos = subTemp[YPOS]-xProductionMenu.xTouchType.hPos/2;
		break;
	}
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xProductionMenu.xTouchType.xPos, xProductionMenu.xTouchType.yPos, xProductionMenu.xTouchType.wPos, xProductionMenu.xTouchType.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	xProductionMenu.lv[0][0] = 1;
	xProductionMenu.lv[0][1] = 2;
	xProductionMenu.lv[0][2] = 5;
	xProductionMenu.lv[0][3] = 8;
	xProductionMenu.lv[0][4] = 12;
	xProductionMenu.lv[0][5] = 15;
	
	xProductionMenu.lv[1][0] = 0;
	xProductionMenu.lv[1][1] = 0;
	xProductionMenu.lv[1][2] = 0;
	xProductionMenu.lv[1][3] = 0;
	xProductionMenu.lv[1][4] = 0;
	xProductionMenu.lv[1][5] = 0;
	
	
	
	/*
	int setClipX = px-410;
	int setClipW = 600;
	gSetClip(setClipX, 0, setClipW, lcdH);
	
	gSetClip(setClipX, subTemp[YPOS]-imgProductionMenuSlot[0].h/2, setClipW, imgProductionMenuSlot[0].h);
	drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
	gSetClip(setClipX, 0, setClipW, lcdH);
	*/
	
	for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
	{
		xProductionMenu.isOpen[0][i] = TRUE;
		
		subTemp[XPOS] = px+320+((i%2)*92);
		subTemp[YPOS] = py-91+((i/2)*120);
		
		
		xFashionDrop.x_productionMenu[i] = subTemp[XPOS];
		xFashionDrop.y_productionMenu[i] = subTemp[YPOS];
		xFashionDrop.scale_productionMenu[i] = 50;
		
		
		switch(xProductionMenu.selectType)
		{
			case PRODUCTIONMENU_TYPE_NORMAL:
				drawPacker(imgProductionMenuSlot4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot4), imgH(imgProductionMenuSlot4), VH);
				break;
			case PRODUCTIONMENU_TYPE_PREMIUM:
				drawPacker(imgProductionMenuSlot8, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot8), imgH(imgProductionMenuSlot8), VH);
				break;
		}
		
		
		xProductionMenu.xTouchSlot[i].wPos = imgW(imgProductionMenuSlot4);
		xProductionMenu.xTouchSlot[i].hPos = imgH(imgProductionMenuSlot4);
		xProductionMenu.xTouchSlot[i].xPos = subTemp[XPOS]-xProductionMenu.xTouchSlot[i].wPos/2;
		xProductionMenu.xTouchSlot[i].yPos = subTemp[YPOS]-xProductionMenu.xTouchSlot[i].hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xProductionMenu.xTouchSlot[i].xPos, xProductionMenu.xTouchSlot[i].yPos, xProductionMenu.xTouchSlot[i].wPos, xProductionMenu.xTouchSlot[i].hPos);
		 setAlpha(ALPHA_MAX);
		 */
		
				
		
		if(xProductionMenu.slotCode[xProductionMenu.selectType][i] != DONT)
			setMapData(xProductionMenu.slotCode[xProductionMenu.selectType][i]);
		
		//레벨제한
		if(xSaveTemp.lv.oriData < xProductionMenu.lv[xProductionMenu.selectType][i])
		{
			drawPacker(imgProductionMenuSlot5, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot5), imgH(imgProductionMenuSlot5), VH);
			drawPacker(imgProductionMenuLock0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuLock0), imgH(imgProductionMenuLock0), VH);
			drawNumPacker(imgProductionMenuLock1, subTemp[XPOS]+13, subTemp[YPOS]+19+5, xProductionMenu.lv[xProductionMenu.selectType][i]/10, 0, VH);
			drawNumPacker(imgProductionMenuLock1, subTemp[XPOS]+13+14, subTemp[YPOS]+19+5, xProductionMenu.lv[xProductionMenu.selectType][i]%10, 0, VH);
		}
		else if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM && (i>0 && xProductionMenu.isOpen[xProductionMenu.selectType][i-1] == FALSE))
		{
			//프리미엄슬롯구매불가
			drawPacker(imgProductionMenuSlot5, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot5), imgH(imgProductionMenuSlot5), VH);
			drawPacker(imgProductionMenuLock2, subTemp[XPOS]+4, subTemp[YPOS], 0, 0, imgW(imgProductionMenuLock2), imgH(imgProductionMenuLock2), VH);
		}
		else if(xProductionMenu.selectType == PRODUCTIONMENU_TYPE_PREMIUM && xProductionMenu.isOpen[xProductionMenu.selectType][i] == FALSE)
		{
			//프리미엄슬롯미구매
			drawPacker(imgProductionMenuSlot5, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot5), imgH(imgProductionMenuSlot5), VH);
			
			
			if(xProductionMenu.isSlotSaleEventOpen == TRUE)
			{
				drawPacker(imgAddSlot, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgAddSlot), imgH(imgAddSlot), VH);
				drawPacker(imgProductionMenuObj0, subTemp[XPOS]-16, subTemp[YPOS]+20, imgW(imgProductionMenuObj0)/8, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VR);
				gSetColor(124, 124, 124);
				sprintf(strTempS,"%d",xProductionMenu.openCashOri[xProductionMenu.selectType][i].oriData);
				setFontSize(8);
				gDrawString(subTemp[XPOS]+2, subTemp[YPOS]+20, strTempS, VH);
				setFontSize(11);
				drawPacker(imgSlotSale3, subTemp[XPOS]-20, subTemp[YPOS]+20, 0, 0, imgW(imgSlotSale3), imgH(imgSlotSale3), VL);
				sprintf(strTempS,"%d",xProductionMenu.openCash[xProductionMenu.selectType][i].oriData);
				gSetColor(255, 255, 255);
				gDrawString(subTemp[XPOS]+2, subTemp[YPOS]+20+20, strTempS, VH);
			}
			else
			{
				drawPacker(imgAddSlot, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgAddSlot), imgH(imgAddSlot), VH);
				drawPacker(imgProductionMenuObj0, subTemp[XPOS]-6, subTemp[YPOS]+35, imgW(imgProductionMenuObj0)/8, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VR);
				gSetColor(255, 255, 255);
				sprintf(strTempS,"%d",xProductionMenu.openCash[xProductionMenu.selectType][i].oriData);
				gDrawString(subTemp[XPOS]+12, subTemp[YPOS]+35, strTempS, VH);
			}
			
		}
		else if(xProductionMenu.slotCode[xProductionMenu.selectType][i] == DONT)
		{
			//empty
			drawPacker(imgEmptySlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgEmptySlot0), imgH(imgEmptySlot0), VH);
		}
		else if(xProductionMenu.state[xProductionMenu.selectType][i] == PRODUCTIONMENUSLOT_STATE_WAIT && xProductionMenu.slotCode[xProductionMenu.selectType][i] != DONT)
		{
			//물품돌리기전
			gSetClip(true,0, subTemp[YPOS]-imgH(imgProductionMenuSlot4)/2, lcdW, imgH(imgProductionMenuSlot4));
			if(xFashionDrop.state[i] == FASHIONDROP_STATE_DONT)
				drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,50);
			gSetClip(false,0, 0, lcdW, lcdH);
			
			setFontSize(8);
			sprintf(strTempS, "%d벌", xInventoryFashion.haveNum[xMap.type][xMap.listNum]);
			gSetColor(82, 49, 38);
			gDrawString(subTemp[XPOS], subTemp[YPOS]-11+50+3, strTempS, VH);
			gSetColor(255,255,255);
			setFontSize(11);
			
//			if(xQuestTuto.state == QUEST_TUTO_SHOW)
//			{
//				switch(xQuestTuto.nowNum)
//				{
//					case TUTO_1_PRODUCTIONTOPFASHIONWAITSHOW:
//						if(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0] == xProductionMenu.slotCode[xProductionMenu.selectType][i])
//						{
//							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
//						}
//						break;
//				}
//			}
//			
//		}
		/*else*/ if(xProductionMenu.state[xProductionMenu.selectType][i] == PRODUCTIONMENUSLOT_STATE_RECV)
		{
//LJW 의상제작 완료 주석처리
//			drawPacker(imgProductionMenuSlot5, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot5), imgH(imgProductionMenuSlot5), VH);
//			drawPacker(imgProductionMenuObj6, subTemp[XPOS], subTemp[YPOS]-5, 0, imgH(imgProductionMenuObj6)/4*((gameCnt/3)%4), imgW(imgProductionMenuObj6), imgH(imgProductionMenuObj6)/4, VH);
//			drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-11+52, 0, imgH(imgProductionMenuGage)/2, imgW(imgProductionMenuGage), imgH(imgProductionMenuGage)/2, VL);
//			subTemp[WPOS] = xProductionMenu.recvAnyCnt[xProductionMenu.selectType][i]*imgW(imgProductionMenuGage)/20;
//			drawPacker(imgProductionMenuGage, subTemp[XPOS]-imgW(imgProductionMenuGage)/2, subTemp[YPOS]-11+52, 0, 0, subTemp[WPOS], imgH(imgProductionMenuGage)/2, VL);
			
		}
//		else if(xProductionMenu.state[xProductionMenu.selectType][i] == PRODUCTIONMENUSLOT_STATE_PLAY
//				&& xProductionMenu.slotCode[xProductionMenu.selectType][i] != DONT
//				&& xProductionMenu.slotFlowTime[xProductionMenu.selectType][i]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
//		{
//			//완료상태
//			drawPacker(imgProductionMenuSlot6, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot6), imgH(imgProductionMenuSlot6), VH);
//			gSetClip(true,0, subTemp[YPOS]-imgH(imgProductionMenuSlot4)/2, lcdW, imgH(imgProductionMenuSlot4));
//			drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,50);
//			gSetClip(false,0, 0, lcdW, lcdH);
//			drawPacker(imgProductionMenuObj5, subTemp[XPOS], subTemp[YPOS]+38, 0, imgH(imgProductionMenuObj5)/2*((gameCnt/30)%2), imgW(imgProductionMenuObj5), imgH(imgProductionMenuObj5)/2, VH);
//			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//			{
//				switch(xQuestTuto.nowNum)
//				{
//					case TUTO_1_PRODUCTIONOK:
//					case TUTO_2_PRODUCTIONOK:
//						if(xProductionMenu.slotCode[xProductionMenu.selectType][i] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
//						{
//							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//						}
//						break;
//				}
//			}
//			
//			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//			{
//				switch(xQuestTuto.nowNum)
//				{
//					case TUTO_1_PRODUCTIONFASTCASH0:
//					case TUTO_1_PRODUCTIONFASTCASH1:
//					case TUTO_2_PRODUCTIONFASTCASH:
//						if(xProductionMenu.slotCode[xProductionMenu.selectType][i] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
//							xQuestTuto.isTutoClean = TRUE;
//						break;
//				}
//			}
//		}
		else if(xProductionMenu.state[xProductionMenu.selectType][i] == PRODUCTIONMENUSLOT_STATE_PLAY && xProductionMenu.slotCode[xProductionMenu.selectType][i] != DONT)
		{
			
//			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//			{
//				switch(xQuestTuto.nowNum)
//				{
//					case TUTO_1_PRODUCTIONINGSHOW:
//						if(xProductionMenu.state2 != PRODUCTIONMENU_STATE_FASTCASHPOPUP)
//						{
//							if(xProductionMenu.slotCode[xProductionMenu.selectType][i] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
//							{
//								xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//								xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
//							}
//						}
//						break;
//					case TUTO_1_PRODUCTIONFASTCASH0:
//					case TUTO_2_PRODUCTIONFASTCASH:
//						if(xProductionMenu.state2 != PRODUCTIONMENU_STATE_FASTCASHPOPUP)
//						{
//							if(xProductionMenu.slotCode[xProductionMenu.selectType][i] == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
//							{
//								xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//								xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//								xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//							}
//						}
//						break;
//				}
			}
			
			
			
			//물품돌아가는중
			gSetClip(true,0, subTemp[YPOS]-imgH(imgProductionMenuSlot4)/2, lcdW, imgH(imgProductionMenuSlot4));
			drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,50);
			gSetClip(false,0, 0, lcdW, lcdH);
			
			//LJW 오토판매 제작시간 주석처리
//			setFontSize(8);
//            int remainTime = xFashionData[xMap.type][xMap.listNum].makeTime.oriData - xProductionMenu.slotFlowTime[xProductionMenu.selectType][i];
//			drawTimeSprintf(strTempS,remainTime,1);
//			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-11+50, strTempS, VH, 255, 255, 255, 82, 49, 38);
//			setFontSize(11);
			
			
			setFontSize(8);
			sprintf(strTempS, "남은수량:%d", xInventoryFashion.haveNum[xMap.type][xMap.listNum]);
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-11+50, strTempS, VH, 255, 255, 255, 82, 49, 38);
			setFontSize(11);
			
		}
	}
	subTemp[XPOS] = px+366;
	subTemp[YPOS] = py+268;
	
	setProductionMenuMake();
	
//	if(xProductionMenu.makeCnt > 0)
//	{
//		drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
//		setFontSize(20);
//		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "제작하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
//		setFontSize(11);
//		
//		int effImgNum = DONT;
//		switch(gameCnt%50)
//		{
//			case 41:effImgNum = 0;	break;
//			case 42:effImgNum = 1;	break;
//			case 43:effImgNum = 2;	break;
//			case 44:effImgNum = 3;	break;
//			case 45:effImgNum = 4;	break;
//		}
//		
//		if(effImgNum != DONT)
//			drawPacker(imgPopupBtn5, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn5)/5*effImgNum, imgW(imgPopupBtn5), imgH(imgPopupBtn5)/5, VH);
//		
//		
//		if(xProductionMenu.isMakeBtnInfo == TRUE)
//		{
//			drawFingerPoint(subTemp[XPOS], subTemp[YPOS],TRUE);
//		}
//	}
//	else
//	{
//		xProductionMenu.isMakeBtnInfo = FALSE;
//		drawPacker(imgPopupBtn2, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn2)/2, imgW(imgPopupBtn2), imgH(imgPopupBtn2)/2, VH);
//		setFontSize(20);
//		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "제작하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 77, 77, 77);
//		setFontSize(11);
//	}
	
	
	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//			case TUTO_1_PRODUCTIONTOPFASHIONTOUCH:
//			case TUTO_2_PRODUCTIONTOPFASHIONTOUCH:
//				if(getProductionMenu(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]) > 0)
//					xQuestTuto.isTutoClean = TRUE;
//				break;
//			case TUTO_1_PRODUCTIONMAKE:
//			case TUTO_2_PRODUCTIONMAKE:
//				if(getProductionMenu(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]) > 0)
//				{
//					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//				}
//				break;
//		}
//	}
	
	
	
	
	xTouchOk.wPos = imgW(imgProductionMenuBtn2);
	xTouchOk.hPos = imgH(imgProductionMenuBtn2)/2;
	xTouchOk.xPos = subTemp[XPOS]-xTouchOk.wPos/2;
	xTouchOk.yPos = subTemp[YPOS]-xTouchOk.hPos/2;
		
	subTemp[XPOS] = lcdW-50;
	subTemp[YPOS] = py-282;
    
    drawImage(&imgProductionMenuExitIcon, subTemp[XPOS], subTemp[YPOS], 0, 0, imgProductionMenuExitIcon.w, imgProductionMenuExitIcon.h, VH);
    
	xTouchClr.wPos = imgProductionMenuExitIcon.w;
	xTouchClr.hPos = imgProductionMenuExitIcon.h;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	
	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//			case TUTO_1_PRODUCTIONEXIT:
//			case TUTO_2_PRODUCTIONEXIT:
//			case TUTO_25_RESULT:
//				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//				break;
//		}
//	}
		

	int totalCnt;
	
	totalCnt = xCatalog.totalSlotS;
	
	
	//세부메뉴
	subTemp[XPOS] = px-340;
	subTemp[YPOS] = py+71;
	xDragScrollCatalogS.totalNum = 1+(totalCnt-1)/8;
	xDragScrollCatalogS.posGab = 640;
		
	dragScrollPrc(&xDragScrollCatalogS,0,FALSE);

	int slotCode;
	int slotNum;
	int pos;

	
	
	int setClipX = px-410;
	int setClipW = 600;
	gSetClip(true,setClipX, 0, setClipW, lcdH);
	
	for(int page=-1;page<=1;page++)
	{
		if(xDragScrollCatalogS.selectNum+page >= 0 && xDragScrollCatalogS.selectNum+page < xDragScrollCatalogS.totalNum)
		{
			for(int i=0;i<8;i++)
			{
				if(((xDragScrollCatalogS.selectNum+page)*8)+i >= totalCnt)
					break;
				
				pos = xDragScrollCatalogS.pos+(xDragScrollCatalogS.posGab*page);
				subTemp[XPOS] = px-335+pos+((i%4)*150);
				subTemp[YPOS] = py-85+((i/4)*230);
				
				slotNum = ((xDragScrollCatalogS.selectNum+page)*8)+i;
				slotCode = xCatalog.xSlotS[slotNum].code;
									
				setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
				drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
				if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
					drawPacker(imgProductionMenuSlot7, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot7), imgH(imgProductionMenuSlot7), VH);
				
				
				xQuestInfo.isCC = FALSE;
				for(int cc=0;cc<xQuestInfo.totalProductionSlotCode;cc++)
				{
					if(xQuestInfo.productionSlotCode[cc] == xCatalog.xSlotS[slotNum].code)
						xQuestInfo.isCC = TRUE;
				}
				
				
				if(xQuestInfo.isCC == TRUE)
					drawPacker(imgCashShop0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCashShop0), imgH(imgCashShop0), VH);
								
				//아이템명
				//gSetClip(setClipX, subTemp[YPOS]-imgH(imgProductionMenuSlot0)/2, setClipW, imgH(imgProductionMenuSlot0));
				
				if(isImgFittingF[xMap.type][xMap.listNum] == FALSE)
				{
					if(page == 0 && xDragScrollCatalogS.pos == 0)
					{
						drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
					}
				}
				else
					drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
								
				//gSetClip(setClipX, 0, setClipW, lcdH);
				gSetColor(44, 27, 26);
				setLabelWidth(150);
				gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFashionData[xMap.type][xMap.listNum].strName, VH);
				setLabelWidth(0);
								
				//성별
				drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFashionData[xMap.type][xMap.listNum].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
				
				if(xQuestInfo.isCC == TRUE)
				{
					drawQuestArrow(subTemp[XPOS], subTemp[YPOS]-50);
				}
				
				//new표시
				//0:보통 1:new보여주기 2:확인한상태 3:완료
				switch(xSave.fashionNew[xMap.type][xMap.listNum])
				{
				case 1:
				case 2:
					drawNewIcon(subTemp[XPOS]+20,subTemp[YPOS]-75);
					break;
				}
				if(page == 0)
				{
					if(xSave.fashionNew[xMap.type][xMap.listNum] == 1)	//0:보통 1:new보여주기 2:확인한상태 3:완료
					{
						xSave.fashionNew[xMap.type][xMap.listNum] = 2;
						gameSave(SAVE_SLOT_GAME);
					}
				}
			
				if(page == 0)
				{
//					if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//					{
//						switch(xQuestTuto.nowNum)
//						{
//						case TUTO_1_PRODUCTIONTOPFASHIONTOUCH:
//						case TUTO_2_PRODUCTIONTOPFASHIONTOUCH:
//						case TUTO_25_FASHIONOPEN_ITEM:
//							if(xCatalog.xSlotS[slotNum].code == xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0])
//							{
//								if(getProductionMenuIng(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0]) == 0)
//								{
//									xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//									xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//									xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//								}
//							}
//							break;
//						}
//					}
				}
				
				
				
				//new
				M_Boolean isEvent = FALSE;
				isEvent = xCatalog.xSlotS[slotNum].isNew;
				if(isEvent == TRUE)
				{
					drawPacker(imgSlotEvent, subTemp[XPOS]-65,subTemp[YPOS]-65, 0, 0, imgW(imgSlotEvent), imgH(imgSlotEvent)/3, TL);
				}
				//hot
				isEvent = xCatalog.xSlotS[slotNum].isHot;
				if(isEvent == TRUE)
				{
					drawPacker(imgSlotEvent, subTemp[XPOS]-65,subTemp[YPOS]-65, 0, imgH(imgSlotEvent)/3, imgW(imgSlotEvent), imgH(imgSlotEvent)/3, TL);
				}
				//event
				isEvent = xCatalog.xSlotS[slotNum].isEvent;
				if(isEvent == TRUE)
				{
					drawPacker(imgSlotEvent, subTemp[XPOS]-65,subTemp[YPOS]-65, 0, imgH(imgSlotEvent)/3*2, imgW(imgSlotEvent), imgH(imgSlotEvent)/3, TL);
				}
				
				
				
								
					
				///////////오픈전
				if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
				{
					//오픈명성조건
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+108, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+108, imgW(imgProductionMenuObj0)/8*2, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].fame.oriData);
					gSetColor(44, 27, 26);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+108, strTempS, VR);
					
					
					//오픈가격
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+108+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					gSetColor(44, 27, 26);
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].price.oriData);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+108+22, strTempS, VR);
					switch(xFashionData[xMap.type][xMap.listNum].priceType)
					{
					case 2:
						drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+108+22, imgW(imgProductionMenuObj0)/8*7, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
						break;
					default:
						drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+108+22, imgW(imgProductionMenuObj0)/8*xFashionData[xMap.type][xMap.listNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
						break;
					}
					
					
					
					if(xProductionMenu.isSlotInfo == FALSE)
						drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
					
					if(xProductionMenu.isSlotInfo == TRUE)	//인포활성여부
					{
						drawPacker(imgProductionMenuSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot1), imgH(imgProductionMenuSlot1), VH);
						gSetColor(255, 255, 255);
						gDrawString(subTemp[XPOS]-63, subTemp[YPOS]-13, "시간", VL);
						drawTimeSprintf(strTempS,xFashionData[xMap.type][xMap.listNum].makeTime.oriData,2);
						gDrawString(subTemp[XPOS]+60, subTemp[YPOS]-13, strTempS, VR);
						gDrawString(subTemp[XPOS]-63, subTemp[YPOS]+15, "수익금", VL);
						setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
						gDrawString(subTemp[XPOS]+60, subTemp[YPOS]+15, strTempS, VR);
						gDrawString(subTemp[XPOS]-63, subTemp[YPOS]+35, "경험치", VL);
						setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].exp.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
						gDrawString(subTemp[XPOS]+60, subTemp[YPOS]+35, strTempS, VR);
					}
					//레벨 잠금
					else if(xSaveTemp.lv.oriData < xFashionData[xMap.type][xMap.listNum].lv)
					{
						drawPacker(imgLock2, subTemp[XPOS]-14, subTemp[YPOS]+43, 0, 0, imgW(imgLock2), imgH(imgLock2), VR);
						sprintf(strTempS,"Lv.%d%d", xFashionData[xMap.type][xMap.listNum].lv/10,xFashionData[xMap.type][xMap.listNum].lv%10);
						gDrawStringBold(subTemp[XPOS]-14+7, subTemp[YPOS]+50, strTempS, VL, 255, 255, 255, 82, 49, 38);
					}
					else if(xSaveTemp.fame.oriData < xFashionData[xMap.type][xMap.listNum].fame.oriData)
					{
						setFontSize(8);
						gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-55+7, "명성도 부족", VH, 238, 0, 0, 44, 27, 26);
						setFontSize(11);
						sprintf(strTempS,"%d",(xSaveTemp.fame.oriData-xFashionData[xMap.type][xMap.listNum].fame.oriData));
						gDrawStringBold(subTemp[XPOS]-5, subTemp[YPOS]+55-7, strTempS, VL, 238, 0, 0, 44, 27, 26);
						drawPacker(imgProductionMenuObj0, subTemp[XPOS]-5, subTemp[YPOS]+55-7, imgW(imgProductionMenuObj0)/8*2, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VR);
					}
					else
					{
						switch(xFashionData[xMap.type][xMap.listNum].priceType)
						{
						case 2:
							drawPacker(imgProductionMenuObj13, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuObj13), imgH(imgProductionMenuObj13), VH);
							break;
						default:
							drawPacker(imgProductionMenuObj7, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuObj7), imgH(imgProductionMenuObj7), VH);
							break;
						}
					}
				}
				///////////오픈후
				else
				{
					//주문시간
					drawPacker(imgInfoBar3, subTemp[XPOS], subTemp[YPOS]+108, 0, 0, imgW(imgInfoBar3), imgH(imgInfoBar3), VH);
					drawTimeSprintf(strTempS,xFashionData[xMap.type][xMap.listNum].makeTime.oriData,2);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//LJW 의상제작 주문시간 및 주문수량 UI수정
					sprintf(strTempB, "%s",strTempS);
//					sprintf(strTempB, "%s/%d벌",strTempS,xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					gSetColor(44, 27, 26);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+108, strTempB, VR);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//LJW 의상제작 판매가격 UI수정
					//주문가격
					drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+108+22, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]-66, subTemp[YPOS]+108+22, imgW(imgProductionMenuObj0)/8*5, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					gSetColor(44, 27, 26);
					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData);
//					setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
					gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+108+22, strTempS, VR);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					//인포활성
					
					if(xProductionMenu.isSlotInfo == TRUE)
					{
						drawPacker(imgProductionMenuSlot1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot1), imgH(imgProductionMenuSlot1), VH);
						gSetColor(255, 255, 255);
						gDrawString(subTemp[XPOS]-63, subTemp[YPOS]-13, "제작비용", VL);
						sprintf(strTempS, "%d",xFashionData[xMap.type][xMap.listNum].makePoint);
						gDrawString(subTemp[XPOS]+60, subTemp[YPOS]-13, strTempS, VR);
						gDrawString(subTemp[XPOS]-63, subTemp[YPOS]+15, "수익금", VL);
						sprintf(strTempS, "%d",xFashionData[xMap.type][xMap.listNum].sellPrice.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
						gDrawString(subTemp[XPOS]+60, subTemp[YPOS]+15, strTempS, VR);
						gDrawString(subTemp[XPOS]-63, subTemp[YPOS]+35, "경험치", VL);
						sprintf(strTempS, "%d",xFashionData[xMap.type][xMap.listNum].exp.oriData*xFashionData[xMap.type][xMap.listNum].makeNum.oriData);
						gDrawString(subTemp[XPOS]+60, subTemp[YPOS]+35, strTempS, VR);
					}
					
					getProductionMenu(xCatalog.xSlotS[slotNum].code);
					
				}
								
				M_Boolean isTrend = FALSE;
				for(int tt=0;tt<TRENDMAX;tt++)
				{
					if(xTrend.isOpen[tt] == TRUE)
					{
						if(xTrend.itemCode[tt] == xCatalog.xSlotS[slotNum].code)
						{
							isTrend = TRUE;
						}
					}
				}
				
				if(isTrend == TRUE)
				{
					drawPacker(imgTrendInfoIcon, subTemp[XPOS]+30, subTemp[YPOS]-77, 0, 0, imgW(imgTrendInfoIcon), imgH(imgTrendInfoIcon), VH);
				}
				
				
				
				if(page == 0)
				{
					xFashionDrop.x_productionList[i] = subTemp[XPOS];
					xFashionDrop.y_productionList[i] = subTemp[YPOS];
					xFashionDrop.scale_productionList[i] = 60;

					
					
					
					xTouchCatalogSNo[i].wPos = 60;
					xTouchCatalogSNo[i].hPos = 120;
					xTouchCatalogSNo[i].xPos = subTemp[XPOS]-40 - xTouchCatalogSNo[i].wPos/2;
					xTouchCatalogSNo[i].yPos = subTemp[YPOS] - xTouchCatalogSNo[i].hPos/2;

					
					xTouchCatalogSYes[i].wPos = 60;
					xTouchCatalogSYes[i].hPos = 120;
					xTouchCatalogSYes[i].xPos = subTemp[XPOS]+40 - xTouchCatalogSYes[i].wPos/2;
					xTouchCatalogSYes[i].yPos = subTemp[YPOS] - xTouchCatalogSYes[i].hPos/2;
					
					/*
					gSetColor(255, 0, 0);
					setAlpha(100);
					fillRect(xTouchCatalogSYes[i].xPos, xTouchCatalogSYes[i].yPos, xTouchCatalogSYes[i].wPos, xTouchCatalogSYes[i].hPos);
					setAlpha(ALPHA_MAX);

					 gSetColor(255, 0, 0);
					 setAlpha(100);
					 fillRect(xTouchCatalogSNo[i].xPos, xTouchCatalogSNo[i].yPos, xTouchCatalogSNo[i].wPos, xTouchCatalogSNo[i].hPos);
					 setAlpha(ALPHA_MAX);
					 */

					
					xTouchCatalogS[i].wPos = 150;
					xTouchCatalogS[i].hPos = 220;
					xTouchCatalogS[i].xPos = subTemp[XPOS] - xTouchCatalogS[i].wPos/2;
					xTouchCatalogS[i].yPos = subTemp[YPOS]+50 - xTouchCatalogS[i].hPos/2;
					/*
					gSetColor(255, 0, 0);
					setAlpha(100);
					fillRect(xTouchCatalogS[0].xPos, xTouchCatalogS[0].yPos, xTouchCatalogS[0].wPos, xTouchCatalogS[0].hPos);
					setAlpha(ALPHA_MAX);
					*/
				}
                sprintf(strTempS,"%d",i);
                gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
			}
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	
    
    
    /*
     XTOUCH xTouchSexSortState[3];
     int sexSortState;
     */
    

    //xProductionMenu.sexSortState      //0:전체 1:남 2:여
    
    //전체
    subTemp[XPOS] = px-265;
    subTemp[YPOS] = py-196;
    drawPacker(imgProductionMenuObj12, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuObj12), imgH(imgProductionMenuObj12), VH);
    xGame.isReSizeDraw = TRUE;
    xGame.reSize = 70;
    if(xProductionMenu.sexSortState == 0)
        drawPacker(imgQuestV, subTemp[XPOS]+3, subTemp[YPOS]-6, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
    xGame.isReSizeDraw = FALSE;
    gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS], "전체", VL, 255, 255, 255, 141, 97, 66);
    
    
    xProductionMenu.xTouchSexSortState[0].xPos = subTemp[XPOS]-30;
    xProductionMenu.xTouchSexSortState[0].yPos = subTemp[YPOS]-20;
    xProductionMenu.xTouchSexSortState[0].wPos = 60;
    xProductionMenu.xTouchSexSortState[0].hPos = 40;
    
    
    //남
    subTemp[XPOS] = px-175;
    subTemp[YPOS] = py-196;
    drawPacker(imgProductionMenuObj12, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuObj12), imgH(imgProductionMenuObj12), VH);
    xGame.isReSizeDraw = TRUE;
    xGame.reSize = 70;
    if(xProductionMenu.sexSortState == 1)
        drawPacker(imgQuestV, subTemp[XPOS]+3, subTemp[YPOS]-6, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
    xGame.isReSizeDraw = FALSE;
    gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS], "남", VL, 255, 255, 255, 141, 97, 66);
    
    
    xProductionMenu.xTouchSexSortState[1].xPos = subTemp[XPOS]-30;
    xProductionMenu.xTouchSexSortState[1].yPos = subTemp[YPOS]-20;
    xProductionMenu.xTouchSexSortState[1].wPos = 60;
    xProductionMenu.xTouchSexSortState[1].hPos = 40;
    
    
    //여
    subTemp[XPOS] = px-115;
    subTemp[YPOS] = py-196;
    drawPacker(imgProductionMenuObj12, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuObj12), imgH(imgProductionMenuObj12), VH);
    xGame.isReSizeDraw = TRUE;
    xGame.reSize = 70;
    if(xProductionMenu.sexSortState == 2)
        drawPacker(imgQuestV, subTemp[XPOS]+3, subTemp[YPOS]-6, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
    xGame.isReSizeDraw = FALSE;
    gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS], "여", VL, 255, 255, 255, 141, 97, 66);
    
    
    xProductionMenu.xTouchSexSortState[2].xPos = subTemp[XPOS]-30;
    xProductionMenu.xTouchSexSortState[2].yPos = subTemp[YPOS]-20;
    xProductionMenu.xTouchSexSortState[2].wPos = 60;
    xProductionMenu.xTouchSexSortState[2].hPos = 40;
    
    
    /*
    for(int k=0;k<3;k++)
    {
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xProductionMenu.xTouchSexSortState[k].xPos, xProductionMenu.xTouchSexSortState[k].yPos, xProductionMenu.xTouchSexSortState[k].wPos, xProductionMenu.xTouchSexSortState[k].hPos);
        setAlpha(ALPHA_MAX);

    }
     */
    
    

    
    
    
    
	//리스트탭
	subTemp[XPOS] = px;
	subTemp[YPOS] = py-196;
	drawPacker(imgProductionMenuObj12, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuObj12), imgH(imgProductionMenuObj12), VH);
	xGame.isReSizeDraw = TRUE;
	xGame.reSize = 70;
	if(xProductionMenu.isSortTime == TRUE)
		drawPacker(imgQuestV, subTemp[XPOS]+3, subTemp[YPOS]-6, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
	xGame.isReSizeDraw = FALSE;
	gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS], "시간순", VL, 255, 255, 255, 141, 97, 66);
    
			
	xProductionMenu.xTouchSortTime.xPos = subTemp[XPOS]-30;
	xProductionMenu.xTouchSortTime.yPos = subTemp[YPOS]-20;
	xProductionMenu.xTouchSortTime.wPos = 100;
	xProductionMenu.xTouchSortTime.hPos = 40;
	
    /*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xProductionMenu.xTouchSortTime.xPos, xProductionMenu.xTouchSortTime.yPos, xProductionMenu.xTouchSortTime.wPos, xProductionMenu.xTouchSortTime.hPos);
	setAlpha(ALPHA_MAX);
     */

    
    
    

	subTemp[XPOS] = px+110;
	subTemp[YPOS] = py-196;
	drawPacker(imgProductionMenuObj12, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuObj12), imgH(imgProductionMenuObj12), VH);
	xGame.isReSizeDraw = TRUE;
	xGame.reSize = 70;
	if(xProductionMenu.isSortLv == TRUE)
		drawPacker(imgQuestV, subTemp[XPOS]+3, subTemp[YPOS]-6, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
	xGame.isReSizeDraw = FALSE;
	gDrawStringBold(subTemp[XPOS]+20, subTemp[YPOS], "레벨순", VL, 255, 255, 255, 141, 97, 66);
	
	xProductionMenu.xTouchSortLv.xPos = subTemp[XPOS]-30;
	xProductionMenu.xTouchSortLv.yPos = subTemp[YPOS]-20;
	xProductionMenu.xTouchSortLv.wPos = 100;
	xProductionMenu.xTouchSortLv.hPos = 40;
	
    /*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xProductionMenu.xTouchSortLv.xPos, xProductionMenu.xTouchSortLv.yPos, xProductionMenu.xTouchSortLv.wPos, xProductionMenu.xTouchSortLv.hPos);
	setAlpha(ALPHA_MAX);
     */


	
	
	subTemp[XPOS] = px-348;
	subTemp[YPOS] = py-198;
	drawPacker(imgProductionMenuBtn5, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgProductionMenuBtn5)/2*(xProductionMenu.isSlotInfo == FALSE?0:1), imgW(imgProductionMenuBtn5), imgH(imgProductionMenuBtn5)/2, VH);
	
	if(xProductionMenu.isSlotInfo == TRUE)
		gDrawStringBold(subTemp[XPOS]+10, subTemp[YPOS], "정보보기", VH, 255, 255, 255, 65, 42, 28);
	else
	{
		gDrawStringBold(subTemp[XPOS]+10, subTemp[YPOS], "정보보기", VH, 255, 255, 255, 126, 98, 81);
		if(xQuestInfo.isProductionInfo == TRUE)
			drawProductionArrow(subTemp[XPOS]+10, subTemp[YPOS]-45);
	}
	
	
	xProductionMenu.xTouchSlotInfo.wPos = imgW(imgProductionMenuBtn5);
	xProductionMenu.xTouchSlotInfo.hPos = imgH(imgProductionMenuBtn5)/2;
	xProductionMenu.xTouchSlotInfo.xPos = subTemp[XPOS]-xProductionMenu.xTouchSlotInfo.wPos/2;
	xProductionMenu.xTouchSlotInfo.yPos = subTemp[YPOS]-xProductionMenu.xTouchSlotInfo.hPos/2;
	
	
	subTemp[XPOS] = px-108-335-3;
	subTemp[YPOS] = py+50;
	if(xDragScrollCatalogS.selectNum > 0)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchLeft.wPos = 80;
	xNoticeWorldMap.xTouchLeft.hPos = 80;
	xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
	xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
	 setAlpha(ALPHA_MAX);
	*/

	subTemp[XPOS] = px-108+335;
	subTemp[YPOS] = py+50;
	if(xDragScrollCatalogS.selectNum < xDragScrollCatalogS.totalNum-1)
		drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
	
	xNoticeWorldMap.xTouchRight.wPos = 80;
	xNoticeWorldMap.xTouchRight.hPos = 80;
	xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
	xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
	 setAlpha(ALPHA_MAX);
	 */
    
    
    
    
    drawProductionMenuLatest();
    
    
    
}

int inputProductionMenu(int code)
{
	int result = DONT;
	for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
	{		
		if(xProductionMenu.isOpen[xProductionMenu.selectType][i] == TRUE
		   && xProductionMenu.lv[xProductionMenu.selectType][i] <= xSaveTemp.lv.oriData
		   && xProductionMenu.state[xProductionMenu.selectType][i] == PRODUCTIONMENUSLOT_STATE_WAIT
		   && xProductionMenu.slotCode[xProductionMenu.selectType][i] == DONT)
		{
			xProductionMenu.slotCode[xProductionMenu.selectType][i] = code;
			xProductionMenu.isFriend[xProductionMenu.selectType][i] = FALSE;
			result = i;
			break;
		}
	}
		
	return result;
}
																			
void outputProductionMenu(int code)
{
	for(int i=PRODUCTIONMENUSLOTMAX-1;i>=0;i--)
	{
		if(xProductionMenu.isOpen[xProductionMenu.selectType][i] == TRUE
		   && xProductionMenu.state[xProductionMenu.selectType][i] == PRODUCTIONMENUSLOT_STATE_WAIT
		   && xProductionMenu.slotCode[xProductionMenu.selectType][i] == code)
		{
			xProductionMenu.slotCode[xProductionMenu.selectType][i] = DONT;
			break;
		}
	}	
}
void setProductionMenuMake()
{
	xProductionMenu.makeMoney = 0;
	xProductionMenu.makeCnt = 0;
	
	for(int type=0;type<2;type++)
	{
		for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
		{
			if(xProductionMenu.isOpen[type][i] == TRUE
			   && xProductionMenu.state[type][i] == PRODUCTIONMENUSLOT_STATE_WAIT
			   && xProductionMenu.slotCode[type][i] != DONT)
			{
				xProductionMenu.makeMoney += xFashionData[xProductionMenu.slotCode[type][i]/1000][xProductionMenu.slotCode[type][i]%1000].makePoint;
				xProductionMenu.makeCnt++;
			}
		}
	}
}

int getProductionMenu(int code)
{
	int result = 0;
	for(int tt=0;tt<2;tt++)
	{
		for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
		{
			if(xProductionMenu.isOpen[tt][i] == TRUE
			   && xProductionMenu.state[tt][i] == PRODUCTIONMENUSLOT_STATE_WAIT
			   && xProductionMenu.slotCode[tt][i] == code)
			{
				result++;
			}
		}
	}
	
	return result;
}

int getProductionMenuIng(int code)
{
	int result = 0;
	for(int tt=0;tt<2;tt++)
	{
		for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
		{
			if(xProductionMenu.isOpen[tt][i] == TRUE
			   && xProductionMenu.slotCode[tt][i] == code)
			{
				result++;
			}
		}
	}
	
	return result;
}




void makeProductionMain()
{
	int type;
	int listNum;
	
	
	for(int tt=0;tt<2;tt++)
	{
		for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
		{
			if(xProductionMenu.isOpen[tt][i] == TRUE
			   && xProductionMenu.state[tt][i] == PRODUCTIONMENUSLOT_STATE_WAIT
			   && xProductionMenu.slotCode[tt][i] != DONT)
			{
				inputProductionRecord(xProductionMenu.slotCode[tt][i]);
				
				
				type = xProductionMenu.slotCode[tt][i]/1000;
				listNum = xProductionMenu.slotCode[tt][i]%1000;
				
				
				//LJW 의상제작 상태 수정 PRODUCTIONMENUSLOT_STATE_PLAY -> PRODUCTIONMENUSLOT_STATE_WAIT
				xProductionMenu.state[tt][i] = PRODUCTIONMENUSLOT_STATE_WAIT;
//				xProductionMenu.state[tt][i] = PRODUCTIONMENUSLOT_STATE_PLAY;
				xProductionMenu.slotFlowTime[tt][i] = 0;
				xProductionMenu.pushState[tt][i] = 0;	//0:주문1:취소
				if(xSave.isPushOnOff[PUSHONOFF_PRODUCTION] == FALSE)
					xProductionMenu.pushState[tt][i] = 1;	//0:주문1:취소
				xProductionMenu.pushTime[tt][i] = xFashionData[type][listNum].makeTime.oriData;
				xProductionMenu.isUpData[tt][i] = TRUE;
				
				if(xQuestTuto.state == QUEST_TUTO_KEY)
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_1_PRODUCTIONMAKE:
					case TUTO_2_PRODUCTIONMAKE:
						if(xQuestDataMain[xQuestInfo.xSlot[0].questNum].checkCode[0] == xProductionMenu.slotCode[tt][i])
							xQuestTuto.isTutoClean = TRUE;
						break;
					}
				}
                
                ////////////////////////////////////////////////////////////////////////////
				//LJW 자동생산 막기 1010프로토콜 및 파이브락스 막기
//                xEventQueueNet.SLOT[xEventQueueNet.totalNum] = (tt*6)+i;
//                xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = xProductionMenu.slotCode[tt][i];
//                xEventQueueNet.resultGold[xEventQueueNet.totalNum] = DONT;
//                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSTART, TRUE);
				
				//판매 단가 %d원 이상 의상 주문
				setQuest(38, xFashionData[type][listNum].makeNum.oriData, DONT);
				setQuest(1,1,xProductionMenu.slotCode[tt][i]);
				setQuest(73,1,DONT);
				
//				setFiveRocksCustom("제작","제작횟수",xFashionData[type][listNum].strName,"NULL",1);
//				addProductionMenuLatest(xProductionMenu.slotCode[tt][i]);
                ////////////////////////////////////////////////////////////////////////////
			}
		}
	}
    gameSave(SAVE_SLOT_PRODUCTION);
    setProductionMenuLatest();
	
	/////////////////////////////////////////
//	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCTSLOTUPDATE, TRUE);
	/////////////////////////////////////////
    
    //LJW 오토판매 주석처리
//	setMoney(-xProductionMenu.makeMoney);
//	setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_GOLD, -xProductionMenu.makeMoney);
	//여기까지
	xProductionMenu.makeMoney = 0;
	xProductionMenu.makeCnt = 0;
	
	gameSave(SAVE_SLOT_GAME);
}
void inputProductionRecord(int code)
{
	M_Boolean isCheck = FALSE;
	int checkNum = 0;
	for(int i=0;i<xSave.totalProductionRecord;i++)
	{
		if(xSave.productionRecord[i] == code)
		{
			isCheck = TRUE;
			checkNum = i;
			break;
		}
	}
	//기존목록에 있을경우 젤 앞으로 빼주자
	if(isCheck == TRUE)
	{
		for(int i=checkNum;i>0;i--)
		{
			xSave.productionRecord[i] = xSave.productionRecord[i-1];
		}
		xSave.productionRecord[0] = code;
	}
	else	//없는경우 젤앞에 추가
	{
		for(int i=xSave.totalProductionRecord;i>0;i--)
		{
			xSave.productionRecord[i] = xSave.productionRecord[i-1];
		}
		xSave.productionRecord[0] = code;
		if(++xSave.totalProductionRecord > 16)
			xSave.totalProductionRecord = 16;
	}
}
																			
int getEmptySlot()
{
	
	int result = DONT;
	int type;
	int listNum;
	
	for(int i=0;i<3;i++)
	{
		if(xSellSlotSave.code[i] == DONT)
		{
			result = i;
			break;
		}
	}
	
//	type = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode/1000;
//	listNum = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode%1000;
//	
//	if(type < 0)
//		type = -type;
//	if(listNum < 0)
//		listNum = -listNum;
//	
//	for(int i=0;i<xObj.xObjData[type][listNum].slot;i++)
//	{
//		if(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].waitSlot == DONT
//		   && xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[i].code == DONT)
//		{
//			result = i;
//			break;
//		}
//	}

	return result;
}
																			
void setStateProductionMenu()
{
	if(xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_COUNTER] == TRUE)
	{
		
	}
	else
	{
        
//        loadImg("productionlatest.png", &imgProductionLatest);
//        loadImg("productionmenuexiticon.png", &imgProductionMenuExitIcon);
        
        ////////////////////////////////////////////////////////////////////
        //제작기 이미지 로드 KBY 2018.2.26
        productionFreeLoad_FP(true);
        ////////////////////////////////////////////////////////////////////
        
//        loadImg("productionbase.png",&imgProductionBg);
//        loadImg("productionexiticon.png", &imgProductionMenuExitIcon);
//        loadImg("productiontitle.png",&imgProductionTitle);
//        loadImg("production_left.png",&imgProduction[0]);
//        loadImg("production_main.png",&imgProduction[1]);
//        loadImg("production_right.png",&imgProduction[2]);
//        loadImg("production_arrow.png",&imgProduction[3]);
//        loadImg("production_slot_arrow.png", &imgProduction[4]);
//        loadImg("production_btn_upgrade.png", &imgProduction[5]);
//        
//        loadImg("production_name.png", &imgProduction[7]);
//        loadImg("production_slot.png", &imgProduction[8]);
//        loadImg("production_shadow.png", &imgProduction[9]);
//        loadImg("production_text.png", &imgProduction[10]);
//        loadImg("production_slot_inert.png", &imgProduction[11]);
//        loadImg("production_slot_open.png", &imgProduction[12]);
//        loadImg("production_close.png", &imgProduction[13]);
//        loadImg("production_slot_complete.png", &imgProduction[14]);
//        loadImg("production_text_complete.png", &imgProduction[15]);
//        loadImg("production_btn_fast.png", &imgProduction[16]);
//        loadImg("production_btn_fastdia.png", &imgProduction[17]);
//        loadImg("popup_base.png", &imgProduction[18]);
//        loadImg("default_btn_yesno.png", &imgProduction[19]);
//        loadImg("carrot_icon.png", &imgProduction[20]);
//        loadImg("flower_icon.png", &imgProduction[21]);
//        loadImg("production_popup_info.png", &imgProduction[22]);
//        loadImg("wealth_icon.png", &imgProduction[23]);
        
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONINFOUPDATE, TRUE);
        
		xCatalog.selectSlot = DONT;
		xWorldMap.state = WORLDMAP_STATE_PRODUCTIONMENU;
        xProduction_FP.state = PRODUCTIONMENU_STATE_MAIN;
//		xProductionMenu.state2 = PRODUCTIONMENU_STATE_MAIN;
//		xProductionMenu.selectSlot = DONT;
        xProduction_FP.index = getProductionIndex(xMap.dataKey[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);
        xProduction_FP.selectSlot=-1;
        xProduction_FP.isTouchLeftBtn=false;
        xProduction_FP.isTouchRightBtn=false;
        xProduction_FP.isTouchLeftArrow=false;
        xProduction_FP.isTouchRightArrow=false;
        xProduction_FP.isTouchClr=false;
        xProduction_FP.isTouchOpen=false;
        xProduction_FP.isTouchYes=false;
        xProduction_FP.isTouchNo=false;
        xProduction_FP.isTouchPopupClr=false;
		if(xSave.totalProductionRecord != 0)
			xCatalog.selectTabS = 7;
		setCatalogTabChange(xCatalog.selectTabS);
        
        setProductionMenuLatest();
        
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PRODUCTIONSLOTINFOUPDATE, TRUE);
	}
	
	
}


int linkStaffMenu(int code)
{
	int result = DONT;
	int type = code/1000;
	
	
	
	switch(type)
	{
	case F_TYPE_TOP:
		xFitting.selectTabB = 2;
		break;
	case F_TYPE_BOTTOM:
		xFitting.selectTabB = 3;
		break;
	case F_TYPE_ONEPIECE:
		xFitting.selectTabB = 4;
		break;
	case F_TYPE_SHOES:
		xFitting.selectTabB = 5;
		break;
	}	
	
	setFittingTabChange();
	
	
	for(int i=0;i<xFitting.totalSlot[xFitting.selectTabB];i++)
	{
		if(xFitting.xSlot[xFitting.selectTabB][i].code == code)
		{
			result = i;
			break;
		}
	}	
	return result;
}
																			

int linkProductionMenu(int code)
{
	int result = DONT;
	int type = code/1000;
	
	xCatalog.selectTabS = type;
	setCatalogTabChange(xCatalog.selectTabS);
	
	for(int i=0;i<xCatalog.totalSlotS;i++)
	{
		if(xCatalog.xSlotS[i].code == code)
		{
			result = i;
			break;
		}
	}	
	return result;
}
																			
int linkInteriorShop(int code)
{
	int result = DONT;
	int type = code/1000;
	
	
	switch(type)
	{
	case INTERIOR_TYPE_HANGER:
		xInterior.selectTabB = 0;
		xInterior.selectTabS = 0;
		break;
	case INTERIOR_TYPE_ACCESSORY:
		xInterior.selectTabB = 0;
		xInterior.selectTabS = 1;
		break;
	case INTERIOR_TYPE_FITTINGROOM:
		xInterior.selectTabB = 0;
		xInterior.selectTabS = 2;
		break;
	case INTERIOR_TYPE_SHOWWINDOW:
		xInterior.selectTabB = 0;
		xInterior.selectTabS = 3;
		break;
	case INTERIOR_TYPE_PAYMENT:
		xInterior.selectTabB = 0;
		xInterior.selectTabS = 4;
		break;
    case INTERIOR_TYPE_PRODUCTION:
        xInterior.selectTabB = 0;
        xInterior.selectTabS = 5;
        break;
	case INTERIOR_TYPE_DOOR:
		xInterior.selectTabB = 1;
		xInterior.selectTabS = 5;
		break;
	case INTERIOR_TYPE_OBJ:
		xInterior.selectTabB = 1;
		xInterior.selectTabS = 0;
		break;
	case INTERIOR_TYPE_OBJFLOOR:
		xInterior.selectTabB = 1;
		xInterior.selectTabS = 1;
		break;
	case INTERIOR_TYPE_WALLITEM:
		xInterior.selectTabB = 1;
		xInterior.selectTabS = 2;
		break;
	case INTERIOR_TYPE_FLOORTILE:
		xInterior.selectTabB = 1;
		xInterior.selectTabS = 3;
		break;
	case INTERIOR_TYPE_WALLTILE:
		xInterior.selectTabB = 1;
		xInterior.selectTabS = 4;
		break;
	}
	setInteriorTabChange();
	
	for(int i=0;i<xInterior.totalNumS;i++)
	{
		
		for(int z=0;z<CODETEAMMAX;z++)
		{
			if(xInterior.xSlotS[i].codeTeam[z] == code)
			{
				return i;
			}
		}
	}
	return result;
}

			
void drawExternalWall(int x,int y,int floor)
{
	return;//LJW 월드맵 외벽 제거
	switch(xMap.extension)
	{
	case 0:
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
		if(imgExternalWallS[xMap.extension].texture == NULL)
		{
			sprintf(strTempS,"externalwalls%d%d.png", xExternalWall.selectWall,xMap.extension);
			loadImgDocuments(strTempS, &imgExternalWallS[xMap.extension]);
		}
		drawImage(&imgExternalWallS[xMap.extension], x, y, 0, 0, imgExternalWallS[xMap.extension].w, imgExternalWallS[xMap.extension].h, BH);
		break;
	default:
		if(imgExternalWall[floor].texture == NULL)
		{
			sprintf(strTempS,"externalwall%d%d.png", xExternalWall.selectWall,floor);
			loadImgDocuments(strTempS, &imgExternalWall[floor]);

		}

		drawImage(&imgExternalWall[floor], x, y, 0, 0, imgExternalWall[floor].w, imgExternalWall[floor].h, BH);
			
		if(xWorldMap.isFriendMap == TRUE)
		{
			if(xWorldMap.isFriendMapFloorInfo == TRUE)
			{
				drawPacker(imgFriendMapInfo1, x+260, y-200, 0, 0, imgW(imgFriendMapInfo1), imgH(imgFriendMapInfo1), VH);
				drawFingerPoint(x-110+260,y-200,TRUE);
			}
		}
		break;
	}
}

void drawExternalWallChange()
{
	int px;
	int py;
	int startAnyCnt;
				
	++xWorldMap.externalWallEventAnyCnt;
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		int wallH = 0;
 		float wallBlend = 0;
		startAnyCnt = xWorldMap.externalWallEventAnyCnt-1-(floor*37);
		if(startAnyCnt >= 0)
		{
			px = xMap.pointX;
			py = xMap.pointY+1266-(floor*(TILEH*5))-((5-xMap.extension)*TILEH);
			wallH = 0;
			switch(startAnyCnt)
			{
			case 0:wallBlend=	0;wallH=	-493;break;
			case 1:wallBlend=		0;wallH=	-491.819;break;
			case 2:wallBlend=		0;wallH=	-488.064;break;
			case 3:wallBlend=		0;wallH=	-481.392;break;
			case 4:wallBlend=		0;wallH=	-471.359;break;
			case 5:wallBlend=		0;wallH=	-457.39;break;
			case 6:wallBlend=		0;wallH=	-438.712;break;
			case 7:wallBlend=		0;wallH=	-414.239;break;
			case 8:wallBlend=		0;wallH=	-382.3528;break;
			case 9:wallBlend=		0;wallH=	-340.4213;break;
			case 10:wallBlend=		0;wallH=	-283.5512;break;
			case 11:wallBlend=		0;wallH=	-199.948;
					xWorldMap.isExternalShake = TRUE;
					xWorldMap.externalShakeEventAnyCnt = 0;
					break;
			case 12:wallBlend=		1;wallH=	0;
					makeFire(getWorldMapPos(px, cx), getWorldMapPos(py+wallH-imgExternalWallSChange.h/4-200, cy), 30);
					playSnd(SND_WALL);
					break;
			case 13:wallBlend=		0.956522;wallH=	-7.943;break;
			case 14:wallBlend=		0.913043;wallH=	-34.562;break;
			case 15:wallBlend=		0.869565;wallH=	-46.207;break;
			case 16:wallBlend=		0.826087;wallH=	-51.983;break;
			case 17:wallBlend=		0.782609;wallH=	-55.074;break;
			case 18:wallBlend=		0.73913;wallH=	-56.579;break;
			case 19:wallBlend=		0.695652;wallH=	-56.987;break;
			case 20:wallBlend=		0.652174;wallH=	-56.733;break;
			case 21:wallBlend=		0.608696;wallH=	-55.923;break;
			case 22:wallBlend=		0.565217;wallH=	-54.464;break;
			case 23:wallBlend=		0.521739;wallH=	-52.234;break;
			case 24:wallBlend=		0.478261;wallH=	-49.062;break;
			case 25:wallBlend=		0.434783;wallH=	-44.687;break;
			case 26:wallBlend=		0.391304;wallH=	-38.686;break;
			case 27:wallBlend=		0.347826;wallH=	-30.247;break;
			case 28:wallBlend=		0.304348;wallH=	-31.783;break;
			case 29:wallBlend=		0.26087;wallH=	0;break;
			case 30:wallBlend=		0.217391;wallH=	-6.352;break;
			case 31:wallBlend=		0.173913;wallH=	-9.746;break;
			case 32:wallBlend=		0.130435;wallH=	-11.472;break;
			case 33:wallBlend=		0.0869565;wallH=	-11.987;break;
			case 34:wallBlend=		0.0434783;wallH=	-10.896;break;
			case 35:wallBlend=		0;wallH=	-7.304;break;
			case 36:wallBlend=		0;wallH=	0;
					
				if(floor == xMap.totalFloor-1)
				{
					xWorldMap.isExternalScale = TRUE;
					xWorldMap.externalScaleEventAnyCnt = 0;
				}
				break;
			}
			
			if(wallBlend != 0)
			{
				xGame.isBlend = TRUE;
				xGame.blendType = BLEND_WHITEALPHA;
				
				xGame.blendNum = ALPHA_MAX*wallBlend;
			}
			switch(xMap.extension)
			{
			case 0:
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
				drawImage(&imgExternalWallSChange, px, py+wallH, 0, 0, imgExternalWallSChange.w, imgExternalWallSChange.h, BH);
				break;
			default:
				drawImage(&imgExternalWallChange[floor], px, py+wallH, 0, 0, imgExternalWallChange[floor].w, imgExternalWallChange[floor].h, BH);
				break;
			}
			xGame.isBlend = FALSE;
		}
	}
}

void prcExternalShake()
{
	if(xWorldMap.isExternalScale == TRUE)
	{
		float resize;
		switch(xWorldMap.externalScaleEventAnyCnt++)
		{
		case 0:resize=100;break;
		case 1:resize=99.9338;break;
		case 2:resize=99.7405;break;
		case 3:resize=99.4278;break;
		case 4:resize=99.0032;break;
		case 5:resize=98.4747;break;
		case 6:resize=97.8498;break;
		case 7:resize=97.1362;break;
		case 8:resize=96.3418;break;
		case 9:resize=95.4741;break;
		case 10:resize=94.5409;break;
		case 11:resize=93.5499;break;
		case 12:resize=92.5089;break;
		case 13:resize=91.4254;break;
		case 14:resize=90.3072;break;
		case 15:resize=89.1621;break;
		case 16:resize=87.9977;break;
		case 17:resize=86.8218;break;
		case 18:resize=85.642;break;
		case 19:resize=84.466;break;
		case 20:resize=83.3016;break;
		case 21:resize=82.1565;break;
		case 22:resize=81.0384;break;
		case 23:resize=	79.9549;break;
		case 24:resize=78.9138;break;
		case 25:resize=77.9228;break;
		case 26:resize=76.9897;break;
		case 27:resize=76.122;break;
		case 28:resize=75.3275;break;
		case 29:resize=	74.614;break;
		case 30:resize=73.9891;break;
		case 31:resize=73.4605;break;
		case 32:resize=73.036;break;
		case 33:resize=72.7232;break;
		case 34:resize=72.5299;break;
		default:resize=72.4638;
			xWorldMap.isExternalScale = FALSE;
			xWorldMap.isExternalWall = FALSE;
				
			if(xExternalWallData.isOpen[xExternalWall.listSlot[xExtensionShop.selectSlot]] == TRUE)
			{
				setPopup(POPUP_EXTENSIONWALL_EQUIPYESNO, playState, playState, 0, DONT);
			}
			else
			{
				switch(xExternalWallData.priceType[xExternalWall.listSlot[xExtensionShop.selectSlot]])
				{
				case 0:		//골드
					if(xSaveTemp.money.oriData < xExternalWallData.price[xExternalWall.listSlot[xExtensionShop.selectSlot]])
					{
						setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
						freeImg(&imgExternalWallSChange);
						freeImg(&imgExternalWallChange[0]);
						freeImg(&imgExternalWallChange[1]);
						freeImg(&imgExternalWallChange[2]);
					}
					else
						setPopup(POPUP_EXTENSIONWALL_BUYYESNO, playState, playState, 0, DONT);
					break;
				case 1:		//룩
					if(xSaveTemp.cash.oriData < xExternalWallData.price[xExternalWall.listSlot[xExtensionShop.selectSlot]])
					{
						setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
						freeImg(&imgExternalWallSChange);
						freeImg(&imgExternalWallChange[0]);
						freeImg(&imgExternalWallChange[1]);
						freeImg(&imgExternalWallChange[2]);
					}
					else
						setPopup(POPUP_EXTENSIONWALL_BUYYESNO, playState, playState, 0, DONT);
					break;
				}
			}
			break;
		}
		xWorldMap.fscale = (resize*90.f/100.f)*0.01;
	}
		
	if(xWorldMap.isExternalShake == TRUE)
	{
		int shakeH = 0;
		switch(xWorldMap.externalShakeEventAnyCnt++)
		{
		case 0:shakeH=10;break;
		case 1:shakeH=18;break;
		case 2:shakeH=8;break;
		case 3:shakeH=-21;break;
		case 4:shakeH=-40;break;
		case 5:shakeH=-21;break;
		case 6:shakeH=29;break;
		case 7:shakeH=29;break;
		case 8:shakeH=-19;break;
		case 9:shakeH=-20;break;
		case 10:shakeH=18;break;
		case 11:shakeH=17;break;
		case 12:shakeH=-8;break;
		case 13:shakeH=-10;break;
		case 14:shakeH=15;break;
		case 15:shakeH=-5;
			xWorldMap.isExternalShake = FALSE;
			break;
		}
		xMap.pointY += shakeH;
	}
}

M_Boolean checkProductionOrderKey(int orderKey)
{
	M_Boolean isResult = FALSE;
	for(int type=0;type<2;type++)
	{
		for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
		{
			if(xProductionMenu.isOpen[type][i] == TRUE
			   && xProductionMenu.isFriend[type][i] == TRUE
			   && xProductionMenu.orderKey[type][i] == orderKey
			   && xProductionMenu.slotCode[type][i] != DONT)
			{
				return TRUE;
			}
		}
	}
	return isResult;
}
																			
int getProductionMenuSlotNum(int orderKey)
{
	int result = DONT;
	for(int type=0;type<2;type++)
	{
		for(int i=0;i<PRODUCTIONMENUSLOTMAX;i++)
		{
			if(xProductionMenu.isOpen[type][i] == TRUE
			   && xProductionMenu.isFriend[type][i] == TRUE
			   && xProductionMenu.orderKey[type][i] == orderKey
			   && xProductionMenu.slotCode[type][i] != DONT)
			{
				result = type*1000+i;
			}
		}
	}
	return result;
}
																			
int getCarParkSlotNum(int orderKey)
{
	int result = DONT;
	
	for(int i=0;i<CARKPARKMAX;i++)
	{
		if(xCarPark[i].orderKey == orderKey)
		{
			result = i;
			break;
		}
 	}
	
	return result;
}
																			
void setLock()
{		
	for(int i=0;i<LOCKMAX;i++)
	{
		xLock.lv[i] = xQuestDataMain[xLock.mainQuestNum[i]].lv;
		if(xQuestMain.nowNum < xLock.mainQuestNum[i])
			xLock.isLock[i] = TRUE;
		else
			xLock.isLock[i] = FALSE;
		
		if(xSaveTemp.lv.oriData < xLock.lv[i])
			xLock.isLock[i] = TRUE;
	}
}
																			
void drawCarParkSelectMode()
{
	int px = cx;
	int py = 60;
		
	setMapData(xProduction.selectModeCode);
	drawPacker(imgBuildIconBg, px, py, 0, 0, imgW(imgBuildIconBg), imgH(imgBuildIconBg), VH);
	drawPacker(imgProductionClrBtn, px+260, py, 0, 0, imgW(imgProductionClrBtn), imgH(imgProductionClrBtn), VH);
	
	xTouchClr.wPos = imgW(imgProductionClrBtn);
	xTouchClr.hPos = imgH(imgProductionClrBtn);
	xTouchClr.xPos = px+260-xTouchClr.wPos/2;
	xTouchClr.yPos = py-xTouchClr.hPos/2;
	
	
	switch(xWorldMap.state)
	{
	case WORLDMAP_STATE_CARPARKSELECTMODE_PRODUCTIOHN:
			
		if(xQuestTuto.state == QUEST_TUTO_KEY)
		{
			switch(xQuestTuto.nowNum)
			{
			case TUTO_20_ORDER_ORDERSELECT:
				xQuestTuto.isTutoClean = TRUE;
				break;
			}
		}
		setFontSize(14);
		gDrawStringBold(px, py,"배송하실 차량을 선택해 주세요.", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
		setFontSize(11);
		break;
	case WORLDMAP_STATE_CARPARKSELECTMODE_CAR:
		setFontSize(14);
		gDrawStringBold(px, py,"변경할 주차장을 선택해 주세요.", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
		setFontSize(11);
		break;
	}
}
void setFashionDrop(int slot,int x,int y,int scale,int endX,int endY,int scaleEnd,int code)
{
	xFashionDrop.state[slot] = FASHIONDROP_STATE_PLAY;
	xFashionDrop.anyCnt[slot] = 0;
	xFashionDrop.code[slot] = code;
	xFashionDrop.xPos[slot] = x;
	xFashionDrop.yPos[slot] = y;
	xFashionDrop.scale[slot] = scale;
	xFashionDrop.scaleEnd[slot] = scaleEnd;
	xFashionDrop.xPosEnd[slot] = endX;
	xFashionDrop.yPosEnd[slot] = endY;
}
void drawFashionDrop()
{
	int alpha;
	int w;
	int h;
	switch(xWorldMap.state)
	{
	case WORLDMAP_STATE_PRODUCTIONMENU:
	case WORLDMAP_STATE_SELL:
		break;
	default:
		initFashionDrop(DONT);
		break;
	}
	for(int i=0;i<FASHIONDROPMAX;i++)
	{
		switch(xFashionDrop.state[i])
		{
		case FASHIONDROP_STATE_PLAY:
			if(xFashionDrop.anyCnt[i] < 7)
				xFashionDrop.anyCnt[i] = 7;
				
			switch(++xFashionDrop.anyCnt[i])
			{
			case 1:	alpha=100;w=	0;h=	0;break;
			case 2:	alpha=100;w=	0;h=	8;break;
			case 3:	alpha=	80;w=	11.859;h=	-3.701;break;
			case 4:	alpha=	60;w=	20.437;h=	-7.808;break;
			case 5:	alpha=	40;w=	25.899;h=	-9.47;break;
			case 6:	alpha=	20;w=	28.849;h=	-10.096;break;
			case 7:	alpha=	0;w=	29.75;h=	-10.25;break;
			
			case 8:	alpha=	0;w=	0;h=	-22;break;
			case 9:	alpha=	25;w=	0;h=	-21.519;break;
			case 10:	alpha=	50;w=	0;h=	-19.642;break;
			case 11:	alpha=	75;w=	0;h=	-14.796;break;
			case 12:	alpha=	100;w=	0;h=	1.5;break;
			case 13:	alpha=	100;w=	0;h=	0;break;
			case 14:	alpha=	100;w=	0;h=	0;xFashionDrop.state[i] = FASHIONDROP_STATE_DONT;break;
			}
			if(alpha != 100)
				setAlpha(alpha*ALPHA_MAX/100);
			switch(xFashionDrop.anyCnt[i])
			{
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
				drawFittingF(xFashionDrop.xPos[i]+w, xFashionDrop.yPos[i]+h, xFashionDrop.code[i], xFashionDrop.scale[i]);
				break;
			default:
				drawFittingF(xFashionDrop.xPosEnd[i]+w, xFashionDrop.yPosEnd[i]+h, xFashionDrop.code[i],xFashionDrop.scaleEnd[i]);
				break;
			}
				setAlpha(ALPHA_MAX);
			break;
		}
	}
}
void initFashionDrop(int slot)
{
	if(slot == DONT)
	{
		for(int i=0;i<FASHIONDROPMAX;i++)
			xFashionDrop.state[i] = FASHIONDROP_STATE_DONT;
	}
	else
		xFashionDrop.state[slot] = FASHIONDROP_STATE_DONT;
}


void initSongNpc()
{
	for(int k=0;k<16;k++)
	{
		xStaticNpc[STATICNPC_SONG].xF.code[k] = DONT;
		xStaticNpc[STATICNPC_GUITAR].xF.code[k] = DONT;
	}
	
	//노래
	int randTemp = ranDom(0, xSongSet.total[0]-1);
			
	xStaticNpc[STATICNPC_SONG].hairNum = xSongSet.hair[0][randTemp];
	xStaticNpc[STATICNPC_SONG].faceNum = xSongSet.face[0][randTemp];
	for(int k=0;k<7;k++)
	{
		if(xSongSet.code[0][randTemp][k] != DONT)
		{
			setMapData(xSongSet.code[0][randTemp][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
			xStaticNpc[STATICNPC_SONG].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
			setSpritF(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xStaticNpc[STATICNPC_SONG].xF,ACT_FRONT);
		}
	}
	//기타
	randTemp = ranDom(0, xSongSet.total[1]-1);
	
	xStaticNpc[STATICNPC_GUITAR].hairNum = xSongSet.hair[1][randTemp];
	xStaticNpc[STATICNPC_GUITAR].faceNum = xSongSet.face[1][randTemp];
	for(int k=0;k<7;k++)
	{
		if(xSongSet.code[1][randTemp][k] != DONT)
		{
			setMapData(xSongSet.code[1][randTemp][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
			xStaticNpc[STATICNPC_GUITAR].xF.code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
			setSpritF(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xStaticNpc[STATICNPC_GUITAR].xF,ACT_FRONT);
		}
	}
}


int getTimeSec(int year,int month,int day,int hour,int minute,int sec)
{
    int resultSec = 0;
    
    resultSec += (year-2000)*60*60*24*365;
    
    
    for(int i=1;i<month;i++)
    {
        switch(i)
        {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                //31
                resultSec += 60*60*24*31;
                break;
            case 2:
                //28
                resultSec += 60*60*24*28;
                break;
            default:
                //30
                resultSec += 60*60*24*30;
                break;
        }
    }
    
    
    resultSec += (day)*60*60*24;

    
    resultSec += (hour)*60*60;

    
    resultSec += (minute)*60;

    
    resultSec += (sec);

    

    
    return resultSec;
    
    
}


void checkTimeHacking()
{
	
	getTime();
	M_Int64 client = getTimeSec(xCalendar.nowYear,xCalendar.nowMonth,xCalendar.nowDay,xCalendar.nowHour,xCalendar.nowMinute,xCalendar.nowSec);
	M_Int64 sever = getTimeSec(xCalendar.nowYear,xCalendar.nowMonth_Hacking,xCalendar.nowDay_Hacking,xCalendar.nowHour_Hacking,xCalendar.nowMinute_Hacking,xCalendar.nowSec_Hacking);
		
	
		
	
	
	
	xGame.isResume = FALSE;
	int result = client-sever;
	
	if(result < 0)
		result = -result;
	
	if(result > xWorldMap.hackingTimeSec)
	{
		setHackingPopup(1);
	}
	
	xCalendar.hackingCheckTime = xCalendar.nowTime;
}

void drawBgFillRect()
{
	gSetColor(63, 35, 18);
	setAlpha(150);
	fillRect(0, 0, lcdW, lcdH);
	setAlpha(ALPHA_MAX);
}

void drawCashUi(M_Boolean isAfter)
{
	
	if(xWorldMap.isFriendMap == TRUE)
		return;
		
	getUiShowType();
	
	if(isAfter == FALSE)
	{
		switch(xWorldMap.uiShowType)
		{
        case 2:
		case 5:	//오리지날
			break;
		default:
			return;
			break;
		}
	}
//	else
//	{
//		switch(xWorldMap.uiShowType)
//		{
//		case 2:	//오리지날
//			return;
//			break;
//		default:
//			break;
//		}
//	}
	
	
	switch(xWorldMap.uiShowType)
	{
		case 0:	//안보여줌
			break;
		case 1:	//축소버전
		case 3:	//축소버전(좌표변화)
        case 4: //축소버전(좌표변화)
			switch(xWorldMap.uiShowType)
			{
			case 1:
				subTemp[XPOS] = lcdW-78;
				subTemp[YPOS] = 21;
				break;
			case 3:
				subTemp[XPOS] = lcdW-158;
				subTemp[YPOS] = 21;
				break;
            case 4:
                subTemp[XPOS] = lcdW-248;
                subTemp[YPOS] = 21;
                break;
                    
			}
			
			drawPacker(imgWorldMapCash1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapCash1), imgH(imgWorldMapCash1), VH);
			drawPacker(imgWorldMapCash2, subTemp[XPOS]-60, subTemp[YPOS], 0, 0, imgW(imgWorldMapCash2), imgH(imgWorldMapCash2)/2, VH);
			
						
			setCommaNum(strTempS, xSaveTemp.money.oriData);
			
			gSetColor(255, 255, 255);
			gDrawString(subTemp[XPOS]+56, subTemp[YPOS], strTempS, VR);
			
			
			subTemp[YPOS] = 21+29;
			drawPacker(imgWorldMapCash1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapCash1), imgH(imgWorldMapCash1), VH);
			drawPacker(imgWorldMapCash2, subTemp[XPOS]-60, subTemp[YPOS], 0, imgH(imgWorldMapCash2)/2, imgW(imgWorldMapCash2), imgH(imgWorldMapCash2)/2, VH);
			
			setCommaNum(strTempS, xSaveTemp.cash.oriData);
			gSetColor(255, 255, 255);
			gDrawString(subTemp[XPOS]+56, subTemp[YPOS], strTempS, VR);
			break;
		case 2:	//오리지날
        case 5:
			setUiHide();
			subTemp[XPOS] = lcdW-80+70;
			subTemp[YPOS] = -1;
//			drawPacker(imgWorldMapCash0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapCash0), imgH(imgWorldMapCash0), TR);
            drawImage(&imgWealth, subTemp[XPOS], subTemp[YPOS], 0, 0, imgWealth.w, imgWealth.h, TR);
			
			
//			setAlpha(100);
//			gSetColor(255, 0, 0);
//			fillRect(xTouchWorldMapCashIcon.xPos, xTouchWorldMapCashIcon.yPos, xTouchWorldMapCashIcon.wPos, xTouchWorldMapCashIcon.hPos);
//
//			gSetColor(255, 0, 0);
//			fillRect(xTouchWorldMapCandyIcon.xPos, xTouchWorldMapCandyIcon.yPos, xTouchWorldMapCandyIcon.wPos, xTouchWorldMapCandyIcon.hPos);
//			setAlpha(ALPHA_MAX);
			 
			subTemp[XPOS] = lcdW/2+52+70;
			subTemp[YPOS] = 30+4;

            setFontSizeORI(18);
            gSetColor(255, 255, 255);
            sprintf(strTempS, "%d/%d",xSaveTemp.carrot.oriData, xChs.carrotMax);
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VR);
            setFontSize(11);

            xTouchWorldMapCandyIcon.wPos = 150;
            xTouchWorldMapCandyIcon.hPos = imgH(imgWorldMapCash0);
            xTouchWorldMapCandyIcon.xPos = subTemp[XPOS]-120;
            xTouchWorldMapCandyIcon.yPos = subTemp[YPOS]-xTouchWorldMapCandyIcon.hPos/2;
           
            
            subTemp[XPOS] = lcdW/2+45+70;
            subTemp[YPOS] = 70+3;
            if(xSaveTemp.carrot.oriData<xChs.carrotMax)
            {
                setFontSizeORI(15);
                gSetColor(255, 255, 255);
                drawTimeSprintf(strTempS, xCalcCarrot.TimeTemp, 1);
                gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VR);
                setFontSize(11);
            }

//            setAlpha(100);
//            gSetColor(255, 0, 0);
//            fillRect(xTouchWorldMapCandyIcon.xPos, xTouchWorldMapCandyIcon.yPos, xTouchWorldMapCandyIcon.wPos, xTouchWorldMapCandyIcon.hPos);
//            setAlpha(ALPHA_MAX);
//            drawNumPacker(imgWorldMapNum0, subTemp[XPOS], subTemp[YPOS]-6, xSaveTemp.tired.oriData, -3, VR);
			
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
				case TUTO_24_UI_CANDY:
					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]-10;
					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
					break;
				}
			}
			
						
			subTemp[XPOS] = lcdW/2+245+70;
			subTemp[YPOS] = 30+4;
		
			/*
			if(1000000 <= xWorldMap.uiShowMoney)
				sprintf(strTempS, "%d,%d%d%d,%d%d%d",xWorldMap.uiShowMoney/1000000,(xWorldMap.uiShowMoney/10000)%10,(xWorldMap.uiShowMoney/10000)%10,(xWorldMap.uiShowMoney/1000)%10,(xWorldMap.uiShowMoney/100)%10,(xWorldMap.uiShowMoney/10)%10,xWorldMap.uiShowMoney%10);
			else if(1000 <= xWorldMap.uiShowMoney)
				sprintf(strTempS, "%d,%d%d%d",xWorldMap.uiShowMoney/1000,(xWorldMap.uiShowMoney/100)%10,(xWorldMap.uiShowMoney/10)%10,xWorldMap.uiShowMoney%10);
			else
				sprintf(strTempS, "%d",);
			 */
			
			
//			drawNumCommaPacker(imgWorldMapNum0, subTemp[XPOS], subTemp[YPOS]-6, xWorldMap.uiShowMoney, -3, VR,imgWorldMapNum4,-1);
            
            setFontSizeORI(18);
            gSetColor(255, 255, 255);
            setCommaNum(strTempS, xSaveTemp.cash.oriData);
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VR);
            setFontSize(11);
            //추가된 부분 KBY 2018.2.23
            xTouchWorldMapCashIcon.wPos = 150;
            xTouchWorldMapCashIcon.hPos = imgH(imgWorldMapCash0);
            xTouchWorldMapCashIcon.xPos = subTemp[XPOS]-120;
            xTouchWorldMapCashIcon.yPos = subTemp[YPOS]-xTouchWorldMapCashIcon.hPos/2;
            
//            setAlpha(100);
//            gSetColor(255, 0, 0);
//            fillRect(xTouchWorldMapCashIcon.xPos, xTouchWorldMapCashIcon.yPos, xTouchWorldMapCashIcon.wPos, xTouchWorldMapCashIcon.hPos);
//            setAlpha(ALPHA_MAX);
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
					case TUTO_24_UI_GOLD:
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]-30;
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
						break;
				}
			}
			
            
			subTemp[XPOS] = lcdW/2+450+70;
			subTemp[YPOS] = 30+4;
			
			/*
			if(1000000 <= xSaveTemp.cash.oriData)
				sprintf(strTempS, "%d,%d%d%d,%d%d%d",xSaveTemp.cash.oriData/1000000,(xSaveTemp.cash.oriData/10000)%10,(xSaveTemp.cash.oriData/10000)%10,(xSaveTemp.cash.oriData/1000)%10,(xSaveTemp.cash.oriData/100)%10,(xSaveTemp.cash.oriData/10)%10,xSaveTemp.cash.oriData%10);
			else if(1000 <= xSaveTemp.cash.oriData)
				sprintf(strTempS, "%d,%d%d%d",xSaveTemp.cash.oriData/1000,(xSaveTemp.cash.oriData/100)%10,(xSaveTemp.cash.oriData/10)%10,xSaveTemp.cash.oriData%10);
			else
				sprintf(strTempS, "%d",xSaveTemp.cash.oriData);
			*/
			
            setFontSizeORI(18);
            gSetColor(255, 255, 255);
            setCommaNum(strTempS, xSaveTemp.money.oriData);
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VR);
            setFontSize(11);
            //추가된 부분 KBY 2018.2.23
            xTouchWorldMapMoneyIcon.wPos = 150;
            xTouchWorldMapMoneyIcon.hPos = imgH(imgWorldMapCash0);
            xTouchWorldMapMoneyIcon.xPos = subTemp[XPOS]-120;
            xTouchWorldMapMoneyIcon.yPos = subTemp[YPOS]-xTouchWorldMapMoneyIcon.hPos/2;
            
//            setAlpha(100);
//            gSetColor(255, 0, 0);
//            fillRect(xTouchWorldMapMoneyIcon.xPos, xTouchWorldMapMoneyIcon.yPos, xTouchWorldMapMoneyIcon.wPos, xTouchWorldMapMoneyIcon.hPos);
//            setAlpha(ALPHA_MAX);
//			drawNumCommaPacker(imgWorldMapNum0, subTemp[XPOS], subTemp[YPOS]-6, xSaveTemp.cash.oriData, -3, VR,imgWorldMapNum4,-1);
			
			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
			{
				switch(xQuestTuto.nowNum)
				{
					case TUTO_24_UI_LOOK:
						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS]-20;
						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
						break;
				}
			}
            
			getUiHide();
			break;
	}
}

void setStateOption()
{
	xWorldMap.state = WORLDMAP_STATE_OPTION;
	optionImgFreeLoad(TRUE);
}


void optionImgFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_OPTION);
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_OPTION].img);
	}
}

void drawOption()
{
	
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	drawPacker(imgOptionBg, px, py, 0, 0, imgW(imgOptionBg), imgH(imgOptionBg), VH);
	
	subTemp[XPOS] = px-197;
	subTemp[YPOS] = py-142;
	
	drawPacker(imgOptionTab, subTemp[XPOS], subTemp[YPOS]+(xOption.selectTab*90), 0, 0, imgW(imgOptionTab), imgH(imgOptionTab), VH);
	
	for(int i=0;i<2;i++)
	{
		drawPacker(imgOptionTabIcon, subTemp[XPOS], subTemp[YPOS]+(i*90), 0, imgH(imgOptionTabIcon)/2*i, imgW(imgOptionTabIcon), imgH(imgOptionTabIcon)/2, VH);
		/*
		switch(i)
		{
		case 0:sprintf(strTempS, "설정");break;
		case 1:sprintf(strTempS, "알림");break;
		}
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+(i*90)+34, strTempS, VH,255,255,255,44,27,26);
		 */
				
		xOption.xTouchTab[i].wPos = imgW(imgOptionTab);
		xOption.xTouchTab[i].hPos = imgH(imgOptionTab);
		xOption.xTouchTab[i].xPos = subTemp[XPOS]-xOption.xTouchTab[i].wPos/2;
		xOption.xTouchTab[i].yPos = subTemp[YPOS]+(i*90)-xOption.xTouchTab[i].hPos/2;
	}
	
	
	switch(xOption.selectTab)
	{
	case 0:
		drawPacker(imgOptionSubBg0, px+42, py+31, 0, 0, imgW(imgOptionSubBg0), imgH(imgOptionSubBg0), VH);
		//배경음
		subTemp[XPOS] = px-67;
		subTemp[YPOS] = py-127;

		drawPacker(imgOptionBar0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgOptionBar0), imgH(imgOptionBar0)/2, VL);
		subTemp[WPOS] = xSave.bgmVol*(imgW(imgOptionBar0))/100;
		drawPacker(imgOptionBar0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgOptionBar0)/2, subTemp[WPOS], imgH(imgOptionBar0)/2, VL);
		subTemp[WPOS] = xSave.bgmVol*(imgW(imgOptionBar0)-10)/100;
		drawPacker(imgOptionBar1, subTemp[XPOS]+subTemp[WPOS]-7, subTemp[YPOS]+3, 0, 0, imgW(imgOptionBar1), imgH(imgOptionBar1), VL);
		
		xOption.xTouchBgmVol.wPos = imgW(imgOptionBar0);
		xOption.xTouchBgmVol.hPos = imgH(imgOptionBar0)+20;
		xOption.xTouchBgmVol.xPos = subTemp[XPOS];
		xOption.xTouchBgmVol.yPos = subTemp[YPOS]-xOption.xTouchBgmVol.hPos/2;
			

		//효과음
		subTemp[XPOS] = px-67+170;
		subTemp[YPOS] = py-127;

		
		drawPacker(imgOptionBar0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgOptionBar0), imgH(imgOptionBar0)/2, VL);
		subTemp[WPOS] = xSave.effVol*(imgW(imgOptionBar0))/100;
		drawPacker(imgOptionBar0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgOptionBar0)/2, subTemp[WPOS], imgH(imgOptionBar0)/2, VL);
		subTemp[WPOS] = xSave.effVol*(imgW(imgOptionBar0)-10)/100;
		drawPacker(imgOptionBar1, subTemp[XPOS]+subTemp[WPOS]-7, subTemp[YPOS]+3, 0, 0, imgW(imgOptionBar1), imgH(imgOptionBar1), VL);

		xOption.xTouchEffVol.wPos = imgW(imgOptionBar0);
		xOption.xTouchEffVol.hPos = imgH(imgOptionBar0)+20;
		xOption.xTouchEffVol.xPos = subTemp[XPOS];
		xOption.xTouchEffVol.yPos = subTemp[YPOS]-xOption.xTouchEffVol.hPos/2;
			
		
			
		
		subTemp[XPOS] = px-90;
		subTemp[YPOS] = py-22;
        /*
		if(xSave.is4inch == TRUE)
		{
			xOption.xTouch4inch.wPos = 70;
			xOption.xTouch4inch.hPos = 70;
			xOption.xTouch4inch.xPos = subTemp[XPOS]-xOption.xTouch4inch.wPos/2;
			xOption.xTouch4inch.yPos = subTemp[YPOS]-xOption.xTouch4inch.hPos/2;
		}
		else
			drawPacker(imgOptionV, subTemp[XPOS]+5, subTemp[YPOS]-7, 0, 0, imgW(imgOptionV), imgH(imgOptionV), VH);
         */

	
		subTemp[XPOS] = px-90+160;
		subTemp[YPOS] = py-22;
		//gDrawStringBold(subTemp[XPOS]+70, subTemp[YPOS]+6, "Full스크린", VH, 255, 255, 255, 44, 27, 26);
		/*
		if(xSave.is4inch == FALSE)
		{
			xOption.xTouch4inch.wPos = 70;
			xOption.xTouch4inch.hPos = 70;
			xOption.xTouch4inch.xPos = subTemp[XPOS]-xOption.xTouch4inch.wPos/2;
			xOption.xTouch4inch.yPos = subTemp[YPOS]-xOption.xTouch4inch.hPos/2;
		}
		else
			drawPacker(imgOptionV, subTemp[XPOS]+5, subTemp[YPOS]-7, 0, 0, imgW(imgOptionV), imgH(imgOptionV), VH);
		*/
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xOption.xTouch4inch.xPos, xOption.xTouch4inch.yPos, xOption.xTouch4inch.wPos, xOption.xTouch4inch.hPos);
		setAlpha(ALPHA_MAX);
		*/
			
		//gDrawStringBold(px-110, py+38, "정보", VL, 255, 255, 255, 44, 27, 26);
			
		subTemp[XPOS] = px-128;
		subTemp[YPOS] = py+77;
		gSetColor(82, 49, 38);
		sprintf(strTempS, "회원 번호 : %s",xKakaoData.xUserInfo.strUserId);
		gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
		sprintf(strTempS, "현재 버전 : %s",VER);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+20, strTempS, VL);
		sprintf(strTempS, "넷 버전 : %d.%d.%d",NETVER/100,(NETVER/10)%10,NETVER%10);
		gDrawString(subTemp[XPOS], subTemp[YPOS]+40, strTempS, VL);
			
			
		//문의하기
		subTemp[XPOS] = px-50;
		subTemp[YPOS] = py+200;

		xOption.xTouchHelp.wPos = 160;
		xOption.xTouchHelp.hPos = 80;
		xOption.xTouchHelp.xPos = subTemp[XPOS]-xOption.xTouchHelp.wPos/2;
		xOption.xTouchHelp.yPos = subTemp[YPOS]-xOption.xTouchHelp.hPos/2;
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xOption.xTouchHelp.xPos, xOption.xTouchHelp.yPos, xOption.xTouchHelp.wPos, xOption.xTouchHelp.hPos);
		setAlpha(ALPHA_MAX);
		*/
			
		//로그아웃
		subTemp[XPOS] = px+140;
		subTemp[YPOS] = py+174;
		
		xOption.xTouchLogout.wPos = 160;
		xOption.xTouchLogout.hPos = 40;
		xOption.xTouchLogout.xPos = subTemp[XPOS]-xOption.xTouchLogout.wPos/2;
		xOption.xTouchLogout.yPos = subTemp[YPOS]-xOption.xTouchLogout.hPos/2;
		
/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xOption.xTouchLogout.xPos, xOption.xTouchLogout.yPos, xOption.xTouchLogout.wPos, xOption.xTouchLogout.hPos);
		setAlpha(ALPHA_MAX);
 */

			
			
		//게임탈퇴
		subTemp[XPOS] = px+140;
		subTemp[YPOS] = py+224;
		
		
		xOption.xTouchAccountDel.wPos = 160;
		xOption.xTouchAccountDel.hPos = 40;
		xOption.xTouchAccountDel.xPos = subTemp[XPOS]-xOption.xTouchAccountDel.wPos/2;
		xOption.xTouchAccountDel.yPos = subTemp[YPOS]-xOption.xTouchAccountDel.hPos/2;
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xOption.xTouchAccountDel.xPos, xOption.xTouchAccountDel.yPos, xOption.xTouchAccountDel.wPos, xOption.xTouchAccountDel.hPos);
		setAlpha(ALPHA_MAX);
		 */
 
			
			
					
		break;
	case 1:
		drawPacker(imgOptionSubBg1, px+42, py+31, 0, 0, imgW(imgOptionSubBg1), imgH(imgOptionSubBg1), VH);
			
		for(int i=0;i<3;i++)
		{
			subTemp[XPOS] = px+128;
			subTemp[YPOS] = py-94+(59*i);
			drawPacker(imgOptionOnOff, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgOptionOnOff)/2*(xSave.isPushOnOff[i] == FALSE?0:1), imgW(imgOptionOnOff), imgH(imgOptionOnOff)/2, VH);

			
			
			/*
			switch(i)
			{
			case 0:	sprintf(strTempS, "의상 주문 완료");break;
			case 1:	sprintf(strTempS, "의상 판매 완료");break;
			case 2:	sprintf(strTempS, "주문배송 알림");break;
			case 3:	sprintf(strTempS, "방명록 수신");break;
			}
			gDrawStringBold(subTemp[XPOS]-248, subTemp[YPOS]-3+6, strTempS, VL, 255, 255, 255, 44, 27, 26);
			 */
			
			
			xOption.xTouchOnOff[i].wPos = imgW(imgOptionOnOff);
			xOption.xTouchOnOff[i].hPos = imgH(imgOptionOnOff)/2;
			xOption.xTouchOnOff[i].xPos = subTemp[XPOS]-xOption.xTouchOnOff[i].wPos/2;
			xOption.xTouchOnOff[i].yPos = subTemp[YPOS]-xOption.xTouchOnOff[i].hPos/2;
			
		}
			
			
		break;
	}
	
	
	
	
	
	
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = px+220-xTouchClr.wPos/2;
	xTouchClr.yPos = py-170-xTouchClr.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
}


void setHelpInfoCenter(const char* text)
{
	if(xHelpInfoCenter.totalNum < HELPINFOMAX-1)
	{
		sprintf(xHelpInfoCenter.strText[xHelpInfoCenter.totalNum], "%s",text);
		xHelpInfoCenter.totalNum++;
	}
}


void setHelpInfo(const char* text)
{
	if(xHelpInfo.totalNum < 1)//HELPINFOMAX-1)
	{
		sprintf(xHelpInfo.strText[xHelpInfo.totalNum], "%s",text);
		xHelpInfo.totalNum++;
	}
}


void drawHelpInfo()
{
	int px = cx;
	int py = cy-160;
	int xPos;
	int alpha;
	
	if(xWorldMap.state == WORLDMAP_STATE_PLAY && xHelpInfoCenter.totalNum > 0)
	{
		switch(xHelpInfoCenter.state)
		{
		case HELPINFO_STATE_PLAY:
			++xHelpInfoCenter.anyCnt;
			
			xPos = 0;
			alpha = 0;
			
			switch(xHelpInfoCenter.anyCnt)
			{
			case 1:alpha=	10;break;
			case 2:alpha=	20;break;
			case 3:alpha=	30;break;
			case 4:alpha=	40;break;
			case 5:alpha=	50;break;
			case 6:alpha=	60;break;
			case 7:alpha=	70;break;
			case 8:alpha=	80;break;
			case 9:alpha=	90;playSnd(SND_HELPINFO);break;
			default:alpha=	100;
				if(xHelpInfoCenter.anyCnt > 30*5)
				{
					xHelpInfoCenter.state = HELPINFO_STATE_DIE;
					xHelpInfoCenter.anyCnt = 0;
				}
				break;
			}
			
			drawPacker(imgHelpInfoBar1, px-imgW(imgHelpInfoBar1)/2, py, 0, 0, imgW(imgHelpInfoBar1), imgH(imgHelpInfoBar1), VL);
			
			if(alpha != 100)
			{
				setAlpha(alpha*ALPHA_MAX/100);
			}
			gSetColor(255, 255, 255);
			gDrawString(px-(imgW(imgHelpInfoBar1)/2)+50, py-5, xHelpInfoCenter.strText[0], VL);
			setAlpha(ALPHA_MAX);
			break;
		case HELPINFO_STATE_DIE:
			++xHelpInfoCenter.anyCnt;
			alpha = 0;
			switch(xHelpInfoCenter.anyCnt)
			{
			case 1:alpha=90;break;
			case 2:alpha=80;break;
			case 3:alpha=70;break;
			case 4:alpha=60;break;
			case 5:alpha=50;break;
			case 6:alpha=40;break;
			case 7:alpha=30;break;
			case 8:alpha=20;break;
			case 9:alpha=10;break;
			case 10:
				--xHelpInfoCenter.totalNum;
				for(int i=0;i<xHelpInfoCenter.totalNum;i++)
					sprintf(xHelpInfoCenter.strText[i], "%s",xHelpInfoCenter.strText[i+1]);
				
				xHelpInfoCenter.state = HELPINFO_STATE_PLAY;
				xHelpInfoCenter.anyCnt = 0;
				break;
			}
			
			if(alpha != 100)
			{
				setAlpha(alpha*ALPHA_MAX/100);
			}
			
			drawPacker(imgHelpInfoBar1, px-imgW(imgHelpInfoBar1)/2, py, 0, 0, imgW(imgHelpInfoBar1), imgH(imgHelpInfoBar1), VL);
			gSetColor(255, 255, 255);
			gDrawString(px-(imgW(imgHelpInfoBar1)/2)+50, py-5, xHelpInfoCenter.strText[0], VL);
			setAlpha(ALPHA_MAX);
			break;
		}
	}
	
	
	
	px = lcdW;
	py = lcdH-106;
	if(xHelpInfo.totalNum > 0)
	{
		switch(xHelpInfo.state)
		{
		case HELPINFO_STATE_PLAY:
								
			if(xSwitchWorldMapUi.state == SWITCH_STATE_OFF|| xHelpInfo.anyCnt > 0)
				++xHelpInfo.anyCnt;
			
				
			xPos = 0;
			alpha = 0;
				
			switch(xHelpInfo.anyCnt)
			{
			case 0:return;break;
			case 1:xPos=	254.288;break;
			case 2:xPos=	203.192;break;
			case 3:xPos=	166.271;break;
			case 4:xPos=	137.259;break;
			case 5:xPos=	113.562;break;
			case 6:xPos=	93.79;break;
			case 7:xPos=	77.085;break;
			case 8:xPos=	62.874;break;
			case 9:xPos=	50.754;break;
			case 10:xPos=	40.411;break;
			case 11:xPos=	31.611;break;
			case 12:xPos=	24.17;break;
			case 13:xPos=	17.94;break;
			case 14:xPos=	12.801;break;
			case 15:xPos=	8.645;break;
			case 16:xPos=	5.387;break;
			case 17:xPos=	2.953;break;
			case 18:xPos=	1.28;break;
			case 19:xPos=	0.312;playSnd(SND_HELPINFO);break;
			case 20:alpha=	10;break;
			case 21:alpha=	20;break;
			case 22:alpha=	30;break;
			case 23:alpha=	40;break;
			case 24:alpha=	50;break;
			case 25:alpha=	60;break;
			case 26:alpha=	70;break;
			case 27:alpha=	80;break;
			case 28:alpha=	90;break;
			default:alpha=	100;
				if(xSwitchWorldMapUi.state != SWITCH_STATE_OFF || xOrder.isNew == FALSE)
				{
					xHelpInfo.state = HELPINFO_STATE_DIE;
					xHelpInfo.anyCnt = 0;
				}
				break;
			}
				
			drawPacker(imgHelpInfoBar0, px+xPos, py, 0, 0, imgW(imgHelpInfoBar0), imgH(imgHelpInfoBar0), VR);
								
			
			xHelpInfo.xTouchInfoBar.wPos = imgW(imgHelpInfoBar0);
			xHelpInfo.xTouchInfoBar.hPos = imgH(imgHelpInfoBar0);
			xHelpInfo.xTouchInfoBar.xPos = px+xPos-xHelpInfo.xTouchInfoBar.wPos/2;
			xHelpInfo.xTouchInfoBar.yPos = py-xHelpInfo.xTouchInfoBar.hPos/2;
				
			
			if(xWorldMap.uiHideCnt >= 10 && alpha != 100)
			{
				setAlpha(alpha*ALPHA_MAX/100);
			}
			gSetColor(255, 255, 255);
			setFontSize(8);
			gDrawString(px-imgW(imgHelpInfoBar0)+50, py-6, xHelpInfo.strText[0], VL);
			setFontSize(11);
			setAlpha(ALPHA_MAX);
				
			break;
		case HELPINFO_STATE_DIE:
			++xHelpInfo.anyCnt;
			alpha = 0;
			switch(xHelpInfo.anyCnt)
			{
			case 1:alpha=90;break;
			case 2:alpha=80;break;
			case 3:alpha=70;break;
			case 4:alpha=60;break;
			case 5:alpha=50;break;
			case 6:alpha=40;break;
			case 7:alpha=30;break;
			case 8:alpha=20;break;
			case 9:alpha=10;break;
			case 10:
				--xHelpInfo.totalNum;
				for(int i=0;i<xHelpInfo.totalNum;i++)
					sprintf(xHelpInfo.strText[i], "%s",xHelpInfo.strText[i+1]);
				
				xHelpInfo.state = HELPINFO_STATE_PLAY;
				xHelpInfo.anyCnt = 0;
				break;
			}
			
			if(xWorldMap.uiHideCnt >= 10 && alpha != 100)
			{
				setAlpha(alpha*ALPHA_MAX/100);
			}
				
			drawPacker(imgHelpInfoBar0, px, py, 0, 0, imgW(imgHelpInfoBar0), imgH(imgHelpInfoBar0), VR);
			gSetColor(255, 255, 255);
			setFontSize(8);
			gDrawString(px-imgW(imgHelpInfoBar0)+50, py-6, xHelpInfo.strText[0], VL);
			setFontSize(11);
			setAlpha(ALPHA_MAX);
				
			break;
		}
				
		
	}
	
	
	

}

void keyTrend(int type, int param1, int param2)
{
	M_Boolean isKeyEvent;
	int keyEventNum;
	
	int selectTrendSlot;
	switch(xTrend.state)
	{
	case TREND_STATE_MAIN:
		if(type == MH_KEY_PRESSEVENT)
		{
			isKeyEvent = FALSE;
			keyEventNum = 0;
			for(int i=0;i<TRENDMAX;i++)
			{
				if(touchCheck(&xTouchTrendSlot[i]) == TRUE)
				{
					isKeyEvent = TRUE;
					keyEventNum = i;
					break;
				}
			}
			xTrend.selectSlot = keyEventNum;
			if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				if(xTutoLimit.isLock[TUTOLIMIT_TYPE_TREND_EXIT] == TRUE)
				{
					
				}
				else
				{
					trendFreeLoad(FALSE);
					xWorldMap.isTrend = FALSE;
				}
				
				
				
				
			}
			else if(isKeyEvent == TRUE)
			{
				if(xTrend.isOpen[keyEventNum] == FALSE)
				{
					
				}
				else if(xTrend.itemCode[keyEventNum] == DONT)
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_TREND_BUY] == TRUE)
					{
						
					}
					else
					{						
						xShop.selectSlot =2+keyEventNum;
						switch(xShop.premiumPriceType[xShop.selectSlot])
						{
						case 0:		//골드
							if(xSaveTemp.money.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_MONEYEMPTY, PLAY_PLAY, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						case 1:		//룩
							if(xSaveTemp.cash.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_CASHEMPTY, PLAY_PLAY, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						case 2:		//캔디
							if(xSaveTemp.tired.oriData < xShop.premiumPrice[xShop.selectSlot].oriData)
								setPopup(POPUP_TIREDEMPTY, PLAY_PLAY, playState, 0, DONT);
							else
								setPopup(POPUP_SHOP_PREMIUM_BUYYESNO, playState, playState, 0, DONT);
							break;
						}
					}
				}
				else
				{
					playSnd(SND_MENU_OK);
					xWorldMap.isKeyReturn = TRUE;
					if(xTutoLimit.isLock[TUTOLIMIT_TYPE_TREND_LINK] == TRUE)
					{
						
					}
					else
					{
						//주문하기로
						int slotNum;
						setStateProductionMenu();
						slotNum = linkProductionMenu(xTrend.itemCode[keyEventNum]);
						
						if(slotNum != DONT)
						{
							xDragScrollCatalogS.selectNum = slotNum/8;
						}
											
						
						trendFreeLoad(FALSE);
						xWorldMap.isTrend = FALSE;
					}
				}
			}
		}
		break;
	case TREND_STATE_CHANGESLOT:
		if(type == MH_KEY_PRESSEVENT)
		{
			isKeyEvent = FALSE;
			
			for(int i=0;i<TRENDMAX;i++)
			{
				if(touchCheck(&xTouchTrendSlot[i]) == TRUE)
				{
					isKeyEvent = TRUE;
					xTrend.selectSlot = i;
					break;
				}
			}
			
			if(isKeyEvent == TRUE)
			{
				if(xTrend.isOpen[xTrend.selectSlot] == FALSE)
				{
					
				}
				else if(xTrend.itemCode[xTrend.selectSlot] != DONT)
				{
					playSnd(SND_MENU_OK);
					//교체
					addTrend(xTrend.selectSlot);
					xWorldMap.isKeyReturn = TRUE;
					xTrend.state = TREND_STATE_MAIN;
					xTrend.selectSlot = DONT;
				}
			}
			else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				trendFreeLoad(FALSE);
				playState = PLAY_PLAY;
				xWorldMap.isKeyReturn = TRUE;
			}
		}
		break;
	case TREND_STATE_EMPTYERR:
		if(type == MH_KEY_PRESSEVENT)
		{
			if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				/*
				xTrend.state = TREND_STATE_CHANGESLOT;
				xTrend.selectSlot = DONT;
				xWorldMap.isKeyReturn = TRUE;
				 */
				playSnd(SND_MENU_OK);
				//교체
				addTrend(xTrend.selectSlot);
				xWorldMap.isKeyReturn = TRUE;
				xTrend.state = TREND_STATE_MAIN;
				xTrend.selectSlot = DONT;
			}
			else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				xTrend.state = TREND_STATE_MAIN;
				xTrend.selectSlot = DONT;
			}
		}
		break;
	case TREND_STATE_NEW:
		if(type == MH_KEY_PRESSEVENT)
		{
			if(xWorldMap.newModelAnyCnt < NEWMODELANYCNTMAX)
				return;
			
			if(touchCheck(&xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
														
				switch(xTrend.itemCodeTemp/1000)
				{
				case F_TYPE_OUTER:
				case F_TYPE_TOP:
				case F_TYPE_BOTTOM:
				case F_TYPE_ONEPIECE:
					selectTrendSlot = 0;
					break;
				default:
					selectTrendSlot = 1;
					break;
				}
				
				addTrend(selectTrendSlot);
				trendFreeLoad(TRUE);
				xWorldMap.isTrend = TRUE;
				xTrend.state = TREND_STATE_MAIN;
				xTrend.selectSlot = DONT;

				xWorldMap.isKeyReturn = TRUE;
				
				if(xQuestTuto.state == QUEST_TUTO_KEY)
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_21_TRENDOK:
						xWorldMap.isTrend = FALSE;
						xQuestTuto.isTutoClean = TRUE;
						break;
					}
				}
			}
			else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
				{
					switch(xQuestTuto.nowNum)
					{
					case TUTO_21_TRENDOK:
						return;
						break;
					}
				}
				
				playSnd(SND_MENU_OK);
				trendFreeLoad(FALSE);
				xWorldMap.isTrend = FALSE;
				xWorldMap.isKeyReturn = TRUE;
			}
		}
		break;
	}
}

void resetFame()
{
	int fame = 0;
    int Temp =0;
	
	
	for(int floor = 0;floor < xMap.totalFloor;floor++)
	{
		for (int y = xMap.shopPointY; y < xMap.shopPointY+xMap.shopPointH; y++)
		{
			for (int x = xMap.shopPointX; x < xMap.shopPointX+xMap.shopPointW; x++)
			{
				if(xMap.data[floor][MAP_TYPE_FLOORTILE0][x][y] != 0)//바닥타일
				{
					setMapData(xMap.data[floor][MAP_TYPE_FLOORTILE0][x][y]);
					fame += xObj.xObjData[xMap.type][xMap.listNum].fame;
				}
				if(xMap.data[floor][MAP_TYPE_FLOORTILE1][x][y] != 0)//카페트
				{
					setMapData(xMap.data[floor][MAP_TYPE_FLOORTILE1][x][y]);
					fame += xObj.xObjData[xMap.type][xMap.listNum].fame;
                    Temp+=1;
				}
				if(xMap.data[floor][MAP_TYPE_OBJ][x][y] != 0)//바닥장식
				{
					setMapData(xMap.data[floor][MAP_TYPE_OBJ][x][y]);
					fame += xObj.xObjData[xMap.type][xMap.listNum].fame;
                    Temp+=1;
				}
			}
		}
		
		for(int w=0;w<xMap.shopPointW;w++)//좌측
		{
			if(xMap.data[floor][MAP_TYPE_WALL0][xMap.shopPointX+w][xMap.shopPointY-1] != 0)//벽지
			{
				setMapData(xMap.data[floor][MAP_TYPE_WALL0][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				fame += xObj.xObjData[xMap.type][xMap.listNum].fame;
			}
			if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)//벽장식
			{
				setMapData(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				fame += xObj.xObjData[xMap.type][xMap.listNum].fame;
                Temp+=1;
			}
		}
		for(int h=0;h<xMap.shopPointH;h++)
		{
			if(xMap.data[floor][MAP_TYPE_WALL0][xMap.shopPointX-1][xMap.shopPointY+h] != 0)//벽지
			{
				setMapData(xMap.data[floor][MAP_TYPE_WALL0][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				fame += xObj.xObjData[xMap.type][xMap.listNum].fame;
			}
			if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)//벽장식
			{
				setMapData(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]);	//xMap.rever,xMap.type,xMap.listNum 구하기
				fame += xObj.xObjData[xMap.type][xMap.listNum].fame;
                Temp+=1;
			}
		}
	}
	
    
    fame += xModelSkill.bonusPer[MODELSKILL_TYPE_FAME];
    fame += xRival.buffFame;
    
    
    fame += fame*xAmulet.buff[JEWELBUFF_TYPE_FAME]/100;
    
    
    
    
	if(fame > xBalanceData.fameMax[xSaveTemp.lv.oriData])
		fame = xBalanceData.fameMax[xSaveTemp.lv.oriData];
		
	
    setJewelQuest(14, Temp, DONT);
    
    
	
	initSecurity(&xSaveTemp.fame, fame);
}

void drawModelName(int x,int y,int code)
{
	int imgNum = xModelData[code].imgNum;
	
	int imgGrade = xModelData[code].grade;
	if(imgModelName[imgNum][imgGrade].texture == NULL)
	{
		switch(imgGrade)
		{
		case 0:	sprintf(strTempS, "mn%d_c.png",imgNum);break;
		case 1:	sprintf(strTempS, "mn%d_b.png",imgNum);break;
		case 2:	sprintf(strTempS, "mn%d_a.png",imgNum);break;
		case 3:	sprintf(strTempS, "mn%d_s.png",imgNum);break;
		}
		loadImgDocuments(strTempS, &imgModelName[imgNum][imgGrade]);
	}
	drawImage(&imgModelName[imgNum][imgGrade], x, y, 0, 0, imgModelName[imgNum][imgGrade].w, imgModelName[imgNum][imgGrade].h, VH);
}

void setModelEff(int x,int y)
{
	if(xModelEff.totalNum < MODELEFFMAX-1)
	{
		xModelEff.x[xModelEff.totalNum] = x;
		xModelEff.y[xModelEff.totalNum] = y;
		xModelEff.anyCnt[xModelEff.totalNum] = 0;
		xModelEff.resize[xModelEff.totalNum] = ranDom(80, 150);
		xModelEff.totalNum++;
	}
}

void drawModelEff()
{
	for(int i = 0;i<xModelEff.totalNum;i++)
	{
		switch(++xModelEff.anyCnt[i])
		{
		case 1:	xGame.isReSizeDraw = TRUE; xGame.reSize = 0; break;
		case 2:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.5f; break;
		case 3:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*1.0f; break;
		case 4:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.9f; break;
		case 5:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.8f; break;
		case 6:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.7f; break;
		case 7:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.6f; break;
		case 8:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.5f; break;
		case 9:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.4f; break;
		case 10:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.3f; break;
		case 11:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.2f; break;
		case 12:	xGame.isReSizeDraw = TRUE; xGame.reSize = xModelEff.resize[i]*0.1f;	break;
		}
		drawPacker(imgBlinkEff1, xModelEff.x[i], xModelEff.y[i], 0, 0, imgW(imgBlinkEff1), imgH(imgBlinkEff1), VH);
		xGame.isReSizeDraw = FALSE;
	}
	
	for(int i = 0;i<xModelEff.totalNum;i++)
	{
		if(xModelEff.anyCnt[i] >= 12)
		{
			xModelEff.totalNum--;
			for(int z=i;z<xModelEff.totalNum;z++)
			{
				xModelEff.anyCnt[z] = xModelEff.anyCnt[z+1];
				xModelEff.x[z] = xModelEff.x[z+1];
				xModelEff.y[z] = xModelEff.y[z+1];
				xModelEff.resize[z] = xModelEff.resize[z+1];
			}
			i--;
		}
	}
}

//void drawModelCasting()
//{
//	int px = cx;
//	int py = cy;
//	
//	drawBgFillRect();
//	
//	drawPacker(imgModelCastingBtn4, px, py, 0, 0, imgW(imgModelCastingBtn4), imgH(imgModelCastingBtn4), VH);
//	
//	gDrawStringBold(px, py-122, "모델을 캐스팅 할 수 있어요", VH, 86, 255, 220, 44, 25, 26);
//	
//	drawPacker(imgModelCastingBtn5, px-90, py+13, 0, 0, imgW(imgModelCastingBtn5), imgH(imgModelCastingBtn5), VH);
//	drawPacker(imgModelCastingBtn6, px+90, py+13, 0, 0, imgW(imgModelCastingBtn6), imgH(imgModelCastingBtn6), VH);
//		
//	xModel.xTouchCasting[0].wPos = imgW(imgModelCastingBtn5);
//	xModel.xTouchCasting[0].hPos = imgH(imgModelCastingBtn5);
//	xModel.xTouchCasting[0].xPos = px-90-xModel.xTouchCasting[0].wPos/2;
//	xModel.xTouchCasting[0].yPos = py+13-xModel.xTouchCasting[0].hPos/2;
//	
//	xModel.xTouchCasting[1].wPos = imgW(imgModelCastingBtn6);
//	xModel.xTouchCasting[1].hPos = imgH(imgModelCastingBtn6);
//	xModel.xTouchCasting[1].xPos = px+90-xModel.xTouchCasting[1].wPos/2;
//	xModel.xTouchCasting[1].yPos = py+13-xModel.xTouchCasting[1].hPos/2;
//	
//	
//		
//	
//	switch(xShop.premiumPriceType[0])
//	{
//	case 2:
//		drawPacker(imgProductionMenuObj0, px-90-63, py+13+67, imgW(imgProductionMenuObj0)/8*6, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
//		break;
//	default:
//		drawPacker(imgProductionMenuObj0, px-90-63, py+13+67, imgW(imgProductionMenuObj0)/8*xShop.premiumPriceType[0], 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
//		break;
//	}
//	
//	
//	
//	setCommaNum(strTempS, xShop.premiumPrice[0].oriData);
//	gSetColor(82, 49, 38);
//	gDrawString(px-90+63, py+13+67, strTempS, VR);
//	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELCASTING:
//			if(playState == PLAY_PLAY)
//			{
//				xTutoInfo.x[xTutoInfo.totalNum] = px-90;
//				xTutoInfo.y[xTutoInfo.totalNum] = py+13;
//				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//			}
//			break;
//		}
//	}
//	
//	
//	
//	switch(xShop.premiumPriceType[0])
//	{
//		case 2:
//			drawPacker(imgProductionMenuObj0, px+90-63, py+13+67, imgW(imgProductionMenuObj0)/8*6, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
//			break;
//		default:
//			drawPacker(imgProductionMenuObj0, px+90-63, py+13+67, imgW(imgProductionMenuObj0)/8*xShop.premiumPriceType[1], 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
//			break;
//	}
//	
//	
//	sprintf(strTempS, "%d",xShop.premiumPrice[1].oriData);
//	gSetColor(82, 49, 38);
//	gDrawString(px+90+63, py+13+67, strTempS, VR);
//	
//	
//	
//	if(xQuestTuto.state == QUEST_TUTO_KEY)
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELCASTING:
//			if(xWorldMap.isNewModel == FALSE)
//			{
//				if(xModel.totalInventoryModel > 0)
//					xQuestTuto.isTutoClean = TRUE;
//			}
//			break;
//		}
//	}
//	
//		
//	drawBtn(px, py+170, BTN_OK_CONFIRM);
//				
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELCASTINGEXIT:
//			xTutoInfo.x[xTutoInfo.totalNum] = px;
//			xTutoInfo.y[xTutoInfo.totalNum] = py+170;
//			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//			break;
//		}
//	}
//		
//}
//
//
//int getModelUpgradePrice(int oriInvenSlot,int targetInvenSlot)
//{
//	int oriGrade = xModelData[xInventoryModel[oriInvenSlot].code].grade;
//	int oriUpgrade = xInventoryModel[oriInvenSlot].upGrade;
//	int price = 0;
//	
//	switch(xModelUpGrade.upgradeType)
//	{
//	case 0:		//업그레이드
//		price = xModel.upgradePrice[oriGrade][oriUpgrade];
//		break;
//	case 1:		//조합
//		price = xModel.mixPrice[oriGrade];
//		break;
//	}
//	return price;
//}
//
//int getModelUpgradePer(int oriInvenSlot,int targetInvenSlot)
//{
//	int oriGrade = xModelData[xInventoryModel[oriInvenSlot].code].grade;
//	int oriUpgrade = xInventoryModel[oriInvenSlot].upGrade;
//	int targetGrade = xModelData[xInventoryModel[targetInvenSlot].code].grade;
//	int per = 0;
//	
//	switch(xModelUpGrade.upgradeType)
//	{
//	case 0:		//업그레이드
//		per = xModel.upgradePer[oriGrade][oriUpgrade][targetGrade];
//		break;
//	case 1:		//조합
//		per = xModel.mixPer[oriGrade];
//		break;
//	}
//	return per;
//}
//
//void drawModelShow(int modelCode,XFITTINGLAYER *xF,int anyCnt)
//{
//	int resize;
//	int x;
//	int y;
//	
//	if(anyCnt >= 0)
//	{
//		if(gameCnt%2 == 0)
//			makeColorPaper(1);
//		//받침
//		switch(anyCnt)
//		{
//			case 0:	x=344;y=	-86;break;
//			case 1:	x=344;y=	16.3346;break;
//			case 2:	x=344;y=	118.671;break;
//			case 3:	x=344;y=	221.007;break;
//			case 4:	x=344;y=	323.336;break;
//			case 5:	x=344;y=	425.657;break;
//			case 6:	x=344;y=	528;break;
//			case 7:	x=344;y=	516;break;
//			case 8:	x=344;y=	522;break;
//			case 9:	x=344;y=	522;break;
//			case 10:x=344;y=	522;break;
//			case 11:	x=344;y=	522;break;
//			case 12:	x=344;y=	522;break;
//			case 13:	x=344;y=	522;break;
//			case 14:	x=344;y=	522;break;
//			case 15:	x=344;y=	522;break;
//			case 16:	x=344;y=	522;break;
//			case 17:	x=344;y=	522;break;
//			case 18:	x=344;y=	522;break;
//			case 19:	x=344;y=	522;break;
//			case 20:	x=344;y=	522;break;
//			case 21:	x=344;y=	522;break;
//			case 22:	x=344;y=	522;break;
//			case 23:	x=344;y=	522;break;
//			case 24:	x=344;y=	522;break;
//			case 25:	x=344;y=	522;break;
//			case 26:	x=344;y=	522;break;
//			case 27:	x=344;y=	522;break;
//			case 28:	x=344;y=	522;break;
//			default:	x=344;y=	522;break;
//		}
//		
//		drawPacker(imgModelSlot1, x, y, 0, 0, imgW(imgModelSlot1), imgH(imgModelSlot1), VH);
//		
//		if(anyCnt == 13 && xWorldMap.isNewModel == TRUE)
//		{
//			int slot = addInventoryModel(xModel.newModelCode);
//			
//			
//			for(int i=0;i<xModelData[xInventoryModel[slot].code].grade+1;i++)
//			{
//				setQuest(54, 999, i);
//			}
//						
//			for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
//				xInventoryModel[slot].xF.code[ff] = DONT;
//			
//			/////////////////////////////////////////////////////////////////////
//			int eslot = slot;
//			xEventQueueNet.slotNum[xEventQueueNet.totalNum] = slot;
//			xEventQueueNet.action[xEventQueueNet.totalNum] = 0;//0:신규,1:업데이트,2삭제
//			xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
//			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
//			xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
//			
//			for(int f=0;f<16;f++)
//			{
//				xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
//			}
//			xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
//			xEventQueueNet.mapX[xEventQueueNet.totalNum] = 0;
//			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
//			/////////////////////////////////////////////////////////////////////
//			setModelList(xModel.listTabNum);
//			////////////////////////////////////////////
//			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETETC, FALSE);
//			///////////////////////////////////////////
//		}
//				
//		//아랫조명
//		if(anyCnt >= 17)
//		{
//			x = 344;
//			y = 345;
//			drawPacker(imgModelSlot2, x, y, 0, 0, imgW(imgModelSlot2), imgH(imgModelSlot2), VH);
//		}
//		//윗조명
//		if(anyCnt >= 28)
//		{
//			x = 353;
//			y = 280;
//			xGame.isBlend = TRUE;
//			xGame.blendType = BLEND_ADDP;
//			drawPacker(imgModelSlot3, x, y, 0, 0, imgW(imgModelSlot3), imgH(imgModelSlot3), VH);
//			xGame.isBlend = FALSE;
//		}
//		//마네킹
//		if(anyCnt >= 10)
//		{
//			switch(anyCnt)
//			{
//			case 10:	x=	342;y=	-228;break;
//			case 11:	x=	342;y=	-52.6598;break;
//			case 12:	x=	342;y=	122.67;break;
//			case 13:	x=	342;y=	298;break;
//			case 14:	x=	342;y=	327.444;break;
//			case 15:	x=	342;y=	286;break;
//			case 16:	x=	342;y=	287.77;break;
//			case 17:	x=	342;y=	290;break;
//			case 18:	x=	342;y=	290;break;
//			case 19:	x=	342;y=	290;break;
//			case 20:	x=	342;y=	290;break;
//			case 21:	x=	342;y=	290;break;
//			case 22:	x=	342;y=	290;break;
//			case 23:	x=	342;y=	290;break;
//			case 24:	x=	342;y=	290;break;
//			case 25:	x=	342;y=	290;break;
//			case 26:	x=	342;y=	290;break;
//			case 27:	x=	342;y=	290;break;
//			case 28:	x=	342;y=	290;break;
//			default:	x=	342;y=	290;break;
//			}
//									
//			switch(anyCnt)
//			{
//			case 15:
//				makeFire(x-100, y-70, 15);
//				break;
//			case 25:
//				makeFire(x+120, y-130, 15);
//				break;
//			case 35:
//				makeFire(x+30, y+140, 15);
//				break;
//			case 45:
//				makeFire(x, y, 30);
//				break;
//			}
//			
//			XFACE xFaceTemp;
//			int code = modelCode;
//			xFaceTemp.hairNum = code+1000;
//			xFaceTemp.faceNum = code+1000;
//			xFaceTemp.faceType = FACE_TYPE_SMILE;
//
//						
//			y+=30;
//			xGame.fgameScale = 1.4f;
//			xGame.fgameScaleCx = x;
//			xGame.fgameScaleCy = lcdH-y;
//			
//									
//			drawFittingBody(x, y,xF,&xFaceTemp,TRUE,xModelData[code].sex);
//			
//				
//			if(xWorldMap.isNewModel == TRUE)
//			{
//				if(xModelData[code].sex == 0)
//					drawPacker(imgNewModel6, x+(7-90), y+(76-215), 0, 0, imgW(imgNewModel6), imgH(imgNewModel6), TL);
//				else
//					drawPacker(imgNewModel7, x+(29-90), y+(120-215), 0, 0, imgW(imgNewModel7), imgH(imgNewModel7), TL);
//			}
//			
//			xGame.fgameScale = 1.0f;
//			xGame.fgameScaleCx = cx;
//			xGame.fgameScaleCy = cy;
//		}
//	}
//	
//	
//	anyCnt = anyCnt-20;
//	if(anyCnt >= 0)
//	{
//		switch(anyCnt)
//		{
//		case 0:resize=	0;break;
//		case 1:resize=	40;break;
//		case 2:resize=	80;break;
//		case 3:resize=	120;break;
//		case 4:resize=	110;break;
//		case 5:resize=	100;break;
//		case 6:resize=	100;break;
//		default:resize=100;break;
//		}
//		
//		
//		if(resize != 100)
//		{
//			xGame.fgameScale = resize*0.01f;
//		}
//		
//		//모델이름
//		switch(anyCnt)
//		{
//			case 0:	x=604.5;y=	321.5;break;
//			case 1:	x=604.5;y=	321.5;break;
//			case 2:	x=613.76;y=	322.924;break;
//			case 3:	x=622.998;y=	324.5;break;
//			case 4:	x=628.296;y=	325.853;break;
//			case 5:	x=633.5;y=	327.5;break;
//			case 6:	x=633.5;y=	327.5;break;
//			default:x=633.5;y=	327.5;break;
//		}
//				
//		xGame.fgameScaleCx = x;
//		xGame.fgameScaleCy = lcdH-y;
//		
//		
//		
//		if(xModelUpGrade.isUpgrade == TRUE && xModelUpGrade.upgradeType == 0)
//		{
//			y -= 150;
//			drawPacker(imgNewModel5, x-24, y-44, 0, 0, imgW(imgNewModel5), imgH(imgNewModel5), VH);
//		}
//		else		//뽑기
//		{
//			y -= 80;
//			
//			drawModelName(x, y-40, modelCode);
//			switch(xModelData[modelCode].grade)
//			{
//				case 0:drawPacker(imgNewModelRank0, x-120, y-34, 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
//				case 1:drawPacker(imgNewModelRank1, x-120, y-34, 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
//				case 2:drawPacker(imgNewModelRank2, x-120, y-34, 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
//				case 3:drawPacker(imgNewModelRank3, x-120, y-34, 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
//			}
//			drawPacker(imgNewModel4, x, y-2, 0, 0, imgW(imgNewModel4), imgH(imgNewModel4), VH);
//		}
//				
//		if(xModelUpGrade.isUpgrade == TRUE && xModelUpGrade.upgradeType == 0)
//		{
//			subTemp[XPOS] = x-30;
//			subTemp[YPOS] = y+155;
//			drawPacker(imgModelUpGrade0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelUpGrade0), imgH(imgModelUpGrade0), VH);
//			
//						
//			subTemp[XPOS] = x-30;
//			subTemp[YPOS] = y+24;
//			if(anyCnt > 6)
//			{
//				//모델정보
//				gSetColor(255, 255, 255);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS], "모델 레벨", VL);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS]+22, "레이어드 수", VL);
//				
//				if(xModelUpGrade.isUpgrade == TRUE)
//				{
//					switch(xModelUpGrade.upgradeType)
//					{
//						case 0:
//							for(int k=0;k<xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax;k++)
//							{
//								if(xInventoryModel[xModelUpGrade.inventoryNum].upGrade-1 > k)
//									drawPacker(imgModelLv, subTemp[XPOS]+120-(24*xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax)+(24*k), subTemp[YPOS], imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//								else
//									drawPacker(imgModelLv, subTemp[XPOS]+120-(24*xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax)+(24*k), subTemp[YPOS], 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//							}
//							break;
//					}
//				}
//				
//				
//				
//				
//				sprintf(strTempS,"%d회",xModelData[modelCode].layeredNum+getModelLayered(xModelUpGrade.inventoryNum,-1));
//				gSetColor(255, 255, 255);
//				gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+22, strTempS, VR);
//				
//				gSetColor(254, 177, 0);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS]+55, "활동 보상", VL);
//				
//				drawIcon(subTemp[XPOS]-105+10,subTemp[YPOS]+86, ICON_TYPE_TIME);
//				gSetColor(255, 255, 255);
//				drawTimeSprintf(strTempS,getModelGiftTime(xModelUpGrade.inventoryNum,-1),4);
//				gDrawString(subTemp[XPOS]-105+15+20, subTemp[YPOS]+86, strTempS, VL);
//				
//				drawPacker(imgModelMainInfo4, subTemp[XPOS]-8, subTemp[YPOS]+88, 0, 0, imgW(imgModelMainInfo4), imgH(imgModelMainInfo4), VH);
//				
//				
//				//254	188	10
//				gSetColor(254, 188, 10);
//				setCommaNum(strTempS, getModelGiftNum(xModelUpGrade.inventoryNum,-1));
//				gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+86, strTempS, VR);
//				int giftTypeImgNum;
//				switch(xModelData[modelCode].giftType)
//				{
//					case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=ICON_TYPE_GOLD;break;
//					case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=ICON_TYPE_LOOK;break;
//					case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=ICON_TYPE_CANDY;break;
//					case MODEL_GIFTTYPE_EXP:giftTypeImgNum=ICON_TYPE_EXP;break;
//				}
//				drawIcon(subTemp[XPOS]+23, subTemp[YPOS]+86, giftTypeImgNum);
//			}
//			
//			
//			subTemp[XPOS] = x-30;
//			subTemp[YPOS] = y+190;
//			if(anyCnt > 6)
//			{
//				//모델정보
//				gSetColor(255, 255, 255);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS], "모델 레벨", VL);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS]+22, "레이어드 수", VL);
//				
//				if(xModelUpGrade.isUpgrade == TRUE)
//				{
//					switch(xModelUpGrade.upgradeType)
//					{
//					case 0:
//						for(int k=0;k<xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax;k++)
//						{
//							if(xInventoryModel[xModelUpGrade.inventoryNum].upGrade > k)
//								drawPacker(imgModelLv, subTemp[XPOS]+120-(24*xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax)+(24*k), subTemp[YPOS], imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//							else
//								drawPacker(imgModelLv, subTemp[XPOS]+120-(24*xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].upGradeMax)+(24*k), subTemp[YPOS], 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//						}
//						break;
//					}
//				}
//				
//				
//				
//				
//				sprintf(strTempS,"%d회",xModelData[modelCode].layeredNum+getModelLayered(xModelUpGrade.inventoryNum,0));
//				gSetColor(255, 255, 255);
//				gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+22, strTempS, VR);
//				
//				gSetColor(254, 177, 0);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS]+55, "활동 보상", VL);
//				
//				drawIcon(subTemp[XPOS]-105+10,subTemp[YPOS]+86, ICON_TYPE_TIME);
//				gSetColor(255, 255, 255);
//				drawTimeSprintf(strTempS,getModelGiftTime(xModelUpGrade.inventoryNum,0),4);
//				gDrawString(subTemp[XPOS]-105+15+20, subTemp[YPOS]+86, strTempS, VL);
//				
//				drawPacker(imgModelMainInfo4, subTemp[XPOS]-8, subTemp[YPOS]+88, 0, 0, imgW(imgModelMainInfo4), imgH(imgModelMainInfo4), VH);
//				
//				
//				//254	188	10
//				gSetColor(254, 188, 10);
//				setCommaNum(strTempS, getModelGiftNum(xModelUpGrade.inventoryNum,0));
//				gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+86, strTempS, VR);
//				int giftTypeImgNum;
//				switch(xModelData[modelCode].giftType)
//				{
//					case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=ICON_TYPE_GOLD;break;
//					case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=ICON_TYPE_LOOK;break;
//					case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=ICON_TYPE_CANDY;break;
//					case MODEL_GIFTTYPE_EXP:giftTypeImgNum=ICON_TYPE_EXP;break;
//				}
//				drawIcon(subTemp[XPOS]+23, subTemp[YPOS]+86, giftTypeImgNum);
//			}
//			
//			subTemp[XPOS] = x-30;
//			subTemp[YPOS] = y+355;
//			drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
//			if(anyCnt > 6)
//			{
//				setFontSize(20);
//				gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "확인", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
//				setFontSize(11);
//			}
//			xTouchOk.wPos = imgW(imgPopupBtn0);
//			xTouchOk.hPos = imgH(imgPopupBtn0)/2;
//			xTouchOk.xPos = subTemp[XPOS]-xTouchOk.wPos/2;
//			xTouchOk.yPos = subTemp[YPOS]-xTouchOk.hPos/2;
//
//			subTemp[XPOS] = x-30;
//			subTemp[YPOS] = y+155;
//			if(anyCnt > 6)
//			{
//				switch(anyCnt)
//				{
//				case 7: setAlpha(1*ALPHA_MAX);
//				case 8: setAlpha(0.9*ALPHA_MAX);
//				case 9: setAlpha(0.8*ALPHA_MAX);
//				case 10: setAlpha(0.7*ALPHA_MAX);
//				case 11: setAlpha(0.6*ALPHA_MAX);
//				case 12: setAlpha(0.5*ALPHA_MAX);
//				case 13: setAlpha(0.4*ALPHA_MAX);
//				case 14: setAlpha(0.3*ALPHA_MAX);
//				case 15: setAlpha(0.2*ALPHA_MAX);
//				case 16: setAlpha(0.1*ALPHA_MAX);
//				default:
//					setAlpha(0);
//					break;
//				}
//				drawPacker(imgModelUpGrade1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelUpGrade1), imgH(imgModelUpGrade1), VH);
//				setAlpha(ALPHA_MAX);
//			}
//			
//			
//		}
//		else		//뽑기
//		{
//			subTemp[XPOS] = x-30;
//			subTemp[YPOS] = y+105;
//			drawPacker(imgNewModelInfo0, subTemp[XPOS], subTemp[YPOS]+90, 0, 0, imgW(imgNewModelInfo0), imgH(imgNewModelInfo0), VH);
//			if(anyCnt > 6)
//			{
//				
//				
//				
//				//모델정보
//				gSetColor(255, 255, 255);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS], "모델 랭크", VL);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS]+22, "레이어드 수", VL);
//				
//				switch(xModelData[modelCode].grade)
//				{
//				case 0:gSetColor(217, 227, 235);sprintf(strTempS, "C랭크");break;
//				case 1:gSetColor(29, 255, 252);sprintf(strTempS, "B랭크");break;
//				case 2:gSetColor(255, 54, 253);sprintf(strTempS, "A랭크");break;
//				case 3:gSetColor(255, 196, 16);sprintf(strTempS, "S랭크");break;
//				}
//				gDrawString(subTemp[XPOS]+105, subTemp[YPOS], strTempS, VR);
//												
//				sprintf(strTempS,"%d회",xModelData[modelCode].layeredNum);
//				gSetColor(255, 255, 255);
//				gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+22, strTempS, VR);
//							
//				gSetColor(254, 177, 0);
//				gDrawString(subTemp[XPOS]-105, subTemp[YPOS]+55, "활동 보상", VL);
//				
//				drawIcon(subTemp[XPOS]-105+10,subTemp[YPOS]+86, ICON_TYPE_TIME);
//				gSetColor(255, 255, 255);
//				drawTimeSprintf(strTempS,xModelData[modelCode].giftTime.oriData,4);
//				gDrawString(subTemp[XPOS]-105+15+20, subTemp[YPOS]+86, strTempS, VL);
//				
//				drawPacker(imgModelMainInfo4, subTemp[XPOS]-8, subTemp[YPOS]+88, 0, 0, imgW(imgModelMainInfo4), imgH(imgModelMainInfo4), VH);
//				
//				
//				//254	188	10
//				gSetColor(254, 188, 10);
//				setCommaNum(strTempS, xModelData[modelCode].giftNum.oriData);
//				gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+86, strTempS, VR);
//				int giftTypeImgNum;
//				switch(xModelData[modelCode].giftType)
//				{
//					case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=ICON_TYPE_GOLD;break;
//					case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=ICON_TYPE_LOOK;break;
//					case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=ICON_TYPE_CANDY;break;
//					case MODEL_GIFTTYPE_EXP:giftTypeImgNum=ICON_TYPE_EXP;break;
//				}
//				drawIcon(subTemp[XPOS]+23, subTemp[YPOS]+86, giftTypeImgNum);
//				
//				
//				
//				//스킬
//				for(int i=0;i<3;i++)
//				{
//					subTemp[XPOS] = x-30-70+(70*i);;
//					subTemp[YPOS] = y+105+137;
//					drawPacker(imgSkillSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlot), imgH(imgSkillSlot), VH);
//					if(xModelData[modelCode].totalSkillNum > i)
//					{
//						int packImgNum = imgSkillIcon0+xModelData[modelCode].skillType[i];
//						drawPacker(packImgNum, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(packImgNum), imgH(packImgNum), VH);
//						
//						xCollection.xTouchSkill[i].wPos = imgW(packImgNum);
//						xCollection.xTouchSkill[i].hPos = imgH(packImgNum);
//						xCollection.xTouchSkill[i].xPos = subTemp[XPOS]-xCollection.xTouchSkill[i].wPos/2;
//						xCollection.xTouchSkill[i].yPos = subTemp[YPOS]-xCollection.xTouchSkill[i].hPos/2;
//						
//						if(xCollection.selectSkill == i)
//						{
//							drawPacker(imgSkillSelect, subTemp[XPOS]-2, subTemp[YPOS]-2, 0, 0, imgW(imgSkillSelect), imgH(imgSkillSelect), VH);
//							drawPacker(imgSkillTextBox, subTemp[XPOS]+68, subTemp[YPOS]-64, 0, 0, imgW(imgSkillTextBox), imgH(imgSkillTextBox), VH);
//							
//							gSetColor(255, 255, 255);
//							setFontSize(8);
//							getSprintfSKillInfo(strTempS,modelCode,xCollection.selectSkill,0);
//							
//							
//							setPopupStringLine(strTempS,lcdW);
//							
//							
//							int fontGab = 20;
//							
//							switch(xPopup.totalLine)
//							{
//								case 2:
//									fontGab = 20;
//									break;
//								case 3:
//								case 4:
//									fontGab = 16;
//									break;
//							}
//							
//							for(int li=0;li<xPopup.totalLine;li++)
//								gDrawString(subTemp[XPOS]+68-80, subTemp[YPOS]-64-3-(fontGab/2*(xPopup.totalLine-1))+(fontGab*li), xPopup.strTextLine[li], VL);
//							
//							setFontSize(11);
//						}
//					}
//					else
//						drawPacker(imgSkillSlotEmpty, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlotEmpty), imgH(imgSkillSlotEmpty), VH);
//				}
//				
//			}
//			
//			
//			subTemp[XPOS] = x-30;
//			subTemp[YPOS] = y+105;
//			
//			drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS]+200, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
//			if(anyCnt > 6)
//			{
//				setFontSize(20);
//				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+200, "확인", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
//				setFontSize(11);
//				
//				if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//				{
//					switch(xQuestTuto.nowNum)
//					{
//						case TUTO_22_MODELCASTING:
//							xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//							xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+200;
//							xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//							break;
//					}
//				}
//			}
//			xTouchOk.wPos = imgW(imgPopupBtn0);
//			xTouchOk.hPos = imgH(imgPopupBtn0)/2;
//			xTouchOk.xPos = subTemp[XPOS]-xTouchOk.wPos/2;
//			xTouchOk.yPos = subTemp[YPOS]+200-xTouchOk.hPos/2;
//		}
//		
//		
//		xGame.fgameScale = 1.0f;
//		xGame.fgameScaleCx = cx;
//		xGame.fgameScaleCy = cy;
//	}
//}
//
//void drawModelRotEff(int xPos,int yPos,int anyCnt)
//{
//	if(anyCnt > 0)
//	{
//	switch(anyCnt)
//	{
//		case 0:
//			xGame.isReSizeDraw = TRUE;
//			xGame.reSize = 50;
//			break;
//		case 1:
//			xGame.isReSizeDraw = TRUE;
//			xGame.reSize = 130;
//			break;
//		case 2:
//			xGame.isReSizeDraw = TRUE;
//			xGame.reSize = 120;
//			break;
//		case 3:
//			xGame.isReSizeDraw = TRUE;
//			xGame.reSize = 110;
//			break;
//		case 4:
//			xGame.isReSizeDraw = TRUE;
//			xGame.reSize = 105;
//			break;
//		default:
//			xGame.isReSizeDraw = TRUE;
//			switch(anyCnt%20)
//		{
//			case 0:
//				xGame.reSize = 140;
//				setAlpha(120);
//				break;
//			case 1:
//			case 19:
//				xGame.reSize = 136;
//				setAlpha(130);
//				break;
//			case 2:
//			case 18:
//				xGame.reSize = 132;
//				setAlpha(140);
//				break;
//			case 3:
//			case 17:
//				xGame.reSize = 128;
//				setAlpha(150);
//				break;
//			case 4:
//			case 16:
//				xGame.reSize = 124;
//				setAlpha(160);
//				break;
//			case 5:
//			case 15:
//				xGame.reSize = 120;
//				setAlpha(170);
//				break;
//			case 6:
//			case 14:
//				xGame.reSize = 116;
//				setAlpha(180);
//				break;
//			case 7:
//			case 13:
//				xGame.reSize = 112;
//				setAlpha(195);
//				break;
//			case 8:
//			case 12:
//				xGame.reSize = 108;
//				setAlpha(210);
//				break;
//			case 9:
//			case 11:
//				xGame.reSize = 104;
//				setAlpha(225);
//				break;
//			case 10:
//				xGame.reSize = 100;
//				break;
//				
//		}
//			break;
//	}
//	//뺑뺑이
//	xGame.isRotate = TRUE;
//	xGame.rotateNum = 360-((gameCnt%180)*2);
//	drawPacker(imgEff3, xPos, yPos, 0, 0, imgW(imgEff3), imgH(imgEff3), VH);
//	setAlpha(ALPHA_MAX);
//	xGame.isRotate = FALSE;
//	xGame.isReSizeDraw = FALSE;
//	}
//}
//
//void drawModelUpgradeOn()
//{
//	int px = cx;
//	int py = cy;
//	if(xModelUpGrade.isUpgrade == TRUE)
//	{
//		float rad;
//		float speedMax;
//		int tAlpha;
//		
//		
//		int per = 0;
//		int price = 0;
//		if(xModelUpGrade.selectSlot != DONT)
//		{
//			per = getModelUpgradePer(xModelUpGrade.inventoryNum,xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]);
//			price = getModelUpgradePrice(xModelUpGrade.inventoryNum,xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]);
//		}
//		
//		
//		XFITTINGLAYER xFTemp;
//		for(int i=0;i<16;i++)
//			xFTemp.code[i] = DONT;
//		
//		
//		switch(xModelUpGrade.upgradeState)
//		{
//			case MODELUPGRADE_STATE_SLOTMOVE:
//				switch(xModelUpGrade.anyCnt++)
//			{
//				case 0:
//					xModelUpGrade.slotX += 24;
//					xModelUpGrade.slotY -= 13;
//					break;
//				case 1:
//					xModelUpGrade.slotX += 24;
//					xModelUpGrade.slotY -= 13;
//					break;
//				case 2:
//					xModelUpGrade.slotX -= 10;
//					xModelUpGrade.slotY += 13;
//					break;
//				default:
//					xModelUpGrade.slotEndX = cx - 320;
//					xModelUpGrade.slotEndY = cy + 90;
//					
//					rad = getArcTan(xModelUpGrade.slotX,xModelUpGrade.slotY,xModelUpGrade.slotEndX,xModelUpGrade.slotEndY);
//					speedMax = getRadiusSpeed(xModelUpGrade.slotEndX,xModelUpGrade.slotEndY,xModelUpGrade.slotX,xModelUpGrade.slotY,rad);
//					
//					getRadiusPos(xModelUpGrade.slotX,xModelUpGrade.slotY,(speedMax*0.5f),rad);
//					xModelUpGrade.slotX = xRadius.pos[XPOS];
//					xModelUpGrade.slotY = xRadius.pos[YPOS];
//					
//					subTemp[5] = xModelUpGrade.slotX - xModelUpGrade.slotEndX;
//					subTemp[6] = xModelUpGrade.slotY - xModelUpGrade.slotEndY;
//					
//					if(subTemp[5] < 0)
//						subTemp[5] = -subTemp[5];
//					
//					if(subTemp[6] < 0)
//						subTemp[6] = -subTemp[6];
//					
//					if(subTemp[5] < 5 && subTemp[6] < 5)
//					{
//						xModelUpGrade.upgradeState = MODELUPGRADE_STATE_GAGE;
//						xModelUpGrade.anyCnt = 0;
//						setEff(xModelUpGrade.slotX, xModelUpGrade.slotY,300);
//					}
//					break;
//				}
//				drawModelSlot(xModelUpGrade.slotX,xModelUpGrade.slotY,xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]);
//				break;
//			case MODELUPGRADE_STATE_GAGE:
//				drawBgFillRect();
//				subTemp[XPOS] = cx;
//				subTemp[YPOS] = cy-70;
//				
//				tAlpha = ALPHA_MAX;
//				xGame.blendNum = 0;
//				
//				if(xModelUpGrade.anyCnt == 0)
//					playSnd(SND_MODEL_UPGRADE);
//				
//				int tW;
//				switch(++xModelUpGrade.anyCnt)
//				{
//				case 30:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	1 * ALPHA_MAX;		break;
//				case 31:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.9 * ALPHA_MAX;	break;
//				case 32:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.8 * ALPHA_MAX;	break;
//				case 33:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.7 * ALPHA_MAX;	break;
//				case 34:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.6 * ALPHA_MAX;	break;
//				case 35:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.5 * ALPHA_MAX;	break;
//				case 36:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.4 * ALPHA_MAX;	break;
//				case 37:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.3 * ALPHA_MAX;	break;
//				case 38:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.2 * ALPHA_MAX;	break;
//				case 39:	tAlpha=100*ALPHA_MAX/100;xGame.blendNum=	0.1 * ALPHA_MAX;	break;
//				case 40:tAlpha=100*ALPHA_MAX/100;xGame.blendNum= 0;		break;
//				case 41:tAlpha=90*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 42:tAlpha=80*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 43:tAlpha=70*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 44:tAlpha=60*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 45:tAlpha=50*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 46:tAlpha=40*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 47:tAlpha=30*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 48:tAlpha=20*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				case 49:tAlpha=10*ALPHA_MAX/100;xGame.blendNum=	0;		break;
//				default:
//					if(xModelUpGrade.anyCnt>=50)
//					{
//						tAlpha=0;
//						//종료처리
//						playSnd(SND_MODEL_RESULT);
//						
//						
//						switch(xModelUpGrade.upgradeType)
//						{
//							case 0:
//								if(ranDom(0, 100) <= per)
//								{
//									xModelUpGrade.upgradeState = MODELUPGRADE_STATE_RESULT_SUCCESS;
//									xModelUpGrade.anyCnt = 0;
//									//성공
//									++xInventoryModel[xModelUpGrade.inventoryNum].upGrade;
//									/////////////////////////////////////////////////////////////////////
//									int eslot = xModelUpGrade.inventoryNum;
//									xEventQueueNet.action[xEventQueueNet.totalNum] = 1;//0:신규,1:업데이트,2삭제
//									xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
//									xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
//									xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
//									for(int f=0;f<16;f++)
//									{
//										xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
//									}
//									xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
//									xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInventoryModel[eslot].xF.isInFitting==FALSE?0:1;//0:미출연1:출연
//									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
//									/////////////////////////////////////////////////////////////////////
//									setQuest(53,1,DONT);
//																		
//									setMoney(-price);
//									/////////////////////////////////////////////////////////////////////
//									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
//									/////////////////////////////////////////////////////////////////////
//									
//									
//									switch(xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].grade)
//									{
//									case 0:
//										sprintf(xRocks.strTemp, "C급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade);
//										setFiveRocksCustom("모델","강화","강화성공",xRocks.strTemp,1);
//										break;
//									case 1:
//										sprintf(xRocks.strTemp, "B급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade);
//										setFiveRocksCustom("모델","강화","강화성공",xRocks.strTemp,1);
//										break;
//									case 2:
//										sprintf(xRocks.strTemp, "A급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade);
//										setFiveRocksCustom("모델","강화","강화성공",xRocks.strTemp,1);
//										break;
//									case 3:
//										sprintf(xRocks.strTemp, "S급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade);
//										setFiveRocksCustom("모델","강화","강화성공",xRocks.strTemp,1);
//										break;
//									}
//								}
//								else
//								{
//									
//									setMoney(-price);
//									/////////////////////////////////////////////////////////////////////
//									addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
//									/////////////////////////////////////////////////////////////////////
//									
//									
//									//실패
//									xModelUpGrade.isUpgrade = FALSE;
//									xModelUpGrade.anyCnt = 0;
//									setPopup(POPUP_MODELUPGRADEFAIL, playState, playState, 0, DONT);
//									
//									switch(xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].grade)
//									{
//									case 0:
//										sprintf(xRocks.strTemp, "C급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade+1);
//										setFiveRocksCustom("모델","강화","강화실패",xRocks.strTemp,1);
//										break;
//									case 1:
//										sprintf(xRocks.strTemp, "B급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade+1);
//										setFiveRocksCustom("모델","강화","강화실패",xRocks.strTemp,1);
//										break;
//									case 2:
//										sprintf(xRocks.strTemp, "A급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade+1);
//										setFiveRocksCustom("모델","강화","강화실패",xRocks.strTemp,1);
//										break;
//									case 3:
//										sprintf(xRocks.strTemp, "S급%d강",xInventoryModel[xModelUpGrade.inventoryNum].upGrade+1);
//										setFiveRocksCustom("모델","강화","강화실패",xRocks.strTemp,1);
//										break;
//									}
//								}
//								xInventoryModel[xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]].code = DONT;
//								xModelUpGrade.selectSlot = DONT;
//								setModelList(DONT);
//								setModelUpGradeList(xModelUpGrade.inventoryNum);
//								break;
//							case 1:
//							{
//								switch(xModel.state)
//								{
//								case MODELCOLLECT_STATE_MAINUPGRADE:
//									xModel.state = MODELCOLLECT_STATE_MAIN;
//									break;
//								case MODELCOLLECT_STATE_LISTUPGRADE:
//									xModel.state = MODELCOLLECT_STATE_LIST;
//									break;
//								}
//								
//								
//								
//								xModelUpGrade.upgradeState = MODELUPGRADE_STATE_RESULT_SUCCESS;
//								xModelUpGrade.anyCnt = 0;
//								
//								int grade = xModelData[xInventoryModel[xModelUpGrade.inventoryNum].code].grade;
//																									
//								xInventoryModel[xModelUpGrade.inventoryNum].code = DONT;
//								xInventoryModel[xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]].code = DONT;
//									
//								switch(grade)
//								{
//								case 0:		//c
//									xModel.newModelCode = xModel.ranDomSlotB[ranDom(0,xModel.totalRanDomSlotB-1)];
//									break;
//								case 1:		//b
//									xModel.newModelCode = xModel.ranDomSlotA[ranDom(0,xModel.totalRanDomSlotA-1)];
//									break;
//								case 2:		//a
//									xModel.newModelCode = xModel.ranDomSlotS[ranDom(0,xModel.totalRanDomSlotS-1)];
//									break;
//								}
//								
//								int slot = addInventoryModel(xModel.newModelCode);
//								
//								for(int f=0;f<16;f++)
//									xInventoryModel[slot].xF.code[f] = DONT;
//								
//								/////////////////////////////////////////////////////////////////////
//								int eslot = slot;
//								xEventQueueNet.slotNum[xEventQueueNet.totalNum] = slot;
//								xEventQueueNet.action[xEventQueueNet.totalNum] = 0;//0:신규,1:업데이트,2삭제
//								xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
//								xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
//								xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
//								
//								for(int f=0;f<16;f++)
//								{
//									xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
//								}
//								xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
//								xEventQueueNet.mapX[xEventQueueNet.totalNum] = 0;
//								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
//								/////////////////////////////////////////////////////////////////////
//								setMoney(-price);
//								/////////////////////////////////////////////////////////////////////
//								addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
//								/////////////////////////////////////////////////////////////////////
//								switch(grade)
//								{
//								case 0:
//									setFiveRocksCustom("모델","합성","합성성공","B급",1);
//									break;
//								case 1:
//									setFiveRocksCustom("모델","합성","합성성공","A급",1);
//									break;
//								case 2:
//									setFiveRocksCustom("모델","합성","합성성공","S급",1);
//									break;
//								}
//							}
//							break;
//						}
//					}
//					break;
//				}
//				
//				xGame.blendType = BLEND_WHITEALPHA;
//				tW = imgW(imgFittingMenu2)*(xModelUpGrade.anyCnt)/30;
//				if(tW > imgW(imgFittingMenu2))
//					tW = imgW(imgFittingMenu2);
//				setAlpha(tAlpha);
//				if(xGame.blendNum != 0)
//					xGame.isBlend = TRUE;
//				
//				drawModelRotEff(subTemp[XPOS], subTemp[YPOS]+23,gameCnt);
//				
//				drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS]+120, 0, imgH(imgFittingMenu2)/4*3, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
//
//				
//								
//				switch(xModelUpGrade.upgradeType)
//				{
//				case 0:
//					drawPacker(imgHiPing1, subTemp[XPOS], subTemp[YPOS]+23, 0, 0, imgW(imgHiPing1), imgH(imgHiPing1), VH);
//					break;
//				case 1:
//					drawPacker(imgHiPing2, subTemp[XPOS], subTemp[YPOS]+23, 0, 0, imgW(imgHiPing2), imgH(imgHiPing2), VH);
//					break;
//				}
//				
//				drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS]+120, 0, imgH(imgFittingMenu2)/4*2, tW, imgH(imgFittingMenu2)/4, VL);
//				
//				switch(xModelUpGrade.upgradeType)
//				{
//				case 0:
//					gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+120, "모델 업그레이드중", VH, 255, 255, 255, 186, 70, 10);
//					break;
//				case 1:
//					gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+120, "모델 조합중", VH, 255, 255, 255, 186, 70, 10);
//					break;
//				}
//				
//				
//				setAlpha(ALPHA_MAX);
//				xGame.isBlend = FALSE;
//				
//				break;
//			case MODELUPGRADE_STATE_RESULT_SUCCESS:
//				drawBgFillRect();
//				
//				
//				
//				switch(xModelUpGrade.upgradeType)
//				{
//				case 0:
//					drawModelRotEff(px+110, py-160,xModelUpGrade.anyCnt-27);
//					drawModelShow(xInventoryModel[xModelUpGrade.inventoryNum].code, &xInventoryModel[xModelUpGrade.inventoryNum].xF, xModelUpGrade.anyCnt++);
//					break;
//				case 1:
//					drawModelRotEff(px+132, py-90,xModelUpGrade.anyCnt-27);
//					drawModelShow(xModel.newModelCode, &xFTemp, xModelUpGrade.anyCnt++);
//					break;
//				}
//				break;
//		}
//		
//		/*
//		 if(++xModelUpGrade.anyCnt > MODELUPGRADEANYCNT)
//		 {
//		 xModelUpGrade.isUpgrade = FALSE;
//		 xInventoryModel[xModelUpGrade.modelListNum].upGrade++;
//		 xInventoryModel[xModelUpGrade.modelListSlot[xModelUpGrade.selectSlot]].code = DONT;
//		 setModelUpGradeList(xModelUpGrade.modelListNum);
//		 xModel.selectSlot = DONT;
//		 }
//		 */
//	}
//}

void drawFashionShowInfo()
{
	int px=cx;
	int py=cy;
		
	drawBgFillRect();
	
	drawPacker(imgFsInfo0, px, py, 0, 0, imgW(imgFsInfo0), imgH(imgFsInfo0), VH);
	
	xTouchClr.wPos = imgW(imgFsInfo0);
	xTouchClr.hPos = imgH(imgFsInfo0);
	xTouchClr.xPos = px-xTouchClr.wPos/2;
	xTouchClr.yPos = py+70-xTouchClr.hPos/2;
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_29_RESULT:
				
			if(xFashionShow.state == FASHIONSHOW_STATE_INFO)
			{
				xTutoInfo.x[xTutoInfo.totalNum] = px+195;
				xTutoInfo.y[xTutoInfo.totalNum] = py-235;
				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			}
			break;
		}
	}
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	*/
		
	subTemp[XPOS] = px-170;
	subTemp[YPOS] = py-233;
	setFontSize(14);
	sprintf(strTempS,"%s님의 모델정보",xFriendData[xFashionShowInfo.xRankSlot.friendDataNum].strNickName);
	
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VL, 255, 255, 255, 82, 49, 38);
	setFontSize(11);
	
			
	subTemp[XPOS] = px-100;
	subTemp[YPOS] = py+180;
	//마네킹
	if(xFashionShowInfo.xRankSlot.rank != 0)
	{
		int slotTemp = (gameCnt/90)%xFashionShowInfo.xRankSlot.totalModel;
		
		XFACE xFaceTemp;
		int modelCode = xFashionShowInfo.xRankSlot.modelCode[slotTemp];
		
		xFaceTemp.hairNum = modelCode+1000;
		xFaceTemp.faceNum = modelCode+1000;
		xFaceTemp.faceType = FACE_TYPE_SMILE;
		
		XFITTINGLAYER xFTemp;
				
		memcpy(&xFTemp, &xFashionShowInfo.xRankSlot.xF[slotTemp], sizeof(xFTemp));
					
		xGame.fgameScale = 1.2f;
		xGame.fgameScaleCx = subTemp[XPOS]-2;
		xGame.fgameScaleCy = lcdH-(subTemp[YPOS]-172);
		
		drawFittingBody(subTemp[XPOS]-2, subTemp[YPOS]-172,&xFTemp,&xFaceTemp,TRUE,xModelData[modelCode].sex);
		
		xGame.fgameScale = 1.0f;
		xGame.fgameScaleCx = cx;
		xGame.fgameScaleCy = cy;
			

		subTemp[XPOS] = px-70;
		subTemp[YPOS] = py+190;
		switch(xModelData[modelCode].grade)
		{
		case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
		case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
		case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
		case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
		}
		drawModelName(subTemp[XPOS], subTemp[YPOS], modelCode);
		
		for(int k=0;k<xModelData[modelCode].upGradeMax;k++)
		{
			if(xFashionShowInfo.xRankSlot.modelUpgrade[slotTemp] > k)
				drawPacker(imgModelLv, subTemp[XPOS]-57+(26*k), subTemp[YPOS]+35, imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
			else
				drawPacker(imgModelLv, subTemp[XPOS]-57+(26*k), subTemp[YPOS]+35, 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
		}
		
		subTemp[XPOS] = px+118;
		subTemp[YPOS] = py-266;
		
		setFontSize(14);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+90, "획득점수", VH, 255, 255, 255, 82, 49, 38);
			
		sprintf(strTempS,"%d",xFashionShowInfo.xRankSlot.score);
		setFontSize(20);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+90+38, strTempS, VH, 86, 255, 220, 44, 26, 27);
		sprintf(strTempS,"(%d표)",xFashionShowInfo.xRankSlot.vote);
		setFontSize(11);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+90+38+30, strTempS, VH, 86, 255, 220, 44, 26, 27);
		setFontSize(14);
		
		switch(xFashionShow.selectRankTabS)
		{
		case 0: gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+200, "친구랭킹", VH, 255, 255, 255, 82, 49, 38);break;
		case 1: gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+200, "월드랭킹", VH, 255, 255, 255, 82, 49, 38);break;
		case 2: gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+200, "추천랭킹", VH, 255, 255, 255, 82, 49, 38);break;
		}
		
		
		
		xFashionShowInfo.xRankSlot.rank = xFashionShow.selectRankSlot+1;
		sprintf(strTempS,"%d위",xFashionShowInfo.xRankSlot.rank);
		setFontSize(20);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+200+38, strTempS, VH, 86, 255, 220, 44, 26, 27);
		setFontSize(14);
		
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+293, "참가모델수", VH, 255, 255, 255, 82, 49, 38);
		sprintf(strTempS, "%d명",xFashionShowInfo.xRankSlot.totalModel);
		setFontSize(20);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+293+38, strTempS, VH, 86, 255, 220, 44, 26, 27);
		setFontSize(11);
		
	}
		
	subTemp[XPOS] = px+118;
	subTemp[YPOS] = py+138;
	
	
	if(xFashionShowInfo.xRankSlot.userCode != xNetData.userNum)
	{
		drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
		setFontSize(20);
		gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "방문하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
		setFontSize(11);
		xFashionShowInfo.xTouchBtn[0].wPos = imgW(imgPopupBtn0);
		xFashionShowInfo.xTouchBtn[0].hPos = imgH(imgPopupBtn0)/2;
		xFashionShowInfo.xTouchBtn[0].xPos = subTemp[XPOS]-xFashionShowInfo.xTouchBtn[0].wPos/2;
		xFashionShowInfo.xTouchBtn[0].yPos = subTemp[YPOS]-xFashionShowInfo.xTouchBtn[0].hPos/2;
	}
	
	subTemp[XPOS] = px+118;
	subTemp[YPOS] = py+211;
	drawPacker(imgPopupBtn3, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn3)/2, imgW(imgPopupBtn3), imgH(imgPopupBtn3)/2, VH);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-2, "패션쇼 다시보기", VH, 255, 255, 255, 83, 11, 21);
	setFontSize(11);
	xFashionShowInfo.xTouchBtn[1].wPos = imgW(imgPopupBtn3);
	xFashionShowInfo.xTouchBtn[1].hPos = imgH(imgPopupBtn3)/2;
	xFashionShowInfo.xTouchBtn[1].xPos = subTemp[XPOS]-xFashionShowInfo.xTouchBtn[1].wPos/2;
	xFashionShowInfo.xTouchBtn[1].yPos = subTemp[YPOS]-xFashionShowInfo.xTouchBtn[1].hPos/2;
		
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_29_FASHIONSHOWRANK_REPLAY:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
	
}

void drawNoticeFS()
{
	int px = cx;
	int py = cy;
	drawPacker(imgFsNoticeBg0, px, py, 0, 0, imgW(imgFsNoticeBg0), imgH(imgFsNoticeBg0), VH);
	
	
	for(int i=0;i<3;i++)
	{
		subTemp[XPOS] = px+80+(i*78);
		subTemp[YPOS] = py-185;
				
		if(i == xFashionShow.selectNoticeTab)
			drawPacker(imgFsRankTab, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsRankTab), imgH(imgFsRankTab), VH);
		
		switch(i)
		{
		case 0:	// 월드
			drawPacker(imgFsRankTabIcon1, subTemp[XPOS], subTemp[YPOS]-2, 0, 0, imgW(imgFsRankTabIcon1), imgH(imgFsRankTabIcon1), VH);
			break;
		case 1: // 친구
                /*
			drawPacker(imgFsRankTabIcon0, subTemp[XPOS], subTemp[YPOS]-6, 0, 0, imgW(imgFsRankTabIcon0), imgH(imgFsRankTabIcon0), VH);
                 */
			break;
		}
		
		xFashionShow.xTouchRankTabSBtn[i].wPos = imgW(imgFsRankTabIcon0);
		xFashionShow.xTouchRankTabSBtn[i].hPos = imgH(imgFsRankTabIcon0);
		xFashionShow.xTouchRankTabSBtn[i].xPos = subTemp[XPOS]-xFashionShow.xTouchRankTabSBtn[i].wPos/2;
		xFashionShow.xTouchRankTabSBtn[i].yPos = subTemp[YPOS]-xFashionShow.xTouchRankTabSBtn[i].hPos/2;
	}
	
	switch(xFashionShow.selectNoticeTab)
	{
	case 0:	//월드보상
		drawPacker(imgFsNoticeBg1, px, py, 0, 0, imgW(imgFsNoticeBg1), imgH(imgFsNoticeBg1), VH);
		for(int i=0;i<12;i++)
		{
			subTemp[XPOS] = px-93+((i/6)*202);
			subTemp[YPOS] = py-95+((i%6)*44);
			drawPacker(imgFsNoticeBg2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsNoticeBg2), imgH(imgFsNoticeBg2), VH);
			gSetColor(175, 150, 123);
			sprintf(strTempS, "%d",xFashionShow.rankGiftLookWorld[i]);
			gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+2, strTempS, VH);

		}
		break;
	case 1:	//친구보상
        /*
		gSetColor(175, 150, 123);
		gDrawString(px, py-6, "패션쇼를 참여한 친구가 10명 이상일 때", VH);
		gDrawString(px-9, py+24, "1위를 달성하면", VR);
		sprintf(strTempS, "%d을 드려요",xFashionShow.rankGiftLookFriend);
		gDrawString(px+25, py+24, strTempS, VL);
		drawPacker(imgFsNoticeBg2, px+10, py+24, 0, 0, imgW(imgFsNoticeBg2), imgH(imgFsNoticeBg2), VH);
        */
		break;
	}
	drawBtn(px, py+205, BTN_OK_CONFIRM);
}

void setStateRunWay()
{
	xFashionShow.state = FASHIONSHOW_STATE_RUNWAY;
	loadImgFreeImgRunWay(TRUE);
	//////////////게임초기화

	for(int i=0;i<RUNWAYMINIGAMEMAX;i++)
	{
		xRunWayMiniGame[i].state = RUNWAYMINIGAME_STATE_DONT;
		xRunWayMiniGame[i].isOk = FALSE;
	}
	
	xRunWay.totalModelBonus = 0;
	

	for(int i=0;i<DROPICONMAX;i++)
		xDropIcon[i].state = DROPICON_STATE_DONT;

	xSpotLight.x[1] = ranDom(0,lcdW);
	xSpotLight.y[1] = ranDom(lcdH-300,lcdH);
	xSpotLight.pointX[1]=xSpotLight.x[1];
	xSpotLight.pointY[1]=xSpotLight.y[1];

	for(int z=0;z<18;z++)
	{
		switch(z)
		{
			case 5:			//앉아
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
				if(ranDom(0, 100) < 30)
				{
					switch(ranDom(0, 2))
					{
						case 0:	xRunWay.actType_Guest[z] = NPC_ACT_RUNWAY_CHAIR_ACTION0;break;
						case 1:	xRunWay.actType_Guest[z] = NPC_ACT_RUNWAY_CHAIR_ACTION1;break;
						case 2:	xRunWay.actType_Guest[z] = NPC_ACT_RUNWAY_CHAIR_ACTION2;break;
					}
				}
				else
					xRunWay.actType_Guest[z] = NPC_ACT_RUNWAY_CHAIR_STOP;
				break;
			default:		//서있는
				xRunWay.actType_Guest[z] = NPC_ACT_STOP;
				break;
		}
		
		xRunWay.nowFrame_Guest[z] = ranDom(0, 18);
		xRunWay.nowDelay_Guest[z] = 0;
		
		int genDer = ranDom(0, 100) < 75?0:1;
		int npcSetSlot = ranDom(0, xNpcSet.totalNum[genDer]-1);
		
		
		for(int k=0;k<16;k++)
			xRunWay.xF_Guest[z].code[k] = DONT;
		
		for(int k=0;k<7;k++)
		{
			if(xNpcSet.code[xNpcSet.slot[genDer][npcSetSlot]][k] != DONT)
			{
				setMapData(xNpcSet.code[xNpcSet.slot[genDer][npcSetSlot]][k]);//xMap.rever,xMap.type,xMap.listNum 구하기
				xRunWay.xF_Guest[z].code[xFashionData[xMap.type][xMap.listNum].layer] = xMap.type*1000+xMap.listNum;
			}
		}
		
		xRunWay.xFace_Guest[z].hairNum = xNpcSet.hairCode[genDer][ranDom(0, xNpcSet.hairTotalNum[genDer]-1)];
		xRunWay.xFace_Guest[z].faceNum = 0;
		xRunWay.xFace_Guest[z].faceType = FACE_TYPE_NORMAL;
		xRunWay.xFace_Guest[z].faceAnyCnt = 0;
		
		sprintf(xRunWay.strNickName_Guest[z], "0");
	}
	
	int index = 0;
	int indexSlot = 0;

	for(int i=0;i<6;i++)
	{
		switch(index)
		{
		case 0:	indexSlot = 5;	break;
		case 1:	indexSlot = 6;	break;
		case 2:	indexSlot = 7;	break;
		case 3:	indexSlot = 8;	break;
		case 4:	indexSlot = 12;	break;
		case 5:	indexSlot = 11;	break;
		case 6:	indexSlot = 10;	break;
		case 7:	indexSlot = 9;	break;
		}
		
		xRunWay.xFace_Guest[indexSlot].hairNum = 2000+i;
		xRunWay.xFace_Guest[indexSlot].faceNum = 2000+i;
		xRunWay.xFace_Guest[indexSlot].faceType = FACE_TYPE_NORMAL;
		xRunWay.xFace_Guest[indexSlot].faceAnyCnt = 0;
		
		for(int k=0;k<16;k++)
			xRunWay.xF_Guest[indexSlot].code[k] = DONT;
				
		setMapData((F_TYPE_ONEPIECE*1000)+17+i);
		xRunWay.xF_Guest[indexSlot].code[xFashionData[xMap.type][xMap.listNum].layer] = (xMap.type*1000)+xMap.listNum;
		setMapData((F_TYPE_SHOES*1000)+40+i);
		xRunWay.xF_Guest[indexSlot].code[xFashionData[xMap.type][xMap.listNum].layer] = (xMap.type*1000)+xMap.listNum;
		sprintf(xRunWay.strNickName_Guest[indexSlot], "%s",xNpc[i].strName);
		index++;
	}
	
	
		
	if(xWinnerModel.totalNum > 0)
	{
		switch(index)
		{
			case 0:	indexSlot = 5;	break;
			case 1:	indexSlot = 6;	break;
			case 2:	indexSlot = 7;	break;
			case 3:	indexSlot = 8;	break;
			case 4:	indexSlot = 12;	break;
			case 5:	indexSlot = 11;	break;
			case 6:	indexSlot = 10;	break;
			case 7:	indexSlot = 9;	break;
		}
		
		xRunWay.xFace_Guest[indexSlot].hairNum = 1000+xWinnerModel.modelNum[0];
		xRunWay.xFace_Guest[indexSlot].faceNum = 1000+xWinnerModel.modelNum[0];
		xRunWay.xFace_Guest[indexSlot].faceType = FACE_TYPE_NORMAL;
		xRunWay.xFace_Guest[indexSlot].faceAnyCnt = 0;
		
		for(int k=0;k<16;k++)
			xRunWay.xF_Guest[indexSlot].code[k] = xWinnerModel.xF[0].code[k];
		
		sprintf(xRunWay.strNickName_Guest[indexSlot], "월드우승자\n(%s)",xFriendData[xWinnerModel.friendDataNum[0]].strNickName);
		index++;
		//심사
	}
	
	if(xWinnerModel.totalNum > 1)
	{
		switch(index)
		{
			case 0:	indexSlot = 5;	break;
			case 1:	indexSlot = 6;	break;
			case 2:	indexSlot = 7;	break;
			case 3:	indexSlot = 8;	break;
			case 4:	indexSlot = 12;	break;
			case 5:	indexSlot = 11;	break;
			case 6:	indexSlot = 10;	break;
			case 7:	indexSlot = 9;	break;
		}
		
		xRunWay.xFace_Guest[indexSlot].hairNum = 1000+xWinnerModel.modelNum[1];
		xRunWay.xFace_Guest[indexSlot].faceNum = 1000+xWinnerModel.modelNum[1];
		xRunWay.xFace_Guest[indexSlot].faceType = FACE_TYPE_NORMAL;
		xRunWay.xFace_Guest[indexSlot].faceAnyCnt = 0;
		
		for(int k=0;k<16;k++)
			xRunWay.xF_Guest[indexSlot].code[k] = xWinnerModel.xF[1].code[k];
		
		sprintf(xRunWay.strNickName_Guest[indexSlot], "추천우승자\n(%s)",xFriendData[xWinnerModel.friendDataNum[1]].strNickName);
		index++;
		//심사
	}
	
	
	
	/*
	 //친구모델
	 for(int i=0;i<xRunWay.totalFriendModel;i++)
	 {
	 switch(index)
	 {
	 case 0:	indexSlot = 5;	break;
	 case 1:	indexSlot = 6;	break;
	 case 2:	indexSlot = 7;	break;
	 case 3:	indexSlot = 8;	break;
	 case 4:	indexSlot = 12;	break;
	 case 5:	indexSlot = 11;	break;
	 case 6:	indexSlot = 10;	break;
	 case 7:	indexSlot = 9;	break;
	 }
	 
	 xRunWay.xFace_Guest[indexSlot].hairNum = 1000+xRunWay.modelCode_Friend[i];
	 xRunWay.xFace_Guest[indexSlot].faceNum = 1000+xRunWay.modelCode_Friend[i];
	 xRunWay.xFace_Guest[indexSlot].faceType = FACE_TYPE_NORMAL;
	 xRunWay.xFace_Guest[indexSlot].faceAnyCnt = 0;
	 
	 for(int k=0;k<16;k++)
	 xRunWay.xF_Guest[indexSlot].code[k] = xRunWay.xF_Friend[i].code[k];
	 
	 sprintf(xRunWay.strNickName_Guest[indexSlot], "%s",xFriendData[xRunWay.friendDataSlot[i]].strNickName);
	 index++;
	 }
	 
	 //내모델
	 int makeModelTotal = 0;
	 int makeModelSlot[100];
	 
	 for(int i=0;i<xModel.totalInventoryModel;i++)
	 {
	 if(xModelData[xInventoryModel[i].code].grade == 3 && xInventoryModel[i].load == 1)
	 {
	 makeModelSlot[makeModelTotal++]=i;
	 }
	 }
	 for(int i=0;i<makeModelTotal;i++)
	 {
	 switch(index)
	 {
	 case 0:	indexSlot = 5;	break;
	 case 1:	indexSlot = 6;	break;
	 case 2:	indexSlot = 7;	break;
	 case 3:	indexSlot = 8;	break;
	 case 4:	indexSlot = 12;	break;
	 case 5:	indexSlot = 11;	break;
	 case 6:	indexSlot = 10;	break;
	 case 7:	indexSlot = 9;	break;
	 }
	 
	 xRunWay.xFace_Guest[indexSlot].hairNum = 1000+xInventoryModel[makeModelSlot[i]].code;
	 xRunWay.xFace_Guest[indexSlot].faceNum = 1000+xInventoryModel[makeModelSlot[i]].code;
	 
	 for(int k=0;k<16;k++)
	 {
	 xRunWay.xF_Guest[indexSlot].code[k] = xInventoryModel[makeModelSlot[i]].xF.code[k];
	 }
	 
	 sprintf(xRunWay.strNickName_Guest[indexSlot], "%s",xModelData[xInventoryModel[makeModelSlot[i]].code].strName);
	 index++;
	 
	 if(index > 7)
	 break;
	 }
	 */
	
	for(int z=0;z<18;z++)
	{
		for(int k=0;k<16;k++)
		{
			if(xRunWay.xF_Guest[z].code[k]/1000 == F_TYPE_BAG)
				xRunWay.xF_Guest[z].code[k] = DONT;
		}
	}
	setFiveRocksCustom("패션쇼","플레이횟수","NULL","NULL",1);
	setFiveRocksCustom("재화","캔디소모","패션쇼","NULL",1);
}

M_Boolean getIsVote(int userNum)
{
	M_Boolean isResult = FALSE;
	if(xVoteList.totalNum >= VOTELISTMAX)
		return TRUE;
		
	for(int i=0;i<xVoteList.totalNum;i++)
	{
		if(xVoteList.userNum[i] == userNum)
			return TRUE;
	}
	return isResult;
}

void addIsVote(int userNum)
{
	M_Boolean isCheck = FALSE;
	for(int i=0;i<xVoteList.totalNum;i++)
	{
		if(xVoteList.userNum[i] == userNum)
		{
			isCheck = TRUE;
			break;
		}
	}	
	if(isCheck == FALSE)
		xVoteList.userNum[xVoteList.totalNum++] = userNum;
	
	if(xVoteList.totalNum >= VOTELISTMAX)
	{
		//전부 막자
		for(int i=0;i<FASHIONSHOWRANKMAX;i++)
		{
			xFashionShow.xRankSlot[0][i].isVote = TRUE;
			xFashionShow.xRankSlot[1][i].isVote = TRUE;
			xFashionShow.xRankSlot[2][i].isVote = TRUE;
		}
	}
}

void loadImgFreeImgRunWay(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_RUNWAY);
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_RUNWAY].img);
		freeImg(&xRunWay.imgBonusIcon[0]);
		freeImg(&xRunWay.imgBonusIcon[1]);
		freeImg(&xRunWay.imgBonusIcon[2]);
		freeImg(&xRunWay.imgBonusIcon[3]);
		
	}
}

void loadImgFreeImgFashionShow(M_Boolean isLoad)
{
	///////////////////패션쇼전용로딩////////////////////
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_FASHIONSHOW);		
	}
	else		//해제
	{

		freeImg(&xPacker[PACKER_STATE_FASHIONSHOW].img);
		loadImgFreeImgRunWay(FALSE);
	}
}




void drawModelShop_FRIEND()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	drawPacker(imgModelFriendBg0, px, py, 0, 0, imgW(imgModelFriendBg0), imgH(imgModelFriendBg0), VH);
		
	subTemp[XPOS] = px-274;
	subTemp[YPOS] = py-10;
	
	
	xGame.fgameScaleCx = subTemp[XPOS];
	xGame.fgameScaleCy = lcdH-(subTemp[YPOS]);
	xGame.fgameScale = 1.3f;
	XFACE xFaceTemp;
	int slotNum = xModel.inventoryNum;
	int code = xInventoryModel_FRIEND[slotNum].code;
	xFaceTemp.hairNum = code+1000;
	xFaceTemp.faceNum = code+1000;
	xFaceTemp.faceType = FACE_TYPE_SMILE;
	drawFittingBody(subTemp[XPOS], subTemp[YPOS],&xInventoryModel_FRIEND[slotNum].xF,&xFaceTemp,TRUE,xModelData[code].sex);
		
	xGame.fgameScaleCx = cx;
	xGame.fgameScaleCy = cy;
	xGame.fgameScale = 1.0f;
		
	
	subTemp[XPOS] = px-245;
	subTemp[YPOS] = py+225;
	switch(xModelData[code].grade)
	{
	case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
	case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
	case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
	case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]-100, subTemp[YPOS], 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
	}
	
	drawModelName(subTemp[XPOS], subTemp[YPOS], code);
	
	for(int k=0;k<xModelData[code].upGradeMax;k++)
	{		
		if(xInventoryModel_FRIEND[slotNum].upGrade > k)
			drawPacker(imgModelLv, subTemp[XPOS]-57+(26*k), subTemp[YPOS]+35, imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
		else
			drawPacker(imgModelLv, subTemp[XPOS]-57+(26*k), subTemp[YPOS]+35, 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
	}
	
	//세부내용
	subTemp[XPOS] = px+125;
	subTemp[YPOS] = py-130;
		

	xModel.xDragScrollFriendShop.totalNum = xModel.totalModelFriendShop;
	xModel.xDragScrollFriendShop.posGab = 158;
	xModel.xDragScrollFriendShop.endPos = -(((xModel.xDragScrollFriendShop.totalNum-3)*xModel.xDragScrollFriendShop.posGab));
	
	if(xModel.xDragScrollFriendShop.totalNum < 3)
		xModel.xDragScrollFriendShop.endPos = 0;
	else
		xModel.xDragScrollFriendShop.endPos -= 57;
	
	int iMax = xModel.xDragScrollFriendShop.totalNum;
	int pos;
	int gx;
	int gy;
	dragScrollPrc(&xModel.xDragScrollFriendShop,1,FALSE);
	
	gSetClip(true,0, py-219, lcdW, 428);
		
	M_Boolean isAllV = TRUE;
	int allVCnt = 0;
	
	
	for(int i=0;i<iMax;i++)
	{
		pos = xModel.xDragScrollFriendShop.pos+(xModel.xDragScrollFriendShop.posGab*i);
				
		int code = xModel.modelFriendShopSlot[i].code;
		setMapData(code);	//xMap.rever,xMap.type,xMap.listNum 구하기
		
		drawPacker(imgProductionMenuSlot0, subTemp[XPOS]-186, subTemp[YPOS]-3+pos, 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
	
		drawFittingF(subTemp[XPOS]-186,subTemp[YPOS]-3+pos,(xMap.type*1000)+xMap.listNum,60);
		
		drawPacker(imgModelFriendBg1, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgModelFriendBg1), imgH(imgModelFriendBg1), VH);
		setFontSize(14);
		gDrawStringBold(subTemp[XPOS]+65, subTemp[YPOS]+pos-33, xFashionData[xMap.type][xMap.listNum].strName, VH,255,255,255,67,29,15);
		setFontSize(11);
		
		gx = subTemp[XPOS]-85;
		gy = subTemp[YPOS]+pos+3;
		
		drawIcon(gx, gy, ICON_TYPE_FAME);
		gSetColor(44, 27, 26);
		sprintf(strTempS, "%d",xFashionData[xMap.type][xMap.listNum].fame.oriData);
		gDrawString(gx+25, gy, strTempS, VL);
		
		
		switch(xFashionData[xMap.type][xMap.listNum].priceType)
		{
		case 0:	drawIcon(gx, gy+32, ICON_TYPE_GOLD);	break;
		case 1:	drawIcon(gx, gy+32, ICON_TYPE_LOOK);	break;
		}
		gSetColor(44, 27, 26);
		sprintf(strTempS, "%d",xFashionData[xMap.type][xMap.listNum].price.oriData);
		gDrawString(gx+25, gy+32, strTempS, VL);
		
				
		gx = subTemp[XPOS]+178;
		gy = subTemp[YPOS]+pos+23;
		
		//구매
		if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == TRUE)
		{
			drawPacker(imgTextHave, gx, gy, 0, 0, imgW(imgTextHave), imgH(imgTextHave), VH);
		}
		else
		{
			drawPacker(imgQuestBtn1, gx, gy, 0, imgH(imgQuestBtn1)/2, imgW(imgQuestBtn1), imgH(imgQuestBtn1)/2, VH);
			
			switch(xFashionData[xMap.type][xMap.listNum].priceType)
			{
			case 0:
			case 1:
				if(xFashionData[xMap.type][xMap.listNum].isStaff == 2)
					gDrawStringBold(gx, gy, "구매불가", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
				else
					gDrawStringBold(gx, gy, "구매하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
				break;
			default:
				gDrawStringBold(gx, gy, "구매불가", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
				break;
			}
			
			
			
			
			
			if(xSaveTemp.lv.oriData < xFashionData[xMap.type][xMap.listNum].lv)
			{
				drawPacker(imgModelFriendBg3, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgModelFriendBg3), imgH(imgModelFriendBg3), VH);
				gSetColor(255, 255, 255);
				sprintf(strTempS, "레벨이 부족합니다(요구레벨:Lv.%d)",xFashionData[xMap.type][xMap.listNum].lv);
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6+pos, strTempS, VH,87,255,221,44,26,27);
			}
			else if(xSaveTemp.fame.oriData < xFashionData[xMap.type][xMap.listNum].fame.oriData)
			{
				drawPacker(imgModelFriendBg3, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgModelFriendBg3), imgH(imgModelFriendBg3), VH);
				gSetColor(255, 255, 255);
				sprintf(strTempS, "명성도가 부족합니다(요구명성도:%dP)",xFashionData[xMap.type][xMap.listNum].fame.oriData);
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6+pos, strTempS, VH,87,255,221,44,26,27);
			}
			else
			{
				gx = subTemp[XPOS]-137;
				gy = subTemp[YPOS]+pos+44;
				
				drawPacker(imgModelFriendBg6, gx, gy, 0, 0, imgW(imgModelFriendBg6), imgH(imgModelFriendBg6), VH);
				if(xModel.modelFriendShopSlot[i].isSelectV == TRUE)
				{
					allVCnt++;
					drawPacker(imgQuestV, gx+5, gy-10, 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
				}
				else
					isAllV = FALSE;
			}
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	xModel.xDragScrollFriendShop.selectNum = (-xModel.xDragScrollFriendShop.pos/xModel.xDragScrollFriendShop.posGab);
	for(int i=0;i<4;i++)
	{
		gx = subTemp[XPOS]-137;
		gy = subTemp[YPOS]+44;
			
		xModel.xTouchV[i].wPos = 80;
		xModel.xTouchV[i].hPos = 80;
		xModel.xTouchV[i].xPos = gx-xModel.xTouchV[i].wPos/2;
		xModel.xTouchV[i].yPos = gy+(xModel.xDragScrollFriendShop.posGab*i)+(xModel.xDragScrollFriendShop.pos%xModel.xDragScrollFriendShop.posGab)-xModel.xTouchV[i].hPos/2;
		
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xModel.xTouchV[i].xPos, xModel.xTouchV[i].yPos, xModel.xTouchV[i].wPos, xModel.xTouchV[i].hPos);
		setAlpha(ALPHA_MAX);
		 */
		
		gx = subTemp[XPOS]+178;
		gy = subTemp[YPOS]+23;
		
		xModel.xTouchBuyBtn[i].wPos = imgW(imgModelFriendBtn0);
		xModel.xTouchBuyBtn[i].hPos = imgH(imgModelFriendBtn0)/2;
		xModel.xTouchBuyBtn[i].xPos = gx-xModel.xTouchBuyBtn[i].wPos/2;
		xModel.xTouchBuyBtn[i].yPos = gy+(xModel.xDragScrollFriendShop.posGab*i)+(xModel.xDragScrollFriendShop.pos%xModel.xDragScrollFriendShop.posGab)-xModel.xTouchBuyBtn[i].hPos/2;

		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xModel.xTouchBuyBtn[i].xPos, xModel.xTouchBuyBtn[i].yPos, xModel.xTouchBuyBtn[i].wPos, xModel.xTouchBuyBtn[i].hPos);
		setAlpha(ALPHA_MAX);
		 */

	}
	
	
		
	subTemp[XPOS] = px+375;
	subTemp[YPOS] = py-240;
	xTouchClr.wPos = 90;
	xTouchClr.hPos = 90;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	 */
	
		
	subTemp[XPOS] = px+305;
	subTemp[YPOS] = py+256;
	
	drawPacker(imgPopupBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "선택구매", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
	
	xTouchOk.wPos = imgW(imgPopupBtn0);
	xTouchOk.hPos = imgH(imgPopupBtn0)/2;
	xTouchOk.xPos = subTemp[XPOS]-xTouchOk.wPos/2;
	xTouchOk.yPos = subTemp[YPOS]-xTouchOk.hPos/2;
	
	
	subTemp[XPOS] = px-119;
	subTemp[YPOS] = py+229;
	xModel.xTouchAllV.wPos = 150;
	xModel.xTouchAllV.hPos = 70;
	xModel.xTouchAllV.xPos = subTemp[XPOS]-xModel.xTouchAllV.wPos/2;
	xModel.xTouchAllV.yPos = subTemp[YPOS]+20-xModel.xTouchAllV.hPos/2;
	
	gSetColor(70, 54, 43);
	setFontSize(14);
	gDrawString(subTemp[XPOS]+20, subTemp[YPOS]+19, "의상 전체 선택", VL);
	setFontSize(11);
	
	if(isAllV == TRUE && allVCnt > 0)
		drawPacker(imgQuestV, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xModel.xTouchAllV.xPos, xModel.xTouchAllV.yPos, xModel.xTouchAllV.wPos, xModel.xTouchAllV.hPos);
	setAlpha(ALPHA_MAX);
	 */
}

void drawModelShopBuyPopup_FRIEND()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	
	
	xStaff.xDragScrollPopupItemSlot.totalNum = xStaff.totalPopupItemSlot;
	xStaff.xDragScrollPopupItemSlot.posGab = 152;
	
	xStaff.xDragScrollPopupItemSlot.endPos = -(((xStaff.xDragScrollPopupItemSlot.totalNum-4)*xStaff.xDragScrollPopupItemSlot.posGab));
	
	
	if(xStaff.xDragScrollPopupItemSlot.totalNum < 4)
		xStaff.xDragScrollPopupItemSlot.endPos = 0;
	else
		xStaff.xDragScrollPopupItemSlot.endPos -= 52;
	
	int iMax = xStaff.xDragScrollPopupItemSlot.totalNum;
	dragScrollPrc(&xStaff.xDragScrollPopupItemSlot,1,FALSE);
	
	int pos;
	subTemp[XPOS] = px-210;
	subTemp[YPOS] = py-80;
	gSetClip(true,px-286-3, 0, 286*2, lcdH);
	for(int i=0;i<iMax;i++)
	{
		pos = xStaff.xDragScrollPopupItemSlot.pos+(xStaff.xDragScrollPopupItemSlot.posGab*i);
		drawPacker(imgMenu10, subTemp[XPOS]+pos, subTemp[YPOS], 0, 0, imgW(imgMenu10), imgH(imgMenu10), VH);
		drawFittingF(subTemp[XPOS]+pos,subTemp[YPOS], xStaff.popupItemSlotCode[i], 70);
	}
	gSetClip(false,0, 0, lcdW, lcdH);
	
	
	
	gSetColor(44, 27, 26);
	setFontSize(14);
	gDrawString(px, py+32, "위 의상들을 구매하시겠습니까?", VH);
	setFontSize(11);
	
	subTemp[YPOS] = py+80;
	drawPacker(imgInfoBar6, px-110, subTemp[YPOS], 0, 0, imgW(imgInfoBar6), imgH(imgInfoBar6), VH);
	drawPacker(imgInfoBar6, px+110, subTemp[YPOS], 0, 0, imgW(imgInfoBar6), imgH(imgInfoBar6), VH);
	drawIcon(px-110-66, subTemp[YPOS], ICON_TYPE_LOOK);
	drawIcon(px+110-66, subTemp[YPOS], ICON_TYPE_GOLD);
	gSetColor(44, 27, 26);
	sprintf(strTempS, "%d",xStaff.sellCash);
	gDrawString(px-110+66+4, subTemp[YPOS], strTempS, VR);
	sprintf(strTempS, "%d",xStaff.sellGold);
	gDrawString(px+110+66+4, subTemp[YPOS], strTempS, VR);
	
	
	drawBtn(px+100, py+157, BTN_OK_CONFIRM);
	drawBtn(px-100, py+157, BTN_CLR_CLEAR);

}




void addKakaoInvite(char *strId)
{
	if(xSaveKakao.totalInvite < SAVE_KAKAOINVITEMAX-1)
	{
		if(checkKakaoInvite(strId) == DONT)
		{
			sprintf(xSaveKakao.strInviteId[xSaveKakao.totalInvite], "%s",strId);
			xSaveKakao.totalInvite++;
			gameSave(SAVE_SLOT_KAKAO);
		}
	}
}

int checkKakaoInvite(char *strId)
{
	for(int i=0;i<xSaveKakao.totalInvite;i++)
	{
		if(strcmp(xSaveKakao.strInviteId[i], strId) == 0)
			return i;
	}
	return DONT;
}

void addKakaoAppInvite(char *strId,M_Boolean isFail)
{
	if(xSaveKakaoApp.totalInvite < SAVE_KAKAOINVITEMAX-1)
	{
		if(checkKakaoAppInvite(strId) == DONT)
		{
			xSaveKakaoApp.isDel[xSaveKakaoApp.totalInvite] = isFail;
			sprintf(xSaveKakaoApp.strInviteId[xSaveKakaoApp.totalInvite], "%s",strId);
			xSaveKakaoApp.totalInvite++;
			gameSave(SAVE_SLOT_KAKAOAPP);
		}
	}
}

int checkKakaoAppInvite(char *strId)
{
	for(int i=0;i<xSaveKakaoApp.totalInvite;i++)
	{
		if(strcmp(xSaveKakaoApp.strInviteId[i], strId) == 0)
		{
			return i;
		}
	}
	return DONT;
}

void prcInShopPer()
{
	
	if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
	{
		int tempPer;
		M_Boolean isTrend = FALSE;
		xInShopPer.inShopPer[INSHOPPER_TYPE_START] = 55;
		xInShopPer.inShopPer[INSHOPPER_TYPE_SELLTABLE] = 0;
			
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			for(int ss=0;ss<SELLTABLEINFOMAX;ss++)
			{
				tempPer = 0;
				if(xSellTableInfo[floor][ss].isUse == TRUE)
				{
					setMapData(xSellTableInfo[floor][ss].interiorCode);
					for(int k=0;k<xObj.xObjData[xMap.type][xMap.listNum].slot;k++)
					{
						if(xSellTableInfo[floor][ss].xSlot[k].code != DONT)
						{
							if(xSellTableInfo[floor][ss].xSlot[k].num > 0)
							{
								tempPer = 1;
															
								for(int tt=0;tt<TRENDMAX;tt++)
								{
									if(xTrend.isOpen[tt] == TRUE)
									{
										if(xTrend.itemCode[tt] == xSellTableInfo[floor][ss].xSlot[k].code)
										{
											isTrend = TRUE;
										}
									}
								}
							}
						}
					}
				}
				xSellTableInfo[floor][ss].inShopPer = tempPer;
				xInShopPer.inShopPer[INSHOPPER_TYPE_SELLTABLE] += tempPer;
			}
		}
			
		
		if(xInShopPer.isInShopPerTemp[INSHOPPER_TYPE_SELLTABLE] == TRUE)
		{
			for(int floor=0;floor<xMap.totalFloor;floor++)
			{
				for(int ss=0;ss<SELLTABLEINFOMAX;ss++)
				{
					setMapData(xSellTableInfo[floor][ss].interiorCode);
					if(xSellTableInfo[floor][ss].inShopPerTemp < xSellTableInfo[floor][ss].inShopPer)
					{
						switch(xMap.type)
						{
						case INTERIOR_TYPE_HANGER:		//옷걸이
							sprintf(strTempS,"%s에 의상이 진열되어 선호도 %d%%증가",xObj.xObjData[xMap.type][xMap.listNum].strName,xSellTableInfo[floor][ss].inShopPer-xSellTableInfo[floor][ss].inShopPerTemp);
							break;
						case INTERIOR_TYPE_ACCESSORY:		//진열대
							sprintf(strTempS,"%s에 잡화가 진열되어 선호도 %d%%증가",xObj.xObjData[xMap.type][xMap.listNum].strName,xSellTableInfo[floor][ss].inShopPer-xSellTableInfo[floor][ss].inShopPerTemp);
							break;
						}
						//setHelpInfoCenter(strTempS);
					}
					else if(xSellTableInfo[floor][ss].inShopPerTemp > xSellTableInfo[floor][ss].inShopPer)
					{
						switch(xMap.type)
						{
						case INTERIOR_TYPE_HANGER:		//옷걸이
							sprintf(strTempS, "%s에 의상이 비어있어 선호도 -%d%%감소",xObj.xObjData[xMap.type][xMap.listNum].strName,xSellTableInfo[floor][ss].inShopPerTemp-xSellTableInfo[floor][ss].inShopPer);
							break;
						case INTERIOR_TYPE_ACCESSORY:		//진열대
							sprintf(strTempS, "%s에 잡화가 비어있어 선호도 -%d%%감소",xObj.xObjData[xMap.type][xMap.listNum].strName,xSellTableInfo[floor][ss].inShopPerTemp-xSellTableInfo[floor][ss].inShopPer);
							break;
						}
						//setHelpInfoCenter(strTempS);
					}
				}
			}
		}
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			for(int ss=0;ss<SELLTABLEINFOMAX;ss++)
			{
				xSellTableInfo[floor][ss].inShopPerTemp = xSellTableInfo[floor][ss].inShopPer;
			}
		}
		xInShopPer.isInShopPerTemp[INSHOPPER_TYPE_SELLTABLE] = TRUE;
		
		
		
		//마네킹 피팅
		xInShopPer.inShopPer[INSHOPPER_TYPE_SHOWWINDOW] = 0;
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			for(int ss=0;ss<xFitting.totalShowWindow[floor];ss++)
			{
								
				
				if(xShowWindowInfo[floor][ss].isFitting == TRUE)
				{
					xInShopPer.inShopPer[INSHOPPER_TYPE_SHOWWINDOW]+=1;
				}
			}
		}
								
		xInShopPer.inShopPer[INSHOPPER_TYPE_FAME] = xSaveTemp.fame.oriData/200;
		if(xInShopPer.inShopPer[INSHOPPER_TYPE_FAME] > 10)
			xInShopPer.inShopPer[INSHOPPER_TYPE_FAME] = 10;
		
		if(xInShopPer.isInShopPerTemp[INSHOPPER_TYPE_FAME] == TRUE)
		{
			if(xInShopPer.inShopPer[INSHOPPER_TYPE_FAME] > xInShopPer.inShopPerTemp[INSHOPPER_TYPE_FAME])
			{
				sprintf(strTempS, "명성도 %d를 달성하여 선호도 %d%%증가",xSaveTemp.fame.oriData,xInShopPer.inShopPer[INSHOPPER_TYPE_FAME] - xInShopPer.inShopPerTemp[INSHOPPER_TYPE_FAME]);
				//setHelpInfoCenter(strTempS);
			}
			else if(xInShopPer.inShopPer[INSHOPPER_TYPE_FAME] < xInShopPer.inShopPerTemp[INSHOPPER_TYPE_FAME])
			{
				sprintf(strTempS, "명성도가 감소하여 선호도 -%d%%감소",xInShopPer.inShopPerTemp[INSHOPPER_TYPE_FAME] - xInShopPer.inShopPer[INSHOPPER_TYPE_FAME]);
				//setHelpInfoCenter(strTempS);
			}
		}
		xInShopPer.isInShopPerTemp[INSHOPPER_TYPE_FAME] = TRUE;
		xInShopPer.inShopPerTemp[INSHOPPER_TYPE_FAME] = xInShopPer.inShopPer[INSHOPPER_TYPE_FAME];
		
		
			
		//모델
		xInShopPer.inShopPer[INSHOPPER_TYPE_MODEL] = 0;
		for(int i=0;i<MODELNPCMAX;i++)
		{
			if(xModelNpc[i].state != MODELNPC_STATE_DONT)
				xInShopPer.inShopPer[INSHOPPER_TYPE_MODEL]+=1;
		}

		
		
		
					
		xInShopPer.inShopPer[INSHOPPER_TYPE_TREND] = 0;
		if(isTrend == TRUE)
		{
			xInShopPer.inShopPer[INSHOPPER_TYPE_TREND] = 10;
		}
		
		if(xInShopPer.isInShopPerTemp[INSHOPPER_TYPE_TREND] == TRUE)
		{
			if(xInShopPer.inShopPer[INSHOPPER_TYPE_TREND] > xInShopPer.inShopPerTemp[INSHOPPER_TYPE_TREND])
			{
				sprintf(strTempS, "유행 중인 상품 진열에 의해 선호도 %d%% 증가",10);
				//setHelpInfoCenter(strTempS);
			}
			else if(xInShopPer.inShopPer[INSHOPPER_TYPE_TREND] < xInShopPer.inShopPerTemp[INSHOPPER_TYPE_TREND])
			{
				sprintf(strTempS, "유행 중인 상품 진열이 없어 선호도 -%d%% 감소",10);
				//setHelpInfoCenter(strTempS);
			}
		}
		xInShopPer.isInShopPerTemp[INSHOPPER_TYPE_TREND] = TRUE;
		xInShopPer.inShopPerTemp[INSHOPPER_TYPE_TREND] = xInShopPer.inShopPer[INSHOPPER_TYPE_TREND];

		
		xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] = 0;
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] += xHairData[xPaymentAssistant[floor].xFace.hairNum].inShopPer;
			xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] += xFaceData[xPaymentAssistant[floor].xFace.faceNum].inShopPer;
			xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] += xHairData[xShopAssistant[floor][0].xFace.hairNum].inShopPer;
			xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] += xFaceData[xShopAssistant[floor][0].xFace.faceNum].inShopPer;
			
			for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
			{
				if(xPaymentAssistant[floor].xF.code[ff] != DONT)
				{
					setMapData(xPaymentAssistant[floor].xF.code[ff]);
					xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] += xFashionData[xMap.type][xMap.listNum].inShopPer;
				}
				
				if(xShopAssistant[floor][0].xF.code[ff] != DONT)
				{
					setMapData(xShopAssistant[floor][0].xF.code[ff]);
					xInShopPer.inShopPer[INSHOPPER_TYPE_STAFF] += xFashionData[xMap.type][xMap.listNum].inShopPer;
				}
			}
		}
			
		int inshoppertotal = 0;
		for(int i=0;i<INSHOPPERMAX;i++)
		{
			inshoppertotal += xInShopPer.inShopPer[i];
		}
		
		if(xBuff.isOpen[BUFF_TYPE_INSHOP] == TRUE)
		{
			inshoppertotal += inshoppertotal*xBuff.bonusPer[BUFF_TYPE_INSHOP]/100;
		}
        
        
        inshoppertotal += xRival.buffSell;
        inshoppertotal += xAmulet.buff[JEWELBUFF_TYPE_INSHOP];
        
        
        
        
		
		if(inshoppertotal > 100)
			inshoppertotal = 100;
		
		
		initSecurity(&xInShopPer.inShopPerTotal, inshoppertotal);
	}
}

void shopNpcErrSpeak(int npcNum)
{
	switch(xShopNpc[npcNum].buyType20)
	{
	case BUY_TYPE20_SEX:
		switch(xShopNpc[npcNum].genDer)
		{
		case 0:
			switch(xShopNpc[npcNum].buySex20)
			{
			case 0:setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야?여자 옷도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
			case 1:setSpeak(&xShopNpc[npcNum].xSpeak, "남친 선물 하려고 했는데,여기선 안되겠네", SPEAKFRAMEMAX);break;
			}
			break;
		case 1:
			switch(xShopNpc[npcNum].buySex20)
			{
			case 0:setSpeak(&xShopNpc[npcNum].xSpeak, "여친 선물 하려고 했는데,살 옷도 없고 그냥 나가자", SPEAKFRAMEMAX);break;
			case 1:setSpeak(&xShopNpc[npcNum].xSpeak, "아니,옷 사러 왔는데 내가 살만한 옷이 없잖아 이거!", SPEAKFRAMEMAX);break;
			}
			break;
		}
		break;
	case BUY_TYPE20_SELLTABLE:
		if(ranDom(0, 1) == 0)
		{
			switch(xShopNpc[npcNum].buyFtype)
			{
			case F_TYPE_SHOES:	setSpeak(&xShopNpc[npcNum].xSpeak, "신발이 없네?꼭 필요한건데..", SPEAKFRAMEMAX);break;
			case F_TYPE_BAG:	setSpeak(&xShopNpc[npcNum].xSpeak, "가방이 없네?꼭 필요한건데..", SPEAKFRAMEMAX);break;
			case F_TYPE_ACCECSSORY:	setSpeak(&xShopNpc[npcNum].xSpeak, "악세사리가 없네?꼭 필요한건데..", SPEAKFRAMEMAX);break;
			case F_TYPE_OUTER:	setSpeak(&xShopNpc[npcNum].xSpeak, "아우터가 없네?꼭 필요한건데..", SPEAKFRAMEMAX);break;
			case F_TYPE_TOP:	setSpeak(&xShopNpc[npcNum].xSpeak, "상의가 없네?꼭 필요한건데..", SPEAKFRAMEMAX);break;
			case F_TYPE_BOTTOM:	setSpeak(&xShopNpc[npcNum].xSpeak, "하의가 없네?꼭 필요한건데..", SPEAKFRAMEMAX);break;
			case F_TYPE_ONEPIECE:setSpeak(&xShopNpc[npcNum].xSpeak, "원피스가 없네?꼭 필요한건데..", SPEAKFRAMEMAX);break;
			}
		}
		else
		{
			switch(xShopNpc[npcNum].buyFtype)
			{
				case F_TYPE_SHOES:	setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야,신발도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
				case F_TYPE_BAG:	setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야,가방도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
				case F_TYPE_ACCECSSORY:	setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야,악세사리도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
				case F_TYPE_OUTER:	setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야,아우터도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
				case F_TYPE_TOP:	setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야,상의도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
				case F_TYPE_BOTTOM:	setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야,하의도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
				case F_TYPE_ONEPIECE:setSpeak(&xShopNpc[npcNum].xSpeak, "뭐야,원피스도 안파는 가게가 다 있네?", SPEAKFRAMEMAX);break;
			}
		}
		break;
	case BUY_TYPE20_TREND:
		setSpeak(&xShopNpc[npcNum].xSpeak, "여기 유행상품 안파나요?", SPEAKFRAMEMAX);
		break;
	case BUY_TYPE20_RANDOM:
		setSpeak(&xShopNpc[npcNum].xSpeak, "살 물건이 아무것도 없네?", SPEAKFRAMEMAX);
		break;
	case BUY_TYPE20_FITTING:
		switch(ranDom(0, 1))
		{
		case 0:	setSpeak(&xShopNpc[npcNum].xSpeak, "난 항상 마네킹에 진열 된 옷만 보고 사는데...", SPEAKFRAMEMAX);	break;
		case 1:	setSpeak(&xShopNpc[npcNum].xSpeak, "여긴 샵 관리도 안하나?마네킹이 옷을 안입고 있잖아?", SPEAKFRAMEMAX);	break;
		}
		break;
	}
}


void loadFashionFImgWorldMap(int type, int listNum)
{
	M_Boolean isCheck;
	//이미지로딩여부파악
	//이미지가 존재하지 않는다면
	//로딩하지 않았다면 로딩과정을 거친다
	if(isImgFLayer[type][listNum] == FALSE)
	{
		isImgFLayer[type][listNum] = TRUE;
		//카테고리_아이템코드_레이어 번호
		//b_<<<뒷모습
		for(int f=0;f<FASHIONDATALAYERMAX;f++)
		{
			isCheck = FALSE;
			if(xFashionData[type][listNum].isImg[0][f] != 0)
				isCheck = TRUE;
			//앞모습
			if(isCheck == TRUE)
			{
				sprintf(strTempS, "%d_%d_%d.png",type,listNum,f);
				loadImgDocuments(strTempS, &imgFLayer[type][listNum][f][ACT_FRONT]);
							
				if(type == F_TYPE_BAG)
				{
					sprintf(strTempS, "%d_%d_%db.png",type,listNum,f);
					loadImgDocuments(strTempS, &imgFLayerSub[type][listNum][f][ACT_FRONT]);
				}
			}
			
			isCheck = FALSE;
			if(xFashionData[type][listNum].isImg[1][f] != 0)
				isCheck = TRUE;
			if(isCheck == TRUE)
			{
				//뒤
				sprintf(strTempS, "b_%d_%d_%d.png",type,listNum,f);
				loadImgDocuments(strTempS, &imgFLayer[type][listNum][f][ACT_BACK]);
			}
		}
	}
}

void setNpcHair_FP(XSPRIT *xSprit, int hairNum, int pos)
{
	//헤어셋팅
	int type, code, layer;
	int num1 = 0;
	int num2 = 0;
	type = hairNum/1000;
	code = hairNum%1000;
	layer = xHairMakeUp.xData[type][code].layerNum;
	
	if(isImgHair_FP[code] == FALSE)
	{
		isImgHair_FP[code] = TRUE;
		for(int k=0; k < 15; k++)
		{
			if(xLayer.xData[layer].xData[0][k] != -1)
			{
				sprintf(strTempS, "hair_%d_%d_w.png", code, xLayer.xData[layer].xData[0][k]);
				loadImgDocuments(strTempS, &imgHair_FP[code][ACT_FRONT][num1]);
				num1++;
			}
			
			if(xLayer.xData[layer].xData[1][k] != -1)
			{
				sprintf(strTempS, "b_hair_%d_%d_w.png", code, xLayer.xData[layer].xData[1][k]);
				loadImgDocuments(strTempS, &imgHair_FP[code][ACT_BACK][num2]);
				num2++;
			}
		}
	}
	
	if(pos == ACT_FRONT)
	{
		xSprit->imgLayer[xLayer.xData[layer].xData[pos][0]][pos] = &imgHair_FP[code][pos][0];
		xSprit->imgLayer[xLayer.xData[layer].xData[pos][1]][pos] = &imgHair_FP[code][pos][1];
	}
	else
	{
		xSprit->imgLayer[xLayer.xData[layer].xData[pos][0]][pos] = &imgHair_FP[code][pos][0];
	}
}


void setNpcFace_FP(XSPRIT *xSprit, int faceNum, int pos)
{
	//얼굴셋팅
	int type, code, layer;
	type = faceNum/1000;
	code = faceNum%1000;
	layer = xHairMakeUp.xData[type][code].layerNum;
	
	if(pos == ACT_BACK)
		return;
	
	if(isImgFace_FP[code] == FALSE)
	{
		isImgFace_FP[code] = TRUE;
		sprintf(strTempS, "face_%d_11_w.png", code);
		loadImgDocuments(strTempS, &imgFace_FP[code]);
	}
	xSprit->imgLayer[xLayer.xData[layer].xData[pos][0]][pos] = &imgFace_FP[code];
}
//회원 가입시 머리 이미지 세팅

void setNpcHairBig_FP(XSPRIT *xSprit, int hairNum, int pos)
{
    //헤어셋팅
    int type, code, layer;
    int num1 = 0;
    int num2 = 0;
    
    type = hairNum/1000;
    code = hairNum%1000;
    layer = xHairMakeUp.xData[type][code].layerNum;
    
    if(isImgHairBig_FP[code] == FALSE)
    {
        isImgHairBig_FP[code] = TRUE;
        for(int k=0; k < 15; k++)
        {
            if(xLayer.xData[layer].xData[0][k] != -1)
            {
                sprintf(strTempS, "hair_%d_%d.png", code, xLayer.xData[layer].xData[0][k]);
                loadImgDocuments(strTempS, &imgHairBig_FP[code][ACT_FRONT][num1]);
                num1++;
            }
            
            if(xLayer.xData[layer].xData[1][k] != -1)
            {
                sprintf(strTempS, "b_hair_%d_%d.png", code, xLayer.xData[layer].xData[1][k]);
                loadImgDocuments(strTempS, &imgHairBig_FP[code][ACT_BACK][num2]);
                num2++;
            }
        }
    }
    
    if(pos == ACT_FRONT)
    {
        xSprit->imgLayer[xLayer.xData[layer].xData[pos][0]][pos] = &imgHairBig_FP[code][pos][0];
        xSprit->imgLayer[xLayer.xData[layer].xData[pos][1]][pos] = &imgHairBig_FP[code][pos][1];
    }
    else
    {
        xSprit->imgLayer[xLayer.xData[layer].xData[pos][0]][pos] = &imgHairBig_FP[code][pos][0];
    }
}

//회원가입시 얼굴 세팅
void setNpcFaceBig_FP(XSPRIT *xSprit, int faceNum, int pos)
{
    //얼굴셋팅
    int type, code, layer;
    type = faceNum/1000;
    code = faceNum%1000;
    layer = xHairMakeUp.xData[type][code].layerNum;
    
    if(pos == ACT_BACK)
        return;
    
    if(isImgFaceBig_FP[code] == FALSE)
    {
        isImgFaceBig_FP[code] = TRUE;
        sprintf(strTempS, "face_%d_11.png", code);
        loadImgDocuments(strTempS, &imgFaceBig_FP[code]);
    }
    xSprit->imgLayer[xLayer.xData[layer].xData[pos][0]][pos] = &imgFaceBig_FP[code];
}

void setNpcBody_FP(XSPRIT *xSprit, int pos)
{
	//의상 레이어에 마네킹 넣기
	if(pos == ACT_FRONT)
	{
		xSprit->imgLayer[30][ACT_FRONT] = &imgActBody[0][ACT_FRONT];
		xSprit->imgLayer[29][ACT_FRONT] = &imgActBody[1][ACT_FRONT];
		xSprit->imgLayer[26][ACT_FRONT] = &imgActBody[2][ACT_FRONT];
		xSprit->imgLayer[25][ACT_FRONT] = &imgActBody[3][ACT_FRONT];
		xSprit->imgLayer[24][ACT_FRONT] = &imgActBody[4][ACT_FRONT];
		xSprit->imgLayer[23][ACT_FRONT] = &imgActBody[5][ACT_FRONT];
		xSprit->imgLayer[16][ACT_FRONT] = &imgActBody[6][ACT_FRONT];
		xSprit->imgLayer[15][ACT_FRONT] = &imgActBody[7][ACT_FRONT];
		xSprit->imgLayer[12][ACT_FRONT] = &imgActBody[8][ACT_FRONT];
		xSprit->imgLayer[8][ACT_FRONT] = &imgActBody[9][ACT_FRONT];
		xSprit->imgLayer[7][ACT_FRONT] = &imgActBody[10][ACT_FRONT];
	}
	else
	{
		xSprit->imgLayer[32][ACT_BACK] = &imgActBody[0][ACT_BACK];
		xSprit->imgLayer[31][ACT_BACK] = &imgActBody[1][ACT_BACK];
		xSprit->imgLayer[28][ACT_BACK] = &imgActBody[3][ACT_BACK];
		xSprit->imgLayer[27][ACT_BACK] = &imgActBody[2][ACT_BACK];
		xSprit->imgLayer[26][ACT_BACK] = &imgActBody[5][ACT_BACK];
		xSprit->imgLayer[25][ACT_BACK] = &imgActBody[4][ACT_BACK];
		xSprit->imgLayer[18][ACT_BACK] = &imgActBody[7][ACT_BACK];
		xSprit->imgLayer[17][ACT_BACK] = &imgActBody[8][ACT_BACK];
		xSprit->imgLayer[14][ACT_BACK] = &imgActBody[6][ACT_BACK];
		xSprit->imgLayer[11][ACT_BACK] = &imgActBody[9][ACT_BACK];
		xSprit->imgLayer[10][ACT_BACK] = &imgActBody[10][ACT_BACK];
	}
}

void setNpcBodyBig_FP(XSPRIT *xSprit, int pos)
{
	//의상 레이어에 마네킹 넣기
	if(pos == ACT_FRONT)
	{
		xSprit->imgLayer[30][ACT_FRONT] = &imgActBodySub[0][ACT_FRONT];
		xSprit->imgLayer[29][ACT_FRONT] = &imgActBodySub[1][ACT_FRONT];
		xSprit->imgLayer[26][ACT_FRONT] = &imgActBodySub[2][ACT_FRONT];
		xSprit->imgLayer[25][ACT_FRONT] = &imgActBodySub[3][ACT_FRONT];
		xSprit->imgLayer[24][ACT_FRONT] = &imgActBodySub[4][ACT_FRONT];
		xSprit->imgLayer[23][ACT_FRONT] = &imgActBodySub[5][ACT_FRONT];
		xSprit->imgLayer[16][ACT_FRONT] = &imgActBodySub[6][ACT_FRONT];
		xSprit->imgLayer[15][ACT_FRONT] = &imgActBodySub[7][ACT_FRONT];
		xSprit->imgLayer[12][ACT_FRONT] = &imgActBodySub[8][ACT_FRONT];
		xSprit->imgLayer[8][ACT_FRONT] = &imgActBodySub[9][ACT_FRONT];
		xSprit->imgLayer[7][ACT_FRONT] = &imgActBodySub[10][ACT_FRONT];
	}
	else
	{
		xSprit->imgLayer[32][ACT_BACK] = &imgActBodySub[0][ACT_BACK];
		xSprit->imgLayer[31][ACT_BACK] = &imgActBodySub[1][ACT_BACK];
		xSprit->imgLayer[28][ACT_BACK] = &imgActBodySub[3][ACT_BACK];
		xSprit->imgLayer[27][ACT_BACK] = &imgActBodySub[2][ACT_BACK];
		xSprit->imgLayer[26][ACT_BACK] = &imgActBodySub[5][ACT_BACK];
		xSprit->imgLayer[25][ACT_BACK] = &imgActBodySub[4][ACT_BACK];
		xSprit->imgLayer[18][ACT_BACK] = &imgActBodySub[7][ACT_BACK];
		xSprit->imgLayer[17][ACT_BACK] = &imgActBodySub[8][ACT_BACK];
		xSprit->imgLayer[14][ACT_BACK] = &imgActBodySub[6][ACT_BACK];
		xSprit->imgLayer[11][ACT_BACK] = &imgActBodySub[9][ACT_BACK];
		xSprit->imgLayer[10][ACT_BACK] = &imgActBodySub[10][ACT_BACK];
	}
}

void setSpritF_FP(XSPRIT *xSprit,XFITTINGLAYER *xF,int pos)
{
	int type;
	int listNum;
	
	for(int fc=0;fc<SPRIT_IMGLAYERMAX;fc++)
	{
		if(xF->code[fc] == DONT)
		{
			
		}
		else
		{
			type = xF->code[fc]/1000;
			listNum = xF->code[fc]%1000;
			
			//의상이미지 로딩
			loadFashionFImgWorldMap_FP(xSprit, xF->code[fc], pos);
		}
	}
}

void setSpritFBig_FP(XSPRIT *xSprit,XFITTINGLAYER *xF,int pos)
{
	int type;
	int listNum;
	
	for(int fc=0;fc<SPRIT_IMGLAYERMAX;fc++)
	{
		if(xF->code[fc] == DONT)
		{
			
		}
		else
		{
			type = xF->code[fc]/1000;
			listNum = xF->code[fc]%1000;
			
			//의상이미지 로딩
			loadFashionFImgWorldMapBig_FP(xSprit, xF->code[fc], pos);
		}
	}
}

void loadFashionFImgWorldMap_FP(XSPRIT *xSprit, int code, int pos)
{
	M_Boolean isCheck;
	int type = code/1000;
	int listNum = code%1000;
	int layer = xFashionList_FP.xSlot[type][listNum].layer;
	//이미지로딩여부파악
	//이미지가 존재하지 않는다면
	//로딩하지 않았다면 로딩과정을 거친다
	if(isImgFLayer_FP[type][listNum] == FALSE)
	{
		isImgFLayer_FP[type][listNum] = TRUE;
		//카테고리_아이템코드_레이어 번호
		//b_<<<뒷모습
		for(int f=0;f<LAYERDATAMAX;f++)
		{
			if(xLayer.xData[layer].xData[pos][f] != -1)
			{
				sprintf(strTempS, "%d_%d_w.png",code,xLayer.xData[layer].xData[ACT_FRONT][f]);
				loadImgDocuments(strTempS, &ImgFLayer_FP[type][listNum][f][ACT_FRONT]);
				
				sprintf(strTempS, "b_%d_%d_w.png",code,xLayer.xData[layer].xData[ACT_BACK][f]);
				loadImgDocuments(strTempS, &ImgFLayer_FP[type][listNum][f][ACT_BACK]);
			}
		}
	}
	
	for(int f=0;f<LAYERDATAMAX;f++)
	{
		if(ImgFLayer_FP[type][listNum][f][pos].image != NULL)
		{
			xSprit->imgLayer[xLayer.xData[layer].xData[pos][f]][pos] = &ImgFLayer_FP[type][listNum][f][pos];
		}
	}
}

void loadFashionFImgWorldMapBig_FP(XSPRIT *xSprit, int code, int pos)
{
	M_Boolean isCheck;
	int type = code/1000;
	int listNum = code%1000;
	int layer = xFashionList_FP.xSlot[type][listNum].layer;
	//이미지로딩여부파악
	//이미지가 존재하지 않는다면
	//로딩하지 않았다면 로딩과정을 거친다
	if(isImgFLayerBig_FP[type][listNum] == FALSE)
	{
		isImgFLayerBig_FP[type][listNum] = TRUE;
		//카테고리_아이템코드_레이어 번호
		//b_<<<뒷모습
		for(int f=0;f<LAYERDATAMAX;f++)
		{
			if(xLayer.xData[layer].xData[pos][f] != -1)
			{
				sprintf(strTempS, "%d_%d.png",code,xLayer.xData[layer].xData[ACT_FRONT][f]);
				loadImgDocuments(strTempS, &ImgFLayerBig_FP[type][listNum][f][ACT_FRONT]);
				
				sprintf(strTempS, "b_%d_%d.png",code,xLayer.xData[layer].xData[ACT_BACK][f]);
				loadImgDocuments(strTempS, &ImgFLayerBig_FP[type][listNum][f][ACT_BACK]);
			}
		}
	}
	
	for(int f=0;f<LAYERDATAMAX;f++)
	{
		if(ImgFLayerBig_FP[type][listNum][f][pos].image != NULL)
		{
			xSprit->imgLayer[xLayer.xData[layer].xData[pos][f]][pos] = &ImgFLayerBig_FP[type][listNum][f][pos];
		}
	}
}

void freeFashionFLayerBig_FP()
{
	for(int imgType=0;imgType<FASHIONDATATYPEMAX;imgType++)
	{
		for(int imgList=0;imgList<FASHIONDATAMAX;imgList++)
		{
			if(isImgFLayer[imgType][imgList] == TRUE)
			{
				isImgFLayer[imgType][imgList] = FALSE;
				for(int f=0;f<FASHIONDATALAYERMAX;f++)
				{
					//앞
					freeImg(&imgFLayer[imgType][imgList][f][ACT_FRONT]);
					freeImg(&imgFLayerSub[imgType][imgList][f][ACT_FRONT]);
					//뒤
					freeImg(&imgFLayer[imgType][imgList][f][ACT_BACK]);
				}
			}
		}
	}
}

void loadFashionFImg_FP(int imgType,int imgList)
{
    sprintf(strTempS, "pdress%d_%d.png", imgType, imgList);
    loadImgDocuments(strTempS, &imgFittingF_FP[imgType][imgList]);
}

void loadFashionFImg(int imgType,int imgList)
{
	//이미지존재여부 검사해서 없으면 로딩해주기
	if(isImgFittingF[imgType][imgList] == FALSE)
	{
		if(xloadImg.isLoadFittingF == TRUE)
		{
			xGame.isReSizeDraw = FALSE;
			return;
		}
		else
		{
			
			xloadImg.isLoadFittingF = TRUE;
			isImgFittingF[imgType][imgList] = TRUE;
			
			if(xFashionData[imgType][imgList].isImgF[1] != 0)
			{
				sprintf(strTempS, "f%d_%d_1.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,1,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_1_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,1,xFashionData[imgType][imgList].layer));
			}
			if(xFashionData[imgType][imgList].isImgF[3] != 0)
			{
				sprintf(strTempS, "f%d_%d_3.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,3,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_3_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,3,xFashionData[imgType][imgList].layer));
				if(imgType == F_TYPE_BAG)
				{
					sprintf(strTempS, "f%d_%d_3b.png",imgType,imgList);
					loadImgDocuments(strTempS, &imgFittingFBackPack[imgList]);
				}
			}
			if(xFashionData[imgType][imgList].isImgF[5] != 0)
			{
				sprintf(strTempS, "f%d_%d_5.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,5,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_5_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,5,xFashionData[imgType][imgList].layer));
			}
			if(xFashionData[imgType][imgList].isImgF[6] != 0)
			{
				sprintf(strTempS, "f%d_%d_6.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,6,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_6_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,6,xFashionData[imgType][imgList].layer));
			}
			if(xFashionData[imgType][imgList].isImgF[11] != 0)
			{
				sprintf(strTempS, "f%d_%d_11.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,11,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_11_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,11,xFashionData[imgType][imgList].layer));
			}
			if(xFashionData[imgType][imgList].isImgF[12] != 0)
			{
				sprintf(strTempS, "f%d_%d_12.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,12,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_12_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,12,xFashionData[imgType][imgList].layer));
			}
			if(xFashionData[imgType][imgList].isImgF[13] != 0)
			{
				sprintf(strTempS, "f%d_%d_13.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,13,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_13_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,13,xFashionData[imgType][imgList].layer));
			}
			if(xFashionData[imgType][imgList].isImgF[17] != 0)
			{
				sprintf(strTempS, "f%d_%d_17.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingF(imgType,imgList,17,xFashionData[imgType][imgList].layer));
				sprintf(strTempS, "f%d_%d_17_z.png",imgType,imgList);
				loadImgDocuments(strTempS, getImgFittingFInOut(imgType,imgList,17,xFashionData[imgType][imgList].layer));
			}
			
			sprintf(strTempS,"%d_%d.png", imgType,imgList);
			loadImgDocuments(strTempS, &imgFittingItem[imgType][imgList]);
			if(imgFittingItem[imgType][imgList].texture == NULL)
			{
				///////////imgType
				switch(imgType)
				{
					case F_TYPE_OUTER:
					case F_TYPE_TOP:
					case F_TYPE_BOTTOM:
					case F_TYPE_ONEPIECE:
						sprintf(strTempS,"fffff0.png");
						break;
					default:
						sprintf(strTempS,"fffff1.png");
						break;
				}
				loadImg(strTempS, &imgFittingItem[imgType][imgList]);
			}
		}
	}
}

void loadModelShopNpcImg(int slotNum)
{
	if(xWorldMap.isFriendMap == FALSE)
	{
		if(xModelMainSlot[slotNum].state == MODELMAINSLOT_STATE_WAIT || xModelMainSlot[slotNum].state == MODELMAINSLOT_STATE_PLAY)
		{
			xModelMainSlot[slotNum].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[slotNum].modelKey);
			setSpritF(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xInventoryModel[xModelMainSlot[slotNum].inventoryNum].xF,ACT_FRONT);
		}
	}
}

void makeModelShopNpc()
{
	for(int i=0;i<MODELNPCMAX;i++)
		xModelNpc[i].state = MODELNPC_STATE_DONT;
	
	for(int i=0;i<xModel.totalInventoryModel;i++)
	{
		xInventoryModel[i].isMapShow = FALSE;
	}
		
	for(int i=0;i<MODELNPCMAX;i++)
	{
		if(xModelNpc[i].state != MODELNPC_STATE_DONT)
		{
			xInventoryModel[xModelNpc[i].invenNum].isMapShow = TRUE;
		}
	}
	
	int showModelTotal = 0;
	int makeModelTotal = 0;
	int makeModelSlot[100];
	if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
	{
		for(int i=0;i<xModel.totalInventoryModel;i++)
		{
			if(xInventoryModel[i].isMapShow == TRUE)
			{
				showModelTotal++;
			}
			else if(getModelMainSlot(xInventoryModel[i].key) != DONT && checkXfLimit(&xInventoryModel[i].xF) == TRUE)
			{
				makeModelSlot[makeModelTotal++] = i;
			}
		}
	}
			

	int floorTemp=0;
	
	int codeTeamTemp = xInterior.xBuildSlot.codeTeam[0];
	
	for(int i=0;i<makeModelTotal;i++)
	{
		xModelNpc[i].state = MODELNPC_STATE_WAIT;
		xModelNpc[i].nowDelay = 0;
		xModelNpc[i].nowFrame = 0;
		xModelNpc[i].anyCnt = 999;
		xModelNpc[i].floor = ranDom(0, xMap.totalFloor-1);;
		xModelNpc[i].floorTarget = xModelNpc[i].floor;
						
		
		xModelNpc[i].invenNum = makeModelSlot[i];
		xModelNpc[i].mainSlotNum = getModelMainSlot(xInventoryModel[xModelNpc[i].invenNum].key);
		
		int whileCnt = 0;
		M_Boolean isCheck = FALSE;
		
		
		floorTemp = xMap.nowFloor;
		xInterior.xBuildSlot.codeTeam[0] = INTERIOR_TYPE_OBJ*1000;
		xMap.nowFloor = xModelNpc[i].floor;
		checkBuildMapData();
		xMap.nowFloor = floorTemp;
		
		
		while(TRUE)
		{
			xModelNpc[i].makeX = ranDom(0, xMap.shopPointW-2);
			xModelNpc[i].makeY = ranDom(0, xMap.shopPointH-2);
			
			if(xMap.interiorData[xModelNpc[i].floor][xModelNpc[i].makeX][xModelNpc[i].makeY] == FALSE)
			{
				isCheck = TRUE;
				xModelNpc[i].makeX += xMap.shopPointX;
				xModelNpc[i].makeY += xMap.shopPointY;
				break;
			}
			
			if(++whileCnt > 100)
			{
				break;
			}
		}
		
		if(isCheck == FALSE)
		{
			if(xPayMentInfo[xModelNpc[i].floor].codeNum >= 0)
			{
				xModelNpc[i].makeX = xPayMentInfo[xModelNpc[i].floor].x-1;
				xModelNpc[i].makeY = xPayMentInfo[xModelNpc[i].floor].y;
			}
			else
			{
				xModelNpc[i].makeX = xPayMentInfo[xModelNpc[i].floor].x;
				xModelNpc[i].makeY = xPayMentInfo[xModelNpc[i].floor].y-1;
			}
		}
				
		xModelNpc[i].actLook = MOVETYPE_YPLUS;
		xModelNpc[i].x = xModelNpc[i].makeX;
		xModelNpc[i].y = xModelNpc[i].makeY;
		xModelNpc[i].drawX = 0;
		xModelNpc[i].drawY = 0;
		xModelNpc[i].speed = xMap.speedTable[3];
	}
	
	xInterior.xBuildSlot.codeTeam[0] = codeTeamTemp;
	
}

void setModelNpcSpeakWelCome(int floor,M_Boolean isIn)
{
	for(int i=0;i<MODELNPCMAX;i++)
	{
		if(xModelNpc[i].state != MODELNPC_STATE_DONT)
		{
			if(xModelNpc[i].floor == floor && xModelNpc[i].xSpeak.state == SPEAK_STATE_DONT)
			{
				if(isIn == TRUE)
				{
					sprintf(strTempS, "어서 오세요!");
					setSpeak(&xModelNpc[i].xSpeak, strTempS, SPEAKFRAMEMAX);
				}
				else
				{
					sprintf(strTempS, "안녕히 가세요.");
					setSpeak(&xModelNpc[i].xSpeak, strTempS, SPEAKFRAMEMAX);
				}
			}
			break;
		}
	}
}

//void prcModelShopNpc()
//{
//		
//	
//	for(int i=0;i<MODELSKILLMAX;i++)
//		xModelSkill.bonusPer[i] = 0;
//	
//	int modelCode = 0;
//	for(int i=0;i<xModel.totalInventoryModel;i++)
//	{
//		
//		if(getModelMainSlot(xInventoryModel[i].key) != DONT && checkXfLimit(&xInventoryModel[i].xF) == TRUE)
//		{
//			modelCode = xInventoryModel[i].code;
//			
//			for(int mm=0;mm<xModelData[modelCode].totalSkillNum;mm++)
//			{
//				switch(xModelData[modelCode].skillType[mm])
//				{
//				case MODELSKILL_TYPE_SELLMONEY_FLOOR1:
//				case MODELSKILL_TYPE_SELLEXP_FLOOR1:
//				case MODELSKILL_TYPE_SELLMONEY_FLOOR2:
//				case MODELSKILL_TYPE_SELLEXP_FLOOR2:
//				case MODELSKILL_TYPE_TREND_TIME:
//				case MODELSKILL_TYPE_TREND_PER:
//				case MODELSKILL_TYPE_FAME:
//				case MODELSKILL_TYPE_CHAIR_COFFEE:
//				case MODELSKILL_TYPE_CHAIR_PHONE:
//				case MODELSKILL_TYPE_CHAIR_IPAD:
//				case MODELSKILL_TYPE_CHAIR_BOOK:
//				case MODELSKILL_TYPE_SEX_MAN:
//				case MODELSKILL_TYPE_SEX_WOMAN:
//				case MODELSKILL_TYPE_SEX_PORTER:
//				case MODELSKILL_TYPE_SEX_PORTER_MM:
//				case MODELSKILL_TYPE_SEX_PORTER_WW:
//				case MODELSKILL_TYPE_HELPCOUNT:
//				case MODELSKILL_TYPE_MODELVOTE:
//				case MODELSKILL_TYPE_ORDER_MONEY:
//				case MODELSKILL_TYPE_ORDER_RECV:
//				case MODELSKILL_RUNWAY_GOLD:
//				case MODELSKILL_RUNWAY_EXP:
//				case MODELSKILL_TYPE_ORDER_SELECTITEM:
//					//누적형태
//					xModelSkill.bonusPer[xModelData[modelCode].skillType[mm]] += xModelData[modelCode].skillPer[mm];
//					break;
//				default:
//					//중첩금지(가장 큰값으로 처리)
//					if(xModelSkill.bonusPer[xModelData[modelCode].skillType[mm]] < xModelData[modelCode].skillPer[mm])
//						xModelSkill.bonusPer[xModelData[modelCode].skillType[mm]] = xModelData[modelCode].skillPer[mm];
//					break;
//				}
//			}
//		}
//	}
//	
//	
//	xModelSkill.totalWorldMapUiSlot = 0;
//	for(int i=0;i<MODELSKILLMAX;i++)
//	{
//		if(xModelSkill.bonusPer[i] > 0)
//		{
//			switch(i)
//			{
//			case 20:
//			case 21:
//			case 22:
//				//친구샵
//				if(xWorldMap.isFriendMap == TRUE)
//					xModelSkill.slotWorldMapUiSlot[xModelSkill.totalWorldMapUiSlot++] = i;
//				break;
//			case 26:
//			case 27:
//			case 28:
//			case 29:
//			case 30:
//			case 31:
//			case 32:
//			case 33:
//			case 34:
//			case 35:
//			case 36:
//			case 37:
//			case 38:
//			case 39:
//			case 40:
//			case 41:
//			case 42:
//			case 43:
//			case 44:
//			case 45:
//			case 46:
//			case 47:
//			case 48:
//			case 49:
//			case 50:
//				//패션쇼
//				break;
//			case 6:
//			case 7:
//				//내샵이지만 안보여줌
//				break;
//			default:
//				//내샵
//				if(xWorldMap.isFriendMap == FALSE)
//					xModelSkill.slotWorldMapUiSlot[xModelSkill.totalWorldMapUiSlot++] = i;
//				break;
//			}
//		}
//	}
//	
//	int endX;
//	int endY;
//	for(int i=0;i<MODELNPCMAX;i++)
//	{
//		if(xModelNpc[i].state != MODELNPC_STATE_DONT)
//		{
//			++xModelNpc[i].interiorInfoCnt;
//			
//			switch(xModelNpc[i].state)
//			{
//			case MODELNPC_STATE_WAIT:
//				switch(xModelNpc[i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_YPLUS:
//					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_FRONT],&xModelNpc[i].nowDelay,&xModelNpc[i].nowFrame);
//					break;
//				case MOVETYPE_XMINUS:
//				case MOVETYPE_YMINUS:
//					prcSprit(&xSpritNpc[NPC_ACT_STOP][ACT_BACK],&xModelNpc[i].nowDelay,&xModelNpc[i].nowFrame);
//					break;
//				}
//															
//				if(xModelNpc[i].x < xMap.shopPointX
//				   ||xModelNpc[i].y < xMap.shopPointY
//				   ||xModelNpc[i].x > xMap.shopPointX+xMap.shopPointW-1
//				   ||xModelNpc[i].y > xMap.shopPointY+xMap.shopPointH-1)
//				{
//					xModelNpc[i].state = MODELNPC_STATE_WAIT;
//					xModelNpc[i].nowDelay = 0;
//					xModelNpc[i].nowFrame = 0;
//					xModelNpc[i].anyCnt = 999;
//					
//					if(xPayMentInfo[xModelNpc[i].floor].codeNum >= 0)
//					{
//						xModelNpc[i].makeX = xPayMentInfo[xModelNpc[i].floor].x-1;
//						xModelNpc[i].makeY = xPayMentInfo[xModelNpc[i].floor].y;
//					}
//					else
//					{
//						xModelNpc[i].makeX = xPayMentInfo[xModelNpc[i].floor].x;
//						xModelNpc[i].makeY = xPayMentInfo[xModelNpc[i].floor].y-1;
//					}
//
//					xModelNpc[i].actLook = MOVETYPE_YPLUS;
//					xModelNpc[i].x = xModelNpc[i].makeX;
//					xModelNpc[i].y = xModelNpc[i].makeY;
//					xModelNpc[i].drawX = 0;
//					xModelNpc[i].drawY = 0;
//				}
//					
//				switch(xModelNpc[i].anyCnt)
//				{
//				case 30:
//					if(xModelNpc[i].xSpeak.state == SPEAK_STATE_DONT)
//					{
//						if(ranDom(0, 100) < 10)
//						{
//							switch(ranDom(0, 4))
//							{
//							case 0:
//								setSpeak(&xModelNpc[i].xSpeak, "의상은 중요한 게 퀄리티지!", SPEAKFRAMEMAX);
//								break;
//							case 1:
//								setSpeak(&xModelNpc[i].xSpeak, "몸매관리 좀 더 해야겠는데..", SPEAKFRAMEMAX);
//								break;
//							case 2:
//								setSpeak(&xModelNpc[i].xSpeak, "여기 커피샵 차려도 되겠는데?", SPEAKFRAMEMAX);
//								break;
//							case 3:
//								setSpeak(&xModelNpc[i].xSpeak, "트렌드에 뒤쳐지는 건 용납할 수 없어.", SPEAKFRAMEMAX);
//								break;
//							case 4:
//								setSpeak(&xModelNpc[i].xSpeak, "최신 패션 잡지들 보고 가세요.", SPEAKFRAMEMAX);
//								break;
//							}
//							
//						}
//					}
//					break;
//				}
//					
//				if(++xModelNpc[i].anyCnt > 180)
//				{
//					if(xModelNpc[i].floor < xModelNpc[i].floorTarget)
//					{
//						//올라가기로
//						setModelNpcStateFloorUp(i, xModelNpc[i].floor);
//					}
//					else if(xModelNpc[i].floor > xModelNpc[i].floorTarget)
//					{
//						//내려가기
//						setModelNpcStateFloorDown(i, xModelNpc[i].floor);
//					}
//					else if(ranDom(0,100) < 5)
//					{
//						if(xMap.totalFloor > 1)
//						{
//							if(xModelNpc[i].floorTarget == 0)
//								xModelNpc[i].floorTarget = 1;
//							else
//								xModelNpc[i].floorTarget = 0;
//						}
//					}
//					else if(xModelNpc[i].interiorInfoCnt > 30*30)
//					{
//						xModelNpc[i].interiorInfoCnt = 0;
//						resetSellTableInfo(xModelNpc[i].floor);
//												
//						//쇼윈도검색
//						//카운터검색
//						//쇼파검색
//						int totalSelectCnt = 0;
//						int selectType[30];
//						xModelNpc[i].interiorInfoType = DONT;
//						////////////////////////////////
//						//옷걸이검색
//						//진열대검색
//						int selectSellTable = DONT;
//						
//							
//						if(xSell.totalTotal[xModelNpc[i].floor] > 0)
//						{
//							selectType[totalSelectCnt++] = 0;
//							selectSellTable = xSell.tableNumSlot_Total[xModelNpc[i].floor][ranDom(0, xSell.totalTotal[xModelNpc[i].floor]-1)];
//							
//						}
//						
//						/////////////////////////////////////////////
//						//피팅룸검색
//						int selectFittingRoom = DONT;
//						resetFittingRoomInfo(xModelNpc[i].floor);
//						if(xFittingRoomInfo[xModelNpc[i].floor].totalNumAll > 0)
//						{
//							selectType[totalSelectCnt++] = 2;
//							selectFittingRoom = ranDom(0,xFittingRoomInfo[xModelNpc[i].floor].totalNumAll-1);
//						}
//						
//						/////////////////////////////////////////////
//						//쇼윈도우검색
//						int selectShowWindow = DONT;
//						resetShowWindowInfo();
//						if(xFitting.totalShowWindow[xModelNpc[i].floor] > 0)
//						{
//							selectType[totalSelectCnt++] = 3;
//							selectShowWindow = xFitting.showWindowSlotNum[xModelNpc[i].floor][ranDom(0, xFitting.totalShowWindow[xModelNpc[i].floor]-1)];
//						}
//						/////////////////////////////////////////////
//						//계산대검색
//						int selectPayMent = DONT;
//						resetPayMentInfo(xModelNpc[i].floor);
//						if(xPayMentInfo[xModelNpc[i].floor].codeNum == 0)
//						{
//							selectType[totalSelectCnt++] = 4;
//							selectPayMent = 0;
//						}
//						/////////////////////////////////////////////
//						//의자검색
//						int selectChair = DONT;
//						if(xChairInfo[xModelNpc[i].floor].totalNum > 0)
//						{
//							selectType[totalSelectCnt++] = 5;
//							selectChair = ranDom(0,xChairInfo[xModelNpc[i].floor].totalNum-1);
//						}
//
//						if(totalSelectCnt > 0)
//						{
//							xModelNpc[i].interiorInfoType = selectType[ranDom(0,totalSelectCnt-1)];
//						}
//																								
//						
//						endX = DONT;
//						endY = DONT;
//						
//						if(xModelNpc[i].interiorInfoType == 0 && selectSellTable != DONT)
//						{
//							setMapData(xSellTableInfo[xModelNpc[i].floor][selectSellTable].interiorCode);
//							if(xMap.rever == 0)
//							{
//								
//								endX = xSellTableInfo[xModelNpc[i].floor][selectSellTable].x + 1;
//								endY = xSellTableInfo[xModelNpc[i].floor][selectSellTable].y + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].h[xMap.rever]-1);
//								xModelNpc[i].actLook = MOVETYPE_XMINUS;
//							}
//							else
//							{
//								endX = xSellTableInfo[xModelNpc[i].floor][selectSellTable].x + ranDom(0, xObj.xObjData[xMap.type][xMap.listNum].w[xMap.rever]-1);
//								endY = xSellTableInfo[xModelNpc[i].floor][selectSellTable].y + 1;
//								xModelNpc[i].actLook = MOVETYPE_YMINUS;
//							}
//						}
//						else if(xModelNpc[i].interiorInfoType == 2 && selectFittingRoom != DONT)
//						{
//							if(xFittingRoomInfo[xModelNpc[i].floor].codeNum[selectFittingRoom] > 0)
//							{
//								endX = xFittingRoomInfo[xModelNpc[i].floor].x[selectFittingRoom]+1;
//								endY = xFittingRoomInfo[xModelNpc[i].floor].y[selectFittingRoom];
//								xModelNpc[i].actLook = MOVETYPE_XMINUS;
//							}
//							else
//							{
//								endX = xFittingRoomInfo[xModelNpc[i].floor].x[selectFittingRoom];
//								endY = xFittingRoomInfo[xModelNpc[i].floor].y[selectFittingRoom]+1;
//								xModelNpc[i].actLook = MOVETYPE_YMINUS;
//							}
//						}
//						else if(xModelNpc[i].interiorInfoType == 3 && selectShowWindow != DONT)
//						{
//							if(xShowWindowInfo[xModelNpc[i].floor][selectShowWindow].interiorCode > 0)
//							{
//								endX = xShowWindowInfo[xModelNpc[i].floor][selectShowWindow].x+2;
//								endY = xShowWindowInfo[xModelNpc[i].floor][selectShowWindow].y;
//								xModelNpc[i].actLook = MOVETYPE_XMINUS;
//							}
//							else
//							{
//								endX = xShowWindowInfo[xModelNpc[i].floor][selectShowWindow].x;
//								endY = xShowWindowInfo[xModelNpc[i].floor][selectShowWindow].y+2;
//								xModelNpc[i].actLook = MOVETYPE_YMINUS;
//							}
//						}
//						else if(xModelNpc[i].interiorInfoType == 4 && selectPayMent != DONT)
//						{
//							if(xPayMentInfo[xModelNpc[i].floor].codeNum > 0)
//							{
//								endX = xPayMentInfo[xModelNpc[i].floor].x+1;
//								endY = xPayMentInfo[xModelNpc[i].floor].y;
//								xModelNpc[i].actLook = MOVETYPE_XMINUS;
//							}
//							else
//							{
//								endX = xPayMentInfo[xModelNpc[i].floor].x;
//								endY = xPayMentInfo[xModelNpc[i].floor].y+1;
//								xModelNpc[i].actLook = MOVETYPE_YMINUS;
//							}
//						}
//						else if(xModelNpc[i].interiorInfoType == 5 && selectChair != DONT)
//						{
//							if(xChairInfo[xModelNpc[i].floor].interiorCode[selectChair] > 0)
//							{
//								endX = xChairInfo[xModelNpc[i].floor].x[selectChair]+1;
//								endY = xChairInfo[xModelNpc[i].floor].y[selectChair];
//								xModelNpc[i].actLook = MOVETYPE_XPLUS;
//							}
//							else
//							{
//								endX = xChairInfo[xModelNpc[i].floor].x[selectChair];
//								endY = xChairInfo[xModelNpc[i].floor].y[selectChair]+1;
//								xModelNpc[i].actLook = MOVETYPE_YPLUS;
//							}
//						}
//						
//						if(endX == DONT)
//						{
//							xModelNpc[i].state = MODELNPC_STATE_WAIT;
//							xModelNpc[i].nowDelay = 0;
//							xModelNpc[i].nowFrame = 0;
//							xModelNpc[i].isActEnd = FALSE;
//							xModelNpc[i].anyCnt = 0;
//						}
//						else
//						{
//							
//							if(setAstar(xModelNpc[i].x-xMap.shopPointX, xModelNpc[i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,xModelNpc[i].floor) == FALSE)
//							{
//								xModelNpc[i].state = MODELNPC_STATE_WAIT;
//								xModelNpc[i].nowDelay = 0;
//								xModelNpc[i].nowFrame = 0;
//								xModelNpc[i].isActEnd = FALSE;
//								xModelNpc[i].anyCnt = 0;
//							}
//							else
//							{
//								xModelNpc[i].state = MODELNPC_STATE_INTERIORINFOMOVE;
//								xModelNpc[i].nowDelay = 0;
//								xModelNpc[i].nowFrame = 0;
//								
//								xModelNpc[i].bestTotalCnt = xAstar.totalCnt;
//								xModelNpc[i].bestNowCnt = 0;
//								for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//								{
//									xModelNpc[i].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//									xModelNpc[i].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//								}
//								
//								//다음이동
//								if(xModelNpc[i].bestX[xModelNpc[i].bestNowCnt] < xModelNpc[i].bestX[xModelNpc[i].bestNowCnt+1])
//									xModelNpc[i].moveType = MOVETYPE_XPLUS;
//								else if(xModelNpc[i].bestX[xModelNpc[i].bestNowCnt] > xModelNpc[i].bestX[xModelNpc[i].bestNowCnt+1])
//									xModelNpc[i].moveType = MOVETYPE_XMINUS;
//								else if(xModelNpc[i].bestY[xModelNpc[i].bestNowCnt] < xModelNpc[i].bestY[xModelNpc[i].bestNowCnt+1])
//									xModelNpc[i].moveType = MOVETYPE_YPLUS;
//								else if(xModelNpc[i].bestY[xModelNpc[i].bestNowCnt] > xModelNpc[i].bestY[xModelNpc[i].bestNowCnt+1])
//									xModelNpc[i].moveType = MOVETYPE_YMINUS;
//							}
//						}
//					}
//					else
//					{
//						////////////
//						M_Boolean isWaitMove = FALSE;
//						int waitMoveWhileCnt = 0;
//						while (true)
//						{
//							xModelNpc[i].makeX = ranDom(0, xMap.shopPointW-1);
//							xModelNpc[i].makeY = ranDom(0, xMap.shopPointH-1);
//														
//													
//							if(xMap.shopData[xModelNpc[i].floor][MAP_TYPE_OBJ][xModelNpc[i].makeX][xModelNpc[i].makeY] == FALSE)
//							{
//								isWaitMove = TRUE;
//								break;
//							}
//							if(++waitMoveWhileCnt>30)
//								break;
//						}
//						//////////
//												
//						
//						endX = xModelNpc[i].makeX+xMap.shopPointX;
//						endY = xModelNpc[i].makeY+xMap.shopPointY;
//						
//						
//						
//						if(isWaitMove == FALSE)
//						{
//						}
//						else if(setAstar(xModelNpc[i].x-xMap.shopPointX, xModelNpc[i].y-xMap.shopPointY, endX-xMap.shopPointX, endY-xMap.shopPointY, MAP_TYPE_OBJ,xModelNpc[i].floor) == FALSE)
//						{
//						}
//						else
//						{
//							xModelNpc[i].state = MODELNPC_STATE_WAITMOVE;
//							xModelNpc[i].nowDelay = 0;
//							xModelNpc[i].nowFrame = 0;
//							
//							xModelNpc[i].bestTotalCnt = xAstar.totalCnt;
//							xModelNpc[i].bestNowCnt = 0;
//							for(int totalI=0;totalI<xAstar.totalCnt;totalI++)
//							{
//								xModelNpc[i].bestX[totalI] = xAstar.bestX[totalI]+xMap.shopPointX;
//								xModelNpc[i].bestY[totalI] = xAstar.bestY[totalI]+xMap.shopPointY;
//							}
//							
//							//다음이동
//							if(xModelNpc[i].bestX[xModelNpc[i].bestNowCnt] < xModelNpc[i].bestX[xModelNpc[i].bestNowCnt+1])
//								xModelNpc[i].moveType = MOVETYPE_XPLUS;
//							else if(xModelNpc[i].bestX[xModelNpc[i].bestNowCnt] > xModelNpc[i].bestX[xModelNpc[i].bestNowCnt+1])
//								xModelNpc[i].moveType = MOVETYPE_XMINUS;
//							else if(xModelNpc[i].bestY[xModelNpc[i].bestNowCnt] < xModelNpc[i].bestY[xModelNpc[i].bestNowCnt+1])
//								xModelNpc[i].moveType = MOVETYPE_YPLUS;
//							else if(xModelNpc[i].bestY[xModelNpc[i].bestNowCnt] > xModelNpc[i].bestY[xModelNpc[i].bestNowCnt+1])
//								xModelNpc[i].moveType = MOVETYPE_YMINUS;
//						}
//					}
//				}
//				break;
//			case MODELNPC_STATE_WAITMOVE:
//			case MODELNPC_STATE_FLOORUPMOVE:
//			case MODELNPC_STATE_FLOORDOWNMOVE:
//			case MODELNPC_STATE_INTERIORINFOMOVE:
//				switch(xModelNpc[i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//				case MOVETYPE_YPLUS:
//					prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_FRONT],&xModelNpc[i].nowDelay,&xModelNpc[i].nowFrame);
//					break;
//				case MOVETYPE_XMINUS:
//				case MOVETYPE_YMINUS:
//					prcSprit(&xSpritNpc[NPC_ACT_WALKING][ACT_BACK],&xModelNpc[i].nowDelay,&xModelNpc[i].nowFrame);
//					break;
//				}
//				
//				switch(xModelNpc[i].moveType)
//				{
//				case MOVETYPE_XPLUS:
//					xModelNpc[i].drawX -= (float)(xModelNpc[i].speed * 2);
//					xModelNpc[i].drawY += (float)(xModelNpc[i].speed * 1);
//					if(xModelNpc[i].drawX  <= -(TILEW/4))
//					{
//						xModelNpc[i].x++;
//						xModelNpc[i].drawX = (TILEW/4);
//						xModelNpc[i].drawY = -(TILEH/4);
//					}
//					break;
//				case MOVETYPE_XMINUS:
//					xModelNpc[i].drawX += (float)(xModelNpc[i].speed * 2);
//					xModelNpc[i].drawY -= (float)(xModelNpc[i].speed * 1);
//					if(xModelNpc[i].drawX  >= (TILEW/4))
//					{
//						xModelNpc[i].x--;
//						xModelNpc[i].drawX = -(TILEW/4);
//						xModelNpc[i].drawY = (TILEH/4);
//					}
//					break;
//				case MOVETYPE_YPLUS:
//					xModelNpc[i].drawX += (float)(xModelNpc[i].speed * 2);
//					xModelNpc[i].drawY += (float)(xModelNpc[i].speed * 1);
//					if(xModelNpc[i].drawY  >= (TILEH/4))
//					{
//						xModelNpc[i].y++;
//						xModelNpc[i].drawX = -(TILEW/4);
//						xModelNpc[i].drawY = -(TILEH/4);
//					}
//					break;
//				case MOVETYPE_YMINUS:
//					xModelNpc[i].drawX -= (float)(xModelNpc[i].speed * 2);
//					xModelNpc[i].drawY -= (float)(xModelNpc[i].speed * 1);
//					if(xModelNpc[i].drawY  <= -(TILEH/4))
//					{
//						xModelNpc[i].y--;
//						xModelNpc[i].drawX = (TILEW/4);
//						xModelNpc[i].drawY = (TILEH/4);
//					}
//					break;
//				}
//				
//				//도착 위치 검색 및 위치 보정
//				if(xModelNpc[i].drawX == 0)
//				{
//					//목표위치도착
//					if(++xModelNpc[i].bestNowCnt >= xModelNpc[i].bestTotalCnt-1)
//					{
//						switch(xModelNpc[i].state)
//						{
//						case MODELNPC_STATE_WAITMOVE:		//진열대로 이동중
//							xModelNpc[i].state = MODELNPC_STATE_WAIT;
//							xModelNpc[i].nowDelay = 0;
//							xModelNpc[i].nowFrame = 0;
//							xModelNpc[i].isActEnd = FALSE;
//							xModelNpc[i].anyCnt = 0;
//							break;
//						case MODELNPC_STATE_FLOORUPMOVE:
//							xModelNpc[i].state = MODELNPC_STATE_FLOORUP;
//							xModelNpc[i].moveType = MOVETYPE_YMINUS;
//							xModelNpc[i].actLook = MOVETYPE_YMINUS;
//							xModelNpc[i].anyCnt = 0;
//							break;
//						case MODELNPC_STATE_FLOORDOWNMOVE:
//							xModelNpc[i].state = MODELNPC_STATE_FLOORDOWN;
//							xModelNpc[i].anyCnt = 0;
//							break;
//						case MODELNPC_STATE_INTERIORINFOMOVE:
//							xModelNpc[i].state = MODELNPC_STATE_INTERIORINFO;
//							xModelNpc[i].anyCnt = 0;
//							xModelNpc[i].moveType = xModelNpc[i].actLook;
//							break;
//						}
//					}
//					else
//					{
//						//다음이동
//						if(xModelNpc[i].bestX[xModelNpc[i].bestNowCnt] < xModelNpc[i].bestX[xModelNpc[i].bestNowCnt+1])
//							xModelNpc[i].moveType = MOVETYPE_XPLUS;
//						else if(xModelNpc[i].bestX[xModelNpc[i].bestNowCnt] > xModelNpc[i].bestX[xModelNpc[i].bestNowCnt+1])
//							xModelNpc[i].moveType = MOVETYPE_XMINUS;
//						else if(xModelNpc[i].bestY[xModelNpc[i].bestNowCnt] < xModelNpc[i].bestY[xModelNpc[i].bestNowCnt+1])
//							xModelNpc[i].moveType = MOVETYPE_YPLUS;
//						else if(xModelNpc[i].bestY[xModelNpc[i].bestNowCnt] > xModelNpc[i].bestY[xModelNpc[i].bestNowCnt+1])
//							xModelNpc[i].moveType = MOVETYPE_YMINUS;
//					}
//				}
//				break;
//			case MODELNPC_STATE_INTERIORINFO:					
//				switch(xModelNpc[i].anyCnt)
//				{
//				case 10:
//					switch(xModelNpc[i].interiorInfoType)
//					{
//					case 0:		//옷걸이
//						setSpeak(&xModelNpc[i].xSpeak, "옷걸이는 옷을 진열할수 있어요.", SPEAKFRAMEMAX);
//						break;
//					case 1:		//진열대
//						setSpeak(&xModelNpc[i].xSpeak, "진열대는 잡화를 진열할수 있어요.", SPEAKFRAMEMAX);
//						break;
//					case 2:		//피팅룸
//						setSpeak(&xModelNpc[i].xSpeak, "피팅룸에선 손님들이 옷을 갈아 입어요.", SPEAKFRAMEMAX);
//						break;
//					case 3:		//쇼윈도
//						setSpeak(&xModelNpc[i].xSpeak, "쇼윈도에선 마네킹을 피팅 시킬 수 있어요.", SPEAKFRAMEMAX);
//						break;
//					case 4:		//카운터
//						setSpeak(&xModelNpc[i].xSpeak, "카운터에선 의상을 주문할수 있어요.", SPEAKFRAMEMAX);
//						break;
//					case 5:		//쇼파
//						setSpeak(&xModelNpc[i].xSpeak, "의자에 쉬고 간 손님은 의상을 추가로 구매 한답니다.", SPEAKFRAMEMAX);
//						break;
//					}
//					break;
//				}
//					
//				if(++xModelNpc[i].anyCnt > 90)
//				{
//					xModelNpc[i].state = MODELNPC_STATE_WAIT;
//					xModelNpc[i].anyCnt=999;
//				}
//				break;
//			case MODELNPC_STATE_FLOORUP:
//				//10에변경
//				//17에 행동변경
//				switch(++xModelNpc[i].anyCnt)
//				{
//				case 10:
//					xModelNpc[i].floor++;
//					xModelNpc[i].moveType = MOVETYPE_YPLUS;
//					xModelNpc[i].actLook = MOVETYPE_YPLUS;
//					
//					xModelNpc[i].x = xWorldMap.floorDownX;
//					xModelNpc[i].y = xWorldMap.floorDownY;
//					break;
//				case 17:
//					if(xModelNpc[i].floor < xModelNpc[i].floorTarget)
//					{
//						//올라가기로
//						setModelNpcStateFloorUp(i, xModelNpc[i].floor);
//					}
//					else
//					{
//						xModelNpc[i].state = MODELNPC_STATE_WAIT;
//						xModelNpc[i].anyCnt=999;
//					}
//					break;
//				}
//				break;
//			case MODELNPC_STATE_FLOORDOWN:
//				xModelNpc[i].moveType = xModelNpc[i].actLook;
//				//10에변경
//				//17에 행동변경
//				switch(++xModelNpc[i].anyCnt)
//				{
//				case 10:
//					xModelNpc[i].floor--;
//					xModelNpc[i].moveType = MOVETYPE_YPLUS;
//					xModelNpc[i].actLook = MOVETYPE_YPLUS;
//					xModelNpc[i].x = xWorldMap.floorUpX;
//					xModelNpc[i].y = xWorldMap.floorUpY;
//					break;
//				case 17:
//					if(xModelNpc[i].floor > xModelNpc[i].floorTarget)
//					{
//						//내려가기
//						setModelNpcStateFloorDown(i, xModelNpc[i].floor);
//					}
//					else
//					{
//						xModelNpc[i].state = MODELNPC_STATE_WAIT;
//						xModelNpc[i].anyCnt=999;
//					}
//					break;
//				}
//				break;
//			}
//		}
//	}
//}



void setDrawObjCenter(int type,int listNum)
{
	xDrawObjCenter.w = 0;
	xDrawObjCenter.h = 0;
	xDrawObjCenter.reSize = 100;
	
	switch(xMap.type)
	{
	case INTERIOR_TYPE_HANGER:
		xDrawObjCenter.reSize = 90;
		xDrawObjCenter.w=-16;
		xDrawObjCenter.h=16;
		break;
	case INTERIOR_TYPE_ACCESSORY:
		xDrawObjCenter.reSize = 80;
		xDrawObjCenter.w=-16;
		xDrawObjCenter.h = -xObj.xObjData[type][listNum].y[0];
		break;
	case INTERIOR_TYPE_FITTINGROOM:
		xDrawObjCenter.h = 38;
		xDrawObjCenter.reSize = 85;
		break;
	case INTERIOR_TYPE_SHOWWINDOW:
		xDrawObjCenter.w= 32;
		xDrawObjCenter.h = 34;
		xDrawObjCenter.reSize = 75;
		break;
	case INTERIOR_TYPE_PAYMENT:
		xDrawObjCenter.reSize = 120;
		xDrawObjCenter.h = 10;
		break;
	case INTERIOR_TYPE_OBJ:
		xDrawObjCenter.w = -xObj.xObjData[type][listNum].x[0];
		xDrawObjCenter.h = -xObj.xObjData[type][listNum].y[0];
		xDrawObjCenter.reSize =100-((xObj.xObjData[type][listNum].w[0]+xObj.xObjData[type][listNum].h[0])*8);
		break;
	case INTERIOR_TYPE_OBJFLOOR:
		xDrawObjCenter.w = -xObj.xObjData[type][listNum].x[0];
		xDrawObjCenter.h = -xObj.xObjData[type][listNum].y[0];
		xDrawObjCenter.reSize =100-((xObj.xObjData[type][listNum].w[0]+xObj.xObjData[type][listNum].h[0])*6);
		break;
	case INTERIOR_TYPE_WALLITEM:
		xDrawObjCenter.reSize =120-((xObj.xObjData[type][listNum].w[0]+xObj.xObjData[type][listNum].h[0])*15);
		xDrawObjCenter.w = -xObj.xObjData[type][listNum].x[0];
		xDrawObjCenter.h = -xObj.xObjData[type][listNum].y[0];
		break;
	case INTERIOR_TYPE_FLOORTILE:
		xDrawObjCenter.h = -16;
		xDrawObjCenter.reSize = 100;
		break;
	case INTERIOR_TYPE_WALLTILE:
		xDrawObjCenter.reSize = 75;
		xDrawObjCenter.w = 16;
		xDrawObjCenter.h = 48;
		break;
	case INTERIOR_TYPE_DOOR:
		xDrawObjCenter.reSize = 70;
		xDrawObjCenter.w = -16;
		xDrawObjCenter.h = 30;
		break;
    case INTERIOR_TYPE_PRODUCTION:
        xDrawObjCenter.reSize=50;
        xDrawObjCenter.h=35;
        break;
	default:
		xDrawObjCenter.reSize = 100;
		break;
	}
}

float getFashionColorPer(int main,int target)
{
	return xRunWay.fashionColorPer[main][target];
}



void initFashionColor(int main,float t0,float t1,float t2,float t3,float t4,float t5,float t6,float t7,float t8,float t9,float t10,float t11)
{
	xRunWay.fashionColorPer[0][main] = t0;
	xRunWay.fashionColorPer[1][main] = t1;
	xRunWay.fashionColorPer[2][main] = t2;
	xRunWay.fashionColorPer[3][main] = t3;
	xRunWay.fashionColorPer[4][main] = t4;
	xRunWay.fashionColorPer[5][main] = t5;
	xRunWay.fashionColorPer[6][main] = t6;
	xRunWay.fashionColorPer[7][main] = t7;
	xRunWay.fashionColorPer[8][main] = t8;
	xRunWay.fashionColorPer[9][main] = t9;
	xRunWay.fashionColorPer[10][main] = t10;
	xRunWay.fashionColorPer[11][main] = t11;
}

float getFashionConceptPer(int main,int target)
{
		
	return xRunWay.fashionConceptPer[main][target];
}


void getFashionColorStr(char *strText,int code)
{
	switch(code)
	{
	case 0:sprintf(strText, "검정");break;
	case 1:sprintf(strText, "화이트");break;
	case 2:sprintf(strText, "그레이");break;
	case 3:sprintf(strText, "베이지");break;
	case 4:sprintf(strText, "빨강");break;
	case 5:sprintf(strText, "노랑");break;
	case 6:sprintf(strText, "파랑");break;
	case 7:sprintf(strText, "브라운");break;
	case 8:sprintf(strText, "초록");break;
	case 9:sprintf(strText, "보라");break;
	case 10:sprintf(strText, "핑크");break;
	case 11:sprintf(strText, "오렌지");break;
	}
}

void getFashionConceptStr(char *strText,int code)
{
	switch(code)
	{
	case 0:sprintf(strText, "여성");break;
	case 1:sprintf(strText, "귀여운");break;
	case 2:sprintf(strText, "베이직");break;
	case 3:sprintf(strText, "클럽");break;
	case 4:sprintf(strText, "드레스");break;
	case 5:sprintf(strText, "시크");break;
	case 6:sprintf(strText, "섹시");break;
	case 7:sprintf(strText, "에스닉");break;
	case 8:sprintf(strText, "유니크");break;
	}
}

void initFashionConcept(int main,float t0,float t1,float t2,float t3,float t4,float t5,float t6,float t7,float t8)
{
	xRunWay.fashionConceptPer[0][main] = t0;
	xRunWay.fashionConceptPer[1][main] = t1;
	xRunWay.fashionConceptPer[2][main] = t2;
	xRunWay.fashionConceptPer[3][main] = t3;
	xRunWay.fashionConceptPer[4][main] = t4;
	xRunWay.fashionConceptPer[5][main] = t5;
	xRunWay.fashionConceptPer[6][main] = t6;
	xRunWay.fashionConceptPer[7][main] = t7;
	xRunWay.fashionConceptPer[8][main] = t8;
	
}


M_Boolean checkXfLimit(XFITTINGLAYER *xF)
{
	M_Boolean isResult = FALSE;
	M_Boolean isUse[20];
	int type;
	isUse[F_TYPE_TOP] = FALSE;
	isUse[F_TYPE_BOTTOM] = FALSE;
	isUse[F_TYPE_ONEPIECE] = FALSE;
	
	for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
	{
		if(xF->code[ff] != DONT)
		{
			type = xF->code[ff]/1000;
			isUse[type] = TRUE;
		}
	}
	
	if(isUse[F_TYPE_TOP] == TRUE && isUse[F_TYPE_BOTTOM]== TRUE)
		isResult = TRUE;
	if(isUse[F_TYPE_ONEPIECE] == TRUE)
		isResult = TRUE;
			
	return isResult;
}

int getWorldmapNpcMakeTime()
{
    int resultNum = 0;
    
    if(xSaveTemp.fame.oriData >= 2000)
        resultNum = 100;
    else if(xSaveTemp.fame.oriData >= 1600)
        resultNum = 110;
    else if(xSaveTemp.fame.oriData >= 1200)
        resultNum = 120;
    else if(xSaveTemp.fame.oriData >= 800)
        resultNum = 130;
    else if(xSaveTemp.fame.oriData >= 500)
        resultNum = 140;
    else if(xSaveTemp.fame.oriData >= 300)
        resultNum = 150;
    else
        resultNum = 160;
				
	return resultNum;
}


void drawSellTableCashPopup()
{
	int px = cx;
	int py = cy;
	
	
	drawBgFillRect();
	
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
			
	
	
	
	
	setMapData(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].code);

	subTemp[XPOS] = px+114;
	subTemp[YPOS] = py-116;
		
	setFontSize(20);
	sprintf(strTempS,"<%s>",xFashionData[xMap.type][xMap.listNum].strName);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VH, 97, ALPHA_MAX, 227, 44, 27, 26);
	setFontSize(14);
	gSetColor(82, 49, 38);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+64-15, "즉시판매 또는 판매취소를", VH);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+64+15, " 하실 수 있습니다.", VH);
	
	drawPacker(imgProductionMenuBtn3, subTemp[XPOS]+75, subTemp[YPOS]+150, 0, imgH(imgProductionMenuBtn3)/2, imgW(imgProductionMenuBtn3), imgH(imgProductionMenuBtn3)/2, VH);
	drawIcon(subTemp[XPOS]+75-54, subTemp[YPOS]+150-4, ICON_TYPE_LOOK);
	sprintf(strTempS, "%d 즉시판매",getFastSellCash(xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[xSell.selectSlot].num));
	gDrawStringBold(subTemp[XPOS]+75-50, subTemp[YPOS]+150-3, strTempS, VL, 255, 255, 255, 20, 79, 78);
	
		
	xProductionMenu.xTouchFast.wPos = imgW(imgProductionMenuBtn3);
	xProductionMenu.xTouchFast.hPos = imgH(imgProductionMenuBtn3)/2;
	xProductionMenu.xTouchFast.xPos = subTemp[XPOS]+75-xProductionMenu.xTouchFast.wPos/2;
	xProductionMenu.xTouchFast.yPos = subTemp[YPOS]+150-xProductionMenu.xTouchFast.hPos/2;
	
	
	drawPacker(imgProductionMenuBtn4, subTemp[XPOS]-75, subTemp[YPOS]+150, 0, imgH(imgProductionMenuBtn4)/2, imgW(imgProductionMenuBtn4), imgH(imgProductionMenuBtn4)/2, VH);
	gDrawStringBold(subTemp[XPOS]-75, subTemp[YPOS]+150-3, "판매취소", VH, 255, 255, 255, 77, 77, 77);
	setFontSize(11);
	
	xProductionMenu.xTouchDelBtn.wPos = imgW(imgProductionMenuBtn4);
	xProductionMenu.xTouchDelBtn.hPos = imgH(imgProductionMenuBtn4)/2;
	xProductionMenu.xTouchDelBtn.xPos = subTemp[XPOS]-75-xProductionMenu.xTouchDelBtn.wPos/2;
	xProductionMenu.xTouchDelBtn.yPos = subTemp[YPOS]+150-xProductionMenu.xTouchDelBtn.hPos/2;
		
	drawImage(&imgLvUp[2], px-160,py-45, 0, 0, imgLvUp[2].w, imgLvUp[2].h, VH);
	gSetClip(true,0, py-45-imgLvUp[2].h/2, lcdW, imgLvUp[2].h);
	drawFittingF(px-160,py-45, (xMap.type*1000)+xMap.listNum, 100);
	gSetClip(false,0, 0, lcdW, lcdH);
	
	drawPacker(imgPopupBtn0, px, py+158, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
	setFontSize(20);
	gDrawStringBold(px-2, py-2+158, "닫기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
	setFontSize(11);
	
	xTouchClr.wPos = imgW(imgPopupBtn0);
	xTouchClr.hPos = imgH(imgPopupBtn0)/2;
	xTouchClr.xPos = px- xTouchClr.wPos/2;
	xTouchClr.yPos = py+158 - xTouchClr.hPos/2;
	

}
void drawProductionCashPopup_FP()
{
    int px=cx;
    int py=cy;
    
    drawBgFillRect();
    
    
    int slotCode = xProduction_FP.xData[xProduction_FP.index].xSlot[xProduction_FP.selectSlot].itemCode;
    setMapData(slotCode);
    loadFashionFImg_FP(xMap.type, xMap.listNum);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py;
    
    drawImage(&imgProduction[18], subTemp[XPOS], subTemp[YPOS], 0, 0, imgProduction[18].w, imgProduction[18].h, VH);
    
    if(xProduction_FP.isTouchPopupClr==false)
    {
        drawImage(&imgProductionMenuExitIcon, subTemp[XPOS]+243, subTemp[YPOS]-140, 0, 0, imgProductionMenuExitIcon.w/2, imgProductionMenuExitIcon.h, VH);
    }
    else
    {
        drawImage(&imgProductionMenuExitIcon, subTemp[XPOS]+243, subTemp[YPOS]-140, imgProductionMenuExitIcon.w/2, 0, imgProductionMenuExitIcon.w/2, imgProductionMenuExitIcon.h, VH);

    }
    xTouchClr.wPos = imgProductionMenuExitIcon.w/2;
    xTouchClr.hPos = imgProductionMenuExitIcon.h;
    xTouchClr.xPos = subTemp[XPOS]+243-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-140-xTouchClr.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
//    setAlpha(ALPHA_MAX);
    
    drawImage(&imgProduction[8], subTemp[XPOS]-160, subTemp[YPOS]-30, 0, 0, imgProduction[8].w, imgProduction[8].h, VH);
    drawImage(&imgProduction[9], subTemp[XPOS]-160, subTemp[YPOS]-10, 0, 0, imgProduction[9].w, imgProduction[9].h, VH);
    
    xGame.isReSizeDraw = true;
    
    xGame.reSize = 70;
    
    drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS]-160, subTemp[YPOS]-40, 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
    
    xGame.isReSizeDraw = false;
    
    drawImage(&imgProduction[10], subTemp[XPOS]-160, subTemp[YPOS]-100, 0, imgProduction[10].h/4*(gameCnt%4), imgProduction[10].w, imgProduction[10].h/4, VH);
    
    drawTimeSprintf(strTempS, xProduction_FP.EndTimer[xProduction_FP.index][xProduction_FP.selectSlot], 1);
    gSetColor(101, 48, 150);
    setFontSizeORI(16);
    gDrawString(subTemp[XPOS]-160, subTemp[YPOS]+5, strTempS, VH);
    setFontSize(11);
    
    sprintf(strTempS, "%s", xFashionData_FP[xMap.type][xMap.listNum].strName);
    gSetColor(101, 48, 150);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]+50, subTemp[YPOS]-80, strTempS, VH);
    setFontSize(11);

    sprintf(strTempS, "제작을 취소하시겠습니까?");
    gSetColor(101, 48, 150);
    setFontSizeORI(16);
    gDrawString(subTemp[XPOS]+70, subTemp[YPOS]-10, strTempS, VH);
    setFontSize(11);

    sprintf(strTempS, "제작을 취소하면 사용된 재료는 사라져요!");
    gSetColor(101, 48, 150);
    setFontSizeORI(14);
    gDrawString(subTemp[XPOS]+70, subTemp[YPOS]+10, strTempS, VH);
    setFontSize(11);
    if (xProduction_FP.isTouchYes==false)
    {
        drawImage(&imgProduction[19], subTemp[XPOS]-85, subTemp[YPOS]+100, 0, imgProduction[19].h/2, imgProduction[19].w/2, imgProduction[19].h/2, VH);
    }
    else
    {
        drawImage(&imgProduction[19], subTemp[XPOS]-85, subTemp[YPOS]+100, imgProduction[19].w/2, imgProduction[19].h/2, imgProduction[19].w/2, imgProduction[19].h/2, VH);
    }
    
    sprintf(strTempS, "네");
    gSetColor(36, 50, 128);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]-85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    xProduction_FP.xTouchYes.wPos = imgProduction[19].w/2;
    xProduction_FP.xTouchYes.hPos = imgProduction[19].h/2;
    xProduction_FP.xTouchYes.xPos = subTemp[XPOS]-85-xProduction_FP.xTouchYes.wPos/2;
    xProduction_FP.xTouchYes.yPos = subTemp[YPOS]+100-xProduction_FP.xTouchYes.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xProduction_FP.xTouchYes.xPos, xProduction_FP.xTouchYes.yPos, xProduction_FP.xTouchYes.wPos, xProduction_FP.xTouchYes.hPos);
//    setAlpha(ALPHA_MAX);

    
    
    
    
    if(xProduction_FP.isTouchNo==false)
    {
        drawImage(&imgProduction[19], subTemp[XPOS]+85, subTemp[YPOS]+100, 0, 0, imgProduction[19].w/2, imgProduction[19].h/2, VH);
    }
    else
    {
        drawImage(&imgProduction[19], subTemp[XPOS]+85, subTemp[YPOS]+100, imgProduction[19].w/2, 0, imgProduction[19].w/2, imgProduction[19].h/2, VH);
    }
    sprintf(strTempS, "아니오");
    gSetColor(106, 21, 97);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]+85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    
    xProduction_FP.xTouchNo.wPos = imgProduction[19].w/2;
    xProduction_FP.xTouchNo.hPos = imgProduction[19].h/2;
    xProduction_FP.xTouchNo.xPos = subTemp[XPOS]+85-xProduction_FP.xTouchNo.wPos/2;
    xProduction_FP.xTouchNo.yPos = subTemp[YPOS]+100-xProduction_FP.xTouchNo.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xProduction_FP.xTouchNo.xPos, xProduction_FP.xTouchNo.yPos, xProduction_FP.xTouchNo.wPos, xProduction_FP.xTouchNo.hPos);
//    setAlpha(ALPHA_MAX);

}

void drawProductionCashPopup()
{
	int px = cx;
	int py = cy;
	
	

	 int useCashAll = 0;
	 for(int type=0;type<2;type++)
	 {
		 for(int i=0;i<6;i++)
		 {
			 if(xProductionMenu.slotCode[type][i] != DONT)
				 setMapData(xProductionMenu.slotCode[type][i]);
			 if(xProductionMenu.state[type][i] == PRODUCTIONMENUSLOT_STATE_PLAY
			 && xProductionMenu.slotCode[type][i] != DONT)
			 {
                 
				 if(xProductionMenu.slotFlowTime[type][i]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
				 {
				 //성공
				 
				 }
				 else
				 {
				 //진행중
                     int remainTime = xFashionData[xMap.type][xMap.listNum].makeTime.oriData - xProductionMenu.slotFlowTime[type][i];
					 useCashAll += getFastTimeCash(remainTime);
				 }
			 }
		 }
	 }

	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_1_PRODUCTIONFASTCASH0:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	drawBgFillRect();
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);
	
	
	
	setMapData(xProductionMenu.slotCode[xProductionMenu.selectType][xProductionMenu.selectSlot]);
	
	subTemp[XPOS] = px+114;
	subTemp[YPOS] = py-116;
	
	setFontSize(20);
	sprintf(strTempS,"<%s>",xFashionData[xMap.type][xMap.listNum].strName);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VH, 97, ALPHA_MAX, 227, 44, 27, 26);
	setFontSize(14);
	gSetColor(82, 49, 38);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+69-28, "즉시완료,제작취소를", VH);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+69, "할수 있습니다.취소 시 제작비용은", VH);
	gDrawString(subTemp[XPOS], subTemp[YPOS]+69+28, "환불되지 않습니다.", VH);
	
	
	
	
	drawPacker(imgProductionFastBtn, subTemp[XPOS], subTemp[YPOS]+165, 0, 0, imgW(imgProductionFastBtn), imgH(imgProductionFastBtn), VH);
	//getFastTimeCash((xProductionMenu.slotStartTime[xProductionMenu.selectType][xProductionMenu.selectSlot]+xFashionData[xMap.type][xMap.listNum].makeTime - xCalendar.nowTime))
	
	
	
	/*
	xProductionMenu.xTouchFastAll.wPos = 80;
	xProductionMenu.xTouchFastAll.hPos = 80;
	xProductionMenu.xTouchFastAll.xPos = subTemp[XPOS]-100-xProductionMenu.xTouchFast.wPos/2;
	xProductionMenu.xTouchFastAll.yPos = subTemp[YPOS]+165-xProductionMenu.xTouchFast.hPos/2;
    */
	
	
	xProductionMenu.xTouchFast.wPos = 80;
	xProductionMenu.xTouchFast.hPos = 80;
	xProductionMenu.xTouchFast.xPos = subTemp[XPOS]-xProductionMenu.xTouchFast.wPos/2;
	xProductionMenu.xTouchFast.yPos = subTemp[YPOS]+165-xProductionMenu.xTouchFast.hPos/2;
	
	xProductionMenu.xTouchDelBtn.wPos = 80;
	xProductionMenu.xTouchDelBtn.hPos = 80;
	xProductionMenu.xTouchDelBtn.xPos = subTemp[XPOS]+100-xProductionMenu.xTouchDelBtn.wPos/2;
	xProductionMenu.xTouchDelBtn.yPos = subTemp[YPOS]+165-xProductionMenu.xTouchDelBtn.hPos/2;
	
	
	subTemp[XPOS] =	xProductionMenu.xTouchFastAll.xPos+xProductionMenu.xTouchFastAll.wPos/2;
	subTemp[YPOS] =	xProductionMenu.xTouchFastAll.yPos+xProductionMenu.xTouchFastAll.hPos/2;
    /*
	drawIcon(subTemp[XPOS]-15, subTemp[YPOS]-13, ICON_TYPE_LOOK);
	sprintf(strTempS, "%d",useCashAll);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]+8, subTemp[YPOS]-13, strTempS, VL, 255, 255, 255, 170, 50, 11);
	setFontSize(11);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+15, "전체완료", VH, 255, 255, 255, 170, 50, 11);
    */
	
	subTemp[XPOS] =	xProductionMenu.xTouchFast.xPos+xProductionMenu.xTouchFast.wPos/2;
	subTemp[YPOS] =	xProductionMenu.xTouchFast.yPos+xProductionMenu.xTouchFast.hPos/2;
	drawIcon(subTemp[XPOS]-15, subTemp[YPOS]-13, ICON_TYPE_LOOK);
    int remainTime = xFashionData[xMap.type][xMap.listNum].makeTime.oriData - xProductionMenu.slotFlowTime[xProductionMenu.selectType][xProductionMenu.selectSlot];
	sprintf(strTempS, "%d",getFastTimeCash(remainTime));
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS]+8, subTemp[YPOS]-13, strTempS, VL, 255, 255, 255, 20, 79, 78);
	setFontSize(11);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+15, "즉시완료", VH, 255, 255, 255, 20, 79, 78);
	
	subTemp[XPOS] =	xProductionMenu.xTouchDelBtn.xPos+xProductionMenu.xTouchDelBtn.wPos/2;
	subTemp[YPOS] =	xProductionMenu.xTouchDelBtn.yPos+xProductionMenu.xTouchDelBtn.hPos/2;
	setFontSize(11);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+15, "제작취소", VH, 255, 255, 255, 57, 57, 57);
	
	
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xProductionMenu.xTouchFastAll.xPos, xProductionMenu.xTouchFastAll.yPos, xProductionMenu.xTouchFastAll.wPos, xProductionMenu.xTouchFastAll.hPos);
	fillRect(xProductionMenu.xTouchFast.xPos, xProductionMenu.xTouchFast.yPos, xProductionMenu.xTouchFast.wPos, xProductionMenu.xTouchFast.hPos);
	fillRect(xProductionMenu.xTouchDelBtn.xPos, xProductionMenu.xTouchDelBtn.yPos, xProductionMenu.xTouchDelBtn.wPos, xProductionMenu.xTouchDelBtn.hPos);
	setAlpha(ALPHA_MAX);
	*/
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_1_PRODUCTIONFASTCASH1:
		case TUTO_2_PRODUCTIONFASTCASH:
            if(playState == PLAY_MSG)
            {
                xTutoInfo.x[xTutoInfo.totalNum] = px+10;
                xTutoInfo.y[xTutoInfo.totalNum] = py+158;
                xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
            }
            else
            {
                xTutoInfo.x[xTutoInfo.totalNum] = xProductionMenu.xTouchFast.xPos+xProductionMenu.xTouchFast.wPos/2;
                xTutoInfo.y[xTutoInfo.totalNum] = xProductionMenu.xTouchFast.yPos+xProductionMenu.xTouchFast.hPos/2;
                xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
            }
			break;
		}
	}
	
	
	
	setFontSize(11);
	
	
	drawImage(&imgLvUp[2], px-160,py-45, 0, 0, imgLvUp[2].w, imgLvUp[2].h, VH);
	gSetClip(true,0, py-45-imgLvUp[2].h/2, lcdW, imgLvUp[2].h);
	drawFittingF(px-160,py-45, (xMap.type*1000)+xMap.listNum, 100);
	gSetClip(false,0, 0, lcdW, lcdH);
	
	drawPacker(imgPopupBtn0, px, py+158, 0, imgH(imgPopupBtn0)/2, imgW(imgPopupBtn0), imgH(imgPopupBtn0)/2, VH);
	setFontSize(20);
	gDrawStringBold(px-2, py-2+158, "닫기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
	setFontSize(11);
	xTouchClr.wPos = imgW(imgPopupBtn0);
	xTouchClr.hPos = imgH(imgPopupBtn0)/2;
	xTouchClr.xPos = px- xTouchClr.wPos/2;
	xTouchClr.yPos = py+158 - xTouchClr.hPos/2;;
	
}




float getSellPer()
{
	float resultNum = 0.1f;
	int totalTrendTempFloor = 0;
	int trendTempFloor[5];
	
	int totalSexTempFloor[2];
	totalSexTempFloor[0] = 0;
	totalSexTempFloor[1] = 0;
	int sexTempFloor[2][5];
	
	int totalHangerTempFloor = 0;
	int hangerTempFloor[5];
	
	int totalAccessoryTempFloor = 0;
	int accessoryTempFloor[5];
	
	int totalSellTempFloor = 0;
	int sellTempFloor[5];
	
	for(int t=0;t<xMap.totalFloor;t++)
	{
		resetSellTableInfo(t);
		if(xSell.totalTrend[t] > 0)
			trendTempFloor[totalTrendTempFloor++] = t;
		
		if(xSell.totalSex[0][t] > 0)
			sexTempFloor[0][totalSexTempFloor[0]++] = t;
		
		if(xSell.totalSex[1][t] > 0)
			sexTempFloor[1][totalSexTempFloor[1]++] = t;
		
		if(xSell.totalHanger[t] > 0)
			hangerTempFloor[totalHangerTempFloor++] = t;
		
		if(xSell.totalAccessory[t] > 0)
			accessoryTempFloor[totalAccessoryTempFloor++] = t;
		
		if(xSell.totalSell[t] > 0)
			sellTempFloor[totalSellTempFloor++] = t;
	}
	
	
	
	
	if(totalSexTempFloor[0] > 0 && totalSexTempFloor[1] > 0)
		resultNum += 65.0f;
	else if(totalSexTempFloor[0] > 0)
		resultNum += 53.6f;
	else if(totalSexTempFloor[1] > 0)
		resultNum += 46.4f;
	if(totalHangerTempFloor > 0 && totalAccessoryTempFloor > 0)
		resultNum += 15.0f;
	
	

	M_Boolean isFitting = FALSE;
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
		{
			if(xShowWindowInfo[floor][ss].isUse == TRUE)
			{
				for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
				{
					if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
					{
						isFitting = TRUE;
						break;
					}
				}
			}
		}
	}
	
	
	
	if(isFitting == TRUE)
	{
		resultNum += 20.0f;
	}
	return resultNum;
}

float getSellTime()
{
	//npc생성속도
	int makeTime = getWorldmapNpcMakeTime();
	//방문확률
	float inShopPer = (float)xInShopPer.inShopPerTotal.oriData*0.01f;
	//판매확률
	float sellPer = getSellPer()*0.01f;	//뻗을수도 있으니 기본 1
	//개당판매초
	float sellTime = ((float)makeTime/inShopPer/sellPer)/30.0f;

	if(sellTime <= 0)
		sellTime = 100000000;
	
		
	
	return sellTime;
}

int getSellEndTime()
{
	int result=0;
	
	//개당판매시간
	float sellTime = getSellTime();
	
	int totalSellItemNum = 0;
	
	for(int floor=0;floor<xMap.totalFloor;floor++)
		totalSellItemNum += xSell.totalItemNum[floor];
		
	
	result = totalSellItemNum*sellTime;
	return result;
}

void drawLinkInfo(int x,int y,int colorType)
{
	drawPacker(imgLinkInfoIcon, x, y, 0, 0, imgW(imgLinkInfoIcon), imgH(imgLinkInfoIcon), VH);
	switch(colorType)
	{
	case 0:
		gSetColor(82, 49, 38);
		break;
	case 1:
		gSetColor(255, 255, 255);
		break;
			
	}
	
	setFontSize(20);
	switch(xLinkInfo.total)
	{
	case 1:
		gDrawString(x+50, y+2, xLinkInfo.strTemp[0], VL);
		break;
	case 2:
		gDrawString(x+50, y+2-16, xLinkInfo.strTemp[0], VL);
		gDrawString(x+50, y+2+16, xLinkInfo.strTemp[1], VL);
		break;
	case 3:
		gDrawString(x+50, y+2-32, xLinkInfo.strTemp[0], VL);
		gDrawString(x+50, y+2, xLinkInfo.strTemp[1], VL);
		gDrawString(x+50, y+2+32, xLinkInfo.strTemp[2], VL);
		break;
	}
		
	setFontSize(11);
}





void drawNewIcon(int x,int y)
{
	
	int newImgNum = DONT;
	switch(gameCnt%50)
	{
		case 41:newImgNum = 0;	break;
		case 42:newImgNum = 1;	break;
		case 43:newImgNum = 2;	break;
		case 44:newImgNum = 3;	break;
		case 45:newImgNum = 4;	break;
	}
		
	drawPacker(imgProductionMenuObj8, x, y, 0, 0, imgW(imgProductionMenuObj8), imgH(imgProductionMenuObj8), VH);
	if(newImgNum != DONT)
		drawPacker(imgProductionMenuObj10, x, y, 0, imgH(imgProductionMenuObj10)/5*newImgNum, imgW(imgProductionMenuObj10), imgH(imgProductionMenuObj10)/5, VH);
}

void drawServerSell()
{
	int px = cx;
	int py = cy;
	drawPacker(imgPopupBg, px, py, 0, 0, imgW(imgPopupBg), imgH(imgPopupBg), VH);

	gSetColor(44, 26, 26);
	if(xServerSell.sellNum < xServerSell.sellNumMax)
	{
		sprintf(strTempS, "진열해 두신 의상\n%d벌이 모두 판매되었습니다.",xServerSell.sellNum);
	}
	else
	{
		sprintf(strTempS, "진열해 두신 의상 중\n%d벌이 판매되었습니다.",xServerSell.sellNum);
	}
	
	gDrawString(px-110,py-26,strTempS,VH);
	
	int speakingNpc = 0;
	if(speakingNpc != DONT)
	{
		if(xPopup.speakingNpcNum != speakingNpc)
		{
			xPopup.speakingNpcNum = speakingNpc;
			
			freeImg(&imgPopupNpc[0]);
			freeImg(&imgPopupNpc[1]);
			freeImg(&imgPopupNpc[2]);
			freeImg(&imgPopupNpc[3]);
			
			sprintf(strTempS, "popupnpc%d.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[0]);
			sprintf(strTempS, "popupnpc%da.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[1]);
			sprintf(strTempS, "popupnpc%db.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[2]);
			sprintf(strTempS, "popupnpc%dc.png",xPopup.speakingNpcNum);
			loadImg(strTempS, &imgPopupNpc[3]);
		}
	}
	
	if(xPopup.speakingNpcNum != DONT)
	{
		drawPacker(imgPopup2, px-16,py-150, 0, 0, imgW(imgPopup2), imgH(imgPopup2), VH);
		gSetColor(138, 117, 111);
		setFontSize(14);
		gDrawString(px-16,py-156,"판매정보",VH);
		setFontSize(11);
		drawImage(&imgPopupNpc[0], px+180,py+200, 0, 0, imgPopupNpc[0].w, imgPopupNpc[0].h, BH);
		drawImage(&imgPopupNpc[1], px+180,py+200-imgPopupNpc[0].h, 0, 0, imgPopupNpc[1].w, imgPopupNpc[1].h, BH);

	}
	drawBtn(px-110,py+156,BTN_OK_CONFIRM);

	
	/*
	gSetColor(255, 255, 255);
	fillRect(px-350, py+102-20, 500, 50);
	gSetColor(44, 26, 26);
	sprintf(strTempS, "TEST>>지난시간:%d초,개당판매초:%d초,판매갯수:(%d/%d)",xServerSell.sleepTime,xServerSell.sellTime,xServerSell.sellNum,xServerSell.sellNumMax);
	gDrawString(px-110,py+102,strTempS,VH);
	*/

}


void makeFire(int x,int y,int makeNum)
{
	for(int k=0;k<FIREMAX;k++)
	{
		if(xFire[k].state == FIRE_STATE_DONT)
		{
			xFire[k].state = FIRE_STATE_PLAY;
			
			xFire[k].x = x;
			xFire[k].y = y;
			xFire[k].reSize = ranDom(10, 400);
			xFire[k].fSpeed = ranDom(1, 40);
			xFire[k].fRad = ranDom(0, 359);
			xFire[k].imageNum = ranDom(0, 9);
			
			xFire[k].isReSize = FALSE;
			
			
			xFire[k].anyCntMax = ranDom(10, 40);
			xFire[k].anyCnt = 0;
			makeNum--;
		}
		if(makeNum <= 0)
			break;
	}
}
void drawFire()
{
	for(int k=0;k<FIREMAX;k++)
	{
		if(xFire[k].state == FIRE_STATE_PLAY)
		{
			xFire[k].fSpeed = xFire[k].fSpeed*0.8f;
			
			if(xFire[k].fSpeed < 1.5f)
				xFire[k].fSpeed = 1.5f;
			
			getRadiusPos(xFire[k].x,xFire[k].y,xFire[k].fSpeed,xFire[k].fRad);
				
			xFire[k].x = xRadius.pos[XPOS];
			xFire[k].y = xRadius.pos[YPOS];
			
			xGame.isBlend = TRUE;
			xGame.blendType = BLEND_ADDP;
						
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = xFire[k].reSize*(xFire[k].anyCntMax-xFire[k].anyCnt)/xFire[k].anyCntMax;
						
			
			int per=0;
			per = xFire[k].anyCnt*100/xFire[k].anyCntMax;
			
			
			//내 원래크기에서 내현재크기 %
			
			if(per > 30)
			{
				if(xFire[k].isReSize == FALSE)
				{
					if(ranDom(0, 100) < 30)
					{
						xFire[k].isReSize = TRUE;
						xFire[k].resizeCnt = 0;
					}
				}
			}
			
			if(xFire[k].isReSize == TRUE)
			{
				switch(xFire[k].resizeCnt++)
				{
				case 0:
					xGame.reSize = (((100-per)*xFire[k].reSize/100)+xFire[k].reSize)/2;
					break;
				case 1:
					xGame.reSize = xFire[k].reSize;
					break;
				case 2:
					xGame.reSize = (((100-per)*xFire[k].reSize/100)+xFire[k].reSize)/2;
					xFire[k].isReSize = FALSE;
					break;
				}
			}
			drawPacker((imgFire0+xFire[k].imageNum), xFire[k].x, xFire[k].y, 0, 0, imgW((imgFire0+xFire[k].imageNum)), imgH((imgFire0+xFire[k].imageNum)), VH);
			xGame.isReSizeDraw = FALSE;
			xGame.isBlend = FALSE;
			
			
			if(++xFire[k].anyCnt > xFire[k].anyCntMax)
				xFire[k].state = FIRE_STATE_DONT;
		}
	}
}

M_Boolean drawTrendTouchAny0(int x,int y,int anyCnt)
{
	M_Boolean isResult = FALSE;
	int alpha = 0;
	int scale = 0;
	
	int startAnyCnt = anyCnt-1;
	//이펙트
	if(startAnyCnt >= 0)
	{
		switch(startAnyCnt)
		{
		case 0:alpha=	 0;scale=0;break;
		case 1:alpha=	 50;scale=16;break;
		case 2:alpha=	 100;scale=33;break;
		case 3:alpha=	 90.909;scale=50;break;
		case 4:alpha=	 81.818;scale=66;break;
		case 5:alpha=	 72.727;scale=83;break;
		case 6:alpha=	 63.636;scale=100;break;
		case 7:alpha=	 54.546;scale=102;break;
		case 8:alpha=	 45.454;scale=105;break;
		case 9:alpha=	 36.364;scale=108;break;
		case 10:alpha=	 27.273;scale=111;break;
		case 11:alpha=	 18.182;scale=114;break;
		case 12:alpha=	 9.091;scale=117;break;
		default:
			alpha= 0;
			scale=120;
			isResult = TRUE;
			break;
		}
		setAlpha(alpha*ALPHA_MAX/100);
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = scale;
		drawPacker(imgTrendEff1, x, y, 0, 0, imgW(imgTrendEff1), imgH(imgTrendEff1), VH);
		xGame.isReSizeDraw = FALSE;
		setAlpha(ALPHA_MAX);
	}
	
	return isResult;
}

M_Boolean drawTrendTouchAny1(int x,int y,int anyCnt)
{
	M_Boolean isResult = FALSE;
	int alpha = 0;
	int scale = 0;
	
	int startAnyCnt = anyCnt-1;
	//보너스문구
	if(startAnyCnt >= 0)
	{
		switch(startAnyCnt)
		{
			case 0:alpha=	 0;scale = 0;break;
			case 1:alpha=	 50;scale = 8;break;
			case 2:alpha=	 54.546;scale = 16;break;
			case 3:alpha=	 59.091;scale = 25;break;
			case 4:alpha=	 63.636;scale = 33;break;
			case 5:alpha=	 68.182;scale = 41;break;
			case 6:alpha=	 72.727;scale = 50;break;
			case 7:alpha=	 77.273;scale = 58;break;
			case 8:alpha=	 81.818;scale = 66;break;
			case 9:alpha=	 86.364;scale = 75;break;
			case 10:alpha=	 90.909;scale = 83;break;
			case 11:alpha=	 95.454;scale = 91;break;
			case 12:alpha=	 100;scale = 100;break;
			case 13:alpha=	 88.889;scale = 102;break;
			case 14:alpha=	 77.778;scale = 104;break;
			case 15:alpha=	 66.667;scale = 106;break;
			case 16:alpha=	 55.556;scale = 108;break;
			case 17:alpha=	 44.444;scale = 110;break;
			case 18:alpha=	 33.333;scale = 112;break;
			case 19:alpha=	 22.222;scale = 114;break;
			case 20:alpha=	 11.111;scale = 116;break;
			case 21:alpha=	 0;scale = 0;break;
			default:
				alpha=	 0;scale = 0;
				isResult = TRUE;
				break;
		}
		setAlpha(alpha*ALPHA_MAX/100);
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = scale;
		drawPacker(imgTrendEff0, x, y, 0, 0, imgW(imgTrendEff0), imgH(imgTrendEff0), VH);
		xGame.isReSizeDraw = FALSE;
		setAlpha(ALPHA_MAX);
	}
	return isResult;
}

void setFashionShow(int severNum)
{
	xFashionShow.isSeverNumLoad = TRUE;
	xFashionShow.serverTotalTrend = 0;
	for(int i=0;i<3;i++)
	{
		if(xFashionShowServer[severNum].trend[i] != DONT)
			xFashionShow.severTrendSlot[xFashionShow.serverTotalTrend++] = xFashionShowServer[severNum].trend[i];
	}
	
	
	xFashionShow.serverTotalConcept = 0;
	for(int i=0;i<2;i++)
	{
		if(xFashionShowServer[severNum].concept[i] != DONT)
			xFashionShow.severConceptSlot[xFashionShow.serverTotalConcept++] = xFashionShowServer[severNum].concept[i];
	}
	
	xFashionShow.serverTotalColor = 0;
	for(int i=0;i<2;i++)
	{
		if(xFashionShowServer[severNum].color[i] != DONT)
			xFashionShow.severColorSlot[xFashionShow.serverTotalColor++] = xFashionShowServer[severNum].color[i];
	}

	xFashionShow.serverSex = xFashionShowServer[severNum].sex;
	xFashionShow.serverInOut = xFashionShowServer[severNum].inOut;
	xFashionShow.serverLayeredMin = xFashionShowServer[severNum].layeredMin;
	xFashionShow.serverLayeredMax = xFashionShowServer[severNum].layeredMax;
}



M_Boolean checkModelFittingCode(int code,int inventoryModelNum)
{
	for(int i=0;i<xModel.totalInventoryModel;i++)
	{
		if(i == inventoryModelNum)
			continue;
		
		for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
		{
			if(xInventoryModel[i].xF.code[ff] != DONT)
			{
				if(code == xInventoryModel[i].xF.code[ff])
					return TRUE;
			}
			
		}
	}
	return FALSE;
}

//이벤트 상자 그려지는 곳
void addEventBox(int img,int x,int y,int floor,int type,int h,int anyCnt,float touchImgWH)
{
	drawPacker(img, x, y, 0, imgH(img)/h*anyCnt, imgW(img), imgH(img)/h, VH);
	
	xEventBox[floor].type[xEventBox[floor].totalNum] = type;
	xEventBox[floor].xTouch[xEventBox[floor].totalNum].wPos = (float)imgW(img)*touchImgWH;
	xEventBox[floor].xTouch[xEventBox[floor].totalNum].hPos = (float)imgH(img)/h*touchImgWH;
	xEventBox[floor].xTouch[xEventBox[floor].totalNum].xPos = x-xEventBox[floor].xTouch[xEventBox[floor].totalNum].wPos/2;
	xEventBox[floor].xTouch[xEventBox[floor].totalNum].yPos = y-xEventBox[floor].xTouch[xEventBox[floor].totalNum].hPos/2;
	xEventBox[floor].totalNum++;
}


void setCommaNum(char *strTempS,int num)
{
		
	
	if(1000000 <= num)
		sprintf(strTempS, "%d,%d%d%d,%d%d%d",num/1000000,(num/100000)%10,(num/10000)%10,(num/1000)%10,(num/100)%10,(num/10)%10,num%10);
	else if(1000 <= num)
		sprintf(strTempS, "%d,%d%d%d",num/1000,(num/100)%10,(num/10)%10,num%10);
	else
		sprintf(strTempS, "%d",num);
}


void checkSocialDay()
{
	
	if(xSaveTemp.socialDay != xCalendar.nowDay)
	{
		xSaveTemp.socialDay = xCalendar.nowDay;
		xSaveTemp.socialItem[0] = getSocialTemp(0);
		xSaveTemp.socialItem[1] = getSocialTemp(1);
		
		////////////////////////////////////////////////////////////
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RESETSOCIAL, FALSE);
		////////////////////////////////////////////////////////////
		
		xSave.socialCntHanger = 0;
		xSave.socialCntAccessory = 0;
		gameSave(SAVE_SLOT_GAME);
	}
}


//type 0:옷1:악세
int getSocialTemp(int type)
{
    int totalSlot_ALL=0;
    int slot_ALL[2048];
    
	int totalSlot=0;
	int slot[2048];
	int ranTemp;
	
	int resultItemCode = DONT;
	
	ranTemp = ranDom(0, 100);
	int lvLimitS;
	int lvLimitE;
	
	if(xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 41;
		lvLimitE = 100;
	}
	else if(xBalanceData.trend31Per[xSaveTemp.lv.oriData]+xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 31;
		lvLimitE = 40;
	}
	else if(xBalanceData.trend21Per[xSaveTemp.lv.oriData]+xBalanceData.trend31Per[xSaveTemp.lv.oriData]+xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 21;
		lvLimitE = 30;
	}
	else if(xBalanceData.trend11Per[xSaveTemp.lv.oriData]+xBalanceData.trend21Per[xSaveTemp.lv.oriData]+xBalanceData.trend31Per[xSaveTemp.lv.oriData]+xBalanceData.trend41Per[xSaveTemp.lv.oriData] > ranTemp)
	{
		lvLimitS = 11;
		lvLimitE = 20;
	}
	else
	{
		lvLimitS = 0;
		lvLimitE = 10;
	}
	
	
	
	
	M_Boolean isCheck;
	for(int i=0;i<FASHIONDATATYPEMAX;i++)
	{
		for(int j=0;j<FASHIONDATAMAX;j++)
		{
			if(xInventoryFashion.isOpen[i][j] == TRUE  && xFashionData[i][j].isStaff == 0)
			{
				isCheck = FALSE;
				switch(type)
				{
					case 0:	//의상
						switch(i)
					{
						case F_TYPE_OUTER:
						case F_TYPE_TOP:
						case F_TYPE_BOTTOM:
						case F_TYPE_ONEPIECE:
							isCheck = TRUE;
							break;
					}
						break;
					case 1:	//잡화
						switch(i)
					{
						case F_TYPE_SHOES:
						case F_TYPE_BAG:
						case F_TYPE_ACCECSSORY:
							isCheck = TRUE;
							break;
					}
						break;
				}
				
                
                if(xFashionData[i][j].makeTime.oriData > 3600)
                    isCheck = FALSE;
                
                
                if(isCheck == TRUE)
                    slot_ALL[totalSlot_ALL++] = (i*1000)+j;
                
                
				if(xFashionData[i][j].lv < lvLimitS || xFashionData[i][j].lv > lvLimitE)
					isCheck = FALSE;
                
				if(isCheck == TRUE)
					slot[totalSlot++] = (i*1000)+j;
			}
		}
	}
		
	if(totalSlot > 0)
		resultItemCode = slot[ranDom(0, totalSlot-1)];
	
	if(resultItemCode == DONT)
	{
		switch(type)
		{
		case 0:
			resultItemCode = 0;
            if(totalSlot_ALL > 0)
                resultItemCode = slot_ALL[ranDom(0, totalSlot_ALL-1)];
			break;
		case 1:
			if(xInventoryFashion.isOpen[4][0] == FALSE)
				resultItemCode = DONT;
			else
            {
				resultItemCode = 4000;
                
                if(totalSlot_ALL > 0)
                    resultItemCode = slot_ALL[ranDom(0, totalSlot_ALL-1)];
            }
			break;
		}
	}    
    
    
    printf("totalSlot_ALL>>%d\n",totalSlot_ALL);
    printf("resultItemCode>>%d\n",resultItemCode);
    
    
    
	return resultItemCode;
}

void drawSocialProfile()
{
	int px = cx;
	int py = cy;
	
	int mapXpos,mapYpos;
	
	mapXpos = xMap.pointX + (((xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].y-(xMap.nowFloor*5)) - (xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].x-(xMap.nowFloor*5))) * (TILEW / 2));
	if ((xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].y + xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].x) % 2 == 1)
		mapYpos = xMap.pointY+ ((((xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].y-(xMap.nowFloor*5)) + (xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].x-(xMap.nowFloor*5))) / 2) * TILEH) + (TILEH / 2);
	else
		mapYpos = xMap.pointY+ ((((xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].y-(xMap.nowFloor*5)) + (xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].x-(xMap.nowFloor*5))) / 2) * TILEH);
		
	setMapData(xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].interiorCode);
	
	int userX = mapXpos+xObj.xObjData[xMap.type][xMap.listNum].x[xMap.rever];
	int userY = mapYpos+xObj.xObjData[xMap.type][xMap.listNum].y[xMap.rever]-(xObj.img[xMap.type][xMap.listNum].h/2)-15;
	
	px = getWorldMapPos(userX,cx);
	py = getWorldMapPos(userY,cy);
	
	for(int k=0;k<xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].totalSocialSlot;k++)
	{
		subTemp[XPOS] = px-((xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].totalSocialSlot-1)*53)+(k*106);
		subTemp[YPOS] = py;
		
		drawFriendProfile(subTemp[XPOS], subTemp[YPOS]-3, xFriendData[xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].xSocialSlot[k].friendDataSlotNum].userNum, 110);
		
		
		xSocialProfile.xTouchSlot[k].wPos = 80;
		xSocialProfile.xTouchSlot[k].hPos = 80;
		xSocialProfile.xTouchSlot[k].xPos = subTemp[XPOS]-xSocialProfile.xTouchSlot[k].wPos/2;
		xSocialProfile.xTouchSlot[k].yPos = subTemp[YPOS]-xSocialProfile.xTouchSlot[k].hPos/2;
		

		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xSocialProfile.xTouchSlot[k].xPos, xSocialProfile.xTouchSlot[k].yPos, xSocialProfile.xTouchSlot[k].wPos, xSocialProfile.xTouchSlot[k].hPos);
		setAlpha(ALPHA_MAX);
		 */

	}
				
	switch(xSellTableInfo[xMap.nowFloor][xSocialProfile.selectSellTableNum].totalSocialSlot)
	{
	case 2:
		drawPacker(imgWorldMapLv5, px, py, 0, 0, imgW(imgWorldMapLv5), imgH(imgWorldMapLv5)/2, VH);
		break;
	case 3:
		drawPacker(imgWorldMapLv5, px, py, 0, imgH(imgWorldMapLv5)/2, imgW(imgWorldMapLv5), imgH(imgWorldMapLv5)/2, VH);
		break;
	}
}


M_Boolean checkBuildPos(int type,int listNum,int rever)
{
	M_Boolean isResult = FALSE;
		
	if(type == INTERIOR_TYPE_SHOWWINDOW)
	{
		if(xInterior.buildMapTileYpos -xMap.shopPointY+1 == 0)		//x좌표설치중
		{
			for(int w=0;w<xObj.xObjData[type][listNum].w[rever];w++)
			{
				if(xMap.interiorDataWall[xMap.nowFloor][0][(xInterior.buildMapTileXpos+w-xMap.shopPointX)] == TRUE)
				{
					isResult = TRUE;
					break;
				}
			}
			for(int w=0;w<xObj.xObjData[type][listNum].w[rever];w++)
			{
				for(int h=0;h<xObj.xObjData[type][listNum].h[rever];h++)
				{
					if(xMap.interiorData[xMap.nowFloor][(xInterior.buildMapTileXpos+w-xMap.shopPointX)][(xInterior.buildMapTileYpos+h-xMap.shopPointY)+1] == TRUE)
					{
						isResult = TRUE;
						break;
					}
				}
			}
		}
		else
		{
			for(int h=0;h<xObj.xObjData[type][listNum].h[rever];h++)
			{
				if(xMap.interiorDataWall[xMap.nowFloor][1][(xInterior.buildMapTileYpos+h-xMap.shopPointY)] == TRUE)
				{
					isResult = TRUE;
					break;
				}
			}
			for(int w=0;w<xObj.xObjData[type][listNum].w[rever];w++)
			{
				for(int h=0;h<xObj.xObjData[type][listNum].h[rever];h++)
				{
					if(xMap.interiorData[xMap.nowFloor][(xInterior.buildMapTileXpos+w-xMap.shopPointX)+1][(xInterior.buildMapTileYpos+h-xMap.shopPointY)] == TRUE)
					{
						isResult = TRUE;
						break;
					}
				}
			}
			
		}
	}
	else if(type == INTERIOR_TYPE_WALLITEM || type == INTERIOR_TYPE_DOOR)
	{
		if(xInterior.buildMapTileYpos -xMap.shopPointY+1 == 0)		//x좌표설치중
		{
			for(int w=0;w<xObj.xObjData[type][listNum].w[rever];w++)
			{
				if(xMap.interiorDataWall[xMap.nowFloor][0][(xInterior.buildMapTileXpos+w-xMap.shopPointX)] == TRUE)
				{
					isResult = TRUE;
					break;
				}
			}
		}
		else
		{
			
			for(int h=0;h<xObj.xObjData[type][listNum].h[rever];h++)
			{
				
				if(xMap.interiorDataWall[xMap.nowFloor][1][(xInterior.buildMapTileYpos+h-xMap.shopPointY)] == TRUE)
				{
					isResult = TRUE;
					break;
				}
			}
		}
	}
	else
	{
		int subX = 0;
		int subY = 0;
		int subW = 0;
		int subH = 0;
		
		switch(type)
		{
			case INTERIOR_TYPE_PAYMENT:
				if(rever == 0)
				{
					subX = -1;
					subW = 1;
				}
				else
				{
					subY = -1;
					subH = 1;
				}
				break;
			case INTERIOR_TYPE_HANGER:
			case INTERIOR_TYPE_ACCESSORY:
			case INTERIOR_TYPE_FITTINGROOM:
				if(rever == 0)
					subW = 1;
				else
					subH = 1;
				break;
			case INTERIOR_TYPE_OBJ:
				if(xObj.xObjData[type][listNum].isChair == TRUE)
				{
					if(rever == 0)
						subW = 1;
					else
						subH = 1;
				}
				break;
		}

		
		
				
		for(int w=subX;w<xObj.xObjData[type][listNum].w[rever]+subW;w++)
		{
			for(int h=subY;h<xObj.xObjData[type][listNum].h[rever]+subH;h++)
			{
				if(xMap.interiorData[xMap.nowFloor][(xInterior.buildMapTileXpos+w-xMap.shopPointX)][(xInterior.buildMapTileYpos+h-xMap.shopPointY)] == TRUE || xInterior.buildMapTileXpos+w < xMap.shopPointX || xInterior.buildMapTileYpos+h < xMap.shopPointY)
				{
					isResult = TRUE;
					break;
				}
			}
		}
	}
	return isResult;
}



int getMonthToDay(int month)
{
	int resultDay = 0;
	for(int i=1;i<month;i++)
	{
		switch(i)
		{
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			//31
			resultDay +=31;
			break;
		case 2:
			//28
			resultDay += 28;
			break;
		default:
			//30
			resultDay += 30;
			break;
		}
	}
	return resultDay;
}

void checkAccessBonus()
{
	//혹시 모를 에러대비 서버에서 처리가능한 방어책
	if(xAccessBonus.accessDay == DONT)
		return;
	
	int day = getMonthToDay(xCalendar.nowMonth);
	day += xCalendar.nowDay;
	
	

		
	
	if(xAccessBonus.accessDay != day)
	{
		if(day > xAccessBonus.accessDay+ACCESSBONUS_LIMITDAY)
			xAccessBonus.accessCount = 0;
					
		xAccessBonus.accessDay = day;
		xWorldMap.state = WORLDMAP_STATE_ACCESSBONUS;
		xAccessBonus.state = ACCESSBONUS_STATE_MAIN;
		accessBonusFreeLoad(TRUE);
	}
}

void accessBonusFreeLoad(M_Boolean isLoad)
{
	//스태프생성
	if(isLoad == TRUE)
	{
		loadImg("accessbonusbg0.png", &imgAccessBonusBg[0]);
		loadImg("accessbonusbg1.png", &imgAccessBonusBg[1]);
		loadImg("accessbonusbg2.png", &imgAccessBonusBg[2]);
		loadImg("accessbonusbg3.png", &imgAccessBonusBg[3]);
		loadImg("accessbonusbg4.png", &imgAccessBonusBg[4]);
		loadImg("accessbonusicon0.png", &imgAccessBonusIcon[0]);
		loadImg("accessbonusslot0.png", &imgAccessBonusSlot[0]);
		loadImg("accessbonusslot1.png", &imgAccessBonusSlot[1]);
		
		
		for(int i=0;i<20;i++)
		{
			switch(xAccessBonus.slotType[i])
			{
			case ACCESSBONUS_TYPE_GOLD:
				sprintf(strTempS, "accessbonusgoldicon%d.png",xAccessBonus.iconNum[i]);
				break;
			case ACCESSBONUS_TYPE_LOOK:
				sprintf(strTempS, "accessbonuslookicon%d.png",xAccessBonus.iconNum[i]);
				break;
			case ACCESSBONUS_TYPE_CANDY:
				sprintf(strTempS, "accessbonuscandyicon%d.png",xAccessBonus.iconNum[i]);
				break;
			case ACCESSBONUS_TYPE_MODEL:
				sprintf(strTempS, "accessbonusmodelicon%d.png",xAccessBonus.iconNum[i]);
				break;
			case ACCESSBONUS_TYPE_TREND:
				sprintf(strTempS, "accessbonustrendicon%d.png",xAccessBonus.iconNum[i]);
				break;
			}
			loadImg(strTempS, &xAccessBonus.imgIcon[i]);
		}
	}
	else
	{
		freeImg(&imgAccessBonusBg[0]);
		freeImg(&imgAccessBonusBg[1]);
		freeImg(&imgAccessBonusBg[2]);
		freeImg(&imgAccessBonusBg[3]);
		freeImg(&imgAccessBonusBg[4]);
		freeImg(&imgAccessBonusIcon[0]);
		freeImg(&imgAccessBonusSlot[0]);
		freeImg(&imgAccessBonusSlot[1]);
		
		
		for(int i=0;i<20;i++)
		{
			freeImg(&xAccessBonus.imgIcon[i]);
		}
	}
}


void drawAccessBonus()
{
	int px = cx;
	int py = cy;
	
	drawBgFillRect();
	
	
	switch(xAccessBonus.state)
	{
	case ACCESSBONUS_STATE_MAIN:
	case ACCESSBONUS_STATE_STAMP:
		drawImage(&imgAccessBonusBg[0], px, py, 0, 0, imgAccessBonusBg[0].w, imgAccessBonusBg[0].h, VH);
		int num;
		for(int i=0;i<19;i++)
		{
			subTemp[XPOS] = px-294+((i%7)*98);
			subTemp[YPOS] = py-89+((i/7)*98);
			
			if(i < xAccessBonus.accessCount)
				drawImage(&imgAccessBonusSlot[0], subTemp[XPOS], subTemp[YPOS], (imgAccessBonusSlot[0].w/3*0),0, imgAccessBonusSlot[0].w/3, imgAccessBonusSlot[0].h, VH);
			else if(i > xAccessBonus.accessCount)
				drawImage(&imgAccessBonusSlot[0], subTemp[XPOS], subTemp[YPOS], (imgAccessBonusSlot[0].w/3*1),0, imgAccessBonusSlot[0].w/3, imgAccessBonusSlot[0].h, VH);
			else
            {
                if(xWorldMap.state == WORLDMAP_STATE_ACCESSBONUSSHOW)
                {
                    drawImage(&imgAccessBonusSlot[0], subTemp[XPOS], subTemp[YPOS], (imgAccessBonusSlot[0].w/3*1),0, imgAccessBonusSlot[0].w/3, imgAccessBonusSlot[0].h, VH);
                }
                else
                {
                    drawImage(&imgAccessBonusSlot[0], subTemp[XPOS], subTemp[YPOS], (imgAccessBonusSlot[0].w/3*2),0, imgAccessBonusSlot[0].w/3, imgAccessBonusSlot[0].h, VH);
                }
                
                
				
            }
			
			num = (i+1);
			drawNum(&imgAccessBonusBg[2], subTemp[XPOS]-45, subTemp[YPOS]-34, num, -5, VL);
			
			if(num < 10)
				drawImage(&imgAccessBonusBg[1], subTemp[XPOS]-45+28, subTemp[YPOS]-34+5, 0, 0, imgAccessBonusBg[1].w, imgAccessBonusBg[1].h, VH);
			else
				drawImage(&imgAccessBonusBg[1], subTemp[XPOS]-45+28+13, subTemp[YPOS]-34+5, 0, 0, imgAccessBonusBg[1].w, imgAccessBonusBg[1].h, VH);
			
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 50;
			drawImage(&xAccessBonus.imgIcon[i], subTemp[XPOS], subTemp[YPOS]-5, 0, 0, xAccessBonus.imgIcon[i].w, xAccessBonus.imgIcon[i].h, VH);
			xGame.isReSizeDraw = FALSE;
			setSprintfAccessBonusName(strTempS,xAccessBonus.slotType[i],xAccessBonus.slotNum[i]);
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+32, strTempS, VH, 255, 255, 255, 64, 36, 29);
			
            
            
			if(xAccessBonus.accessCount == i && xAccessBonus.state == ACCESSBONUS_STATE_MAIN)
            {
                
                if(xWorldMap.state == WORLDMAP_STATE_ACCESSBONUSSHOW)
                {
                    
                }
                else
                {
                    drawImage(&imgAccessBonusBg[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgAccessBonusBg[4].w, imgAccessBonusBg[4].h, VH);
                }
                
				
            }
			
			if(i < xAccessBonus.accessCount)
				drawImage(&imgAccessBonusBg[3], subTemp[XPOS], subTemp[YPOS], 0,0, imgAccessBonusBg[3].w, imgAccessBonusBg[3].h, VH);
            
            
            
            

			
			if(xAccessBonus.accessCount == i)
			{
				xAccessBonus.stampX = subTemp[XPOS];
				xAccessBonus.stampY = subTemp[YPOS];
			}
		}
		
		subTemp[XPOS] = px-294+(98*6)-49;
		subTemp[YPOS] = py-89+(98*2);
			
		if(19 < xAccessBonus.accessCount)
			drawImage(&imgAccessBonusSlot[1], subTemp[XPOS], subTemp[YPOS], (imgAccessBonusSlot[1].w/3*0),0, imgAccessBonusSlot[1].w/3, imgAccessBonusSlot[1].h, VH);
		else if(19 > xAccessBonus.accessCount)
			drawImage(&imgAccessBonusSlot[1], subTemp[XPOS], subTemp[YPOS], (imgAccessBonusSlot[1].w/3*1),0, imgAccessBonusSlot[1].w/3, imgAccessBonusSlot[1].h, VH);
		else
			drawImage(&imgAccessBonusSlot[1], subTemp[XPOS], subTemp[YPOS], (imgAccessBonusSlot[1].w/3*2),0, imgAccessBonusSlot[1].w/3, imgAccessBonusSlot[1].h, VH);
		
		num = 20;
		drawNum(&imgAccessBonusBg[2], subTemp[XPOS]-45-49, subTemp[YPOS]-34, num, -5, VL);
		drawImage(&imgAccessBonusBg[1], subTemp[XPOS]-45-49+28+13, subTemp[YPOS]-34+5, 0, 0, imgAccessBonusBg[1].w, imgAccessBonusBg[1].h, VH);
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 75;
		drawImage(&xAccessBonus.imgIcon[19], subTemp[XPOS], subTemp[YPOS]-5, 0, 0, xAccessBonus.imgIcon[19].w, xAccessBonus.imgIcon[19].h, VH);
		xGame.isReSizeDraw = FALSE;
		setSprintfAccessBonusName(strTempS,xAccessBonus.slotType[19],xAccessBonus.slotNum[19]);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+32, strTempS, VH, 255, 255, 255, 82, 49, 38);
				
		if(xAccessBonus.accessCount == 19 && xAccessBonus.state == ACCESSBONUS_STATE_MAIN)
			drawImage(&imgAccessBonusBg[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgAccessBonusBg[4].w, imgAccessBonusBg[4].h, VH);
			
		if(19 < xAccessBonus.accessCount)
			drawImage(&imgAccessBonusBg[3], subTemp[XPOS], subTemp[YPOS], 0,0, imgAccessBonusBg[3].w, imgAccessBonusBg[3].h, VH);
		
		if(xAccessBonus.accessCount == 19)
		{
			xAccessBonus.stampX = subTemp[XPOS];
			xAccessBonus.stampY = subTemp[YPOS];
		}
		
		
		subTemp[XPOS] = px-312;
		subTemp[YPOS] = py+197;
		
		sprintf(strTempS,"체크 된 날짜로부터 %d일간 접속을 하지 않는 경우 출석 체크 기록이 사라집니다.",ACCESSBONUS_LIMITDAY);
		gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VL, 86, 255, 229, 33, 20, 20);
		break;
	}
		
	
	switch(xAccessBonus.state)
	{
	case ACCESSBONUS_STATE_STAMP:
		drawStamp(xAccessBonus.stampX, xAccessBonus.stampY, xAccessBonus.anyCnt++,1);
			
		if(xAccessBonus.anyCnt > 65)
		{
			xAccessBonus.state = ACCESSBONUS_STATE_RESULT;
			switch(xAccessBonus.slotType[xAccessBonus.accessCount])
			{
				case ACCESSBONUS_TYPE_GOLD:
					setMoney(xAccessBonus.slotNum[xAccessBonus.accessCount]);
					break;
				case ACCESSBONUS_TYPE_LOOK:
					setCash(xAccessBonus.slotNum[xAccessBonus.accessCount]);
					break;
				case ACCESSBONUS_TYPE_CANDY:
					setTired(xAccessBonus.slotNum[xAccessBonus.accessCount]);
					break;
				case ACCESSBONUS_TYPE_MODEL:
//					setNewModel(xAccessBonus.slotNum[xAccessBonus.accessCount]);
					break;
				case ACCESSBONUS_TYPE_TREND:
					setTrendTemp(xAccessBonus.slotNum[xAccessBonus.accessCount],1);
					playSnd(SND_TREND_POPUP);
					trendFreeLoad(TRUE);
					xWorldMap.isTrend = TRUE;
					xWorldMap.trendInType = 2;	//0오전1오후2그외
					xTrend.state = TREND_STATE_NEW;
					
					break;
			}
			sprintf(xRocks.strTemp, "%d일차",xAccessBonus.accessCount+1);
			setFiveRocksCustom("데일리이벤트","일별보상",xRocks.strTemp,"NULL",1);
			xAccessBonus.accessCountShow = xAccessBonus.accessCount;
			if(++xAccessBonus.accessCount >= 20)
				xAccessBonus.accessCount = 0;
			///////////////////////////////////////////////////////////////////////
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
			////////////////////////////////////////////////////////////
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETACCESS, TRUE);
			////////////////////////////////////////////////////////////
			
			///////////////////////////////////////////////////////////////////
			xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 300;//0:골드,1프리미엄,2캔디머쉰,3직원의상,4모델뽑기,100:첫구매이벤트,101:스페션세일이벤트,102:리뷰이벤트,200:해킹로그,300:출석로그,301:친구초대로그
			xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;//아이템종류(0~5)직원의상 구매시
			xEventQueueNet.code[xEventQueueNet.totalNum] = xAccessBonus.accessCountShow;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BUYGOLD, TRUE);
			///////////////////////////////////////////////////////////////////
			
		}
		
			
		if(xAccessBonus.anyCnt == 17)
			makeFire(xAccessBonus.stampX, xAccessBonus.stampY, 20);
		break;
	case ACCESSBONUS_STATE_RESULT:
		drawAccessBonusResult();
		break;
	}
}

void drawAccessBonusResult()
{
	int px = cx;
	int py = cy;
	
	if(gameCnt%2 == 1)
		makeColorPaper(1);
	drawPacker(imgQuestResult0, px, py, 0, 0, imgW(imgQuestResult0), imgH(imgQuestResult0), VH);

	setFontSize(14);
	gDrawStringBold(px+4, py-189, "보상 아이템", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	drawPacker(imgQuestGiftIcon, px-70, py-190, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
		
	drawImage(&xAccessBonus.imgIcon[xAccessBonus.accessCountShow], px, py-60, 0, 0, xAccessBonus.imgIcon[xAccessBonus.accessCountShow].w, xAccessBonus.imgIcon[xAccessBonus.accessCountShow].h, VH);
	
	setSprintfAccessBonusName(strTempS,xAccessBonus.slotType[xAccessBonus.accessCountShow],xAccessBonus.slotNum[xAccessBonus.accessCountShow]);
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px, py+74, strTempS, VH);
	setFontSize(11);
	drawPacker(imgQuestResult1, px, py+169, 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	setFontSize(14);
	gDrawStringBold(px-2, py+169-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = px-xTouchOk.wPos/2;
	xTouchOk.yPos = py+169-xTouchOk.hPos/2;

}


void initAccessBonus(int code,int type,int num,int iconNum)
{
	xAccessBonus.slotType[code] = type;
	xAccessBonus.slotNum[code] = num;
	xAccessBonus.iconNum[code] = iconNum;
}

void setSprintfAccessBonusName(char * strText,int type,int num)
{
	switch(type)
	{
	case ACCESSBONUS_TYPE_GOLD:
		sprintf(strText, "%dG",num);
		break;
	case ACCESSBONUS_TYPE_LOOK:
		sprintf(strText, "%d룩",num);
		break;
	case ACCESSBONUS_TYPE_CANDY:
		sprintf(strText, "%d캔디",num);
		break;
	case ACCESSBONUS_TYPE_MODEL:
		switch(num)
		{
		case 0:	sprintf(strText, "골드 캐스팅");break;
		case 1:	sprintf(strText, "유료 캐스팅");break;
		case 2:	sprintf(strText, "A~S급 모델 캐스팅");break;
		}
		break;
	case ACCESSBONUS_TYPE_TREND:
		switch(num)
		{
		case 0:	sprintf(strText, "의상 유행");break;
		case 1:	sprintf(strText, "잡화 유행");break;
		}
		break;
	}
}



void prcKakaoPhotoInit()
{
	//처음접속했을경우(=='0'이거나 save파일확인)
	if(xSaveTemp.profileUrl[0] == '0' && xSave.isKakaoPhoto == FALSE)
	{
		//카카오톡 사진 다운로드하기
		switch(xSave.kakaoPhotoState)
		{
		case FRIENDDOWNLOADIMG_STATE_DONT:
			//대기상태라면 이미지 다운로드 큐에 등록해주자
			//////////////////////////////////////////////////////////////////
			addEventQueueNet(0, 0, NETQUEUE_TYPE_KAKAOPHOTOINIT, FALSE);
			//////////////////////////////////////////////////////////////////
			xSave.kakaoPhotoState = FRIENDDOWNLOADIMG_STATE_EVENT;
			break;
		case FRIENDDOWNLOADIMG_STATE_EVENT:
		case FRIENDDOWNLOADIMG_STATE_DOWNING:
			//다운중 상태라면 완료 될때까지 기다리자
			break;
		case FRIENDDOWNLOADIMG_STATE_OK:
			//카카오톡 사진 업로드하기
			//////////////////////////////////////////////////////////////////
			addEventQueueNet(0, 0, NETQUEUE_TYPE_PROFILEPHOTOUPLOAD, FALSE);
			//////////////////////////////////////////////////////////////////
			xSave.isKakaoPhoto = TRUE;
			break;
		}
	}
}


void setLinkSellTable(int code,int sellTableType)
{
	int type;
	int listNum;
	int fashionInteriorType;
	int interiorType;
	
	M_Boolean isSearch = FALSE;
	int selectFloor;
	
	if(code == DONT)
	{
		isSearch = FALSE;
		
		//재고 있다면 행거연결
		if(sellTableType == INTERIOR_TYPE_HANGER || xProduction.haveItemCnt[xMap.nowFloor][0] > 0 || xProductionMenu.totalSuccessInteriorType[0] > 0)
		{
			fashionInteriorType = INTERIOR_TYPE_HANGER;
			//현재층에 해당 타입의 selltable(슬롯갯수남아있는)연결
			resetSellTableInfo(xMap.nowFloor);
			if(xSell.totalEmpty[xMap.nowFloor] > 0)
			{
				for(int ss=0;ss<xSell.totalEmpty[xMap.nowFloor];ss++)
				{
					xSell.selectSellTable = xSell.tableNumSlot_Empty[xMap.nowFloor][ss];
					interiorType = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode/1000;
					
					if(interiorType < 0)
						interiorType = -interiorType;
					
					if(interiorType == fashionInteriorType)
					{
						isSearch = TRUE;
						selectFloor = xMap.nowFloor;
						break;
					}
					
				}
			}
			//현재층에 없다면 전체층 돌림 selltable(슬롯갯수남아있는)연결
			if(isSearch == FALSE)
			{
				for(int floor=0;floor<xMap.totalFloor;floor++)
				{
					if(xMap.nowFloor != floor)
					{
						resetSellTableInfo(floor);
						if(xSell.totalEmpty[floor] > 0)
						{
							for(int ss=0;ss<xSell.totalEmpty[floor];ss++)
							{
								xSell.selectSellTable = xSell.tableNumSlot_Empty[floor][ss];
								interiorType = xSellTableInfo[floor][xSell.selectSellTable].interiorCode/1000;
								
								if(interiorType < 0)
									interiorType = -interiorType;
								
								if(interiorType == fashionInteriorType)
								{
									isSearch = TRUE;
									selectFloor = floor;
									break;
								}
								
							}
							if(isSearch == TRUE)
								break;
						}
					}
				}
				
			}
			
			if(isSearch == TRUE)
			{
				xWorldMap.state	= WORLDMAP_STATE_SELL;
				xMap.nowFloor = selectFloor;
				setSellSelectItemSlot();
				for(int k=0;k<9;k++)
					xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[k].waitSlot = DONT;
				xSell.selectSlot = DONT;
			}
		}
		//재고 있다면 진열대 연결
		if(isSearch == FALSE && (sellTableType == INTERIOR_TYPE_ACCESSORY || xProduction.haveItemCnt[xMap.nowFloor][1] > 0 || xProductionMenu.totalSuccessInteriorType[0] > 0))
		{
			fashionInteriorType = INTERIOR_TYPE_ACCESSORY;
			//현재층에 해당 타입의 selltable(슬롯갯수남아있는)연결
			resetSellTableInfo(xMap.nowFloor);
			if(xSell.totalEmpty[xMap.nowFloor] > 0)
			{
				for(int ss=0;ss<xSell.totalEmpty[xMap.nowFloor];ss++)
				{
					xSell.selectSellTable = xSell.tableNumSlot_Empty[xMap.nowFloor][ss];
					interiorType = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode/1000;
					
					if(interiorType < 0)
						interiorType = -interiorType;
					
					if(interiorType == fashionInteriorType)
					{
						isSearch = TRUE;
						selectFloor = xMap.nowFloor;
						break;
					}
					
				}
			}
			//현재층에 없다면 전체층 돌림 selltable(슬롯갯수남아있는)연결
			if(isSearch == FALSE)
			{
				for(int floor=0;floor<xMap.totalFloor;floor++)
				{
					if(xMap.nowFloor != floor)
					{
						resetSellTableInfo(floor);
						if(xSell.totalEmpty[floor] > 0)
						{
							for(int ss=0;ss<xSell.totalEmpty[floor];ss++)
							{
								xSell.selectSellTable = xSell.tableNumSlot_Empty[floor][ss];
								interiorType = xSellTableInfo[floor][xSell.selectSellTable].interiorCode/1000;
								
								if(interiorType < 0)
									interiorType = -interiorType;
								
								if(interiorType == fashionInteriorType)
								{
									isSearch = TRUE;
									selectFloor = floor;
									break;
								}
								
							}
							if(isSearch == TRUE)
								break;
						}
					}
				}
				
			}
			
			if(isSearch == TRUE)
			{
				xWorldMap.state	= WORLDMAP_STATE_SELL;
				xMap.nowFloor = selectFloor;
				setSellSelectItemSlot();
				for(int k=0;k<9;k++)
					xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[k].waitSlot = DONT;
				xSell.selectSlot = DONT;
			}
		}
		//생산연결
		if(isSearch == FALSE)
		{
			setStateProductionMenu();
		}
	}
	else
	{
		type = code/1000;
		listNum = code%1000;
			
		switch(type)
		{
		case F_TYPE_OUTER:
		case F_TYPE_TOP:
		case F_TYPE_BOTTOM:
		case F_TYPE_ONEPIECE:
			fashionInteriorType = INTERIOR_TYPE_HANGER;
			break;
		case F_TYPE_SHOES:
		case F_TYPE_BAG:
		case F_TYPE_ACCECSSORY:
			fashionInteriorType = INTERIOR_TYPE_ACCESSORY;
			break;
		}
		
		
		
		M_Boolean isCheck = FALSE;
		for(int typeTab=0;typeTab<2;typeTab++)
		{
			
			for(int i=0;i<6;i++)
			{
				if(xProductionMenu.slotCode[typeTab][i] != DONT)
					setMapData(xProductionMenu.slotCode[typeTab][i]);
				if(xProductionMenu.state[typeTab][i] == PRODUCTIONMENUSLOT_STATE_PLAY
				   && xProductionMenu.slotCode[typeTab][i] != DONT)
				{
					if(xProductionMenu.slotFlowTime[typeTab][i]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
					{
						if(xMap.type == type && xMap.listNum == listNum)
						{
							isCheck = TRUE;
							break;
						}
					}
				}
			}
		}
		
		
		
		
		
		//재고가 있다면
		if(xInventoryFashion.haveNum[type][listNum] > 0 || isCheck == TRUE)
		{
			isSearch = FALSE;

			//현재층에 해당 타입의 selltable(슬롯갯수남아있는)연결
			resetSellTableInfo(xMap.nowFloor);
			
			if(xSell.totalEmpty[xMap.nowFloor] > 0)
			{
				for(int ss=0;ss<xSell.totalEmpty[xMap.nowFloor];ss++)
				{
					xSell.selectSellTable = xSell.tableNumSlot_Empty[xMap.nowFloor][ss];
					interiorType = xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].interiorCode/1000;
					
					if(interiorType < 0)
						interiorType = -interiorType;
					
					if(interiorType == fashionInteriorType)
					{
						isSearch = TRUE;
						selectFloor = xMap.nowFloor;
						break;
					}
					
				}
			}
			//현재층에 없다면 전체층 돌림 selltable(슬롯갯수남아있는)연결
			if(isSearch == FALSE)
			{
				for(int floor=0;floor<xMap.totalFloor;floor++)
				{
					if(xMap.nowFloor != floor)
					{
						resetSellTableInfo(floor);
						if(xSell.totalEmpty[floor] > 0)
						{
							for(int ss=0;ss<xSell.totalEmpty[floor];ss++)
							{
								xSell.selectSellTable = xSell.tableNumSlot_Empty[floor][ss];
								interiorType = xSellTableInfo[floor][xSell.selectSellTable].interiorCode/1000;
								
								if(interiorType < 0)
									interiorType = -interiorType;
								
								if(interiorType == fashionInteriorType)
								{
									isSearch = TRUE;
									selectFloor = floor;
									break;
								}
								
							}
							if(isSearch == TRUE)
								break;
						}
					}
				}
			}
			
			if(isSearch == TRUE)
			{
				xWorldMap.state	= WORLDMAP_STATE_SELL;
				xMap.nowFloor = selectFloor;
				setSellSelectItemSlot();
				for(int k=0;k<9;k++)
					xSellTableInfo[xMap.nowFloor][xSell.selectSellTable].xSlot[k].waitSlot = DONT;
				xSell.selectSlot = DONT;
			}
			else
			{
				//남아있는 selltable가 없다면 팝업처리
				switch(interiorType)
				{
				case INTERIOR_TYPE_HANGER:
					setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
					sprintf(xPopup.strText, "비여있는 헹거가 없습니다.");
					break;
				case INTERIOR_TYPE_ACCESSORY:
					setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
					sprintf(xPopup.strText, "비여있는 진열대가 없습니다.");
					break;
				}
			}
		}
		//재고가 없다면
		else
		{
			//주문하기로
			int slotNum;
			setStateProductionMenu();
			slotNum = linkProductionMenu(code);
			
			if(slotNum != DONT)
			{
				xDragScrollCatalogS.selectNum = slotNum/8;
			}
		}
	}
}



int getStaffHairNum(int code)
{
	int resultNum = xHairData[code].haveNum;
	
	switch(code)
	{
	case STAFF0_HAIRCODE:
	case STAFF1_HAIRCODE:
		resultNum = 999;
		break;
	default:
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			if(xPaymentAssistant[floor].xFace.hairNum == code)
				resultNum--;
			if(xShopAssistant[floor][0].xFace.hairNum == code)
				resultNum--;
		}
		switch(xStaff.staffSlot[xStaff.selectStaffSlot])
			{
		case STAFF_SLOT_PAYMENTASSISTANT_1F:
			if(xPaymentAssistant[0].xFace.hairNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_PAYMENTASSISTANT_2F:
			if(xPaymentAssistant[1].xFace.hairNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_PAYMENTASSISTANT_3F:
			if(xPaymentAssistant[2].xFace.hairNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_SHOPASSISTANT1_1F:
			if(xShopAssistant[0][0].xFace.hairNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_SHOPASSISTANT1_2F:
			if(xShopAssistant[1][0].xFace.hairNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_SHOPASSISTANT1_3F:
			if(xShopAssistant[2][0].xFace.hairNum == code)
				resultNum++;
			break;
		}
		break;
	}
	return resultNum;
}
int getStaffFaceNum(int code)
{
	int resultNum = xFaceData[code].haveNum;
	
	switch(code)
	{
	case STAFF0_FACECODE:
	case STAFF1_FACECODE:
		resultNum = 999;
		break;
	default:
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			if(xPaymentAssistant[floor].xFace.faceNum == code)
				resultNum--;
			if(xShopAssistant[floor][0].xFace.faceNum == code)
				resultNum--;
		}
						
		switch(xStaff.staffSlot[xStaff.selectStaffSlot])
		{
		case STAFF_SLOT_PAYMENTASSISTANT_1F:
			if(xPaymentAssistant[0].xFace.faceNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_PAYMENTASSISTANT_2F:
			if(xPaymentAssistant[1].xFace.faceNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_PAYMENTASSISTANT_3F:
			if(xPaymentAssistant[2].xFace.faceNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_SHOPASSISTANT1_1F:
			if(xShopAssistant[0][0].xFace.faceNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_SHOPASSISTANT1_2F:
			if(xShopAssistant[1][0].xFace.faceNum == code)
				resultNum++;
			break;
		case STAFF_SLOT_SHOPASSISTANT1_3F:
			if(xShopAssistant[2][0].xFace.faceNum == code)
				resultNum++;
			break;
		}
		break;
	}
	
	
	
	return resultNum;
}
int getStaffFashionNum(int code)
{
	int resultNum = xInventoryFashion.haveNum[code/1000][code%1000];
	
	switch(code)
	{
	case STAFF0_FASHIONCODE0:
	case STAFF0_FASHIONCODE1:
	case STAFF0_FASHIONCODE3:
	case STAFF1_FASHIONCODE0:
	case STAFF1_FASHIONCODE1:
	case STAFF1_FASHIONCODE3:
		resultNum = 999;
		break;
	default:
		for(int floor=0;floor<xMap.totalFloor;floor++)
		{
			for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
			{
				if(xPaymentAssistant[floor].xF.code[ff] == code)
					resultNum--;
				
				if(xShopAssistant[floor][0].xF.code[ff] == code)
					resultNum--;
			}
		}
		for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
		{
			switch(xStaff.staffSlot[xStaff.selectStaffSlot])
			{
			case STAFF_SLOT_PAYMENTASSISTANT_1F:
				if(xPaymentAssistant[0].xF.code[ff] == code)
					resultNum++;
				break;
			case STAFF_SLOT_PAYMENTASSISTANT_2F:
				if(xPaymentAssistant[1].xF.code[ff] == code)
					resultNum++;
				break;
			case STAFF_SLOT_PAYMENTASSISTANT_3F:
				if(xPaymentAssistant[2].xF.code[ff] == code)
					resultNum++;
				break;
			case STAFF_SLOT_SHOPASSISTANT1_1F:
				if(xShopAssistant[0][0].xF.code[ff] == code)
					resultNum++;
				break;
			case STAFF_SLOT_SHOPASSISTANT1_2F:
				if(xShopAssistant[1][0].xF.code[ff] == code)
					resultNum++;
				break;
			case STAFF_SLOT_SHOPASSISTANT1_3F:
				if(xShopAssistant[2][0].xF.code[ff] == code)
					resultNum++;
				break;
			}
		}
			
		break;
	}
	
	return resultNum;
}



int getUserWSocial(int totalCnt,int nowCnt,int rever)
{
	int resultW;
	int gab = 40;
			
	switch(totalCnt)
	{
	case 6:
	case 5:
	case 4:
		resultW = ((nowCnt%3)*gab)-gab;
		break;
	case 3:
		resultW = (nowCnt*gab)-gab;
		break;
	case 2:
		resultW = (nowCnt*gab)-gab/2;
		break;
	case 1:
		resultW = 0;
		break;
	}
	
	return resultW;
}
int getUserHSocial(int totalCnt,int nowCnt,int rever)
{
	int resultH;
	int gab = 10;
	
	switch(totalCnt)
	{
	case 6:
	case 5:
	case 4:
		if(xMap.rever == 0)
		{
			resultH = ((nowCnt%3)*gab)-gab;
			if(nowCnt/3 == 1)
				resultH += 36;
		}
		else
		{
			resultH = -((nowCnt%3)*gab)+gab;
			if(nowCnt/3 == 1)
				resultH += 36;
		}
		break;
	case 3:
		if(xMap.rever == 0)
			resultH = (nowCnt*gab)-gab;
		else
			resultH = -(nowCnt*gab)+gab;
		break;
	case 2:
		if(xMap.rever == 0)
			resultH = (nowCnt*gab)-gab/2;
		else
			resultH = -(nowCnt*gab)+gab/2;
		break;
	case 1:
		if(xMap.rever == 0)
			resultH = 0;
		else
			resultH = 0;
		break;
	}
	return resultH;
}


int getUserW(int totalCnt,int nowCnt,int rever)
{
	int resultW;
	int gab = 15;
	
	switch(totalCnt)
	{
		case 6:
		case 5:
		case 4:
			resultW = ((nowCnt%3)*gab)-gab;
			break;
		case 3:
			resultW = (nowCnt*gab)-gab;
			break;
		case 2:
			resultW = (nowCnt*gab)-gab/2;
			break;
		case 1:
			resultW = 0;
			break;
	}
	
	return resultW;
}
int getUserH(int totalCnt,int nowCnt,int rever)
{
	int resultH;
	int gab = 10;
	
	switch(totalCnt)
	{
		case 6:
		case 5:
		case 4:
			if(xMap.rever == 0)
			{
				resultH = ((nowCnt%3)*gab)-gab;
				if(nowCnt/3 == 1)
					resultH += 36;
			}
			else
			{
				resultH = -((nowCnt%3)*gab)+gab;
				if(nowCnt/3 == 1)
					resultH += 36;
			}
			break;
		case 3:
			if(xMap.rever == 0)
				resultH = (nowCnt*gab)-gab;
			else
				resultH = -(nowCnt*gab)+gab;
			break;
		case 2:
			if(xMap.rever == 0)
				resultH = (nowCnt*gab)-gab/2;
			else
				resultH = -(nowCnt*gab)+gab/2;
			break;
		case 1:
			if(xMap.rever == 0)
				resultH = 0;
			else
				resultH = 0;
			break;
	}
	return resultH;
}


//void drawModelMain()
//{
//	int px = cx;
//	int py = cy;
//	
//	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELCASTINGEXIT:
//			if(xModel.state == MODELCOLLECT_STATE_MAIN)
//				xQuestTuto.isTutoClean = TRUE;
//			break;
//		}
//	}
//	
//	drawPacker(imgModelMainBg0, px, py, 0, 0, imgW(imgModelMainBg0), imgH(imgModelMainBg0), VH);
//		
//	if(xModelMainSlot[0].state == MODELMAINSLOT_STATE_LOCK)
//		xModelMainSlot[0].state = MODELMAINSLOT_STATE_EMPTY;
//	
//	XFACE xFaceTemp;
//	XFITTINGLAYER xFTemp;
//	
//	int castImgNum = DONT;
//	int giftTypeImgNum = 0;
//	int modelCode;
//	int slotX;
//	int slotY;
//	for(int i=0;i<MODELMAINSLOTMAX;i++)
//	{
//		switch(i)
//		{
//		case 0:
//			slotX = px-357;
//			slotY = py+147;
//			break;
//		case 1:
//			slotX = px-187;
//			slotY = py+117;
//			break;
//		case 2:
//			slotX = px;
//			slotY = py+103;
//			break;
//		case 3:
//			slotX = px+187;
//			slotY = py+117;
//			break;
//		case 4:
//			slotX = px+357;
//			slotY = py+147;
//			break;
//		}
//		
//		
//				
//		
//		subTemp[XPOS] = slotX;
//		subTemp[YPOS] = slotY-135;
//		
//		xFaceTemp.hairNum = DONT;
//		xFaceTemp.faceNum = DONT;
//		xFaceTemp.faceType = FACE_TYPE_SMILE;
//		
//		for(int f=0;f<16;f++)
//			xFTemp.code[f] = DONT;
//		
//		
//		xModelMainSlot[i].xTouchSlot.wPos = 120;
//		xModelMainSlot[i].xTouchSlot.hPos = 340;
//		xModelMainSlot[i].xTouchSlot.xPos = subTemp[XPOS]-xModelMainSlot[i].xTouchSlot.wPos/2;
//		xModelMainSlot[i].xTouchSlot.yPos = subTemp[YPOS]+50-xModelMainSlot[i].xTouchSlot.hPos/2;
//		
//		/*
//		gSetColor(255, 0, 0);
//		setAlpha(100);
//		fillRect(xModelMainSlot[i].xTouchSlot.xPos, xModelMainSlot[i].xTouchSlot.yPos, xModelMainSlot[i].xTouchSlot.wPos, xModelMainSlot[i].xTouchSlot.hPos);
//		setAlpha(ALPHA_MAX);
//		 */
//		
//		switch(xModelMainSlot[i].state)
//		{
//		case MODELMAINSLOT_STATE_WAIT:
//		case MODELMAINSLOT_STATE_PLAY:
//			xModelMainSlot[i].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[i].modelKey);
//			modelCode = xInventoryModel[xModelMainSlot[i].inventoryNum].code;
//			break;
//		}
//
//		
//		switch(xModelMainSlot[i].state)
//		{
//		case MODELMAINSLOT_STATE_LOCK:
//			//잠긴슬롯
//			if(xSaveTemp.lv.oriData < xModelMainSlot[i].openLv)
//			{
//				
//				drawPacker(imgModelMainSlotLv0, slotX, slotY-30, 0, imgH(imgModelMainSlotLv0)/4*(i-1), imgW(imgModelMainSlotLv0), imgH(imgModelMainSlotLv0)/4, VH);
//			}
//			else
//			{
//				drawPacker(imgModelMainBg3, slotX, slotY-15, imgW(imgModelMainBg3)/2*(i<2?0:1), 0, imgW(imgModelMainBg3)/2, imgH(imgModelMainBg3), VH);
//			}
//			break;
//		case MODELMAINSLOT_STATE_EMPTY:
//			//빈슬롯
//			drawPacker(imgModelMainBg1, slotX, slotY-90, 0, 0, imgW(imgModelMainBg1), imgH(imgModelMainBg1), VH);
//			if(i<2)
//				xGame.isReverse = TRUE;
//			drawFittingBody(subTemp[XPOS]+(i<2?-15:0), subTemp[YPOS], &xFTemp, &xFaceTemp, FALSE, 0);
//			xGame.isReverse = FALSE;
//			drawPacker(imgModelMainEmpty, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelMainEmpty), imgH(imgModelMainEmpty), VH);
//
//				
//				
//			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//			{
//				switch(xQuestTuto.nowNum)
//				{
//				case TUTO_22_MODELMAINSLOTSELECT:
//					xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//					xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//					xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//					break;
//				}
//			}
//				
//			break;
//		case MODELMAINSLOT_STATE_WAIT:
//		case MODELMAINSLOT_STATE_PLAY:
//			if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//			{
//				switch(xQuestTuto.nowNum)
//				{
//				case TUTO_22_MODELSELECTMODEL:
//				case TUTO_22_MODELMAINSLOTSELECT:
//					xQuestTuto.isTutoClean = TRUE;
//					break;
//				case TUTO_22_MODELMODELINFO:
//					if(xModel.state == MODELCOLLECT_STATE_MAIN)
//					{
//						xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//						xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//						xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//					}
//					break;
//				case TUTO_22_MODELFITTINGOK:
//					if(checkXfLimit(&xInventoryModel[xModelMainSlot[i].inventoryNum].xF) == TRUE)
//						xQuestTuto.isTutoClean = TRUE;
//					break;
//				}
//			}
//				
//			//모델슬롯
//			xGame.isBlend = TRUE;
//			xGame.blendType = BLEND_ADDP;
//			drawPacker(imgModelMainBg4, slotX, slotY-210, 0, 0, imgW(imgModelMainBg4), imgH(imgModelMainBg4), VH);
//			xGame.isBlend = FALSE;
//			drawPacker(imgModelMainBg2, slotX, slotY-90, 0, 0, imgW(imgModelMainBg2), imgH(imgModelMainBg2), VH);
//			if(i<2)
//				xGame.isReverse = TRUE;
//				
//			xFaceTemp.hairNum = 1000+modelCode;
//			xFaceTemp.faceNum = 1000+modelCode;
//			xFaceTemp.faceType = FACE_TYPE_NORMAL;
//												
//			memcpy(&xFTemp, &xInventoryModel[xModelMainSlot[i].inventoryNum].xF, sizeof(xFTemp));
//			drawFittingBody(subTemp[XPOS]+(i<2?-15:0), subTemp[YPOS], &xFTemp, &xFaceTemp, TRUE, xModelData[modelCode].sex);
//			xGame.isReverse = FALSE;
//											
//			switch(xModelData[modelCode].sex)
//			{
//			case 0:
//				drawModelNameString(subTemp[XPOS]+(i<2?-5:10),subTemp[YPOS]-166,VH,modelCode);
//				break;
//			case 1:
//				drawModelNameString(subTemp[XPOS]+(i<2?-5:10),subTemp[YPOS]-181,VH,modelCode);
//				break;
//			}
//					
//				
//			subTemp[XPOS] = slotX;
//			subTemp[YPOS] = slotY+40;
//			drawPacker(imgModelMainGage0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelMainGage0), imgH(imgModelMainGage0), VH);
//			xModelMainSlot[i].xTouchBtn.wPos = imgW(imgModelMainGage0);
//			xModelMainSlot[i].xTouchBtn.hPos = imgH(imgModelMainGage0);
//			xModelMainSlot[i].xTouchBtn.xPos = subTemp[XPOS]-xModelMainSlot[i].xTouchBtn.wPos/2;
//			xModelMainSlot[i].xTouchBtn.yPos = subTemp[YPOS]-xModelMainSlot[i].xTouchBtn.hPos/2;
//			
//			/*
//			 gSetColor(255, 0, 0);
//			 setAlpha(100);
//			 fillRect(xModelMainSlot[i].xTouchBtn.xPos, xModelMainSlot[i].xTouchBtn.yPos, xModelMainSlot[i].xTouchBtn.wPos, xModelMainSlot[i].xTouchBtn.hPos);
//			 setAlpha(ALPHA_MAX);
//			 */
//			if(checkXfLimit(&xInventoryModel[xModelMainSlot[i].inventoryNum].xF) == FALSE)
//			{
//				gDrawStringBold(subTemp[XPOS]+43, subTemp[YPOS]-17, "활동불가", VR,251,51,23,17,11,11);
//				drawPacker(imgModelMainGage1, subTemp[XPOS], subTemp[YPOS]+15, 0, imgH(imgModelMainGage1)/9*8, imgW(imgModelMainGage1), imgH(imgModelMainGage1)/9, VH);
//			}
//			else
//			{
//				
//				setCommaNum(strTempS, getModelGiftNum(xModelMainSlot[i].inventoryNum,0));
//				gSetColor(58, 28, 17);
//				gDrawString(subTemp[XPOS]+43, subTemp[YPOS]-17, strTempS, VR);
//				switch(xModelData[modelCode].giftType)
//				{
//				case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=5;break;
//				case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=1;break;
//				case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=6;break;
//				case MODEL_GIFTTYPE_EXP:giftTypeImgNum=3;break;
//				}
//				drawPacker(imgProductionMenuObj0, subTemp[XPOS]+48, subTemp[YPOS]-17, imgW(imgProductionMenuObj0)/8*giftTypeImgNum, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
//					
//				
//			
//				int endTimeTemp = xModelMainSlot[i].endTime;
//				
//				switch(xModelMainSlot[i].state)
//				{
//				case MODELMAINSLOT_STATE_WAIT:
//					drawPacker(imgModelMainGage1, subTemp[XPOS], subTemp[YPOS]+15, 0, imgH(imgModelMainGage1)/9*6, imgW(imgModelMainGage1), imgH(imgModelMainGage1)/9, VH);
//					break;
//				case MODELMAINSLOT_STATE_PLAY:
//						
//						
//						
//					//완료
//					if(xCalendar.nowTime > endTimeTemp)
//					{
//						drawPacker(imgModelMainGage1, subTemp[XPOS], subTemp[YPOS]+15, 0, imgH(imgModelMainGage1)/9*7, imgW(imgModelMainGage1), imgH(imgModelMainGage1)/9, VH);
//						castImgNum = DONT;
//						switch(gameCnt%50)
//						{
//							case 41:castImgNum = 0;	break;
//							case 42:castImgNum = 1;	break;
//							case 43:castImgNum = 2;	break;
//							case 44:castImgNum = 3;	break;
//							case 45:castImgNum = 4;	break;
//						}
//						
//						if(castImgNum != DONT)
//						{
//							xGame.isBlend = TRUE;
//							xGame.blendType = BLEND_ADDP;
//							drawPacker(imgModelMainGage2, subTemp[XPOS], subTemp[YPOS]+15, 0, imgH(imgModelMainGage2)/5*castImgNum, imgW(imgModelMainGage2), imgH(imgModelMainGage2)/5, VH);
//							xGame.isBlend = FALSE;
//						}
//					}
//					else
//					{
//						drawPacker(imgModelMainGage1, subTemp[XPOS], subTemp[YPOS]+15, 0, imgH(imgModelMainGage1)/9*5, imgW(imgModelMainGage1), imgH(imgModelMainGage1)/9, VH);
//						
//						switch(xModelData[modelCode].giftType)
//						{
//						case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=1;break;
//						case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=2;break;
//						case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=4;break;
//						case MODEL_GIFTTYPE_EXP:giftTypeImgNum=3;break;
//						}
//						subTemp[WPOS] = imgW(imgModelMainGage1);
//						drawPacker(imgModelMainGage1, subTemp[XPOS]-imgW(imgModelMainGage1)/2, subTemp[YPOS]+15, 0, imgH(imgModelMainGage1)/9*giftTypeImgNum, subTemp[WPOS], imgH(imgModelMainGage1)/9, VL);
//						drawPacker(imgModelMainGage1, subTemp[XPOS], subTemp[YPOS]+15, 0, 0, imgW(imgModelMainGage1), imgH(imgModelMainGage1)/9, VH);
//						drawTimeSprintf(strTempS,(endTimeTemp - xCalendar.nowTime),1);
//						
//						switch(xModelData[modelCode].giftType)
//						{
//						case MODEL_GIFTTYPE_GOLD:gDrawStringBold(subTemp[XPOS]+60, subTemp[YPOS]+16, strTempS, VR, 253, 117, 6, 51, 21, 14);break;
//						case MODEL_GIFTTYPE_LOOK:gDrawStringBold(subTemp[XPOS]+60, subTemp[YPOS]+16, strTempS, VR, 26, 215, 255, 51, 21, 14);break;
//						case MODEL_GIFTTYPE_CANDY:gDrawStringBold(subTemp[XPOS]+60, subTemp[YPOS]+16, strTempS, VR, 251, 20, 10, 51, 21, 14);break;
//						case MODEL_GIFTTYPE_EXP:gDrawStringBold(subTemp[XPOS]+60, subTemp[YPOS]+16, strTempS, VR, 251, 85, 8, 51, 21, 14);break;
//						}
//					}
//					break;
//				}
//			}
//			break;
//		}
//		
//		
//	}
//	
//	
//	
//	//모델가이드버튼
//	subTemp[XPOS] = 85;
//	subTemp[YPOS] = 35;
//	drawPacker(imgModelHelp4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelHelp4), imgH(imgModelHelp4), VH);
//	xModel.xTouchHelpBtn.wPos = imgW(imgModelHelp4);
//	xModel.xTouchHelpBtn.hPos = imgH(imgModelHelp4);
//	xModel.xTouchHelpBtn.xPos = subTemp[XPOS]-xModel.xTouchHelpBtn.wPos/2;
//	xModel.xTouchHelpBtn.yPos = subTemp[YPOS]-xModel.xTouchHelpBtn.hPos/2;
//		
//	
//	subTemp[XPOS] = lcdW-97;
//	subTemp[YPOS] = lcdH-47;
//	
//	drawPacker(imgModelCastingBtn0, subTemp[XPOS]+3, subTemp[YPOS]+1, 0, 0, imgW(imgModelCastingBtn0), imgH(imgModelCastingBtn0), VH);
//	drawPacker(imgModelCastingBtn1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelCastingBtn1), imgH(imgModelCastingBtn1), VH);
//	
//	if(xWorldMap.isTuto == TRUE)
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELCASTING:
//			if(xModel.state == MODELCOLLECT_FRIEND_STATE_MAIN)
//			{
//				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//			}
//			break;
//		}
//	}
//			
//	
//	castImgNum = DONT;
//	switch(gameCnt%50)
//	{
//	case 41:castImgNum = 0;	break;
//	case 42:castImgNum = 1;	break;
//	case 43:castImgNum = 2;	break;
//	case 44:castImgNum = 3;	break;
//	case 45:castImgNum = 4;	break;
//	}
//	
//	if(castImgNum != DONT)
//	{
//		xGame.isBlend = TRUE;
//		xGame.blendType = BLEND_ADDP;
//		drawPacker(imgModelCastingBtn2, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgModelCastingBtn2)/5*castImgNum, imgW(imgModelCastingBtn2), imgH(imgModelCastingBtn2)/5, VH);
//		xGame.isBlend = FALSE;
//	}
//	
//	if(gameCnt%50 == 0)
//	{
//		setModelEff(subTemp[XPOS]-63, subTemp[YPOS]-26);
//		setModelEff(subTemp[XPOS]+67, subTemp[YPOS]+23);
//	}
//
//	xModel.xTouchCastingBtn.wPos = imgW(imgModelCastingBtn1);
//	xModel.xTouchCastingBtn.hPos = imgH(imgModelCastingBtn1);
//	xModel.xTouchCastingBtn.xPos = subTemp[XPOS]-xModel.xTouchCastingBtn.wPos/2;
//	xModel.xTouchCastingBtn.yPos = subTemp[YPOS]-xModel.xTouchCastingBtn.hPos/2;
//	
//	subTemp[XPOS] = 97;
//	subTemp[YPOS] = lcdH-47;
//	
//	drawPacker(imgModelCastingBtn0, subTemp[XPOS]+3, subTemp[YPOS]+1, 0, 0, imgW(imgModelCastingBtn0), imgH(imgModelCastingBtn0), VH);
//	drawPacker(imgModelListBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgModelListBtn), imgH(imgModelListBtn), VH);
//		
//	xModel.xTouchModelListBtn.wPos = imgW(imgModelListBtn);
//	xModel.xTouchModelListBtn.hPos = imgH(imgModelListBtn);
//	xModel.xTouchModelListBtn.xPos = subTemp[XPOS]-xModel.xTouchModelListBtn.wPos/2;
//	xModel.xTouchModelListBtn.yPos = subTemp[YPOS]-xModel.xTouchModelListBtn.hPos/2;
//	
//	
//	subTemp[XPOS] = lcdW-48;
//	subTemp[YPOS] = py-282;
//	
//	drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
//	
//	xTouchClr.wPos = imgW(imgBtn0);
//	xTouchClr.hPos = imgH(imgBtn0)/2;
//	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
//	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
//	
//	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELEXIT:
//			if(xModel.state == MODELCOLLECT_STATE_MAIN)
//			{
//				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//			}
//			break;
//		}
//	}
//	
//	/*
//	 gSetColor(255,0,0);
//	 setAlpha(100);
//	 fillRect(xTouchClr.xPos,xTouchClr.yPos,xTouchClr.wPos,xTouchClr.hPos);
//	 setAlpha(ALPHA_MAX);
//	 */
//}
//
//void drawModelHelp()
//{
//	int px = cx;
//	int py = cy;
//	drawBgFillRect();
//	drawPacker(imgModelHelp0, px, py, 0, 0, imgW(imgModelHelp0), imgH(imgModelHelp0), VH);
//	
//	int giftTemp[2][4];
//	int giftTypeTemp[2][4];
//	int giftIconNumTemp[2][4];
//	for(int i=0;i<MODELDATAMAX;i++)
//	{
//		if(xModelData[i].layeredNum > 0)
//		{
//			if(xModelData[i].sex < 2 && xModelData[i].grade < 4)
//			{
//				giftTypeTemp[xModelData[i].sex][xModelData[i].grade] = xModelData[i].giftType;
//				giftTemp[xModelData[i].sex][xModelData[i].grade] = xModelData[i].giftNum.oriData;
//				giftIconNumTemp[xModelData[i].sex][xModelData[i].grade] = xModelData[i].giftIconNum;
//                
//                
//                    
//                
//                
//                
//			}
//		}
//	}
//	
//	
//	
//	//활동타입 :성별,등급 = 활동타입
//	//활동값	 :성별,등급 = 활동값
//	//아이콘   :성별,등급 = 아이콘번호
//	
//	
//	
//	
//	for(int i=0;i<2;i++)
//	{
//		subTemp[XPOS] = px+96+(i*84);
//		subTemp[YPOS] = py-195;
//		if(i == xModel.selectHelpTab)
//			drawPacker(imgModelHelp5, subTemp[XPOS]+3, subTemp[YPOS]+6, imgW(imgModelHelp5)/2, 0, imgW(imgModelHelp5)/2, imgH(imgModelHelp5), VH);
//		
//		drawPacker(imgModelHelp3, subTemp[XPOS], subTemp[YPOS], imgW(imgModelHelp3)/2*i, 0, imgW(imgModelHelp3)/2, imgH(imgModelHelp3), VH);
//				
//		xModel.xTouchHelpTab[i].wPos = imgW(imgModelHelp3)/2;
//		xModel.xTouchHelpTab[i].hPos = imgH(imgModelHelp3);
//		xModel.xTouchHelpTab[i].xPos = subTemp[XPOS]-xModel.xTouchHelpTab[i].wPos/2;
//		xModel.xTouchHelpTab[i].yPos = subTemp[YPOS]-xModel.xTouchHelpTab[i].hPos/2;
//	}
//	
//	
//	int giftTypeImgNum=0;
//	switch(xModel.selectHelpTab)
//	{
//	case 0:
//		drawPacker(imgModelHelp2, px, py, 0, 0, imgW(imgModelHelp2), imgH(imgModelHelp2), VH);
//		for(int sex = 0;sex<2;sex++)
//		{
//			for(int grade = 0;grade<4;grade++)
//			{
//				subTemp[XPOS] = px-100+(92*grade);
//				subTemp[YPOS] = py+90-(82*sex);
//				
//				switch(giftTypeTemp[sex][grade])
//				{
//				case MODEL_GIFTTYPE_GOLD:
//					giftTypeImgNum = imgModelHelpGoldIcon0+giftIconNumTemp[sex][grade];
//					break;
//				case MODEL_GIFTTYPE_LOOK:
//					giftTypeImgNum = imgModelHelpLookIcon0+giftIconNumTemp[sex][grade];
//					break;
//				case MODEL_GIFTTYPE_CANDY:
//					giftTypeImgNum = imgModelHelpCandyIcon0+giftIconNumTemp[sex][grade];
//					break;
//				case MODEL_GIFTTYPE_EXP:
//					giftTypeImgNum = imgModelHelpExpIcon0+giftIconNumTemp[sex][grade];
//					break;
//				}
//                
//                if(grade == 3)
//                {
//                    giftTypeImgNum = imgModelHelpLookIcon0+1;
//                }
//                
//                
//                
//				drawPacker(giftTypeImgNum, subTemp[XPOS], subTemp[YPOS]-14, 0, 0, imgW(giftTypeImgNum), imgH(giftTypeImgNum), VH);
//				sprintf(strTempS, "%d",giftTemp[sex][grade]);
//                
//                if(grade != 3)
//                    gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+16, strTempS, VH,242,228,212,82,49,38);
//			}
//		}
//		break;
//	case 1:
//		drawPacker(imgModelHelp1, px, py, 0, 0, imgW(imgModelHelp1), imgH(imgModelHelp1), VH);
//		break;
//	}
//	
//	drawBtn(px, py+190, BTN_OK_CONFIRM);
//}
//
//void drawModelMain_FRIEND()
//{
//	int px = cx;
//	int py = cy;
//	
//	if(xQuestTuto.state == QUEST_TUTO_KEY)
//	{
//		switch(xQuestTuto.nowNum)
//		{
//			case TUTO_18_FRIENDMODEL_MENUTOUCH:
//				xQuestTuto.isTutoClean = TRUE;
//				break;
//		}
//	}
//	
//	drawPacker(imgModelMainBg0, px, py, 0, 0, imgW(imgModelMainBg0), imgH(imgModelMainBg0), VH);
//		
//	if(xModelMainSlotFRIEND[0].state == MODELMAINSLOT_STATE_LOCK)
//		xModelMainSlotFRIEND[0].state = MODELMAINSLOT_STATE_EMPTY;
//	
//	XFACE xFaceTemp;
//	XFITTINGLAYER xFTemp;
//	
//	int modelCode;
//	int slotX;
//	int slotY;
//	for(int i=0;i<MODELMAINSLOTMAX;i++)
//	{
//		switch(i)
//		{
//        case 0:
//            slotX = px-357;
//            slotY = py+147;
//            break;
//        case 1:
//            slotX = px-187;
//            slotY = py+117;
//            break;
//        case 2:
//            slotX = px;
//            slotY = py+103;
//            break;
//        case 3:
//            slotX = px+187;
//            slotY = py+117;
//            break;
//        case 4:
//            slotX = px+357;
//            slotY = py+147;
//            break;
//		}
//		
//		subTemp[XPOS] = slotX;
//		subTemp[YPOS] = slotY-135;
//		
//		xFaceTemp.hairNum = DONT;
//		xFaceTemp.faceNum = DONT;
//		xFaceTemp.faceType = FACE_TYPE_SMILE;
//		
//		for(int f=0;f<16;f++)
//			xFTemp.code[f] = DONT;
//		
//		
//		xModelMainSlot[i].xTouchSlot.wPos = 120;
//		xModelMainSlot[i].xTouchSlot.hPos = 340;
//		xModelMainSlot[i].xTouchSlot.xPos = subTemp[XPOS]-xModelMainSlot[i].xTouchSlot.wPos/2;
//		xModelMainSlot[i].xTouchSlot.yPos = subTemp[YPOS]+50-xModelMainSlot[i].xTouchSlot.hPos/2;
//		
//		/*
//		 gSetColor(255, 0, 0);
//		 setAlpha(100);
//		 fillRect(xModelMainSlot[i].xTouchSlot.xPos, xModelMainSlot[i].xTouchSlot.yPos, xModelMainSlot[i].xTouchSlot.wPos, xModelMainSlot[i].xTouchSlot.hPos);
//		 setAlpha(ALPHA_MAX);
//		 */
//				
//		switch(xModelMainSlotFRIEND[i].state)
//		{
//		case MODELMAINSLOT_STATE_WAIT:
//		case MODELMAINSLOT_STATE_PLAY:
//			xModelMainSlotFRIEND[i].inventoryNum = getModelKeyToSlotNumFRIEND(xModelMainSlotFRIEND[i].modelKey);
//			modelCode = xInventoryModel_FRIEND[xModelMainSlotFRIEND[i].inventoryNum].code;
//			break;
//		}
//				
//		switch(xModelMainSlotFRIEND[i].state)
//		{
//		case MODELMAINSLOT_STATE_LOCK:
//			//잠긴슬롯
//			drawPacker(imgModelMainBg3, slotX, slotY-15, imgW(imgModelMainBg3)/2*(i<2?0:1), 0, imgW(imgModelMainBg3)/2, imgH(imgModelMainBg3), VH);
//			break;
//		case MODELMAINSLOT_STATE_EMPTY:
//			//빈슬롯
//			drawPacker(imgModelMainBg1, slotX, slotY-90, 0, 0, imgW(imgModelMainBg1), imgH(imgModelMainBg1), VH);
//			if(i<2)
//				xGame.isReverse = TRUE;
//			drawFittingBody(subTemp[XPOS]+(i<2?-15:0), subTemp[YPOS], &xFTemp, &xFaceTemp, FALSE, 0);
//			xGame.isReverse = FALSE;
//			break;
//		case MODELMAINSLOT_STATE_WAIT:
//		case MODELMAINSLOT_STATE_PLAY:
//			//모델슬롯
//			xGame.isBlend = TRUE;
//			xGame.blendType = BLEND_ADDP;
//			drawPacker(imgModelMainBg4, slotX, slotY-210, 0, 0, imgW(imgModelMainBg4), imgH(imgModelMainBg4), VH);
//			xGame.isBlend = FALSE;
//			drawPacker(imgModelMainBg2, slotX, slotY-90, 0, 0, imgW(imgModelMainBg2), imgH(imgModelMainBg2), VH);
//			if(i<2)
//				xGame.isReverse = TRUE;
//			
//			xFaceTemp.hairNum = 1000+modelCode;
//			xFaceTemp.faceNum = 1000+modelCode;
//			xFaceTemp.faceType = FACE_TYPE_NORMAL;
//			
//			memcpy(&xFTemp, &xInventoryModel_FRIEND[xModelMainSlotFRIEND[i].inventoryNum].xF, sizeof(xFTemp));
//			drawFittingBody(subTemp[XPOS]+(i<2?-15:0), subTemp[YPOS], &xFTemp, &xFaceTemp, TRUE, xModelData[modelCode].sex);
//			xGame.isReverse = FALSE;
//							
//			switch(xModelData[modelCode].sex)
//			{
//			case 0:
//				drawModelNameString(subTemp[XPOS]+(i<2?-5:10),subTemp[YPOS]-166,VH,modelCode);
//				break;
//			case 1:
//				drawModelNameString(subTemp[XPOS]+(i<2?-5:10),subTemp[YPOS]-181,VH,modelCode);
//				break;
//			}
//				
//			//추천수
//			switch(i)
//			{
//			case 0:
//				subTemp[XPOS] = slotX+70;
//				subTemp[YPOS] = slotY+70+30;
//				break;
//			case 1:
//				subTemp[XPOS] = slotX+70-20;
//				subTemp[YPOS] = slotY+70;
//				break;
//			case 2:
//				subTemp[XPOS] = slotX+70;
//				subTemp[YPOS] = slotY+70-20;
//				break;
//			case 3:
//				subTemp[XPOS] = slotX+70+20;
//				subTemp[YPOS] = slotY+70;
//				break;
//			case 4:
//				subTemp[XPOS] = slotX+70;
//				subTemp[YPOS] = slotY+70+30;
//				break;
//			}
//			
//			drawPacker(imgModelFriendBg2, subTemp[XPOS]-100, subTemp[YPOS]-3, 0, 0, imgW(imgModelFriendBg2), imgH(imgModelFriendBg2), VH);
//			
//			gSetColor(86, 255, 220);
//			sprintf(strTempS, "추천수:%d",xInventoryModel_FRIEND[xModelMainSlotFRIEND[i].inventoryNum].vote);
//			gDrawString(subTemp[XPOS]-100, subTemp[YPOS]-3, strTempS, VH);
//											
//			drawPacker(imgModelFriendBg4, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgModelFriendBg4)/2*(xFriendData[xModel.modelFriendDataSlotNum].isVote == FALSE?1:0), imgW(imgModelFriendBg4), imgH(imgModelFriendBg4)/2, VH);
//			
//			xModel.xTouchFriendVote[i].wPos = imgW(imgModelFriendBg4);
//			xModel.xTouchFriendVote[i].hPos = imgH(imgModelFriendBg4)/2;
//			xModel.xTouchFriendVote[i].xPos = subTemp[XPOS]-xModel.xTouchFriendVote[i].wPos/2;
//			xModel.xTouchFriendVote[i].yPos = subTemp[YPOS]-xModel.xTouchFriendVote[i].hPos/2;
//			break;
//		}
//	}
//			
//	subTemp[XPOS] = px+531;
//	subTemp[YPOS] = py-282;
//	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_18_RESULT:
//			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//			break;
//		}
//	}
//	
//	drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
//	
//	xTouchClr.wPos = imgW(imgBtn0);
//	xTouchClr.hPos = imgH(imgBtn0)/2;
//	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
//	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
//	/*
//	 gSetColor(255,0,0);
//	 setAlpha(100);
//	 fillRect(xTouchClr.xPos,xTouchClr.yPos,xTouchClr.wPos,xTouchClr.hPos);
//	 setAlpha(ALPHA_MAX);
//	 */
//	
//	
//	subTemp[XPOS] = px+388;
//	subTemp[YPOS] = py-288;
//	drawPacker(imgWorldMapLv8, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapLv8), imgH(imgWorldMapLv8), VH);
//	if(xModelSkill.bonusPer[MODELSKILL_TYPE_MODELVOTE] > 0)
//		drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+60, subTemp[YPOS], xSaveTemp.socialModelVoteCnt+xModelSkill.bonusPer[MODELSKILL_TYPE_MODELVOTE], -3, VR);
//	else
//	{
//		if(xSaveTemp.socialModelVoteCnt < 0)
//			drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+60, subTemp[YPOS], 0, -3, VR);
//		else
//			drawNumPacker(imgWorldMapNum0, subTemp[XPOS]+60, subTemp[YPOS], xSaveTemp.socialModelVoteCnt, -3, VR);
//	}
//	drawPacker(imgWorldMapLv7, subTemp[XPOS]+72, subTemp[YPOS], 0, 0, imgW(imgWorldMapLv7)/2, imgH(imgWorldMapLv7), VH);
//		
//		
//	subTemp[XPOS] = 60;
//	subTemp[YPOS] = 60;
//	drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xModel.modelFriendDataSlotNum].userNum, 100);
//	
//	subTemp[XPOS] = -1;
//	subTemp[YPOS] = 0;
//	drawPacker(imgWorldMapLv4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapLv4), imgH(imgWorldMapLv4), TL);
//	
//	subTemp[XPOS] = 132;
//	subTemp[YPOS] = 38;
//	gSetColor(133, 80, 56);
//	sprintf(strTempS, "Lv.%d",xFriendData[xModel.modelFriendDataSlotNum].lv);
//	gDrawString(subTemp[XPOS], subTemp[YPOS]-8, strTempS, VL);
//	setFontSize(14);
//	gDrawString(subTemp[XPOS], subTemp[YPOS]+17, xFriendData[xModel.modelFriendDataSlotNum].strNickName, VL);
//	setFontSize(11);
//	
//	xGame.isReSizeDraw = TRUE;
//	xGame.reSize = 90;
//	drawPacker(imgMailSex, subTemp[XPOS]+10, subTemp[YPOS]+47, imgW(imgMailSex)/2*xFriendData[xModel.modelFriendDataSlotNum].sex, 0, imgW(imgMailSex)/2, imgH(imgMailSex), VH);
//	xGame.isReSizeDraw = FALSE;
//	gSetColor(82, 49, 38);
//	getSprintfArea(strTempS,xFriendData[xModel.modelFriendDataSlotNum].area);
//	sprintf(strTempB, "%d세 / %s",(xCalendar.nowYear+1)-xFriendData[xModel.modelFriendDataSlotNum].age,strTempS);
//	gDrawString(subTemp[XPOS]+30, subTemp[YPOS]+47, strTempB, VL);
//}
//
//void drawModelInfo()
//{
//	int px = cx;
//	int py = cy;
//	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELMODELINFO:
//			xQuestTuto.isTutoClean = TRUE;
//			break;
//		}
//	}
//	
//	
//	
//	
//	drawBgFillRect();
//	
//	drawPacker(imgModelMainInfo0, px, py, 0, 0, imgW(imgModelMainInfo0), imgH(imgModelMainInfo0), VH);
//	
//	subTemp[XPOS] = px-125;
//	subTemp[YPOS] = py+5;
//	
//	
//	
//	
//	int modelCode = xInventoryModel[xModel.infoInventoryNum].code;
//	int upGrade = xInventoryModel[xModel.infoInventoryNum].upGrade;
//	XFACE xFaceTemp;
//	XFITTINGLAYER xFTemp;
//	
//	xFaceTemp.hairNum = modelCode+1000;
//	xFaceTemp.faceNum = modelCode+1000;
//	xFaceTemp.faceType = FACE_TYPE_NORMAL;
//	
//	
//	memcpy(&xFTemp,&xInventoryModel[xModel.infoInventoryNum].xF,sizeof(xFTemp));
//	drawFittingBody(subTemp[XPOS], subTemp[YPOS], &xFTemp, &xFaceTemp, TRUE, xModelData[modelCode].sex);
//			
//	subTemp[XPOS] = px-125;
//	subTemp[YPOS] = py+245;
//	xGame.isReSizeDraw = TRUE;
//	xGame.reSize = 70;
//	switch(xModelData[modelCode].grade)
//	{
//	case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]-64, subTemp[YPOS], 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
//	case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]-64, subTemp[YPOS], 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
//	case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]-64, subTemp[YPOS], 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
//	case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]-64, subTemp[YPOS], 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
//	}
//	
//	drawModelName(subTemp[XPOS]+20, subTemp[YPOS],modelCode);
//	xGame.isReSizeDraw = FALSE;
//		
//	//모델정보
//	subTemp[XPOS] = px+116;
//	subTemp[YPOS] = py-130;
//	gSetColor(255, 255, 255);
//	gDrawString(subTemp[XPOS]-105, subTemp[YPOS]-6, "모델 랭크", VL);
//	gDrawString(subTemp[XPOS]-105, subTemp[YPOS]-6+22, "모델 레벨", VL);
//	gDrawString(subTemp[XPOS]-105, subTemp[YPOS]-6+44, "레이어드 수", VL);
//	gDrawString(subTemp[XPOS]-105, subTemp[YPOS]-6+66, "모델 추천 수", VL);
//	
//	switch(xModelData[modelCode].grade)
//	{
//	case 0:gSetColor(217, 227, 235);sprintf(strTempS, "C랭크");break;
//	case 1:gSetColor(29, 255, 252);sprintf(strTempS, "B랭크");break;
//	case 2:gSetColor(255, 54, 253);sprintf(strTempS, "A랭크");break;
//	case 3:gSetColor(255, 196, 16);sprintf(strTempS, "S랭크");break;
//	}
//	gDrawString(subTemp[XPOS]+105, subTemp[YPOS]-6, strTempS, VR);
//	
//	
//	xGame.isReSizeDraw = TRUE;
//	xGame.reSize = 80;
//	for(int k=0;k<xModelData[modelCode].upGradeMax;k++)
//	{
//		if(upGrade > k)
//			drawPacker(imgModelLv, subTemp[XPOS]-((xModelData[modelCode].upGradeMax-1)*20)+100+(20*k), subTemp[YPOS]+22-7, imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//		else
//			drawPacker(imgModelLv, subTemp[XPOS]-((xModelData[modelCode].upGradeMax-1)*20)+100+(20*k), subTemp[YPOS]+22-7, 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
//	}
//		
//	xGame.isReSizeDraw = FALSE;
//	
//	int layeredNum = 0;
//	for(int f=0;f<16;f++)
//	{
//		if(xFTemp.code[f] != DONT)
//			layeredNum++;
//	}
//	sprintf(strTempS,"%d회",layeredNum);
//	gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+38, strTempS, VR);
//	
//	sprintf(strTempS,"%d회",xInventoryModel[xModel.infoInventoryNum].vote);
//	gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+59, strTempS, VR);
//			
//	gSetColor(254, 177, 0);
//	gDrawString(subTemp[XPOS]-105, subTemp[YPOS]+98, "활동 보상", VL);
//	
//	drawIcon(subTemp[XPOS]-105+10,subTemp[YPOS]+134, ICON_TYPE_TIME);
//	gSetColor(255, 255, 255);
//	drawTimeSprintf(strTempS,getModelGiftTime(xModel.infoInventoryNum,0),4);
//	gDrawString(subTemp[XPOS]-105+15+20, subTemp[YPOS]+134, strTempS, VL);
//			
//	drawPacker(imgModelMainInfo4, subTemp[XPOS]-8, subTemp[YPOS]+140-4, 0, 0, imgW(imgModelMainInfo4), imgH(imgModelMainInfo4), VH);
//	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		if(xModel.state == MODELCOLLECT_STATE_MAININFO)
//		{
//			switch(xQuestTuto.nowNum)
//			{
//			case TUTO_22_MODELGIFTINFOSHOW:
//				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS]+140;
//				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_SHOW;
//				break;
//			}
//		}
//	}
//	
//	//254	188	10
//	gSetColor(254, 188, 10);
//	setCommaNum(strTempS, getModelGiftNum(xModel.infoInventoryNum,0));
//	gDrawString(subTemp[XPOS]+105, subTemp[YPOS]+134, strTempS, VR);
//	
//	
//	int giftTypeImgNum;
//	switch(xModelData[modelCode].giftType)
//	{
//	case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=ICON_TYPE_GOLD;break;
//	case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=ICON_TYPE_LOOK;break;
//	case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=ICON_TYPE_CANDY;break;
//	case MODEL_GIFTTYPE_EXP:giftTypeImgNum=ICON_TYPE_EXP;break;
//	}
//	drawIcon(subTemp[XPOS]+23, subTemp[YPOS]+140-6, giftTypeImgNum);
//
//	
//	
//	//스킬
//	for(int i=0;i<3;i++)
//	{
//		subTemp[XPOS] = px+117-70+(70*i);
//		subTemp[YPOS] = py+66;
//		drawPacker(imgSkillSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlot), imgH(imgSkillSlot), VH);
//		if(xModelData[modelCode].totalSkillNum > i)
//		{
//			int packImgNum = imgSkillIcon0+xModelData[modelCode].skillType[i];
//			drawPacker(packImgNum, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(packImgNum), imgH(packImgNum), VH);
//			
//			xCollection.xTouchSkill[i].wPos = imgW(packImgNum);
//			xCollection.xTouchSkill[i].hPos = imgH(packImgNum);
//			xCollection.xTouchSkill[i].xPos = subTemp[XPOS]-xCollection.xTouchSkill[i].wPos/2;
//			xCollection.xTouchSkill[i].yPos = subTemp[YPOS]-xCollection.xTouchSkill[i].hPos/2;
//						
//			if(xCollection.selectSkill == i)
//			{
//				drawPacker(imgSkillSelect, subTemp[XPOS]-2, subTemp[YPOS]-2, 0, 0, imgW(imgSkillSelect), imgH(imgSkillSelect), VH);
//				drawPacker(imgSkillTextBox, subTemp[XPOS]+68, subTemp[YPOS]-64, 0, 0, imgW(imgSkillTextBox), imgH(imgSkillTextBox), VH);
//												
//				gSetColor(255, 255, 255);
//				setFontSize(8);
//				getSprintfSKillInfo(strTempS,modelCode,xCollection.selectSkill,0);
//				
//												
//				setPopupStringLine(strTempS,lcdW);
//				
//								
//				int fontGab = 20;
//				
//				switch(xPopup.totalLine)
//				{
//				case 2:
//					fontGab = 20;
//					break;
//				case 3:
//				case 4:
//					fontGab = 16;
//					break;
//				}
//								
//				for(int li=0;li<xPopup.totalLine;li++)
//					gDrawString(subTemp[XPOS]+68-80, subTemp[YPOS]-64-3-(fontGab/2*(xPopup.totalLine-1))+(fontGab*li), xPopup.strTextLine[li], VL);
//				
//				setFontSize(11);
//			}
//		}
//		else
//			drawPacker(imgSkillSlotEmpty, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlotEmpty), imgH(imgSkillSlotEmpty), VH);
//	}
//		
//		
//	subTemp[XPOS] = px+117;
//	subTemp[YPOS] = py+128;
//	drawPacker(imgModelMainInfo1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgModelMainInfo1)/2, imgW(imgModelMainInfo1), imgH(imgModelMainInfo1)/2, VH);
//	setFontSize(14);
//	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "피팅하기", VH, 255, 255, 255, 170, 50, 10);
//	setFontSize(11);
//	
//	xModel.xTouchInfoBtn[0].wPos = imgW(imgModelMainInfo1);
//	xModel.xTouchInfoBtn[0].hPos = imgH(imgModelMainInfo1)/2;
//	xModel.xTouchInfoBtn[0].xPos = subTemp[XPOS]-xModel.xTouchInfoBtn[0].wPos/2;
//	xModel.xTouchInfoBtn[0].yPos = subTemp[YPOS]-xModel.xTouchInfoBtn[0].hPos/2;
//	
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		if(xModel.state == MODELCOLLECT_STATE_MAININFO)
//		{
//			switch(xQuestTuto.nowNum)
//			{
//			case TUTO_22_MODELFITTINGBTN:
//				xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//				xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//				xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//				break;
//			}
//		}
//	}
//			
//	subTemp[XPOS] = px+117;
//	subTemp[YPOS] = py+128+52;
//	drawPacker(imgModelMainInfo2, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgModelMainInfo2)/2, imgW(imgModelMainInfo2), imgH(imgModelMainInfo2)/2, VH);
//	
//	setFontSize(14);
//	if(upGrade >= xModelData[modelCode].upGradeMax)
//	{
//		if(xModelData[modelCode].grade == 3)
//			gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "MAX", VH, 255, 255, 255, 19, 79, 77);
//		else
//			gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "조합하기", VH, 255, 255, 255, 19, 79, 77);
//	}
//	else
//	{
//		gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "업그레이드", VH, 255, 255, 255, 19, 79, 77);
//	}
//	setFontSize(11);
//		
//	xModel.xTouchInfoBtn[1].wPos = imgW(imgModelMainInfo2);
//	xModel.xTouchInfoBtn[1].hPos = imgH(imgModelMainInfo2)/2;
//	xModel.xTouchInfoBtn[1].xPos = subTemp[XPOS]-xModel.xTouchInfoBtn[1].wPos/2;
//	xModel.xTouchInfoBtn[1].yPos = subTemp[YPOS]-xModel.xTouchInfoBtn[1].hPos/2;
//
//	subTemp[XPOS] = px+117;
//	subTemp[YPOS] = py+128+104;
//	drawPacker(imgModelMainInfo3, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgModelMainInfo3)/2, imgW(imgModelMainInfo3), imgH(imgModelMainInfo3)/2, VH);
//	
//	setFontSize(14);
//	switch(xModel.state)
//	{
//	case MODELCOLLECT_STATE_LISTINFO:
//		gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "판매하기", VH, 255, 255, 255, 57, 57, 57);
//		break;
//	case MODELCOLLECT_STATE_MAININFO:
//		gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "활동해제", VH, 255, 255, 255, 57, 57, 57);
//		break;
//	}
//	setFontSize(11);
//		
//	
//	xModel.xTouchInfoBtn[2].wPos = imgW(imgModelMainInfo3);
//	xModel.xTouchInfoBtn[2].hPos = imgH(imgModelMainInfo3)/2;
//	xModel.xTouchInfoBtn[2].xPos = subTemp[XPOS]-xModel.xTouchInfoBtn[2].wPos/2;
//	xModel.xTouchInfoBtn[2].yPos = subTemp[YPOS]-xModel.xTouchInfoBtn[2].hPos/2;
//			
//	
//	
//	subTemp[XPOS] = px+214;
//	subTemp[YPOS] = py-230;
//	xTouchClr.wPos = 80;
//	xTouchClr.hPos = 80;
//	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
//	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
//		
//	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
//	{
//		switch(xQuestTuto.nowNum)
//		{
//		case TUTO_22_MODELEXIT:
//			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
//			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
//			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
//			break;
//		}
//	}
//	
//	/*
//	gSetColor(255, 0, 0);
//	setAlpha(100);
//	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
//	setAlpha(ALPHA_MAX);
//	*/
//}

int getModelMainSlot(int key)
{
	int resultNum = DONT;
	for(int k=0;k<MODELMAINSLOTMAX;k++)
	{
		switch(xModelMainSlot[k].state)
		{
		case MODELMAINSLOT_STATE_WAIT:
		case MODELMAINSLOT_STATE_PLAY:
		if(xModelMainSlot[k].modelKey == key)
			resultNum = k;
			break;
		}
	}
	return resultNum;
}

int getModelMainSlot_FASHIONWEEK(int key)
{
    int resultNum = DONT;
    for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
    {
        if(xFashionWeekModel[k].modelKey == key)
        {
            resultNum = k;
            break;
        }
    }
    return resultNum;
}

int getModelMainSlot_LULUPANG(int key)
{
	int resultNum = DONT;
	for(int k=0;k<LULUPANGSETTINGMAX;k++)
	{
		if(xLuluPangModel[k].modelKey == key)
		{
			resultNum = k;
			break;
		}
	}
	return resultNum;
}



void drawModelNameString(int x,int y,int ank,int modelCode)
{
	int grade = xModelData[modelCode].grade;
	
	switch(grade)
	{
	case 0:	//c
		gDrawStringBold(x, y, xModelData[modelCode].strName, ank, 217, 227, 235, 51, 30, 9);
		break;
	case 1:	//b
		gDrawStringBold(x, y, xModelData[modelCode].strName, ank, 29, 255, 252, 51, 30, 9);
		break;
	case 2:	//a
		gDrawStringBold(x, y, xModelData[modelCode].strName, ank, 255, 54, 253, 51, 30, 9);
		break;
	case 3:	//s
		gDrawStringBold(x, y, xModelData[modelCode].strName, ank, 255, 196, 16, 51, 30, 9);
		break;
	}
}

int getModelGiftNum(int inventoryNum,int gab)
{
	int resultNum = 0;
	int modelCode = xInventoryModel[inventoryNum].code;
	int upgrade = xInventoryModel[inventoryNum].upGrade+gab;
	if(upgrade < 0)
		upgrade = 0;
	resultNum = xModelData[modelCode].giftNum.oriData;
		
	switch(xModelData[modelCode].giftPerType)
	{
	case 0:		//증가타입수치
		resultNum += (resultNum*xModelData[modelCode].giftPer[upgrade]/100);
		break;
	}
	
	xModelSkill.bonusPer[MODELSKILL_TYPE_MODELGIFT_PER] = getSkillPer(modelCode,MODELSKILL_TYPE_MODELGIFT_PER);
	if(xModelSkill.bonusPer[MODELSKILL_TYPE_MODELGIFT_PER] > 0)
		resultNum += xModelSkill.bonusPer[MODELSKILL_TYPE_MODELGIFT_PER]*resultNum/100;
	
	return resultNum;
}

int getModelGiftTime(int inventoryNum,int gab)
{
	int resultNum = 0;
	int modelCode = xInventoryModel[inventoryNum].code;
	int upgrade = xInventoryModel[inventoryNum].upGrade+gab;
	if(upgrade < 0)
		upgrade = 0;
		
	resultNum = xModelData[modelCode].giftTime.oriData;
	
	switch(xModelData[modelCode].giftPerType)
	{
	case 1:		//증가타입시간
		resultNum -= xModelData[modelCode].giftPer[upgrade];
		break;
	}
	
	
	xModelSkill.bonusPer[MODELSKILL_TYPE_MODELGIFT_TIME] = getSkillPer(modelCode,MODELSKILL_TYPE_MODELGIFT_TIME);
	if(xModelSkill.bonusPer[MODELSKILL_TYPE_MODELGIFT_TIME] > 0)
		resultNum -= xModelSkill.bonusPer[MODELSKILL_TYPE_MODELGIFT_TIME]*resultNum/100;
	
	return resultNum;
}


void drawModelMainGiftInfo()//모델 홍보 그리는 곳
{
	int px = cx;
	int py = cy;
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_22_MODELMAPMODELINFO:
			xQuestTuto.isTutoClean = TRUE;
			break;
		}
	}
	
	
	xModelMainSlot[xModel.selectMainSlot].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[xModel.selectMainSlot].modelKey);
	
	
	int endTimeTemp = xModelMainSlot[xModel.selectMainSlot].endTime;
	
	

    
    
    

    
	int endTime = endTimeTemp - xCalendar.nowTime;
	int giftNum = getModelGiftNum(xModelMainSlot[xModel.selectMainSlot].inventoryNum,0);
	int modelCode = xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].code;
	if(endTime < 0)
		endTime = 0;
		
	drawBgFillRect();
	drawPacker(imgModelMainGift0, px, py, 0, 0, imgW(imgModelMainGift0), imgH(imgModelMainGift0), VH);
		
	subTemp[XPOS] = px-132;
	subTemp[YPOS] = py-31;
	
	XFACE xFaceTemp;
	xFaceTemp.hairNum = 1000+modelCode;
	xFaceTemp.faceNum = 1000+modelCode;
	xFaceTemp.faceType = 0;
	gSetClip(true,subTemp[XPOS]-73, subTemp[YPOS]-103, 146, 206);
	drawFittingBody(subTemp[XPOS]-10, subTemp[YPOS]+70, &xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].xF, &xFaceTemp, TRUE, xModelData[modelCode].sex);
	gSetClip(false,0, 0, lcdW, lcdH);
	
	subTemp[XPOS] = px+82;
	subTemp[YPOS] = py-111;
		
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "홍보 완료까지 남은시간", VH, 233,217,193,57,48,47);
	
	subTemp[XPOS] = px+82+63;
	subTemp[YPOS] = py-75;
	drawTimeSprintf(strTempS,endTime,1);
	setFontSize(14);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VR,251,51,23,17,11,11);
	setFontSize(11);
	
	subTemp[XPOS] = px+82+35;
	subTemp[YPOS] = py-26;
	setCommaNum(strTempS, giftNum);
	gSetColor(255, 255, 255);
	setFontSize(14);
	gDrawString(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VR);
	setFontSize(11);
	
	int giftTypeImgNum=0;
	switch(xModelData[modelCode].giftType)
	{
	case MODEL_GIFTTYPE_GOLD:giftTypeImgNum=ICON_TYPE_GOLD;break;
	case MODEL_GIFTTYPE_LOOK:giftTypeImgNum=ICON_TYPE_LOOK;break;
	case MODEL_GIFTTYPE_CANDY:giftTypeImgNum=ICON_TYPE_CANDY;break;
	case MODEL_GIFTTYPE_EXP:giftTypeImgNum=ICON_TYPE_EXP;break;
	}
	drawIcon(subTemp[XPOS]+20, subTemp[YPOS]-6, giftTypeImgNum);
	
	

	
	subTemp[XPOS] = px+82;
	subTemp[YPOS] = py+100;
	int fastCash = getFastTimeCash(endTime);
	
	drawPacker(imgQuestBtn1, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgQuestBtn1)/2, imgW(imgQuestBtn1), imgH(imgQuestBtn1)/2, VH);
	drawIcon(subTemp[XPOS]-2-8, subTemp[YPOS]-3-12, ICON_TYPE_LOOK);
	setFontSize(14);
	sprintf(strTempS,"%d",fastCash);
	gDrawStringBold(subTemp[XPOS]-2+8, subTemp[YPOS]-3-12, strTempS, VH, 255, 255, 255, 186, 70, 10);
	gDrawStringBold(subTemp[XPOS]-2, subTemp[YPOS]-3+12, "즉시완료", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	
	
	xModel.xTouchGiftFastCash.wPos = imgW(imgQuestBtn1);
	xModel.xTouchGiftFastCash.hPos = imgH(imgQuestBtn1)/2;
	xModel.xTouchGiftFastCash.xPos = subTemp[XPOS]-xModel.xTouchGiftFastCash.wPos/2;
	xModel.xTouchGiftFastCash.yPos = subTemp[YPOS]-xModel.xTouchGiftFastCash.hPos/2;
		
	subTemp[XPOS] = px;
	subTemp[YPOS] = py+181;
	drawBtn(subTemp[XPOS], subTemp[YPOS], BTN_OK_CONFIRM);
	
	
	
	if(xWorldMap.isTuto == TRUE&&(xQuestTuto.state == QUEST_TUTO_SHOW || xQuestTuto.state == QUEST_TUTO_KEY))
	{
		switch(xQuestTuto.nowNum)
		{
		case TUTO_22_MODELMAPMODELINFOEXIT:
			xTutoInfo.x[xTutoInfo.totalNum] = subTemp[XPOS];
			xTutoInfo.y[xTutoInfo.totalNum] = subTemp[YPOS];
			xTutoInfo.type[xTutoInfo.totalNum++] = TUTOINFO_TYPE_ARROW;
			break;
		}
	}
	
	//스킬
	for(int i=0;i<3;i++)
	{
		subTemp[XPOS] = px+82-70+(70*i);
		subTemp[YPOS] = py+37;
		drawPacker(imgSkillSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlot), imgH(imgSkillSlot), VH);
		if(xModelData[modelCode].totalSkillNum > i)
		{
			int packImgNum = imgSkillIcon0+xModelData[modelCode].skillType[i];
			drawPacker(packImgNum, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(packImgNum), imgH(packImgNum), VH);
			
			xCollection.xTouchSkill[i].wPos = imgW(packImgNum);
			xCollection.xTouchSkill[i].hPos = imgH(packImgNum);
			xCollection.xTouchSkill[i].xPos = subTemp[XPOS]-xCollection.xTouchSkill[i].wPos/2;
			xCollection.xTouchSkill[i].yPos = subTemp[YPOS]-xCollection.xTouchSkill[i].hPos/2;
			
			if(xCollection.selectSkill == i)
			{
				drawPacker(imgSkillSelect, subTemp[XPOS]-2, subTemp[YPOS]-2, 0, 0, imgW(imgSkillSelect), imgH(imgSkillSelect), VH);
				drawPacker(imgSkillTextBox, subTemp[XPOS]+68, subTemp[YPOS]-64, 0, 0, imgW(imgSkillTextBox), imgH(imgSkillTextBox), VH);
				
				gSetColor(255, 255, 255);
				setFontSize(8);
				getSprintfSKillInfo(strTempS,modelCode,xCollection.selectSkill,0);
				
				
				setPopupStringLine(strTempS,lcdW);
				
				
				int fontGab = 20;
				
				switch(xPopup.totalLine)
				{
					case 2:
						fontGab = 20;
						break;
					case 3:
					case 4:
						fontGab = 16;
						break;
				}
				
				for(int li=0;li<xPopup.totalLine;li++)
					gDrawString(subTemp[XPOS]+68-80, subTemp[YPOS]-64-3-(fontGab/2*(xPopup.totalLine-1))+(fontGab*li), xPopup.strTextLine[li], VL);
				
				setFontSize(11);
			}
		}
		else
			drawPacker(imgSkillSlotEmpty, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlotEmpty), imgH(imgSkillSlotEmpty), VH);
	}
}
void drawModelMainGiftResult()
{
	int px = cx;
	int py = cy;
	int giftNum = getModelGiftNum(xModelMainSlot[xModel.selectMainSlot].inventoryNum,0);
	int modelCode = xInventoryModel[xModelMainSlot[xModel.selectMainSlot].inventoryNum].code;

	drawPacker(imgQuestResult0, px, py, 0, 0, imgW(imgQuestResult0), imgH(imgQuestResult0), VH);
	setFontSize(14);
	gDrawStringBold(px+4, py-189, "보상 아이템", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	drawPacker(imgQuestGiftIcon, px-70, py-190, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);

		
	drawModelMainGiftIcon(px, py-60,xModelData[modelCode].giftType);
	switch(xModelData[modelCode].giftType)
	{
	case MODEL_GIFTTYPE_GOLD:
		setCommaNum(strTempB, giftNum);
		sprintf(strTempS, "%s골드",strTempB);
		break;
	case MODEL_GIFTTYPE_LOOK:
		sprintf(strTempS, "%d룩",giftNum);
		break;
	case MODEL_GIFTTYPE_CANDY:
		sprintf(strTempS, "%d캔디",giftNum);
		break;
	case MODEL_GIFTTYPE_EXP:
		setCommaNum(strTempB, giftNum);
		sprintf(strTempS, "%sExp",strTempB);
		break;
	}
		
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px, py+74, strTempS, VH);
	setFontSize(11);
	drawPacker(imgQuestResult1, px, py+169, 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	setFontSize(14);
	gDrawStringBold(px-2, py+169-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = px-xTouchOk.wPos/2;
	xTouchOk.yPos = py+169-xTouchOk.hPos/2;
}

void drawModelMainGiftIcon(int x,int y,int type)
{
	int imgNum;
	char strFileName[64];
	switch(type)
	{
	case MODEL_GIFTTYPE_GOLD:
		imgNum = 0;
		sprintf(strFileName, "shopmoneyicon11.png");
		break;
	case MODEL_GIFTTYPE_LOOK:
		imgNum = 1;
		sprintf(strFileName, "shopmoneyicon1.png");
		break;
	case MODEL_GIFTTYPE_CANDY:
		imgNum = 2;
		sprintf(strFileName, "shoppremiumicon6.png");
		break;
	case MODEL_GIFTTYPE_EXP:
		imgNum = 3;
		sprintf(strFileName, "expicon.png");
		break;
	}
	
	if(imgModelMainGiftIcon[imgNum].texture == NULL)
	{
		loadImg(strFileName, &imgModelMainGiftIcon[imgNum]);
	}
	else
		drawImage(&imgModelMainGiftIcon[imgNum], x, y, 0, 0, imgModelMainGiftIcon[imgNum].w, imgModelMainGiftIcon[imgNum].h, VH);
}

void makeWaste()
{
	int nowFloorTemp = xMap.nowFloor;
	for(int floor=0;floor<xMap.totalFloor;floor++)
	{
		xInterior.xBuildSlot.codeTeam[0] = INTERIOR_TYPE_OBJ*1000;
		xMap.nowFloor = floor;
		checkBuildMapData();
		xInterior.xBuildSlot.codeTeam[0] = 0;
		
		for(int i=0;i<3;i++)
		{
			xWaste.state[floor][i] = WASTE_STATE_WAIT;
			xWaste.anyCnt[floor][i] = 0;
			xWaste.type[floor][i] = i;
			
			int whileCnt = 0;
			while(TRUE)
			{
				xWaste.mapX[floor][i] = ranDom(0, xMap.shopPointW-2);
				xWaste.mapY[floor][i] = ranDom(0, xMap.shopPointH-2);
								
				M_Boolean isCheck = FALSE;
				for(int w=0;w<2;w++)
				{
					for(int h=0;h<2;h++)
					{
						if(xMap.interiorData[floor][xWaste.mapX[floor][i]+w][xWaste.mapY[floor][i]+h] == TRUE)
						{
							isCheck = TRUE;
							break;
						}
						if(isCheck == TRUE)
							break;
					}
				}
				//쓰레기 생성하기
				if(isCheck == FALSE)
				{
					for(int w=0;w<2;w++)
					{
						for(int h=0;h<2;h++)
						{
							xMap.interiorData[floor][xWaste.mapX[floor][i]+w][xWaste.mapY[floor][i]+h] =  TRUE;
						}
					}
					break;
				}
				
				if(++whileCnt > 100)
				{
					xWaste.state[floor][i] = WASTE_STATE_DONT;
					break;
				}
			}
		}
	}
	xMap.nowFloor = nowFloorTemp;
}

void initTutoLimit(int type)
{
	switch(type)
	{
	case TUTOLIMIT_WORLDMAP:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MAINMANU]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FRIENDS]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_TREND]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DELIVERY]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_GOLDCASH]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PROFILE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_POSTBOX]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EXPEND1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_FASHIONSHOW]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_QUEST]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PARKING]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_COUNTER]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP2]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_DP1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MANNEQUIN]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_PREFERENCE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDITINTERIOR]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MODEL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EVENT]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_CANDY]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_MODELMENU]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STAFF]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_STORE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_EDIT]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_OPTION]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_SALESHOP]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_WORLDMAP_COLLECTION]=TRUE;
		break;
	case TUTOLIMIT_PRODUCE:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CLOSE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_PREMIUM]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_LICENCE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE0]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_COMPLETE2]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY0]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY2]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY3]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY4]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY5]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY6]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CATEGORY7]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_MOVE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_CANCEL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_PRODUCE_FASHIONSHOW]=TRUE;
		break;
	case TUTOLIMIT_DP:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_CLOSE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_COMPLETE0]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_COMPLETE1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_COMPLETE2]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_SCROLL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DP_ORDER]=TRUE;
		break;
	case TUTOLIMIT_EDIT:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_OK]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_CANCEL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SAVE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SHOP]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_EXIT]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_ALL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_REVERSE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_TILEMODE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_INTERIORMODE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_SELECT]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_EDIT_MOVE]=TRUE;
		break;
	case TUTOLIMIT_STORE:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY0]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY2]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY3]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY4]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CATEGORY5]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU0]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU2]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU3]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU4]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU5]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU6]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MENU7]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_MOVE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_CLOSE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STORE_ITEMSELECT]=TRUE;
		break;
	case TUTOLIMIT_FRIENDS:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_LIST]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FOLLOW]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_EDIT]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_MODEL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_ADD]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_RANDOM]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_CLOSE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDS_FRIENDS_PM]=TRUE;
		break;
	case TUTOLIMIT_ADDFRIENDS:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_RECOMMEND]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_FIND]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_KAKAO]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_KAKAOAPP]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_INVITE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_CLOSE]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_ADDFRIENDS_ADD]=TRUE;
		break;
	case TUTOLIMIT_FRIENDSHOP:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_MODEL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_GUESTBOOK]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HOME]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FRIENDS]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_PREVIOUS]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_NEXT]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_QUEST]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_HELP]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_PHOTO]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_ORDER]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_EXTERNAL]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR1]=TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FRIENDSHOP_FLOOR2]=TRUE;
						
		break;
	case TUTOLIMIT_FITTING:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_SAVE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_EXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY0] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY1] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY2] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY3] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY4] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY5] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_CATEGORY6] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_MAN] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_WOMAN] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKMENU] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKIN] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_TUCKOUT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RESET] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LEFT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_RIGHT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_FITTING] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FITTING_LINK] = TRUE;
		break;
	case TUTOLIMIT_FASHIONSHOW:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_RANK0] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_RANK1] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_RANK2] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_EXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_READBTN] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_NOTICE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_VOTE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFO] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOEXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOFRIENDSHOP] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_INFOREPLAY] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_DRESSCODE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_BACK] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_START] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_FITTING] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SELECTMODEL] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_FASHIONSHOW_SKIP] = TRUE;
		break;
	case TUTOLIMIT_STAFF:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_SAVE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY0] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY1] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY2] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY3] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY4] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_CATEGORY5] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_LEFT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_RIGHT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_TUCKMENU] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_TUCKIN] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_TUCKOUT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_RESET] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_STAFF_EDIT] = TRUE;
		break;
	case TUTOLIMIT_MODEL:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_EXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_SALE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_EMPTY] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_WAIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_PLAY] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_SUCCESS] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFO] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_CASTING] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_CASTINGCASH] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_MODELLIST] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOBTN0] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOBTN1] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOBTN2] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_INFOEXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_SELECTMODELEXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_GIFTINFOCASH] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MODEL_HELP] = TRUE;
		break;
	case TUTOLIMIT_MINIGAME:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MINIGAME_EXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MINIGAME_PLAY] = TRUE;
		break;
	case TUTOLIMIT_MAIL:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_EXIT] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_TEXTBOX] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_SEND] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_TODAY] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_USERINFO] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_GIFTTAB] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_DEL] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_EXITFRIEND] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_TEXTBOXFRIEND] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_MAIL_SENDFRIEND] = TRUE;
		break;
	case TUTOLIMIT_TREND:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_TREND_BUY] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_TREND_LINK] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_TREND_EXIT] = TRUE;
		break;
	case TUTOLIMIT_DELIVERY:
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_ORDER] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_PARKING] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_CAR] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_CLOSE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_ORDERLIST] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SLOT1] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SLOT2] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SLOT3] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_SELECTCLOSE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_COMPLETE] = TRUE;
		xTutoLimit.isLock[TUTOLIMIT_TYPE_DELIVERY_OK] = TRUE;
		break;
	}
}

void drawFriendInvite()
{
	int px = cx;
	int py = cy;
	int slot = xKakao.totalKakaoInvite.oriData/10;
	drawBgFillRect();
	drawPacker(imgQuestResult0, px, py, 0, 0, imgW(imgQuestResult0), imgH(imgQuestResult0), VH);
	setFontSize(14);
	gDrawStringBold(px+4, py-189, "보상 아이템", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	drawPacker(imgQuestGiftIcon, px-70, py-190, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
	
	switch(xKakao.inviteType[slot])
	{
	case KAKAOINVITE_TYPE_GOLD:
	case KAKAOINVITE_TYPE_LOOK:
	case KAKAOINVITE_TYPE_CANDY:
	case KAKAOINVITE_TYPE_MODEL_CA:
	case KAKAOINVITE_TYPE_MODEL_BS:
		drawImage(&imgMiniGameIcon[slot], px, py-60, 0, 0, imgMiniGameIcon[slot].w, imgMiniGameIcon[slot].h, VH);
		break;
	case KAKAOINVITE_TYPE_INTERIOR:
		setMapData(xKakao.inviteNum[slot].oriData);
		setDrawObjCenter(xMap.type,xMap.listNum);
		if(xDrawObjCenter.reSize != 100)
		{
			xGame.fgameScaleCx =px;
			xGame.fgameScaleCy =lcdH-(py-60);
			xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
		}
		drawObj(px+xDrawObjCenter.w, py-60+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
		xGame.fgameScale = 1.0f;
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
		break;
	}

	switch(xKakao.inviteType[slot])
	{
	case KAKAOINVITE_TYPE_GOLD:
		sprintf(strTempS, "%d골드보상",xKakao.inviteNum[slot].oriData);
		break;
	case KAKAOINVITE_TYPE_LOOK:
		sprintf(strTempS, "%d룩보상",xKakao.inviteNum[slot].oriData);
		break;
	case KAKAOINVITE_TYPE_CANDY:
		sprintf(strTempS, "%d캔디보상",xKakao.inviteNum[slot].oriData);
		break;
	case KAKAOINVITE_TYPE_INTERIOR:
		sprintf(strTempS, "%s\n보관함으로 지급완료",xObj.xObjData[xKakao.inviteNum[slot].oriData/1000][xKakao.inviteNum[slot].oriData%1000].strName);
		break;
	case KAKAOINVITE_TYPE_MODEL_CA:
		sprintf(strTempS, "일반 캐스팅");
		break;
	case KAKAOINVITE_TYPE_MODEL_BS:
		sprintf(strTempS, "고급 캐스팅");
		break;
	}
	
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px, py+74, strTempS, VH);
	setFontSize(11);
	drawPacker(imgQuestResult1, px, py+169, 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	setFontSize(14);
	gDrawStringBold(px-2, py+169-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = px-xTouchOk.wPos/2;
	xTouchOk.yPos = py+169-xTouchOk.hPos/2;
}

void setKakaoinviteOk()
{
	///////////////////////네트워크성공시///////////////////////////
	//완료
	xKakaoData.inveiteKeyReturn = FALSE;
	xKakaoData.xFriendInfo[xKakaoData.inveiteKakaoSlotNum].isInvite = TRUE;
	setSecurity(&xKakao.totalKakaoInvite, xKakao.totalKakaoInvite.oriData+1);
	
	////////////////////////////////////////////////////////////
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_KAKAOINVITE, FALSE);
	////////////////////////////////////////////////////////////
			
	switch(xKakao.totalKakaoInvite.oriData)
	{
	case 10:
		xFriend.isInvite = TRUE;
		break;
	case 20:
		xFriend.isInvite = TRUE;
		break;
	case 30:
		xFriend.isInvite = TRUE;
		break;
	case 40:
		xFriend.isInvite = TRUE;
		break;
	}

	if(xFriend.isInvite == TRUE)
	{
		int inviteslotNum = xKakao.totalKakaoInvite.oriData/10;
		switch(xKakao.inviteType[inviteslotNum])
		{
		case KAKAOINVITE_TYPE_GOLD:
			setMoney(xKakao.inviteNum[inviteslotNum].oriData);
			break;
		case KAKAOINVITE_TYPE_LOOK:
			setCash(xKakao.inviteNum[inviteslotNum].oriData);
			break;
		case KAKAOINVITE_TYPE_CANDY:
			setTired(xKakao.inviteNum[inviteslotNum].oriData);
			setQuest(98, xKakao.inviteNum[inviteslotNum].oriData, DONT);
			break;
		case KAKAOINVITE_TYPE_INTERIOR:
			inputInventoryInterior(xKakao.inviteNum[inviteslotNum].oriData);
			//////////////////////////////////////////////////////////////////////////////
			xEventQueueNet.code[xEventQueueNet.totalNum] = xKakao.inviteNum[inviteslotNum].oriData;
			xEventQueueNet.code[xEventQueueNet.totalNum] = xEventQueueNet.code[xEventQueueNet.totalNum]<0?-xEventQueueNet.code[xEventQueueNet.totalNum]:xEventQueueNet.code[xEventQueueNet.totalNum];
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
			for(int ee=0;ee<xInventoryInterior.totalNum;ee++)
			{
				if(xInventoryInterior.itemCode[ee] == xEventQueueNet.code[xEventQueueNet.totalNum])
					xEventQueueNet.haveNum[xEventQueueNet.totalNum]++;
			}
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_INTERIOR, FALSE);
			//////////////////////////////////////////////////////////////////////////////
			break;
		case KAKAOINVITE_TYPE_MODEL_CA:
//			setNewModel(0);
			break;
		case KAKAOINVITE_TYPE_MODEL_BS:
//			setNewModel(1);
			break;
		}
	}

	switch(xKakao.inviteType[0])
	{
	case KAKAOINVITE_TYPE_GOLD:
		setMoney(xKakao.inviteNum[0].oriData);
		setBonus(xKakao.bonusXPos, xKakao.bonusYPos, ICON_TYPE_GOLD, xKakao.inviteNum[0].oriData);
		break;
	case KAKAOINVITE_TYPE_LOOK:
		setCash(xKakao.inviteNum[0].oriData);
		setBonus(xKakao.bonusXPos, xKakao.bonusYPos, ICON_TYPE_LOOK, xKakao.inviteNum[0].oriData);
		break;
	case KAKAOINVITE_TYPE_CANDY:
		setTired(xKakao.inviteNum[0].oriData);
		setQuest(98, xKakao.inviteNum[0].oriData, DONT);
		setBonus(xKakao.bonusXPos, xKakao.bonusYPos, ICON_TYPE_CANDY, xKakao.inviteNum[0].oriData);
		break;
	}
	////////////////////////////////////////////////////////////
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, FALSE);
	////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////
	xEventQueueNet.layer[xEventQueueNet.totalNum][0] = 301;//0:골드,1프리미엄,2캔디머쉰,3직원의상,4모델뽑기,100:첫구매이벤트,101:스페션세일이벤트,102:리뷰이벤트,200:해킹로그,300:출석로그,301:친구초대로그
	xEventQueueNet.layer[xEventQueueNet.totalNum][1] = 0;//아이템종류(0~5)직원의상 구매시
	xEventQueueNet.code[xEventQueueNet.totalNum] = xKakao.totalKakaoInvite.oriData;
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BUYGOLD, TRUE);
	///////////////////////////////////////////////////////////////////
}

void subLoading()
{
	int px = cx;
	int py = cy;
	if(xWorldMap.isSubLoading == TRUE)
	{
		switch(xWorldMap.subLoadingAntCnt++)
		{
		case 5:
			xWorldMap.isSubLoading = FALSE;
			switch(xWorldMap.subLoadingState)
			{
			case WORLDMAP_STATE_MODEL:
				modelImgLoad(TRUE);
				xWorldMap.state = WORLDMAP_STATE_MODEL;
				xModel.state = MODELCOLLECT_STATE_MAIN;
				xModel.inventoryNum = DONT;
//				sortModelList();
//				setModelList(xModel.listTabNum);
				break;
			case WORLDMAP_STATE_FASHIONSHOWNEW:
				xWorldMap.isKeyReturn = FALSE;
				xFashionShow.isSeverNumLoad = FALSE;
				loadImgFreeImgFashionShow(TRUE);
				////////////////////////////////////////////////
				
				xWorldMap.state = WORLDMAP_STATE_FASHIONSHOWNEW;
				xFashionShow.state = FASHIONSHOW_STATE_MAIN;
				xFashionShow.selectRankTabS = 1;
				
				for(int i=0;i<3;i++)
				{
					xFashionShow.xMyRankSlot[i].rank = 0;
					xFashionShow.xMyRankSlot[i].score = 0;
					

					xFashionShow.nowPageNumList[i] = 0;
					xFashionShow.totalRankList[i] = 0;
				}
				
				xFashionShow.xDragScrollRank.selectNum = 0;
				xFashionShow.xDragScrollRank.pos = 0;
				xFashionShow.xDragScrollRank.speed = 0;
				
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDMODEL, FALSE);
				break;
			}
			break;
		}
		
		
		int w = xWorldMap.subLoadingAntCnt*imgW(imgLoadingGage3)/6;
		drawPacker(imgLoadingGage3, px-imgW(imgLoadingGage3)/2, py, 0, 0, imgW(imgLoadingGage3), imgH(imgLoadingGage3)/2, VL);
		drawPacker(imgLoadingGage3, px-imgW(imgLoadingGage3)/2, py, 0, imgH(imgLoadingGage3)/2, w, imgH(imgLoadingGage3)/2, VL);
	}
}


//제작			:범규씨기획/협의
//진열			:범규씨기획/협의
//주문배송			:범규씨기획/협의
//명성도 채우기		:문제없음

////////////현상태 판단
//인테리어구매		:배치하기로 변경
//확장			:되있음
//라이센스구매		:되있음


///////////발생이후로 판단
//패션쇼참가		:되있음
//친구Help		:되있음
//모델 추천		:되있음
//레이어드			:피팅창진입시(마네킹,모델화확인)


//제작경우 제작기에 돌아가고 있는상태로 완료처리


////////////////////GetByteArrayElements누수확인


/*
2014-01-27 13:11:18.170 FashionShop[20114:70b] 보낸패킷{
    ACTION = 1;
    AUTHENTICODE = 123456;
    "B_ITEM_INDEX" = 10000;
    CASH = 0;
    EXP = 15396;
    FLOOR = 1;
    GOLD = 19533;
    KEY = 0;
    PROTOCOL = 122;
    USERNUM = 395;
    X = 24;
    Y = 34;
}
2014-01-27 13:11:18.224 FashionShop[20114:70b] 받은패킷:{
    KEY = 0;
    PROTOCOL = 123;
    RESULT = 0;
    STATUS = 0;
},
*/

int getStringByte(char *strText)
{
	int result = 0;
	int len = strlen(strText);
	int kor = 0;
	int eng = 0;
		
	for(int i=0;i<len;i++)
	{
		if((unsigned char)strText[i] >= 0xA4)
		{
			//한글
			i++;
			i++;
			kor++;
		}
		else
		{
			//그외
			eng++;
		}
	}
	result = (kor*1000)+eng;
	return result;
}

int getCharSpecialCnt(char *strText)
{
	int len = strlen(strText);
	int count = 0;
	
	for(int i=0;i<len;i++)
	{
		if((unsigned char)strText[i] >= 0xA4)
		{
			//한글
			i++;
			i++;
		}
		else if(strText[i] >= '0' && strText[i] <= '9')
		{
			//숫자
		}
		else if(strText[i] >= 'A' && strText[i] <= 'Z')
		{
			
		}
		else if(strText[i] >= 'a' && strText[i] <= 'z')
		{
			
		}
		else
		{
			count++;
		}
	}
	return count;
}

void makeBackBuffer(int floor)
{
    
}
void drawBackBuffer(char* backBuffer,char *imgBuffer,int x,int y,int bufW,int bufH,M_Boolean isRever)
{
    
	
}




void drawArrowPacker(int img,M_Int32 x,M_Int32 y,M_Int32 type)
{
	M_Int32 anyPos;
	
	switch(gameCnt%4)
	{
		case 0:
			anyPos = 0;
			break;
		case 1:
			anyPos = 1;
			break;
		case 2:
			anyPos = 2;
			break;
		case 3:
			anyPos = 1;
			break;
	}
	
	switch(type)
	{
		case ARROW_UP:
			drawPacker(img, x,y-anyPos,0,0, imgW(img)/4, imgH(img), VH);
			break;
		case ARROW_DOWN:
			drawPacker(img, x,y+anyPos,imgW(img)/4,0, imgW(img)/4, imgH(img), VH);
			break;
		case ARROW_LEFT:
			drawPacker(img, x-anyPos,y,imgW(img)/4*2,0, imgW(img)/4, imgH(img), VH);
			break;
		case ARROW_RIGHT:
			drawPacker(img, x+anyPos,y,imgW(img)/4*3,0, imgW(img)/4, imgH(img), VH);
			break;
	}
	
	switch(type)
	{
		case ARROW_UP:
			xTouchArrowUp.xPos = x-imgW(img)/4/2;
			xTouchArrowUp.yPos = y-imgH(img)/2;
			xTouchArrowUp.wPos = imgW(img)/4;
			xTouchArrowUp.hPos = imgH(img);
			break;
		case ARROW_DOWN:
			xTouchArrowDown.xPos = x-imgW(img)/4/2;
			xTouchArrowDown.yPos = y-imgH(img)/2;
			xTouchArrowDown.wPos = imgW(img)/4;
			xTouchArrowDown.hPos = imgH(img);
			break;
		case ARROW_LEFT:
			xTouchArrowLeft.xPos = x-imgW(img)/4/2;
			xTouchArrowLeft.yPos = y-imgH(img)/2;
			xTouchArrowLeft.wPos = imgW(img)/4;
			xTouchArrowLeft.hPos = imgH(img);
			break;
		case ARROW_RIGHT:
			xTouchArrowRight.xPos = x-imgW(img)/4/2;
			xTouchArrowRight.yPos = y-imgH(img)/2;
			xTouchArrowRight.wPos = imgW(img)/4;
			xTouchArrowRight.hPos = imgH(img);
			break;
	}
}

void drawNumPacker(int img,M_Int32 x, M_Int32 y, M_Int32 value, M_Int32 gab,M_Int32 ank)
{
	
	
	M_Int32 w = imgW(img)/10;
	M_Int32 h = imgH(img);
	
	M_Int32 retinaW = w;
	M_Int32 retinaH = h;
	
 	M_Int32 z;
	M_Int32 val = 0;
	M_Int32 div = 1;
	M_Int32 tempN = 0;
	M_Int32 pos = 0;
	M_Int32 len = 0;
	
	if(value == 0)
	{
		switch(ank)
		{
			case VR:
				drawPacker(img, x - retinaW-gab, y-retinaH/2, 0, 0, w, h, TL);
				break;
			case TR:
				drawPacker(img, x - retinaW-gab, y, 0, 0, w, h, TL);
				break;
			case TL:
				drawPacker(img, x, y, 0, 0, w, h, TL);
				break;
			case VL:
				drawPacker(img, x, y-retinaH/2, 0, 0, w, h, TL);
				break;
			case BL:
				drawPacker(img, x, y-retinaH/2, 0, 0, w, h, BL);
			case BR:
				drawPacker(img, x - retinaW-gab, y, 0, 0, w, h, BL);
				break;
			case TH:
				drawPacker(img, x-(gab/2) - (retinaW/2), y, 0, 0, w, h, TL);
				break;
			case VH:
				drawPacker(img, x-(gab/2) - (retinaW/2), y-retinaH/2, 0, 0, w, h, TL);
				break;
		}
		return;
	}
	
	val = value * 10;
	while(val >= 10)
	{
		val /= 10;
		div *= 10;
		len++;
	}
	val = value * 10;
	for(z=0; z<len; z++)
	{
		tempN = val / div;				// ∞¢ ¿⁄∏Æ ∞™
		switch(ank)
		{
			case VR:
				drawPacker(img, x-(((len)-pos)*(retinaW+gab)), y-(retinaH/2), tempN*w, 0, w, h,TL);
				break;
			case TR:
				drawPacker(img, x-(((len)-pos)*(retinaW+gab)), y, tempN*w, 0, w, h,TL);
				break;
			case TL:
				drawPacker(img, x+(((len)-(len -pos))*(retinaW+gab)), y, tempN*w, 0, w, h,TL);
				break;
			case VL:
				drawPacker(img, x+(((len)-(len -pos))*(retinaW+gab)), y-(retinaH/2), tempN*w, 0, w, h,TL);
				break;
			case BL:
				drawPacker(img, x+(((len)-(len -pos))*(retinaW+gab)), y, tempN*w, 0, w, h,BL);
				break;
			case BR:
				drawPacker(img, x-(((len)-pos)*(retinaW+gab)), y, tempN*w, 0, w, h,BL);
				break;
			case TH:
				drawPacker(img, x-(((len)-pos)*(retinaW+gab)) + ((len)*(retinaW+gab))/2, y, tempN*w, 0, w, h,TL);
				break;
			case VH:
				drawPacker(img, x-(((len)-pos)*(retinaW+gab)) + ((len)*(retinaW+gab))/2, y-(retinaH/2), tempN*w, 0, w, h,TL);
				break;
				
		}
		val -= tempN * div;				// √÷¥Î¿⁄∏Æ∞™ ª©±‚
		div /= 10;						// ≥™¥≠ ∞™ ¿⁄∏Æ ¡Ÿ¿Ã±‚
		pos++;							// ¬Ô¿ª ¿ßƒ°∞™ ¿Ãµø
		if( tempN < 0 )
			val = (len - pos) * div;
	}
}

void drawNumCommaPacker(int img,M_Int32 x, M_Int32 y, M_Int32 value, M_Int32 gab,M_Int32 ank,int imgComma,int commagab)
{
	M_Int32 w = imgW(img)/10;
	M_Int32 h = imgH(img);
	M_Int32 retinaW = w;
	M_Int32 retinaH = h;
	
	M_Int32 retinaCommaW = imgW(imgComma);
	
	
	M_Int32 xPos;
	M_Int32 yPos;
	
 	M_Int32 z;
	M_Int32 val = 0;
	M_Int32 div = 1;
	M_Int32 tempN = 0;
	M_Int32 pos = 0;
	M_Int32 len = 0;
	M_Int32 commaW = 0;
	M_Int32 commaMax = 0;
		
	if(value == 0)
	{
		switch(ank)
		{
			case VR:
				drawPacker(img, x - retinaW-gab, y-retinaH/2,0, 0, w, h,TL);
				break;
			case TR:
				drawPacker(img, x - retinaW-gab, y,0, 0, w, h,TL);
				break;
			case TL:
				drawPacker(img, x, y,0, 0, w, h,TL);
				break;
			case VL:
				drawPacker(img, x, y-retinaH/2,0, 0, w, h,TL);
				break;
			case BL:
				drawPacker(img, x, y,0, 0, w, h,BL);
			case BR:
				drawPacker(img, x - retinaW-gab, y,0, 0, w, h,BL);
				
				break;
			case TH:
				drawPacker(img, x-(gab/2) - (retinaW/2), y,0, 0, w, h,TL);
				break;
			case VH:
				drawPacker(img, x-(gab/2) - (retinaW/2), y-retinaH/2,0, 0, w, h,TL);
				break;
		}
		return;
	}
	
	val = value * 10;
	while(val >= 10)
	{
		val /= 10;
		div *= 10;
		len++;
	}
	val = value * 10;
	
	commaMax = (len-1)/3;
	
	for(z=0; z<len; z++)
	{
		tempN = val / div;				// ∞¢ ¿⁄∏Æ ∞™
		switch(ank)
		{
			case VR:
				xPos = x-(((len)-pos)*(retinaW+gab))+commaW-(commaMax*((retinaCommaW/2+commagab)*2));
				yPos = y-(retinaH/2);
				
				drawPacker(img, xPos, yPos, tempN*w, 0, w, h,TL);
				
				
				if(z != len-1 && (len-z-1)%3 == 0)
				{
					commaW += retinaCommaW/2+commagab;
					xPos = x-(((len)-pos)*(retinaW+gab))+commaW-(commaMax*((retinaCommaW/2+commagab)*2));
					yPos = y-(retinaH/2);
					drawPacker(imgComma, xPos+(retinaW+gab), yPos, 0, 0, imgW(imgComma), imgH(imgComma), TH);
					commaW += retinaCommaW/2+commagab;
				}
				break;
		}
		val -= tempN * div;
		div /= 10;
		pos++;
		if( tempN < 0 )
			val = (len - pos) * div;
	}
}



void checkTodaySocialFashion()
{
	if(xLock.isLock[LOCK_TYPE_FASHIONSHOW] == FALSE)
	{
		if(xSave.socialDay != xCalendar.nowDay)
		{
			xWorldMap.isTodaySocial = FALSE;
			xNoticeWorldMap.isOneDay = FALSE;
			xWorldMap.state = WORLDMAP_STATE_TODAYSOCIAL;
			loadImg("todaysocialfashionbg.png", &imgTodaySocialFashionBg);
		}
	}
}
void drawTodaySocialFashion()
{
	int px = cx;
	int py = cy;
		
	drawBgFillRect();
	drawImage(&imgTodaySocialFashionBg, px, py, 0, 0, imgTodaySocialFashionBg.w, imgTodaySocialFashionBg.h, VH);
	
	subTemp[XPOS] = px;
	subTemp[YPOS] = py-20;
	drawFittingF(subTemp[XPOS]-115,subTemp[YPOS], xSaveTemp.socialItem[0], 100);
	gSetColor(82, 49, 38);
	setFontSize(14);
	setMapData(xSaveTemp.socialItem[0]);
	gDrawString(subTemp[XPOS]-115, subTemp[YPOS]+122, xFashionData[xMap.type][xMap.listNum].strName, VH);
	setFontSize(11);
		
	if(xSaveTemp.socialItem[1] != DONT)
	{
		drawFittingF(subTemp[XPOS]+115,subTemp[YPOS], xSaveTemp.socialItem[1], 100);
		gSetColor(64, 36, 29);
		setFontSize(14);
		setMapData(xSaveTemp.socialItem[1]);
		gDrawString(subTemp[XPOS]+115, subTemp[YPOS]+112, xFashionData[xMap.type][xMap.listNum].strName, VH);
		setFontSize(11);
	}
	
	subTemp[XPOS] = px-193;
	subTemp[YPOS] = py+185;
	if(xNoticeWorldMap.isOneDay == TRUE)
		drawPacker(imgQuestV, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
	
	
	
	xNoticeWorldMap.xTouchOneDay.wPos = 200;
	xNoticeWorldMap.xTouchOneDay.hPos = 100;
	xNoticeWorldMap.xTouchOneDay.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchOneDay.wPos/2;
	xNoticeWorldMap.xTouchOneDay.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchOneDay.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchOneDay.xPos, xNoticeWorldMap.xTouchOneDay.yPos, xNoticeWorldMap.xTouchOneDay.wPos, xNoticeWorldMap.xTouchOneDay.hPos);
	 setAlpha(ALPHA_MAX);
	 */

	subTemp[XPOS] = px+143;
	subTemp[YPOS] = py+203;
	drawBtn(subTemp[XPOS], subTemp[YPOS],BTN_OK_CONFIRM);
}


void drawRankChange()
{
	int px = cx;
	int py = cy;
	int startAnyCnt;
	
	
	//팝업등장
	startAnyCnt = xFashionShow.rankChangeAnyCnt;
	switch(startAnyCnt)
	{
	case 0:
		break;
	case 1:
		break;
	case 2:
		break;
	}
	
	drawPacker(imgRankChange0, px, py, 0, 0, imgW(imgRankChange0), imgH(imgRankChange0), VH);
	//슬롯변경
	//내슬롯 빤짝이 외 기타 펑펑펑
	startAnyCnt = xFashionShow.rankChangeAnyCnt-5;
	int changeX = 0;
	int changeY = -94;
	switch(startAnyCnt)
	{
	case 0:changeX=0;changeY=-0;break;
	case 1:changeX=1.849;changeY=-0.605;break;
	case 2:changeX=4;changeY=0;break;
	case 3:changeX=-22.673;changeY=-2.306;break;
	case 4:changeX=-49.339;changeY=-4.617;break;
	case 5:changeX=-76;changeY=-7;break;
	case 6:changeX=-91.975;changeY=-13.409;break;
	case 7:changeX=-107.95;changeY=-19.797;break;
	case 8:changeX=-124;changeY=-26;break;
	case 9:changeX=-127.255;changeY=-35.237;break;
	case 10:changeX=-130.197;changeY=-44.596;break;
	case 11:changeX=-133;changeY=-54;break;
	case 12:changeX=-132.715;changeY=-62.67;break;
	case 13:changeX=-132.403;changeY=-71.336;break;
	case 14:changeX=-132;changeY=-80;break;
	case 15:changeX=-117.688;changeY=-84.732;break;
	case 16:changeX=-103.311;changeY=-89.268;break;
	case 17:changeX=-89;changeY=-94;break;
	case 18:changeX=-71.005;changeY=-94.218;break;
	case 19:changeX=-53.006;changeY=-94.137;break;
	case 20:changeX=-35;changeY=-94;break;
	case 21:changeX=-17.663;changeY=-93.908;break;
	case 22:changeX=-0.333;changeY=-93.854;break;
	case 23:changeX=-17;changeY=-94;break;
	case 24:changeX=-11.362;changeY=-94.095;break;
	case 25:changeX=-5.682;changeY=-94.013;break;
	case 26:changeX=-0;changeY=-94;break;
	default:
			if(startAnyCnt < 0)
			{
				changeX = 0;
				changeY = 0;
			}
			
		break;
	}
			
	/*
	drawFriendProfile(subTemp[XPOS]-110, subTemp[YPOS]-3, xNetData.userNum, 60);
	sprintf(strTempS, "%d(%d표)",xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].score,xFashionShow.xMyRankSlot[xFashionShow.selectRankTabS].vote);
	gDrawStringBold(subTemp[XPOS]-73, subTemp[YPOS]-13, strTempS, VL, 252, 154, 18, 44, 27, 26);
	gDrawStringBold(subTemp[XPOS]-73, subTemp[YPOS]+17, xSaveTemp.strNickName, VL, 252, 255, 255, 44, 27, 26);
	*/
	subTemp[XPOS] = px+2;
	subTemp[YPOS] = py-9-47;
	drawFriendProfile(subTemp[XPOS]-65-changeX, subTemp[YPOS]-3-changeY, xFashionShow.xRankChangeSlot.userCode, 60);
	switch(xFashionShow.xMyRankSlot[1].rank)
	{
	case 0:
		drawPacker(imgRankChange1, subTemp[XPOS]-changeX, subTemp[YPOS]-changeY, 0, 0, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		break;
	case 1:
		drawPacker(imgRankChange1, subTemp[XPOS]-changeX, subTemp[YPOS]-changeY, 0, imgH(imgRankChange1)/4*1, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		break;
	case 2:
		drawPacker(imgRankChange1, subTemp[XPOS]-changeX, subTemp[YPOS]-changeY, 0, imgH(imgRankChange1)/4*2, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		break;
	default:
		drawPacker(imgRankChange1, subTemp[XPOS]-changeX, subTemp[YPOS]-changeY, 0, imgH(imgRankChange1)/4*3, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		sprintf(strTempS, "%d",xFashionShow.xMyRankSlot[1].rank);
		gDrawStringBold(subTemp[XPOS]-143-changeX, subTemp[YPOS]-5-changeY, strTempS, VH, 86,	255,220 , 33, 20, 20);
		break;
	}
	sprintf(strTempS, "%d(%d표)",xFashionShow.xRankChangeSlot.score,xFashionShow.xRankChangeSlot.vote);
	gDrawStringBold(subTemp[XPOS]-28-changeX, subTemp[YPOS]-19-changeY, strTempS, VL, 252, 154, 18, 44, 27, 26);
	gDrawStringBold(subTemp[XPOS]-28-changeX, subTemp[YPOS]+11-changeY, xFriendData[xFashionShow.xRankChangeSlot.friendDataNum].strNickName, VL, 252, 255, 255, 44, 27, 26);
		
	
	subTemp[XPOS] = px+2;
	subTemp[YPOS] = py-9+47;
	drawFriendProfile(subTemp[XPOS]-65+changeX, subTemp[YPOS]-3+changeY, xNetData.userNum, 60);
	switch(xFashionShow.bestRank)
	{
	case 0:
		drawPacker(imgRankChange1, subTemp[XPOS]+changeX, subTemp[YPOS]+changeY, 0, 0, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		break;
	case 1:
		drawPacker(imgRankChange1, subTemp[XPOS]+changeX, subTemp[YPOS]+changeY, 0, imgH(imgRankChange1)/4*1, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		break;
	case 2:
		drawPacker(imgRankChange1, subTemp[XPOS]+changeX, subTemp[YPOS]+changeY, 0, imgH(imgRankChange1)/4*2, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		break;
	default:
		drawPacker(imgRankChange1, subTemp[XPOS]+changeX, subTemp[YPOS]+changeY, 0, imgH(imgRankChange1)/4*3, imgW(imgRankChange1), imgH(imgRankChange1)/4, VH);
		sprintf(strTempS, "%d",xFashionShow.bestRank);
		gDrawStringBold(subTemp[XPOS]-143+changeX, subTemp[YPOS]-5+changeY, strTempS, VH, 86,	255,220 , 33, 20, 20);
		break;
	}
	sprintf(strTempS, "%d(%d표)",xFashionShow.xMyRankSlot[1].score,xFashionShow.xMyRankSlot[1].vote);
	gDrawStringBold(subTemp[XPOS]-28+changeX, subTemp[YPOS]-19+changeY, strTempS, VL, 252, 154, 18, 44, 27, 26);
	gDrawStringBold(subTemp[XPOS]-28+changeX, subTemp[YPOS]+11+changeY, xSaveTemp.strNickName, VL, 252, 255, 255, 44, 27, 26);
		
	switch(startAnyCnt)
	{
	case 28:
	case 29:
	case 30:
	case 31:
	case 32:
		drawPacker(imgRankChange2, subTemp[XPOS]+changeX, subTemp[YPOS]+changeY, 0, imgH(imgRankChange2)/5*(startAnyCnt-28), imgW(imgRankChange2), imgH(imgRankChange2)/5, VH);
		break;
	case 33:
		makeFire(subTemp[XPOS]+changeX, subTemp[YPOS]+changeY-50, 10);
		makeFire(subTemp[XPOS]+changeX, subTemp[YPOS]+changeY+50, 10);
		makeFire(subTemp[XPOS]+changeX-70, subTemp[YPOS]+changeY, 10);
		makeFire(subTemp[XPOS]+changeX+70, subTemp[YPOS]+changeY, 10);
		makeFire(subTemp[XPOS]+changeX-140, subTemp[YPOS]+changeY, 10);
		makeFire(subTemp[XPOS]+changeX+140, subTemp[YPOS]+changeY, 10);
		break;
	}
	xFashionShow.rankChangeAnyCnt++;
	drawBtn(px, py+135,BTN_OK_CONFIRM);
}


void checkTodayRunway()
{
	if(xLock.isLock[LOCK_TYPE_FASHIONSHOW] == FALSE)
	{
		if(xWinnerModel.totalNum > 2)
		{
			if(xSave.runwayDay != xCalendar.nowDay)
			{
				xWorldMap.isTodayRunway = FALSE;
				xWorldMap.todayRunwayAnyCnt = 0;
				xNoticeWorldMap.isOneDay = FALSE;
				xWorldMap.state = WORLDMAP_STATE_TODAYRUNWAY;
				loadImg("bestrunway0.png", &imgBestRunway[0]);
				loadImg("bestrunway1.png", &imgBestRunway[1]);
				
			}
		}
	}
}

void drawTodayRunway()
{
	int px = cx;
	int py = cy;
	
	int resize=100;
	drawBgFillRect();
	
	//뻉뺑이
	xGame.isReSizeDraw = TRUE;
	xGame.reSize = 100*2;
	switch(xWorldMap.todayRunwayAnyCnt)
	{
		case 0: xGame.reSize =250*2;break;
		case 1:	xGame.reSize =235*2;break;
		case 2:	xGame.reSize =220*2;break;
		case 3:	xGame.reSize =205*2;break;
		case 4:	xGame.reSize =190*2;break;
		case 5:	xGame.reSize =175*2;break;
		case 6:	xGame.reSize =160*2;break;
		case 7:	xGame.reSize =145*2;break;
		case 8:	xGame.reSize =130*2;break;
		case 9:	xGame.reSize =115*2;break;
	}
	xGame.isRotate = TRUE;
	xGame.rotateNum = 360-((gameCnt%180)*2);
	
	drawPacker(imgEff3, px, py, 0, 0, imgW(imgEff3), imgH(imgEff3), VH);
	setAlpha(ALPHA_MAX);
	xGame.isRotate = FALSE;
	xGame.isReSizeDraw = FALSE;

		
	switch(xWorldMap.todayRunwayAnyCnt)
	{
	case 0:resize=0;break;
	case 1:resize=14.375;break;
	case 2:resize=28.75;break;
	case 3:resize=43.125;break;
	case 4:resize=57.5;break;
	case 5:resize=71.875;break;
	case 6:resize=86.25;break;
	case 7:resize=100.625;break;
	case 8:resize=115;break;
	case 9:resize=110;break;
	case 10:resize=105;break;
	case 11:resize=100;break;
	case 12:resize=95;break;
	case 13:resize=90;break;
	case 14:resize=93.3333;break;
	case 15:resize=96.6667;break;
	case 16:resize=100;break;
	}
	
	if(resize != 100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = resize;
	}
	drawImage(&imgBestRunway[0], px, py, 0, 0, imgBestRunway[0].w, imgBestRunway[0].h, VH);
	xGame.isReSizeDraw = FALSE;
	
	if(++xWorldMap.todayRunwayAnyCnt < 15)
		return;
	
		
	XFACE xFaceTemp;
	
	for(int rank=0;rank<3;rank++)
	{
		switch(rank)
		{
		case 0:
			subTemp[XPOS] = px;
			subTemp[YPOS] = py-85;
			break;
		case 1:
			subTemp[XPOS] = px-170;
			subTemp[YPOS] = py-30;
			break;
		case 2:
			subTemp[XPOS] = px+195;
			subTemp[YPOS] = py+8;
			break;
		}
		
		xFaceTemp.hairNum = 1000+xWinnerModel.modelNum[rank];
		xFaceTemp.faceNum = 1000+xWinnerModel.modelNum[rank];
		xFaceTemp.faceType = FACE_TYPE_NORMAL;
		drawFittingBody(subTemp[XPOS]-17, subTemp[YPOS],&xWinnerModel.xF[rank],&xFaceTemp,TRUE,xModelData[xWinnerModel.modelNum[rank]].sex);
					
		drawFriendProfile(subTemp[XPOS]-60, subTemp[YPOS]+146+1, xFriendData[xWinnerModel.friendDataNum[rank]].userNum, 34);
		drawImage(&imgBestRunway[1], subTemp[XPOS], subTemp[YPOS]+146, 0, imgBestRunway[1].h/3*rank, imgBestRunway[1].w, imgBestRunway[1].h/3, VH);
		setFontSize(8);
		gDrawStringBold(subTemp[XPOS]+1, subTemp[YPOS]+145, xFriendData[xWinnerModel.friendDataNum[rank]].strNickName, VH, 255, 255, 255, 107, 44, 26);
		setFontSize(11);
		
		
		xWorldMap.xTouchTodayRunwayLink[rank].wPos = imgBestRunway[1].w;
		xWorldMap.xTouchTodayRunwayLink[rank].hPos = imgBestRunway[1].h/3;
		xWorldMap.xTouchTodayRunwayLink[rank].xPos = subTemp[XPOS]-xWorldMap.xTouchTodayRunwayLink[rank].wPos/2;
		xWorldMap.xTouchTodayRunwayLink[rank].yPos = subTemp[YPOS]+146-xWorldMap.xTouchTodayRunwayLink[rank].hPos/2;
		/*
		gSetColor(255, 0, 0);
		setAlpha(100);
		fillRect(xWorldMap.xTouchTodayRunwayLink[rank].xPos, xWorldMap.xTouchTodayRunwayLink[rank].yPos, xWorldMap.xTouchTodayRunwayLink[rank].wPos, xWorldMap.xTouchTodayRunwayLink[rank].hPos);
		setAlpha(ALPHA_MAX);
		 */
	}
	
		
	subTemp[XPOS] = px-260;
	subTemp[YPOS] = py+210;
	if(xNoticeWorldMap.isOneDay == TRUE)
		drawPacker(imgQuestV, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgQuestV), imgH(imgQuestV), VH);
	
	xNoticeWorldMap.xTouchOneDay.wPos = 200;
	xNoticeWorldMap.xTouchOneDay.hPos = 100;
	xNoticeWorldMap.xTouchOneDay.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchOneDay.wPos/2;
	xNoticeWorldMap.xTouchOneDay.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchOneDay.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xNoticeWorldMap.xTouchOneDay.xPos, xNoticeWorldMap.xTouchOneDay.yPos, xNoticeWorldMap.xTouchOneDay.wPos, xNoticeWorldMap.xTouchOneDay.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
	
	xTouchOk.wPos = 120;
	xTouchOk.hPos = 80;
	xTouchOk.xPos = px+240-xTouchOk.wPos/2;
	xTouchOk.yPos = py+220-xTouchOk.hPos/2;
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchOk.xPos, xTouchOk.yPos, xTouchOk.wPos, xTouchOk.hPos);
	setAlpha(ALPHA_MAX);
	 */
}



void initKakaoAppInviteAuto()
{
	//카톡친구관련
	//로그인시 카톡친구추가여부세이브파일검사
	//카톡친구가 아닐경우 친구추가후 성공또는 이미 등록된친구일경우 세이브파일에 등록
	//카톡친구 삭제시에는 세이브파일은 남겨놓아 자동등록 막힘
	//메뉴에서 카톡친구 등록시 성공또는 이미 등록된친구일경우 세이브파일에 등록
		
	int kakaoSafeCnt = 0;
	
	for(int i=0;i<xKakaoData.totalFriendInfoApp;i++)
	{
		if(checkKakaoAppInvite(xKakaoData.xFriendInfoApp[i].strUserId) == DONT)
		{
			if(++kakaoSafeCnt > 10)
			{
				break;
			}
			else
			{
				//친구등록 네트워크등록
				/////////////////////////////////////////////////////////////
				sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s",xKakaoData.xFriendInfoApp[i].strUserId);
				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIENDID, TRUE);
				////////////////////////////////////////////////////////////
			}
		}
	}
}

int getModelLayered(int inventoryNum,int gab)
{
	int resultNum = 0;
	
	switch(xModelData[xInventoryModel[inventoryNum].code].grade)
	{
	case 0:		//c
	case 1:		//b
	case 2:		//a
		if(xInventoryModel[inventoryNum].upGrade+gab >= xModelData[xInventoryModel[inventoryNum].code].upGradeMax)
			resultNum = 1;
		break;
	case 3:		//s
		resultNum = xInventoryModel[inventoryNum].upGrade+gab;
		break;
	}

	resultNum += getSkillPer(xInventoryModel[inventoryNum].code, MODELSKILL_RUNWAY_LAYERED);
	return resultNum;
}

void checkFashionShowLicence(int score)
{
	xFashionShow.totalFashionLicence = 0;
	for(int t=0;t<7;t++)
	{
		for(int i=0;i<xCatalog.totalSlot[t];i++)
		{
			setMapData(xCatalog.xSlot[t][i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
			if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
			{
				if(xFashionData[xMap.type][xMap.listNum].priceType == 2)
				{
					if(score > xFashionData[xMap.type][xMap.listNum].price.oriData)
					{
						xInventoryFashion.isOpen[xMap.type][xMap.listNum] = TRUE;
						////////////////////////////////////////////////////
						xEventQueueNet.code[xEventQueueNet.totalNum] = (xMap.type*1000)+xMap.listNum;
						xEventQueueNet.haveNum[xEventQueueNet.totalNum] = 0;
						addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHION, TRUE);
						///////////////////////////////////////////////////
						xFashionShow.fashionLicenceSlot[xFashionShow.totalFashionLicence++] = xCatalog.xSlot[t][i].code;
					}
				}
			}
		}
	}
}

void drawFashionShowLicence()
{
	int px = cx;
	int py = cy;
    drawBgFillRect();

	int tReSize = 100;
	switch(xFashionShow.fashionLicenceAnyCnt++)
	{
	case 0:	tReSize=293;break;
	case 1:	tReSize=258.147;break;
	case 2:	tReSize=215.985;break;
	case 3:	tReSize=178.56;break;
	case 4:	tReSize=148.478;break;
	case 5:	tReSize=125.57;break;
	case 6:	tReSize=109.046;break;
	case 7:	tReSize=98.0757;break;
	case 8:	tReSize=91.9307;break;
	case 9:	tReSize=90;break;
	case 10:tReSize=94.4398;break;
	case 11:tReSize=98.4496;break;
	case 12:tReSize=101.696;break;
	case 13:tReSize=103.063;break;
	}
	
	if(tReSize != 100)
	{
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = tReSize;
	}
	
	
//	drawBgFillRect();
	
	drawPacker(imgQuestResult0, px, py, 0, 0, imgW(imgQuestResult0), imgH(imgQuestResult0), VH);
	xGame.isReSizeDraw = FALSE;
	if(tReSize != 100)
		return;
	setFontSize(14);
	gDrawStringBold(px+4, py-189, "의상 오픈", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 82, 49, 38);
	setFontSize(11);
	drawPacker(imgQuestGiftIcon, px-70, py-190, 0, 0, imgW(imgQuestGiftIcon), imgH(imgQuestGiftIcon), VH);
		
			
	setMapData(xFashionShow.fashionLicenceSlot[xFashionShow.totalFashionLicence-1]);
	//획득한 의상
	gSetClip(true,0, py-60-95, lcdW, 190);
	drawFittingF(px, py-60, (xMap.type*1000+xMap.listNum), 75);
	gSetClip(false,0, 0, lcdW, lcdH);
	sprintf(strTempS, "[%s]",xFashionData[xMap.type][xMap.listNum].strName);
	
	gSetColor(82, 49, 38);
	setFontSize(14);
	gDrawString(px, py+74, strTempS, VH);
	setFontSize(11);
	
	
	drawPacker(imgQuestResult1, px, py+169, 0, imgH(imgQuestResult1)/2, imgW(imgQuestResult1), imgH(imgQuestResult1)/2, VH);
	setFontSize(14);
	
	gDrawStringBold(px-2, py+169-2, "확인", VH, 255, 255, 255, 186, 70, 10);
	setFontSize(11);
	xTouchOk.wPos = imgW(imgQuestResult1);
	xTouchOk.hPos = imgH(imgQuestResult1)/2;
	xTouchOk.xPos = px-xTouchOk.wPos/2;
	xTouchOk.yPos = py+169-xTouchOk.hPos/2;	
}


void setRunWayResultBonus()
{
	xRunWay.totalModelBonus = 0;
	for(int i=0;i<RUNWAYMINIGAMEMAX;i++)
	{
		if(xRunWayMiniGame[i].isOk == TRUE)
		{
			xRunWay.modelBonusModelCode[xRunWay.totalModelBonus] = xRunWay.modelCode[i];
			xRunWay.modelBonusPoint[xRunWay.totalModelBonus] = xRunWayMiniGame[i].bonusPoint;
			xRunWay.modelBonusType[xRunWay.totalModelBonus] = xRunWayMiniGame[i].bonusType;
			xRunWay.totalModelBonus++;
		}
	}
}
void drawRunWayResultBonus()
{
	int px = cx;
	int py = cy;
	int startAnyCnt;
	gSetColor(0, 0, 0);
	setAlpha(100);
	fillRect(0, py-(276/2), lcdW, 276);
	setAlpha(ALPHA_MAX);
		
	xRunWay.modelBonusAnyCnt++;
	
	drawPacker(imgRunWayResultBonus0, px, py-190, 0, 0, imgW(imgRunWayResultBonus0), imgH(imgRunWayResultBonus0), VH);
			
	
	
	
	for(int i=xRunWay.totalModelBonus-1;i>=0;i--)
	{
		
		startAnyCnt = xRunWay.modelBonusAnyCnt-((xRunWay.totalModelBonus-(i+1))*10);
		if(startAnyCnt > 0)
		{
			subTemp[WPOS]=0;
			switch(startAnyCnt)
			{
			case 1:subTemp[WPOS]=-875;break;
			case 2:subTemp[WPOS]=-672.126;break;
			case 3:subTemp[WPOS]=-469.25126;break;
			case 4:subTemp[WPOS]=-266.376;break;
			case 5:subTemp[WPOS]=-63.495;break;
			case 6:subTemp[WPOS]=4;break;
			case 7:subTemp[WPOS]=28.89;break;
			case 8:subTemp[WPOS]=52.597;break;
			case 9:subTemp[WPOS]=-5;break;
			case 10:subTemp[WPOS]=-3.417;break;
			case 11:subTemp[WPOS]=-1.71;break;
			}
		
			subTemp[XPOS] = px-(80*(xRunWay.totalModelBonus-1))+(i*160)+subTemp[WPOS];
			subTemp[YPOS] = py;
			int modelCode = xRunWay.modelBonusModelCode[i];
			drawPacker(imgRunWayResultBonus1, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgRunWayResultBonus1), imgH(imgRunWayResultBonus1), VH);
			setFontSize(14);
			drawModelNameString(subTemp[XPOS], subTemp[YPOS]-90, VH, modelCode);
			setFontSize(11);
			
			xGame.reSize = 40;
			drawHairF(subTemp[XPOS]-40, subTemp[YPOS]-32, 1000+modelCode, 0, xGame.reSize);
			xGame.isReSizeDraw = TRUE;
			if(xModelData[modelCode].isOneHead == FALSE)
				drawImage(&imgFittingBodyStaff[xModelData[modelCode].sex][13], subTemp[XPOS]-40, subTemp[YPOS]-32, 0, 0, imgFittingBodyStaff[xModelData[modelCode].sex][13].w, imgFittingBodyStaff[xModelData[modelCode].sex][13].h, VH);
			xGame.isReSizeDraw = FALSE;
			drawFaceF(subTemp[XPOS]-40, subTemp[YPOS]-32, 1000+modelCode, FACE_TYPE_NORMAL, 40);
			drawHairF(subTemp[XPOS]-40, subTemp[YPOS]-32, 1000+modelCode, 1, xGame.reSize);
			
			sprintf(strTempS, "%d",xRunWay.modelBonusPoint[i]);
			gSetColor(82, 49, 38);
			setFontSize(14);
			gDrawString(subTemp[XPOS]+35, subTemp[YPOS]+93, strTempS, VR);
			setFontSize(11);
			
			drawRunWayBonusIcon(subTemp[XPOS],subTemp[YPOS],xRunWay.modelBonusType[i]);
			int iconNum = 0;
			switch(xRunWay.modelBonusType[i])
			{
			case 0:		//골드
				iconNum = 0;
				break;
			case 1:		//룩
				iconNum = 1;
				break;
			case 2:		//경험치
				iconNum = 3;
				break;
			case 3:		//캔디
				iconNum = 6;
				break;
			}
			drawPacker(imgProductionMenuObj0, subTemp[XPOS]+35, subTemp[YPOS]+93, imgW(imgProductionMenuObj0)/8*iconNum, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
		}
	}
	drawBtn(px, py+180, BTN_OK_CONFIRM);
}

void drawRunWayBonusIcon(int x,int y,int type)
{
	if(xRunWay.imgBonusIcon[type].texture == NULL)
	{
		switch(type)
		{
		case 0:		//골드
			sprintf(strTempS, "shopmoneyicon10.png");
			break;
		case 1:		//룩
			sprintf(strTempS, "shopmoneyicon1.png");
			break;
		case 2:		//경험치
			sprintf(strTempS, "expicon.png");
			break;
		case 3:		//캔디
			sprintf(strTempS, "shoppremiumicon5.png");
			break;
		}
		
		loadImg(strTempS, &xRunWay.imgBonusIcon[type]);
	}
	drawImage(&xRunWay.imgBonusIcon[type],x, y, 0, 0, xRunWay.imgBonusIcon[type].w, xRunWay.imgBonusIcon[type].h, VH);
}


void setSaleShop()
{
	saleShopFreeLoad(TRUE);
	xWorldMap.state = WORLDMAP_STATE_SALESHOP;
}
void saleShopFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		loadImg("saleshop0.png", &imgSaleShop[0]);
		loadImg("saleshop1.png", &imgSaleShop[1]);
	}
	else
	{
		freeImg(&imgSaleShop[0]);
		freeImg(&imgSaleShop[1]);
	}
}

void drawSaleShop()
{
	int px = cx;
	int py = cy;
		
	drawBgFillRect();
	drawImage(&imgSaleShop[0], px, py, 0, 0, imgSaleShop[0].w, imgSaleShop[0].h, VH);
			
	xSaleShop.xDragScroll.totalNum = xSaleShop.totalNum;
	xSaleShop.xDragScroll.posGab = 180;
	xSaleShop.xDragScroll.endPos = -(((xSaleShop.xDragScroll.totalNum-3)*xSaleShop.xDragScroll.posGab));
	
	if(xSaleShop.xDragScroll.totalNum < 3)
		xSaleShop.xDragScroll.endPos = 0;
	
	int iMax = xSaleShop.xDragScroll.totalNum;
	int pos;
	dragScrollPrc(&xSaleShop.xDragScroll,1,FALSE);
	
	gSetClip(true,px-275, 0, 547, lcdH);
	for(int i=0;i<iMax;i++)
	{
		pos = xSaleShop.xDragScroll.pos+(xSaleShop.xDragScroll.posGab*i);
		
		subTemp[XPOS] = px-180+pos;
		subTemp[YPOS] = py+20;
		
		setMapData(xSaleShop.slotCode[i]);	//xMap.rever,xMap.type,xMap.listNum 구하기
		drawImage(&imgSaleShop[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSaleShop[1].w, imgSaleShop[1].h, VH);
				
		setLabelWidth(150);
		gSetColor(82, 49, 38);
		gDrawString(subTemp[XPOS], subTemp[YPOS]-113, xObj.xObjData[xMap.type][xMap.listNum].strName, VH);
		setLabelWidth(0);
		
		xGame.isReSizeDraw = TRUE;
		xGame.reSize = 90;
		setDrawObjCenter(xMap.type,xMap.listNum);
		if(xDrawObjCenter.reSize != 100)
		{
			xGame.fgameScaleCx =subTemp[XPOS];
			xGame.fgameScaleCy =lcdH-(subTemp[YPOS]+12);
			xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
		}
		drawObj(subTemp[XPOS]+xDrawObjCenter.w,subTemp[YPOS]+12+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
		xGame.fgameScale = 1.0f;
		xGame.fgameScaleCx =cx;
		xGame.fgameScaleCy =cy;
		xGame.isReSizeDraw = FALSE;
		gSetColor(34, 21, 21);
		sprintf(strTempS, "%d",xObj.xObjData[xMap.type][xMap.listNum].price.oriData);
		gDrawString(subTemp[XPOS]-40, subTemp[YPOS]+111, strTempS, VR);
		sprintf(strTempS, "%d",xSaleShop.slotSalePrice[i]);
		setFontSize(14);
		gDrawString(subTemp[XPOS]+46, subTemp[YPOS]+111, strTempS, VR);
		setFontSize(11);
				
		xSaleShop.xTouchSlot[i].wPos = imgSaleShop[1].w;
		xSaleShop.xTouchSlot[i].hPos = imgSaleShop[1].h;
		xSaleShop.xTouchSlot[i].xPos = subTemp[XPOS]-xSaleShop.xTouchSlot[i].wPos/2;
		xSaleShop.xTouchSlot[i].yPos = subTemp[YPOS]-xSaleShop.xTouchSlot[i].hPos/2;
	}
	gSetClip(false,0, 0, lcdW, lcdH);
		
	subTemp[XPOS] = px+260;
	subTemp[YPOS] = py+200;
	setFontSize(8);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], xSaleShop.strDay, VR, 251,51,23,82,49,38);
	setFontSize(11);
		
	subTemp[XPOS] = px+260;
	subTemp[YPOS] = py-160;
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
		
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	*/
}



//하나의 이미지를 받는다
//다받은후 이미지 해체
void drawQuestArrow(int x, int y)
{
	int w = 0;
	int h = 0;
	int alpha;
	
	switch(gameCnt%24)
	{
	case 0:h=	0;alpha=	100;break;
	case 1:h=	0;alpha=	91;break;
	case 2:h=	0;alpha=	82;break;
	case 3:h=	1;alpha=	73;break;
	case 4:h=	1;alpha=	64;break;
	case 5:h=	1;alpha=	55;break;
	case 6:h=	2;alpha=	46;break;
	case 7:h=	2;alpha=	37;break;
	case 8:h=	2;alpha=	28;break;
	case 9:h=	2;alpha=	19;break;
	case 10:h=	3;alpha=	10;break;
	case 11:h=	2;alpha=	20;break;
	case 12:h=	2;alpha=	30;break;
	case 13:h=	2;alpha=	40;break;
	case 14:h=	1;alpha=	50;break;
	case 15:h=	1;alpha=	60;break;
	case 16:h=	1;alpha=	70;break;
	case 17:h=	1;alpha=	80;break;
	case 18:h=	0;alpha=	90;break;
	case 19:h=	0;alpha=	100;break;
	case 20:h=	0;alpha=	100;break;
	case 21:h=	0;alpha=	100;break;
	case 22:h=	0;alpha=	100;break;
	case 23:h=	0;alpha=	100;break;
	}
	
	if(alpha != 100)
		setAlpha(alpha*ALPHA_MAX/100);
	drawPacker(imgQuestInfoArrow, x+w, y+h, 0, 0, imgW(imgQuestInfoArrow), imgH(imgQuestInfoArrow), VH);
	setAlpha(ALPHA_MAX);
}

//실시간 관련 설계
//프레임구조체설계
//현재 프레임번호 = 프레임얻기(프레임크기,현재시간,맥스초);
//현재 프레임번호까지 실행여부 판단후 각각연산
void getRtf(XRTF *xRtf,int totalFrame,int speedMillisecond)
{
	if(speedMillisecond == DONT)
		speedMillisecond = totalFrame*33;
		
	int playCaseNum = 0;
	int ingTimeMillisecond = 0;
		
 
	xRtfQueue.totalNum = 0;
	if(xRtf->startTimeMillisecond == 0)
	{
		xRtf->startTimeMillisecond = xCalendar.nowTimeMillisecond;
		xRtf->beforeFrame = DONT;
	}
	else
	{
		xRtf->beforeFrame = xRtf->nowFrame;
		ingTimeMillisecond = xCalendar.nowTimeMillisecond - xRtf->startTimeMillisecond;	//지난시간
		playCaseNum = ingTimeMillisecond*totalFrame/speedMillisecond;
		//시간재설정
		xRtf->startTimeMillisecond = xCalendar.nowTimeMillisecond;
		//맞아떨어지고 남은 시간은 정확도를 위해 추가 적용해준다
		xRtf->startTimeMillisecond -= (ingTimeMillisecond*totalFrame%speedMillisecond);
	}
 
	if(playCaseNum == 0)
		xRtfQueue.caseNum[xRtfQueue.totalNum++] = xRtf->nowFrame;
	else
	{
		for(int i=0;i<playCaseNum;i++)
		{
			if(++xRtf->nowFrame >= totalFrame)
				xRtf->nowFrame = 0;
			xRtfQueue.caseNum[xRtfQueue.totalNum++] = xRtf->nowFrame;
 
			if(xRtfQueue.totalNum >= RTFQUEUEMAX)
			{
				printf("case범위초과");
				break;
			}
		}
	}
	xRtfMain = xRtf;
}

void demoRtf()
{
	getRtf(&xRtfDemo,3,DONT);
	switch(xRtfMain->type)
	{
	case RTF_TYPE_ALL:		//전체루프
		//아무처리도 하지 않는다
		break;
	case RTF_TYPE_ONE:		//최종단일루프
		//마지막 루프만 돈다
		xRtfQueue.caseNum[0] = xRtfQueue.caseNum[xRtfQueue.totalNum-1];
		xRtfQueue.totalNum = 1;
		break;
	}
		
	for(int rtfI=0;rtfI<xRtfQueue.totalNum;rtfI++)
	{
		switch(xRtfQueue.caseNum[rtfI])
		{
		case 0:
			if(xRtfQueue.totalNum == 1 && xRtfMain->nowFrame == xRtfMain->beforeFrame)
			{
				//중복방지
			}
			break;
		case 1:
			break;
		case 2:
			break;
		}
	}
}


void testMiniGame(int loop)
{
	int playCnt = 0;
	int trendCnt = 0;
	int tiredCnt[10];
	int lookCnt[10];
	int goldCnt[10];
	int modelCnt[2];
	//2 4 6 12
	//3 5 7
	//300 1000 10000 100000
	for(int i=0;i<10;i++)
	{
		tiredCnt[i] = 0;
		lookCnt[i] = 0;
		goldCnt[i] = 0;
	}
	modelCnt[0]=0;
	modelCnt[1]=0;
	
	int interiorCnt = 0;
	int fashionCnt = 0;
	
	
	
	for(int k=0;k<loop;k++)
	{
		playCnt++;
		
		
		xMiniGame.perSlotNum = 0;
		for(int i=0;i<5;i++)
		{
			if(xMiniGame.playCount <= xMiniGame.xMiniGameSlot[0].perCount[i])
			{
				xMiniGame.perSlotNum = i;
				break;
			}
		}
		
		
		int ranDomTemp; 
		int perTemp = 0;
		
		ranDomTemp = ranDom(0, 1000-1);
		
		//printf("랜덤값>>%d\n",ranDomTemp);
		
		
		for(int i=0;i<xMiniGame.xDragScroll.totalNum;i++)
		{
			perTemp += xMiniGame.xMiniGameSlot[i].per[xMiniGame.perSlotNum];
			
			//printf("perTemp>>%d\n",perTemp);
			//printf("xMiniGame.xMiniGameSlot[%d].per[%d]>>%d\n",i,xMiniGame.perSlotNum,xMiniGame.xMiniGameSlot[i].per[xMiniGame.perSlotNum]);
			
			if(ranDomTemp < perTemp)
			{
				xMiniGame.selectSlot = i;
				break;
			}
		}
		
		xMiniGame.playCount += xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].count;
		if(xMiniGame.playCount<0)
			xMiniGame.playCount = 0;
					
			
		switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotType)
		{
		case MINIGAME_TYPE_TREND:
			trendCnt++;
			break;
		case MINIGAME_TYPE_TIRED:
			switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData)
			{
			case 2:tiredCnt[0]++;break;
			case 4:tiredCnt[1]++;break;
			case 6:tiredCnt[2]++;break;
			case 12:tiredCnt[3]++;break;
			}
			break;
		case MINIGAME_TYPE_LOOK:
			switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData)
			{
			case 3:lookCnt[0]++;break;
			case 5:lookCnt[1]++;break;
			case 7:lookCnt[2]++;break;
			}
			break;
		case MINIGAME_TYPE_MODEL:
			if(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData == 0)
				modelCnt[0]++;
			else
				modelCnt[1]++;
			break;
		case MINIGAME_TYPE_INTERIOR:
			//랜덤가구권
			break;
		case MINIGAME_TYPE_INTERIOR222:
			//지정가구
			interiorCnt++;
			break;
		case MINIGAME_TYPE_FASHIONOPEN:
			//한정의상
			fashionCnt++;
			break;
		case MINIGAME_TYPE_GOLD:
			//골드
			switch(xMiniGame.xMiniGameSlot[xMiniGame.selectSlot].slotCode.oriData)
			{
			case 300:goldCnt[0]++;break;
			case 1000:goldCnt[1]++;break;
			case 10000:goldCnt[2]++;break;
			case 100000:goldCnt[3]++;break;
			}
			break;
		}
	}
		
	addDebug("   ");
	addDebug("   ");
	addDebug("   ");
		
	sprintf(strTempS,"플레이횟수:%d\n",playCnt);	addDebug(strTempS);
	sprintf(strTempS,"02캔디:%d(%f)\n",tiredCnt[0],(float)((float)tiredCnt[0]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"04캔디:%d(%f)\n",tiredCnt[1],(float)((float)tiredCnt[1]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"06캔디:%d(%f)\n",tiredCnt[2],(float)((float)tiredCnt[2]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"12캔디:%d(%f)\n",tiredCnt[3],(float)((float)tiredCnt[3]*100.000f/(float)playCnt));	addDebug(strTempS);
	
	sprintf(strTempS,"3룩:%d(%f)\n",lookCnt[0],(float)((float)lookCnt[0]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"5룩:%d(%f)\n",lookCnt[1],(float)((float)lookCnt[1]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"7룩:%d(%f)\n",lookCnt[2],(float)((float)lookCnt[2]*100.000f/(float)playCnt));	addDebug(strTempS);
	
	sprintf(strTempS,"000300골드:%d(%f)\n",goldCnt[0],(float)((float)goldCnt[0]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"001000골드:%d(%f)\n",goldCnt[1],(float)((float)goldCnt[1]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"010000골드:%d(%f)\n",goldCnt[2],(float)((float)goldCnt[2]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"100000골드:%d(%f)\n",goldCnt[3],(float)((float)goldCnt[3]*100.000f/(float)playCnt));	addDebug(strTempS);
	
	sprintf(strTempS,"일반캐스팅:%d(%f)\n",modelCnt[0],(float)((float)modelCnt[0]*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"고급캐스팅:%d(%f)\n",modelCnt[1],(float)((float)modelCnt[1]*100.000f/(float)playCnt));	addDebug(strTempS);
	
	sprintf(strTempS,"인테리어:%d(%f)\n",interiorCnt,(float)((float)interiorCnt*100.000f/(float)playCnt));	addDebug(strTempS);
	sprintf(strTempS,"패션오픈:%d(%f)\n",fashionCnt,(float)((float)fashionCnt*100.000f/(float)playCnt));	addDebug(strTempS);
}



void setStateCarSelectMode_Production()
{
	//주문차량 선택화면 만들기
	carStorageFreeLoad(FALSE);
	xWorldMap.state = WORLDMAP_STATE_CARPARKSELECTMODE_PRODUCTIOHN;
	xOrder.carParkSelectMode_Code = xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].code;
	xOrder.carParkSelectMode_OrderKey = xOrder.xSlotListData[xOrder.slotNumList[xOrder.selectSlot]].key;
	xWorldMap.isExternal = TRUE;
	xMap.pointX = 244;
	xMap.pointY = -984;
	xWorldMap.fscale = 1.2f;
}

void orderSelectItemOk()
{
	int bonusCandy = 1;
	if(xFriendData[xFriendMap.selectDataSlotNum].isKakao == TRUE)
		bonusCandy = xKakaoData.socialBonusOrderSelectItem;
	
	setBonus(xTouch.xPos, xTouch.yPos, ICON_TYPE_CANDY, bonusCandy);
	setDropIcon(xTouch.xPos-15, xTouch.yPos, ICON_TYPE_CANDY, bonusCandy, ICON_TYPE_CANDY, 0, ICON_TYPE_CANDY, 0);
	setTired(bonusCandy);
	setQuest(98, bonusCandy, DONT);
	/////////////////////////////////////////////////
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
	////////////////////////////////////////////////////////////
	
	friendOrderItemFreeLoad(FALSE);
	xWorldMap.state = WORLDMAP_STATE_PLAY;
	
	xOrder.xSlotListDataFriend[xOrder.totalNumListDataFriend].code = xCatalog.xSlotS[xCatalog.selectSlot].code;
	xOrder.xSlotListDataFriend[xOrder.totalNumListDataFriend].state = ORDERSLOT_STATE_CLOSE;
	xOrder.xSlotListDataFriend[xOrder.totalNumListDataFriend].friendType = 0;
		
	int userNum = xNetData.userNum;
	int slotNum = getFriendSlot(userNum);
	
	if(slotNum == DONT)
	{
		slotNum = addFriendData(userNum);
	}
	
	if(xFriendData[slotNum].strUrl[0] == 0 || xFriendData[slotNum].strUrl[0] == '0')
		sprintf(xFriendData[slotNum].strUrl, "%s",xSaveTemp.profileUrl);
	sprintf(xFriendData[slotNum].strNickName, "%s",xSaveTemp.strNickName);
		
	xOrder.xSlotListDataFriend[xOrder.totalNumListDataFriend].friendNum = slotNum;
	xOrder.totalNumListDataFriend++;
	
	////////////////////////////////////////////////////////////
	xEventQueueNet.key[xEventQueueNet.totalNum] = xNetData.userNum;
	xEventQueueNet.slotNum[xEventQueueNet.totalNum] = DONT;	//npc쪽에서만 사용
	xEventQueueNet.code[xEventQueueNet.totalNum] = xCatalog.xSlotS[xCatalog.selectSlot].code;
	xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:친구1:NPC
	xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDORDER, TRUE);
	////////////////////////////////////////////////////////////
	
	xFriendData[xFriendMap.selectDataSlotNum].todayOrder = TRUE;	
	--xSaveTemp.friendOrderNum;
	setFiveRocksCustom("주문배송","요청하기","NULL","NULL",1);
}


void aliceShockFreeLoad(M_Boolean isLoad)
{
	
}

void drawAliceShock()
{
	
}

void drawAliceShockResult()
{
	
}

void drawBuffBonus()
{
	
	int px = cx-120;
	int py = 50;
	int pw = 0;
	int arrowY = 0;
	int arrowAlpha = 0;
	int blendNum =0;
		
	int startYMDS = 0;
	int endYMDS = 0;
	
	setUiHide();
	
	arrowAlpha = 0;
	switch(gameCnt%42)
	{
		case 0:arrowAlpha=	0;arrowY=335.5;break;
		case 1:arrowAlpha=	47.9399;arrowY=335.451;break;
		case 2:arrowAlpha=	65.916;arrowY=335.293;break;
		case 3:arrowAlpha=	77.1565;arrowY=335.002;break;
		case 4:arrowAlpha=	84.8926;arrowY=334.549;break;
		case 5:arrowAlpha=	90.3873;arrowY=333.898;break;
		case 6:arrowAlpha=	94.2902;arrowY=333.004;break;
		case 7:arrowAlpha=	96.9869;arrowY=331.814;break;
		case 8:arrowAlpha=	98.729;arrowY=330.279;break;
		case 9:arrowAlpha=	99.691;arrowY=328.402;break;
		case 10:arrowAlpha=	100;arrowY=326.289;break;
		case 11:arrowAlpha=	99.6939;arrowY=324.173;break;
		case 12:arrowAlpha=	98.739;arrowY=322.285;break;
		case 13:arrowAlpha=	97.0085;arrowY=320.74;break;
		case 14:arrowAlpha=	94.3282;arrowY=319.537;break;
		case 15:arrowAlpha=	90.4469;arrowY=318.637;break;
		case 16:arrowAlpha=	84.9785;arrowY=317.978;break;
		case 17:arrowAlpha=	77.273;arrowY=317.515;break;
		case 18:arrowAlpha=	66.0643;arrowY=317.216;break;
		case 19:arrowAlpha=	48.1088;arrowY=317.051;break;
		case 20:arrowAlpha=	0;arrowY=317;break;
	}
	arrowY -= 335;

	
	
	startYMDS = checkYMDS(xBuff.startYY,
						  xBuff.startMM,
						  xBuff.startDD,
						  xBuff.startHH);
	endYMDS = checkYMDS(xBuff.endYY,
						xBuff.endMM,
						xBuff.endDD,
						xBuff.endHH);
			
    
    
	if(startYMDS <= 0 && endYMDS > 0)
	{
		loadImg("bufficon0.png", &imgBuffIcon[0]);
		loadImg("bufficon1.png", &imgBuffIcon[1]);
		loadImg("bufficon2.png", &imgBuffIcon[2]);
		loadImg("bufficon3.png", &imgBuffIcon[3]);
		
		loadImg("buffobj0.png", &imgBuffObj[0]);
		loadImg("buffobj1.png", &imgBuffObj[1]);
		loadImg("buffobj2.png", &imgBuffObj[2]);
		loadImg("buffobj3.png", &imgBuffObj[3]);
		
		for(int i=0;i<4;i++)
		{
            

            
			if(xBuff.isOpen[i] == TRUE)
			{
				subTemp[XPOS] = px+pw;
				subTemp[YPOS] = py;
				
				
				blendNum = 0;
				switch(gameCnt%84)
				{
				case 0:blendNum =255;break;
				case 1:blendNum =225;break;
				case 2:blendNum =200;break;
				case 3:blendNum =175;break;
				case 4:blendNum =150;break;
				case 5:blendNum =125;break;
				case 6:blendNum =100;break;
				case 7:blendNum =75;break;
				case 8:blendNum =50;break;
				case 9:blendNum =25;break;
				}
								
				if(xWorldMap.uiHideCnt > 0 && blendNum > 0)
				{
					xGame.isBlend = TRUE;
					xGame.blendType = BLEND_WHITEALPHA;
					xGame.blendNum = blendNum;
				}
				
				drawImage(&imgBuffIcon[i], subTemp[XPOS], subTemp[YPOS], 0, 0, imgBuffIcon[i].w, imgBuffIcon[i].h, VH);
				xGame.isBlend = FALSE;
				setUiHide();
				if(xWorldMap.uiHideCnt > 0)
					setAlpha(arrowAlpha*ALPHA_MAX/100);
				drawImage(&imgBuffObj[0], subTemp[XPOS], subTemp[YPOS]+arrowY, 0, 0, imgBuffObj[0].w, imgBuffObj[0].h, VH);
				setUiHide();
											
				drawImage(&imgBuffObj[3], subTemp[XPOS], subTemp[YPOS]+20, 0, imgBuffObj[3].h/4*i, imgBuffObj[3].w, imgBuffObj[3].h/4, VH);
				drawNumPacker(imgWorldMapNum0, subTemp[XPOS], subTemp[YPOS]+40, xBuff.bonusPer[i], -3, VH);
				
				int gabW = 0;
				if(xBuff.bonusPer[i] >= 100)
					gabW = 15;
				else
					gabW = 10;
				
				drawImage(&imgBuffObj[1], subTemp[XPOS]-gabW, subTemp[YPOS]+40, 0, 0, imgBuffObj[1].w, imgBuffObj[1].h, VR);
				drawImage(&imgBuffObj[2], subTemp[XPOS]+gabW, subTemp[YPOS]+40, 0, 0, imgBuffObj[2].w, imgBuffObj[2].h, VL);

				pw+= 80;
			}
		}
	}
	else
	{
		for(int i=0;i<4;i++)
			xBuff.isOpen[i] = FALSE;
	}
	getUiHide();
}

int checkYMDS(int year,int month,int day,int hour)
{
	
	M_Int64 client = 0;
	M_Int64 sever = 0;
	
	//분 *60
	//시 *60*60
	//일 *60*60*24
	//월 *60*60*24*30
	//년 *60*60*24*365
	client += (xCalendar.nowYear-2000)*60*60*24*365;
	sever += (year-2000)*60*60*24*365;
	
	for(int i=1;i<xCalendar.nowMonth;i++)
	{
		switch(i)
		{
			case 1:
			case 3:
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				//31
				client += 60*60*24*31;
				break;
			case 2:
				//28
				client += 60*60*24*28;
				break;
			default:
				//30
				client += 60*60*24*30;
				break;
		}
	}
	
	for(int i=1;i<month;i++)
	{
		switch(i)
		{
			case 1:
			case 3:
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				//31
				sever += 60*60*24*31;
				break;
			case 2:
				//28
				sever += 60*60*24*28;
				break;
			default:
				//30
				sever += 60*60*24*30;
				break;
		}
	}
		
	client += (xCalendar.nowDay)*60*60*24;
	sever += (day)*60*60*24;
	
	client += (xCalendar.nowHour)*60*60;
	sever += (hour)*60*60;
	
	if(sever > client)
		return 1;
	else if(sever < client)
		return -1;
	else
		return 0;
}

void setStateCollection()
{
	xWorldMap.state = WORLDMAP_STATE_COLLECTION;
	xCollection.selectSlot = 1;
	collectionFreeLoad(TRUE);
}

void collectionFreeLoad(M_Boolean isLoad)
{
	if(isLoad == TRUE)
	{
		setPacker(PACKER_STATE_COLLECTION);		
		setPacker(PACKER_STATE_MODEL2);
	}
	else
	{
        
		freeImg(&xPacker[PACKER_STATE_COLLECTION].img);
		freeImg(&xPacker[PACKER_STATE_MODEL2].img);
		freeFashion();
		faceHairImgFree();
		
		for(int i=0;i<xCollection.totalFashionTheme;i++)
			freeImg(&xCollection.imgFashionThemeIcon[i]);
	}
}


void setThemeList()
{
	xCollection.totalFashionList = 0;
				
	for(int i=0;i<COLLECTIONSLOTMAX;i++)
	{
		xCollection.totalFashionThemeOpen[i] = 0;
		xCollection.totalFashionThemeClose[i] = 0;
	}
	
	for(int tab=0;tab<7;tab++)
	{
		for(int i=0;i<xCatalog.totalSlot[tab];i++)
		{
			setMapData(xCatalog.xSlot[tab][i].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
			
			switch(xCollection.state)
			{
			case COLLECTION_STATE_FASHIONTHEMESELECT:
				if(xInventoryFashion.isOpen[xMap.type][xMap.listNum] == FALSE)
					xCollection.totalFashionThemeClose[xFashionData[xMap.type][xMap.listNum].theme]++;
				else
					xCollection.totalFashionThemeOpen[xFashionData[xMap.type][xMap.listNum].theme]++;
				break;
			default:
				if(xCollection.fashionThemeList[xCollection.selectFashionThemeList] == xFashionData[xMap.type][xMap.listNum].theme)
				{
					xCollection.fashionList[xCollection.totalFashionList++] = xCatalog.xSlot[tab][i].code;
				}
				break;
			}
		}
	}
}

void drawCollection()
{
	int px = cx;
	int py = cy;
	
    
    drawBgFillRect();
    
	drawPacker(imgCollectionBg, px, py, 0, 0, imgW(imgCollectionBg), imgH(imgCollectionBg), VH);

	for(int i=0;i<COLLECTIONTABMAX;i++)
	{
		subTemp[XPOS] = px-364+(i*131);
		subTemp[YPOS] = py-275;
		if(i == xCollection.selectTabB)
		{
			drawPacker(imgCollectionTab, subTemp[XPOS], subTemp[YPOS], imgW(imgCollectionTab)/2, 0, imgW(imgCollectionTab)/2, imgH(imgCollectionTab), VH);
			drawPacker(imgCollectionIcon, subTemp[XPOS], subTemp[YPOS]+6-18, 0, imgH(imgCollectionIcon)/COLLECTIONTABMAX*i, imgW(imgCollectionIcon), imgH(imgCollectionIcon)/COLLECTIONTABMAX, VH);
			switch(i)
			{
			case 0:		sprintf(strTempS, "모델 리스트");break;
			case 1:		sprintf(strTempS, "의상 리스트");break;
			}
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
		}
		else
		{
			drawPacker(imgCollectionTab, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCollectionTab)/2, imgH(imgCollectionTab), VH);
			drawPacker(imgCollectionIcon, subTemp[XPOS], subTemp[YPOS]+6, 0, imgH(imgCollectionIcon)/COLLECTIONTABMAX*i, imgW(imgCollectionIcon), imgH(imgCollectionIcon)/COLLECTIONTABMAX, VH);
		}
		
		xCollection.xTouchTabB[i].wPos = imgW(imgCollectionTab)/2-10;
		xCollection.xTouchTabB[i].hPos = imgH(imgCollectionTab);
		xCollection.xTouchTabB[i].xPos = subTemp[XPOS] - xCollection.xTouchTabB[i].wPos/2;
		xCollection.xTouchTabB[i].yPos = subTemp[YPOS] - xCollection.xTouchTabB[i].hPos/2;
	}
			
	
	int iMax;
	int indexX;
	int posY;
	int colorImgNum;
	
	switch(xCollection.selectTabB)
	{
	case 0:
		//세부메뉴
		for(int i=0;i<xCollection.totalSlot;i++)
		{
			xCollection.xSlot[i].xTouch.xPos = 0;
			xCollection.xSlot[i].xTouch.yPos = 1000;
			xCollection.xSlot[i].xTouch.wPos = 0;
			xCollection.xSlot[i].xTouch.hPos = 0;
		}
		
		iMax = xCollection.totalSlot;
		
		indexX = 0;
		posY = 0;
		
		int selectX;
		int selectY;
		
		xCollection.xDragScroll.totalNum = 1;
		gSetClip(true,0, py-216, lcdW, 508);
		for(int i=0;i<iMax;i++)
		{
			int type = xCollection.xSlot[i].type;
			int code = xCollection.xSlot[i].code;
			switch(type)
			{
				case COLLECTIONSLOT_TYPE_MODELGRADEBAR:
					if(indexX != 0)
					{
						indexX = 0;
						posY += 124;
						xCollection.xDragScroll.totalNum++;
					}
					subTemp[XPOS] = px-411-23;
					subTemp[YPOS] = py-170+12+posY+xCollection.xDragScroll.pos;
					if(subTemp[YPOS] > 50 && subTemp[YPOS] < lcdH)
					{
						drawPacker(imgCollectionTabBar, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCollectionTabBar), imgH(imgCollectionTabBar), VL);
						drawPacker(imgNewModelRank0+code, subTemp[XPOS]+55, subTemp[YPOS]-2, 0, 0, imgW((imgNewModelRank0+code)), imgH((imgNewModelRank0+code)), VH);
						
						if(code == 0)
						{
							drawPacker(imgCollectionInfo0, subTemp[XPOS]+552, subTemp[YPOS]-15, 0, 0, imgW(imgCollectionInfo0), imgH(imgCollectionInfo0), VH);
						}
						
					}
					
					if(code == 0)
					{
						xCollection.xTouchInfo.wPos = imgW(imgCollectionInfo0);
						xCollection.xTouchInfo.hPos = imgH(imgCollectionInfo0);
						xCollection.xTouchInfo.xPos = subTemp[XPOS]+552-xCollection.xTouchInfo.wPos/2;
						xCollection.xTouchInfo.yPos = subTemp[YPOS]-15-xCollection.xTouchInfo.hPos/2;
					}
					posY += 124;
					xCollection.xDragScroll.totalNum++;
					break;
				case COLLECTIONSLOT_TYPE_MODELCODE:
					subTemp[XPOS] = px-411+52+(indexX*124);
					subTemp[YPOS] = py-170+posY+xCollection.xDragScroll.pos;
					if(subTemp[YPOS] > 50 && subTemp[YPOS] < lcdH)
					{
						drawPacker((imgCollectionSlot0+xModelData[code].grade), subTemp[XPOS], subTemp[YPOS], 0, 0, imgW((imgCollectionSlot0+xModelData[code].grade)), imgH((imgCollectionSlot0+xModelData[code].grade)), VH);
						
						switch(xModelData[code].sex)
						{
						case 0:		//여자
							drawHairF(subTemp[XPOS],subTemp[YPOS]+7, 1000+code,0,100);
							drawPacker(imgCollectionBody0, subTemp[XPOS]-5,subTemp[YPOS]+56, 0, 0, imgW(imgCollectionBody0), imgH(imgCollectionBody0), BH);
							drawFaceF(subTemp[XPOS],subTemp[YPOS]+7, 1000+code, FACE_TYPE_NORMAL, 100);
							drawHairF(subTemp[XPOS],subTemp[YPOS]+7, 1000+code,1,100);
							gSetColor(255, 255, 255);
							break;
						case 1:		//남자
							drawHairF(subTemp[XPOS],subTemp[YPOS]-10, 1000+code,0,100);
							drawPacker(imgCollectionBody1, subTemp[XPOS]-5,subTemp[YPOS]+56, 0, 0, imgW(imgCollectionBody1), imgH(imgCollectionBody1), BH);
							drawFaceF(subTemp[XPOS],subTemp[YPOS]-10, 1000+code, FACE_TYPE_NORMAL, 100);
							drawHairF(subTemp[XPOS],subTemp[YPOS]-10, 1000+code,1,100);
							break;
						}
						
						gSetColor(255, 255, 255);
//						fillRect(subTemp[XPOS]-66, subTemp[YPOS]+56, 140, 50);
//						
//						fillRect(subTemp[XPOS]-66, subTemp[YPOS]-56-10, 140, 10);
//						
//						fillRect(subTemp[XPOS]-56-10, subTemp[YPOS]-56, 10, 112);
//						fillRect(subTemp[XPOS]+56, subTemp[YPOS]-56, 10, 112);
                        fillRect(subTemp[XPOS]-66-10, subTemp[YPOS]+56, 160, 50);
                        
                        fillRect(subTemp[XPOS]-66, subTemp[YPOS]-56-10, 140, 10);
                        
                        fillRect(subTemp[XPOS]-56-13, subTemp[YPOS]-56, 12, 112);//왼쪽
                        fillRect(subTemp[XPOS]+56, subTemp[YPOS]-56, 25, 112);//오른쪽
						
                        
						xCollection.xSlot[i].xTouch.wPos = imgW((imgCollectionSlot0+xModelData[code].grade));
						xCollection.xSlot[i].xTouch.hPos = imgH((imgCollectionSlot0+xModelData[code].grade));
						xCollection.xSlot[i].xTouch.xPos = subTemp[XPOS]-xCollection.xSlot[i].xTouch.wPos/2;
						xCollection.xSlot[i].xTouch.yPos = subTemp[YPOS]-xCollection.xSlot[i].xTouch.hPos/2;
												
						if(xModelData[code].isOpen == FALSE)
							drawPacker(imgCollectionSlot4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCollectionSlot4), imgH(imgCollectionSlot4), VH);
						
					}
					
					if(xCollection.xSlot[i].isNew == TRUE)
						drawNewIcon(subTemp[XPOS]+50, subTemp[YPOS]-50);
					
					
					if(xCollection.selectSlot == i)
					{
						selectX = subTemp[XPOS];
						selectY = subTemp[YPOS];
						
					}
										
					if(++indexX > 4)
					{
						indexX = 0;
						posY += 124;
						xCollection.xDragScroll.totalNum++;
					}
					break;
			}
		}
			
            

            
            
		if(xCollection.selectSlot > 0)
			drawPacker(imgCollectionSelect, selectX, selectY, 0, 0, imgW(imgCollectionSelect), imgH(imgCollectionSelect), VH);
			
			
		gSetClip(false,0, 0, lcdW, lcdH);
		
		xCollection.xDragScroll.posGab = 124;
		xCollection.xDragScroll.endPos = -(((xCollection.xDragScroll.totalNum-4)*xCollection.xDragScroll.posGab));
		if(xCollection.xDragScroll.totalNum <= 4)
			xCollection.xDragScroll.endPos = 0;
		
		dragScrollPrc(&xCollection.xDragScroll,1,FALSE);
		
		if(xCollection.selectSlot != DONT)
		{
			subTemp[XPOS] = px+367;
			subTemp[YPOS] = py-211;
			drawModelName(subTemp[XPOS], subTemp[YPOS], xCollection.xSlot[xCollection.selectSlot].code);
			
			subTemp[XPOS] = px+365;
			subTemp[YPOS] = py-10;
			XFACE xFaceTemp;
			XFITTINGLAYER xFTemp;
			int modelCode = xCollection.xSlot[xCollection.selectSlot].code;
			xFaceTemp.hairNum = 1000+modelCode;
			xFaceTemp.faceNum = 1000+modelCode;
			xFaceTemp.faceType = FACE_TYPE_NORMAL;
			
			for(int i=0;i<SPRIT_IMGLAYERMAX;i++)
				xFTemp.code[i] = DONT;
			
			for(int i=0;i<xModelData[modelCode].totalFittingLayered;i++)
			{
				if(xModelData[modelCode].fittingLayered[i] != DONT)
				{
					setMapData(xModelData[modelCode].fittingLayered[i]);
					xFTemp.code[xFashionData[xMap.type][xMap.listNum].layer] = xModelData[modelCode].fittingLayered[i];
					xFTemp.isInFitting = xModelData[modelCode].isFittingInOut;
				}
			}						
			
			drawFittingBody(subTemp[XPOS], subTemp[YPOS], &xFTemp, &xFaceTemp, TRUE, xModelData[modelCode].sex);
			
			//if(xModelData[modelCode].totalSkillNum > 0)
			{
				subTemp[XPOS] = px+367;
				subTemp[YPOS] = py+178;
				if(xModelData[modelCode].modelSkillType != DONT)
				{
					getSprintfModelSKillType(strTempS,xModelData[modelCode].modelSkillType);
					gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 255, 255, 255, 38, 24, 10);
				}
				
				for(int i=0;i<3;i++)
				{
					subTemp[XPOS] = px+367-70+(70*i);
					subTemp[YPOS] = py+220;
					drawPacker(imgSkillSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlot), imgH(imgSkillSlot), VH);
					if(xModelData[modelCode].totalSkillNum > i)
					{
						int packImgNum = imgSkillIcon0+xModelData[modelCode].skillType[i];
						drawPacker(packImgNum, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(packImgNum), imgH(packImgNum), VH);
						
						xCollection.xTouchSkill[i].wPos = imgW(packImgNum);
						xCollection.xTouchSkill[i].hPos = imgH(packImgNum);
						xCollection.xTouchSkill[i].xPos = subTemp[XPOS]-xCollection.xTouchSkill[i].wPos/2;
						xCollection.xTouchSkill[i].yPos = subTemp[YPOS]-xCollection.xTouchSkill[i].hPos/2;
						
						if(xCollection.selectSkill == i)
							drawPacker(imgSkillSelect, subTemp[XPOS]-2, subTemp[YPOS]-2, 0, 0, imgW(imgSkillSelect), imgH(imgSkillSelect), VH);
					}
					else
						drawPacker(imgSkillSlotEmpty, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlotEmpty), imgH(imgSkillSlotEmpty), VH);
				}
				subTemp[XPOS] = px+367;
				subTemp[YPOS] = py+276;
				drawPacker(imgSkillInfoBox, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillInfoBox), imgH(imgSkillInfoBox), VH);
				gSetColor(255, 255, 255);
				setFontSize(8);
				if(xModelData[modelCode].totalSkillNum > 0)
					getSprintfSKillInfo(strTempS,modelCode,xCollection.selectSkill,0);
				else
					sprintf(strTempS, "스킬없음");
												
				setPopupStringLine(strTempS,lcdW);
				
				int fontGab = 20;
				
				switch(xPopup.totalLine)
				{
				case 2:
					fontGab = 20;
					break;
				case 3:
				case 4:
					fontGab = 16;
					break;
				}
				
				for(int li=0;li<xPopup.totalLine;li++)
					gDrawString(subTemp[XPOS]-80, subTemp[YPOS]-(fontGab/2*(xPopup.totalLine-1))+(fontGab*li), xPopup.strTextLine[li], VL);
				
				setFontSize(11);
			}
		}
		break;
	case 1:
		switch(xCollection.state)
		{
		case COLLECTION_STATE_FASHIONTHEMESELECT:
								
			xCollection.xDragScrollTheme.totalNum = 1+(xCollection.totalFashionTheme-1)/4;
			xCollection.xDragScrollTheme.posGab = 174;
			xCollection.xDragScrollTheme.endPos = -(((xCollection.xDragScrollTheme.totalNum-2)*xCollection.xDragScrollTheme.posGab));
			if(xCollection.xDragScrollTheme.totalNum <= 2)
				xCollection.xDragScrollTheme.endPos = 0;
			else
				xCollection.xDragScrollTheme.endPos += 90;
															
			iMax = xCollection.totalFashionTheme;
												
			dragScrollPrc(&xCollection.xDragScrollTheme,1,FALSE);
			gSetClip(true,0, py-216, lcdW, 508);
			for(int i=0;i<iMax;i++)
			{
				subTemp[XPOS] = px-326+((i%4)*146);
				subTemp[YPOS] = py-100+((i/4)*xCollection.xDragScrollTheme.posGab)+xCollection.xDragScrollTheme.pos;
				if(subTemp[YPOS] > 50 && subTemp[YPOS] < lcdH+50)
				{
					drawCollectionFashionThemeIcon(subTemp[XPOS],subTemp[YPOS],xCollection.fashionThemeList[i]);
                    
                    
                    
                    
										
					sprintf(strTempS, "%d/%d",xCollection.totalFashionThemeOpen[xCollection.fashionThemeList[i]],xCollection.totalFashionThemeClose[xCollection.fashionThemeList[i]]+xCollection.totalFashionThemeOpen[xCollection.fashionThemeList[i]]);
					setFontSize(8);
					gDrawStringBold(subTemp[XPOS]+60, subTemp[YPOS]-70, strTempS, VR,255,255,255,32,24,10);
					setFontSize(11);
					
					if(xCollection.isFashionThemeNew[i] == TRUE)
						drawNewIcon(subTemp[XPOS]+60, subTemp[YPOS]-70);
				}
				
				xCollection.xTouchFashionThemeList[i].wPos = xCollection.imgFashionThemeIcon[xCollection.fashionThemeList[i]].w;
				xCollection.xTouchFashionThemeList[i].hPos = xCollection.imgFashionThemeIcon[xCollection.fashionThemeList[i]].h;
				xCollection.xTouchFashionThemeList[i].xPos = subTemp[XPOS]-xCollection.xTouchFashionThemeList[i].wPos/2;
				xCollection.xTouchFashionThemeList[i].yPos = subTemp[YPOS]-xCollection.xTouchFashionThemeList[i].hPos/2;
			}
			gSetClip(false,0, 0, lcdW, lcdH);
			break;
		case COLLECTION_STATE_FASHIONTHEMEMAIN:
			xCollection.xDragScrollFashionList.totalNum = 1+(xCollection.totalFashionList-1)%5;
			xCollection.xDragScrollFashionList.posGab = 124;
			xCollection.xDragScrollFashionList.endPos = -(((xCollection.xDragScrollFashionList.totalNum-4)*xCollection.xDragScrollFashionList.posGab));
			if(xCollection.xDragScrollFashionList.totalNum <= 4)
				xCollection.xDragScrollFashionList.endPos = 0;
			
			dragScrollPrc(&xCollection.xDragScrollFashionList,1,FALSE);
			iMax = xCollection.totalFashionList;
			
			for(int i=0;i<iMax;i++)
			{
				subTemp[XPOS] = px-411+52+((i%5)*124);
				subTemp[YPOS] = py-120+((i/5)*xCollection.xDragScrollFashionList.posGab)+xCollection.xDragScrollFashionList.pos;
				if(subTemp[YPOS] > 50 && subTemp[YPOS] < lcdH)
				{
					drawPacker(imgCollectionSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCollectionSlot0), imgH(imgCollectionSlot0), VH);
					gSetClip(true,subTemp[XPOS]-imgW(imgCollectionSlot0)/2, subTemp[YPOS]-imgH(imgCollectionSlot0)/2, imgW(imgCollectionSlot0), imgH(imgCollectionSlot0));
					drawFittingF(subTemp[XPOS], subTemp[YPOS], xCollection.fashionList[i], 60);
					gSetClip(false,0, 0, lcdW, lcdH);
					
					if(xInventoryFashion.isOpen[xCollection.fashionList[i]/1000][xCollection.fashionList[i]%1000] == FALSE)
						drawPacker(imgCollectionSlot4, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCollectionSlot4), imgH(imgCollectionSlot4), VH);
				}
								
				xCollection.xTouchFashionList[i].wPos = imgW(imgCollectionSlot0);
				xCollection.xTouchFashionList[i].hPos = imgH(imgCollectionSlot0);
				xCollection.xTouchFashionList[i].xPos = subTemp[XPOS]-xCollection.xTouchFashionList[i].wPos/2;
				xCollection.xTouchFashionList[i].yPos = subTemp[YPOS]-xCollection.xTouchFashionList[i].hPos/2;
				
				if(xCollection.selectSlotFashion == i)
				{
					drawPacker(imgCollectionSelect, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgCollectionSelect), imgH(imgCollectionSelect), VH);
				}
			}
															
			subTemp[XPOS] = px+367;
			subTemp[YPOS] = py-209;
				
			setFontSize(14);
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS], xCollection.strFashionTheme[xCollection.selectFashionThemeList], VH, 255, 255, 255, 82, 49, 38);
			setFontSize(11);
			
			subTemp[XPOS] = px+365;
			subTemp[YPOS] = py-10;
			XFACE xFaceTemp;
			XFITTINGLAYER xFTemp;
			xFaceTemp.hairNum = DONT;
			xFaceTemp.faceNum = DONT;
			xFaceTemp.faceType = FACE_TYPE_NORMAL;
			
			for(int i=0;i<SPRIT_IMGLAYERMAX;i++)
				xFTemp.code[i] = DONT;
				
			for(int i=0;i<xCollection.totalFashionList;i++)
			{
				setMapData(xCollection.fashionList[i]);
				xFTemp.code[xFashionData[xMap.type][xMap.listNum].layer] = xCollection.fashionList[i];
			}
			xFTemp.isInFitting = xCollection.isFashionThemeFittingInOut[xCollection.selectFashionThemeList];
			drawFittingBody(subTemp[XPOS], subTemp[YPOS], &xFTemp, &xFaceTemp, FALSE, xFashionData[xMap.type][xMap.listNum].gender);
			
			subTemp[XPOS] = px+367-80-20;
			subTemp[YPOS] = py+178;
			setMapData(xCollection.fashionList[xCollection.selectSlotFashion]);
			sprintf(strTempS, "이름: %s",xFashionData[xMap.type][xMap.listNum].strName);
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VL, 255, 255, 255, 82, 49, 38);
			subTemp[YPOS] += 26;
			switch(xMap.type)
			{
			case 0:sprintf(strTempS, "부위: 아우터");break;//아우터
			case 1:sprintf(strTempS, "부위: 상의");break;//상의
			case 2:sprintf(strTempS, "부위: 하의");break;//하의
			case 3:sprintf(strTempS, "부위: 원피스");break;//원피스
			case 4:sprintf(strTempS, "부위: 신발");break;//신발
			case 5:sprintf(strTempS, "부위: 가방");break;//가방
			case 6:sprintf(strTempS, "부위: 기타");break;//기타
			}
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VL, 255, 255, 255, 82, 49, 38);
			subTemp[YPOS] += 26;
			
				
			
				
			//오픈가격
			if(xFashionData[xMap.type][xMap.listNum].isStaff == 2)
			{
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "획득경로: 캔디머신", VL, 255, 255, 255, 82, 49, 38);
			}
			else
			{
                
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "가격:", VL, 255, 255, 255, 82, 49, 38);
				setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].price.oriData);
				gDrawStringBold(subTemp[XPOS]+150+15, subTemp[YPOS], strTempS, VR, 255, 255, 255, 82, 49, 38);
					
				switch(xFashionData[xMap.type][xMap.listNum].priceType)
				{
				case 2:
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]+40, subTemp[YPOS], imgW(imgProductionMenuObj0)/8*7, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					break;
				default:
					drawPacker(imgProductionMenuObj0, subTemp[XPOS]+40, subTemp[YPOS], imgW(imgProductionMenuObj0)/8*xFashionData[xMap.type][xMap.listNum].priceType, 0, imgW(imgProductionMenuObj0)/8, imgH(imgProductionMenuObj0), VL);
					break;
				}
			}
				
			subTemp[YPOS] += 26;
			gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "드레스코드:", VL, 255, 255, 255, 82, 49, 38);
			subTemp[YPOS] += 26;
			
				
			colorImgNum = imgCollectionColorIcon0+xFashionData[xMap.type][xMap.listNum].color;
			xGame.isReSizeDraw = TRUE;
			xGame.reSize = 60;
			drawPacker(colorImgNum, subTemp[XPOS]+16, subTemp[YPOS], 0, 0, imgW(colorImgNum), imgH(colorImgNum), VH);
			drawPacker(imgCollectionConceptionIcon, subTemp[XPOS]+16+40, subTemp[YPOS]+4, imgW(imgCollectionConceptionIcon)/9*xFashionData[xMap.type][xMap.listNum].concept, 0, imgW(imgCollectionConceptionIcon)/9, imgH(imgCollectionConceptionIcon), VH);
			xGame.isReSizeDraw = FALSE;
				
				
			subTemp[XPOS] = cx+444;
			subTemp[YPOS] = 36;
			drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, imgH(imgBtn0)/2, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
			break;
		}
		break;
	}
	
	subTemp[XPOS] = cx+440;
	subTemp[YPOS] = 40;
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
    /*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);	
    */

}


void drawCollectionFashionThemeIcon(int x,int y,int themeNum)
{
	char strFileName[64];
	if(xCollection.imgFashionThemeIcon[themeNum].texture == NULL)
	{
		sprintf(strFileName, "fashionthemeicon%d.png",themeNum);
		loadImgDocuments(strFileName, &xCollection.imgFashionThemeIcon[themeNum]);
	}
	drawImage(&xCollection.imgFashionThemeIcon[themeNum], x, y, 0, 0, xCollection.imgFashionThemeIcon[themeNum].w, xCollection.imgFashionThemeIcon[themeNum].h, VH);
}

void setCollectionTab()
{
	switch(xCollection.selectTabB)
	{
	case 0:
		xCollection.state = COLLECTION_STATE_MAIN;
		for(int i=0;i<xCollection.totalFashionTheme;i++)
			freeImg(&xCollection.imgFashionThemeIcon[i]);
		freeFashion();
		faceHairImgFree();
		break;
	case 1:
		xCollection.state = COLLECTION_STATE_FASHIONTHEMESELECT;
		for(int i=0;i<xCollection.totalFashionTheme;i++)
			freeImg(&xCollection.imgFashionThemeIcon[i]);
		freeFashion();
		faceHairImgFree();
		setThemeList();
		break;
	}
}

void getSprintfModelSKillType(char*strText,int code)
{
	switch(code)
	{
	case 0:sprintf(strText, "타입:샵");break;
	case 1:sprintf(strText, "타입:소셜");break;
	case 2:sprintf(strText, "타입:패션쇼");break;
	case 3:sprintf(strText, "타입:복합");break;
	case 4:sprintf(strText, "타입:만능");break;
	}
}


void getSprintfSKillInfo(char*strText,int code,int selectSKill,int getType)
{
	
	int type;
	int num;
	char strTemp[256];
	switch(getType)
	{
	case 0:		//모델정보에서
		type = xModelData[code].skillType[selectSKill];
		num = xModelData[code].skillPer[selectSKill];
		break;
	case 1:		//적용버프정보에서
		type = selectSKill;
		num = xModelSkill.bonusPer[type];
		break;
	}
	
	switch(type)
	{
	case 0:sprintf(strText, "1층 의상 판매 시\n%d%% 추가 골드",num);break;
	case 1:sprintf(strText, "1층 의상 판매 시\n%d%% 추가 경험치",num);break;
	case 2:sprintf(strText, "유행 발동 시\n지속시간 %d%%증가",num);break;
	case 3:sprintf(strText, "유행 판매 보상%d%% 증가",num);break;
	case 4:sprintf(strText, "미구현(code:%d)",type);break;
	case 5:sprintf(strText, "명성도 %d 증가",num);break;
	case 6:sprintf(strText, "모델 활동 시간 %d%% 단축\n(해당 모델 전용)",num);break;
	case 7:sprintf(strText, "모델 활동 보상 %d%% 증가\n(해당 모델 전용)",num);break;
	case 8:sprintf(strText, "캔디머신 이용 소모량\n%d개 감소(중첩불가)",num);break;
	case 9:sprintf(strText, "패션쇼 이용 소모량\n%d개 감소(중첩불가)",num);break;
	case 10:sprintf(strText, "눈의여왕세트 획득\n확률 증가");break;
	case 11:sprintf(strText, "쇼파에서 커피를 요청하는\n손님 발생 확률 증가");break;
	case 12:sprintf(strText, "쇼파에서 핸드폰 만지는\n손님 발생 확률 증가");break;
	case 13:sprintf(strText, "쇼파에서 패드 요청하는\n손님 발생 확률 증가");break;
	case 14:sprintf(strText, "쇼파에서 잡지 요청하는\n손님 발생 확률 증가");break;
	case 15:sprintf(strText, "남자 손님 방문 확률 증가");break;
	case 16:sprintf(strText, "여자 손님 방문 확률 증가");break;
	case 17:sprintf(strText, "커플 방문 확률 증가");break;
	case 18:sprintf(strText, "남자 동성 친구\n방문 확률 증가");break;
	case 19:sprintf(strText, "여자 동성 친구\n방문 확률 증가");break;
	case 20:sprintf(strText, "소셜 횟수 %d회 증가",num);break;
	case 21:sprintf(strText, "모델 추천 %d회 증가",num);break;
	case 22:sprintf(strText, "주문배송 요청\n%d회 증가",num);break;
	case 23:
		memset(strTemp, 0, sizeof(strTemp));
		drawTimeSprintf(strTemp,num,2);
		sprintf(strText, "주문배송 차량 시간\n%s 감소",strTemp);
		break;
	case 24:sprintf(strText, "주문배송 보상\n%d%% 증가",num);break;
	case 25:sprintf(strText, "친구가 보내 주는 의상\n%d벌 추가 획득",num);break;
	case 26:sprintf(strText, "페미닌 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 27:sprintf(strText, "큐트 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 28:sprintf(strText, "베이직 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 29:sprintf(strText, "클럽 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 30:sprintf(strText, "드레스 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 31:sprintf(strText, "시크 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 32:sprintf(strText, "섹시 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 33:sprintf(strText, "에스닉 컨셉 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 34:sprintf(strText, "눈의여왕 세트 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 35:sprintf(strText, "블랙 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 36:sprintf(strText, "화이트 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 37:sprintf(strText, "그레이 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 38:sprintf(strText, "베이지 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 39:sprintf(strText, "레드 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 40:sprintf(strText, "옐로우 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 41:sprintf(strText, "블루 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 42:sprintf(strText, "브라운 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 43:sprintf(strText, "그린 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 44:sprintf(strText, "퍼플 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 45:sprintf(strText, "핑크 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 46:sprintf(strText, "오렌지 컬러 의상 착용 시\n패션쇼 점수 %d%% 추가 획득",num);break;
	case 47:sprintf(strText, "레이어드 수 %d회 증가",num);break;
	case 48:sprintf(strText, "미구현(code:%d)",type);break;
	case 49:sprintf(strText, "패션쇼 진행 보너스\n골드 %d%% 추가 획득",num);break;
	case 50:sprintf(strText, "패션쇼 진행 보너스\n경험치 %d%% 추가 획득",num);break;
	case 51:sprintf(strText, "월드맵 차량 이동 속도 증가");break;
	case 52:sprintf(strText, "미구현(code:%d)",type);break;
	case 53:sprintf(strText, "미구현(code:%d)",type);break;
	case 54:sprintf(strText, "미구현(code:%d)",type);break;
	case 55:sprintf(strText, "2층 의상 판매 시\n%d%% 추가 골드",num);break;
	case 56:sprintf(strText, "2층 의상 판매 시\n%d%% 추가 경험치",num);break;
	}
}

int getSkillPer(int modelCode,int skillType)
{
	int result = 0;
	for(int i=0;i<xModelData[modelCode].totalSkillNum;i++)
	{
		if(xModelData[modelCode].skillType[i] == skillType)
		{
			result = xModelData[modelCode].skillPer[i];
			break;
		}
	}
	return result;
}

void drawRunwaySkillUi()
{
	int px = cx-68;
	int py = 96;
			
	int modelCode = xRunWay.modelCode[xRunWay.nowModel];
	
	int totalRunwaySkill;
	int runwaySkillType[3];
	int runwaySkillType_modelSlotNum[3];
	
	totalRunwaySkill = 0;
	for(int i=0;i<xModelData[modelCode].totalSkillNum;i++)
	{
		switch(xModelData[modelCode].skillType[i])
		{
		case 20:
		case 21:
		case 22:
			//친구샵
			break;
		case 26:
		case 27:
		case 28:
		case 29:
		case 30:
		case 31:
		case 32:
		case 33:
		case 34:
		case 35:
		case 36:
		case 37:
		case 38:
		case 39:
		case 40:
		case 41:
		case 42:
		case 43:
		case 44:
		case 45:
		case 46:
		case 47:
		case 48:
		case 49:
		case 50:
			//패션쇼
			runwaySkillType_modelSlotNum[totalRunwaySkill] = i;
			runwaySkillType[totalRunwaySkill++] = xModelData[modelCode].skillType[i];
			break;
		case 6:
		case 7:
			//내샵이지만 안보여줌
			break;
		default:
			//내샵
			break;
		}
	}
	
	//스킬
	for(int i=0;i<3;i++)
	{
		subTemp[XPOS] = px-55+(70*i);
		subTemp[YPOS] = py;
		drawPacker(imgSkillSlot, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlot), imgH(imgSkillSlot), VH);
		if(totalRunwaySkill > i)
		{
			int packImgNum = imgSkillIcon0+runwaySkillType[i];
			drawPacker(packImgNum, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(packImgNum), imgH(packImgNum), VH);
			
			xCollection.xTouchSkill[i].wPos = imgW(packImgNum);
			xCollection.xTouchSkill[i].hPos = imgH(packImgNum);
			xCollection.xTouchSkill[i].xPos = subTemp[XPOS]-xCollection.xTouchSkill[i].wPos/2;
			xCollection.xTouchSkill[i].yPos = subTemp[YPOS]-xCollection.xTouchSkill[i].hPos/2;
			
			if(xCollection.selectSkill == i)
			{
				drawPacker(imgSkillSelect, subTemp[XPOS]-2, subTemp[YPOS]-2, 0, 0, imgW(imgSkillSelect), imgH(imgSkillSelect), VH);
				drawPacker(imgSkillTextBox, subTemp[XPOS]+68, subTemp[YPOS]-60, 0, 0, imgW(imgSkillTextBox), imgH(imgSkillTextBox), VH);
				
				gSetColor(255, 255, 255);
				setFontSize(8);
																
				getSprintfSKillInfo(strTempS,modelCode,runwaySkillType_modelSlotNum[i],0);
				setPopupStringLine(strTempS,lcdW);
								
				int fontGab = 20;
				switch(xPopup.totalLine)
				{
					case 2:
						fontGab = 20;
						break;
					case 3:
					case 4:
						fontGab = 16;
						break;
				}
				
				for(int li=0;li<xPopup.totalLine;li++)
					gDrawString(subTemp[XPOS]+68-80, subTemp[YPOS]-60-3-(fontGab/2*(xPopup.totalLine-1))+(fontGab*li), xPopup.strTextLine[li], VL);
				
				setFontSize(11);
			}
		}
		else
			drawPacker(imgSkillSlotEmpty, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgSkillSlotEmpty), imgH(imgSkillSlotEmpty), VH);
	}
}


void setCashGift()
{
	xWorldMap.isCashGift = TRUE;
	setPacker(PACKER_STATE_MAIL);
}
void drawCashGift()
{
	int px = cx;
	int py = cy;
	drawBgFillRect();
	drawPacker(imgGiftShopBg, px, py, 0, 0, imgW(imgGiftShopBg), imgH(imgGiftShopBg), VH);
	
		

	xCashGift.totalSlot = 6;
	xCashGift.xDragScroll.totalNum = xCashGift.totalSlot;
	xCashGift.xDragScroll.posGab = 178;
	xCashGift.xDragScroll.endPos = -(((xCashGift.xDragScroll.totalNum-3)*xCashGift.xDragScroll.posGab));
		
	if(xCashGift.xDragScroll.totalNum < 3)
		xCashGift.xDragScroll.endPos = 0;
	else
		xCashGift.xDragScroll.endPos += 30;
		
	int iMax = xCashGift.xDragScroll.totalNum;
	int pos = 0;
	
	dragScrollPrc(&xCashGift.xDragScroll,1,FALSE);
	
	gSetClip(true,px-286, 0, 568, lcdH);
	
	for(int i=0;i<iMax;i++)
	{
		pos = xCashGift.xDragScroll.pos+(xCashGift.xDragScroll.posGab*i);
		subTemp[XPOS] = px-195+pos;
		subTemp[YPOS] = py+27;
		
		
		xCashGift.xTouhSlot[i].wPos = imgW(imgGiftShopSlotBg);
		xCashGift.xTouhSlot[i].hPos = imgH(imgGiftShopSlotBg);
		xCashGift.xTouhSlot[i].xPos = subTemp[XPOS]-xCashGift.xTouhSlot[i].wPos/2;
		xCashGift.xTouhSlot[i].yPos = subTemp[YPOS]-xCashGift.xTouhSlot[i].hPos/2;
		
		
		
		if(subTemp[XPOS] < -xCashGift.xDragScroll.posGab || subTemp[XPOS] > lcdW+xCashGift.xDragScroll.posGab)
			continue;
		
		drawPacker(imgGiftShopSlotBg, subTemp[XPOS],subTemp[YPOS], 0, 0, imgW(imgGiftShopSlotBg), imgH(imgGiftShopSlotBg), VH);
		drawShopMoneyIcon(subTemp[XPOS],subTemp[YPOS],i);
		
		setCommaNum(strTempB, xShop.moneyPoint[i].oriData);
		sprintf(strTempS, "%s 룩",strTempB);
		gSetColor(255, 255, 255);
		setFontSize(14);
		gDrawString(subTemp[XPOS], subTemp[YPOS]-112, strTempS, VH);
		setFontSize(11);
		
		
		setCommaNum(strTempB, xShop.moneyPrice[i].oriData);
		sprintf(strTempS, "%s원",strTempB);
		gSetColor(44, 27, 26);
		setFontSize(14);
		gDrawString(subTemp[XPOS]+63, subTemp[YPOS]+95, strTempS, VR);
		setFontSize(11);
		
		if(xShop.moneyPriceBonus[i] > 0)
		{
			drawPacker(imgSlotBonus0, subTemp[XPOS]+45, subTemp[YPOS]-45, 0, 0, imgW(imgSlotBonus0), imgH(imgSlotBonus0), VH);
			setFontSize(8);
			gDrawStringBold(subTemp[XPOS]+45+5, subTemp[YPOS]-45, "룩", VL, 255, 255, 255, 82, 49, 38);
			setFontSize(11);
			sprintf(strTempS,"%d", xShop.moneyPriceBonus[i]);
			if(xShop.moneyPriceBonus[i] >= 100)
			{
				setFontSize(14);
				gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-1, strTempS, VR, 255, 255, 255, 82, 49, 38);
				setFontSize(11);
			}
			else
			{
				setFontSize(20);
				gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]-45-1, strTempS, VR, 255, 255, 255, 82, 49, 38);
				setFontSize(11);
			}
		}
	}
	gSetClip(false,0, 0, lcdW, lcdH);
		
	subTemp[XPOS] = px+270;
	subTemp[YPOS] = py-130;
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.wPos/2;
		
	/*
	gSetColor(255, 0, 0);
	setAlpha(100);
	fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	setAlpha(ALPHA_MAX);
	*/
}


		





void getUiShowType()
{
    switch(xWorldMap.state)
    {
    case WORLDMAP_STATE_PRODUCTIONMENU:
    case WORLDMAP_STATE_FRIENDLIST:
    case WORLDMAP_STATE_FITTING_FP:
    case WORLDMAP_STATE_GREENHOUSE_FP:
    case WORLDMAP_STATE_SPINNINGWHEEL_FP:
    case WORLDMAP_STATE_SHOP_FP:
    //추가된 부분 KBY 2018.2.23
    case WORLDMAP_STATE_MAIL:
        xWorldMap.uiShowType = 5;
        break;
    case WORLDMAP_STATE_INTERIORSHOP:
    case WORLDMAP_STATE_STAFF:
    case WORLDMAP_STATE_FITTING:
        xWorldMap.uiShowType = 4;
        break;
    
//    case WORLDMAP_STATE_MAIL:
    case WORLDMAP_STATE_SELL:
    case WORLDMAP_STATE_FASHIONSHOWNEW:
    case WORLDMAP_STATE_FRIENDORDER:
    case WORLDMAP_STATE_FRIENDORDERITEM:
    case WORLDMAP_STATE_NOTICE:
    case WORLDMAP_STATE_NOTICEPOPUP:
    case WORLDMAP_STATE_SEVERSELL:
    case WORLDMAP_STATE_COLLECTION:
    case WORLDMAP_STATE_LULUPANG:
        xWorldMap.uiShowType = 0;
        break;
    case WORLDMAP_STATE_MODEL:
        switch(xModel.state)
        {
        case MODELCOLLECT_STATE_SELECTMODEL:
        case MODELCOLLECT_STATE_SELECTMODELCASTING:
        case MODELCOLLECT_STATE_LIST:
        case MODELCOLLECT_STATE_LISTCASTING:
        case MODELCOLLECT_STATE_LISTINFO:
        case MODELCOLLECT_STATE_LISTUPGRADE:
        case MODELCOLLECT_STATE_MAINUPGRADE:
        case MODELCOLLECT_STATE_FITTING:
            xWorldMap.uiShowType = 0;
            break;
        default:
            xWorldMap.uiShowType = 3;
            break;
        }
        break;
    case WORLDMAP_STATE_MODEL_FRIEND:
        if(xModel.state == MODELCOLLECT_FRIEND_STATE_SHOP)
            xWorldMap.uiShowType = 0;
        else
            xWorldMap.uiShowType = 3;
        break;
    default:
        xWorldMap.uiShowType = 2;
        break;
    }
    if(xWorldMap.isCashShop == TRUE)
        xWorldMap.uiShowType = 4;
}



void setStateMileageShop()
{
    xWorldMap.state = WORLDMAP_STATE_MILEAGESHOP;
    xMileageShop.state = MILEAGESHOP_STATE_INITDATA;
    xResCheck.state = RESCHECK_STATE_FILE_DOWNLOAD_START;
    mileageShopFreeLoad(TRUE);
}


void setStateMileageShopSendPopup()
{
    xMileageShop.state = MILEAGESHOP_STATE_SENDPOPUP;
    memset(xMileageShop.strName, 0, sizeof(xMileageShop.strName));
    memset(xMileageShop.strAddress, 0, sizeof(xMileageShop.strAddress));
    memset(xMileageShop.strPhone, 0, sizeof(xMileageShop.strPhone));
}


void mileageShopFreeLoad(M_Boolean isLoad)
{
    if(isLoad == TRUE)
    {
        loadImg("mileageshop0.png", &imgMileageShop[0]);
        loadImg("mileageshop1.png", &imgMileageShop[1]);
        loadImg("mileageshop2.png", &imgMileageShop[2]);
        loadImg("mileageshop3.png", &imgMileageShop[3]);
        loadImg("mileageshop4.png", &imgMileageShop[4]);
        loadImg("mileageshop5.png", &imgMileageShop[5]);
        loadImg("mileageshop6.png", &imgMileageShop[6]);
        loadImg("mileageshop7.png", &imgMileageShop[7]);
        loadImg("mileageshop8.png", &imgMileageShop[8]);
    }
    else
    {
        freeImg(&imgMileageShop[0]);
        freeImg(&imgMileageShop[1]);
        freeImg(&imgMileageShop[2]);
        freeImg(&imgMileageShop[3]);
        freeImg(&imgMileageShop[4]);
        freeImg(&imgMileageShop[5]);
        freeImg(&imgMileageShop[6]);
        freeImg(&imgMileageShop[7]);
        freeImg(&imgMileageShop[8]);
    }
}

void setMileageShopCategory()
{
    xMileageShop.totalList = 0;
    
    
    xMileageShop.xDragScroll.touchXpos = DONT;
    xMileageShop.xDragScroll.touchYpos = DONT;
    xMileageShop.xDragScroll.touchXposBefore = DONT;
    xMileageShop.xDragScroll.touchYposBefore = DONT;
    xMileageShop.xDragScroll.selectNum = 0;
    xMileageShop.xDragScroll.pos = 0;
    xMileageShop.xDragScroll.speed = 0;
    
    
    
    for(int type=0; type < MILEAGETYPEMAX;type++)
    {
        for(int list=0; list < MILEAGELISTEMAX;list++)
        {
            if(xMileageData.xSlot[type][list].price != 0)
            {
                switch(xMileageShop.selectCategoryTab)
                {
                case MILEAGESHOP_CATEGORY_10000:
                    if(xMileageData.xSlot[type][list].price < 20000*MILEAGEPRICEUNIT)
                        xMileageShop.listCode[xMileageShop.totalList++]  = (type*10000)+list;
                    break;
                case MILEAGESHOP_CATEGORY_20000:
                    if(xMileageData.xSlot[type][list].price >= 20000*MILEAGEPRICEUNIT && xMileageData.xSlot[type][list].price < 30000*MILEAGEPRICEUNIT)
                        xMileageShop.listCode[xMileageShop.totalList++]  = (type*10000)+list;
                    break;
                case MILEAGESHOP_CATEGORY_30000:
                    if(xMileageData.xSlot[type][list].price >= 30000*MILEAGEPRICEUNIT)
                        xMileageShop.listCode[xMileageShop.totalList++]  = (type*10000)+list;
                    break;
                case MILEAGESHOP_CATEGORY_TOP:
                    if(type == 0)
                        xMileageShop.listCode[xMileageShop.totalList++] = (type*10000)+list;
                        break;
                case MILEAGESHOP_CATEGORY_BOTTOM:
                    if(type == 1)
                        xMileageShop.listCode[xMileageShop.totalList++] = (type*10000)+list;
                    break;
                case MILEAGESHOP_CATEGORY_ONEPIECE:
                    if(type == 2)
                        xMileageShop.listCode[xMileageShop.totalList++] = (type*10000)+list;
                    break;
                case MILEAGESHOP_CATEGORY_ETC:
                    if(type == 3)
                        xMileageShop.listCode[xMileageShop.totalList++] = (type*10000)+list;
                    break;
                }
            }
            
        }
    }
    
    //정렬
    for(int k=0;k<xMileageShop.totalList;k++)
    {
        for(int z=k+1;z<xMileageShop.totalList;z++)
        {
            int kType = xMileageShop.listCode[k]/10000;
            int kList = xMileageShop.listCode[k]%10000;
            
            int zType = xMileageShop.listCode[z]/10000;
            int zList = xMileageShop.listCode[z]%10000;

            
            if(xMileageData.xSlot[kType][kList].sort < xMileageData.xSlot[zType][zList].sort)
            {
                int tempCode = xMileageShop.listCode[k];
                xMileageShop.listCode[k] = xMileageShop.listCode[z];
                xMileageShop.listCode[z] = tempCode;
            }
        }
     }
}


void drawMileageShop()
{
    int px = cx;
    int py = cy;
    
    
    int initType = 0;
    
    
    switch(xMileageShop.state)
    {
    case MILEAGESHOP_STATE_INITDATA:
        switch(xResCheck.state)
        {
        case RESCHECK_STATE_FILE_DOWNLOAD_START:
            sprintf(xDownLoader.strTempUrl,"%s/%d/Data/%s",xNetData.strCdnUrl,DATAVER,EXCEL_PS_MILEAGE_FILE);
            
            dataDownLoad(xDownLoader.strTempUrl,EXCEL_PS_MILEAGE_FILE,DATADOWNLOAD_TYPE_BUFF);
            xResCheck.state = RESCHECK_STATE_FILE_DOWNLOAD_ING;
            break;
        case RESCHECK_STATE_FILE_DOWNLOAD_ING:
            switch(xDownLoader.state)
            {
            case DOWNLOADER_STATE_ING:
                break;
            case DOWNLOADER_STATE_ERR:
                if(playState == PLAY_PLAY)
                    setPopup(POPUP_SERVERERR, playState, playState, 0, DONT);
                break;
            case DOWNLOADER_STATE_SUCCESS:
                loadNativeFileData("buffer.dat", bufData, &bufDataSize);
                initType = getExcelTypeNum(EXCEL_PS_MILEAGE_FILE);
                loadExcelParserByte(initType);
                    
                xMileageShop.state = MILEAGESHOP_STATE_INITNET;
                ////////////////////////////////////////////////////
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MILEAGESHOPCOUNT, TRUE);
                ///////////////////////////////////////////////////
                break;
            }
        }
        break;
    case MILEAGESHOP_STATE_INITNET:
        break;
    }
    
    switch(xMileageShop.state)
    {
    case MILEAGESHOP_STATE_INITDATA:
    case MILEAGESHOP_STATE_INITNET:
        xGame.isRotate = TRUE;
        xGame.rotateNum = 360-(gameCnt%120)*3;
        drawPacker(imgLoadingIcon0, cx, cy, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
        xGame.isRotate = FALSE;
        return;
        break;
    }
    
    
    gSetColor(255, 255, 255);
    fillRect(0, 0, lcdW, lcdH);
    
    drawImage(&imgMileageShop[0], px, py, 0, 0, imgMileageShop[0].w, imgMileageShop[0].h, VH);
    
    
    subTemp[XPOS] = px+535;
    subTemp[YPOS] = py-285;
    
    xMileageShop.xTouchExit.wPos = 80;
    xMileageShop.xTouchExit.hPos = 80;
    xMileageShop.xTouchExit.xPos = subTemp[XPOS]-xMileageShop.xTouchExit.wPos/2;
    xMileageShop.xTouchExit.yPos = subTemp[YPOS]-xMileageShop.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xMileageShop.xTouchExit.xPos, xMileageShop.xTouchExit.yPos, xMileageShop.xTouchExit.wPos, xMileageShop.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    for(int k=0;k<MILEAGESHOPCATEGORYMAX;k++)
    {
        subTemp[XPOS] = px-470;
        subTemp[YPOS] = py-179+(k*70);
        
        xMileageShop.xTouchCategory[k].wPos = 180;
        xMileageShop.xTouchCategory[k].hPos = 50;
        xMileageShop.xTouchCategory[k].xPos = subTemp[XPOS]-xMileageShop.xTouchCategory[k].wPos/2;
        xMileageShop.xTouchCategory[k].yPos = subTemp[YPOS]-xMileageShop.xTouchCategory[k].hPos/2;
    

        /*
        setAlpha(100);
        gSetColor(255, 0, 0);
        fillRect(xMileageShop.xTouchCategory[k].xPos, xMileageShop.xTouchCategory[k].yPos, xMileageShop.xTouchCategory[k].wPos, xMileageShop.xTouchCategory[k].hPos);
        setAlpha(ALPHA_MAX);
         */

    }
    
    
    subTemp[XPOS] = px+405;
    subTemp[YPOS] = py-276;
    
    
    
    
    sprintf(strTempB,".%d%d%d", (xSaveTemp.mileage.oriData/100)%10,(xSaveTemp.mileage.oriData/10)%10,xSaveTemp.mileage.oriData%10);
    
    setCommaNum(strTempS, xSaveTemp.mileage.oriData/MILEAGEPRICEUNIT);
    int ww = getLabelWidth(strTempB,18, false);
    setFontSize(18);
    gSetColor(106, 110, 121);
    gDrawString(subTemp[XPOS]+55, subTemp[YPOS]+3, strTempB, VR);
    setFontSize(28);
    gSetColor(255, 255, 255);
    gDrawString(subTemp[XPOS]+55-8-ww, subTemp[YPOS], strTempS, VR);
    setFontSize(11);
    subTemp[XPOS] = px+118;
    subTemp[YPOS] = py-276;
    xMileageShop.xTouchInfo.wPos = 160;
    xMileageShop.xTouchInfo.hPos = 60;
    xMileageShop.xTouchInfo.xPos = subTemp[XPOS]-xMileageShop.xTouchInfo.wPos/2;
    xMileageShop.xTouchInfo.yPos = subTemp[YPOS]-xMileageShop.xTouchInfo.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xMileageShop.xTouchInfo.xPos, xMileageShop.xTouchInfo.yPos, xMileageShop.xTouchInfo.wPos, xMileageShop.xTouchInfo.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    //세부메뉴
    xMileageShop.xDragScroll.totalNum = 1+(xMileageShop.totalList-1)/3;
    xMileageShop.xDragScroll.posGab = 446;
    
    xMileageShop.xDragScroll.endPos = -(((xMileageShop.xDragScroll.totalNum-2)*xMileageShop.xDragScroll.posGab));
    
    if(xMileageShop.xDragScroll.totalNum <= 1)
        xMileageShop.xDragScroll.endPos = 0;
    else
        xMileageShop.xDragScroll.endPos -= 350;
    
    int iMax = xMileageShop.totalList;
    dragScrollPrc(&xMileageShop.xDragScroll,1,FALSE);
    
				
    gSetClip(true,0, py-246, lcdW, 550);
    for(int i=0;i<iMax;i++)
    {
        int pos = xMileageShop.xDragScroll.pos+(xMileageShop.xDragScroll.posGab*(i/3));
        subTemp[XPOS] = px-208+(306*(i%3));
        subTemp[YPOS] = py-15+pos;
        
        if(subTemp[YPOS] < -xMileageShop.xDragScroll.posGab || subTemp[YPOS] > lcdH+xMileageShop.xDragScroll.posGab)
            continue;
        
        int type = xMileageShop.listCode[i]/10000;
        int list = xMileageShop.listCode[i]%10000;
        
        drawImage(&imgMileageShop[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMileageShop[1].w, imgMileageShop[1].h, VH);
        
        
        
        sprintf(xDownLoader.strTempUrl, "%s/Product/product_%d.png",xNetData.strCdnUrl,xMileageShop.listCode[i]);
        
        drawProfilePhotoUrl(subTemp[XPOS], subTemp[YPOS]-75,xDownLoader.strTempUrl);
        
        
        gSetColor(102, 102, 102);
        setFontSize(25);
        
        setPopupStringLine(xMileageData.xSlot[type][list].strNameLine,220);
        int fontGab = 32;
        for(int li=0;li<xPopup.totalLine;li++)
            gDrawString(subTemp[XPOS]-125,subTemp[YPOS]+82+(fontGab*li), xPopup.strTextLine[li], VL);
        setFontSize(11);
        
        int remainCount = xMileageData.xSlot[type][list].maxCount - xMileageData.xSlot[type][list].nowCount;
        if(remainCount<0)
        {
            remainCount=0;   
        }
        setFontSize(18);
        sprintf(strTempS, "현재%d개남음(%d개한정)",remainCount,xMileageData.xSlot[type][list].maxCount);
        gSetColor(149, 149, 149);
        gDrawString(subTemp[XPOS]-125, subTemp[YPOS]+115+((xPopup.totalLine-1)*fontGab), strTempS, VL);
        setFontSize(11);
        
        gSetColor(102, 102, 102);
        setFontSize(28);
        
        
        
        
        setCommaNum(strTempS, xMileageData.xSlot[type][list].price/MILEAGEPRICEUNIT);
        int ww = getLabelWidth(strTempS,28, false);
        gDrawString(subTemp[XPOS]+10, subTemp[YPOS]+188, strTempS, VH);
        
        drawImage(&imgMileageIcon[0], subTemp[XPOS]+10-(ww/2)-20, subTemp[YPOS]+188, 0, 0, imgMileageIcon[0].w, imgMileageIcon[0].h, VH);
        
        setFontSize(11);
        
        if(remainCount <= 0)
            drawImage(&imgMileageShop[7], subTemp[XPOS], subTemp[YPOS]-75, 0, 0, imgMileageShop[7].w, imgMileageShop[7].h, VH);
    }
    gSetClip(false,0, 0, lcdW, lcdH);
    
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xMileageShop.xDragScroll.selectNum = (-xMileageShop.xDragScroll.pos/xMileageShop.xDragScroll.posGab);
    
    if(xMileageShop.xDragScroll.selectNum < 0)
        xMileageShop.xDragScroll.selectNum = 0;
    
    for(int i=0;i<6;i++)
    {
        subTemp[XPOS] = px-208+(306*(i%3));
        subTemp[YPOS] = py-15+(i/3*xMileageShop.xDragScroll.posGab);
        
        
        xMileageShop.xTouchSlotBuy[i].wPos = 160;
        xMileageShop.xTouchSlotBuy[i].hPos = 50;
        xMileageShop.xTouchSlotBuy[i].xPos = subTemp[XPOS] - xMileageShop.xTouchSlotBuy[i].wPos/2;
        xMileageShop.xTouchSlotBuy[i].yPos = subTemp[YPOS]+190 +((xMileageShop.xDragScroll.posGab <= xMileageShop.xDragScroll.pos ? xMileageShop.xDragScroll.pos:(xMileageShop.xDragScroll.pos%xMileageShop.xDragScroll.posGab)))- xMileageShop.xTouchSlotBuy[i].hPos/2;
        
        xMileageShop.xTouchSlotLink[i].wPos = 200;
        xMileageShop.xTouchSlotLink[i].hPos = 200;
        xMileageShop.xTouchSlotLink[i].xPos = subTemp[XPOS] - xMileageShop.xTouchSlotLink[i].wPos/2;
        xMileageShop.xTouchSlotLink[i].yPos = subTemp[YPOS]-80 +((xMileageShop.xDragScroll.posGab <= xMileageShop.xDragScroll.pos ? xMileageShop.xDragScroll.pos:(xMileageShop.xDragScroll.pos%xMileageShop.xDragScroll.posGab)))- xMileageShop.xTouchSlotLink[i].hPos/2;
        

        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xMileageShop.xTouchSlotBuy[i].xPos, xMileageShop.xTouchSlotBuy[i].yPos, xMileageShop.xTouchSlotBuy[i].wPos, xMileageShop.xTouchSlotBuy[i].hPos);
        fillRect(xMileageShop.xTouchSlotLink[i].xPos, xMileageShop.xTouchSlotLink[i].yPos, xMileageShop.xTouchSlotLink[i].wPos, xMileageShop.xTouchSlotLink[i].hPos);
         setAlpha(ALPHA_MAX);
        */

    }
    
    
    switch(xMileageShop.state)
    {
    case MILEAGESHOP_STATE_SENDPOPUP:
    case MILEAGESHOP_STATE_SENDPOPUP_BUY:
    case MILEAGESHOP_STATE_SENDPOPUP_POPUP:
        drawMileageShopSendPopup();
        break;
    case MILEAGESHOP_STATE_INFO:
    case MILEAGESHOP_STATE_INFO_POPUP:
        drawMileageShopInfo();
        break;
    case MILEAGESHOP_STATE_INFO_EDIT:
    case MILEAGESHOP_STATE_INFO_EDITPOPUP:
        drawMileageShopSendPopup();
        break;
    }
    
    
    int type = xMileageShop.listCode[xMileageShop.selectSlot]/10000;
    int list = xMileageShop.listCode[xMileageShop.selectSlot]%10000;
    int fontGab = 0;
    
    
    switch(xMileageShop.state)
    {
    case MILEAGESHOP_STATE_SENDPOPUP_BUY:
        drawBgFillRect();
        drawImage(&imgMileageShop[5], px, py, 0, 0, imgMileageShop[5].w, imgMileageShop[5].h, VH);
            
        setFontSize(30);
        gSetColor(255, 255, 255);
        gDrawString(px,py-120, "상품신청", VH);
        
        setFontSize(25);
        gSetColor(102, 102, 102);
    
        sprintf(xMileageShop.strPopupText, "%s을(를)\n신청하시겠습니까?",xMileageData.xSlot[type][list].strName);
        setPopupStringLine(xMileageShop.strPopupText,220);
        fontGab = 32;
        for(int li=0;li<xPopup.totalLine;li++)
            gDrawString(px,py-35-((xPopup.totalLine-1)*fontGab/2)+(fontGab*li), xPopup.strTextLine[li], VH);
            
            
        gSetColor(182, 182, 182);
        setCommaNum(strTempS, xMileageData.xSlot[type][list].price/MILEAGEPRICEUNIT);
        sprintf(strTempB, "(%s마일리지차감)",strTempS);
        gDrawString(px,py+25, strTempB, VH);
        setFontSize(11);
            
        
        subTemp[XPOS] = px-120;
        subTemp[YPOS] = py+95;
        drawImage(&imgMileageShop[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMileageShop[6].w, imgMileageShop[6].h, VH);
        
        setFontSize(30);
        gSetColor(255, 255, 255);
        gDrawString(subTemp[XPOS], subTemp[YPOS], "예", VH);
        setFontSize(11);
        
        xMileageShop.xTouchPopupOk.wPos = 200;
        xMileageShop.xTouchPopupOk.hPos = 60;
        xMileageShop.xTouchPopupOk.xPos = subTemp[XPOS]-xMileageShop.xTouchPopupOk.wPos/2;
        xMileageShop.xTouchPopupOk.yPos = subTemp[YPOS]-xMileageShop.xTouchPopupOk.hPos/2;
        
        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xMileageShop.xTouchPopupOk.xPos, xMileageShop.xTouchPopupOk.yPos, xMileageShop.xTouchPopupOk.wPos, xMileageShop.xTouchPopupOk.hPos);
         setAlpha(ALPHA_MAX);
         */
            
        subTemp[XPOS] = px+120;
        subTemp[YPOS] = py+95;
        drawImage(&imgMileageShop[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMileageShop[6].w, imgMileageShop[6].h, VH);
        
        setFontSize(30);
        gSetColor(255, 255, 255);
        gDrawString(subTemp[XPOS], subTemp[YPOS], "아니요", VH);
        setFontSize(11);
        
        xMileageShop.xTouchPopupClr.wPos = 200;
        xMileageShop.xTouchPopupClr.hPos = 60;
        xMileageShop.xTouchPopupClr.xPos = subTemp[XPOS]-xMileageShop.xTouchPopupClr.wPos/2;
        xMileageShop.xTouchPopupClr.yPos = subTemp[YPOS]-xMileageShop.xTouchPopupClr.hPos/2;
        
            /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xMileageShop.xTouchPopupClr.xPos, xMileageShop.xTouchPopupClr.yPos, xMileageShop.xTouchPopupClr.wPos, xMileageShop.xTouchPopupClr.hPos);
         setAlpha(ALPHA_MAX);
         */
        
        break;
    case MILEAGESHOP_STATE_SENDPOPUP_POPUP:
    case MILEAGESHOP_STATE_POPUP:
    case MILEAGESHOP_STATE_INFO_POPUP:
    case MILEAGESHOP_STATE_INFO_EDITPOPUP:
        drawBgFillRect();
        drawImage(&imgMileageShop[5], px, py, 0, 0, imgMileageShop[5].w, imgMileageShop[5].h, VH);
            
        setFontSize(30);
        gSetColor(255, 255, 255);
        gDrawString(px,py-120, xMileageShop.strPopupTitle, VH);
        
        setFontSize(25);
        gSetColor(102, 102, 102);
            
        setPopupStringLine(xMileageShop.strPopupText,220);
        fontGab = 32;
        for(int li=0;li<xPopup.totalLine;li++)
            gDrawString(px,py-15-((xPopup.totalLine-1)*fontGab/2)+(fontGab*li), xPopup.strTextLine[li], VH);
        setFontSize(11);
            
            
        subTemp[XPOS] = px;
        subTemp[YPOS] = py+95;
        drawImage(&imgMileageShop[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMileageShop[6].w, imgMileageShop[6].h, VH);
            
        setFontSize(30);
        gSetColor(255, 255, 255);
        gDrawString(subTemp[XPOS], subTemp[YPOS], "확인", VH);
        setFontSize(11);
        
        xMileageShop.xTouchPopupOk.wPos = 200;
        xMileageShop.xTouchPopupOk.hPos = 60;
        xMileageShop.xTouchPopupOk.xPos = subTemp[XPOS]-xMileageShop.xTouchPopupOk.wPos/2;
        xMileageShop.xTouchPopupOk.yPos = subTemp[YPOS]-xMileageShop.xTouchPopupOk.hPos/2;
            
            /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xMileageShop.xTouchPopupOk.xPos, xMileageShop.xTouchPopupOk.yPos, xMileageShop.xTouchPopupOk.wPos, xMileageShop.xTouchPopupOk.hPos);
         setAlpha(ALPHA_MAX);
            */
        break;
    }
}


int getProfilePhotoUrlNum(char* strUrl)
{
    for(int k=0;k<xProfilePhotoUrl.totalNum;k++)
    {
        if(strcmp(strUrl, xProfilePhotoUrl.strUrl[k]) == 0)
            return k;
    }
    
    return DONT;
}
void drawProfilePhotoUrl(int x,int y,char* strUrl)
{
    int photoUrlSlot;
    
    
    
    
    if(strlen(strUrl) == 0)
    {
        photoUrlSlot = DONT;
    }
    else
    {
        photoUrlSlot = getProfilePhotoUrlNum(strUrl);
        if(xProfilePhotoUrl.totalNum < PROFILEPHOTOURLMAX-10)
        {
            if(photoUrlSlot == DONT)
            {
                sprintf(xProfilePhotoUrl.strUrl[xProfilePhotoUrl.totalNum], "%s",strUrl);
                
                photoUrlSlot = xProfilePhotoUrl.totalNum;
                ++xProfilePhotoUrl.totalNum;
            }
        }
    }
    
    
    if(photoUrlSlot == DONT)
    {
        //디폴트 이미지
    }
    else
    {
        if(xProfilePhotoUrl.imgPhoto[photoUrlSlot].texture != NULL)
        {
            drawImage(&xProfilePhotoUrl.imgPhoto[photoUrlSlot], x, y, 0, 0, xProfilePhotoUrl.imgPhoto[photoUrlSlot].w, xProfilePhotoUrl.imgPhoto[photoUrlSlot].h, VH);
        }
        else
        {
            //디폴트 이미지
            
            //이미지다운상태확인(등록,다운중,다운완료)
            switch(xProfilePhotoUrl.downLoadImgState[photoUrlSlot])
            {
            case FRIENDDOWNLOADIMG_STATE_DONT:
                if(xNetEventPhotoUrl.totalNum < NETEVENTMAXPHOTOURL-5)
                {
                    //대기상태라면 이미지 다운로드 큐에 등록해주자
                    //////////////////////////////////////////////////////////////////
                    xNetEventPhotoUrl.xSlot[xNetEventPhotoUrl.totalNum].slotNum = photoUrlSlot;
                    addNetEventPhotoUrl(0);
                    //////////////////////////////////////////////////////////////////
                    xProfilePhotoUrl.downLoadImgState[photoUrlSlot] = FRIENDDOWNLOADIMG_STATE_EVENT;
                }
                break;
            case FRIENDDOWNLOADIMG_STATE_EVENT:
            case FRIENDDOWNLOADIMG_STATE_DOWNING:
                //다운중 상태라면 완료 될때까지 기다리자
                break;
            case FRIENDDOWNLOADIMG_STATE_OK:
                //다운완료 상태라면 loadImg
                break;
            }
        }
    }
}


void prcNetEventPhotoUrl()
{
   
    if(xNetEventPhotoUrl.totalNum > 0)
    {
        switch(xProfilePhotoUrl.downLoadImgState[xNetEventPhotoUrl.xSlot[0].slotNum])
        {
            case FRIENDDOWNLOADIMG_STATE_EVENT:
                xProfilePhotoUrl.downLoadImgState[xNetEventPhotoUrl.xSlot[0].slotNum] = FRIENDDOWNLOADIMG_STATE_DOWNING;
                xDownLoader.state = DOWNLOADER_STATE_ING;
                
                dataDownLoad(xProfilePhotoUrl.strUrl[xNetEventPhotoUrl.xSlot[0].slotNum],"kp.ppp",DATADOWNLOAD_TYPE_SDCARD);
                break;
            case FRIENDDOWNLOADIMG_STATE_DOWNING:
                switch(xDownLoader.state)
            {
                case DOWNLOADER_STATE_ING:
                    break;
                case DOWNLOADER_STATE_ERR:
                    //실패처리
                    xNetEventPhotoUrl.xSlot[0].isNetOk = true;
                    break;
                case DOWNLOADER_STATE_SUCCESS:
                    xProfilePhotoUrl.downLoadImgState[xNetEventPhotoUrl.xSlot[0].slotNum] = FRIENDDOWNLOADIMG_STATE_OK;
                    xNetEventPhotoUrl.xSlot[0].isNetOk = true;
                    sprintf(xGame.strNotCacheCnt, "kp%d.ppp",xNetEventPhotoUrl.xSlot[0].slotNum);
                    
                    xGame.isNotCache = true;
                    loadImgCash("kp.ppp", &xProfilePhotoUrl.imgPhoto[xNetEventPhotoUrl.xSlot[0].slotNum]);
                    xGame.isNotCache = false;
                    break;
            }
                break;
        }
        if(xNetEventPhotoUrl.xSlot[0].isNetOk == true)
        {
            delNetEventPhotoUrl(0);
        }
    }
}

void addNetEventPhotoUrl(int type)
{
    xNetEventPhotoUrl.xSlot[xNetEventPhotoUrl.totalNum].type = type;
    xNetEventPhotoUrl.xSlot[xNetEventPhotoUrl.totalNum].isNetOk = false;
    xNetEventPhotoUrl.xSlot[xNetEventPhotoUrl.totalNum].isSend = false;
    xNetEventPhotoUrl.totalNum++;
    
    if(xNetEventPhotoUrl.totalNum > 100)
    {
        printf("멈쳐라");
    }
}

void delNetEventPhotoUrl(int eventNum)
{
    for(int i=eventNum;i<xNetEventPhotoUrl.totalNum-1;i++)
    {
        memcpy(&xNetEventPhotoUrl.xSlot[i], &xNetEventPhotoUrl.xSlot[i+1], sizeof(xNetEventPhotoUrl.xSlot[i]));
    }
    
    if(--xNetEventPhotoUrl.totalNum < 0)
        printf("errrrrr>>xNetEvent.totalNum < 0");
}


void drawMileageShopSendPopup()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    drawImage(&imgMileageShop[2], px, py, 0, 0, imgMileageShop[2].w, imgMileageShop[2].h, VH);
    
    
    subTemp[XPOS] = px+475;
    subTemp[YPOS] = py-275;
    
    xMileageShop.xTouchExit.wPos = 80;
    xMileageShop.xTouchExit.hPos = 80;
    xMileageShop.xTouchExit.xPos = subTemp[XPOS]-xMileageShop.xTouchExit.wPos/2;
    xMileageShop.xTouchExit.yPos = subTemp[YPOS]-xMileageShop.xTouchExit.hPos/2;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xMileageShop.xTouchExit.xPos, xMileageShop.xTouchExit.yPos, xMileageShop.xTouchExit.wPos, xMileageShop.xTouchExit.hPos);
     setAlpha(ALPHA_MAX);
     */
    
    subTemp[XPOS] = px - 324;
    subTemp[YPOS] = py - 22;
    
    
    int type;
    int list;
    
    switch(xMileageShop.state)
    {
    case MILEAGESHOP_STATE_INFO_EDIT:

        sprintf(xDownLoader.strTempUrl, "%s/Product/product_%d.png",xNetData.strCdnUrl,xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].code);

            
        type = xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].code/10000;
        list = xMileageShopInfo.xSlot[xMileageShopInfo.selectSlot].code%10000;
        break;
    default:
            
        sprintf(xDownLoader.strTempUrl, "%s/Product/product_%d.png",xNetData.strCdnUrl,xMileageShop.listCode[xMileageShop.selectSlot]);
            
        type = xMileageShop.listCode[xMileageShop.selectSlot]/10000;
        list = xMileageShop.listCode[xMileageShop.selectSlot]%10000;
        break;
    }
    
    drawProfilePhotoUrl(subTemp[XPOS], subTemp[YPOS]-75,xDownLoader.strTempUrl);
    
    
    gSetColor(102,102,102);
    setFontSize(25);
    setPopupStringLine(xMileageData.xSlot[type][list].strName,220);
    int fontGab = 32;
    for(int li=0;li<xPopup.totalLine;li++)
        gDrawString(subTemp[XPOS],subTemp[YPOS]+80+(fontGab*li), xPopup.strTextLine[li], VH);
    setFontSize(11);
    
    setFontSize(28);
    setCommaNum(strTempS, xMileageData.xSlot[type][list].price/MILEAGEPRICEUNIT);
    
    int ww = getLabelWidth(strTempS,28, false);
    gDrawString(subTemp[XPOS]+10, subTemp[YPOS]+113+((xPopup.totalLine-1)*fontGab), strTempS, VH);
    
    drawImage(&imgMileageIcon[0], subTemp[XPOS]+10-(ww/2)-20, subTemp[YPOS]+113+((xPopup.totalLine-1)*fontGab), 0, 0, imgMileageIcon[0].w, imgMileageIcon[0].h, VH);
    
    setFontSize(11);

    
    
    
    
    
    gSetColor(182,182,182);
    setFontSize(21);
    //이름
    subTemp[XPOS] = px+130;
    subTemp[YPOS] = py-157;
    
    if(strlen(xMileageShop.strName) == 0)
        sprintf(strTempS, "이름을 입력하세요");
    else
        sprintf(strTempS, "%s",xMileageShop.strName);
    
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    xMileageShop.xTouchName.wPos = 420;
    xMileageShop.xTouchName.hPos = 60;
    xMileageShop.xTouchName.xPos = subTemp[XPOS]-xMileageShop.xTouchName.wPos/2;
    xMileageShop.xTouchName.yPos = subTemp[YPOS]-xMileageShop.xTouchName.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xMileageShop.xTouchName.xPos, xMileageShop.xTouchName.yPos, xMileageShop.xTouchName.wPos, xMileageShop.xTouchName.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    
    
    //주소
    subTemp[XPOS] = px+130;
    subTemp[YPOS] = py-70;
    if(strlen(xMileageShop.strAddress) == 0)
        sprintf(strTempS, "주소를 정확하게 입력하세요");
    else
        sprintf(strTempS, "%s",xMileageShop.strAddress);
    
    setPopupStringLine(strTempS,220);
    fontGab = 30;
    for(int li=0;li<xPopup.totalLine;li++)
        gDrawString(subTemp[XPOS],subTemp[YPOS]+(fontGab*li), xPopup.strTextLine[li], VH);
    
    
    xMileageShop.xTouchAddress.wPos = 420;
    xMileageShop.xTouchAddress.hPos = 90;
    xMileageShop.xTouchAddress.xPos = subTemp[XPOS]-xMileageShop.xTouchAddress.wPos/2;
    xMileageShop.xTouchAddress.yPos = subTemp[YPOS]+25-xMileageShop.xTouchAddress.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xMileageShop.xTouchAddress.xPos, xMileageShop.xTouchAddress.yPos, xMileageShop.xTouchAddress.wPos, xMileageShop.xTouchAddress.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    
    
    
    //연락처
    subTemp[XPOS] = px+130;
    subTemp[YPOS] = py+64;
    
    if(strlen(xMileageShop.strPhone) == 0)
        sprintf(strTempS, "연락처를 입력하세요");
    else
        sprintf(strTempS, "%s",xMileageShop.strPhone);
    
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    
    xMileageShop.xTouchPhone.wPos = 420;
    xMileageShop.xTouchPhone.hPos = 60;
    xMileageShop.xTouchPhone.xPos = subTemp[XPOS]-xMileageShop.xTouchPhone.wPos/2;
    xMileageShop.xTouchPhone.yPos = subTemp[YPOS]-xMileageShop.xTouchPhone.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xMileageShop.xTouchPhone.xPos, xMileageShop.xTouchPhone.yPos, xMileageShop.xTouchPhone.wPos, xMileageShop.xTouchPhone.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    setFontSize(11);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py + 250;
    setFontSize(30);
    gSetColor(255, 255, 255);
    
    
    if(xMileageShop.state == MILEAGESHOP_STATE_INFO_EDIT)
        gDrawString(subTemp[XPOS], subTemp[YPOS], "정보수정", VH);
    else
        gDrawString(subTemp[XPOS], subTemp[YPOS], "상품신청", VH);
    setFontSize(11);
    
    xMileageShop.xTouchBuy.wPos = 200;
    xMileageShop.xTouchBuy.hPos = 60;
    xMileageShop.xTouchBuy.xPos = subTemp[XPOS]-xMileageShop.xTouchBuy.wPos/2;
    xMileageShop.xTouchBuy.yPos = subTemp[YPOS]-xMileageShop.xTouchBuy.hPos/2;
    

    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xMileageShop.xTouchBuy.xPos, xMileageShop.xTouchBuy.yPos, xMileageShop.xTouchBuy.wPos, xMileageShop.xTouchBuy.hPos);
     setAlpha(ALPHA_MAX);
     */
}


void drawMileageShopInfo()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    drawImage(&imgMileageShop[3], px, py, 0, 0, imgMileageShop[3].w, imgMileageShop[3].h, VH);
    
    
    
    subTemp[XPOS] = px+476;
    subTemp[YPOS] = py-286;
    
    xMileageShopInfo.xTouchExit.wPos = 70;
    xMileageShopInfo.xTouchExit.hPos = 70;
    xMileageShopInfo.xTouchExit.xPos = subTemp[XPOS]-xMileageShopInfo.xTouchExit.wPos/2;
    xMileageShopInfo.xTouchExit.yPos = subTemp[YPOS]-xMileageShopInfo.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xMileageShopInfo.xTouchExit.xPos, xMileageShopInfo.xTouchExit.yPos, xMileageShopInfo.xTouchExit.wPos, xMileageShopInfo.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    
    
    
    //세부메뉴
    xMileageShopInfo.xDragScroll.totalNum = xMileageShopInfo.totalNum;
    xMileageShopInfo.xDragScroll.posGab = 60;
    
    
    xMileageShopInfo.xDragScroll.endPos = -(((xMileageShopInfo.xDragScroll.totalNum-8)*xMileageShopInfo.xDragScroll.posGab));
    
    if(xMileageShopInfo.xDragScroll.totalNum < 8)
        xMileageShopInfo.xDragScroll.endPos = 0;
    
    
    int iMax = xMileageShopInfo.totalNum;
    dragScrollPrc(&xMileageShopInfo.xDragScroll,1,FALSE);
    
				
    gSetClip(true,0, py-192, lcdW, 500);
    for(int i=0;i<iMax;i++)
    {
        int pos = xMileageShopInfo.xDragScroll.pos+(xMileageShopInfo.xDragScroll.posGab*i);
        subTemp[XPOS] = px;
        subTemp[YPOS] = py-160+pos;
        
        if(subTemp[YPOS] < -xMileageShopInfo.xDragScroll.posGab || subTemp[YPOS] > lcdH+xMileageShopInfo.xDragScroll.posGab)
            continue;
        
        drawImage(&imgMileageShop[4], subTemp[XPOS], subTemp[YPOS]+28, 0, 0, imgMileageShop[4].w, imgMileageShop[4].h, VH);
        
        int type = xMileageShopInfo.xSlot[i].code/10000;
        int list = xMileageShopInfo.xSlot[i].code%10000;
    
        gSetColor(57, 60, 75);
        setFontSize(19);
        gDrawString(subTemp[XPOS]-375, subTemp[YPOS], xMileageShopInfo.xSlot[i].strDate, VH);
        gDrawString(subTemp[XPOS]-58, subTemp[YPOS], xMileageData.xSlot[type][list].strName, VH);
        setCommaNum(strTempS, xMileageData.xSlot[type][list].price/MILEAGEPRICEUNIT);
        
        
        int ww = getLabelWidth(strTempS,19, false);
        gDrawString(subTemp[XPOS]+272, subTemp[YPOS], strTempS, VH);
        drawImage(&imgMileageIcon[0], subTemp[XPOS]+272-(ww/2)-20, subTemp[YPOS], 0, 0, imgMileageIcon[0].w, imgMileageIcon[0].h, VH);
        
        
        switch(xMileageShopInfo.xSlot[i].state)
        {
        case 0:sprintf(strTempS, "신청완료");break;
        case 1:sprintf(strTempS, "접수완료");break;
        case 2:sprintf(strTempS, "배송준비");break;
        case 3:sprintf(strTempS, "배송중");break;
        case 4:sprintf(strTempS, "배송완료");break;
        }
        gDrawString(subTemp[XPOS]+417, subTemp[YPOS], strTempS, VH);
        setFontSize(11);
        
        if(xMileageShopInfo.xSlot[i].state == 0)
        {
            drawImage(&imgMileageShop[8], subTemp[XPOS]+350, subTemp[YPOS], 0, 0, imgMileageShop[8].w, imgMileageShop[8].h, VH);
        }
    }
    gSetClip(false,0, 0, lcdW, lcdH);
    
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xMileageShopInfo.xDragScroll.selectNum = (-xMileageShopInfo.xDragScroll.pos/xMileageShopInfo.xDragScroll.posGab);
    
    if(xMileageShopInfo.xDragScroll.selectNum < 0)
        xMileageShopInfo.xDragScroll.selectNum = 0;
    
    for(int i=0;i<10;i++)
    {
        subTemp[XPOS] = px;
        subTemp[YPOS] = py-160+(i*xMileageShopInfo.xDragScroll.posGab);
        
        xMileageShopInfo.xTouchEdit[i].wPos = 80;
        xMileageShopInfo.xTouchEdit[i].hPos = 40;
        xMileageShopInfo.xTouchEdit[i].xPos = subTemp[XPOS]+350 - xMileageShopInfo.xTouchEdit[i].wPos/2;
        xMileageShopInfo.xTouchEdit[i].yPos = subTemp[YPOS] +((xMileageShopInfo.xDragScroll.posGab <= xMileageShopInfo.xDragScroll.pos ? xMileageShopInfo.xDragScroll.pos:(xMileageShopInfo.xDragScroll.pos%xMileageShopInfo.xDragScroll.posGab)))- xMileageShopInfo.xTouchEdit[i].hPos/2;
        
        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xMileageShopInfo.xTouchEdit[i].xPos, xMileageShopInfo.xTouchEdit[i].yPos, xMileageShopInfo.xTouchEdit[i].wPos, xMileageShopInfo.xTouchEdit[i].hPos);
         setAlpha(ALPHA_MAX);
        */
    }
}


void setAccessBonusShow()
{
    xWorldMap.state = WORLDMAP_STATE_ACCESSBONUSSHOW;
    xAccessBonus.state = ACCESSBONUS_STATE_MAIN;
    accessBonusFreeLoad(TRUE);
}




void drawPrepayUi(int x,int y)
{
    int px = x;
    int py = y;

    if(xPrePay.remainDay == 0)
    {
        drawImage(&imgPrePayUi[0], px, py, 0, 0, imgPrePayUi[0].w, imgPrePayUi[0].h, VH);
    }
    else
    {
        drawImage(&imgPrePayUi[1], px, py, 0, 0, imgPrePayUi[1].w, imgPrePayUi[1].h, VH);
        sprintf(strTempS, "%d",xPrePay.remainDay-1);
        gSetColor(255, 255, 255);
        setFontSize(19);
        gDrawString(px-8, py+30, strTempS, VR);
        setFontSize(11);
    }
    
    xPrePay.xTouchUi.wPos = 70;
    xPrePay.xTouchUi.hPos = 70;
    xPrePay.xTouchUi.xPos = px-xPrePay.xTouchUi.wPos/2;
    xPrePay.xTouchUi.yPos = py-xPrePay.xTouchUi.hPos/2;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xPrePay.xTouchUi.xPos, xPrePay.xTouchUi.yPos, xPrePay.xTouchUi.wPos, xPrePay.xTouchUi.hPos);
     setAlpha(ALPHA_MAX);
     */
}


void prepayFreeLoad(M_Boolean isLoad)
{
    if(isLoad == TRUE)
    {
        loadImgDocuments("prepay0.png", &imgPrePay[0]);
        loadImgDocuments("prepay1.png", &imgPrePay[1]);
        loadImgDocuments("prepay2.png", &imgPrePay[2]);
    }
    else
    {
        freeImg(&imgPrePay[0]);
        freeImg(&imgPrePay[1]);
        freeImg(&imgPrePay[2]);
    }
}

void setPrepayDay()
{
    xSave.giftLastKey = 999;
    gameSave(SAVE_SLOT_GAME);
    
    prepayFreeLoad(TRUE);
    xWorldMap.state = WORLDMAP_STATE_PREPAYDAY;
    xPrePay.isRecv = false;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PREPAYDAY, true);
    
}

void drawPrepay()
{
    int px = cx;
    int py = cy;
    drawImage(&imgPrePay[0], px, py, 0, 0, imgPrePay[0].w, imgPrePay[0].h, VH);
    
    
    subTemp[XPOS] = px+380;
    subTemp[YPOS] = py-220;
    xPrePay.xTouchExit.wPos = 80;
    xPrePay.xTouchExit.hPos = 80;
    xPrePay.xTouchExit.xPos = subTemp[XPOS]-xPrePay.xTouchExit.wPos/2;
    xPrePay.xTouchExit.yPos = subTemp[YPOS]-xPrePay.xTouchExit.hPos/2;
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+250;
    
    if(xPrePay.remainDay == 0)
        drawImage(&imgPrePay[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgPrePay[2].w, imgPrePay[2].h/2, VH);
    else
        drawImage(&imgPrePay[2], subTemp[XPOS], subTemp[YPOS], 0, imgPrePay[2].h/2, imgPrePay[2].w, imgPrePay[2].h/2, VH);
    
    
    xPrePay.xTouchOk.wPos = imgPrePay[2].w;
    xPrePay.xTouchOk.hPos = imgPrePay[2].h/2;
    xPrePay.xTouchOk.xPos = subTemp[XPOS]-xPrePay.xTouchOk.wPos/2;
    xPrePay.xTouchOk.yPos = subTemp[YPOS]-xPrePay.xTouchOk.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xPrePay.xTouchOk.xPos, xPrePay.xTouchOk.yPos, xPrePay.xTouchOk.wPos, xPrePay.xTouchOk.hPos);
    fillRect(xPrePay.xTouchExit.xPos, xPrePay.xTouchExit.yPos, xPrePay.xTouchExit.wPos, xPrePay.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
}

void drawPrepayDay()
{
    int px = cx;
    int py = cy;
    
    drawImage(&imgPrePay[1], px, py, 0, 0, imgPrePay[1].w, imgPrePay[1].h, VH);
    
    gSetColor(255, 255, 255);
    setFontSize(85);
    sprintf(strTempS, "%d",xPrePay.pointDay);
    gDrawString(px+135, py-20, strTempS, VH);
    setFontSize(11);
    
    
    
    
    
    gSetColor(141, 110, 82);
    setFontSize(25);
    sprintf(strTempS, "%d",xPrePay.remainDay-1);
    gDrawString(px+110, py+86, strTempS, VR);
    setFontSize(11);
    
    subTemp[XPOS] = px+40;
    subTemp[YPOS] = py+180;
    xPrePay.xTouchOk.wPos = 200;
    xPrePay.xTouchOk.hPos = 80;
    xPrePay.xTouchOk.xPos = subTemp[XPOS]-xPrePay.xTouchOk.wPos/2;
    xPrePay.xTouchOk.yPos = subTemp[YPOS]-xPrePay.xTouchOk.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xPrePay.xTouchOk.xPos, xPrePay.xTouchOk.yPos, xPrePay.xTouchOk.wPos, xPrePay.xTouchOk.hPos);
    setAlpha(ALPHA_MAX);
    */
}

void setPackagePopup(int type)
{
    xPackagePopup.isPlay = true;
    xPackagePopup.selectType = type;
    
    
    sprintf(strTempS, "package%d.png",xPackagePopup.selectType);
    
    loadImgDocuments(strTempS, &imgPackagePopup[xPackagePopup.selectType]);
    loadImg("packagepopup0.png", &imgPackage[0]);
    
}

void drawPackagePopup()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    
    drawImage(&imgPackagePopup[xPackagePopup.selectType], px, py, 0, 0, imgPackagePopup[xPackagePopup.selectType].w, imgPackagePopup[xPackagePopup.selectType].h, VH);
    
    subTemp[XPOS] = px+400;
    subTemp[YPOS] = py-240;
    xPackagePopup.xTouchExit.wPos = 80;
    xPackagePopup.xTouchExit.hPos = 80;
    xPackagePopup.xTouchExit.xPos = subTemp[XPOS]-xPackagePopup.xTouchExit.wPos/2;
    xPackagePopup.xTouchExit.yPos = subTemp[YPOS]-xPackagePopup.xTouchExit.hPos/2;
    
    subTemp[XPOS] = px+80;
    subTemp[YPOS] = py+250;
    
    if(isSellPackage(xPackagePopup.selectType) == true)
        drawImage(&imgPackage[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgPackage[0].w, imgPackage[0].h/2, VH);
    else
        drawImage(&imgPackage[0], subTemp[XPOS], subTemp[YPOS], 0, imgPackage[0].h/2, imgPackage[0].w, imgPackage[0].h/2, VH);
    
    xPackagePopup.xTouchOk.wPos = imgPackage[0].w;
    xPackagePopup.xTouchOk.hPos = imgPackage[0].h/2;
    xPackagePopup.xTouchOk.xPos = subTemp[XPOS]-xPackagePopup.xTouchOk.wPos/2;
    xPackagePopup.xTouchOk.yPos = subTemp[YPOS]-xPackagePopup.xTouchOk.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xPackagePopup.xTouchOk.xPos, xPackagePopup.xTouchOk.yPos, xPackagePopup.xTouchOk.wPos, xPackagePopup.xTouchOk.hPos);
    fillRect(xPackagePopup.xTouchExit.xPos, xPackagePopup.xTouchExit.yPos, xPackagePopup.xTouchExit.wPos, xPackagePopup.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    subTemp[XPOS] = px-240;
    subTemp[YPOS] = py+230;
    gSetColor(160, 123, 85);
    setFontSize(19);
    sprintf(strTempS, "구매가능횟수:%d/%d",(xPackageData[xPackagePopup.selectType].max - xPackageData[xPackagePopup.selectType].cnt),xPackageData[xPackagePopup.selectType].max);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
    setFontSize(11);
}



void keyPackagePopup(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xPackagePopup.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            xPackagePopup.isPlay = false;
            freeImg(&imgPackagePopup[xPackagePopup.selectType]);
            freeImg(&imgPackage[0]);
        }
        else if(isSellPackage(xPackagePopup.selectType) == true && touchCheck(&xPackagePopup.xTouchOk) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            setPopup(POPUP_SHOP_PACKAGEBUY, PLAY_PLAY, PLAY_PLAY, 0, DONT);
        }
    }
}

bool isSellPackage(int type)
{
    
    if(xPackageData[type].lv != 0)  //제한없음
    {
        if(xSaveTemp.lv.oriData > xPackageData[type].lv)
            return false;
    }
    
    if(xPackageData[type].cnt >= xPackageData[type].max)
        return false;
    
    return true;
}

void drawPackageUi(int x,int y,int type)
{
    int px = x;
    int py = y;
    
    if(imgPackageUiIcon[type].texture == NULL)
    {
        sprintf(strTempS, "packageuiicon%d.png",type);
        loadImgDocuments(strTempS, &imgPackageUiIcon[type]);
    }
    drawImage(&imgPackageUiIcon[type], px,py, 0, 0, imgPackageUiIcon[type].w, imgPackageUiIcon[type].h, VH);
    
    xPackagePopup.xTouchUi[type].wPos = 70;
    xPackagePopup.xTouchUi[type].hPos = 70;
    xPackagePopup.xTouchUi[type].xPos = px-xPackagePopup.xTouchUi[type].wPos/2;
    xPackagePopup.xTouchUi[type].yPos = py-xPackagePopup.xTouchUi[type].hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xPackagePopup.xTouchUi[type].xPos, xPackagePopup.xTouchUi[type].yPos, xPackagePopup.xTouchUi[type].wPos, xPackagePopup.xTouchUi[type].hPos);
    gSetColor(255, 255, 255);
    gDrawString(px, py, xPackageData[type].strName, VH);
    setAlpha(ALPHA_MAX);
     */
}





void drawEventQuestUi(int x,int y)
{
    xEventQuestUi.totalNum = xEventQuest.totalTab;
    
    
    if(xEventQuestUi.totalNum == 0)
        return;
    

    for(int k=0;k<xEventQuest.totalTab;k++)
    {
        xEventQuestUi.listCode[k] = xEventQuest.listTab[k];
    }
    
    
    int uiXX = 0;
    
    switch(xEventQuestUi.state)
    {
    case EVENTQUESTUI_STATE_WAIT:
        xEventQuestUi.flowTime += xGame.prcSec;
        if(xEventQuestUi.flowTime > 3)
        {
            xEventQuestUi.state = EVENTQUESTUI_STATE_NEXT;
            xEventQuestUi.anyCnt = 0;
        }
        break;
    case EVENTQUESTUI_STATE_NEXT:
        switch(++xEventQuestUi.anyCnt)
        {
        case 1:uiXX = 0;break;
        case 2:uiXX = 0;break;
        case 3:uiXX = 0;break;
        case 4:uiXX = 0;break;
        case 5:uiXX = 0;break;
        case 6:uiXX = 0;break;
        case 7:uiXX = -1;break;
        case 8:uiXX = -1;break;
        case 9:uiXX = -1;break;
        case 10:uiXX = -2;break;
        case 11:uiXX = -2;break;
        case 12:uiXX = -3;break;
        case 13:uiXX = -4;break;
        case 14:uiXX = -6;break;
        case 15:uiXX = -8;break;
        case 16:uiXX = -10;break;
        case 17:uiXX = -20;break;
        case 18:uiXX = -40;break;
        case 19:uiXX = -80;break;
        case 20:uiXX = -120;break;
        case 21:uiXX = -180;break;
        case 22:uiXX = -188;break;
        case 23:uiXX = -192;break;
        case 24:uiXX = -195;break;
        case 25:uiXX = -197;break;
        case 26:uiXX = -198;break;
        case 27:uiXX = -198;break;
        case 28:uiXX = -199;break;
        case 29:uiXX = -199;break;
        case 30:uiXX = -199;break;
        case 31:uiXX = -200;break;
        case 32:
            xEventQuestUi.state = EVENTQUESTUI_STATE_WAIT;
            xEventQuestUi.flowTime = 0;
            if(++xEventQuestUi.selectSlot >= xEventQuestUi.totalNum)
                xEventQuestUi.selectSlot = 0;
            break;
        }
        break;
    }
    
    int nowCode = xEventQuestUi.listCode[xEventQuestUi.selectSlot];
    int nextCode = 0;
    
    if(xEventQuestUi.selectSlot+1 >= xEventQuestUi.totalNum)
        nextCode = xEventQuestUi.listCode[0];
    else
        nextCode = xEventQuestUi.listCode[xEventQuestUi.selectSlot+1];
    
    
    drawImage(&imgEventQuestUi[1], x, y, 0, 0, imgEventQuestUi[1].w, imgEventQuestUi[1].h, VH);
    gSetClip(true, x-100, y-100, 200, 200);
    drawEventQuestIcon(x+uiXX, y, nowCode);
    drawEventQuestIcon(x+200+uiXX, y, nextCode);
    gSetClip(false, x-100, y-100, 200, 200);
    drawImage(&imgEventQuestUi[0], x+3, y+1, 0, 0, imgEventQuestUi[0].w, imgEventQuestUi[0].h, VH);
    

    xEventQuestUi.xTouchMenu.wPos = 180;
    xEventQuestUi.xTouchMenu.hPos = 80;
    xEventQuestUi.xTouchMenu.xPos = x-xEventQuestUi.xTouchMenu.wPos/2;
    xEventQuestUi.xTouchMenu.yPos = y-xEventQuestUi.xTouchMenu.hPos/2;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xEventQuestUi.xTouchMenu.xPos, xEventQuestUi.xTouchMenu.yPos, xEventQuestUi.xTouchMenu.wPos, xEventQuestUi.xTouchMenu.hPos);
     setAlpha(ALPHA_MAX);
     */
    
    
    
    
    for(int k=0;k<EVENTQUESTMAX;k++)
        xEventQuest.xMain[k].giftCnt = 0;
    
    int totalGiftCnt = 0;
    for(int k=0;k<xEventQuest.totalTab;k++)
    {
        int questType = xEventQuest.listTab[k];
        
        if(xEventQuest.xMain[questType].state == EVENTQUESTMAIN_STATE_PLAY)
        {
            
            int clearCnt = 0;
            for(int z=0;z<xEventQuest.totalNum[questType];z++)
            {
                if(xEventQuest.xData[questType][z].state == EVENTQUESTDETAIL_STATE_END)
                    clearCnt++;
            }
            
            if(clearCnt >= xEventQuest.totalNum[questType])
            {
                xEventQuest.xMain[questType].giftCnt++;
                totalGiftCnt++;
            }
                
            
            for(int listNum=0;listNum<xEventQuest.totalNum[questType];listNum++)
            {
                
                if(xEventQuest.xData[questType][listNum].state == EVENTQUESTDETAIL_STATE_PLAY
                   && xEventQuest.xData[questType][listNum].isCheckClean == true)
                {
                    xEventQuest.xMain[questType].giftCnt++;
                    totalGiftCnt++;
                }
                
            }
        }
    }
    
    
    
    if(xEventQuest.isNetLoad == false && totalGiftCnt > 0)
    {
        drawPacker(imgOrderNumBox, x+90, y-40, 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
        gSetColor(255, 255, 255);
        sprintf(strTempS, "%d",totalGiftCnt);
        gDrawString(x+90, y-2-40, strTempS, VH);
    }
    
    
    
    
    
    
    
}



void eventQuestFreeLoad(M_Boolean isLoad)
{
    if(isLoad == TRUE)
    {
        loadImg("eventquest0.png", &imgEventQuest[0]);
        loadImg("eventquest1.png", &imgEventQuest[1]);
        loadImg("eventquest2.png", &imgEventQuest[2]);
        loadImg("eventquest3.png", &imgEventQuest[3]);
        loadImg("eventquest4.png", &imgEventQuest[4]);
        loadImg("eventquest5.png", &imgEventQuest[5]);
        loadImg("eventquest6.png", &imgEventQuest[6]);
        loadImg("eventquest7.png", &imgEventQuest[7]);
        loadImg("eventquest8.png", &imgEventQuest[8]);
        loadImg("eventquest9.png", &imgEventQuest[9]);
        loadImg("eventquest10.png", &imgEventQuest[10]);
        
        
        
        loadImg("shopmoneyicon11.png",&imgGiftGoldIcon);
        loadImg("shopmoneyicon1.png",&imgGiftLookIcon);
        loadImg("shoppremiumicon5.png",&imgGiftCandyIcon);
        
        loadImg("shoppremiumicon0.png", &imgGiftModelCastingCAIcon);
        loadImg("shoppremiumicon1.png", &imgGiftModelCastingBSIcon);
        loadImg("shoppremiumicon2.png", &imgGiftTrendHangerIcon);
        loadImg("shoppremiumicon3.png", &imgGiftTrendAccessoryIcon);
        
        
        
        
        
    }
    else
    {
        freeImg(&imgEventQuest[0]);
        freeImg(&imgEventQuest[1]);
        freeImg(&imgEventQuest[2]);
        freeImg(&imgEventQuest[3]);
        freeImg(&imgEventQuest[4]);
        freeImg(&imgEventQuest[5]);
        freeImg(&imgEventQuest[6]);
        freeImg(&imgEventQuest[7]);
        freeImg(&imgEventQuest[8]);
        freeImg(&imgEventQuest[9]);
        freeImg(&imgEventQuest[10]);
        
        
        freeImg(&imgGiftGoldIcon);
        freeImg(&imgGiftLookIcon);
        freeImg(&imgGiftCandyIcon);
        
        freeImg(&imgGiftModelCastingCAIcon);
        freeImg(&imgGiftModelCastingBSIcon);
        freeImg(&imgGiftTrendHangerIcon);
        freeImg(&imgGiftTrendAccessoryIcon);
        
    }
}




void drawEventQuest()
{
    int px = cx;
    int py = cy;
    
    
    
    drawEventQuestBg(px,0,xEventQuest.listTab[xEventQuest.selectTab]);
    
    
    drawImage(&imgEventQuest[0], px, py, 0, 0, imgEventQuest[0].w, imgEventQuest[0].h, VH);
    
    
    xEventQuest.xTouchExit.wPos = 100;
    xEventQuest.xTouchExit.hPos = 100;
    xEventQuest.xTouchExit.xPos = px+515-xEventQuest.xTouchExit.wPos/2;
    xEventQuest.xTouchExit.yPos = py-270-xEventQuest.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xEventQuest.xTouchExit.xPos, xEventQuest.xTouchExit.yPos, xEventQuest.xTouchExit.wPos, xEventQuest.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    
    
    //탭리스트
    xEventQuest.xDragScrollTab.totalNum = xEventQuest.totalTab;
    xEventQuest.xDragScrollTab.posGab = 94;
    
    
    xEventQuest.xDragScrollTab.endPos = -(((xEventQuest.xDragScrollTab.totalNum-5)*xEventQuest.xDragScrollTab.posGab));
    
    if(xEventQuest.xDragScrollTab.totalNum < 5)
        xEventQuest.xDragScrollTab.endPos = 0;
    
    
    int iMax = xEventQuest.totalTab;
    dragScrollPrc(&xEventQuest.xDragScrollTab,1,FALSE);
    
				
    gSetClip(true,0, py-175, 300, 480);
    for(int i=0;i<iMax;i++)
    {
        int pos = xEventQuest.xDragScrollTab.pos+(xEventQuest.xDragScrollTab.posGab*i);
        subTemp[XPOS] = px-457;
        subTemp[YPOS] = py-130+pos;
        
        if(subTemp[YPOS] < -xEventQuest.xDragScrollTab.posGab || subTemp[YPOS] > lcdH+xEventQuest.xDragScrollTab.posGab)
            continue;
        
        int questType = xEventQuest.listTab[i];
        
        if(xEventQuest.selectTab == i)
            drawImage(&imgEventQuest[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgEventQuest[5].w, imgEventQuest[5].h, VH);
        drawEventQuestIcon(subTemp[XPOS], subTemp[YPOS], questType);
        
        
        
        
        int clearCnt22 = 0;
        for(int k=0;k<xEventQuest.totalNum[questType];k++)
        {
            if(xEventQuest.xData[questType][k].state == EVENTQUESTDETAIL_STATE_END)
                clearCnt22++;
        }                        
        
        subTemp[WPOS] = clearCnt22*imgEventQuest[8].w/xEventQuest.totalNum[questType];
        

        
        
        if(subTemp[WPOS] > imgEventQuest[8].w)
            subTemp[WPOS] = imgEventQuest[8].w;
        
        
        
        //달성도
        int ddx = subTemp[XPOS]-3;
        int ddy = subTemp[YPOS]-24;
        
        drawImage(&imgEventQuest[8], ddx, ddy, 0, 0, imgEventQuest[8].w, imgEventQuest[8].h/2, VL);
        drawImage(&imgEventQuest[8], ddx, ddy, 0, imgEventQuest[8].h/2, subTemp[WPOS], imgEventQuest[8].h/2, VL);
        
        drawImage(&imgEventQuest[9], ddx+42, ddy-10, 0, 0, imgEventQuest[9].w, imgEventQuest[9].h, VH);
        
        
        
        
        
        
        
        if(xEventQuest.xMain[questType].giftCnt>0)
        {
            drawPacker(imgOrderNumBox, subTemp[XPOS]+90, subTemp[YPOS]-30, 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
            gSetColor(255, 255, 255);
            sprintf(strTempS, "%d",xEventQuest.xMain[questType].giftCnt);
            gDrawString(subTemp[XPOS]+90, subTemp[YPOS]-2-30, strTempS, VH);
        }

        
        
        
    }
    gSetClip(false,0, 0, lcdW, lcdH);
    
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xEventQuest.xDragScrollTab.selectNum = (-xEventQuest.xDragScrollTab.pos/xEventQuest.xDragScrollTab.posGab);
    
    if(xEventQuest.xDragScrollTab.selectNum < 0)
        xEventQuest.xDragScrollTab.selectNum = 0;
    
    
    for(int i=0;i<6;i++)
    {
        subTemp[XPOS] = px-457;
        subTemp[YPOS] = py-130+(i*xEventQuest.xDragScrollTab.posGab);
        
        xEventQuest.xTouchTab[i].wPos = 180;
        xEventQuest.xTouchTab[i].hPos = 80;
        xEventQuest.xTouchTab[i].xPos = subTemp[XPOS] - xEventQuest.xTouchTab[i].wPos/2;
        xEventQuest.xTouchTab[i].yPos = subTemp[YPOS] +((xEventQuest.xDragScrollTab.posGab <= xEventQuest.xDragScrollTab.pos ? xEventQuest.xDragScrollTab.pos:(xEventQuest.xDragScrollTab.pos%xEventQuest.xDragScrollTab.posGab)))- xEventQuest.xTouchTab[i].hPos/2;
        

        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xEventQuest.xTouchTab[i].xPos, xEventQuest.xTouchTab[i].yPos, xEventQuest.xTouchTab[i].wPos, xEventQuest.xTouchTab[i].hPos);
         setAlpha(ALPHA_MAX);
         */
    }
    
    
    
    xEventQuest.xTouchTabBg.wPos = 230;
    xEventQuest.xTouchTabBg.hPos = lcdH;
    xEventQuest.xTouchTabBg.xPos = 0;
    xEventQuest.xTouchTabBg.yPos = 0;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xEventQuest.xTouchTabBg.xPos, xEventQuest.xTouchTabBg.yPos, xEventQuest.xTouchTabBg.wPos, xEventQuest.xTouchTabBg.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    
    
    
    int questType = xEventQuest.listTab[xEventQuest.selectTab];
    
    
    
    
    //최종완료보상
    subTemp[XPOS] = px+94;
    subTemp[YPOS] = py-107;
    int dx = subTemp[XPOS]-310;
    int dy = subTemp[YPOS]-9;
    
    
    xGame.isReSizeDraw = true;
    xGame.reSize = 70;
    
    
    

    
    
    switch(xEventQuest.xMain[questType].giftType)
    {
    case 0:	//의상 아이템
        //획득한 의상
        setMapData(xEventQuest.xMain[questType].giftValue);
        drawFittingF(dx, dy, xEventQuest.xMain[questType].giftValue, 80);
        sprintf(strTempS, "%s",xFashionData[xMap.type][xMap.listNum].strName);
        break;
    case 1:	//인테리어
        setMapData(xEventQuest.xMain[questType].giftValue);
        
        setDrawObjCenter(xMap.type,xMap.listNum);
        if(xDrawObjCenter.reSize != 100)
        {
            xGame.fgameScaleCx =dx;
            xGame.fgameScaleCy =lcdH-(dy);
            xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
        }
        drawObj(dx+xDrawObjCenter.w, dy+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
        xGame.fgameScale = 1.0f;
        xGame.fgameScaleCx =cx;
        xGame.fgameScaleCy =cy;
        
        sprintf(strTempS, "%s",xObj.xObjData[xMap.type][xMap.listNum].strName);
        break;
    case 2:	//골드
        setCommaNum(strTempB, xEventQuest.xMain[questType].giftValue);
        sprintf(strTempS, "%s골드",strTempB);
        drawImage(&imgGiftGoldIcon, dx, dy, 0, 0, imgGiftGoldIcon.w, imgGiftGoldIcon.h, VH);
        break;
    case 3:	//룩
        sprintf(strTempS, "%d룩",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgGiftLookIcon, dx, dy, 0, 0, imgGiftLookIcon.w, imgGiftLookIcon.h, VH);
        break;
    case 4:	//캔디(추가)
        sprintf(strTempS, "%d캔디",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgGiftCandyIcon, dx, dy, 0, 0, imgGiftCandyIcon.w, imgGiftCandyIcon.h, VH);
        break;
    case 5:	//일반 모델 캐스팅권(추가)
        sprintf(strTempS, "일반 캐스팅(%d개)",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgGiftModelCastingCAIcon, dx, dy, 0, 0, imgGiftModelCastingCAIcon.w, imgGiftModelCastingCAIcon.h, VH);
        break;
    case 6:	//고급 모델 캐스팅권(추가)
        sprintf(strTempS, "고급 캐스팅(%d개)",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgGiftModelCastingBSIcon, dx, dy, 0, 0, imgGiftModelCastingBSIcon.w, imgGiftModelCastingBSIcon.h, VH);
        break;
    case 7:	//유행 티켓(의상)
        sprintf(strTempS, "의상 유행 티켓");
        drawImage(&imgGiftTrendHangerIcon, dx, dy, 0, 0, imgGiftTrendHangerIcon.w, imgGiftTrendHangerIcon.h, VH);
        break;
    case 8:	//유행 티켓(잡화)
        sprintf(strTempS, "잡화 유행 티켓");
        drawImage(&imgGiftTrendAccessoryIcon, dx, dy, 0, 0, imgGiftTrendAccessoryIcon.w, imgGiftTrendAccessoryIcon.h, VH);
        break;
    case 9:	//A급 모델 캐스팅권
        sprintf(strTempS, "A급 모델 캐스팅(%d개)",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgCastingAIcon, dx, dy, 0, 0, imgCastingAIcon.w, imgCastingAIcon.h, VH);
        break;
    case 10://S급 모델 캐스팅권
        sprintf(strTempS, "S급 모델 캐스팅(%d개)",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgCastingSIcon, dx, dy, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
        break;
    case 11://A~S급 모델 캐스팅권
        sprintf(strTempS, "A~S급 모델 캐스팅(%d개)",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgCastingASIcon, dx, dy, 0, 0, imgCastingASIcon.w, imgCastingASIcon.h, VH);
        break;
    case 12://경험치
        sprintf(strTempS, "%d경험치",xEventQuest.xMain[questType].giftValue);
        drawImage(&imgGiftExpIcon, dx, dy, 0, 0, imgGiftExpIcon.w, imgGiftExpIcon.h, VH);
        break;
    case 13://지정 모델 확정권
        {
        int modelResize = 70;
        int modelCode = xEventQuest.xMain[questType].giftValue;
        int modelSex = xModelData[modelCode].sex;
        
        drawHairF(dx,dy, 1000+modelCode,0,modelResize);
        drawFaceF(dx,dy, 1000+modelCode, FACE_TYPE_NORMAL, modelResize);
        drawHairF(dx,dy, 1000+modelCode,1,modelResize);
        
        sprintf(strTempS, "%s(%s급모델)",xModelData[modelCode].strName,getGradeName(xModelData[modelCode].grade));
        }
        break;
    }
    
    xGame.isReSizeDraw = false;
  
    
    
    drawImage(&imgEventQuest[2], dx, dy+35, 0, 0, imgEventQuest[2].w, imgEventQuest[2].h, VH);
    gSetColor(255, 255, 255);
    setFontSize(19);
    gDrawString(dx, dy+35, strTempS, VH);
    setFontSize(11);
    
    int clearCnt = 0;
    for(int k=0;k<xEventQuest.totalNum[questType];k++)
    {
        if(xEventQuest.xData[questType][k].state == EVENTQUESTDETAIL_STATE_END)
            clearCnt++;
    }
    
    
    
    
    
    gSetColor(87, 50, 6);
    setFontSize(26);
    sprintf(strTempS, "모든 퀘스트 완료(%d/%d)",clearCnt,xEventQuest.totalNum[questType]);
    gDrawString(subTemp[XPOS]-180, subTemp[YPOS], strTempS, VL);
    setFontSize(11);
    
    //지급완료
    if(xEventQuest.xMain[questType].state == EVENTQUESTMAIN_STATE_END)
    {
        drawImage(&imgEventQuest[4], subTemp[XPOS]+305, subTemp[YPOS], 0, 0, imgEventQuest[4].w, imgEventQuest[4].h/3, VH);
        
        drawImage(&imgEventQuest[6], dx, dy+7, 0, 0, imgEventQuest[6].w, imgEventQuest[6].h, VH);
        
    }
    //클리어
    else if(xEventQuest.xMain[questType].state == EVENTQUESTMAIN_STATE_PLAY && clearCnt >= xEventQuest.totalNum[questType])
        drawImage(&imgEventQuest[4], subTemp[XPOS]+305, subTemp[YPOS], 0, imgEventQuest[4].h/3*2, imgEventQuest[4].w, imgEventQuest[4].h/3, VH);
    //미클
    else if(xEventQuest.xMain[questType].state == EVENTQUESTMAIN_STATE_PLAY)
        drawImage(&imgEventQuest[4], subTemp[XPOS]+305, subTemp[YPOS], 0, imgEventQuest[4].h/3, imgEventQuest[4].w, imgEventQuest[4].h/3, VH);
    
    
    xEventQuest.xTouchMainGift.wPos = imgEventQuest[4].w;
    xEventQuest.xTouchMainGift.hPos = imgEventQuest[4].h/3;
    xEventQuest.xTouchMainGift.xPos = subTemp[XPOS]+305-xEventQuest.xTouchMainGift.wPos/2;
    xEventQuest.xTouchMainGift.yPos = subTemp[YPOS]-xEventQuest.xTouchMainGift.hPos/2;
    
    
    //리스트
    subTemp[XPOS] = px;
    subTemp[YPOS] = py;
    //탭리스트
    xEventQuest.xDragScroll[questType].totalNum = xEventQuest.totalList;
    xEventQuest.xDragScroll[questType].posGab = 104;        
    xEventQuest.xDragScroll[questType].endPos = -(((xEventQuest.xDragScroll[questType].totalNum-3)*xEventQuest.xDragScroll[questType].posGab));
    
    if(xEventQuest.xDragScroll[questType].totalNum < 3)
        xEventQuest.xDragScroll[questType].endPos = 0;
    
    
    iMax = xEventQuest.totalList;
    dragScrollPrc(&xEventQuest.xDragScroll[questType],1,FALSE);
    
				
    gSetClip(true,0, py-44, lcdW, 326);
    for(int i=0;i<iMax;i++)
    {
        int pos = xEventQuest.xDragScroll[questType].pos+(xEventQuest.xDragScroll[questType].posGab*i);
        subTemp[XPOS] = px+94;
        subTemp[YPOS] = py+13+pos;
        
        if(subTemp[YPOS] < -xEventQuest.xDragScroll[questType].posGab || subTemp[YPOS] > lcdH+xEventQuest.xDragScroll[questType].posGab)
            continue;
        
        int questCode = xEventQuest.listCode[i];
        
        drawImage(&imgEventQuest[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgEventQuest[1].w, imgEventQuest[1].h, VH);
        
        
        dx = subTemp[XPOS]-325;
        dy = subTemp[YPOS]-6;
        
        xGame.isReSizeDraw = true;
        xGame.reSize = 70;
        
        
        
        
        
        switch(xEventQuest.xData[questType][questCode].giftType)
        {
        case 0:	//의상 아이템
            //획득한 의상
            setMapData(xEventQuest.xData[questType][questCode].giftValue);
            drawFittingF(dx, dy, xEventQuest.xData[questType][questCode].giftValue, 80);
            sprintf(strTempS, "%s",xFashionData[xMap.type][xMap.listNum].strName);
            break;
        case 1:	//인테리어
            setMapData(xEventQuest.xData[questType][questCode].giftValue);
            
            setDrawObjCenter(xMap.type,xMap.listNum);
            if(xDrawObjCenter.reSize != 100)
            {
                xGame.fgameScaleCx =dx;
                xGame.fgameScaleCy =lcdH-(dy);
                xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
            }
            drawObj(dx+xDrawObjCenter.w, dy+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
            xGame.fgameScale = 1.0f;
            xGame.fgameScaleCx =cx;
            xGame.fgameScaleCy =cy;
            
            sprintf(strTempS, "%s",xObj.xObjData[xMap.type][xMap.listNum].strName);
            break;
        case 2:	//골드
            setCommaNum(strTempB, xEventQuest.xData[questType][questCode].giftValue);
            sprintf(strTempS, "%s골드",strTempB);
            drawImage(&imgGiftGoldIcon, dx, dy, 0, 0, imgGiftGoldIcon.w, imgGiftGoldIcon.h, VH);
            break;
        case 3:	//룩
            sprintf(strTempS, "%d룩",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgGiftLookIcon, dx, dy, 0, 0, imgGiftLookIcon.w, imgGiftLookIcon.h, VH);
            break;
        case 4:	//캔디(추가)
            sprintf(strTempS, "%d캔디",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgGiftCandyIcon, dx, dy, 0, 0, imgGiftCandyIcon.w, imgGiftCandyIcon.h, VH);
            break;
        case 5:	//일반 모델 캐스팅권(추가)
            sprintf(strTempS, "일반 캐스팅(%d개)",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgGiftModelCastingCAIcon, dx, dy, 0, 0, imgGiftModelCastingCAIcon.w, imgGiftModelCastingCAIcon.h, VH);
            break;
        case 6:	//고급 모델 캐스팅권(추가)
            sprintf(strTempS, "고급 캐스팅(%d개)",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgGiftModelCastingBSIcon, dx, dy, 0, 0, imgGiftModelCastingBSIcon.w, imgGiftModelCastingBSIcon.h, VH);
            break;
        case 7:	//유행 티켓(의상)
            sprintf(strTempS, "의상 유행 티켓");
            drawImage(&imgGiftTrendHangerIcon, dx, dy, 0, 0, imgGiftTrendHangerIcon.w, imgGiftTrendHangerIcon.h, VH);
            break;
        case 8:	//유행 티켓(잡화)
            sprintf(strTempS, "잡화 유행 티켓");
            drawImage(&imgGiftTrendAccessoryIcon, dx, dy, 0, 0, imgGiftTrendAccessoryIcon.w, imgGiftTrendAccessoryIcon.h, VH);
            break;
        case 9:	//A급 모델 캐스팅권
            sprintf(strTempS, "A급 모델 캐스팅(%d개)",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgCastingAIcon, dx, dy, 0, 0, imgCastingAIcon.w, imgCastingAIcon.h, VH);
            break;
        case 10://S급 모델 캐스팅권
            sprintf(strTempS, "S급 모델 캐스팅(%d개)",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgCastingSIcon, dx, dy, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
            break;
        case 11://A~S급 모델 캐스팅권
            sprintf(strTempS, "A~S급 모델 캐스팅(%d개)",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgCastingASIcon, dx, dy, 0, 0, imgCastingASIcon.w, imgCastingASIcon.h, VH);
            break;
        case 12:	//경험치
            sprintf(strTempS, "%d경험치",xEventQuest.xData[questType][questCode].giftValue);
            drawImage(&imgGiftExpIcon, dx, dy, 0, 0, imgGiftExpIcon.w, imgGiftExpIcon.h, VH);
            break;
        case 13://지정 모델 확정권
            {
                int modelResize = 70;
                int modelCode = xEventQuest.xData[questType][questCode].giftValue;
                int modelSex = xModelData[modelCode].sex;
                
                drawHairF(dx,dy, 1000+modelCode,0,modelResize);
                drawFaceF(dx,dy, 1000+modelCode, FACE_TYPE_NORMAL, modelResize);
                drawHairF(dx,dy, 1000+modelCode,1,modelResize);
                
                sprintf(strTempS, "%s(%s급모델)",xModelData[modelCode].strName,getGradeName(xModelData[modelCode].grade));
            }
            break;
                
        }
        
        xGame.isReSizeDraw = false;
        
        drawImage(&imgEventQuest[3], dx, dy+35, 0, 0, imgEventQuest[3].w, imgEventQuest[3].h, VH);
        gSetColor(255, 255, 255);
        setFontSize(19);
        gDrawString(dx, dy+35, strTempS, VH);
        setFontSize(11);
        
        gSetColor(87, 50, 6);
        setFontSize(26);
        getSprintfQuestCheck(questType,questCode);
        gDrawString(subTemp[XPOS]-230, subTemp[YPOS]-10, strTempS, VL);
        setFontSize(11);

        
        if(xEventQuest.xData[questType][questCode].state != EVENTQUESTDETAIL_STATE_END && xEventQuest.xData[questType][questCode].isCheckClean == false)
        {
            int gageWW = xEventQuest.xData[questType][questCode].checkNow*imgEventQuest[10].w/xEventQuest.xData[questType][questCode].checkMax;
            
            if(gageWW > imgEventQuest[10].w)
                gageWW = imgEventQuest[10].w;
            drawImage(&imgEventQuest[10], subTemp[XPOS]-230, subTemp[YPOS]-10+33, 0, 0, imgEventQuest[10].w, imgEventQuest[10].h/2, VL);
            
            drawImage(&imgEventQuest[10], subTemp[XPOS]-230, subTemp[YPOS]-10+33, 0, imgEventQuest[10].h/2, gageWW, imgEventQuest[10].h/2, VL);
        }
        
        
        //지급완료
        if(xEventQuest.xData[questType][questCode].state == EVENTQUESTDETAIL_STATE_END)
        {
            drawImage(&imgEventQuest[4], subTemp[XPOS]+305, subTemp[YPOS], 0, 0, imgEventQuest[4].w, imgEventQuest[4].h/3, VH);
            
            drawImage(&imgEventQuest[7], dx, dy+7, 0, 0, imgEventQuest[7].w, imgEventQuest[7].h, VH);
            
        }
        //클리어
        else if(xEventQuest.xData[questType][questCode].state == EVENTQUESTDETAIL_STATE_PLAY && xEventQuest.xData[questType][questCode].isCheckClean == true)
            drawImage(&imgEventQuest[4], subTemp[XPOS]+305, subTemp[YPOS], 0, imgEventQuest[4].h/3*2, imgEventQuest[4].w, imgEventQuest[4].h/3, VH);
        //미클
        /*
        else if(xEventQuest.xData[questType][questCode].state == EVENTQUESTDETAIL_STATE_PLAY && xEventQuest.xData[questType][questCode].isCheckClean == false)
            
            drawImage(&imgEventQuest[4], subTemp[XPOS]+305, subTemp[YPOS], 0, imgEventQuest[4].h/3, imgEventQuest[4].w, imgEventQuest[4].h/3, VH);
         */
    }
    gSetClip(false,0, 0, lcdW, lcdH);
    
    
    
    
    
    
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xEventQuest.xDragScroll[questType].selectNum = (-xEventQuest.xDragScroll[questType].pos/xEventQuest.xDragScroll[questType].posGab);
    
    if(xEventQuest.xDragScroll[questType].selectNum < 0)
        xEventQuest.xDragScroll[questType].selectNum = 0;
    
    for(int i=0;i<4;i++)
    {
        subTemp[XPOS] = px+94;
        subTemp[YPOS] = py+13+(i*xEventQuest.xDragScroll[questType].posGab);
        
        xEventQuest.xTouchGift[i].wPos = imgEventQuest[4].w;
        xEventQuest.xTouchGift[i].hPos = imgEventQuest[4].h/3;
        xEventQuest.xTouchGift[i].xPos = subTemp[XPOS]+305 - xEventQuest.xTouchGift[i].wPos/2;
        xEventQuest.xTouchGift[i].yPos = subTemp[YPOS] +((xEventQuest.xDragScroll[questType].posGab <= xEventQuest.xDragScroll[questType].pos ? xEventQuest.xDragScroll[questType].pos:(xEventQuest.xDragScroll[questType].pos%xEventQuest.xDragScroll[questType].posGab)))- xEventQuest.xTouchGift[i].hPos/2;
        
        
        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xEventQuest.xTouchGift[i].xPos, xEventQuest.xTouchGift[i].yPos, xEventQuest.xTouchGift[i].wPos, xEventQuest.xTouchGift[i].hPos);
         setAlpha(ALPHA_MAX);
         */

    }
}


void keyEventQuest(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xEventQuest.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            xWorldMap.state = WORLDMAP_STATE_PLAY;
            eventQuestFreeLoad(false);
        }
        else if(touchCheck(&xEventQuest.xTouchMainGift) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            
            xWorldMap.isKeyReturn = TRUE;
            
            
            if(xEventQuest.xMain[xEventQuest.listTab[xEventQuest.selectTab]].state == EVENTQUESTMAIN_STATE_PLAY)
            {
                int clearCnt = 0;
                for(int k=0;k<xEventQuest.totalNum[xEventQuest.listTab[xEventQuest.selectTab]];k++)
                {
                    if(xEventQuest.xData[xEventQuest.listTab[xEventQuest.selectTab]][k].state == EVENTQUESTDETAIL_STATE_END)
                        clearCnt++;
                }
                
                
                if(clearCnt>=xEventQuest.totalNum[xEventQuest.listTab[xEventQuest.selectTab]])
                {
                    playSnd(SND_QUEST_RESULT);
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "보상이 지급되었습니다.\n선물함을 확인해주세요.");
                    xEventQuest.xMain[xEventQuest.listTab[xEventQuest.selectTab]].state = EVENTQUESTMAIN_STATE_END;
                    xEventQueueNet.questType[xEventQueueNet.totalNum]= xEventQuest.listTab[xEventQuest.selectTab];		//일반퀘스트슬롯번호
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_EVENTQUESTMAINCOMPLETE, TRUE);
                    
                    
                    xSave.giftLastKey = 999;
                    gameSave(SAVE_SLOT_GAME);
                    
                    
                }
            }
        }
        else
        {
            if(touchType == USER_POINT_PRESS_EVENT)
            {
                if(touchCheck(&xEventQuest.xTouchTabBg) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    xEventQuest.selectScroll = 0;
                else
                    xEventQuest.selectScroll = 1;
            }
            
            
            if(xEventQuest.selectScroll == 0)
                dragScrollKeyPrc(&xEventQuest.xDragScrollTab,2);
            else
                dragScrollKeyPrc(&xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]],2);
            
            
            
            
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xEventQuest.selectScroll == 0 && xEventQuest.xDragScrollTab.touchXposBefore != DONT)
        {
            dragScrollKeyPrc(&xEventQuest.xDragScrollTab,3);
        }
        else if(xEventQuest.selectScroll == 1 && xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]].touchXposBefore != DONT)
        {
            dragScrollKeyPrc(&xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]],3);
        }
        else if(xEventQuest.selectScroll == 0)
        {
            bool isSelectTab = false;
            int selectTab = 0;
            
            for(int k=0;k<6;k++)
            {
                if(touchCheck(&xEventQuest.xTouchTab[k]) == TRUE)
                {
                    isSelectTab = true;
                    selectTab = k;
                    break;
                }
            }
            
            int selectTemp=0;
            if(isSelectTab == true)
            {
                selectTemp = selectTab+(xEventQuest.xDragScrollTab.selectNum);
            }
            
            if(selectTemp < 0 || selectTemp >= xEventQuest.totalTab)
                isSelectTab = false;
            
            if(isSelectTab == true)
            {
                playSnd(SND_MENU_OK);
                xEventQuest.selectTab = selectTemp;
                setEventQuestList(xEventQuest.listTab[xEventQuest.selectTab]);
            }
        }
        else if(xEventQuest.selectScroll == 1)
        {
            bool isSelectGift = false;
            int selectGift = 0;
            
            for(int k=0;k<4;k++)
            {
                if(touchCheck(&xEventQuest.xTouchGift[k]) == TRUE)
                {
                    isSelectGift = true;
                    selectGift = k;
                    break;
                }
            }
            
            int selectTemp=0;
            
            if(isSelectGift == true)
            {
                selectTemp = selectGift+(xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]].selectNum);
            }
            
            if(selectTemp < 0 || selectTemp >= xEventQuest.totalList)
                isSelectGift = false;
            
            if(isSelectGift == true)
            {
                xEventQuest.selectSlot = selectTemp;
                if(xEventQuest.xData[xEventQuest.listTab[xEventQuest.selectTab]][xEventQuest.listCode[xEventQuest.selectSlot]].state == EVENTQUESTDETAIL_STATE_PLAY)
                {
                    if(xEventQuest.xData[xEventQuest.listTab[xEventQuest.selectTab]][xEventQuest.listCode[xEventQuest.selectSlot]].isCheckClean == true)
                    {
                        playSnd(SND_QUEST_RESULT);
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "보상이 지급되었습니다.\n선물함을 확인해주세요.");
                        xEventQuest.xData[xEventQuest.listTab[xEventQuest.selectTab]][xEventQuest.listCode[xEventQuest.selectSlot]].state = EVENTQUESTDETAIL_STATE_END;
                        
                        xEventQueueNet.questType[xEventQueueNet.totalNum] = xEventQuest.listTab[xEventQuest.selectTab];
                        xEventQueueNet.questIndex[xEventQueueNet.totalNum] = xEventQuest.listCode[xEventQuest.selectSlot];
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_EVENTQUESTDETAILCOMPLETE, TRUE);
                        
                        xSave.giftLastKey = 999;
                        gameSave(SAVE_SLOT_GAME);
                    }
                }
            }
        }
        xEventQuest.xDragScrollTab.touchXpos = DONT;
        xEventQuest.xDragScrollTab.touchYpos = DONT;
        xEventQuest.xDragScrollTab.touchXposBefore = DONT;
        xEventQuest.xDragScrollTab.touchYposBefore = DONT;
        
        xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]].touchXpos = DONT;
        xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]].touchYpos = DONT;
        xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]].touchXposBefore = DONT;
        xEventQuest.xDragScroll[xEventQuest.listTab[xEventQuest.selectTab]].touchYposBefore = DONT;
    }
}

void drawEventQuestBg(int x,int y,int type)
{
    
    if(imgEventQuestBg[type].texture == NULL)
    {
        sprintf(strTempS, "eventquestbg%d.png",type);
        loadImgDocuments(strTempS, &imgEventQuestBg[type]);
    }
    drawImage(&imgEventQuestBg[type], x,y, 0, 0, imgEventQuestBg[type].w, imgEventQuestBg[type].h, TH);
    
}

void drawEventQuestIcon(int x,int y,int type)
{    
    if(imgEventQuestIcon[type].texture == NULL)
    {
        sprintf(strTempS, "eventquesticon%d.png",type);
        loadImgDocuments(strTempS, &imgEventQuestIcon[type]);
    }
    drawImage(&imgEventQuestIcon[type], x,y, 0, 0, imgEventQuestIcon[type].w, imgEventQuestIcon[type].h, VH);
}

void prcEventQuest()
{
    int serverSec = 0;
    int startEventSec = 0;
    int endEventSec = 0;
    
    xEventQuest.totalTab = 0;
    for(int type=0;type<EVENTQUESTMAX;type++)
    {
        serverSec = getTimeSec(xCalendar.nowYear,xCalendar.nowMonth_Hacking,xCalendar.nowDay_Hacking,xCalendar.nowHour_Hacking,xCalendar.nowMinute_Hacking,xCalendar.nowSec_Hacking);
        startEventSec = getTimeSec(xEventQuest.xMain[type].startYear,xEventQuest.xMain[type].startMonth,xEventQuest.xMain[type].startDay,xEventQuest.xMain[type].startHour,0,0);
        endEventSec = getTimeSec(xEventQuest.xMain[type].endYear,xEventQuest.xMain[type].endMonth,xEventQuest.xMain[type].endDay,xEventQuest.xMain[type].endHour,0,0);
        
        //이벤트 진행중
        if(serverSec > startEventSec && serverSec < endEventSec)
        {
            xEventQuest.listTab[xEventQuest.totalTab++] = type;
            if(xEventQuest.xMain[type].state == EVENTQUESTMAIN_STATE_PLAY)
            {
                for(int listNum=0;listNum<xEventQuest.totalNum[type];listNum++)
                {
                    if(xEventQuest.xData[type][listNum].checkNow >= xEventQuest.xData[type][listNum].checkMax)
                        xEventQuest.xData[type][listNum].isCheckClean = true;
                }
            }
        }
        else
        {
            xEventQuest.xMain[type].state = EVENTQUESTMAIN_STATE_CLOSE;
        }
    }
    
    
    
    int mainQuestCnt;
    
    xQuestInfo.totalProductionSlotCode = 0;
    xQuestInfo.totalInteriorSlotCode = 0;
    xQuestInfo.totalStaffSlotCode = 0;
    
    //레벨업에 따른 추가
    if(xLvUp.interiorInfoCode != DONT)
        xQuestInfo.interiorSlotCode[xQuestInfo.totalInteriorSlotCode++] = xLvUp.interiorInfoCode;
    if(xLvUp.productionInfoCode != DONT)
        xQuestInfo.productionSlotCode[xQuestInfo.totalProductionSlotCode++] = xLvUp.productionInfoCode;
    
    
    
    for(int i=0;i<xEventQuest.totalTab;i++)
    {
        
        int questType = xEventQuest.listTab[i];
        
        
        if(xEventQuest.xMain[questType].state != EVENTQUESTMAIN_STATE_PLAY)
            continue;
        
        
        
        int totalCheck = xEventQuest.totalNum[questType];
        int questCheckType;
        int questCheckCode;
        int questCheckNow;
        int questCheckMax;
        int prcTemp[5];
        
        
        for(int k=0;k<totalCheck;k++)
        {
            if(xEventQuest.xData[questType][k].state == EVENTQUESTDETAIL_STATE_END)
                continue;
            
            questCheckType = xEventQuest.xData[questType][k].checkType;
            questCheckCode = xEventQuest.xData[questType][k].checkCode;
            questCheckNow = xEventQuest.xData[questType][k].checkNow;
            questCheckMax = xEventQuest.xData[questType][k].checkMax;

            
            if(questCheckNow < questCheckMax)
            {
                switch(questCheckType)
                {
                case 0://	의상 구매
                case 1://	의상 주문
                case 35://	의상 빠른주문
                case 42://	주문된 %s 진열하기
                    xQuestInfo.productionSlotCode[xQuestInfo.totalProductionSlotCode++] = questCheckCode;
                    break;
                case 5://	인테리어 구매
                case 6://	인테리어 진열
                    xQuestInfo.interiorSlotCode[xQuestInfo.totalInteriorSlotCode++] = questCheckCode;
                    break;
                case 19://	직원 꾸미기
                case 34://	응대직원 꾸미기
                    xQuestInfo.staffSlotCode[xQuestInfo.totalStaffSlotCode++] = questCheckCode/100000;
                    xQuestInfo.staffSlotCode[xQuestInfo.totalStaffSlotCode++] = questCheckCode%100000;
                    break;
                }
                switch(questCheckType)
                {
                    case 0:			//의상구매
                        if(xInventoryFashion.isOpen[questCheckCode/1000][questCheckCode%1000] == TRUE)
                            setQuest(0,1,questCheckCode);		//의상오픈
                        break;
                    case 11:		//명성
                        if(questCheckNow != xSaveTemp.fame.oriData)
                            setQuest(11, xSaveTemp.fame.oriData, DONT);
                        break;
                    case 12:		//돈
                        if(questCheckNow != xSaveTemp.money.oriData)
                            setQuest(12, xSaveTemp.money.oriData, DONT);
                        break;
                    case 17:		//샵타이틀
                        
                        break;
                    case 28:		//증축
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            if(xMap.totalFloor == 2)
                                setQuest(28, 1, DONT);
                        }
                        break;
                    case 32:		//확장
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            if(xWorldMap.isExtensionEvent == FALSE)
                            {
                                if(xMap.extension >= questCheckCode)
                                    setQuest(32, 99, questCheckCode);
                            }
                        }
                        
                        
                        break;
                    case 36:		//얼마 이상 의상 구매
                        for(int i=0;i<FASHIONDATATYPEMAX;i++)
                        {
                            for(int j=0;j<FASHIONDATAMAX;j++)
                            {
                                if(xInventoryFashion.isOpen[i][j] == TRUE)
                                {
                                    if(questCheckNow < xFashionData[i][j].price.oriData)
                                        setQuest(36, xFashionData[i][j].price.oriData, DONT);
                                }
                            }
                        }
                        break;
                    case 39://	명성도 %d 이상 의상 구매
                        for(int i=0;i<FASHIONDATATYPEMAX;i++)
                        {
                            for(int j=0;j<FASHIONDATAMAX;j++)
                            {
                                if(xInventoryFashion.isOpen[i][j] == TRUE)
                                {
                                    if(questCheckNow < xFashionData[i][j].fame.oriData)
                                        setQuest(39, xFashionData[i][j].fame.oriData, DONT);
                                }
                            }
                        }
                        break;
                    case 40://	의상 라이센스 %d개 이상 보유하기
                        prcTemp[0] = 0;
                        for(int i=0;i<FASHIONDATATYPEMAX;i++)
                        {
                            for(int j=0;j<FASHIONDATAMAX;j++)
                            {
                                if(xInventoryFashion.isOpen[i][j] == TRUE)
                                {
                                    ++prcTemp[0];
                                }
                            }
                        }
                        if(questCheckNow < prcTemp[0])
                            setQuest(40, prcTemp[0], DONT);
                        break;
                    case 48://	마네킹 레이어드 %d회 달성하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            for(int floor=0;floor<xMap.totalFloor;floor++)
                            {
                                for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
                                {
                                    if(xShowWindowInfo[floor][ss].isUse == TRUE)
                                    {
                                        int layeredNum = 0;
                                        for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
                                        {
                                            if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
                                                layeredNum++;
                                        }
                                        if(prcTemp[0] < layeredNum)
                                            prcTemp[0] = layeredNum;
                                    }
                                }
                            }
                            if(questCheckNow < prcTemp[0])
                                setQuest(48, prcTemp[0], DONT);
                        }
                        break;
                    case 92://	마네킹 넣어입기로 레이어드 x회 코디하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            for(int floor=0;floor<xMap.totalFloor;floor++)
                            {
                                for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
                                {
                                    if(xShowWindowInfo[floor][ss].isUse == TRUE)
                                    {
                                        if(xShowWindowInfo[floor][ss].xF.isInFitting == TRUE)
                                        {
                                            int layeredNum = 0;
                                            for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
                                            {
                                                if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
                                                    layeredNum++;
                                            }
                                            if(prcTemp[0] < layeredNum)
                                                prcTemp[0] = layeredNum;
                                        }
                                    }
                                }
                            }
                            if(questCheckNow < prcTemp[0])
                                setQuest(92, prcTemp[0], DONT);
                            
                        }
                        
                        break;
                    case 52://	남자 모델 %d명 피팅하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            for(int i=0;i<xModel.totalInventoryModel;i++)
                            {
                                if(xModelData[xInventoryModel[i].code].sex == 1)
                                {
                                    int layeredNum = 0;
                                    for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
                                    {
                                        if(xInventoryModel[i].xF.code[ff] != DONT)
                                            layeredNum++;
                                    }
                                    if(layeredNum > 0)
                                        prcTemp[0]++;
                                }
                            }
                            if(questCheckNow < prcTemp[0])
                                setQuest(52, prcTemp[0], DONT);
                        }
                        break;
                    case 55://	모델 %d명 보유하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            if(questCheckNow != xModel.totalInventoryModel)
                                setQuest(55, xModel.totalInventoryModel, DONT);
                        }
                        break;
                    case 56://	선호도 %d%% 달성하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            if(questCheckNow < xInShopPer.inShopPerTotal.oriData)
                                setQuest(56, xInShopPer.inShopPerTotal.oriData, DONT);
                        }
                        break;
                    case 57://	캔디 모으기
                        if(questCheckNow != xSaveTemp.tired.oriData)
                            setQuest(57, xSaveTemp.tired.oriData, DONT);
                        break;
                    case 69://	남자마네킹 레이어드 %d회 달성하기(%d/%d)
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            for(int floor=0;floor<xMap.totalFloor;floor++)
                            {
                                for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
                                {
                                    if(xShowWindowInfo[floor][ss].isUse == TRUE)
                                    {
                                        int layeredNum = 0;
                                        for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
                                        {
                                            if(xShowWindowInfo[floor][ss].gender == 1)
                                            {
                                                if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
                                                    layeredNum++;
                                            }
                                        }
                                        if(prcTemp[0] < layeredNum)
                                            prcTemp[0] = layeredNum;
                                    }
                                }
                            }
                            if(questCheckNow < prcTemp[0])
                                setQuest(69, prcTemp[0], DONT);
                        }
                        break;
                    case 82://	의상 동시에 x벌 진열하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            for(int floor=0;floor<xMap.totalFloor;floor++)
                                prcTemp[0]+=xSell.totalIngHangerSlot[floor];
                            
                            if(questCheckNow != prcTemp[0])
                                setQuest(82, prcTemp[0], DONT);
                        }
                        break;
                    case 83://	잡화 동시에 x개 진열하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            for(int floor=0;floor<xMap.totalFloor;floor++)
                                prcTemp[0]+=xSell.totalIngAccessorySlot[floor];
                            
                            if(questCheckNow != prcTemp[0])
                                setQuest(83, prcTemp[0], DONT);
                        }
                        break;
                    case 89://	활동 중인 모델 의상 x벌 마네킹에게 입히기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            
                            for(int floor=0;floor<xMap.totalFloor;floor++)
                            {
                                for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
                                {
                                    if(xShowWindowInfo[floor][ss].isUse == TRUE && xShowWindowInfo[floor][ss].isFitting == TRUE)
                                    {
                                        for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
                                        {
                                            if(xShowWindowInfo[floor][ss].xF.code[ff] != DONT)
                                            {
                                                for(int k=0;k<MODELMAINSLOTMAX;k++)
                                                {
                                                    switch(xModelMainSlot[k].state)
                                                    {
                                                        case MODELMAINSLOT_STATE_WAIT:
                                                        case MODELMAINSLOT_STATE_PLAY:
                                                            xModelMainSlot[k].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[k].modelKey);
                                                            for(int ffff=0;ffff<SPRIT_IMGLAYERMAX;ffff++)
                                                            {
                                                                if(xInventoryModel[xModelMainSlot[k].inventoryNum].xF.code[ffff] != DONT)
                                                                {
                                                                    if(xShowWindowInfo[floor][ss].xF.code[ff] == xInventoryModel[xModelMainSlot[k].inventoryNum].xF.code[ffff])
                                                                        prcTemp[0]++;
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if(questCheckNow < prcTemp[0])
                                setQuest(89, prcTemp[0], DONT);
                        }
                        break;
                    case 94://	샵에 모델 x명 배치하기
                        if(xWorldMap.isSubLoading == FALSE && xWorldMap.isFriendMap == FALSE && xFriendMap.isPlay == FALSE)
                        {
                            prcTemp[0] = 0;
                            for(int k=0;k<MODELMAINSLOTMAX;k++)
                            {
                                switch(xModelMainSlot[k].state)
                                {
                                    case MODELMAINSLOT_STATE_WAIT:
                                    case MODELMAINSLOT_STATE_PLAY:
                                        prcTemp[0]++;
                                        break;
                                }
                            }
                            if(questCheckNow < prcTemp[0])
                                setQuest(94, prcTemp[0], DONT);
                        }
                        break;
                    case 71://	보상없는 시나리오진행
                        //삭제
                        break;
                    case 72://	보상없는 튜토리얼진행
                        //삭제
                        break;
                    case 20:		//튜토리얼
                        //삭제
                        break;
                    case 21:		//주문장 넣어주기
                       //삭제
                        break;
                    case 35:		//의상 즉시 주문
                        for(int type=0;type<2;type++)
                        {
                            for(int k=0;k<6;k++)
                            {
                                if(xProductionMenu.slotCode[type][k] != DONT)
                                    setMapData(xProductionMenu.slotCode[type][k]);
                                if(xProductionMenu.state[type][k] == PRODUCTIONMENUSLOT_STATE_PLAY
                                   && xProductionMenu.slotCode[type][k] != DONT
                                   && xProductionMenu.slotFlowTime[type][k]>=xFashionData[xMap.type][xMap.listNum].makeTime.oriData)
                                {
                                    //의상 즉시 주문
                                    if(questCheckCode == xProductionMenu.slotCode[type][k])
                                        setQuest(35, 1, xProductionMenu.slotCode[type][k]);
                                }
                            }
                        }
                        break;
                }
            }
        }		
    }
}


//정렬
void setEventQuestList(int questType)
{
    xEventQuest.totalList = 0;
    for(int k=0;k<xEventQuest.totalNum[questType];k++)
    {
        xEventQuest.listCode[xEventQuest.totalList++] = k;
    }
    
    
    int completePer1;
    int completePer2;
    
    
    for(int k=0;k<xEventQuest.totalList;k++)
    {
        for(int z=k+1;z<xEventQuest.totalList;z++)
        {
            bool isSort = false;
            //진행중
            if(xEventQuest.xData[questType][xEventQuest.listCode[k]].state == EVENTQUESTDETAIL_STATE_PLAY
               && xEventQuest.xData[questType][xEventQuest.listCode[k]].isCheckClean == false)
            {
                if(xEventQuest.xData[questType][xEventQuest.listCode[z]].state == EVENTQUESTDETAIL_STATE_PLAY
                   && xEventQuest.xData[questType][xEventQuest.listCode[z]].isCheckClean == true)
                    isSort = true;
            }
            else if(xEventQuest.xData[questType][xEventQuest.listCode[k]].state == EVENTQUESTDETAIL_STATE_END)
            {
                if(xEventQuest.xData[questType][xEventQuest.listCode[z]].state == EVENTQUESTDETAIL_STATE_PLAY)
                    isSort = true;
            }
            
            if(isSort == true)
            {
                int tempList = xEventQuest.listCode[k];
                xEventQuest.listCode[k] = xEventQuest.listCode[z];
                xEventQuest.listCode[z] = tempList;
            }
        }
    }
    
    
    for(int k=0;k<xEventQuest.totalList;k++)
    {
        for(int z=k+1;z<xEventQuest.totalList;z++)
        {
            bool isSort = false;
            //진행중
            if(xEventQuest.xData[questType][xEventQuest.listCode[k]].state == EVENTQUESTDETAIL_STATE_PLAY
               && xEventQuest.xData[questType][xEventQuest.listCode[k]].isCheckClean == false)
            {
                if(xEventQuest.xData[questType][xEventQuest.listCode[z]].state == EVENTQUESTDETAIL_STATE_PLAY
                   && xEventQuest.xData[questType][xEventQuest.listCode[z]].isCheckClean == false)
                {
                    completePer1 = xEventQuest.xData[questType][xEventQuest.listCode[k]].checkNow*100/xEventQuest.xData[questType][xEventQuest.listCode[k]].checkMax;
                    
                    
                    completePer2 = xEventQuest.xData[questType][xEventQuest.listCode[z]].checkNow*100/xEventQuest.xData[questType][xEventQuest.listCode[z]].checkMax;
                    
                    if(completePer2 > completePer1)
                        isSort = true;
                }
            }
            
            if(isSort == true)
            {
                int tempList = xEventQuest.listCode[k];
                xEventQuest.listCode[k] = xEventQuest.listCode[z];
                xEventQuest.listCode[z] = tempList;
            }
            
            
        }
    }
    
}


void setEventQuest(int checkType,int num,int code)
{
    
    if(xEventQuest.isNetLoad == true)
        return;
    
    
    int questCheckType;
    bool isUpdate = false;

    for(int type=0;type<EVENTQUESTMAX;type++)
    {
        //현재 진행중인 퀘스트일경우에만
        if(xEventQuest.xMain[type].state == EVENTQUESTMAIN_STATE_PLAY)
        {
            for(int listNum=0;listNum<xEventQuest.totalNum[type];listNum++)
            {
                if(xEventQuest.xData[type][listNum].state == EVENTQUESTDETAIL_STATE_END)
                    continue;
                
                if(xEventQuest.xData[type][listNum].isCheckClean == true)
                    continue;
                
                questCheckType = xEventQuest.xData[type][listNum].checkType;
                
                if(questCheckType == checkType)
                {
                    if(code == DONT||checkType == 88 || code == xEventQuest.xData[type][listNum].checkCode%100000 || (code == xEventQuest.xData[type][listNum].checkCode/100000 && xEventQuest.xData[type][listNum].checkCode/100000 !=0))
                    {
                        isUpdate = false;
                        switch(checkType)
                        {
                        case 11:	//명성도
                        case 12:	//골드
                        case 17:	//칭호 갯수
                        case 36:	//얼마이상구매
                        case 38://	주문수량 %d벌 이상 의상 주문
                        case 39://	명성도 %d 이상 의상 구매
                        case 40://	의상 라이센스 %d개 이상 보유하기
                        case 46://	패션쇼 %d점 달성하기
                        case 48://	마네킹 레이어드 %d회 달성하기
                        case 51://	여자 모델 %d명 피팅하기
                        case 52://	남자 모델 %d명 피팅하기
                        case 55://	모델 %d명 보유하기
                        case 56://	선호도 %d%% 달성하기
                        case 57://	캔디 모으기
                        case 69://	남자마네킹 레이어드 %d회 달성하기(%d/%d)
                        case 82://	의상 동시에 x벌 진열하기
                        case 83://	잡화 동시에 x개 진열하기
                        case 89://	활동 중인 모델 의상 x벌 마네킹에게 입히기
                        case 92://	마네킹 넣어입기로 레이어드 x회 코디하기
                        case 94://	샵에 모델 x명 배치하기
                        case 95://	남자 모델만 이용해 패션쇼 xx점 달성하기
                        case 96://	여자 모델만 이용해 패션쇼 xx점 달성하기
                            if(num > xEventQuest.xData[type][listNum].checkNow)
                            {
                                isUpdate = true;
                                xEventQuest.xData[type][listNum].checkNow = num;
                            }
                            break;
                        case 88://	선호도 x% 상태로 의상 x벌 판매하기		0
                            if(code >= xEventQuest.xData[type][listNum].checkCode)
                            {
                                isUpdate = true;
                                xEventQuest.xData[type][listNum].checkNow += num;
                            }
                            break;
                        default:
                            isUpdate = true;
                            xEventQuest.xData[type][listNum].checkNow += num;
                            break;
                        }                        
                        
                        switch(checkType)
                        {
                        case 57://	캔디 모으기
                        case 12:	//골드달성
                        case 37://	판매 단가 %d원 이상 의상 주문
                        case 56://	선호도 %d%% 달성하기
                        case 55://	모델 %d명 보유하기
                        case 82://	의상 동시에 x벌 진열하기
                        case 83://	잡화 동시에 x개 진열하기
                            break;
                        default:
                            if(isUpdate == true)
                            {
                                xEventQueueNet.questType[xEventQueueNet.totalNum] = type;
                                xEventQueueNet.questIndex[xEventQueueNet.totalNum] = listNum;
                                xEventQueueNet.questValue[xEventQueueNet.totalNum] = xEventQuest.xData[type][listNum].checkNow;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_EVENTQUESTDETAILUPDATE, TRUE);
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}

void drawRivalComingSoon()
{
    int px = xMap.pointX-475;
    int py = xMap.pointY+512;
    
    drawRivalBuilding(px,py,xRival.xData[xRival.completeMain][xRival.completeDetail].buildingImgNum,BL);
    drawImage(&imgMyShop[1], px, py, 0, 0, imgMyShop[1].w, imgMyShop[1].h, BL);
    
    xRival.xTouchUi.wPos = 200;
    xRival.xTouchUi.hPos = 300;
    xRival.xTouchUi.xPos = px+150-xRival.xTouchUi.wPos/2;
    xRival.xTouchUi.yPos = py-150-xRival.xTouchUi.hPos/2;
    
    
    
    
    
    
    
    
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xRival.xTouchUi.xPos, xRival.xTouchUi.yPos, xRival.xTouchUi.wPos, xRival.xTouchUi.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    int fsInfoW = 0;
    int fsInfoH = 0;
    
    switch(gameCnt%29)
    {
        case 0:fsInfoW =0;fsInfoH =	0;break;
        case 1:fsInfoW =-0.026;fsInfoH =	0.024;break;
        case 2:fsInfoW =-0.116;fsInfoH =	0.105;break;
        case 3:fsInfoW =-0.294;fsInfoH =	0.265;break;
        case 4:fsInfoW =-0.6;fsInfoH =	0.541;break;
        case 5:fsInfoW =-1.12;fsInfoH =	1.01;break;
        case 6:fsInfoW =-2.087;fsInfoH =	1.883;break;
        case 7:fsInfoW =-7.291;fsInfoH =	6.575;break;
        case 8:fsInfoW =-12.493;fsInfoH =	11.267;break;
        case 9:fsInfoW =-13.46;fsInfoH =	12.139;break;
        case 10:fsInfoW =-13.978;fsInfoH =	12.606;break;
        case 11:fsInfoW =-14.288;fsInfoH =	12.886;break;
        case 12:fsInfoW =-14.468;fsInfoH =	13.048;break;
        case 13:fsInfoW =-14.561;fsInfoH =	13.132;break;
        case 14:fsInfoW =-14.592;fsInfoH =	13.16;break;
        case 15:fsInfoW =-14.566;fsInfoH =	13.137;break;
        case 16:fsInfoW =-14.475;fsInfoH =	13.054;break;
        case 17:fsInfoW =-14.298;fsInfoH =	12.895;break;
        case 18:fsInfoW =-13.992;fsInfoH =	12.619;break;
        case 19:fsInfoW =-13.473;fsInfoH =	12.15;break;
        case 20:fsInfoW =-12.504;fsInfoH =	11.277;break;
        case 21:fsInfoW =-7.302;fsInfoH =	6.585;break;
        case 22:fsInfoW =-2.098;fsInfoH =	1.892;break;
        case 23:fsInfoW =-1.132;fsInfoH =	1.021;break;
        case 24:fsInfoW =-0.611;fsInfoH =	0.551;break;
        case 25:fsInfoW =-0.301;fsInfoH =	0.272;break;
        case 26:fsInfoW =-0.12;fsInfoH =	0.108;break;
        case 27:fsInfoW =-0.027;fsInfoH =	0.025;break;
        case 28:fsInfoW =0;fsInfoH =	0;break;
    }
    
    fsInfoH -= imgRivalBuilding[xRival.xData[xRival.completeMain][xRival.completeDetail].buildingImgNum].h;
    
    if(xWorldMap.isFriendMap == FALSE)
        drawPacker(imgWorldMapFsInof, px+180, py+20+fsInfoH, 0, 0, imgW(imgWorldMapFsInof), imgH(imgWorldMapFsInof), VH);
    
    
    
    
    
    
    
    /*
    int rivalHPos = 0;
    switch(xRival.comingSoonState)
    {
    case COMINGSOON_STATE_DOWNWAIT:
        rivalHPos=0;
        if(++xRival.comingAnyCnt > 60)
        {
            xRival.comingSoonState = COMINGSOON_STATE_DOWN;
            xRival.comingAnyCnt = 0;
        }
        break;
    case COMINGSOON_STATE_DOWN:
        switch(++xRival.comingAnyCnt)
        {
        case 0:rivalHPos=0;break;
        case 1:rivalHPos=0;break;
        case 2:rivalHPos=0;break;
        case 3:rivalHPos=0;break;
        case 4:rivalHPos=0;break;
        case 5:rivalHPos=1;break;
        case 6:rivalHPos=1;break;
        case 7:rivalHPos=1;break;
        case 8:rivalHPos=1;break;
        case 9:rivalHPos=1;break;
        case 10:rivalHPos=2;break;
        case 11:rivalHPos=2;break;
        case 12:rivalHPos=3;break;
        case 13:rivalHPos=3;break;
        case 14:rivalHPos=3;break;
        case 15:rivalHPos=4;break;
        case 16:rivalHPos=4;break;
        case 17:rivalHPos=5;break;
        case 18:rivalHPos=6;break;
        case 19:rivalHPos=7;break;
        case 20:rivalHPos=7;break;
        case 21:rivalHPos=8;break;
        case 22:rivalHPos=9;break;
        case 23:rivalHPos=11;break;
        case 24:rivalHPos=12;break;
        case 25:rivalHPos=13;break;
        case 26:rivalHPos=15;break;
        case 27:rivalHPos=17;break;
        case 28:rivalHPos=20;break;
        case 29:rivalHPos=23;break;
        case 30:rivalHPos=30;break;
        case 31:rivalHPos=31;break;
        case 32:rivalHPos=30;break;
        case 33:rivalHPos=28;break;
        case 34:rivalHPos=27;break;
        case 35:rivalHPos=26;break;
        case 36:rivalHPos=26;break;
        case 37:rivalHPos=26;break;
        case 38:rivalHPos=25;break;
        case 39:rivalHPos=25;break;
        case 40:rivalHPos=25;break;
        case 41:rivalHPos=25;break;
        case 42:rivalHPos=25;break;
        case 43:rivalHPos=26;break;
        case 44:rivalHPos=26;break;
        case 45:rivalHPos=26;break;
        case 46:rivalHPos=27;break;
        case 47:rivalHPos=27;break;
        case 48:rivalHPos=28;break;
        case 49:rivalHPos=29;break;
        case 50:rivalHPos=30;break;
        case 51:rivalHPos=29;break;
        case 52:rivalHPos=29;break;
        case 53:rivalHPos=28;break;
        case 54:rivalHPos=28;break;
        case 55:rivalHPos=28;break;
        case 56:rivalHPos=28;break;
        case 57:rivalHPos=28;break;
        case 58:rivalHPos=28;break;
        case 59:rivalHPos=28;break;
        case 60:rivalHPos=28;break;
        case 61:rivalHPos=28;break;
        case 62:rivalHPos=28;break;
        case 63:rivalHPos=28;break;
        case 64:rivalHPos=28;break;
        case 65:rivalHPos=28;break;
        case 66:rivalHPos=29;break;
        case 67:rivalHPos=29;break;
        case 68:rivalHPos=30;break;
        case 69:rivalHPos=30;break;
        case 70:rivalHPos=30;break;
        case 71:rivalHPos=30;break;
        case 72:rivalHPos=30;break;
        case 73:rivalHPos=29;break;
        case 74:rivalHPos=29;break;
        case 75:rivalHPos=29;break;
        case 76:rivalHPos=29;break;
        case 77:rivalHPos=29;break;
        case 78:rivalHPos=29;break;
        case 79:rivalHPos=29;break;
        case 80:rivalHPos=29;break;
        case 81:rivalHPos=29;break;
        case 82:rivalHPos=29;break;
        case 83:rivalHPos=29;break;
        case 84:rivalHPos=30;break;
        case 85:rivalHPos=30;break;
        case 86:rivalHPos=30;break;
        case 87:rivalHPos=30;break;
        case 88:rivalHPos=30;break;
        case 89:rivalHPos=30;break;
        case 90:rivalHPos=30;
            xRival.comingSoonState = COMINGSOON_STATE_UPWAIT;
            xRival.comingAnyCnt = 0;
            break;
        }
        break;
    case COMINGSOON_STATE_UPWAIT:
        rivalHPos=30;
        if(++xRival.comingAnyCnt > 60)
        {
            xRival.comingSoonState = COMINGSOON_STATE_UP;
            xRival.comingAnyCnt = 0;
        }
        break;
    case COMINGSOON_STATE_UP:
        switch(++xRival.comingAnyCnt)
        {
        case 0:rivalHPos=30;break;
        case 1:rivalHPos=30;break;
        case 2:rivalHPos=29;break;
        case 3:rivalHPos=28;break;
        case 4:rivalHPos=27;break;
        case 5:rivalHPos=26;break;
        case 6:rivalHPos=25;break;
        case 7:rivalHPos=23;break;
        case 8:rivalHPos=22;break;
        case 9:rivalHPos=21;break;
        case 10:rivalHPos=19;break;
        case 11:rivalHPos=18;break;
        case 12:rivalHPos=17;break;
        case 13:rivalHPos=15;break;
        case 14:rivalHPos=14;break;
        case 15:rivalHPos=13;break;
        case 16:rivalHPos=11;break;
        case 17:rivalHPos=10;break;
        case 18:rivalHPos=9;break;
        case 19:rivalHPos=8;break;
        case 20:rivalHPos=7;break;
        case 21:rivalHPos=6;break;
        case 22:rivalHPos=5;break;
        case 23:rivalHPos=4;break;
        case 24:rivalHPos=3;break;
        case 25:rivalHPos=2;break;
        case 26:rivalHPos=1;break;
        case 27:rivalHPos=1;break;
        case 28:rivalHPos=0;break;
        case 29:rivalHPos=0;break;
        case 30:rivalHPos=0;break;
        case 31:rivalHPos=-1;break;
        case 32:rivalHPos=0;break;
        case 33:rivalHPos=4;break;
        case 34:rivalHPos=3;break;
        case 35:rivalHPos=1;break;
        case 36:rivalHPos=0;break;
        case 37:rivalHPos=0;break;
        case 38:rivalHPos=2;break;
        case 39:rivalHPos=2;break;
        case 40:rivalHPos=1;break;
        case 41:rivalHPos=0;
            xRival.comingSoonState = COMINGSOON_STATE_DOWNWAIT;
            xRival.comingAnyCnt = 0;
            break;
        }
        break;
    }
    
    drawImage(&imgRivalComingSoon[0], px, py+rivalHPos, 0, 0, imgRivalComingSoon[0].w, imgRivalComingSoon[0].h, VH);
    drawImage(&imgRivalComingSoon[1], px, py-15+rivalHPos, 0, 0, imgRivalComingSoon[1].w, imgRivalComingSoon[1].h, VH);
    */
}



void setHotDeal()
{
    
    if(xHotDeal.isOpen == false)
        return;
    
    if(xHotDeal.isReset == true || xHotDeal.remainTime > 0 || xSaveTemp.lv.oriData < xHotDeal.openLv)
    {
        
    }
    else
        return;

    
    
    
    
    
    xWorldMap.state = WORLDMAP_STATE_HOTDEAL;
    xHotDeal.state = HOTDEAL_MAINSTATE_NET;
    hotDealFreeLoad(TRUE);
    
//    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_HOTDEALMAINLIST, TRUE);
    
    for(int i=0;i<HOTDEALSLOTMAX;i++)
    {
        xHotDeal.xSlot[i].isCardOpen = false;
        xHotDeal.xSlot[i].anyCnt = 0;
        xHotDeal.xSlot[i].actFlow = 0;
    }
}

void hotDealFreeLoad(M_Boolean isLoad)
{
    if(isLoad == TRUE)
    {
        loadImg("hotdeal0.png", &imgHotDeal[0]);
        loadImg("hotdeal1.png", &imgHotDeal[1]);
        loadImg("hotdeal2.png", &imgHotDeal[2]);
        loadImg("hotdeal3.png", &imgHotDeal[3]);
        loadImg("hotdeal4.png", &imgHotDeal[4]);
        loadImg("hotdeal5.png", &imgHotDeal[5]);
        loadImg("hotdeal6.png", &imgHotDeal[6]);
        loadImg("hotdeal7.png", &imgHotDeal[7]);
        
        loadImg("newdancereff0.png", &imgNewDancerEff[0]);
        loadImg("newdancereff1.png", &imgNewDancerEff[1]);
        loadImg("newdancereff2.png", &imgNewDancerEff[2]);
        
        
        loadImg("shoppremiumicon0.png", &imgGiftModelCastingCAIcon);
        loadImg("shoppremiumicon1.png", &imgGiftModelCastingBSIcon);
        
        
    }
    else
    {
        freeImg(&imgHotDeal[0]);
        freeImg(&imgHotDeal[1]);
        freeImg(&imgHotDeal[2]);
        freeImg(&imgHotDeal[3]);
        freeImg(&imgHotDeal[4]);
        freeImg(&imgHotDeal[5]);
        freeImg(&imgHotDeal[6]);
        freeImg(&imgHotDeal[7]);
        
        
        freeImg(&imgNewDancerEff[0]);
        freeImg(&imgNewDancerEff[1]);
        freeImg(&imgNewDancerEff[2]);
        
        
        freeImg(&imgGiftModelCastingCAIcon);
        freeImg(&imgGiftModelCastingBSIcon);
        
    }
}

void prcHotDeal(void)
{
    
    
    
    
    if(xHotDeal.isReset == true)
    {
        if(xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == FALSE && xWorldMap.isFriendMap == FALSE && xWorldMap.isLvUp == FALSE && xWorldMap.isTuto == false)
        {
            if(xWorldMap.state == WORLDMAP_STATE_PLAY
               && xHotDeal.isOpen == true
               && xHotDeal.isReset == true
               && xSaveTemp.lv.oriData >= xHotDeal.openLv
               )
            {
                
                if(xSave.hotTimeShowDay != xCalendar.nowDay_Hacking)
                {
                    xSave.hotTimeShowDay = xCalendar.nowDay_Hacking;
                    gameSave(SAVE_SLOT_GAME);
                    setHotDeal();
                }
            }
        }
    }
    
    if(xHotDeal.isReset == false)
    {
        xHotDeal.remainTime -= xGame.prcSec;
        
        if(xHotDeal.remainTime < 0)
            xHotDeal.remainTime = 0;
    }
    else
        xHotDeal.remainTime = xHotDeal.hotDealTimeMax;
}

void setHotDealSlot(int slotNum)
{
    
    
    if(xHotDeal.isReset == true)
    {
        xHotDeal.isReset = false;
        xHotDeal.remainTime = xHotDeal.hotDealTimeMax;
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_HOTDEALMAINOPEN, TRUE);
    }
    
    int prcPer = ranDom(0, 99);
    int sumPer = 0;
    
    //가장안좋은 확률을 초기화값으로
    int selectPerPer = 4;
    
    for(int k=0;k<5;k++)
    {
        sumPer += xHotDeal.xData[xHotDeal.hotDealCode][slotNum].perPer[k];
        
        if(prcPer < sumPer)
        {
            selectPerPer = k;
            break;
        }
    }
    
    
    
    xHotDeal.xSlot[slotNum].isCardOpen = true;
    xHotDeal.xSlot[slotNum].anyCnt = 0;
    xHotDeal.xSlot[slotNum].actFlow = 0;
    
    
    xHotDeal.xSlot[slotNum].state = HOTDEAL_STATE_OPEN;
    xHotDeal.xSlot[slotNum].salePer = xHotDeal.xData[xHotDeal.hotDealCode][slotNum].salePer[selectPerPer];
    xHotDeal.xSlot[slotNum].itemType = xHotDeal.xData[xHotDeal.hotDealCode][slotNum].itemType;
    if(xHotDeal.xData[xHotDeal.hotDealCode][slotNum].itemCode != DONT)
    {
        xHotDeal.xSlot[slotNum].itemCode = xHotDeal.xData[xHotDeal.hotDealCode][slotNum].itemCode;
    }
    else
    {
        prcPer = ranDom(0, 999);
        sumPer = 0;
        
        
        int listCodeTemp_NotFiltering[2048];
        int totalListCode_NotFiltering = 0;
        
        int listCodeTemp[2048];
        int totalListCode = 0;
        
        
        bool isFiltering[3];
        for(int k=0;k<3;k++)
        {
            if(ranDom(0,99) < xHotDeal.xData[xHotDeal.hotDealCode][slotNum].filteringPer[k])
                isFiltering[k] = true;
            else
                isFiltering[k] = false;
            
        }
        
        
        switch(xHotDeal.xData[xHotDeal.hotDealCode][slotNum].itemType)
        {
        case HOTDEAL_ITEMTYPE_INTERIOR:
            for(int interiorType = 0;interiorType<xInterior.totalNum;interiorType++)
            {
                for(int interiorList = 0;interiorList<xInterior.totalSlot[interiorType];interiorList++)
                {
                    for(int k=0;k<xInterior.xSlot[interiorType][interiorList].totalTeam;k++)
                    {
                        if(xInterior.xSlot[interiorType][interiorList].codeTeam[k] != 0)
                        {
                            setMapData(xInterior.xSlot[interiorType][interiorList].codeTeam[k]);
                                                        
                            if(xObj.xObjData[xMap.type][xMap.listNum].priceType != 1)
                                continue;
                            
                            switch(xMap.type)
                            {
                            case INTERIOR_TYPE_PAYMENT:         //계산대
                            case INTERIOR_TYPE_FITTINGROOM:		//피팅룸
                            case INTERIOR_TYPE_HANGER:          //옷걸이
                            case INTERIOR_TYPE_ACCESSORY:		//진열대
                            //case INTERIOR_TYPE_PRODUCTION:		//생산
                            case INTERIOR_TYPE_SHOWWINDOW:		//쇼윈도
                            case INTERIOR_TYPE_OBJ:             //오브젝트
                            case INTERIOR_TYPE_WALLITEM:		//벽장식
                            case INTERIOR_TYPE_DOOR:            //문
                                break;
                            default:
                                continue;
                                break;
                            }
                            
                            listCodeTemp_NotFiltering[totalListCode_NotFiltering++] = xInterior.xSlot[interiorType][interiorList].codeTeam[k];
                            
                            //미보유한 아이템 체크
                            if(isFiltering[0] == true)
                            {
                                if(isInteriorUse(xInterior.xSlot[interiorType][interiorList].codeTeam[k]) == true)
                                    continue;
                            }
                            
                            //플레이어의 레벨 체크
                            if(isFiltering[1] == true)
                            {
                                if(xSaveTemp.lv.oriData > xObj.xObjData[xMap.type][xMap.listNum].lv)
                                    continue;
                            }
                            
                            //플레이어의 보유룩 체크
                            if(isFiltering[2] == true)
                            {
                                if(xSaveTemp.cash.oriData > (xObj.xObjData[xMap.type][xMap.listNum].price.oriData*(100-xHotDeal.xSlot[slotNum].salePer)/100))
                                    continue;
                            }
                            listCodeTemp[totalListCode++] = xInterior.xSlot[interiorType][interiorList].codeTeam[k];
                        }
                    }
                }
            }
                
            if(totalListCode == 0)
            {
                xHotDeal.xSlot[slotNum].itemCode = listCodeTemp_NotFiltering[ranDom(0, totalListCode_NotFiltering-1)];
            }
            else
                xHotDeal.xSlot[slotNum].itemCode = listCodeTemp[ranDom(0, totalListCode-1)];
                
            
                
                
            setMapData(xHotDeal.xSlot[slotNum].itemCode);
            xHotDeal.xSlot[slotNum].price = xObj.xObjData[xMap.type][xMap.listNum].price.oriData;
            break;
        case HOTDEAL_ITEMTYPE_CASTING:
            for(int k=0;k<5;k++)
            {
                sumPer += xHotDeal.castingPer[k];
                
                if(prcPer < sumPer)
                {
                    xHotDeal.xSlot[slotNum].itemCode = k;
                    xHotDeal.xSlot[slotNum].price = xHotDeal.castingPrice[k];
                    break;
                }
            }
            break;
        }
    }
    
    ////////////////////////////////////////////////////
    xEventQueueNet.SLOT[xEventQueueNet.totalNum] = slotNum;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_HOTDEALDETAILOPEN, TRUE);
    ////////////////////////////////////////////////////
}



void drawHotDeal()
{
    int px = cx;
    int py = cy;
    
    
    
    
    if(xHotDeal.state == HOTDEAL_MAINSTATE_NET)
    {
        xGame.isRotate = TRUE;
        xGame.rotateNum = 360-(gameCnt%120)*3;
        drawPacker(imgLoadingIcon0, px, py, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
        xGame.isRotate = FALSE;
        return;
    }
    
    drawImage(&imgHotDeal[0], px, py, 0, 0, imgHotDeal[0].w, imgHotDeal[0].h, VH);
    
    sprintf(strTempS, "구매제한시간과 상관없이 매주 %s에 핫딜상품이 갱신됩니다.",xHotDeal.strInitInfo);
    
    gSetColor(255, 255, 255);
    setFontSize(13);
    gDrawString(px, py+303, strTempS, VH);
    setFontSize(11);
    
    
    
    subTemp[XPOS] = px+397;
    subTemp[YPOS] = py-281;
    sprintf(strTempS, "%d",xSaveTemp.cash.oriData);
    
    gSetColor(255, 255, 255);
    setFontSize(19);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);
    
    
    subTemp[XPOS] = px+506;
    subTemp[YPOS] = py-280;
    
    xHotDeal.xTouchExit.wPos = 80;
    xHotDeal.xTouchExit.hPos = 80;
    xHotDeal.xTouchExit.xPos = subTemp[XPOS]-xHotDeal.xTouchExit.wPos/2;
    xHotDeal.xTouchExit.yPos = subTemp[YPOS]-xHotDeal.xTouchExit.hPos/2;
    
    
    //남은시간
    subTemp[XPOS] = px+36;
    subTemp[YPOS] = py-276;
    drawImage(&imgHotDeal[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgHotDeal[3].w, imgHotDeal[3].h, VH);
    
    setFontSize(40);
    gSetColor(255, 255, 255);
    
    if(xHotDeal.isReset == true)
    {
        xHotDeal.remainTime = xHotDeal.hotDealTimeMax;
    }
    
    
    drawTimeSprintf(strTempS,xHotDeal.remainTime,1);
    gDrawStringBold(subTemp[XPOS]+250, subTemp[YPOS]-2, strTempS, VR, 255, 255, 255, 0, 0, 0);
    setFontSize(11);
    
    
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xHotDeal.xTouchExit.xPos, xHotDeal.xTouchExit.yPos, xHotDeal.xTouchExit.wPos, xHotDeal.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    int scaleX = 0;
    int scale = 0;
    int rot = 0;
    int alpha = 0;
    int startAnyCnt = 0;
    int xx = 0;
    int yy = 0;
    
    
    

    
    for(int i=0;i<HOTDEALSLOTMAX;i++)
    {
        if(xHotDeal.xSlot[i].isCardOpen == true)
        {
            xHotDeal.xSlot[i].anyCnt++;
            
            startAnyCnt = xHotDeal.xSlot[i].anyCnt-116;
            if(xHotDeal.xSlot[i].actFlow  == 0)
            {
                if(startAnyCnt >=0)
                {
                    xHotDeal.xSlot[i].actFlow = 1;
                }
            }
        }
        else
        {
            if(xHotDeal.xSlot[i].state != HOTDEAL_STATE_CLOSE)
            {
                xHotDeal.xSlot[i].actFlow = 1;
            }
        }
        
        
        subTemp[XPOS] = px-400+((i%5)*200);
        subTemp[YPOS] = py-104+((i/5)*265);
        
        if(xHotDeal.xSlot[i].actFlow == 0)
        {
            scaleX= 100;
            if(xHotDeal.xSlot[i].anyCnt >= 20)
            {
                switch(xHotDeal.xSlot[i].anyCnt)
                {
                case 20:scaleX=100;break;
                case 21:scaleX=99.6495;break;
                case 22:scaleX=98.519;break;
                case 23:scaleX=96.4613;break;
                case 24:scaleX=93.274;break;
                case 25:scaleX=88.6655;break;
                case 26:scaleX=82.1861;break;
                case 27:scaleX=73.0725;break;
                case 28:scaleX=59.8111;break;
                case 29:scaleX=38.3638;break;
                case 30:scaleX=0;break;
                case 31:scaleX=2.8;break;
                case 32:scaleX=10.4;break;
                case 33:scaleX=21.6;break;
                case 34:scaleX=35.2;break;
                case 35:scaleX=50;break;
                case 36:scaleX=64.8;break;
                case 37:scaleX=78.4;break;
                case 38:scaleX=89.6;break;
                case 39:scaleX=97.2;break;
                case 40:scaleX=100;break;
                case 41:scaleX=91.3162;break;
                case 42:scaleX=77.6475;break;
                case 43:scaleX=62.4446;break;
                case 44:scaleX=46.4901;break;
                case 45:scaleX=30.1894;break;
                case 46:scaleX=13.9626;break;
                case 47:scaleX=0;break;
                case 48:scaleX=5.53936;break;
                case 49:scaleX=19.8251;break;
                case 50:scaleX=39.3586;break;
                case 51:scaleX=60.6414;break;
                case 52:scaleX=80.1749;break;
                case 53:scaleX=94.4606;break;
                case 54:scaleX=100;break;
                case 55:scaleX=86.1233;break;
                case 56:scaleX=65.5614;break;
                case 57:scaleX=43.2465;break;
                case 58:scaleX=20.404;break;
                case 59:scaleX=0;break;
                case 60:scaleX=25.9259;break;
                case 61:scaleX=74.0741;break;
                case 62:scaleX=100;break;
                case 63:scaleX=72.6972;break;
                case 64:scaleX=35.6396;break;
                case 65:scaleX=0;break;
                case 66:scaleX=50;break;
                case 67:scaleX=100;break;
                case 68:scaleX=54.5327;break;
                case 69:scaleX=5;break;
                case 70:scaleX=100;break;
                case 71:scaleX=5;break;
                case 72:scaleX=100;break;
                case 73:scaleX=5;break;
                case 74:scaleX=100;break;
                case 75:scaleX=5;break;
                case 76:scaleX=100;break;
                case 77:scaleX=5;break;
                case 78:scaleX=100;break;
                case 79:scaleX=5;break;
                case 80:scaleX=100;break;
                case 81:scaleX=5;break;
                default:
                    scaleX = 0;
                    break;
                }
            }
            
            xGame.isReSizeDrawXY = true;
            xGame.reSizeX = scaleX;
            xGame.reSizeY = 100;
            drawImage(&imgHotDeal[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgHotDeal[1].w, imgHotDeal[1].h, VH);
            
            
            if(xHotDeal.xSlot[i].anyCnt > 0)
            {
                alpha = 0;
                scale = 100;
                switch(xHotDeal.xSlot[i].anyCnt)
                {
                case 1:alpha=100;scale=103;break;
                case 2:alpha=97.2;scale=121.556;break;
                case 3:alpha=89.6;scale=130.476;break;
                case 4:alpha=78.4;scale=136.154;break;
                case 5:alpha=64.8;scale=140.117;break;
                case 6:alpha=50;scale=142.962;break;
                case 7:alpha=35.2;scale=145;break;
                case 8:alpha=21.6;scale=146.417;break;
                case 9:alpha=10.4;scale=147.336;break;
                case 10:alpha=2.8;scale=147.843;break;
                case 11:alpha=0;scale=148;break;
                }
                
                setAlpha(alpha*ALPHA_MAX/100);
                if(scale != 100)
                {
                    xGame.isReSizeDraw = true;
                    xGame.reSize = scale;
                }
                drawImage(&imgHotDeal[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgHotDeal[4].w, imgHotDeal[4].h, VH);
                xGame.isReSizeDraw = false;
                setAlpha(ALPHA_MAX);
                drawImage(&imgHotDeal[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgHotDeal[4].w, imgHotDeal[4].h, VH);
            }
            
            xGame.isReSizeDrawXY = false;
            
            
            startAnyCnt = xHotDeal.xSlot[i].anyCnt-50;
            //이펙트(1a)
            if(startAnyCnt >=0)
            {
                switch(startAnyCnt)
                {
                case 0:scale=700.0;rot=119;break;
                case 1:scale=628.9;rot=119;break;
                case 2:scale=581.7;rot=119;break;
                case 3:scale=545.0;rot=119;break;
                case 4:scale=514.1;rot=119;break;
                case 5:scale=487.1;rot=119;break;
                case 6:scale=462.9;rot=119;break;
                case 7:scale=440.9;rot=119;break;
                case 8:scale=420.7;rot=119;break;
                case 9:scale=402.0;rot=119;break;
                case 10:scale=384.5;rot=119;break;
                case 11:scale=368.2;rot=119;break;
                case 12:scale=352.7;rot=119;break;
                case 13:scale=338.2;rot=119;break;
                case 14:scale=324.4;rot=119;break;
                case 15:scale=311.3;rot=119;break;
                case 16:scale=298.8;rot=119;break;
                case 17:scale=286.9;rot=119;break;
                case 18:scale=275.5;rot=119;break;
                case 19:scale=264.7;rot=119;break;
                case 20:scale=254.2;rot=119;break;
                case 21:scale=244.2;rot=119;break;
                case 22:scale=234.6;rot=119;break;
                case 23:scale=225.4;rot=119;break;
                case 24:scale=216.6;rot=119;break;
                case 25:scale=208.0;rot=119;break;
                case 26:scale=199.8;rot=119;break;
                case 27:scale=191.9;rot=119;break;
                case 28:scale=184.2;rot=119;break;
                case 29:scale=176.8;rot=119;break;
                case 30:scale=169.7;rot=119;break;
                case 31:scale=162.9;rot=119;break;
                case 32:scale=156.2;rot=119;break;
                case 33:scale=149.8;rot=119;break;
                case 34:scale=143.6;rot=119;break;
                case 35:scale=137.6;rot=119;break;
                case 36:scale=131.9;rot=119;break;
                case 37:scale=126.3;rot=119;break;
                case 38:scale=120.9;rot=119;break;
                case 39:scale=115.6;rot=119;break;
                case 40:scale=110.6;rot=119;break;
                case 41:scale=105.7;rot=119;break;
                case 42:scale=100.9;rot=119;break;
                case 43:scale=96.4;rot=119;break;
                case 44:scale=91.9;rot=119;break;
                case 45:scale=87.7;rot=119;break;
                case 46:scale=83.5;rot=119;break;
                case 47:scale=79.5;rot=119;break;
                case 48:scale=75.7;rot=119;break;
                case 49:scale=71.9;rot=119;break;
                case 50:scale=68.3;rot=119;break;
                case 51:scale=64.8;rot=119;break;
                case 52:scale=61.5;rot=119;break;
                case 53:scale=58.2;rot=119;break;
                case 54:scale=55.1;rot=119;break;
                case 55:scale=52.1;rot=119;break;
                case 56:scale=49.2;rot=119;break;
                case 57:scale=46.4;rot=119;break;
                case 58:scale=43.7;rot=119;break;
                case 59:scale=41.1;rot=119;break;
                case 60:scale=38.6;rot=119;break;
                case 61:scale=36.1;rot=119;break;
                case 62:scale=33.8;rot=119;break;
                }
                if(startAnyCnt < 63)
                {
                    if(scale != 100)
                    {
                        xGame.isReSizeDraw = true;
                        xGame.reSize = scale;
                    }
                    
                    if(rot != 0)
                    {
                        xGame.isRotate = true;
                        xGame.rotateNum = rot;
                    }
                    xGame.isBlend = true;
                    xGame.blendType = BLEND_ADDP;
                    drawImage(&imgNewDancerEff[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgNewDancerEff[0].w, imgNewDancerEff[0].h, VH);
                    xGame.isBlend = false;
                    xGame.isReSizeDraw = false;
                    xGame.isRotate = false;
                }
                
                //1a
                switch(startAnyCnt)
                {
                case 0:scale=300.0;rot=-32;break;
                case 1:scale=262.7;rot=-32;break;
                case 2:scale=239.5;rot=-32;break;
                case 3:scale=221.5;rot=-32;break;
                case 4:scale=206.5;rot=-32;break;
                case 5:scale=193.5;rot=-32;break;
                case 6:scale=181.9;rot=-32;break;
                case 7:scale=171.4;rot=-32;break;
                case 8:scale=161.9;rot=-32;break;
                case 9:scale=153.0;rot=-32;break;
                case 10:scale=144.9;rot=-32;break;
                case 11:scale=137.2;rot=-32;break;
                case 12:scale=130.1;rot=-32;break;
                case 13:scale=123.4;rot=-32;break;
                case 14:scale=117.0;rot=-32;break;
                case 15:scale=111.1;rot=-32;break;
                case 16:scale=105.4;rot=-32;break;
                case 17:scale=100.1;rot=-32;break;
                case 18:scale=95.0;rot=-32;break;
                case 19:scale=90.1;rot=-32;break;
                case 20:scale=85.5;rot=-32;break;
                case 21:scale=81.1;rot=-32;break;
                case 22:scale=76.9;rot=-32;break;
                case 23:scale=72.9;rot=-32;break;
                case 24:scale=69.1;rot=-32;break;
                case 25:scale=65.5;rot=-32;break;
                case 26:scale=62.0;rot=-32;break;
                case 27:scale=58.6;rot=-32;break;
                case 28:scale=55.4;rot=-32;break;
                case 29:scale=52.4;rot=-32;break;
                case 30:scale=49.5;rot=-32;break;
                case 31:scale=46.7;rot=-32;break;
                case 32:scale=44.0;rot=-32;break;
                case 33:scale=41.4;rot=-32;break;
                case 34:scale=38.9;rot=-32;break;
                case 35:scale=36.6;rot=-32;break;
                case 36:scale=34.3;rot=-32;break;
                case 37:scale=32.2;rot=-32;break;
                case 38:scale=30.1;rot=-32;break;
                case 39:scale=28.2;rot=-32;break;
                case 40:scale=26.3;rot=-32;break;
                case 41:scale=24.5;rot=-32;break;
                case 42:scale=22.8;rot=-32;break;
                case 43:scale=21.1;rot=-32;break;
                case 44:scale=19.6;rot=-32;break;
                case 45:scale=18.1;rot=-32;break;
                case 46:scale=16.7;rot=-32;break;
                case 47:scale=15.3;rot=-32;break;
                case 48:scale=14.1;rot=-32;break;
                case 49:scale=12.8;rot=-32;break;
                case 50:scale=11.7;rot=	-32;break;
                case 51:scale=10.6;rot=-32;break;
                case 52:scale=9.6;rot=-32;break;
                case 53:scale=8.6;rot=-32;break;
                case 54:scale=7.7;rot=-32;break;
                case 55:scale=6.9;rot=-32;break;
                case 56:scale=6.1;rot=-32;break;
                case 57:scale=5.4;rot=-32;break;
                case 58:scale=4.7;rot=-32;break;
                case 59:scale=4.0;rot=-32;break;
                case 60:scale=3.5;rot=-32;break;
                case 61:scale=2.9;rot=-32;break;
                case 62:scale=2.4;rot=-32;break;
                }
                if(startAnyCnt < 63)
                {
                    if(scale != 100)
                    {
                        xGame.isReSizeDraw = true;
                        xGame.reSize = scale;
                    }
                    
                    if(rot != 0)
                    {
                        xGame.isRotate = true;
                        xGame.rotateNum = rot;
                    }
                    xGame.isBlend = true;
                    xGame.blendType = BLEND_ADDP;
                    drawImage(&imgNewDancerEff[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgNewDancerEff[0].w, imgNewDancerEff[0].h, VH);
                    xGame.isBlend = false;
                    xGame.isReSizeDraw = false;
                    xGame.isRotate = false;
                }
                
                //2a
                switch(startAnyCnt)
                {
                case 0:scale=200.0;rot=118;break;
                case 1:scale=168.7;rot=118;break;
                case 2:scale=150.4;rot=118;break;
                case 3:scale=136.5;rot=118;break;
                case 4:scale=125.0;rot=118;break;
                case 5:scale=115.1;rot=118;break;
                case 6:scale=106.3;rot=118;break;
                case 7:scale=98.5;rot=118;break;
                case 8:scale=91.4;rot=118;break;
                case 9:scale=84.9;rot=118;break;
                case 10:scale=79.0;rot=118;break;
                case 11:scale=73.5;rot=118;break;
                case 12:scale=68.4;rot=118;break;
                case 13:scale=63.6;rot=118;break;
                case 14:scale=59.2;rot=118;break;
                case 15:scale=55.1;rot=118;break;
                case 16:scale=51.2;rot=118;break;
                case 17:scale=47.6;rot=118;break;
                case 18:scale=44.1;rot=118;break;
                case 19:scale=40.9;rot=118;break;
                case 20:scale=37.9;rot=118;break;
                case 21:scale=35.1;rot=118;break;
                case 22:scale=32.4;rot=118;break;
                case 23:scale=29.9;rot=118;break;
                case 24:scale=27.5;rot=118;break;
                case 25:scale=25.3;rot=118;break;
                case 26:scale=23.2;rot=118;break;
                case 27:scale=21.2;rot=118;break;
                case 28:scale=19.3;rot=118;break;
                case 29:scale=17.6;rot=118;break;
                case 30:scale=15.9;rot=118;break;
                case 31:scale=14.4;rot=118;break;
                case 32:scale=13.0;rot=118;break;
                case 33:scale=11.6;rot=118;break;
                case 34:scale=10.4;rot=118;break;
                case 35:scale=9.2;rot=118;break;
                case 36:scale=8.1;rot=118;break;
                case 37:scale=7.1;rot=118;break;
                case 38:scale=6.2;rot=118;break;
                case 39:scale=5.3;rot=118;break;
                case 40:scale=4.5;rot=118;break;
                case 41:scale=3.8;rot=118;break;
                case 42:scale=3.2;rot=118;break;
                case 43:scale=2.6;rot=118;break;
                case 44:scale=2.1;rot=118;break;
                case 45:scale=1.6;rot=118;break;
                case 46:scale=1.2;rot=118;break;
                case 47:scale=0.9;rot=118;break;
                case 48:scale=0.6;rot=118;break;
                case 49:scale=0.4;rot=118;break;
                case 50:scale=0.2;rot=118;break;
                case 51:scale=0.1;rot=118;break;
                case 52:scale=0.0;rot=118;break;
                case 53:scale=0.0;rot=118;break;
                }
                if(startAnyCnt < 54)
                {
                    if(scale != 100)
                    {
                        xGame.isReSizeDraw = true;
                        xGame.reSize = scale;
                    }
                    
                    if(rot != 0)
                    {
                        xGame.isRotate = true;
                        xGame.rotateNum = rot;
                    }
                    xGame.isBlend = true;
                    xGame.blendType = BLEND_ADDP;
                    drawImage(&imgNewDancerEff[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgNewDancerEff[1].w, imgNewDancerEff[1].h, VH);
                    xGame.isBlend = false;
                    xGame.isReSizeDraw = false;
                    xGame.isRotate = false;
                }
                
                //2a
                switch(startAnyCnt)
                {
                    case 0:scale=500.0;rot=317;break;
                    case 1:scale=392.2;rot=317;break;
                    case 2:scale=334.7;rot=317;break;
                    case 3:scale=291.9;rot=317;break;
                    case 4:scale=257.2;rot=317;break;
                    case 5:scale=228.0;rot=317;break;
                    case 6:scale=202.7;rot=317;break;
                    case 7:scale=180.5;rot=317;break;
                    case 8:scale=160.8;rot=317;break;
                    case 9:scale=143.2;rot=317;break;
                    case 10:scale=127.4;rot=317;break;
                    case 11:scale=113.2;rot=317;break;
                    case 12:scale=100.2;rot=317;break;
                    case 13:scale=88.5;rot=317;break;
                    case 14:scale=77.9;rot=317;break;
                    case 15:scale=68.2;rot=317;break;
                    case 16:scale=59.5;rot=317;break;
                    case 17:scale=51.5;rot=317;break;
                    case 18:scale=44.3;rot=317;break;
                    case 19:scale=37.8;rot=317;break;
                    case 20:scale=32.0;rot=317;break;
                    case 21:scale=26.7;rot=317;break;
                    case 22:scale=22.1;rot=317;break;
                    case 23:scale=17.9;rot=317;break;
                    case 24:scale=14.3;rot=317;break;
                    case 25:scale=11.1;rot=317;break;
                    case 26:scale=8.3;rot=317;break;
                    case 27:scale=6.0;rot=317;break;
                    case 28:scale=4.1;rot=317;break;
                    case 29:scale=2.6;rot=317;break;
                    case 30:scale=1.4;rot=317;break;
                    case 31:scale=0.6;rot=317;break;
                    case 32:scale=0.2;rot=317;break;
                    case 33:scale=0.0;rot=317;break;
                }
                
                if(startAnyCnt < 34)
                {
                    if(scale != 100)
                    {
                        xGame.isReSizeDraw = true;
                        xGame.reSize = scale;
                    }
                    
                    if(rot != 0)
                    {
                        xGame.isRotate = true;
                        xGame.rotateNum = rot;
                    }
                    xGame.isBlend = true;
                    xGame.blendType = BLEND_ADDP;
                    drawImage(&imgNewDancerEff[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgNewDancerEff[1].w, imgNewDancerEff[1].h, VH);
                    xGame.isBlend = false;
                    xGame.isReSizeDraw = false;
                    xGame.isRotate = false;
                }
            }
            //3a
            if(startAnyCnt >= 30)
            {
                switch(startAnyCnt)
                {
                    case 35:scale=499.8;xx=-12.5;yy=-15.0;rot=14.5;break;
                    case 30:scale=154.0;xx=0;yy=0;rot=0;break;
                    case 31:scale=373.2;xx=9.0;yy=-23.5;rot=0.3;break;
                    case 32:scale=458.9;xx=-5.5;yy=27.5;rot=1.5;break;
                    case 33:scale=491.6;xx=-4.0;yy=-37.5;rot=3.8;break;
                    case 34:scale=500.0;xx=7.0;yy=19.0;rot=7.8;break;
                    case 36:scale=499.3;xx=13.5;yy=6.0;rot=24.9;break;
                    case 37:scale=498.5;xx=-9.0;yy=4.0;rot=38.9;break;
                    case 38:scale=497.2;xx=8.5;yy=-2.0;rot=53.3;break;
                    case 39:scale=495.6;xx=-2.0;yy=4.0;rot=65.5;break;
                    case 40:scale=493.6;xx=0;yy=0;rot=75.3;break;
                    case 41:scale=491.1;xx=0;yy=0;rot=83.3;break;
                    case 42:scale=488.1;xx=0;yy=0;rot=89.8;break;
                    case 43:scale=484.7;xx=0;yy=0;rot=95.4;break;
                    case 44:scale=480.8;xx=0;yy=0;rot=100.1;break;
                    case 45:scale=476.3;xx=0;yy=0;rot=104.2;break;
                    case 46:scale=471.2;xx=0;yy=0;rot=107.8;break;
                    case 47:scale=465.4;xx=0;yy=0;rot=110.9;break;
                    case 48:scale=459.0;xx=0;yy=0;rot=113.7;break;
                    case 49:scale=451.9;xx=0;yy=0;rot=116.1;break;
                    case 50:scale=443.9;xx=0;yy=0;rot=118.2;break;
                    case 51:scale=435.1;xx=0;yy=0;rot=120.1;break;
                    case 52:scale=425.3;xx=0;yy=0;rot=121.8;break;
                    case 53:scale=414.5;xx=0;yy=0;rot=123.3;break;
                    case 54:scale=402.5;xx=0;yy=0;rot=124.6;break;
                    case 55:scale=389.2;xx=0;yy=0;rot=125.8;break;
                    case 56:scale=374.4;xx=0;yy=0;rot=126.8;break;
                    case 57:scale=357.8;xx=0;yy=0;rot=127.7;break;
                    case 58:scale=339.3;xx=0;yy=0;rot=128.5;break;
                    case 59:scale=318.4;xx=0;yy=0;rot=129.1;break;
                    case 60:scale=294.5;xx=0;yy=0;rot=129.6;break;
                    case 61:scale=267.1;xx=0;yy=0;rot=130.1;break;
                    case 62:scale=234.8;xx=0;yy=0;rot=130.4;break;
                    case 63:scale=195.8;xx=0;yy=0;rot=130.7;break;
                    case 64:scale=146.4;xx=0;yy=0;rot=130.9;break;
                    case 65:scale=77.6;xx=0;yy=0;rot=131.0;break;
                    case 66:scale=0.0;xx=0;yy=0;rot=131.0;break;
                }
                if(startAnyCnt < 67)
                {
                    if(scale != 100)
                    {
                        xGame.isReSizeDraw = true;
                        xGame.reSize = scale;
                    }
                    
                    if(rot != 0)
                    {
                        xGame.isRotate = true;
                        xGame.rotateNum = rot;
                    }
                    xGame.isBlend = true;
                    xGame.blendType = BLEND_ADDP;
                    drawImage(&imgNewDancerEff[2], subTemp[XPOS]+xx, subTemp[YPOS]+yy, 0, 0, imgNewDancerEff[2].w, imgNewDancerEff[2].h, VH);
                    xGame.isBlend = false;
                    xGame.isReSizeDraw = false;
                    xGame.isRotate = false;
                }
            }
        }
        else if(xHotDeal.xSlot[i].actFlow > 0)
        {
            drawImage(&imgHotDeal[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgHotDeal[2].w, imgHotDeal[2].h, VH);
            
            
            int price = 0;
            int salePrice = 0;
            char strName[128];
            
            switch(xHotDeal.xSlot[i].itemType)
            {
            case HOTDEAL_ITEMTYPE_INTERIOR:
                setMapData(xHotDeal.xSlot[i].itemCode);
                setDrawObjCenter(xMap.type,xMap.listNum);
                if(xDrawObjCenter.reSize != 100)
                {
                    xGame.fgameScaleCx =subTemp[XPOS];
                    xGame.fgameScaleCy =lcdH-(subTemp[YPOS]-40);
                    xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
                }
                drawObj(subTemp[XPOS]+xDrawObjCenter.w,(subTemp[YPOS]-40)+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
                xGame.fgameScale = 1.0f;
                xGame.fgameScaleCx =cx;
                xGame.fgameScaleCy =cy;
                
                price = xObj.xObjData[xMap.type][xMap.listNum].price.oriData;
                sprintf(strName, "%s",xObj.xObjData[xMap.type][xMap.listNum].strName);
                break;
            case HOTDEAL_ITEMTYPE_CASTING:
                switch(xHotDeal.xSlot[i].itemCode)
                {
                case 0:     //S급 캐스팅권
                    drawImage(&imgCastingSIcon, subTemp[XPOS], subTemp[YPOS]-40, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
                    sprintf(strName, "S급 모델 캐스팅");
                    break;
                case 1:     //A~S급 캐스팅권
                    drawImage(&imgCastingASIcon, subTemp[XPOS], subTemp[YPOS]-40, 0, 0, imgCastingASIcon.w, imgCastingASIcon.h, VH);
                    sprintf(strName, "A~S급 모델 캐스팅");
                    break;
                case 2:     //A급 캐스팅권
                    drawImage(&imgCastingAIcon, subTemp[XPOS], subTemp[YPOS]-40, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
                    sprintf(strName, "A급 모델 캐스팅");
                    break;
                case 3:     //프리미엄 캐스팅권
                    drawImage(&imgGiftModelCastingBSIcon, subTemp[XPOS], subTemp[YPOS]-40, 0, 0, imgGiftModelCastingBSIcon.w, imgGiftModelCastingBSIcon.h, VH);
                    sprintf(strName, "고급 캐스팅");
                    break;
                case 4:     //일반 캐스팅권
                    drawImage(&imgGiftModelCastingCAIcon, subTemp[XPOS], subTemp[YPOS]-40, 0, 0, imgGiftModelCastingCAIcon.w, imgGiftModelCastingCAIcon.h, VH);
                    sprintf(strName, "일반 캐스팅");
                    break;
                }
                price = xHotDeal.castingPrice[xHotDeal.xSlot[i].itemCode];
                break;
            }
            
            
            gSetColor(87, 50, 6);
            setFontSize(16);
            gDrawString(subTemp[XPOS], subTemp[YPOS]+50, strName, VH);
            setFontSize(11);
            
            if(xHotDeal.xSlot[i].state == HOTDEAL_STATE_BUY)
            {
                drawImage(&imgHotDeal[7], subTemp[XPOS], subTemp[YPOS]-37 , 0, 0, imgHotDeal[7].w, imgHotDeal[7].h, VH);
                
                gSetColor(87, 50, 6);
                setFontSize(22);
                gDrawString(subTemp[XPOS], subTemp[YPOS]+89, "구매완료", VH);
                setFontSize(11);
            }
            else
            {
                salePrice = price*(100 - xHotDeal.xSlot[i].salePer)/100;
                
                
                if(salePrice <= 0)
                    salePrice = 1;
                
                
                int saleImgNum = (xHotDeal.xSlot[i].salePer/10)-1;
                
                if(saleImgNum != DONT)
                {
                    drawImage(&imgHotDeal[5], subTemp[XPOS]-60, subTemp[YPOS]-100, imgHotDeal[5].w/9*saleImgNum, 0, imgHotDeal[5].w/9, imgHotDeal[5].h, VH);
                }
                
                setFontSize(17);
                sprintf(strTempS, "%d",price);
                int ww = getLabelWidth(strTempS,17, false);
                
                gSetColor(161, 119, 70);
                xGame.isReSizeDraw = true;
                xGame.reSize = 60;
                drawIcon(subTemp[XPOS]-8-(ww/2), subTemp[YPOS]+80, ICON_TYPE_LOOK);
                xGame.isReSizeDraw = false;
                gDrawString(subTemp[XPOS]+10-(ww/2), subTemp[YPOS]+80, strTempS, VL);
                setFontSize(11);
                drawImage(&imgHotDeal[6], subTemp[XPOS], subTemp[YPOS]+80, 0, 0, imgHotDeal[6].w, imgHotDeal[6].h, VH);
                
                setFontSize(22);
                sprintf(strTempS, "%d",salePrice);
                ww = getLabelWidth(strTempS,25, false);
                
                gSetColor(87, 50, 6);
                xGame.isReSizeDraw = true;
                xGame.reSize = 80;
                drawIcon(subTemp[XPOS]-10-(ww/2), subTemp[YPOS]+103, ICON_TYPE_LOOK);
                xGame.isReSizeDraw = false;
                gDrawString(subTemp[XPOS]+12-(ww/2), subTemp[YPOS]+103, strTempS, VL);
                setFontSize(11);
            }
        }
        
        xHotDeal.xTouchSlot[i].wPos = imgHotDeal[1].w;
        xHotDeal.xTouchSlot[i].hPos = imgHotDeal[1].h;
        xHotDeal.xTouchSlot[i].xPos = subTemp[XPOS]-xHotDeal.xTouchSlot[i].wPos/2;
        xHotDeal.xTouchSlot[i].yPos = subTemp[YPOS]-xHotDeal.xTouchSlot[i].hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xHotDeal.xTouchSlot[i].xPos, xHotDeal.xTouchSlot[i].yPos, xHotDeal.xTouchSlot[i].wPos, xHotDeal.xTouchSlot[i].hPos);
        setAlpha(ALPHA_MAX);
         */
    }
}


void keyHotDeal(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        bool isSlot = false;
        int selectSlot = 0;
        
        for(int k=0;k<HOTDEALSLOTMAX;k++)
        {
            if(touchCheck(&xHotDeal.xTouchSlot[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isSlot = true;
                selectSlot = k;
                break;
            }
        }
        
        if(touchCheck(&xHotDeal.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            hotDealFreeLoad(false);
            xWorldMap.state = WORLDMAP_STATE_PLAY;
        }
        else if(isSlot == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xHotDeal.selectSlot = selectSlot;
            
            
            int sellPrice = 0;
            
            switch(xHotDeal.xSlot[xHotDeal.selectSlot].state)
            {
            case HOTDEAL_STATE_CLOSE:
                setHotDealSlot(xHotDeal.selectSlot);
                break;
            case HOTDEAL_STATE_OPEN:
                
                
                switch(xHotDeal.xData[xHotDeal.hotDealCode][xHotDeal.selectSlot].itemType)
                {
                case HOTDEAL_ITEMTYPE_INTERIOR:
                    setMapData(xHotDeal.xSlot[xHotDeal.selectSlot].itemCode);
                    sellPrice = xObj.xObjData[xMap.type][xMap.listNum].price.oriData;
                    break;
                case HOTDEAL_ITEMTYPE_CASTING:
                    sellPrice = xHotDeal.castingPrice[xHotDeal.xSlot[xHotDeal.selectSlot].itemCode];
                    break;
                }
                sellPrice = (sellPrice*(100-xHotDeal.xSlot[xHotDeal.selectSlot].salePer)/100);
                    
                    
                if(sellPrice <= 0)
                    sellPrice = 1;
                    
                    
                //구매
                if(xHotDeal.remainTime <= 0)
                {
                    setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
                    sprintf(xPopup.strText, "구매 가능한 시간이 지났습니다.");
                }
                else if(xHotDeal.xSlot[xHotDeal.selectSlot].isCardOpen == true
                       && xHotDeal.xSlot[xHotDeal.selectSlot].actFlow == 0)
                {
                    
                }
                else if(xSaveTemp.cash.oriData < sellPrice)
                {
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "룩이 부족합니다.");
                }
                else
                {
                    setPopup(POPUP_SHOP_HOTDEALBUY, playState, playState, 0, DONT);
                }
                
                break;
            }
        }
    }
}



int isInteriorUseCount(int code)
{
    int resultCnt = 0;
    for(int k=0;k<xInventoryInterior.totalNum;k++)
    {
        if(xInventoryInterior.itemCode[k] == code)
        {
            resultCnt ++;
        }
    }
    
    
    //현재 설치된 인터리어타입파악
    for(int floor=0;floor<xMap.totalFloor;floor++)
    {
        for (int y = xMap.shopPointY; y < xMap.shopPointY+xMap.shopPointH; y++)
        {
            for (int x = xMap.shopPointX; x < xMap.shopPointX+xMap.shopPointW; x++)
            {
                if(code == xMap.data[floor][MAP_TYPE_OBJ][x][y]
                   || -code == xMap.data[floor][MAP_TYPE_OBJ][x][y])
                {
                    resultCnt ++;
                }
            }
        }
        
        //등록된 벽아이템(레이어로 보기때문에 문,쇼윈도 포함이 되어있음 따로 처리 불필요)
        for(int w=0;w<xMap.shopPointW;w++)
        {
            if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
            {
                if(code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]
                   || -code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1])
                {
                    resultCnt ++;
                }
                
            }
        }
        for(int h=0;h<xMap.shopPointH;h++)
        {
            
            if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
            {
                if(code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]
                   || -code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h])
                {
                    resultCnt ++;
                }
            }
        }
    }
    return resultCnt;
}

bool isInteriorUse(int code)
{

    for(int k=0;k<xInventoryInterior.totalNum;k++)
    {
        if(xInventoryInterior.itemCode[k] == code)
            return true;
    }
    
    
    //현재 설치된 인터리어타입파악
    for(int floor=0;floor<xMap.totalFloor;floor++)
    {
        for (int y = xMap.shopPointY; y < xMap.shopPointY+xMap.shopPointH; y++)
        {
            for (int x = xMap.shopPointX; x < xMap.shopPointX+xMap.shopPointW; x++)
            {
                if(code == xMap.data[floor][MAP_TYPE_OBJ][x][y]
                   || -code == xMap.data[floor][MAP_TYPE_OBJ][x][y])
                    return true;
            }
        }
        
        //등록된 벽아이템(레이어로 보기때문에 문,쇼윈도 포함이 되어있음 따로 처리 불필요)
        for(int w=0;w<xMap.shopPointW;w++)
        {
            if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1] != 0)
            {
                if(code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1]
                   || -code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX+w][xMap.shopPointY-1])
                    return true;
                
            }
        }
        for(int h=0;h<xMap.shopPointH;h++)
        {
            
            if(xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h] != 0)
            {
                if(code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h]
                   || -code == xMap.data[floor][MAP_TYPE_WALL1][xMap.shopPointX-1][xMap.shopPointY+h])
                    return true;
            }
        }
    }
    
    
    return false;
}


int getBlinkAlpha()
{
    switch(gameCnt%50)
    {
    case 0:return	 100*ALPHA_MAX/100;break;
    case 1:return	 90*ALPHA_MAX/100;break;
    case 2:return	 80*ALPHA_MAX/100;break;
    case 3:return	 70*ALPHA_MAX/100;break;
    case 4:return	 60*ALPHA_MAX/100;break;
    case 5:return	 50*ALPHA_MAX/100;break;
    case 6:return	 40*ALPHA_MAX/100;break;
    case 7:return	 30*ALPHA_MAX/100;break;
    case 8:return	 20*ALPHA_MAX/100;break;
    case 9:return	 10*ALPHA_MAX/100;break;
    default:return	 0;break;
    }
    return 0;
}

void makeBlinkEff2(int x,int y,int type)
{
    for(int i=0;i<BLINK2EFFMAX;i++)
    {
        if(xBlinkEff2[i].state == BLINK2_STATE_DONT)
        {
            xBlinkEff2[i].x = x;
            xBlinkEff2[i].y = y;
            xBlinkEff2[i].type = type;  //0파티보상정보
            xBlinkEff2[i].anyCnt = 0;
            xBlinkEff2[i].state = BLINK2_STATE_PLAY;
            break;
        }
    }
}


void drawBlinkEff2(int type)
{
    int scale;
    
    for(int i=0;i<BLINK2EFFMAX;i++)
    {
        if(xBlinkEff2[i].state == BLINK2_STATE_PLAY)
        {
            for(int prcI=0;prcI<xGame.prcCnt;prcI++)
            {
                switch(++xBlinkEff2[i].anyCnt)
                {
                case 0:scale=0;break;
                case 1:scale=2;break;
                case 2:scale=10;break;
                case 3:scale=26;break;
                case 4:scale=60;break;
                case 5:scale=141;break;
                case 6:scale=140;break;
                case 7:scale=137;break;
                case 8:scale=130;break;
                case 9:scale=115;break;
                case 10:scale=93;break;
                case 11:scale=73;break;
                case 12:scale=58;break;
                case 13:scale=47;break;
                case 14:scale=38;break;
                case 15:scale=31;break;
                case 16:scale=25;break;
                case 17:scale=21;break;
                case 18:scale=17;break;
                case 19:scale=13;break;
                case 20:scale=11;break;
                case 21:scale=8;break;
                case 22:scale=6;break;
                case 23:scale=5;break;
                case 24:scale=3;break;
                case 25:scale=2;break;
                case 26:scale=1;break;
                case 27:scale=1;break;
                default:scale=0;
                    xBlinkEff2[i].state = BLINK2_STATE_DONT;
                    break;
                }
            }
            
            if(scale > 0 && xBlinkEff2[i].type == type)
            {
                xGame.isReSizeDraw = true;
                xGame.reSize = scale;
                drawImage(&imgBlinkEff2, xBlinkEff2[i].x, xBlinkEff2[i].y, 0, 0, imgBlinkEff2.w, imgBlinkEff2.h, VH);
                xGame.isReSizeDraw = false;
            }
        }
    }
}


void addProductionMenuLatest(int code)
{
    bool isNew = true;
    for(int k=0;k<PRODUCTIONMENULATESTMAX;k++)
    {
        //같은게 잇을경우
        if(xProductionMenuLatestSave.code[k] == code)
        {
            isNew = false;
            for(int z=k;z>0;z--)
            {
                xProductionMenuLatestSave.code[z] = xProductionMenuLatestSave.code[z-1];
            }
            xProductionMenuLatestSave.code[0] = code;
            break;
        }
    }
    
    if(isNew == true)
    {
        for(int z=PRODUCTIONMENULATESTMAX-1;z>0;z--)
        {
            xProductionMenuLatestSave.code[z] = xProductionMenuLatestSave.code[z-1];
        }
        xProductionMenuLatestSave.code[0] = code;
    }
}
void setProductionMenuLatest()
{
    for(int k=0;k<PRODUCTIONMENULATESTMAX;k++)
    {
        xProductionMenuLatest.code[k] = xProductionMenuLatestSave.code[k];
    }
}

void drawProductionMenuLatest()
{
    int px = lcdW-102;
    int py = cy+40;
    
    drawImage(&imgProductionLatest, px, py, 0, 0, imgProductionLatest.w, imgProductionLatest.h, VH);
    
    
    
    for(int k=0;k<PRODUCTIONMENULATESTMAX;k++)
    {
        subTemp[XPOS] = px-24+(72*(k%2));
        subTemp[YPOS] = py-182+(96*(k/2));
        
        if(xProductionMenuLatest.code[k] != DONT)
        {
            setMapData(xProductionMenuLatest.code[k]);	//xMap.rever,xMap.type,xMap.listNum 구하기
            drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,40);
            
            drawTimeSprintf(strTempS,xFashionData[xMap.type][xMap.listNum].makeTime.oriData,2);
            gSetColor(44, 27, 26);
            setFontSize(13);
            gDrawString(subTemp[XPOS],subTemp[YPOS]+40, strTempS, VH);
            setFontSize(11);
            
        }
        
        xProductionMenuLatest.xTouchSlot[k].wPos = 80;
        xProductionMenuLatest.xTouchSlot[k].hPos = 80;
        xProductionMenuLatest.xTouchSlot[k].xPos = subTemp[XPOS]-xProductionMenuLatest.xTouchSlot[k].wPos/2;
        xProductionMenuLatest.xTouchSlot[k].yPos = subTemp[YPOS]-xProductionMenuLatest.xTouchSlot[k].hPos/2;
        
		/*
		gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xProductionMenuLatest.xTouchSlot[k].xPos, xProductionMenuLatest.xTouchSlot[k].yPos, xProductionMenuLatest.xTouchSlot[k].wPos, xProductionMenuLatest.xTouchSlot[k].hPos);
        setAlpha(ALPHA_MAX);
		 */
		
    }
}




void setRivalWorldMap()
{
    rivalWorldMapFreeLoad(true);
    xWorldMap.state = WORLDMAP_STATE_RIVALWORLDMAP;
}

void rivalWorldMapFreeLoad(M_Boolean isLoad)
{
    if(isLoad == TRUE)
    {
        loadImg("rivalworldmap0.png", &imgRivalWorldMap[0]);
        loadImg("rivalworldmap1.png", &imgRivalWorldMap[1]);
        loadImg("rivalworldmap2.png", &imgRivalWorldMap[2]);
        loadImg("rivalworldmap3.png", &imgRivalWorldMap[3]);
        loadImg("rivalworldmap4.png", &imgRivalWorldMap[4]);
        loadImg("rivalworldmap5.png", &imgRivalWorldMap[5]);
        
        for(int k=0;k<32;k++)
        {
            sprintf(strTempS, "rivalworldmapslot%d.png",k);
            loadImgDocuments(strTempS, &imgRivalWorldMapSlot[k]);
        }
    }
    else
    {
        freeImg(&imgRivalWorldMap[0]);
        freeImg(&imgRivalWorldMap[1]);
        freeImg(&imgRivalWorldMap[2]);
        freeImg(&imgRivalWorldMap[3]);
        freeImg(&imgRivalWorldMap[4]);
        freeImg(&imgRivalWorldMap[5]);
        
        
        for(int k=0;k<32;k++)
        {
            freeImg(&imgRivalWorldMapSlot[k]);
        }
    }
}



void drawRivalWorldMap()
{
    int px = cx;
    int py = cy;
    
    drawImage(&imgRivalWorldMap[0], px, py, 0, 0, imgRivalWorldMap[0].w, imgRivalWorldMap[0].h, VH);
    
    
    
    subTemp[XPOS] = px+516;
    subTemp[YPOS] = py-280;
    
    xRivalWorldMap.xTouchExit.wPos = 80;
    xRivalWorldMap.xTouchExit.hPos = 80;
    xRivalWorldMap.xTouchExit.xPos = subTemp[XPOS]-xRivalWorldMap.xTouchExit.wPos/2;
    xRivalWorldMap.xTouchExit.yPos = subTemp[YPOS]-xRivalWorldMap.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xRivalWorldMap.xTouchExit.xPos, xRivalWorldMap.xTouchExit.yPos, xRivalWorldMap.xTouchExit.wPos, xRivalWorldMap.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    
    
    //세부메뉴
    xRivalWorldMap.xDragScroll.totalNum = xRival.totalWorldMap;
    xRivalWorldMap.xDragScroll.posGab = 230;
    xRivalWorldMap.xDragScroll.endPos = -(((xRivalWorldMap.xDragScroll.totalNum-5)*xRivalWorldMap.xDragScroll.posGab));
    if(xRivalWorldMap.xDragScroll.totalNum < 5)
        xRivalWorldMap.xDragScroll.endPos = 0;
    else
        xRivalWorldMap.xDragScroll.endPos -= 170;
    
    dragScrollPrc(&xRivalWorldMap.xDragScroll,1,FALSE);
    int iMax = xRivalWorldMap.xDragScroll.totalNum;
    int pos = 0;
    for(int i=0;i<iMax;i++)
    {
        pos = xRivalWorldMap.xDragScroll.pos+(xRivalWorldMap.xDragScroll.posGab*i);
        subTemp[XPOS] = px-380+pos;
        subTemp[YPOS] = py+50;
        
        if(subTemp[XPOS] < -xRivalWorldMap.xDragScroll.posGab)
            continue;
        if(subTemp[XPOS] > lcdW+xRivalWorldMap.xDragScroll.posGab)
            continue;
        
        int npcImgNum = xRival.xData[i][0].npcImgNum;
        
        int completeMapState = 0;
        
        //진행중
        if(xRival.completeMain == i)
        {
            completeMapState = 1;
        }
        //미오픈
        else if(xRival.completeMain < i)
        {
            completeMapState = 0;
            
        }
        //클리어
        else
        {
            completeMapState = 2;
        }
        
        
        //밸런스미오픈
        if(i >= xRival.openMain)
        {
            drawImage(&imgRivalWorldMapSlot[npcImgNum], subTemp[XPOS], subTemp[YPOS], imgRivalWorldMapSlot[npcImgNum].w/3*2, 0, imgRivalWorldMapSlot[npcImgNum].w/3, imgRivalWorldMapSlot[npcImgNum].h, VH);
        }
        else
        {
            int completePer = 0;
            switch(completeMapState)
            {
            case 0: //미오픈
                drawImage(&imgRivalWorldMapSlot[npcImgNum], subTemp[XPOS], subTemp[YPOS], imgRivalWorldMapSlot[npcImgNum].w/3*2, 0, imgRivalWorldMapSlot[npcImgNum].w/3, imgRivalWorldMapSlot[npcImgNum].h, VH);
                break;
            case 1: //진행중
                drawImage(&imgRivalWorldMapSlot[npcImgNum], subTemp[XPOS], subTemp[YPOS], imgRivalWorldMapSlot[npcImgNum].w/3, 0, imgRivalWorldMapSlot[npcImgNum].w/3, imgRivalWorldMapSlot[npcImgNum].h, VH);
                    
                completePer =xRival.completeDetail*100/RIVALSTAGEMAX;;
                    
                if(completePer > 100)
                    completePer = 100;
                
                drawImage(&imgRivalWorldMap[4], subTemp[XPOS], subTemp[YPOS]-188, 0, 0, imgRivalWorldMap[4].w, imgRivalWorldMap[4].h, VL);
                drawNum(&imgRivalWorldMap[5], subTemp[XPOS]-3, subTemp[YPOS]-188, completePer, -4, VR);
                    
                break;
            case 2: //클리어
                drawImage(&imgRivalWorldMapSlot[npcImgNum], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRivalWorldMapSlot[npcImgNum].w/3, imgRivalWorldMapSlot[npcImgNum].h, VH);
                    
                drawImage(&imgRivalWorldMap[4], subTemp[XPOS], subTemp[YPOS]-188, 0, 0, imgRivalWorldMap[4].w, imgRivalWorldMap[4].h, VL);
                drawNum(&imgRivalWorldMap[5], subTemp[XPOS]-3, subTemp[YPOS]-188, 100, -4, VR);
                break;
            }
        }
        
        
        xRivalWorldMap.xTouchSlot[i].wPos = imgRivalWorldMapSlot[0].w/3;
        xRivalWorldMap.xTouchSlot[i].hPos = imgRivalWorldMapSlot[0].h;
        xRivalWorldMap.xTouchSlot[i].xPos = subTemp[XPOS]-xRivalWorldMap.xTouchSlot[i].wPos/2;
        xRivalWorldMap.xTouchSlot[i].yPos = subTemp[YPOS]-xRivalWorldMap.xTouchSlot[i].hPos/2;
        
        
//        gSetColor(255, 0, 0);
//        setAlpha(100);
//        fillRect(xRivalWorldMap.xTouchSlot[i].xPos, xRivalWorldMap.xTouchSlot[i].yPos, xRivalWorldMap.xTouchSlot[i].wPos, xRivalWorldMap.xTouchSlot[i].hPos);
//        setAlpha(ALPHA_MAX);
        

        
    }
    
    
 
    
    
    
    drawImage(&imgRivalWorldMap[1], imgRivalWorldMap[1].w/2, py, 0, 0, imgRivalWorldMap[1].w, imgRivalWorldMap[1].h, VH);
    drawImage(&imgRivalWorldMap[2], lcdW-imgRivalWorldMap[2].w/2, py, 0, 0, imgRivalWorldMap[2].w, imgRivalWorldMap[2].h, VH);
    
}


void keyRivalWorldMap(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xRivalWorldMap.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            rivalWorldMapFreeLoad(false);
            xWorldMap.state = WORLDMAP_STATE_PLAY;
        }
        else
        {
            dragScrollKeyPrc(&xRivalWorldMap.xDragScroll,0);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xRivalWorldMap.xDragScroll.touchXposBefore != DONT)
        {
            dragScrollKeyPrc(&xRivalWorldMap.xDragScroll,1);
        }
        else
        {
            bool isRivalWorldMap = false;
            int selectRivalWorldMap = 0;
            
            for(int k = 0;k<xRival.totalWorldMap;k++)
            {
                if(touchCheck(&xRivalWorldMap.xTouchSlot[k]) == TRUE)
                {
                    isRivalWorldMap = true;
                    selectRivalWorldMap = k;
                    break;
                }
            }
            
            if(isRivalWorldMap == true)
            {
                playSnd(SND_MENU_OK);
                
                xRival.selectMain = selectRivalWorldMap;
                
                if(xRival.selectMain >= xRival.openMain)
                {
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "업데이트 예정입니다.");
                }
                //미오픈
                else if(xRival.completeMain < xRival.selectMain)
                {
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "전단계 라이벌과의 대결에서\n승리하세요.");
                }
                //진행중,클리어
                else
                {
                    rivalWorldMapFreeLoad(false);
                    
                    if(xRival.selectMain < xRival.completeMain)
                        xRival.selectDetail = 9;
                    else
                        xRival.selectDetail = xRival.completeDetail;
                    
                    setRival();
                }
            }
        }
        xRivalWorldMap.xDragScroll.touchXpos = DONT;
        xRivalWorldMap.xDragScroll.touchYpos = DONT;
        xRivalWorldMap.xDragScroll.touchXposBefore = DONT;
        xRivalWorldMap.xDragScroll.touchYposBefore = DONT;
    }
}


void setRival()
{
    
    xWorldMap.state = WORLDMAP_STATE_RIVAL;
    rivalFreeLoad(true);
}


void rivalFreeLoad(M_Boolean isLoad)
{
    if(isLoad == TRUE)
    {
        
        loadImg("rival0.png", &imgRival[0]);
        loadImg("rival1.png", &imgRival[1]);
        loadImg("rival2.png", &imgRival[2]);
        loadImg("rival3.png", &imgRival[3]);
        loadImg("rival4.png", &imgRival[4]);
        loadImg("rival5.png", &imgRival[5]);
        loadImg("rival6.png", &imgRival[6]);
        loadImg("rival7.png", &imgRival[7]);
        
        
        loadImg("shopmoneyicon11.png",&imgGiftGoldIcon);
        loadImg("shopmoneyicon1.png",&imgGiftLookIcon);
        loadImg("shoppremiumicon5.png",&imgGiftCandyIcon);
        
        loadImg("shoppremiumicon0.png", &imgGiftModelCastingCAIcon);
        loadImg("shoppremiumicon1.png", &imgGiftModelCastingBSIcon);
        loadImg("shoppremiumicon2.png", &imgGiftTrendHangerIcon);
        loadImg("shoppremiumicon3.png", &imgGiftTrendAccessoryIcon);
    }
    else
    {
        freeImg(&imgRival[0]);
        freeImg(&imgRival[1]);
        freeImg(&imgRival[2]);
        freeImg(&imgRival[3]);
        freeImg(&imgRival[4]);
        freeImg(&imgRival[5]);
        freeImg(&imgRival[6]);
        freeImg(&imgRival[7]);

        freeImg(&imgGiftGoldIcon);
        freeImg(&imgGiftLookIcon);
        freeImg(&imgGiftCandyIcon);
        
        freeImg(&imgGiftModelCastingCAIcon);
        freeImg(&imgGiftModelCastingBSIcon);
        freeImg(&imgGiftTrendHangerIcon);
        freeImg(&imgGiftTrendAccessoryIcon);
        
        
        
        for(int k=0;k<32;k++)
        {
            freeImg(&imgRivalBuilding[k]);
            freeImg(&imgRivalNpc[k]);
            freeImg(&imgRivalTitle[k]);
            freeImg(&imgRivalNpcIcon[k]);
        }
    }
}




void drawRivalBuilding(int x,int y,int code,int ank)
{
    if(code == DONT)
    {
        drawImage(&imgMyShop[0], x, y, 0, 0, imgMyShop[0].w, imgMyShop[0].h, ank);
    }
    else
    {
        if(imgRivalBuilding[code].texture == NULL)
        {
            sprintf(strTempS, "rivalbuilding%d.png",code);
            loadImgDocuments(strTempS, &imgRivalBuilding[code]);
        }
        drawImage(&imgRivalBuilding[code], x,y, 0, 0, imgRivalBuilding[code].w, imgRivalBuilding[code].h, ank);
    }
}
void drawRivalNpc(int x,int y,int code,int ank)
{
    if(imgRivalNpc[code].texture == NULL)
    {
        sprintf(strTempS, "rivalnpc%d.png",code);
        loadImgDocuments(strTempS, &imgRivalNpc[code]);
    }
    drawImage(&imgRivalNpc[code], x,y, 0, 0, imgRivalNpc[code].w, imgRivalNpc[code].h, ank);
}

void drawRivalTitle(int x,int y,int code,int ank)
{
    if(imgRivalTitle[code].texture == NULL)
    {
        sprintf(strTempS, "rivaltitle%d.png",code);
        loadImgDocuments(strTempS, &imgRivalTitle[code]);
    }
    drawImage(&imgRivalTitle[code], x,y, 0, 0, imgRivalTitle[code].w, imgRivalTitle[code].h, ank);
}


void drawRivalNpcIcon(int x,int y,int code,int ank)
{
    if(imgRivalNpcIcon[code].texture == NULL)
    {
        sprintf(strTempS, "rivalnpcicon%d.png",code);
        loadImgDocuments(strTempS, &imgRivalNpcIcon[code]);
    }
    drawImage(&imgRivalNpcIcon[code], x,y, 0, 0, imgRivalNpcIcon[code].w, imgRivalNpcIcon[code].h, ank);
}











void drawRival()
{
    int px = cx;
    int py = cy;
    
    
    drawImage(&imgRival[0], px, py, 0, 0, imgRival[0].w, imgRival[0].h, VH);
    
    
    subTemp[XPOS] = px+506;
    subTemp[YPOS] = py-280;
    
    xRival.xTouchExit.wPos = 80;
    xRival.xTouchExit.hPos = 80;
    xRival.xTouchExit.xPos = subTemp[XPOS]-xRival.xTouchExit.wPos/2;
    xRival.xTouchExit.yPos = subTemp[YPOS]-xRival.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xRival.xTouchExit.xPos, xRival.xTouchExit.yPos, xRival.xTouchExit.wPos, xRival.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    
    //타이틀
    drawRivalTitle(px,py-274,xRival.selectMain,VH);
    
    //챕터
    for(int k=0;k<RIVALSTAGEMAX;k++)
    {
        subTemp[XPOS] = px-494+(80*k);
        subTemp[YPOS] = py-198;
        
        //올클
        //진행중
        if(k == xRival.selectDetail)
            drawImage(&imgRival[3], subTemp[XPOS], subTemp[YPOS], imgRival[3].w/3*1, 0, imgRival[3].w/3, imgRival[3].h, VH);
        else if(xRival.selectMain < xRival.completeMain)
        {
            drawImage(&imgRival[3], subTemp[XPOS], subTemp[YPOS], imgRival[3].w/3*2, 0, imgRival[3].w/3, imgRival[3].h, VH);
            
        }
        else    //진행중
        {
            
            
            //오픈
            if(k <= xRival.completeDetail)
                drawImage(&imgRival[3], subTemp[XPOS], subTemp[YPOS], imgRival[3].w/3*2, 0, imgRival[3].w/3, imgRival[3].h, VH);
            //미클리어
            else
                drawImage(&imgRival[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRival[3].w/3, imgRival[3].h, VH);
         
        }
        
        drawNum(&imgRival[6], subTemp[XPOS]-3, subTemp[YPOS], k+1, -7, VH);
        
        xRival.xTouchStage[k].wPos = 60;
        xRival.xTouchStage[k].hPos = 60;
        xRival.xTouchStage[k].xPos = subTemp[XPOS]-xRival.xTouchStage[k].wPos/2;
        xRival.xTouchStage[k].yPos = subTemp[YPOS]-xRival.xTouchStage[k].hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xRival.xTouchStage[k].xPos, xRival.xTouchStage[k].yPos, xRival.xTouchStage[k].wPos, xRival.xTouchStage[k].hPos);
        setAlpha(ALPHA_MAX);
         */
    }
    
    //스테이지
    drawNum(&imgRival[4], px-70, py-113, xRival.selectDetail+1, -7, VH);
    

    
    //조건
    for(int k=0;k<RIVALQUESTMAX;k++)
    {
        subTemp[XPOS] = px-440;
        subTemp[YPOS] = py+5+(k*32);
        
        if(xRival.xData[xRival.selectMain][xRival.selectDetail].checkMax[k] == DONT)
        {
            drawImage(&imgRival[5], subTemp[XPOS], subTemp[YPOS], imgRival[5].w/2, imgRival[5].h/RIVALQUESTMAX*k, imgRival[5].w/2, imgRival[5].h/RIVALQUESTMAX, VH);
            sprintf(strTempS, "-");
        }
        else
        {
            drawImage(&imgRival[5], subTemp[XPOS], subTemp[YPOS], 0, imgRival[5].h/RIVALQUESTMAX*k, imgRival[5].w/2, imgRival[5].h/RIVALQUESTMAX, VH);
            
            setCommaNum(strTempS, xRival.xData[xRival.selectMain][xRival.selectDetail].checkMax[k]);
        }
        
        gSetColor(255, 255, 255);
        setFontSize(22);
        gDrawString(subTemp[XPOS]+150, subTemp[YPOS], strTempS, VH);
        setFontSize(11);
    }
    
    
    
    
    
    //제한시간
    subTemp[XPOS] = px-110;
    subTemp[YPOS] = py-3;
    drawTimeSprintf(strTempS,xRival.xData[xRival.selectMain][xRival.selectDetail].limitTime ,2);
    gSetColor(255, 255, 255);
    setFontSize(21);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);
    
    
    
    //설명
    subTemp[XPOS] = px+115;
    subTemp[YPOS] = py-36;
    setFontSize(21);
    gSetColor(38, 12, 0);
    gDrawString(subTemp[XPOS], subTemp[YPOS], xRival.xData[xRival.selectMain][xRival.selectDetail].strInfo, VH);
    setFontSize(11);
    
    
    //보상정보
    for(int k=0;k<3;k++)
    {
        int dx = px-128+(152*k);
        int dy = py+132;
        
        if(xRival.xData[xRival.selectMain][xRival.selectDetail].giftType[k] == DONT)
        {
            drawImage(&imgRival[1], dx, dy, 0, 0, imgRival[1].w, imgRival[1].h/2, VH);
            continue;
        }
        
        drawImage(&imgRival[1], dx, dy, 0, imgRival[1].h/2, imgRival[1].w, imgRival[1].h/2, VH);
        
        xGame.isReSizeDraw = true;
        xGame.reSize = 50;
        
        
        switch(xRival.xData[xRival.selectMain][xRival.selectDetail].giftType[k])
        {
        case 0:	//의상 아이템
            //획득한 의상
            setMapData(xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawFittingF(dx, dy, xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k], 60);
            sprintf(strTempS, "%s",xFashionData[xMap.type][xMap.listNum].strName);
            break;
        case 1:	//인테리어
            setMapData(xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            
            setDrawObjCenter(xMap.type,xMap.listNum);
            if(xDrawObjCenter.reSize != 100)
            {
                xGame.fgameScaleCx =dx;
                xGame.fgameScaleCy =lcdH-(dy);
                xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
            }
            drawObj(dx+xDrawObjCenter.w, dy+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
            xGame.fgameScale = 1.0f;
            xGame.fgameScaleCx =cx;
            xGame.fgameScaleCy =cy;
            
            sprintf(strTempS, "%s",xObj.xObjData[xMap.type][xMap.listNum].strName);
            break;
        case 2:	//골드
            setCommaNum(strTempB, xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            sprintf(strTempS, "%s골드",strTempB);
            drawImage(&imgGiftGoldIcon, dx, dy, 0, 0, imgGiftGoldIcon.w, imgGiftGoldIcon.h, VH);
            break;
        case 3:	//룩
            sprintf(strTempS, "%d룩",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgGiftLookIcon, dx, dy, 0, 0, imgGiftLookIcon.w, imgGiftLookIcon.h, VH);
            break;
        case 4:	//캔디(추가)
            sprintf(strTempS, "%d캔디",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgGiftCandyIcon, dx, dy, 0, 0, imgGiftCandyIcon.w, imgGiftCandyIcon.h, VH);
            break;
        case 5:	//일반 모델 캐스팅권(추가)
            sprintf(strTempS, "일반 캐스팅(%d개)",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgGiftModelCastingCAIcon, dx, dy, 0, 0, imgGiftModelCastingCAIcon.w, imgGiftModelCastingCAIcon.h, VH);
            break;
        case 6:	//고급 모델 캐스팅권(추가)
            sprintf(strTempS, "고급 캐스팅(%d개)",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgGiftModelCastingBSIcon, dx, dy, 0, 0, imgGiftModelCastingBSIcon.w, imgGiftModelCastingBSIcon.h, VH);
            break;
        case 7:	//유행 티켓(의상)
            sprintf(strTempS, "의상 유행 티켓");
            drawImage(&imgGiftTrendHangerIcon, dx, dy, 0, 0, imgGiftTrendHangerIcon.w, imgGiftTrendHangerIcon.h, VH);
            break;
        case 8:	//유행 티켓(잡화)
            sprintf(strTempS, "잡화 유행 티켓");
            drawImage(&imgGiftTrendAccessoryIcon, dx, dy, 0, 0, imgGiftTrendAccessoryIcon.w, imgGiftTrendAccessoryIcon.h, VH);
            break;
        case 9:	//A급 모델 캐스팅권
            sprintf(strTempS, "A급 모델 캐스팅(%d개)",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgCastingAIcon, dx, dy, 0, 0, imgCastingAIcon.w, imgCastingAIcon.h, VH);
            break;
        case 10://S급 모델 캐스팅권
            sprintf(strTempS, "S급 모델 캐스팅(%d개)",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgCastingSIcon, dx, dy, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
            break;
        case 11://A~S급 모델 캐스팅권
            sprintf(strTempS, "A~S급 모델 캐스팅(%d개)",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgCastingASIcon, dx, dy, 0, 0, imgCastingASIcon.w, imgCastingASIcon.h, VH);
            break;
        case 12://경험치
            sprintf(strTempS, "%d경험치",xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k]);
            drawImage(&imgGiftExpIcon, dx, dy, 0, 0, imgGiftExpIcon.w, imgGiftExpIcon.h, VH);
            break;
        case 13://지정 모델 확정권
            {
                int modelResize = 70;
                int modelCode = xRival.xData[xRival.selectMain][xRival.selectDetail].giftValue[k];
                int modelSex = xModelData[modelCode].sex;
                
                drawHairF(dx,dy, 1000+modelCode,0,modelResize);
                drawFaceF(dx,dy, 1000+modelCode, FACE_TYPE_NORMAL, modelResize);
                drawHairF(dx,dy, 1000+modelCode,1,modelResize);
                
                sprintf(strTempS, "%s(%s급모델)",xModelData[modelCode].strName,getGradeName(xModelData[modelCode].grade));
            }
            break;
                
        }
        xGame.isReSizeDraw = false;
        
        drawImage(&imgRival[7], dx, dy+41, 0, 0, imgRival[7].w, imgRival[7].h, VH);
        gSetColor(255, 255, 255);
        setFontSizeORI(11);
        gDrawString(dx, dy+41, strTempS, VH);
        setFontSize(11);
        
    }
    
    
    //도전하기
    subTemp[XPOS] = px+143;
    subTemp[YPOS] = py+240;
    xRival.xTouchStart.wPos = 200;
    xRival.xTouchStart.hPos = 60;
    xRival.xTouchStart.xPos = subTemp[XPOS]-xRival.xTouchStart.wPos/2;
    xRival.xTouchStart.yPos = subTemp[YPOS]-xRival.xTouchStart.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xRival.xTouchStart.xPos, xRival.xTouchStart.yPos, xRival.xTouchStart.wPos, xRival.xTouchStart.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    //재도전횟수
    gSetColor(255, 255, 255);
    setFontSize(25);
    if(xRival.selectMain == xRival.completeMain
       && xRival.selectDetail == xRival.completeDetail)
        sprintf(strTempS, "무한");
    else
        sprintf(strTempS, "%d/%d",xRival.maxCount-xRival.nowCount,xRival.maxCount);
    gDrawString(px+13, py+252, strTempS,VH);
    
    
    
    
    
    //건물
    drawRivalBuilding(px+416,py+200,xRival.xData[xRival.selectMain][xRival.selectDetail].buildingImgNum,BH);
    drawRivalNpc(px+416-120,py+300,xRival.xData[xRival.selectMain][xRival.selectDetail].npcImgNum,BH);
    
    //버프정보
    subTemp[XPOS] = px+425;
    subTemp[YPOS] = py+226;
    drawImage(&imgRival[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRival[2].w, imgRival[2].h, VH);
    
    for(int k=0;k<3;k++)
    {
        gSetColor(255, 255, 255);
        setFontSize(22);
        
        switch(k)
        {
        case 0:
            sprintf(strTempS, "+%d",xRival.xData[xRival.selectMain][xRival.selectDetail].buffFame);
            break;
        case 1:
            sprintf(strTempS, "+%d%%",xRival.xData[xRival.selectMain][xRival.selectDetail].buffSell);
            break;
        case 2:
            sprintf(strTempS, "+%d%%",xRival.xData[xRival.selectMain][xRival.selectDetail].buffExp);
            break;
        }
        
        gDrawString(subTemp[XPOS]+115, subTemp[YPOS]-15+(k*30), strTempS,VR);
    }
    
    
}
void keyRival(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        bool isStage = false;
        int stageNum = 0;
        
        for(int k=0;k<RIVALSTAGEMAX;k++)
        {
            if(touchCheck(&xRival.xTouchStage[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isStage = true;
                stageNum = k;
                break;
            }
        }
        
        if(isStage == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            bool isStageOpen =false;
            
            
            
            if(xRival.selectMain < xRival.completeMain)
                isStageOpen = true;
            else if(stageNum <= xRival.completeDetail)
                isStageOpen = true;
            
            if(isStageOpen == false)
            {
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText, "오픈되지 않은 스테이지입니다.");
            }
            else
            {
                xRival.selectDetail = stageNum;
            }
        }
		//LJW 월드맵 라이벌샵 막기
//        else if(touchCheck(&xRival.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
//        {
//            playSnd(SND_MENU_OK);
//            xWorldMap.isKeyReturn = TRUE;
//            rivalFreeLoad(false);
//            setRivalWorldMap();
//        }
        else if(touchCheck(&xRival.xTouchStart) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            
            
            
            if((xRival.selectMain == xRival.completeMain
                && xRival.selectDetail == xRival.completeDetail) == false
               && xRival.nowCount >= xRival.maxCount)
            {
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText, "오늘은 더이상 도전하실수 없습니다.");
            }
            else
            {
                if(xRival.selectMain == xRival.completeMain
                 && xRival.selectDetail == xRival.completeDetail)
                {
                    
                }
                else
                    xRival.nowCount++;
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RIVALSTART, TRUE);
                xRival.state = RIVAL_STATE_PLAY;
                xRival.nowMain = xRival.selectMain;
                xRival.nowDetail = xRival.selectDetail;
                xRival.remainTime = xRival.xData[xRival.nowMain][xRival.nowDetail].limitTime;
                for(int k=0;k<RIVALQUESTMAX;k++)
                    xRival.checkNow[k] = 0;
                
                setRivalInfo();
            }
        }
    }
}


void rivalInfoFreeLoad(M_Boolean isLoad)
{
    if(isLoad == TRUE)
    {
        loadImg("rivalinfo0.png", &imgRivalInfo[0]);
        loadImg("rivalinfo1.png", &imgRivalInfo[1]);
        loadImg("rivalinfo2.png", &imgRivalInfo[2]);
        loadImg("rivalinfo3.png", &imgRivalInfo[3]);
        loadImg("rivalinfo4.png", &imgRivalInfo[4]);
        loadImg("rivalinfo5.png", &imgRivalInfo[5]);
        
        
        loadImg("rival1.png", &imgRival[1]);
        loadImg("rival5.png", &imgRival[5]);
        loadImg("rival7.png", &imgRival[7]);
        
        
        loadImg("rivalresult0.png", &imgRivalResult[0]);
        loadImg("rivalresult1.png", &imgRivalResult[1]);
        loadImg("rivalresult2.png", &imgRivalResult[2]);
        loadImg("rivalresult3.png", &imgRivalResult[3]);
        loadImg("rivalresult4.png", &imgRivalResult[4]);
        
        
        
        
        
        loadImg("shopmoneyicon11.png",&imgGiftGoldIcon);
        loadImg("shopmoneyicon1.png",&imgGiftLookIcon);
        loadImg("shoppremiumicon5.png",&imgGiftCandyIcon);
        
        loadImg("shoppremiumicon0.png", &imgGiftModelCastingCAIcon);
        loadImg("shoppremiumicon1.png", &imgGiftModelCastingBSIcon);
        loadImg("shoppremiumicon2.png", &imgGiftTrendHangerIcon);
        loadImg("shoppremiumicon3.png", &imgGiftTrendAccessoryIcon);
        
        
        
        
        loadImg("rivalguest0.png", &imgRivalGuest[0]);
        loadImg("rivalguest1.png", &imgRivalGuest[1]);
        loadImg("rivalguest2.png", &imgRivalGuest[2]);
        loadImg("rivalguest3.png", &imgRivalGuest[3]);
        loadImg("rivalguest4.png", &imgRivalGuest[4]);
        loadImg("rivalguest5.png", &imgRivalGuest[5]);
        loadImg("rivalguest6.png", &imgRivalGuest[6]);
        loadImg("rivalguest7.png", &imgRivalGuest[7]);
        loadImg("rivalguest8.png", &imgRivalGuest[8]);
        loadImg("rivalguest9.png", &imgRivalGuest[9]);
        loadImg("rivalguest10.png", &imgRivalGuest[10]);
        loadImg("rivalguest11.png", &imgRivalGuest[11]);
    }
    else
    {
        freeImg(&imgRivalInfo[0]);
        freeImg(&imgRivalInfo[1]);
        freeImg(&imgRivalInfo[2]);
        freeImg(&imgRivalInfo[3]);
        freeImg(&imgRivalInfo[4]);
        freeImg(&imgRivalInfo[5]);
        
        
        freeImg(&imgRival[1]);
        freeImg(&imgRival[5]);
        freeImg(&imgRival[7]);
        
        freeImg(&imgRivalResult[0]);
        freeImg(&imgRivalResult[1]);
        freeImg(&imgRivalResult[2]);
        freeImg(&imgRivalResult[3]);
        freeImg(&imgRivalResult[4]);
        
        
        freeImg(&imgGiftGoldIcon);
        freeImg(&imgGiftLookIcon);
        freeImg(&imgGiftCandyIcon);
        
        freeImg(&imgGiftModelCastingCAIcon);
        freeImg(&imgGiftModelCastingBSIcon);
        freeImg(&imgGiftTrendHangerIcon);
        freeImg(&imgGiftTrendAccessoryIcon);
        
        
        freeImg(&imgRivalGuest[0]);
        freeImg(&imgRivalGuest[1]);
        freeImg(&imgRivalGuest[2]);
        freeImg(&imgRivalGuest[3]);
        freeImg(&imgRivalGuest[4]);
        freeImg(&imgRivalGuest[5]);
        freeImg(&imgRivalGuest[6]);
        freeImg(&imgRivalGuest[7]);
        freeImg(&imgRivalGuest[8]);
        freeImg(&imgRivalGuest[9]);
        freeImg(&imgRivalGuest[10]);
        freeImg(&imgRivalGuest[11]);
        
        
        for(int k=0;k<32;k++)
        {
            freeImg(&imgRivalBuilding[k]);
            freeImg(&imgRivalNpc[k]);
            freeImg(&imgRivalTitle[k]);
            freeImg(&imgRivalNpcIcon[k]);
        }
    }
}

void setRivalInfo()
{
    rivalInfoFreeLoad(true);
    initRivalGuest();
    xWorldMap.state = WORLDMAP_STATE_RIVALINFO;
}

void drawRivalInfo()
{
    int px = cx;
    int py = cy;
    
    drawImage(&imgRivalInfo[0], px, py, 0, 0, imgRivalInfo[0].w, imgRivalInfo[0].h, VH);
    
    //타이틀
    drawRivalTitle(px,py-274,xRival.nowMain,VH);
    
    
    subTemp[XPOS] = px+516;
    subTemp[YPOS] = py-280;
    
    xRivalInfo.xTouchExit.wPos = 80;
    xRivalInfo.xTouchExit.hPos = 80;
    xRivalInfo.xTouchExit.xPos = subTemp[XPOS]-xRivalInfo.xTouchExit.wPos/2;
    xRivalInfo.xTouchExit.yPos = subTemp[YPOS]-xRivalInfo.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xRivalInfo.xTouchExit.xPos, xRivalInfo.xTouchExit.yPos, xRivalInfo.xTouchExit.wPos, xRivalInfo.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    
    
    
    //내게이지
    int gageWW=0;
    gageWW = xRival.progressPerValue*imgRivalInfo[2].w/1000;
    if(gageWW > imgRivalInfo[2].w)
        gageWW = imgRivalInfo[2].w;
    drawImage(&imgRivalInfo[2], px-32, py-230, imgRivalInfo[2].w-gageWW, 0, gageWW, imgRivalInfo[2].h, VR);
    
    //상대게이지
    gageWW = xRival.progressPerValueNpc*imgRivalInfo[2].w/1000;
    if(gageWW > imgRivalInfo[2].w)
        gageWW = imgRivalInfo[2].w;
    
    drawImage(&imgRivalInfo[2], px+31, py-230, 0, 0, gageWW, imgRivalInfo[2].h, VL);
    
    drawFriendProfile(px-475, py-230, xNetData.userNum, 80);
    drawImage(&imgRivalInfo[4], px-475, py-230, 0, 0, imgRivalInfo[4].w, imgRivalInfo[4].h, VH);
    drawRivalNpcIcon(px+455, py-230, xRival.xData[xRival.nowMain][xRival.nowDetail].npcImgNum, VH);
    
    
    if(xRival.completeMain == 0)
        drawRivalBuilding(15, 533, DONT, BL);
    else
        drawRivalBuilding(15, 533, xRival.xData[xRival.completeMain-1][0].buildingImgNum, BL);
    
    xGame.isReverse = true;
    drawRivalBuilding(1107, 533, xRival.xData[xRival.nowMain][xRival.nowDetail].buildingImgNum, BR);
    xGame.isReverse = false;
    
    drawRivalGuest();
    
    //조건
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+20;
    drawImage(&imgRivalInfo[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRivalInfo[1].w, imgRivalInfo[1].h, VH);
    
    //시간
    gSetColor(255, 255, 255);
    setFontSize(30);
    drawTimeSprintf(strTempS,xRival.remainTime,1);
    gDrawString(subTemp[XPOS]-110, subTemp[YPOS]-161, strTempS, VH);
    setFontSize(11);
    
    //포기하기
    drawImage(&imgRivalInfo[5], subTemp[XPOS]+160, subTemp[YPOS]-161, 0, 0, imgRivalInfo[5].w, imgRivalInfo[5].h, VH);
    
    xRivalInfo.xTouchStop.wPos = imgRivalInfo[5].w;
    xRivalInfo.xTouchStop.hPos = imgRivalInfo[5].h;
    xRivalInfo.xTouchStop.xPos = subTemp[XPOS]+160-xRivalInfo.xTouchStop.wPos/2;
    xRivalInfo.xTouchStop.yPos = subTemp[YPOS]-161-xRivalInfo.xTouchStop.hPos/2;
    
    
    
    
    for(int k=0;k<RIVALQUESTMAX;k++)
    {
        int dx = subTemp[XPOS]-178;
        int dy = subTemp[YPOS]-70+(k*32);
        
        char strMax[256];
        
        if(xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k] == DONT)
        {
            drawImage(&imgRival[5], dx, dy, imgRival[5].w/2, imgRival[5].h/RIVALQUESTMAX*k, imgRival[5].w/2, imgRival[5].h/RIVALQUESTMAX, VH);
            sprintf(strMax, "-");
            sprintf(strTempS, "-");
            sprintf(strTempB, "-");
        }
        else
        {
            drawImage(&imgRival[5], dx, dy, 0, imgRival[5].h/RIVALQUESTMAX*k, imgRival[5].w/2, imgRival[5].h/RIVALQUESTMAX, VH);
            
            setCommaNum(strMax, xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k]);
            
            if(xRival.checkNow[k] > xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k])
                setCommaNum(strTempS, xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k]);
            else
                setCommaNum(strTempS, xRival.checkNow[k]);
            
            
            if(xRival.checkNowNpc[k] > xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k])
                setCommaNum(strTempB, xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k]);
            else
                setCommaNum(strTempB, xRival.checkNowNpc[k]);
        }
        
        
        setFontSize(22);
        gSetColor(255, 255, 58);
        gDrawString(dx+128, dy, strMax, VR);
        gSetColor(255, 255, 255);
        gDrawString(dx+266, dy, strTempS, VR);
        gDrawString(dx+398, dy, strTempB, VR);
        setFontSize(11);
        
        //진행도
        int progressPerValue = xRival.checkNow[k]*1000/xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k];
        int progressPerValueNpc = xRival.checkNowNpc[k]*1000/xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k];
        
        //신호등(0:빈칸 1:적신호 2:노 3:청 4:완료)
        int lampNum = 0;
        
        switch(k)
        {
                //증가
        case 0: //매출(적용)
        case 3: //배송량(적용)
        case 5: //도움받기(적용)
        case 6: //유행의상판매(적용)
            if(xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k] == DONT)
                lampNum = 0;
            else if(xRival.checkNow[k] >= xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k])
                lampNum = 4;    //완료
            else if(progressPerValue >= progressPerValueNpc)
                lampNum = 3;    //청
            else if(progressPerValue >= progressPerValueNpc-(5000/progressPerValueNpc))
                lampNum = 2;    //노
            else
                lampNum = 1;    //적
            break;
            //현재기준
        case 1: //명성도(적용)
        case 2: //S급모델(적용)
        case 4: //패션쇼점수(적용)
        case 7: //보유상품수(적용)
            if(xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k] == DONT)
                lampNum = 0;
            else if(xRival.checkNow[k] >= xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k])
                lampNum = 4;    //완료
            else if(progressPerValue >= 800)
                lampNum = 2;    //노
            else
                lampNum = 1;    //적
            break;
        }
        drawImage(&imgRivalInfo[3],dx+420,dy-1,0,imgRivalInfo[3].h/5*lampNum,imgRivalInfo[3].w,imgRivalInfo[3].h/5,VH);
    }
    drawRivalResult();
}

void keyRivalInfo(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        switch(xRivalInfo.state)
        {
        case RIVALINFO_STATE_PLAY:
            if(touchCheck(&xRivalInfo.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                rivalInfoFreeLoad(false);
                xWorldMap.state = WORLDMAP_STATE_PLAY;
            }
            else if(touchCheck(&xRivalInfo.xTouchStop) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                setPopup(POPUP_RIVALSTOP, PLAY_PLAY, PLAY_PLAY, 0, DONT);
            }
            break;
        case RIVALINFO_STATE_FAIL:
        case RIVALINFO_STATE_SUCCESS:
            if(touchCheck(&xRivalInfo.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                xRival.state = RIVAL_STATE_WAIT;
                xRivalInfo.state = RIVALINFO_STATE_PLAY;
                rivalInfoFreeLoad(false);
                
                
                xRival.selectMain = xRival.nowMain;
                xRival.selectDetail = xRival.nowDetail;
                setRival();
            }
            break;
        case RIVALINFO_STATE_FAILANY:
            if(xRivalInfo.resultAnyCnt > 50)
                xRivalInfo.state = RIVALINFO_STATE_FAIL;
            break;
        case RIVALINFO_STATE_SUCCESSANY:
            if(xRivalInfo.resultAnyCnt > 50)
                xRivalInfo.state = RIVALINFO_STATE_SUCCESS;
            break;
        }
    }
}

void prcRivalQuest()
{
    if(xRival.isNetLoad == true)
        return;
    
    
    
    xRival.progressPerTime = 1000-(xRival.remainTime * 1000/xRival.xData[xRival.nowMain][xRival.nowDetail].limitTime);
    xRival.progressPerValueNpc=0;
    xRival.progressPerValue=0;
    int totalQuest = 0;
    
    for(int k=0;k<RIVALQUESTMAX;k++)
    {
        if(xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k] != DONT)
        {
            switch(k)
            {
                    //증가
                case 0: //매출(적용)
                case 3: //배송량(적용)
                case 5: //도움받기(적용)
                case 6: //유행의상판매(적용)
                    xRival.checkNowNpc[k] = xRival.progressPerTime*xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k]/1000;
                    break;
                    //현재기준
                case 1: //명성도(적용)
                case 2: //S급모델(적용)
                case 4: //패션쇼점수(적용)
                case 7: //보유상품수(적용)
                    xRival.checkNowNpc[k] = xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k];
                    break;
            }
            
            
            
            //내총합
            int checkNowMax = xRival.checkNow[k];
            if(xRival.checkNow[k] > xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k])
                checkNowMax = xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k];
            xRival.progressPerValue += checkNowMax*1000/xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k];
            
            
            //적총합
            checkNowMax = xRival.checkNowNpc[k];
            if(xRival.checkNowNpc[k] > xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k])
                checkNowMax = xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k];
            xRival.progressPerValueNpc += checkNowMax*1000/xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k];
            
            totalQuest++;
        }
    }
    xRival.progressPerValue = xRival.progressPerValue/totalQuest;
    xRival.progressPerValueNpc = xRival.progressPerValueNpc/totalQuest;
    
    
    
    
    
    xRival.buffFame = 0;
    xRival.buffSell = 0;
    xRival.buffExp = 0;
    
    if(xRival.completeMain == 0 && xRival.completeDetail == 0)
    {
        
    }
    else if(xRival.completeDetail == 0)
    {
        xRival.buffFame = xRival.xData[(xRival.completeMain-1)][9].buffFame;
        xRival.buffSell = xRival.xData[(xRival.completeMain-1)][9].buffSell;
        xRival.buffExp = xRival.xData[(xRival.completeMain-1)][9].buffExp;
    }
    else
    {
        xRival.buffFame = xRival.xData[(xRival.completeMain)][xRival.completeDetail-1].buffFame;
        xRival.buffSell = xRival.xData[(xRival.completeMain)][xRival.completeDetail-1].buffSell;
        xRival.buffExp = xRival.xData[(xRival.completeMain)][xRival.completeDetail-1].buffExp;
    }
    
    if(xRival.state != RIVAL_STATE_PLAY)
        return;
    
    
    
    
    
    //제작시간 참조
    xRival.remainTime -= xGame.prcSec;
    if(xRival.remainTime < 0)
        xRival.remainTime = 0;
    
    bool isFail = false;
    for(int k=0;k<RIVALQUESTMAX;k++)
    {
        if(xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k] != DONT)
        {
            if(xRival.checkNow[k] < xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[k])
            {
                isFail = true;
                break;
            }
        }
    }
    
    if(xRival.remainTime == 0 && isFail == true)
    {
        xRival.state = RIVAL_STATE_FAIL;
        return;
    }
    else if(isFail == false)
    {
        xRival.state = RIVAL_STATE_SUCCESS;
    }


    
    setRivalQuest(1,xSaveTemp.fame.oriData);        //명성도
    
    int prcNum = 0;
    prcNum = 0;
    for(int i=0;i<FASHIONDATATYPEMAX;i++)
    {
        for(int j=0;j<FASHIONDATAMAX;j++)
        {
            if(xInventoryFashion.isOpen[i][j] == TRUE)
            {
                ++prcNum;
            }
        }
    }
    setRivalQuest(7, prcNum);   //보유상품수
    
    prcNum = 0;
    for(int i=0;i<xModel.totalInventoryModel;i++)
    {
        if(xModelData[xInventoryModel[i].code].grade >= 3)
        {
            prcNum++;
        }
    }
    setRivalQuest(2, prcNum);   //S급모델
}



void setRivalQuest(int type,int num)
{
    if(xRival.isNetLoad == true)
        return;
    
    if(xRival.state != RIVAL_STATE_PLAY)
        return;
    
    if(xRival.remainTime == 0)
        return;
    
    bool isUpdate = false;
    switch(type)
    {
    //증가
    case 0: //매출(적용)
    case 3: //배송량(적용)
    case 5: //도움받기(적용)
    case 6: //유행의상판매(적용)
        if(xRival.checkNow[type] < xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[type])
        {
            xRival.checkNow[type] += num;
            isUpdate = true;
        }
        break;
    //현재기준
    case 1: //명성도(적용)
    case 2: //S급모델(적용)
    case 4: //패션쇼점수(적용)
    case 7: //보유상품수(적용)
        if(xRival.checkNow[type] < num && xRival.checkNow[type] < xRival.xData[xRival.nowMain][xRival.nowDetail].checkMax[type])
        {
            xRival.checkNow[type] = num;
            isUpdate = true;
        }
        break;
    }
    
    if(isUpdate == true)
    {
        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_RIVALUPDATE, TRUE);
    }
}


void drawRivalResult()
{
    int alpha;
    int startAnyCnt;
    
    subTemp[XPOS] = cx;
    subTemp[YPOS] = cy;

    if(xRivalInfo.state == RIVALINFO_STATE_FAIL)
    {
        drawImage(&imgRivalResult[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRivalResult[1].w, imgRivalResult[1].h, VH);
        return;
    }
    else if(xRivalInfo.state == RIVALINFO_STATE_SUCCESS)
    {
        drawImage(&imgRivalResult[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRivalResult[0].w, imgRivalResult[0].h, VH);
        return;
    }
    else if(xRivalInfo.state == RIVALINFO_STATE_PLAY)
        return;
    
    
    
    ++xRivalInfo.resultAnyCnt;
    
    
    //검은배경
    startAnyCnt = xRivalInfo.resultAnyCnt;
    if(startAnyCnt >= 0)
    {
        switch(startAnyCnt)
        {
        case 0:alpha = 10;break;
        case 1:alpha = 20;break;
        case 2:alpha = 30;break;
        case 3:alpha = 40;break;
        case 4:alpha = 50;break;
        case 5:alpha = 60;break;
        case 6:alpha = 70;break;
        case 7:alpha = 80;break;
        case 8:alpha = 90;break;
        default:alpha = 100;break;
        }
        setAlpha(alpha*120/100);
        gSetColor(0, 0, 0);
        fillRect(0, 0, lcdW, lcdH);
        setAlpha(ALPHA_MAX);
    }
    
    //도장
    startAnyCnt = xRivalInfo.resultAnyCnt-20;
    
    subTemp[XPOS] = cx;
    subTemp[YPOS] = cy;
    if(startAnyCnt > 0)
    {
        if(startAnyCnt >= 17)
        {
            if(xRivalInfo.state == RIVALINFO_STATE_FAILANY)
                drawImage(&imgRivalResult[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRivalResult[1].w, imgRivalResult[1].h, VH);
            else
                drawImage(&imgRivalResult[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRivalResult[0].w, imgRivalResult[0].h, VH);
        }
            
        if(startAnyCnt <= 60)
        {
            drawStamp(subTemp[XPOS], subTemp[YPOS], startAnyCnt,0);
        }
    }
    
    //보상
    
    subTemp[XPOS] = cx;
    subTemp[YPOS] = cy+200;
    
    if(xRivalInfo.state == RIVALINFO_STATE_SUCCESSANY)
    {
        startAnyCnt = xRivalInfo.resultAnyCnt-40;
        if(startAnyCnt >= 0)
        {
            switch(startAnyCnt)
            {
            case 0:alpha = 10;break;
            case 1:alpha = 20;break;
            case 2:alpha = 30;break;
            case 3:alpha = 40;break;
            case 4:alpha = 50;break;
            case 5:alpha = 60;break;
            case 6:alpha = 70;break;
            case 7:alpha = 80;break;
            case 8:alpha = 90;break;
            default:alpha = 100;break;
            }
            setAlpha(alpha*ALPHA_MAX/100);
            
            drawImage(&imgRivalResult[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgRivalResult[3].w, imgRivalResult[3].h, VH);
            
            //보상정보
            int totalGift = 0;
            for(int k=0;k<3;k++)
            {
                if(xRival.xData[xRival.nowMain][xRival.nowDetail].giftType[k] != DONT)
                    totalGift++;
            }
            
            for(int k=0;k<totalGift;k++)
            {
                int dx = subTemp[XPOS]-((totalGift-1)*(152/2))+(152*k);
                int dy = subTemp[YPOS];
                
                drawImage(&imgRival[1], dx, dy, 0, imgRival[1].h/2, imgRival[1].w, imgRival[1].h/2, VH);
                
                
                
                xGame.isBlend = true;
                xGame.blendType = BLEND_ADDP;
                xGame.isRotate = true;
                xGame.rotateNum = (gameCnt%180)*2;
                drawImage(&imgRivalResult[2], dx, dy, 0, 0, imgRivalResult[2].w, imgRivalResult[2].h, VH);
                xGame.isRotate = false;
                xGame.isBlend = false;
                
                
                xGame.isReSizeDraw = true;
                xGame.reSize = 50;
                switch(xRival.xData[xRival.nowMain][xRival.nowDetail].giftType[k])
                {
                case 0:	//의상 아이템
                    //획득한 의상
                    setMapData(xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawFittingF(dx, dy, xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k], 60);
                    sprintf(strTempS, "%s",xFashionData[xMap.type][xMap.listNum].strName);
                    break;
                case 1:	//인테리어
                    setMapData(xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    
                    setDrawObjCenter(xMap.type,xMap.listNum);
                    if(xDrawObjCenter.reSize != 100)
                    {
                        xGame.fgameScaleCx =dx;
                        xGame.fgameScaleCy =lcdH-(dy);
                        xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
                    }
                    drawObj(dx+xDrawObjCenter.w, dy+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
                    xGame.fgameScale = 1.0f;
                    xGame.fgameScaleCx =cx;
                    xGame.fgameScaleCy =cy;
                    
                    sprintf(strTempS, "%s",xObj.xObjData[xMap.type][xMap.listNum].strName);
                    break;
                case 2:	//골드
                    setCommaNum(strTempB, xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    sprintf(strTempS, "%s골드",strTempB);
                    drawImage(&imgGiftGoldIcon, dx, dy, 0, 0, imgGiftGoldIcon.w, imgGiftGoldIcon.h, VH);
                    break;
                case 3:	//룩
                    sprintf(strTempS, "%d룩",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgGiftLookIcon, dx, dy, 0, 0, imgGiftLookIcon.w, imgGiftLookIcon.h, VH);
                    break;
                case 4:	//캔디(추가)
                    sprintf(strTempS, "%d캔디",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgGiftCandyIcon, dx, dy, 0, 0, imgGiftCandyIcon.w, imgGiftCandyIcon.h, VH);
                    break;
                case 5:	//일반 모델 캐스팅권(추가)
                    sprintf(strTempS, "일반 캐스팅(%d개)",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgGiftModelCastingCAIcon, dx, dy, 0, 0, imgGiftModelCastingCAIcon.w, imgGiftModelCastingCAIcon.h, VH);
                    break;
                case 6:	//고급 모델 캐스팅권(추가)
                    sprintf(strTempS, "고급 캐스팅(%d개)",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgGiftModelCastingBSIcon, dx, dy, 0, 0, imgGiftModelCastingBSIcon.w, imgGiftModelCastingBSIcon.h, VH);
                    break;
                case 7:	//유행 티켓(의상)
                    sprintf(strTempS, "의상 유행 티켓");
                    drawImage(&imgGiftTrendHangerIcon, dx, dy, 0, 0, imgGiftTrendHangerIcon.w, imgGiftTrendHangerIcon.h, VH);
                    break;
                case 8:	//유행 티켓(잡화)
                    sprintf(strTempS, "잡화 유행 티켓");
                    drawImage(&imgGiftTrendAccessoryIcon, dx, dy, 0, 0, imgGiftTrendAccessoryIcon.w, imgGiftTrendAccessoryIcon.h, VH);
                    break;
                case 9:	//A급 모델 캐스팅권
                    sprintf(strTempS, "A급 모델 캐스팅(%d개)",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgCastingAIcon, dx, dy, 0, 0, imgCastingAIcon.w, imgCastingAIcon.h, VH);
                    break;
                case 10://S급 모델 캐스팅권
                    sprintf(strTempS, "S급 모델 캐스팅(%d개)",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgCastingSIcon, dx, dy, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
                    break;
                case 11://A~S급 모델 캐스팅권
                    sprintf(strTempS, "A~S급 모델 캐스팅(%d개)",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgCastingASIcon, dx, dy, 0, 0, imgCastingASIcon.w, imgCastingASIcon.h, VH);
                    break;
                case 12://경험치
                    sprintf(strTempS, "%d경험치",xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k]);
                    drawImage(&imgGiftExpIcon, dx, dy, 0, 0, imgGiftExpIcon.w, imgGiftExpIcon.h, VH);
                    break;
                case 13://지정 모델 확정권
                    {
                        int modelResize = 70;
                        int modelCode = xRival.xData[xRival.nowMain][xRival.nowDetail].giftValue[k];
                        int modelSex = xModelData[modelCode].sex;
                        
                        drawHairF(dx,dy, 1000+modelCode,0,modelResize);
                        drawFaceF(dx,dy, 1000+modelCode, FACE_TYPE_NORMAL, modelResize);
                        drawHairF(dx,dy, 1000+modelCode,1,modelResize);
                        
                        sprintf(strTempS, "%s(%s급모델)",xModelData[modelCode].strName,getGradeName(xModelData[modelCode].grade));
                    }
                    break;
                }
                
                xGame.isReSizeDraw = false;
                drawImage(&imgRival[7], dx, dy+41, 0, 0, imgRival[7].w, imgRival[7].h, VH);
                gSetColor(255, 255, 255);
                setFontSize(10);
                gDrawString(dx, dy+41, strTempS, VH);
                setFontSize(11);
            }
            
            drawImage(&imgRivalResult[4], subTemp[XPOS], subTemp[YPOS]-70, 0, 0, imgRivalResult[4].w, imgRivalResult[4].h, VH);
            
            setAlpha(ALPHA_MAX);
        }
    }
}


bool isRivalGuestBg(int type,int x,int y)
{
    xTouch.xPos = x;
    xTouch.yPos = y;
    xTouch.wPos = 1;
    xTouch.hPos = 1;
    
    //내땅
    if(type == 0)
    {
        for(int k=0;k<xRivalGuest.totalTouchBg[0];k++)
        {
            if(touchCheck(&xRivalGuest.xTouchBg[0][k]) == TRUE)
                return true;
        }
        
    }
    //적땅
    else if(type == 1)
    {
        for(int k=0;k<xRivalGuest.totalTouchBg[1];k++)
        {
            if(touchCheck(&xRivalGuest.xTouchBg[1][k]) == TRUE)
                return true;
        }
    }
    //중립지역
    else if(type == 2)
    {
        if(touchCheck(&xRivalGuest.xTouchMake) == TRUE)
            return true;
        
    }
    return false;
}

void initRivalGuest()
{
    //영역구분
    xRivalGuest.totalTouchBg[0] = 0;
    xRivalGuest.totalTouchBg[1] = 0;
    
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].xPos = 169;
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].yPos = 504;
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].wPos = 121;
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].hPos = 35;
    xRivalGuest.totalTouchBg[0]++;
    
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].xPos = 122;
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].yPos = 539;
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].wPos = 294;
    xRivalGuest.xTouchBg[0][xRivalGuest.totalTouchBg[0]].hPos = 101;
    xRivalGuest.totalTouchBg[0]++;
    
    
    
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].xPos = 846;
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].yPos = 504;
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].wPos = 121;
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].hPos = 35;
    xRivalGuest.totalTouchBg[1]++;
    
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].xPos = 720;
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].yPos = 539;
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].wPos = 294;
    xRivalGuest.xTouchBg[1][xRivalGuest.totalTouchBg[1]].hPos = 101;
    xRivalGuest.totalTouchBg[1]++;
    
    xRivalGuest.xTouchMake.xPos = 416;
    xRivalGuest.xTouchMake.yPos = 566;
    xRivalGuest.xTouchMake.wPos = 304;
    xRivalGuest.xTouchMake.hPos = 55;
    
    
    
    
    
    if(xRival.progressPerValueNpc == 0 && xRival.progressPerValue == 0)
    {
        xRival.progressPerValueNpc = 1;
        xRival.progressPerValue = 1;
    }
    
    int makeMyNum  = xRival.progressPerValue*100/(xRival.progressPerValue+xRival.progressPerValueNpc);
    int makeNpcNum  = xRival.progressPerValueNpc*100/(xRival.progressPerValue+xRival.progressPerValueNpc);
    
    if(makeMyNum > 90)
    {
        makeMyNum = 90;
        makeNpcNum = 10;
    }
    else if(makeNpcNum > 90)
    {
        makeMyNum = 10;
        makeNpcNum = 90;
    }
    
    
    for(int k=0;k<RIVALGUESTMAX;k++)
    {
        xRivalGuest.xSlot[k].state = RIVALGUEST_STATE_WAIT;
        xRivalGuest.xSlot[k].imgNum = ranDom(0,11);
        xRivalGuest.xSlot[k].speed = 2;
        xRivalGuest.xSlot[k].waitTime = ranDom(1, 50);
        
        for(int z=0;z<1000;z++)
        {
            xRivalGuest.xSlot[k].x = ranDom(0,lcdW);
            xRivalGuest.xSlot[k].y = ranDom(490,lcdH);
            if(k < makeMyNum)
            {
                if(isRivalGuestBg(0,xRivalGuest.xSlot[k].x,xRivalGuest.xSlot[k].y) == true)
                    break;
            }
            else
            {
                if(isRivalGuestBg(1,xRivalGuest.xSlot[k].x,xRivalGuest.xSlot[k].y) == true)
                    break;
            }
        }
    }
}

void drawRivalGuest()
{
    float rad;
    float speedMax;
    //연산
    for(int k=0;k<RIVALGUESTMAX;k++)
    {
        ++xRivalGuest.xSlot[k].anyCnt;
        switch(xRivalGuest.xSlot[k].state)
        {
        case RIVALGUEST_STATE_WAIT:
            if(xRivalGuest.xSlot[k].anyCnt > xRivalGuest.xSlot[k].waitTime)
            {
                xRivalGuest.xSlot[k].state = RIVALGUEST_STATE_MOVE;
                xRivalGuest.xSlot[k].anyCnt = 0;
                
                
                
                
                
                
                if(xRival.progressPerValueNpc == 0 && xRival.progressPerValue == 0)
                {
                    xRival.progressPerValueNpc = 1;
                    xRival.progressPerValue = 1;
                }
                
                int makeMyNum  = xRival.progressPerValue*100/(xRival.progressPerValue+xRival.progressPerValueNpc);
                int makeNpcNum  = xRival.progressPerValueNpc*100/(xRival.progressPerValue+xRival.progressPerValueNpc);
                
                if(makeMyNum > 90)
                {
                    makeMyNum = 90;
                    makeNpcNum = 10;
                }
                else if(makeNpcNum > 90)
                {
                    makeMyNum = 10;
                    makeNpcNum = 90;
                }
                

                for(int z=0;z<1000;z++)
                {
                    xRivalGuest.xSlot[k].targetX = ranDom(0,lcdW);
                    xRivalGuest.xSlot[k].targetY = ranDom(490,lcdH);
                    
                    if(ranDom(0, 100) < 1)
                    {
                        if(isRivalGuestBg(0,xRivalGuest.xSlot[k].targetX,xRivalGuest.xSlot[k].targetY) == true)
                            break;
                        if(isRivalGuestBg(1,xRivalGuest.xSlot[k].targetX,xRivalGuest.xSlot[k].targetY) == true)
                            break;
                    }
                    else if(k < makeMyNum)
                    {
                        
                        
                        if(isRivalGuestBg(0,xRivalGuest.xSlot[k].targetX,xRivalGuest.xSlot[k].targetY) == true)
                            break;
                    }
                    else
                    {
                        if(isRivalGuestBg(1,xRivalGuest.xSlot[k].targetX,xRivalGuest.xSlot[k].targetY) == true)
                            break;
                    }
                }
            }
            break;
        case RIVALGUEST_STATE_MOVE:
            rad = getArcTan(xRivalGuest.xSlot[k].x,xRivalGuest.xSlot[k].y,xRivalGuest.xSlot[k].targetX,xRivalGuest.xSlot[k].targetY);
            speedMax = getRadiusSpeed(xRivalGuest.xSlot[k].targetX,xRivalGuest.xSlot[k].targetY,xRivalGuest.xSlot[k].x,xRivalGuest.xSlot[k].y,rad);
                
            getRadiusPos(xRivalGuest.xSlot[k].x,xRivalGuest.xSlot[k].y,xRivalGuest.xSlot[k].speed,rad);
            xRivalGuest.xSlot[k].x = xRadius.pos[XPOS];
            xRivalGuest.xSlot[k].y = xRadius.pos[YPOS];
                
            if(speedMax > -10 && speedMax < 10)
            {
                xRivalGuest.xSlot[k].state = RIVALGUEST_STATE_WAIT;
                xRivalGuest.xSlot[k].anyCnt = 0;
                xRivalGuest.xSlot[k].waitTime = ranDom(30, 120);
                
                if(ranDom(0, 99) < 70)
                    xRivalGuest.xSlot[k].waitTime = 1;
            
            }
            break;
        }
    }
    
    //정렬
    int totalSort = 0;
    int slotCode[128];
    
    for(int k=0;k<RIVALGUESTMAX;k++)
        slotCode[totalSort++] = k;
    
    for(int k=0;k<RIVALGUESTMAX;k++)
    {
        for(int z=k+1;z<RIVALGUESTMAX;z++)
        {
            if(xRivalGuest.xSlot[slotCode[z]].y < xRivalGuest.xSlot[slotCode[k]].y)
            {
                int codeTemp = slotCode[k];
                slotCode[k] = slotCode[z];
                slotCode[z] = codeTemp;
            }
        }
    }
    
    //그리기
    for(int k=0;k<RIVALGUESTMAX;k++)
    {
        
        int kBackup = k;
        k = slotCode[k];
        
        
        
        
        int anyImgNum = 0;
        switch(xRivalGuest.xSlot[k].state)
        {
        case RIVALGUEST_STATE_WAIT:
            anyImgNum = 4+((xRivalGuest.xSlot[k].anyCnt/4)%2);
            break;
        case RIVALGUEST_STATE_MOVE:
            anyImgNum = ((xRivalGuest.xSlot[k].anyCnt/4)%4);
            
            if(xRivalGuest.xSlot[k].x < xRivalGuest.xSlot[k].targetX)
                xRivalGuest.xSlot[k].isRever = true;
            else if(xRivalGuest.xSlot[k].x > xRivalGuest.xSlot[k].targetX)
                xRivalGuest.xSlot[k].isRever = false;
                
            break;
        }
        
        
        if(xRivalGuest.xSlot[k].isRever == true)
        {
            xGame.isReverse = true;
        }
        
        
        drawImage(&imgRivalGuest[xRivalGuest.xSlot[k].imgNum], xRivalGuest.xSlot[k].x, xRivalGuest.xSlot[k].y, imgRivalGuest[xRivalGuest.xSlot[k].imgNum].w/6*anyImgNum, 0, imgRivalGuest[xRivalGuest.xSlot[k].imgNum].w/6, imgRivalGuest[xRivalGuest.xSlot[k].imgNum].h, VH);
        xGame.isReverse = false;
        
        k = kBackup;
    }
}


void rivalUi(int x,int y)
{
    if(xRival.isNetLoad == true)
    {
        xGame.isRotate = TRUE;
        xGame.rotateNum = 360-(gameCnt%120)*3;
        drawPacker(imgLoadingIcon0, x, y, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
        xGame.isRotate = FALSE;
        return;
    }
    
    
    
    if(xSaveTemp.lv.oriData < xRival.openLv)
    {
        drawImage(&imgRivalUi[1], x, y, 0, 0, imgRivalUi[1].w, imgRivalUi[1].h, VH);
    }
    else
    {
        
        
        
        switch(xRival.state)
        {
        case RIVAL_STATE_WAIT:
            drawImage(&imgRivalUi[0], x, y, 0, 0, imgRivalUi[0].w, imgRivalUi[0].h, VH);
            //느낌
            drawImage(&imgRivalUi[5], x+42, y-55, 0, 0, imgRivalUi[5].w, imgRivalUi[5].h, VH);
            break;
        case RIVAL_STATE_PLAY:
            drawImage(&imgRivalUi[2], x, y, 0, 0, imgRivalUi[2].w, imgRivalUi[2].h, VH);
            
            break;
        case RIVAL_STATE_SUCCESS:
            drawImage(&imgRivalUi[0], x, y, 0, 0, imgRivalUi[0].w, imgRivalUi[0].h, VH);
            //성공도장
            drawImage(&imgRivalUi[3], x+22, y-26, 0, 0, imgRivalUi[3].w, imgRivalUi[3].h, VH);
            break;
        case RIVAL_STATE_FAIL:
            drawImage(&imgRivalUi[0], x, y, 0, 0, imgRivalUi[0].w, imgRivalUi[0].h, VH);
            //실패도장
            drawImage(&imgRivalUi[4], x+22, y-26, 0, 0, imgRivalUi[4].w, imgRivalUi[4].h, VH);
            break;
        }
    }
    
    
    xRival.xTouchUi2.wPos = imgRivalUi[0].w;
    xRival.xTouchUi2.hPos = imgRivalUi[0].h;
    xRival.xTouchUi2.xPos = x-xRival.xTouchUi2.wPos/2;
    xRival.xTouchUi2.yPos = y-xRival.xTouchUi2.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xRival.xTouchUi2.xPos, xRival.xTouchUi2.yPos, xRival.xTouchUi2.wPos, xRival.xTouchUi2.hPos);
    setAlpha(ALPHA_MAX);
    */

    int dx;
    int dy;

    if(xRival.state == RIVAL_STATE_PLAY)
    {
        
        
        subTemp[WPOS] = xRival.progressPerValue*imgRivalUi[7].w/1000;
        
        if(subTemp[WPOS] > imgRivalUi[7].w)
            subTemp[WPOS] = imgRivalUi[7].w;
        
        
        
        
        dx = x-47;
        dy = y+33;
        
        drawImage(&imgRivalUi[6], dx, dy, 0, 0, imgRivalUi[6].w, imgRivalUi[6].h, VL);
        drawImage(&imgRivalUi[7], dx+4, dy-1, 0, 0, subTemp[WPOS], imgRivalUi[7].h, VL);
        
        dx = x-3;
        dy = y-38;
        
        int hh = (xRival.remainTime/60/60);
        int mm = (xRival.remainTime/60)%60;
        int ss = xRival.remainTime%60;
        
        drawNum(&imgHotDealUi[2], dx-5-26, dy, hh/10, 0, VH);
        drawNum(&imgHotDealUi[2], dx+5-26, dy, hh%10, 0, VH);
        drawImage(&imgHotDealUi[1], dx-14+1, dy+1, 0, 0, imgHotDealUi[1].w, imgHotDealUi[1].h, VH);
        drawNum(&imgHotDealUi[2], dx-5, dy, mm/10, 0, VH);
        drawNum(&imgHotDealUi[2], dx+5, dy, mm%10, 0, VH);
        drawImage(&imgHotDealUi[1], dx+14, dy+1, 0, 0, imgHotDealUi[1].w, imgHotDealUi[1].h, VH);
        drawNum(&imgHotDealUi[2], dx-5+26, dy, ss/10, 0, VH);
        drawNum(&imgHotDealUi[2], dx+5+26, dy, ss%10, 0, VH);
    }
    
    int hh = 0;
    int fontW;
    
    dx = x+58;
    dy = y-32;
    //버프정보
    if(xRival.buffFame > 0)
    {
        if(xRival.buffFame < 10)
            fontW = 1;
        else if(xRival.buffFame < 100)
            fontW = 4;
        else
            fontW = 7;
        
        drawImage(&imgRivalUi[11], dx, dy+hh, 0, 0, imgRivalUi[11].w, imgRivalUi[11].h/3, VH);
        drawNum(&imgRivalUi[10], dx+1, dy+7+hh, xRival.buffFame, -2, VH);
        
        drawImage(&imgRivalUi[8], dx+1-fontW, dy+8+hh, 0, 0, imgRivalUi[8].w, imgRivalUi[8].h, VR);
        
        hh += 28;
    }
    if(xRival.buffSell > 0)
    {
        if(xRival.buffSell < 10)
            fontW = 1;
        else if(xRival.buffSell < 100)
            fontW = 4;
        else
            fontW = 7;
        
        drawImage(&imgRivalUi[11], dx, dy+hh, 0, imgRivalUi[11].h/3, imgRivalUi[11].w, imgRivalUi[11].h/3, VH);
        drawNum(&imgRivalUi[10], dx-1, dy+7+hh, xRival.buffSell, -2, VH);
        
        drawImage(&imgRivalUi[8], dx-2-fontW, dy+8+hh, 0, 0, imgRivalUi[8].w, imgRivalUi[8].h, VR);
        drawImage(&imgRivalUi[9], dx+3+fontW, dy+8+hh, 0, 0, imgRivalUi[9].w, imgRivalUi[9].h, VL);
        hh += 28;
    }
    if(xRival.buffExp > 0)
    {
        if(xRival.buffExp < 10)
            fontW = 1;
        else if(xRival.buffExp < 100)
            fontW = 4;
        else
            fontW = 7;
        
        drawImage(&imgRivalUi[11], dx, dy+hh, 0, imgRivalUi[11].h/3*2, imgRivalUi[11].w, imgRivalUi[11].h/3, VH);
        drawNum(&imgRivalUi[10], dx-1, dy+7+hh, xRival.buffExp, -2, VH);
        
        drawImage(&imgRivalUi[8], dx-2-fontW, dy+8+hh, 0, 0, imgRivalUi[8].w, imgRivalUi[8].h, VR);
        drawImage(&imgRivalUi[9], dx+3+fontW, dy+8+hh, 0, 0, imgRivalUi[9].w, imgRivalUi[9].h, VL);
        hh += 28;
    }
}

void setHelplist()
{
    xWorldMap.state = WORLDMAP_STATE_HELPLIST;
    helpListFreeLoad(true);
}

void helpListFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        loadImg("helplist0.png", &imgHelpList[0]);
        friendListFreeLoad(TRUE);
    }
    else
    {
        freeImg(&imgHelpList[0]);
        friendListFreeLoad(FALSE);
    }
}


void addHelpList(int userKey)
{
    //중복검사
    bool isCheck = false;
    for(int k=0;k<HELPLISTMAX;k++)
    {
        if(xHelpList.listUserKey[k] == userKey)
        {
            isCheck = true;
            break;
        }
    }
    
    if(isCheck == false)
    {
        for(int k=HELPLISTMAX-1;k>=1;k--)
        {
            xHelpList.listUserKey[k] = xHelpList.listUserKey[k-1];
        }
        xHelpList.listUserKey[0] = userKey;
        
        ++xHelpList.totalNum;
        
        if(xHelpList.totalNum > HELPLISTMAX)
            xHelpList.totalNum = HELPLISTMAX;
    }
}


void drawHelpList()
{
    int px = 0;
    int py = lcdH-imgHelpList[0].h;
    int iMax;
    int pos;
    
    drawBgFillRect();
    drawImage(&imgHelpList[0], px, py, 0, 0, imgHelpList[0].w, imgHelpList[0].h, TL);
    
    
    
    xHelpList.xDragScroll.totalNum = xHelpList.totalNum;
    
    xHelpList.xDragScroll.posGab = 156;
    xHelpList.xDragScroll.endPos = -(((((xHelpList.xDragScroll.totalNum+1)/2)-7)*xHelpList.xDragScroll.posGab));
    
    if(((xHelpList.xDragScroll.totalNum+1)/2) < 7)
        xHelpList.xDragScroll.endPos = 0;
    
    iMax = xHelpList.xDragScroll.totalNum;
    dragScrollPrc(&xHelpList.xDragScroll,1,FALSE);
    
    for(int i=0;i<iMax;i++)
    {
        pos = xHelpList.xDragScroll.pos+(xHelpList.xDragScroll.posGab*(i/2));
        
        subTemp[XPOS] = px+90+pos;
        subTemp[YPOS] = py+189+((i%2)*208);
        if(subTemp[XPOS] < -xHelpList.xDragScroll.posGab || subTemp[XPOS] > lcdW+xHelpList.xDragScroll.posGab)
            continue;
        
        
        int dataSlotNum = getFriendSlot(xHelpList.listUserKey[i]);
        
        drawFriendProfile(subTemp[XPOS],subTemp[YPOS],xHelpList.listUserKey[i],130);
                    
        drawPacker(imgFriendSlot0, subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgW(imgFriendSlot0), imgH(imgFriendSlot0), VH);
        sprintf(strTempS, "%s",xFriendData[dataSlotNum].strNickName);
        gSetColor(255, 255, 255);
        gDrawString(subTemp[XPOS],subTemp[YPOS]-88, strTempS, VH);
        
        /*
        sprintf(strTempS, "LV %d",xFriendData[dataSlotNum].lv);
        gSetColor(82, 49, 38);
        gDrawString(subTemp[XPOS],subTemp[YPOS]+78, strTempS, VH);
         */
    }
    
    
    
    xHelpList.xDragScroll.selectNum = (-xHelpList.xDragScroll.pos/xHelpList.xDragScroll.posGab);
    if(xHelpList.xDragScroll.selectNum < 0)
        xHelpList.xDragScroll.selectNum = 0;
    
    for(int i=0;i<16;i++)
    {
        subTemp[XPOS] = px+90+(i/2*xHelpList.xDragScroll.posGab);
        subTemp[YPOS] = py+189+((i%2)*208);
        
        xHelpList.xTouchSelectSlot[i].wPos = imgW(imgFriendSlot0);
        xHelpList.xTouchSelectSlot[i].hPos = imgH(imgFriendSlot0);
        xHelpList.xTouchSelectSlot[i].xPos = subTemp[XPOS]+(xHelpList.xDragScroll.pos%xHelpList.xDragScroll.posGab) - xHelpList.xTouchSelectSlot[i].wPos/2;
        xHelpList.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xHelpList.xTouchSelectSlot[i].hPos/2;
    }
    
    
    xHelpList.xTouchExit.xPos = 0;
    xHelpList.xTouchExit.yPos = 0;
    xHelpList.xTouchExit.wPos = lcdW;
    xHelpList.xTouchExit.hPos = 160;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xHelpList.xTouchExit.xPos, xHelpList.xTouchExit.yPos, xHelpList.xTouchExit.wPos, xHelpList.xTouchExit.hPos);
     setAlpha(ALPHA_MAX);
     */

}

void keyHelpList(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xHelpList.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            helpListFreeLoad(false);
            xWorldMap.state = WORLDMAP_STATE_PLAY;
        }
        else
        {
            dragScrollKeyPrc(&xHelpList.xDragScroll,0);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xHelpList.xDragScroll.touchXposBefore != DONT)
        {
            dragScrollKeyPrc(&xHelpList.xDragScroll,1);
        }
        else
        {
            int isKeyEvent = FALSE;
            int keyEventNum = 0;
            int selectSlot;
            
            for(int i=0;i<16;i++)
            {
                if(touchCheck(&xHelpList.xTouchSelectSlot[i]) == TRUE)
                {
                    isKeyEvent = TRUE;
                    keyEventNum = i;
                    break;
                }
            }
            
            selectSlot = keyEventNum+(xHelpList.xDragScroll.selectNum*2);
            
            if(selectSlot < 0|| selectSlot >= xHelpList.xDragScroll.totalNum)
                isKeyEvent = FALSE;
            if(isKeyEvent == TRUE)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isMiniProfile = TRUE;
                xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
                mailFreeLoad(TRUE);
                xMiniProfile.friendDataSlotNum = getFriendSlot(xHelpList.listUserKey[selectSlot]);
                /////////////////////////////////////////
                xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
                /////////////////////////////////////////
                
                //xHelpList.selectSlot;
                //xHelpList.totalNum;
                //xHelpList.listUserKey[HELPLISTMAX];
            }
        }
        xHelpList.xDragScroll.touchXpos = DONT;
        xHelpList.xDragScroll.touchYpos = DONT;
        xHelpList.xDragScroll.touchXposBefore = DONT;
        xHelpList.xDragScroll.touchYposBefore = DONT;
    }
}


void drawHelpListUi(int x,int y)
{
    if(xHelpList.totalNum == 0)
        return;
    
    int uiXX = 0;
    
    switch(xHelpList.state)
    {
        case HELPLIST_STATE_WAIT:
            if(xHelpList.totalNum > 1)
            {
                xHelpList.flowTime += xGame.prcSec;
                if(xHelpList.flowTime > 3)
                {
                    xHelpList.state = HELPLIST_STATE_NEXT;
                    xHelpList.anyCnt = 0;
                }
            }
            break;
        case HELPLIST_STATE_NEXT:
            switch(++xHelpList.anyCnt)
            {
            case 1:uiXX = 0;break;
            case 2:uiXX = 0;break;
            case 3:uiXX = 0;break;
            case 4:uiXX = 0;break;
            case 5:uiXX = 0;break;
            case 6:uiXX = 0;break;
            case 7:uiXX = -1;break;
            case 8:uiXX = -1;break;
            case 9:uiXX = -1;break;
            case 10:uiXX = -2;break;
            case 11:uiXX = -2;break;
            case 12:uiXX = -3;break;
            case 13:uiXX = -4;break;
            case 14:uiXX = -6;break;
            case 15:uiXX = -8;break;
            case 16:uiXX = -10;break;
            case 17:uiXX = -20;break;
            case 18:uiXX = -40;break;
            case 19:uiXX = -80;break;
            case 20:uiXX = -120;break;
            case 21:uiXX = -180;break;
            case 22:uiXX = -188;break;
            case 23:uiXX = -192;break;
            case 24:uiXX = -195;break;
            case 25:uiXX = -197;break;
            case 26:uiXX = -198;break;
            case 27:uiXX = -198;break;
            case 28:uiXX = -199;break;
            case 29:uiXX = -199;break;
            case 30:uiXX = -199;break;
            case 31:uiXX = -200;break;
            case 32:
                xHelpList.state = HELPLIST_STATE_WAIT;
                xHelpList.flowTime = 0;
                if(++xHelpList.selectUiSlot >= xHelpList.totalNum)
                    xHelpList.selectUiSlot = 0;
                break;
            }
            
            uiXX /= 2;
            
            break;
    }
    
    int nowCode = xHelpList.listUserKey[xHelpList.selectUiSlot];
    int nextCode = 0;
    
    if(xHelpList.selectUiSlot+1 >= xHelpList.totalNum)
        nextCode = xHelpList.listUserKey[0];
    else
        nextCode = xHelpList.listUserKey[xHelpList.selectUiSlot+1];
    
    
    gSetClip(true, x-50, y-100, 100, 200);
    
    drawFriendProfile(x+uiXX, y,nowCode,100);
    drawFriendProfile(x+100+uiXX, y,nextCode,100);
    gSetClip(false, x-100, y-100, 200, 200);
    drawImage(&imgHelpListIcon, x, y, 0, 0, imgHelpListIcon.w, imgHelpListIcon.h, VH);
    
    
    xHelpList.xTouchUi.wPos = 100;
    xHelpList.xTouchUi.hPos = 80;
    xHelpList.xTouchUi.xPos = x-xHelpList.xTouchUi.wPos/2;
    xHelpList.xTouchUi.yPos = y-xHelpList.xTouchUi.hPos/2;
    

    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xHelpList.xTouchUi.xPos, xHelpList.xTouchUi.yPos, xHelpList.xTouchUi.wPos, xHelpList.xTouchUi.hPos);
     setAlpha(ALPHA_MAX);
     */
}


char *getGradeName(int grade)
{
    switch(grade)
    {
    case 0:return "C";break;
    case 1:return "B";break;
    case 2:return "A";break;
    case 3:return "S";break;
    }
}

void setFastScroll(int x,int y,int w,int h,XDRAGSCROLL *xDragScroll)
{
    xFastScroll.x = x;
    xFastScroll.y = y;
    xFastScroll.w = w;
    xFastScroll.h = h;
    xFastScroll.xDragScroll = xDragScroll;
}

void drawFastScroll()
{
    int xx = xFastScroll.x;
    int yy = xFastScroll.y+xFastScroll.h/2;
    
    int nowPos = -xFastScroll.xDragScroll->pos;
    int endPos = -xFastScroll.xDragScroll->endPos;
    
    
    if(endPos != 0)
        xx+=nowPos * xFastScroll.w/endPos;
    
    xFastScroll.xTouchBar.xPos = xFastScroll.x;
    xFastScroll.xTouchBar.yPos = xFastScroll.y;
    xFastScroll.xTouchBar.wPos = xFastScroll.w;
    xFastScroll.xTouchBar.hPos = xFastScroll.h;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xFastScroll.x, xFastScroll.y, xFastScroll.w, xFastScroll.h);
    setAlpha(ALPHA_MAX);
     */
    
    if(xx < xFastScroll.x)
        xx = xFastScroll.x;
    else if(xx > xFastScroll.x+xFastScroll.w)
        xx = xFastScroll.x+xFastScroll.w;
        
    drawImage(&imgFastScroll, xx, yy, 0, 0, imgFastScroll.w, imgFastScroll.h, VH);
}

bool keyFastScroll(int type, int param1, int param2,int touchId,int touchCount)
{
    //터치 및 트레그
    if(touchTypeTemp == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xFastScroll.xTouchBar) == true)
        {
            int nowXpos = (xTouch.xPos+xTouch.wPos/2) - xFastScroll.xTouchBar.xPos;
            int targetXpos = nowXpos * (-xFastScroll.xDragScroll->endPos)/xFastScroll.w;
            xFastScroll.xDragScroll->pos = -targetXpos;
            return true;
        }
        else
            return false;
    }
    else
        return false;
}

bool keyFastScroll_FP(int type, int param1, int param2,int touchId,int touchCount)
{
    if(touchTypeTemp == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xFastScroll.xTouchBar)==true)
        {
            int nowYpos = (xTouch.yPos+xTouch.hPos/2)-xFastScroll.xTouchBar.yPos;
            int targetYpos = nowYpos * (-xFastScroll.xDragScroll->endPos)/xFastScroll.h;
            xFastScroll.xDragScroll->pos = - targetYpos;
            return true;
        }
        else
            return false;
    }
    else
        return false;
}


void drawMyShopRefresh(int x,int y)
{
    //내샵리플레쉬
    int hh = 0;
    
    for(int prcI=0;prcI<xGame.prcCnt;prcI++)
        --xWorldMap.myShopRefreshCnt;
    
    if(xWorldMap.myShopRefreshCnt < 0)
        xWorldMap.myShopRefreshCnt = 0;
    
    
    
    
    
    
    drawImage(&imgMyShopRefresh[0], x, y, 0, 0, imgMyShopRefresh[0].w, imgMyShopRefresh[0].h, VH);
    
    if(xWorldMap.myShopRefreshCnt > 0)
    {
        hh = xWorldMap.myShopRefreshCnt*imgMyShopRefresh[1].h/MYSHOPREFRESHCNTMAX;
        
        drawImage(&imgMyShopRefresh[1],x,y+imgMyShopRefresh[1].h/2,0,imgMyShopRefresh[1].h-hh,imgMyShopRefresh[1].w,hh,BH);
        drawNum(&imgMyShopRefresh[2], x-4,y-5, 1+(xWorldMap.myShopRefreshCnt/30), -3, VH);
    }
    
    xWorldMapUi.xTouchMyShopRefresh.wPos = 100;
    xWorldMapUi.xTouchMyShopRefresh.hPos = 100;
    xWorldMapUi.xTouchMyShopRefresh.xPos = x-xWorldMapUi.xTouchMyShopRefresh.wPos/2;
    xWorldMapUi.xTouchMyShopRefresh.yPos = y-xWorldMapUi.xTouchMyShopRefresh.hPos/2;
}




void setMyShopRefresh()
{
    
    xWorldMap.isMyShopRefreshNet = true;
    xWorldMap.myShopRefreshCnt = MYSHOPREFRESHCNTMAX;
    
    xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
    xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
    xEventQueueNet.slotNum[xEventQueueNet.totalNum] = 0;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
    
    xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
    xEventQueueNet.code[xEventQueueNet.totalNum] = 0;
    xEventQueueNet.slotNum[xEventQueueNet.totalNum] = 0;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GIFTLIST, TRUE);
    
    for(int ss=0;ss<SHOWWINDOWINFOMAX;ss++)
    {
        xShowWindowInfo[0][ss].totalSocialSlot = 0;
        xShowWindowInfo[1][ss].totalSocialSlot = 0;
    }

    for(int z=0;z<SELLTABLEINFOMAX;z++)
    {
        xSellTableInfo[0][z].totalSocialSlot = 0;
        xSellTableInfo[1][z].totalSocialSlot = 0;
    }
    
    ///////////////////////////////////////////////////////////////////
    xEventQueueNet.floor[xEventQueueNet.totalNum] = 0;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SOCIALLIST, TRUE);
    
    xEventQueueNet.floor[xEventQueueNet.totalNum] = 1;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SOCIALLIST, TRUE);
    ///////////////////////////////////////////////////////////////////
}

void setJewelQuest(int type,int num,int code)
{
    if(xAmulet.isOpen == false)
        return;
    
    if(xJewelQuest.isNetLoad == false)
        return;
    
    int questCheckType;
    bool isUpdate = false;
    
    for(int listNum=0;listNum<xJewelQuest.totalData;listNum++)
    {
        if(xJewelQuest.xData[listNum].isCheckClean == true)
            continue;
        
        if(isJewelQuestOpenCard(listNum) == false)
            continue;
        
        
        if(code == DONT || code == xJewelQuest.xData[listNum].checkCode)
        {
        
        }
        else
        {
            continue;
        }
        
        questCheckType = xJewelQuest.xData[listNum].checkType;
        
        if(questCheckType == type)
        {
            isUpdate = false;
            switch(type)
            {
            //현재
            case 0://	명성도 달성하기
            case 1://	패션쇼 점수 달성하기
            case 2://	특정 등급의 캐릭터 몇 명 보유하기
            case 3://	눈의여왕 의상 몇 개 보유하기
            case 4://	눈의여왕 창문보유하기
            case 5://	눈의여왕 의자보유하기
            case 6://	의상 라이선스 몇 개 보유하기
            case 7://	라이벌 스테이지 몇단계 클리어하기
            case 8://	패션쇼 몇 등 이상하기
            case 9://	증축 몇단계하기
            case 10://	확장 몇 단계하기
            case 11://	레벨달성하기
            case 14:
                if(num > xJewelQuest.xData[listNum].checkNow)
                {
                    isUpdate = true;
                    xJewelQuest.xData[listNum].checkNow = num;
                }
                break;
            //증가
            case 12://	골드획득하기(누적)
            case 13://	도움주고받기(누적)
                isUpdate = true;
                xJewelQuest.xData[listNum].checkNow += num;
                break;
            }
            
            if(isUpdate == true)
            {
                if(xJewelQuest.xData[listNum].checkNow > xJewelQuest.xData[listNum].checkMax)
                    xJewelQuest.xData[listNum].checkNow = xJewelQuest.xData[listNum].checkMax;
             
                xEventQueueNet.questIndex[xEventQueueNet.totalNum] = listNum;
                xEventQueueNet.questValue[xEventQueueNet.totalNum] = xJewelQuest.xData[listNum].checkNow;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_JEWELQUESTUPDATE, TRUE);
            }
        }
    }
}

void prcJewelQuest()
{
    int prcTemp[5];
    
    
    if(xAmulet.isOpen == false)
        return;

    
    if(xJewelQuest.isNetLoad == false)
        return;
    
    if(xWorldMap.isSubLoading == true || xWorldMap.isFriendMap == true || xFriendMap.isPlay == true)
        return;
    
    if(xWorldMap.state != WORLDMAP_STATE_PLAY)
        return;
    
    
    //0.명성도 달성하기
    setJewelQuest(0,xSaveTemp.fame.oriData,DONT);
    //1.패션쇼 점수 달성하기
    //처리완료
    //2.특정 등급의 캐릭터 몇 명 보유하기
    prcTemp[0] = 0;
    prcTemp[1] = 0;
    prcTemp[2] = 0;
    prcTemp[3] = 0;
    for(int i=0;i<xModel.totalInventoryModel;i++)
    {
        prcTemp[xModelData[xInventoryModel[i].code].grade]++;
    }
    setJewelQuest(2, prcTemp[0],0);
    setJewelQuest(2, prcTemp[1],1);
    setJewelQuest(2, prcTemp[2],2);
    setJewelQuest(2, prcTemp[3],3);
    //3.눈의여왕 의상 몇 개 보유하기
    prcTemp[0] = 0;
    for(int i=0;i<FASHIONDATATYPEMAX;i++)
    {
        for(int j=0;j<FASHIONDATAMAX;j++)
        {
            if(xInventoryFashion.isOpen[i][j] == TRUE)
            {
                if(xFashionData[i][j].isStaff == 2)
                    ++prcTemp[0];
            }
        }
    }
    setJewelQuest(3,prcTemp[0],DONT);
    //4.인테리어 보유
    for(int k=0;k<xJewelQuest.totalData;k++)
    {
        if(xJewelQuest.xData[k].checkType == 4)
            setJewelQuest(4, isInteriorUseCount(xJewelQuest.xData[k].checkCode),xJewelQuest.xData[k].checkCode);
    }
    //5.미사용
    //6.의상 라이선스 몇 개 보유하기
    prcTemp[0] = 0;
    for(int i=0;i<FASHIONDATATYPEMAX;i++)
    {
        for(int j=0;j<FASHIONDATAMAX;j++)
        {
            if(xInventoryFashion.isOpen[i][j] == TRUE)
            {
                ++prcTemp[0];
            }
        }
    }
    setJewelQuest(6, prcTemp[0],DONT);
    //7.라이벌 스테이지 몇단계 클리어하기
    for(int k=0;k<xJewelQuest.totalData;k++)
    {
        if(xJewelQuest.xData[k].checkType == 7)
        {
            int qeustMain = xJewelQuest.xData[k].checkCode/100;
            int questDetail = xJewelQuest.xData[k].checkCode%100;
            
            if(xRival.completeMain > qeustMain
               ||(xRival.completeMain == qeustMain && xRival.completeDetail > questDetail))
                setJewelQuest(7, 1,xJewelQuest.xData[k].checkCode);
        }
    }
    //8.패션쇼 몇 등 이상하기
    for(int k=0;k<xWinnerModel.totalNum;k++)
    {
        if(xNetData.userNum == xFriendData[xWinnerModel.friendDataNum[k]].userNum)
        {
            switch(k)
            {
            case 0:
                setJewelQuest(8, 1,1);
                setJewelQuest(8, 1,2);
                setJewelQuest(8, 1,3);
                break;
            case 1:
                setJewelQuest(8, 1,2);
                setJewelQuest(8, 1,3);
                break;
            case 2:
                setJewelQuest(8, 1,3);
                break;
            }
            
        }
    }
    //9.증축 몇단계하기
    setJewelQuest(9, xMap.totalFloor,DONT);
    //10.확장 몇 단계하기
    setJewelQuest(10, 8+xMap.extension,DONT);
    //11.레벨달성하기
    setJewelQuest(11, xSaveTemp.lv.oriData,DONT);
    //12.골드획득하기(누적)
    //적용
    //13.도움주고받기(누적)
    //적용
    
    for(int listNum=0;listNum<xJewelQuest.totalData;listNum++)
    {
        if(xJewelQuest.xData[listNum].checkNow >= xJewelQuest.xData[listNum].checkMax)
        {
            xJewelQuest.xData[listNum].isCheckClean = true;

            if(xJewelQuest.xData[listNum].state == JEWELQUEST_STATE_PLAY)
            {
                setJewelResult(listNum);
            }
        }
    }
    
    
    
    
    for(int k=0;k<JEWELBUFFMAX;k++)
    {
        xAmulet.buff[k] = 0;
    }
    
    if(xAmulet.isNetLoad == true)
    {
        for(int k=0;k<xAmulet.xData[xAmulet.xAmuletPage[xAmulet.selectAmuletPage].amuletCode].totalSocket;k++)
        {
            int jewelCode = xAmulet.xAmuletPage[xAmulet.selectAmuletPage].socketJewelCode[k];
            
            if(jewelCode != DONT)
            {
                xAmulet.buff[xJewel.xData[jewelCode].buffType] += xJewel.xData[jewelCode].buffValue;
            }
        }
        
        xAmulet.buff[xAmulet.xData[xAmulet.xAmuletPage[xAmulet.selectAmuletPage].amuletCode].buffType] += xAmulet.xData[xAmulet.xAmuletPage[xAmulet.selectAmuletPage].amuletCode].buffValue;
        
        
        if(xAmulet.buff[0] > 0)
        {
            for(int k=1;k<JEWELBUFFMAX;k++)
            {
                xAmulet.buff[k] += xAmulet.buff[k]*xAmulet.buff[0]/100;
            }
        }
    }
    
    
    
    

}



void jewelQuestFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        loadImg("jewelquest0.png", &imgJewelQuest[0]);
        loadImg("jewelquest1.png", &imgJewelQuest[1]);
        loadImg("jewelquest2.png", &imgJewelQuest[2]);
        loadImg("jewelquest3.png", &imgJewelQuest[3]);
        loadImg("jewelquest4.png", &imgJewelQuest[4]);
        loadImg("jewelquest5.png", &imgJewelQuest[5]);
        loadImg("jewelquest6.png", &imgJewelQuest[6]);
        loadImg("jewelquest7.png", &imgJewelQuest[7]);
        loadImg("jewelquest8.png", &imgJewelQuest[8]);
        loadImg("jewelquest9.png", &imgJewelQuest[9]);
        loadImg("jewelquest10.png", &imgJewelQuest[10]);
        
        loadImg("jewelquesttab0.png", &imgJewelQuestTab[0]);
        loadImg("jewelquesttab1.png", &imgJewelQuestTab[1]);
        
        loadImg("jewelquesttype0.png", &imgJewelQuestType[0]);
        loadImg("jewelquesttype1.png", &imgJewelQuestType[1]);
        loadImg("jewelquesttype2.png", &imgJewelQuestType[2]);
        loadImg("jewelquesttype3.png", &imgJewelQuestType[3]);
        loadImg("jewelquesttype4.png", &imgJewelQuestType[4]);
        loadImg("jewelquesttype5.png", &imgJewelQuestType[5]);
        loadImg("jewelquesttype6.png", &imgJewelQuestType[6]);
        loadImg("jewelquesttype7.png", &imgJewelQuestType[7]);
        loadImg("jewelquesttype8.png", &imgJewelQuestType[8]);
        loadImg("jewelquesttype9.png", &imgJewelQuestType[9]);
        loadImg("jewelquesttype10.png", &imgJewelQuestType[10]);
        loadImg("jewelquesttype11.png", &imgJewelQuestType[11]);
        loadImg("jewelquesttype12.png", &imgJewelQuestType[12]);
        loadImg("jewelquesttype13.png", &imgJewelQuestType[13]);
        loadImg("jewelquesttype14.png", &imgJewelQuestType[14]);
        
        loadImg("jewelbuffbg0.png", &imgJewelBuffBg[0]);
        loadImg("jewelbuffbg1.png", &imgJewelBuffBg[1]);
        loadImg("jewelbuffbg2.png", &imgJewelBuffBg[2]);
        loadImg("jewelbuffbg3.png", &imgJewelBuffBg[3]);
        loadImg("jewelbuffbg4.png", &imgJewelBuffBg[4]);
        loadImg("jewelbuffbg5.png", &imgJewelBuffBg[5]);
        loadImg("jewelbuffbg6.png", &imgJewelBuffBg[6]);
        loadImg("jewelbuffbg7.png", &imgJewelBuffBg[7]);
        loadImg("jewelbuffbg8.png", &imgJewelBuffBg[8]);
        loadImg("jewelbuffbg9.png", &imgJewelBuffBg[9]);
        
        loadImg("shopmoneyicon11.png",&imgGiftGoldIcon);
        loadImg("shopmoneyicon1.png",&imgGiftLookIcon);
        loadImg("shoppremiumicon5.png",&imgGiftCandyIcon);
        
        loadImg("shoppremiumicon0.png", &imgGiftModelCastingCAIcon);
        loadImg("shoppremiumicon1.png", &imgGiftModelCastingBSIcon);
        loadImg("shoppremiumicon2.png", &imgGiftTrendHangerIcon);
        loadImg("shoppremiumicon3.png", &imgGiftTrendAccessoryIcon);
        
        
        
        ////아뮬렛
        loadImg("amuletsetting0.png", &imgAmuletSetting[0]);
        loadImg("amuletsetting1.png", &imgAmuletSetting[1]);
        loadImg("amuletsetting2.png", &imgAmuletSetting[2]);
        loadImg("amuletsetting3.png", &imgAmuletSetting[3]);
        loadImg("amuletsetting4.png", &imgAmuletSetting[4]);
        loadImg("amuletsetting5.png", &imgAmuletSetting[5]);
        loadImg("amuletsetting6.png", &imgAmuletSetting[6]);
        loadImg("amuletsetting7.png", &imgAmuletSetting[7]);
        loadImg("amuletsetting8.png", &imgAmuletSetting[8]);
        loadImg("amuletsetting9.png", &imgAmuletSetting[9]);
        
        
        
        loadImg("amuletslot00.png", &imgAmuletSlot[0][0]);
        loadImg("amuletslot01.png", &imgAmuletSlot[0][1]);
        loadImg("amuletslot02.png", &imgAmuletSlot[0][2]);
        
        loadImg("amuletslot10.png", &imgAmuletSlot[1][0]);
        loadImg("amuletslot11.png", &imgAmuletSlot[1][1]);
        loadImg("amuletslot12.png", &imgAmuletSlot[1][2]);
        
    }
    else
    {
        freeImg(&imgJewelQuest[0]);
        freeImg(&imgJewelQuest[1]);
        freeImg(&imgJewelQuest[2]);
        freeImg(&imgJewelQuest[3]);
        freeImg(&imgJewelQuest[4]);
        freeImg(&imgJewelQuest[5]);
        freeImg(&imgJewelQuest[6]);
        freeImg(&imgJewelQuest[7]);
        freeImg(&imgJewelQuest[8]);
        freeImg(&imgJewelQuest[9]);
        freeImg(&imgJewelQuest[10]);
        
        freeImg(&imgJewelQuestTab[0]);
        freeImg(&imgJewelQuestTab[1]);
        
        
        freeImg(&imgJewelQuestType[0]);
        freeImg(&imgJewelQuestType[1]);
        freeImg(&imgJewelQuestType[2]);
        freeImg(&imgJewelQuestType[3]);
        freeImg(&imgJewelQuestType[4]);
        freeImg(&imgJewelQuestType[5]);
        freeImg(&imgJewelQuestType[6]);
        freeImg(&imgJewelQuestType[7]);
        freeImg(&imgJewelQuestType[8]);
        freeImg(&imgJewelQuestType[9]);
        freeImg(&imgJewelQuestType[10]);
        freeImg(&imgJewelQuestType[11]);
        freeImg(&imgJewelQuestType[12]);
        freeImg(&imgJewelQuestType[13]);
        freeImg(&imgJewelQuestType[14]);
        
        freeImg(&imgJewelBuffBg[0]);
        freeImg(&imgJewelBuffBg[1]);
        freeImg(&imgJewelBuffBg[2]);
        freeImg(&imgJewelBuffBg[3]);
        freeImg(&imgJewelBuffBg[4]);
        freeImg(&imgJewelBuffBg[5]);
        freeImg(&imgJewelBuffBg[6]);
        freeImg(&imgJewelBuffBg[7]);
        freeImg(&imgJewelBuffBg[8]);
        freeImg(&imgJewelBuffBg[9]);
        
        freeImg(&imgGiftGoldIcon);
        freeImg(&imgGiftLookIcon);
        freeImg(&imgGiftCandyIcon);
        
        freeImg(&imgGiftModelCastingCAIcon);
        freeImg(&imgGiftModelCastingBSIcon);
        freeImg(&imgGiftTrendHangerIcon);
        freeImg(&imgGiftTrendAccessoryIcon);
        
        
        
        //아뮬렛
        freeImg(&imgAmuletSetting[0]);
        freeImg(&imgAmuletSetting[1]);
        freeImg(&imgAmuletSetting[2]);
        freeImg(&imgAmuletSetting[3]);
        freeImg(&imgAmuletSetting[4]);
        freeImg(&imgAmuletSetting[5]);
        freeImg(&imgAmuletSetting[6]);
        freeImg(&imgAmuletSetting[7]);
        freeImg(&imgAmuletSetting[8]);
        freeImg(&imgAmuletSetting[9]);
        
        freeImg(&imgAmuletSlot[0][0]);
        freeImg(&imgAmuletSlot[0][1]);
        freeImg(&imgAmuletSlot[0][2]);
        freeImg(&imgAmuletSlot[1][0]);
        freeImg(&imgAmuletSlot[1][1]);
        freeImg(&imgAmuletSlot[1][2]);
        

    }
}
void initJewelQuest()
{
    xWorldMap.state = WORLDMAP_STATE_JEWELQUEST;
    sortJewelQuest();
    jewelQuestFreeLoad(true);
    
    memcpy(&xAmuletSetting.xEditPage, &xAmulet.xAmuletPage[xAmulet.selectAmuletPage], sizeof(xAmuletSetting.xEditPage));
    
    
    for(int k=0;k<AMULETDATAMAX;k++)
    {
        for(int z=0;z<AMULETSOCKETMAX;z++)
        {
            xAmuletSetting.amuletSocketJewelCodeTemp[k][z] = DONT;
        }
    }
}

void sortJewelQuest()
{
    xJewelQuest.totalList = 0;
    xJewelQuest.listCode[xJewelQuest.totalList++] = -3;   //유니크
    for(int k=0;k<xJewelQuest.totalData;k++)
    {
        if(xJewel.xData[xJewelQuest.xData[k].jewelCode].grade == 2)
        {
            xJewelQuest.listCode[xJewelQuest.totalList++] = k;
        }
    }
    xJewelQuest.listCode[xJewelQuest.totalList++] = -2;   //레어
    for(int k=0;k<xJewelQuest.totalData;k++)
    {
        if(xJewel.xData[xJewelQuest.xData[k].jewelCode].grade == 1)
        {
            xJewelQuest.listCode[xJewelQuest.totalList++] = k;
        }
    }
    xJewelQuest.listCode[xJewelQuest.totalList++] = -1;   //일반
    for(int k=0;k<xJewelQuest.totalData;k++)
    {
        if(xJewel.xData[xJewelQuest.xData[k].jewelCode].grade == 0)
        {
            xJewelQuest.listCode[xJewelQuest.totalList++] = k;
        }
    }
}







void drawJewelQuest()
{
    int px = cx;
    int py = cy;
    
    
    drawImage(&imgJewelQuest[0], px, py, 0, 0, imgJewelQuest[0].w, imgJewelQuest[0].h, VH);
    
    
    for(int k=0;k<2;k++)
    {
        subTemp[XPOS] = px-150+(300*k);
        subTemp[YPOS] = py-270;
     
        if(xJewelQuest.selectTab == k)
            drawImage(&imgJewelQuestTab[k], subTemp[XPOS], subTemp[YPOS], 0, imgJewelQuestTab[k].h/2, imgJewelQuestTab[k].w, imgJewelQuestTab[k].h/2, VH);
        else
            drawImage(&imgJewelQuestTab[k], subTemp[XPOS], subTemp[YPOS], 0, 0, imgJewelQuestTab[k].w, imgJewelQuestTab[k].h/2, VH);
        
        xJewelQuest.xTouchTab[k].wPos = imgJewelQuestTab[k].w;
        xJewelQuest.xTouchTab[k].hPos = imgJewelQuestTab[k].h/2;
        xJewelQuest.xTouchTab[k].xPos = subTemp[XPOS]-xJewelQuest.xTouchTab[k].wPos/2;
        xJewelQuest.xTouchTab[k].yPos = subTemp[YPOS]-xJewelQuest.xTouchTab[k].hPos/2;
    }
    
    
    if(xJewelQuest.selectTab == 1)
        drawAmuletSetting();
    else
    {
        drawImage(&imgJewelQuest[1], px, py+50, 0, 0, imgJewelQuest[1].w, imgJewelQuest[1].h, VH);
        
        //세부메뉴
        for(int i=0;i<xJewelQuest.totalList;i++)
        {
            
            xJewelQuest.xTouchList[i].xPos = 0;
            xJewelQuest.xTouchList[i].yPos = 1000;
            xJewelQuest.xTouchList[i].wPos = 0;
            xJewelQuest.xTouchList[i].hPos = 0;
        }
        
        int indexX = 0;
        int posY = 0;
        
        xJewelQuest.xDragScroll.totalNum = 1;
        gSetClip(true, 0, py-192, lcdW, 482);
        for(int i=0;i<xJewelQuest.totalList;i++)
        {
            int code = xJewelQuest.listCode[i];
            
            if(code < 0)
            {
                if(indexX != 0)
                {
                    indexX = 0;
                    posY += 155;
                    xJewelQuest.xDragScroll.totalNum++;
                }
                subTemp[XPOS] = px-247;
                subTemp[YPOS] = py-160+posY+xJewelQuest.xDragScroll.pos;
                
                switch(code)
                {
                    case -3:    //유니크
                        drawImage(&imgJewelQuest[2], subTemp[XPOS], subTemp[YPOS], 0, imgJewelQuest[2].h/3*2, imgJewelQuest[2].w, imgJewelQuest[2].h/3, VH);
                        break;
                    case -2:    //레어
                        drawImage(&imgJewelQuest[2], subTemp[XPOS], subTemp[YPOS], 0, imgJewelQuest[2].h/3*1, imgJewelQuest[2].w, imgJewelQuest[2].h/3, VH);
                        break;
                    case -1:    //일반
                        drawImage(&imgJewelQuest[2], subTemp[XPOS], subTemp[YPOS], 0, imgJewelQuest[2].h/3*0, imgJewelQuest[2].w, imgJewelQuest[2].h/3, VH);
                        break;
                }
                posY += 140;
                xJewelQuest.xDragScroll.totalNum++;
            }
            else
            {
                subTemp[XPOS] = px-346+(indexX*346);
                subTemp[YPOS] = py-160+posY+xJewelQuest.xDragScroll.pos;
                
                if(subTemp[YPOS] >= lcdH+100 || subTemp[YPOS] < py-320)
                {
                    
                }
                else
                {
                    
                    
                    drawJewelCard(subTemp[XPOS],subTemp[YPOS],code);
                    
                    
                    xJewelQuest.xTouchList[i].wPos = imgJewelQuest[3].w;
                    xJewelQuest.xTouchList[i].hPos = imgJewelQuest[3].h;
                    xJewelQuest.xTouchList[i].xPos = subTemp[XPOS]-xJewelQuest.xTouchList[i].wPos/2;
                    xJewelQuest.xTouchList[i].yPos = subTemp[YPOS]-xJewelQuest.xTouchList[i].hPos/2;
                }
                
                if(++indexX >= 3)
                {
                    if(i != xJewelQuest.totalList-1 && xJewelQuest.listCode[i+1] >= 0)
                    {
                        indexX = 0;
                        posY += 207;
                        xJewelQuest.xDragScroll.totalNum++;
                    }
                }
            }
        }
        gSetClip(false, 0, py-200, lcdW, 400);
        
        xJewelQuest.xDragScroll.posGab = 30;
        xJewelQuest.xDragScroll.endPos = -posY+345;
        dragScrollPrc(&xJewelQuest.xDragScroll,1,FALSE);
    }
    
    subTemp[XPOS] = px+500;
    subTemp[YPOS] = py-280;
    
    xJewelQuest.xTouchExit.wPos = 80;
    xJewelQuest.xTouchExit.hPos = 80;
    xJewelQuest.xTouchExit.xPos = subTemp[XPOS]-xJewelQuest.xTouchExit.wPos/2;
    xJewelQuest.xTouchExit.yPos = subTemp[YPOS]-xJewelQuest.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xJewelQuest.xTouchExit.xPos, xJewelQuest.xTouchExit.yPos, xJewelQuest.xTouchExit.wPos, xJewelQuest.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
}



void keyJewelQuest(int type, int param1, int param2)
{
    if(xJewelQuest.selectTab == 1)
        keyAmuletSetting(type, param1, param2);
    else
    {
        if(type == MH_KEY_PRESSEVENT)
        {
            bool isTabB = false;
            int tabB = 0;
            
            for(int k=0;k<2;k++)
            {
                if(touchCheck(&xJewelQuest.xTouchTab[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    isTabB = true;
                    tabB = k;
                    break;
                }
            }
            
            if(touchCheck(&xJewelQuest.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                jewelQuestFreeLoad(false);
                xWorldMap.state = WORLDMAP_STATE_PLAY;
            }
            else if(isTabB == true)
            {
                if(tabB != xJewelQuest.selectTab)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    xJewelQuest.selectTab = tabB;
                }
                
            }
            else
            {
                dragScrollKeyPrc(&xJewelQuest.xDragScroll,2);
            }
        }
        else if(type == MH_KEY_RELEASEEVENT)
        {
            if(xJewelQuest.xDragScroll.touchXposBefore != DONT)
            {
                dragScrollKeyPrc(&xJewelQuest.xDragScroll,3);
            }
            else
            {
                bool isList = false;
                int listSlot = 0;

                for(int k=0;k<xJewelQuest.totalList;k++)
                {
                    if(touchCheck(&xJewelQuest.xTouchList[k]) == TRUE)
                    {
                        isList = true;
                        listSlot = k;
                        break;
                    }
                }
                
                if(isList == true)
                {
                    /*
                    playSnd(SND_MENU_OK);
                    int code = xJewelQuest.listCode[listSlot];
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "%d데이터터치",code);
                     */
                }
            }
            xJewelQuest.xDragScroll.touchXpos = DONT;
            xJewelQuest.xDragScroll.touchYpos = DONT;
            xJewelQuest.xDragScroll.touchXposBefore = DONT;
            xJewelQuest.xDragScroll.touchYposBefore = DONT;
        }
    }
}


char *getJewelQuestName(int type,int code,int value)
{
    char strResult[512];
    
    switch(type)
    {
    case 0:	sprintf(strResult, "명성도 달성");break;
    case 1:	sprintf(strResult, "패션쇼 점수 달성");break;
    case 2:	sprintf(strResult, "%s등급의 캐릭터 보유",code==0?"C":code==1?"B":code==2?"A":"S");break;
    case 3:	sprintf(strResult, "눈의여왕 의상 보유");break;
    case 4:	sprintf(strResult, "%s 보유",xObj.xObjData[code/1000][code%1000].strName);break;
    case 5:	sprintf(strResult, "미사용");break;
    case 6:	sprintf(strResult, "의상 라이선스 보유");break;
    case 7:	sprintf(strResult, "라이벌 %d-%d 클리어",(code/100)+1,(code%100)+1);break;
    case 8:	sprintf(strResult, "패션쇼 %d등 이상",code);break;
    case 9:	sprintf(strResult, "%d층 증축",value);break;
    case 10: sprintf(strResult, "%dx%d 확장",value,value);break;
    case 11: sprintf(strResult, "레벨 달성");break;
    case 12: sprintf(strResult, "골드 획득(누적)");break;
    case 13: sprintf(strResult, "도움 주고 받기(누적)");break;
    case 14: sprintf(strResult, "매장 꾸미기 아이템 30개 설치");break;
    }
    return strResult;
}


char *getJewelBuffName(int buffType,int buffValue)
{
    char strResult[512];
    
    switch(buffType)
    {
    case 0: sprintf(strResult, "쥬얼버프 강화");break;
    case 1: sprintf(strResult, "패션쇼점수");break;
    case 2: sprintf(strResult, "S급 뽑기 확률");break;
    case 3: sprintf(strResult, "한정템획득 확률");break;
    case 4: sprintf(strResult, "판매속도(선호도)");break;
    case 5: sprintf(strResult, "명성도 증가");break;
    case 6: sprintf(strResult, "경험치획득");break;
    case 7: sprintf(strResult, "골드획득");break;
    case 8: sprintf(strResult, "소셜횟수");break;
    case 9: sprintf(strResult, "커플손님 증가");break;
    }
    
    return strResult;
}


void drawJewelIcon(int x,int y,int code)
{
    sprintf(strTempS,"jewelicon%d.png",code);
    if(imgJewelIcon[code].texture == NULL)
    {
        loadImgDocuments(strTempS, &imgJewelIcon[code]);
    }
    drawImage(&imgJewelIcon[code], x, y, 0, 0, imgJewelIcon[code].w, imgJewelIcon[code].h, VH);
}

void setJewelResult(int jewelCode)
{
    
    if(xJewelQuest.isNetLoad == false)
        return;

    
    if(xWorldMap.isSubLoading == FALSE && xFriendMap.isPlay == FALSE && xWorldMap.isFriendMap == FALSE && xWorldMap.isLvUp == FALSE && xWorldMap.isTuto == false)
    {
        if(xWorldMap.state == WORLDMAP_STATE_PLAY)
        {
            ////////////////nets
            xEventQueueNet.questIndex[xEventQueueNet.totalNum] = jewelCode;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_JEWELQUESTCOMPLETE, TRUE);
            ////////////////nete
            
            xJewelQuest.xData[jewelCode].state = JEWELQUEST_STATE_COMPLETE;
            xJewelResult.resultJewelQuestCode = jewelCode;
            xJewelResult.anyCnt = 0;
            xWorldMap.state = WORLDMAP_STATE_JEWELRESULT;
            jewelQuestFreeLoad(true);
            jewelResultFreeLoad(true);
        }
    }
}


void jewelResultFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        loadImg("jewelresult0.png", &imgJewelResult[0]);
        
        loadImg("newdancereff2.png", &imgNewDancerEff[2]);
        
    }
    else
    {
        freeImg(&imgJewelResult[0]);
        
        freeImg(&imgNewDancerEff[2]);
    }
    
}
void drawJewelResult()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    drawImage(&imgJewelResult[0], px, py, 0, 0, imgJewelResult[0].w, imgJewelResult[0].h, VH);
    
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+150;
    xJewelResult.xTouchExit.wPos = 240;
    xJewelResult.xTouchExit.hPos = 80;
    xJewelResult.xTouchExit.xPos = subTemp[XPOS]-xJewelResult.xTouchExit.wPos/2;
    xJewelResult.xTouchExit.yPos = subTemp[YPOS]-xJewelResult.xTouchExit.hPos/2;
        
    /*
    setAlpha(100);
    gSetColor(255, 0, 0);
    fillRect(xJewelResult.xTouchExit.xPos, xJewelResult.xTouchExit.yPos, xJewelResult.xTouchExit.wPos, xJewelResult.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    
    
    
    
    
    
    drawJewelCard(px,py-13,xJewelResult.resultJewelQuestCode);
    
    
    
    
    

}

void keyJewelResult(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xJewelResult.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            jewelQuestFreeLoad(false);
            jewelResultFreeLoad(false);
            xWorldMap.state = WORLDMAP_STATE_PLAY;
        }
    }
}




void drawJewelCard(int x,int y,int jewelQuestCode)
{
    switch(xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].grade)
    {
        case 0://일반
            drawImage(&imgJewelQuest[3], x, y, 0, 0, imgJewelQuest[3].w, imgJewelQuest[3].h, VH);
            break;
        case 1://레어
            drawImage(&imgJewelQuest[4], x, y, 0, 0, imgJewelQuest[4].w, imgJewelQuest[4].h, VH);
            break;
        case 2://유니크
            drawImage(&imgJewelQuest[5], x, y, 0, 0, imgJewelQuest[5].w, imgJewelQuest[5].h, VH);
            break;
    }
    
    drawImage(&imgJewelQuestType[xJewelQuest.xData[jewelQuestCode].checkType], x-123, y-75, 0, 0, imgJewelQuestType[xJewelQuest.xData[jewelQuestCode].checkType].w, imgJewelQuestType[xJewelQuest.xData[jewelQuestCode].checkType].h, VH);
    setFontSizeORI(13);
    gSetColor(255, 255, 255);
    gDrawString(x-123, y-48, xJewelQuest.xData[jewelQuestCode].strName, VH);
    setFontSize(11);
    
    gSetColor(42, 0, 0);
    setFontSizeORI(19);
    gDrawString(x+36, y-76, getJewelQuestName(xJewelQuest.xData[jewelQuestCode].checkType,xJewelQuest.xData[jewelQuestCode].checkCode,xJewelQuest.xData[jewelQuestCode].checkMax), VH);
    
    
    char strNow[128];
    char strMax[128];
    setCommaNum(strNow, xJewelQuest.xData[jewelQuestCode].checkNow);
    setCommaNum(strMax, xJewelQuest.xData[jewelQuestCode].checkMax);
    setFontSizeORI(16);
    sprintf(strTempS, "(%s/%s)",strNow,strMax);
    gSetColor(100, 48, 48);
    gDrawString(x+36, y-55, strTempS, VH);
    setFontSize(11);
    
    drawImage(&imgJewelBuffBg[xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffType], x-106, y+33, 0, 0,imgJewelBuffBg[xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffType].w, imgJewelBuffBg[xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffType].h, VH);
    
    int startAnyCnt = 0;
    int alpha = 0;
    int scale = 0;
    int rot = 0;
    
    if(xWorldMap.state == WORLDMAP_STATE_JEWELRESULT)
    {
        for(int prcI=0;prcI<xGame.prcCnt;prcI++)
        {
            ++xJewelResult.anyCnt;
            
            if(xJewelResult.anyCnt == 5)
                playSnd(SND_JEWEL);
        }
    }
    else
    {
        xJewelResult.anyCnt = 999;
    }
    
    startAnyCnt = xJewelResult.anyCnt-5;
    alpha = 100;
    scale = 100;
    
    if(startAnyCnt >= 0)
    {
        switch(startAnyCnt)
        {
        case 0:alpha=30;scale=300;break;
        case 1:alpha=53.3333;scale=233.333;break;
        case 2:alpha=76.6667;scale=166.667;break;
        case 3:alpha=100;scale=100;break;
        case 4:alpha=100;scale=100;break;
        case 5:alpha=100;scale=100;break;
        case 6:alpha=100;scale=100;break;
        case 7:alpha=100;scale=100;break;
        case 8:alpha=100;scale=100;break;
        case 9:alpha=100;scale=100;break;
        case 10:alpha=100;scale=100;break;
        case 11:alpha=100;scale=100;break;
        case 12:alpha=100;scale=100;break;
        case 13:alpha=100;scale=100;break;
        case 14:alpha=100;scale=100;break;
        case 15:alpha=100;scale=100;break;
        case 16:alpha=100;scale=100;break;
        case 17:alpha=100;scale=100;break;
        case 18:alpha=100;scale=100;break;
        case 19:alpha=100;scale=100;break;
        case 20:alpha=100;scale=100;break;
        case 21:alpha=100;scale=100;break;
        case 22:alpha=100;scale=100;break;
        case 23:alpha=100;scale=100;break;
        case 24:alpha=100;scale=100;break;
        default:alpha=100;scale=100;break;
        }
    }
    
    xGame.isReSizeDraw = true;
    xGame.reSize = scale;
    setAlpha(alpha*ALPHA_MAX/100);
    drawJewelIcon(x-106, y+33, xJewelQuest.xData[jewelQuestCode].jewelCode);
    setAlpha(ALPHA_MAX);
    xGame.isReSizeDraw = false;
    
    startAnyCnt = xJewelResult.anyCnt-8;
    if(startAnyCnt >= 0)
    {
        switch(startAnyCnt)
        {
        case 0:alpha=70;scale=100;break;
        case 9:alpha=70;scale=109;break;
        case 10:alpha=68;scale=115;break;
        case 11:alpha=66;scale=119;break;
        case 12:alpha=64;scale=122;break;
        case 13:alpha=61;scale=125;break;
        case 14:alpha=57;scale=127;break;
        case 15:alpha=53;scale=129;break;
        case 16:alpha=49;scale=130;break;
        case 17:alpha=44;scale=132;break;
        case 18:alpha=40;scale=133;break;
        case 19:alpha=35;scale=134;break;
        case 20:alpha=30;scale=135;break;
        case 21:alpha=26;scale=135;break;
        case 22:alpha=21;scale=136;break;
        case 23:alpha=17;scale=136;break;
        case 24:alpha=13;scale=137;break;
        case 25:alpha=9;scale=137;break;
        case 26:alpha=6;scale=138;break;
        case 27:alpha=4;scale=138;break;
        case 28:alpha=2;scale=138;break;
        case 29:alpha=0;scale=138;break;
        default:alpha=0;scale=138;break;
        }
        
        if(alpha != 0)
        {
            xGame.isReSizeDraw = true;
            xGame.reSize = scale;
            setAlpha(alpha*ALPHA_MAX/100);
            drawJewelIcon(x-106, y+33, xJewelQuest.xData[jewelQuestCode].jewelCode);
            setAlpha(ALPHA_MAX);
            xGame.isReSizeDraw = false;
        }
    }
    
    startAnyCnt = xJewelResult.anyCnt-5;
    if(startAnyCnt >= 0)
    {
        switch(startAnyCnt)
        {
        case 0:scale=100;rot=0;break;
        case 1:scale=100;rot=0;break;
        case 2:scale=100;rot=0;break;
        case 3:scale=99;rot=1;break;
        case 4:scale=99;rot=2;break;
        case 5:scale=99;rot=3;break;
        case 6:scale=98;rot=5;break;
        case 7:scale=97;rot=8;break;
        case 8:scale=96;rot=11;break;
        case 9:scale=95;rot=15;break;
        case 10:scale=93;rot=21;break;
        case 11:scale=92;rot=29;break;
        case 12:scale=90;rot=39;break;
        case 13:scale=88;rot=54;break;
        case 14:scale=85;rot=69;break;
        case 15:scale=83;rot=81;break;
        case 16:scale=79;rot=90;break;
        case 17:scale=76;rot=96;break;
        case 18:scale=72;rot=101;break;
        case 19:scale=67;rot=104;break;
        case 20:scale=61;rot=107;break;
        case 21:scale=55;rot=108;break;
        case 22:scale=46;rot=110;break;
        case 23:scale=36;rot=110;break;
        case 24:scale=21;rot=111;break;
        default:scale=0;rot=111;break;
        }

        
        if(scale != 100)
        {
            xGame.isReSizeDraw = true;
            xGame.reSize = scale;
        }
        
        if(rot != 0)
        {
            xGame.isRotate = true;
            xGame.rotateNum = rot;
        }
        xGame.isBlend = true;
        xGame.blendType = BLEND_ADDP;
        drawImage(&imgNewDancerEff[2], x-106, y+33, 0, 0, imgNewDancerEff[2].w, imgNewDancerEff[2].h, VH);
        xGame.isBlend = false;
        xGame.isReSizeDraw = false;
        xGame.isRotate = false;
    }
    
    
    drawImage(&imgJewelQuest[7], x+29, y-13, 0, 0, imgJewelQuest[7].w, imgJewelQuest[7].h, VH);
    gSetColor(97, 97, 97);
    setFontSizeORI(18);
    
    
    switch(xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffType)
    {
    case 2:// sprintf(strResult, "S급 뽑기 확률");break;
    case 3:// sprintf(strResult, "한정템획득 확률");break;
        sprintf(strTempS, "%s +%.2f%%",getJewelBuffName(xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffType,xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffValue),xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffValue*0.01f);

        break;
    default:
    sprintf(strTempS, "%s +%d%%",getJewelBuffName(xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffType,xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffValue),xJewel.xData[xJewelQuest.xData[jewelQuestCode].jewelCode].buffValue);
        break;
    }
            
    
    
    
    
    
    gDrawString(x+29, y-13-3, strTempS, VH);
    setFontSize(11);
    
    //보상정보
    for(int k=0;k<2;k++)
    {
        int dx = x+3+(98*k);
        int dy = y+32;
        
        if(xJewelQuest.xData[jewelQuestCode].giftType[k] == DONT)
            continue;
        
        xGame.isReSizeDraw = true;
        xGame.reSize = 50;
        
        
        switch(xJewelQuest.xData[jewelQuestCode].giftType[k])
        {
            case 0:	//의상 아이템
                //획득한 의상
                setMapData(xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawFittingF(dx, dy, xJewelQuest.xData[jewelQuestCode].giftValue[k], 60);
                sprintf(strTempS, "%s",xFashionData[xMap.type][xMap.listNum].strName);
                break;
            case 1:	//인테리어
                setMapData(xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                
                setDrawObjCenter(xMap.type,xMap.listNum);
                if(xDrawObjCenter.reSize != 100)
                {
                    xGame.fgameScaleCx =dx;
                    xGame.fgameScaleCy =lcdH-(dy);
                    xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
                }
                drawObj(dx+xDrawObjCenter.w, dy+xDrawObjCenter.h, xMap.type, xMap.listNum, xMap.rever,TRUE,DONT,DONT);
                xGame.fgameScale = 1.0f;
                xGame.fgameScaleCx =cx;
                xGame.fgameScaleCy =cy;
                
                sprintf(strTempS, "%s",xObj.xObjData[xMap.type][xMap.listNum].strName);
                break;
            case 2:	//골드
                setCommaNum(strTempB, xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                sprintf(strTempS, "%s골드",strTempB);
                drawImage(&imgGiftGoldIcon, dx, dy, 0, 0, imgGiftGoldIcon.w, imgGiftGoldIcon.h, VH);
                break;
            case 3:	//룩
                sprintf(strTempS, "%d룩",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgGiftLookIcon, dx, dy, 0, 0, imgGiftLookIcon.w, imgGiftLookIcon.h, VH);
                break;
            case 4:	//캔디(추가)
                sprintf(strTempS, "%d캔디",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgGiftCandyIcon, dx, dy, 0, 0, imgGiftCandyIcon.w, imgGiftCandyIcon.h, VH);
                break;
            case 5:	//일반 모델 캐스팅권(추가)
                sprintf(strTempS, "일반 캐스팅(%d개)",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgGiftModelCastingCAIcon, dx, dy, 0, 0, imgGiftModelCastingCAIcon.w, imgGiftModelCastingCAIcon.h, VH);
                break;
            case 6:	//고급 모델 캐스팅권(추가)
                sprintf(strTempS, "고급 캐스팅(%d개)",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgGiftModelCastingBSIcon, dx, dy, 0, 0, imgGiftModelCastingBSIcon.w, imgGiftModelCastingBSIcon.h, VH);
                break;
            case 7:	//유행 티켓(의상)
                sprintf(strTempS, "의상 유행 티켓");
                drawImage(&imgGiftTrendHangerIcon, dx, dy, 0, 0, imgGiftTrendHangerIcon.w, imgGiftTrendHangerIcon.h, VH);
                break;
            case 8:	//유행 티켓(잡화)
                sprintf(strTempS, "잡화 유행 티켓");
                drawImage(&imgGiftTrendAccessoryIcon, dx, dy, 0, 0, imgGiftTrendAccessoryIcon.w, imgGiftTrendAccessoryIcon.h, VH);
                break;
            case 9:	//A급 모델 캐스팅권
                sprintf(strTempS, "A급 모델(%d개)",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgCastingAIcon, dx, dy, 0, 0, imgCastingAIcon.w, imgCastingAIcon.h, VH);
                break;
            case 10://S급 모델 캐스팅권
                sprintf(strTempS, "S급 모델(%d개)",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgCastingSIcon, dx, dy, 0, 0, imgCastingSIcon.w, imgCastingSIcon.h, VH);
                break;
            case 11://A~S급 모델 캐스팅권
                sprintf(strTempS, "A~S급 모델(%d개)",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgCastingASIcon, dx, dy, 0, 0, imgCastingASIcon.w, imgCastingASIcon.h, VH);
                break;
            case 12://경험치
                sprintf(strTempS, "%d경험치",xJewelQuest.xData[jewelQuestCode].giftValue[k]);
                drawImage(&imgGiftExpIcon, dx, dy, 0, 0, imgGiftExpIcon.w, imgGiftExpIcon.h, VH);
                break;
            case 13://지정 모델 확정권
            {
                int modelResize = 70;
                int modelCode = xJewelQuest.xData[jewelQuestCode].giftValue[k];
                int modelSex = xModelData[modelCode].sex;
                
                drawHairF(dx,dy, 1000+modelCode,0,modelResize);
                drawFaceF(dx,dy, 1000+modelCode, FACE_TYPE_NORMAL, modelResize);
                drawHairF(dx,dy, 1000+modelCode,1,modelResize);
                
                sprintf(strTempS, "%s(%s급모델)",xModelData[modelCode].strName,getGradeName(xModelData[modelCode].grade));
            }
                break;
                
        }
        xGame.isReSizeDraw = false;
        
        drawImage(&imgJewelQuest[8], dx, dy+39, 0, 0, imgJewelQuest[8].w, imgJewelQuest[8].h, VH);
        gSetColor(255, 255, 255);
        setFontSizeORI(13);
        gDrawString(dx, dy+39, strTempS, VH);
        setFontSize(11);
    }
    
    
    if(xWorldMap.state == WORLDMAP_STATE_JEWELQUEST)
    {
        if(xJewelQuest.xData[jewelQuestCode].state == JEWELQUEST_STATE_COMPLETE)
        {
            drawImage(&imgJewelQuest[6], x, y, 0, 0, imgJewelQuest[6].w, imgJewelQuest[6].h, VH);
            drawImage(&imgJewelQuest[9], x, y, 0, 0, imgJewelQuest[9].w, imgJewelQuest[9].h, VH);
        }
        else if(isJewelQuestOpenCard(jewelQuestCode) == false)
        {
            /*
            drawImage(&imgJewelQuest[10], x-2, y-68, 0, 0, imgJewelQuest[10].w, imgJewelQuest[10].h, VH);
            setFontSizeORI(16);
            gSetColor(255, 212, 75);
            gDrawString(x+40, y-68-12, xJewelQuest.xData[xJewelQuest.xData[jewelQuestCode].openQuestCode].strName, VH);
            gDrawString(x+40, y-68+12, "클리어후 오픈", VH);
            setFontSize(11);
             */
            
            drawImage(&imgJewelQuest[10], x-3, y-3, 0, 0, imgJewelQuest[10].w, imgJewelQuest[10].h, VH);
            setFontSizeORI(16);
            gSetColor(255, 212, 75);
            sprintf(strTempS, "%s 클리어후 오픈",xJewelQuest.xData[xJewelQuest.xData[jewelQuestCode].openQuestCode].strName);
            gDrawString(x, y, strTempS, VH);
            setFontSize(11);
        }
    }
}


bool isJewelQuestOpenCard(int jewelQuestCode)
{
    if(xJewelQuest.xData[jewelQuestCode].openQuestCode == DONT)
        return true;
    
    if(xJewelQuest.xData[xJewelQuest.xData[jewelQuestCode].openQuestCode].state == JEWELQUEST_STATE_COMPLETE)
        return true;
    
    return false;
}




void sortAmuletSetting()
{
    for(int k=0;k<JEWELDATAMAX;k++)
    {
        xJewel.xData[k].haveNum = 0;
    }
    
    
    
    for(int listNum=0;listNum<xJewelQuest.totalData;listNum++)
    {
        if(xJewelQuest.xData[listNum].state == JEWELQUEST_STATE_COMPLETE)
        {
            xJewel.xData[xJewelQuest.xData[listNum].jewelCode].haveNum++;
        }
    }
    
    int totalNumCode = 0;
    int codeSlot[JEWELDATAMAX];
    
    
    for(int k=0;k<JEWELDATAMAX;k++)
    {
        if(xJewel.xData[k].haveNum > 0)
            codeSlot[totalNumCode++] = k;
    }
    
    
    xAmuletSetting.totalList = 0;
    xAmuletSetting.listCode[xAmuletSetting.totalList++] = -3;   //Large
    for(int k=0;k<totalNumCode;k++)
    {
        if(xJewel.xData[codeSlot[k]].size == 2)
        {
            xAmuletSetting.listCode[xAmuletSetting.totalList++] = codeSlot[k];
        }
    }
    xAmuletSetting.listCode[xAmuletSetting.totalList++] = -2;   //Midium
    for(int k=0;k<totalNumCode;k++)
    {
        if(xJewel.xData[codeSlot[k]].size == 1)
        {
            xAmuletSetting.listCode[xAmuletSetting.totalList++] = codeSlot[k];
        }
    }
    xAmuletSetting.listCode[xAmuletSetting.totalList++] = -1;   //Small
    for(int k=0;k<totalNumCode;k++)
    {
        if(xJewel.xData[codeSlot[k]].size == 0)
        {
            xAmuletSetting.listCode[xAmuletSetting.totalList++] = codeSlot[k];
        }
    }
}

void drawAmuletSetting()
{
    int px = cx;
    int py = cy;
    
    sortAmuletSetting();
    
    //룬페이지
    for(int k=0;k<AMULETPAGEMAX;k++)
    {
        subTemp[XPOS] = px-510+(k*60);
        subTemp[YPOS] = py-200;
        
        if(xAmulet.selectAmuletPage == k)
            drawImage(&imgAmuletSetting[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgAmuletSetting[6].w, imgAmuletSetting[6].h, VH);
        
        if(xAmulet.xAmuletPage[k].isOpen == false)
            drawImage(&imgAmuletSetting[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgAmuletSetting[5].w, imgAmuletSetting[5].h/2, VH);
        else
            drawImage(&imgAmuletSetting[5], subTemp[XPOS], subTemp[YPOS], 0, imgAmuletSetting[5].h/2, imgAmuletSetting[5].w, imgAmuletSetting[5].h/2, VH);
        
        
        xAmuletSetting.xTouchAmuletPage[k].wPos = imgAmuletSetting[6].w;
        xAmuletSetting.xTouchAmuletPage[k].hPos = imgAmuletSetting[6].h;
        xAmuletSetting.xTouchAmuletPage[k].xPos = subTemp[XPOS]-xAmuletSetting.xTouchAmuletPage[k].wPos/2;
        xAmuletSetting.xTouchAmuletPage[k].yPos = subTemp[YPOS]-xAmuletSetting.xTouchAmuletPage[k].hPos/2;
    }
    
    //쥬얼보관함
    drawImage(&imgAmuletSetting[0], px-438, py+80, 0, 0, imgAmuletSetting[0].w, imgAmuletSetting[0].h, VH);
    for(int i=0;i<xAmuletSetting.totalList;i++)
    {
        
        xAmuletSetting.xTouchList[i].xPos = 0;
        xAmuletSetting.xTouchList[i].yPos = 1000;
        xAmuletSetting.xTouchList[i].wPos = 0;
        xAmuletSetting.xTouchList[i].hPos = 0;
    }
    
    int posY = 0;
    
    xAmuletSetting.xDragScroll.totalNum = 1;
    gSetClip(true, 0, py-118, 260, 440);
    for(int i=0;i<xAmuletSetting.totalList;i++)
    {
        int code = xAmuletSetting.listCode[i];
        
        if(code < 0)
        {
            if(i != 0)
            {
                posY += 56;
                xAmuletSetting.xDragScroll.totalNum++;
            }

            subTemp[XPOS] = px-419;
            subTemp[YPOS] = py-90+posY+xAmuletSetting.xDragScroll.pos;
            
            
            
            switch(code)
            {
            case -3:    //Large
                drawImage(&imgAmuletSetting[3], subTemp[XPOS], subTemp[YPOS], 0, imgAmuletSetting[3].h/3*2, imgAmuletSetting[3].w, imgAmuletSetting[3].h/3, VH);
                break;
            case -2:    //Midium
                drawImage(&imgAmuletSetting[3], subTemp[XPOS], subTemp[YPOS], 0, imgAmuletSetting[3].h/3*1, imgAmuletSetting[3].w, imgAmuletSetting[3].h/3, VH);
                break;
            case -1:    //Small
                drawImage(&imgAmuletSetting[3], subTemp[XPOS], subTemp[YPOS], 0, imgAmuletSetting[3].h/3*0, imgAmuletSetting[3].w, imgAmuletSetting[3].h/3, VH);
                    break;
            }
        }
        else
        {
            if(xAmuletSetting.listCode[i-1] < 0)
            {
                posY += 50;
                xAmuletSetting.xDragScroll.totalNum++;
            }
            else
            {
                posY += 40;
                xAmuletSetting.xDragScroll.totalNum++;
            }
            
            subTemp[XPOS] = px-438;
            subTemp[YPOS] = py-90+posY+xAmuletSetting.xDragScroll.pos;
            
            if(subTemp[YPOS] >= lcdH+20 || subTemp[YPOS] < py-140)
            {
                
            }
            else
            {
                
                xGame.isReSizeDraw = true;
                xGame.reSize = 50;
                drawJewelIcon(subTemp[XPOS]-100, subTemp[YPOS], code);
                xGame.isReSizeDraw = false;
                
                gSetColor(172, 171, 169);
                setFontSizeORI(18);
                sprintf(strTempS, "x%d",xJewel.xData[code].haveNum-getAmuletSocketUse(code));
                gDrawString(subTemp[XPOS]-84, subTemp[YPOS], strTempS, VL);
                setFontSize(11);
                
                if(xAmuletSetting.state == AMULETSETTING_STATE_SELECTSOCKET
                   && xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].xSocket[xAmuletSetting.selectSocket].size != xJewel.xData[code].size)
                {
                    gSetColor(70, 70, 70);
                }
                else if(xJewel.xData[code].haveNum-getAmuletSocketUse(code) <= 0)
                {
                    gSetColor(70, 70, 70);
                }
                else
                {
                    switch(xJewel.xData[code].grade)
                    {
                    case 0: gSetColor(172, 171, 169);break;
                    case 1: gSetColor(236, 188, 94);break;
                    case 2: gSetColor(255, 85, 239);break;
                    }
                }
                
                setFontSizeORI(18);
                
                
                switch(xJewel.xData[code].buffType)
                {
                case 2:// sprintf(strResult, "S급 뽑기 확률");break;
                case 3:// sprintf(strResult, "한정템획득 확률");break;
                    sprintf(strTempS, "%s +%.2f%%",getJewelBuffName(xJewel.xData[code].buffType,xJewel.xData[code].buffValue),xJewel.xData[code].buffValue*0.01f);
                    
                    break;
                default:
                    sprintf(strTempS, "%s +%d%%",getJewelBuffName(xJewel.xData[code].buffType,xJewel.xData[code].buffValue),xJewel.xData[code].buffValue);
                    break;
                }
                
                
                
                
                
                gDrawString(subTemp[XPOS]-44, subTemp[YPOS], strTempS, VL);
                setFontSize(11);
                
                xAmuletSetting.xTouchList[i].wPos = 230;
                xAmuletSetting.xTouchList[i].hPos = 30;
                xAmuletSetting.xTouchList[i].xPos = subTemp[XPOS]-xAmuletSetting.xTouchList[i].wPos/2;
                xAmuletSetting.xTouchList[i].yPos = subTemp[YPOS]-xAmuletSetting.xTouchList[i].hPos/2;
                
                
                /*
                gSetColor(255, 0, 0);
                setAlpha(100);
                fillRect(xAmuletSetting.xTouchList[i].xPos, xAmuletSetting.xTouchList[i].yPos, xAmuletSetting.xTouchList[i].wPos, xAmuletSetting.xTouchList[i].hPos);
                setAlpha(ALPHA_MAX);
                */
            }
        }
    }
    gSetClip(false, 0, py-200, lcdW, 400);
    
    xAmuletSetting.xDragScroll.posGab = 30;
    xAmuletSetting.xDragScroll.endPos = -posY+360;
    
    if(xAmuletSetting.xDragScroll.endPos > 0)
        xAmuletSetting.xDragScroll.endPos = 0;
    
    dragScrollPrc(&xAmuletSetting.xDragScroll,1,FALSE);
    
    //아뮬렛보관함
    drawImage(&imgAmuletSetting[1], px+445, py-99, 0, 0, imgAmuletSetting[1].w, imgAmuletSetting[1].h, VH);
    for(int k=0;k<xAmulet.totalAmulet;k++)
    {
        subTemp[XPOS] = px+374+(72*(k%3));
        subTemp[YPOS] = py-152+(72*(k/3));
        
        drawAmuletUiIcon(subTemp[XPOS], subTemp[YPOS], k,xAmulet.xData[k].isOpen == false?0:1);

        
        if(xAmuletSetting.xEditPage.amuletCode == k)
            drawImage(&imgAmuletSetting[7], subTemp[XPOS], subTemp[YPOS], 0, 0, imgAmuletSetting[7].w, imgAmuletSetting[7].h, VH);
        
        xAmuletSetting.xTouchAmulet[k].wPos = 50;
        xAmuletSetting.xTouchAmulet[k].hPos = 50;
        xAmuletSetting.xTouchAmulet[k].xPos = subTemp[XPOS]-xAmuletSetting.xTouchAmulet[k].wPos/2;
        xAmuletSetting.xTouchAmulet[k].yPos = subTemp[YPOS]-xAmuletSetting.xTouchAmulet[k].hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xAmuletSetting.xTouchAmulet[k].xPos, xAmuletSetting.xTouchAmulet[k].yPos, xAmuletSetting.xTouchAmulet[k].wPos, xAmuletSetting.xTouchAmulet[k].hPos);
        setAlpha(ALPHA_MAX);
        */
    }
    
    //적용효과
    drawImage(&imgAmuletSetting[2], px+450, py+180, 0, 0, imgAmuletSetting[2].w, imgAmuletSetting[2].h, VH);
    
    int buffValue[JEWELBUFFMAX];
    for(int k=0;k<JEWELBUFFMAX;k++)
    {
        buffValue[k] = 0;
    }
    
    for(int k=0;k<xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].totalSocket;k++)
    {
        if(xAmuletSetting.xEditPage.socketJewelCode[k] != DONT)
        {
            int jewelCode = xAmuletSetting.xEditPage.socketJewelCode[k];
            buffValue[xJewel.xData[jewelCode].buffType] += xJewel.xData[jewelCode].buffValue;
        }
    }
    
    int amuletCode = xAmuletSetting.xEditPage.amuletCode;
    
    int amuletBuff0 = 0;
    if(xAmulet.xData[amuletCode].buffType == 0)
    {
        amuletBuff0 = xAmulet.xData[amuletCode].buffValue;
    }
    
    
    
    int buffValueTemp = 0;
    int hh = 0;
    for(int k=0;k<JEWELBUFFMAX;k++)
    {
        subTemp[XPOS] = px+349;
        subTemp[YPOS] = py+106+hh;
        
        if(buffValue[k] > 0)
        {
            gSetColor(172, 171, 169);
            setFontSizeORI(18);
            
            sprintf(strTempS, "%s",getJewelBuffName(k,buffValue[k]));
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
            
            
            if(buffValue[0] > 0 && k > 0)
            {
                buffValueTemp = buffValue[k]+(buffValue[k]*(buffValue[0]+amuletBuff0)/100);
            }
            else
                buffValueTemp = buffValue[k];
            
            
            switch(k)
            {
            case 2:// sprintf(strResult, "S급 뽑기 확률");break;
            case 3:// sprintf(strResult, "한정템획득 확률");break;
                sprintf(strTempS, "+%.2f%%",buffValueTemp*0.01f);
                break;
            default:
                sprintf(strTempS, "+%d%%",buffValueTemp);
                break;
            }
            
            gDrawString(subTemp[XPOS]+150, subTemp[YPOS], strTempS, VL);
            setFontSize(11);
            hh += 20;
        }
    }
    
    
    
    gSetColor(172, 171, 169);
    setFontSizeORI(18);
    
    subTemp[XPOS] = px+349;
    subTemp[YPOS] = py+106+hh;
    gDrawString(subTemp[XPOS], subTemp[YPOS], "아뮬렛버프", VL);
    hh += 20;
    
    
    subTemp[XPOS] = px+349;
    subTemp[YPOS] = py+106+hh;
    sprintf(strTempS, "%s",getJewelBuffName(xAmulet.xData[amuletCode].buffType,xAmulet.xData[amuletCode].buffValue));
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
    
    if(buffValue[0] > 0 && xAmulet.xData[amuletCode].buffType > 0)
    {
        buffValueTemp = xAmulet.xData[amuletCode].buffValue+(xAmulet.xData[amuletCode].buffValue*buffValue[0]/100);
    }
    else
        buffValueTemp = xAmulet.xData[amuletCode].buffValue;
    
    switch(xAmulet.xData[amuletCode].buffType)
    {
    case 2:// sprintf(strResult, "S급 뽑기 확률");break;
    case 3:// sprintf(strResult, "한정템획득 확률");break;
        sprintf(strTempS, "+%.2f%%",buffValueTemp*0.01f);
        break;
    default:
        sprintf(strTempS, "+%d%%",buffValueTemp);
        break;
    }
    
    gDrawString(subTemp[XPOS]+150, subTemp[YPOS], strTempS, VL);
    setFontSize(11);
    
    
    
    
    
    drawImage(&imgAmuletSetting[4], px, py-190, 0, 0, imgAmuletSetting[4].w, imgAmuletSetting[4].h, VH);
    gSetColor(255, 255, 255);
    setFontSizeORI(24);
    gDrawString(px, py-190, xAmulet.xData[amuletCode].strName, VH);
    setFontSize(11);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+55;
    drawAmuletIcon(subTemp[XPOS], subTemp[YPOS], amuletCode);
    
    for(int k=0;k<xAmulet.xData[amuletCode].totalSocket;k++)
    {
        int dx = subTemp[XPOS] + xAmulet.xData[amuletCode].xSocket[k].x;
        int dy = subTemp[YPOS] + xAmulet.xData[amuletCode].xSocket[k].y;
        
        if(xAmuletSetting.xEditPage.socketJewelCode[k] != DONT)
        {
            drawJewelIcon(dx, dy, xAmuletSetting.xEditPage.socketJewelCode[k]);
        }
        else
        {
            drawAmuletSlot(dx,dy,xAmulet.xData[amuletCode].xSocket[k].size,0);
        }
        
        
        if(xAmuletSetting.state == AMULETSETTING_STATE_SELECTSOCKET && k == xAmuletSetting.selectSocket)
        {
            drawAmuletSlot(dx,dy,xAmulet.xData[amuletCode].xSocket[k].size,1);
        }
        
        
        xAmuletSetting.xTouchSocket[k].wPos = imgAmuletSlot[0][xAmulet.xData[amuletCode].xSocket[k].size].w*50/100;
        xAmuletSetting.xTouchSocket[k].hPos = imgAmuletSlot[0][xAmulet.xData[amuletCode].xSocket[k].size].h*50/100;
        xAmuletSetting.xTouchSocket[k].xPos = dx-xAmuletSetting.xTouchSocket[k].wPos/2;
        xAmuletSetting.xTouchSocket[k].yPos = dy-xAmuletSetting.xTouchSocket[k].hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xAmuletSetting.xTouchSocket[k].xPos, xAmuletSetting.xTouchSocket[k].yPos, xAmuletSetting.xTouchSocket[k].wPos, xAmuletSetting.xTouchSocket[k].hPos);
        setAlpha(ALPHA_MAX);
        */
    }
    
    for(int prcI=0;prcI<xGame.prcCnt;prcI++)
        ++xAmuletSetting.selectSocketAnyCnt;
    
    
    
    
    
    //구매하기
    subTemp[XPOS] = px+195;
    subTemp[YPOS] = lcdH-50;
    
    
    
    if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].isOpen == false)
    {
        drawImage(&imgAmuletSetting[9], subTemp[XPOS], subTemp[YPOS], 0, 0, imgAmuletSetting[9].w, imgAmuletSetting[9].h, VH);
        
        xAmuletSetting.xTouchAmuletBuy.wPos = imgAmuletSetting[9].w;
        xAmuletSetting.xTouchAmuletBuy.hPos = imgAmuletSetting[9].h;
        xAmuletSetting.xTouchAmuletBuy.xPos = subTemp[XPOS]-xAmuletSetting.xTouchAmuletBuy.wPos/2;
        xAmuletSetting.xTouchAmuletBuy.yPos = subTemp[YPOS]-xAmuletSetting.xTouchAmuletBuy.hPos/2;
        

        
        
        
        
        
        sprintf(strTempS, "%d",xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].priceValue);
        setFontSize(17);
        int ww = getLabelWidth(strTempS,17, false);
        
        gSetColor(161, 119, 70);
        xGame.isReSizeDraw = true;
        xGame.reSize = 60;
        if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].priceType == 0)
            drawIcon(subTemp[XPOS]-8-(ww/2), subTemp[YPOS]+16, ICON_TYPE_GOLD);
        else if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].priceType == 1)
            drawIcon(subTemp[XPOS]-8-(ww/2), subTemp[YPOS]+16, ICON_TYPE_LOOK);
        xGame.isReSizeDraw = false;
        gDrawString(subTemp[XPOS]+10-(ww/2), subTemp[YPOS]+16, strTempS, VL);
        
        
        
        
        
    }
    else
    {
        //비우기
        subTemp[XPOS] = px+250;
        subTemp[YPOS] = py+265;
        drawImage(&imgAmuletSetting[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgAmuletSetting[8].w, imgAmuletSetting[8].h, VH);
        
        xAmuletSetting.xTouchReset.wPos = imgAmuletSetting[8].w;
        xAmuletSetting.xTouchReset.hPos = imgAmuletSetting[8].h;
        xAmuletSetting.xTouchReset.xPos = subTemp[XPOS]-xAmuletSetting.xTouchReset.wPos/2;
        xAmuletSetting.xTouchReset.yPos = subTemp[YPOS]-xAmuletSetting.xTouchReset.hPos/2;
    }
}

void keyAmuletSetting(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        bool isTabB = false;
        int tabB = 0;
        
        for(int k=0;k<2;k++)
        {
            if(touchCheck(&xJewelQuest.xTouchTab[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isTabB = true;
                tabB = k;
                break;
            }
        }
        
        
        bool isAmulet = false;
        int amuletNum = 0;
        
        for(int k=0;k<xAmulet.totalAmulet;k++)
        {
            if(touchCheck(&xAmuletSetting.xTouchAmulet[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isAmulet = true;
                amuletNum = k;
                break;
            }
        }
        
        
        bool isAmuletPage = false;
        int amuletPage = 0;
        for(int k=0;k<AMULETPAGEMAX;k++)
        {
            if(touchCheck(&xAmuletSetting.xTouchAmuletPage[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isAmuletPage = true;
                amuletPage = k;
                break;
            }
        }
        
        bool isSocket = false;
        int socketNum = 0;
        
        for(int k=0;k<xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].totalSocket;k++)
        {
            if(touchCheck(&xAmuletSetting.xTouchSocket[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isSocket = true;
                socketNum = k;
                break;
            }
        }
        
        if(touchCheck(&xJewelQuest.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            
            if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].isOpen == false)
            {
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText, "구매하지 않은 아뮬렛입니다.");
            }
            else
            {
                jewelQuestFreeLoad(false);
                xWorldMap.state = WORLDMAP_STATE_PLAY;
                
                memcpy(&xAmulet.xAmuletPage[xAmulet.selectAmuletPage], &xAmuletSetting.xEditPage, sizeof(xAmuletSetting.xEditPage));
                
                ////////////////////////////////////////////////////
                xEventQueueNet.action[xEventQueueNet.totalNum] = 1; //0:메인덱번호저장안함,1:메인덱번호저장함
                xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xAmulet.selectAmuletPage;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AMULETUPDATE, TRUE);
                ///////////////////////////////////////////////////
            }
        }
        else if(isSocket == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            xAmuletSetting.state = AMULETSETTING_STATE_SELECTSOCKET;
            if(xAmuletSetting.selectSocket != socketNum)
            {
                xAmuletSetting.selectSocket = socketNum;
                xAmuletSetting.selectSocketAnyCnt = 0;
                xAmuletSetting.xEditPage.socketJewelCode[xAmuletSetting.selectSocket] = DONT;
            }
            else
            {
                
            }
        }
        else if(isTabB == true)
        {
            if(tabB != xJewelQuest.selectTab)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                xJewelQuest.selectTab = tabB;
            }
        }
        else if(isAmuletPage == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            
            
            
            if(xAmulet.xAmuletPage[amuletPage].isOpen == false)
            {
                int openPage = 0;
                
                for(int k=0;k<AMULETPAGEMAX;k++)
                {
                    if(xAmulet.xAmuletPage[k].isOpen == false)
                    {
                        openPage = k;
                        break;
                    }
                }
                setPopup(POPUP_AMULETPAGEBUY, PLAY_PLAY, PLAY_PLAY, 0, openPage);
            }
            else if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].isOpen == false)
            {
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText, "구매하지 않은 아뮬렛입니다.");
            }
            else
            {
                memcpy(&xAmulet.xAmuletPage[xAmulet.selectAmuletPage], &xAmuletSetting.xEditPage, sizeof(xAmuletSetting.xEditPage));
                
                ////////////////////////////////////////////////////
                xEventQueueNet.action[xEventQueueNet.totalNum] = 0; //0:메인덱번호저장안함,1:메인덱번호저장함
                xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xAmulet.selectAmuletPage;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AMULETUPDATE, TRUE);
                ///////////////////////////////////////////////////
                
                
                xAmulet.selectAmuletPage = amuletPage;
                memcpy(&xAmuletSetting.xEditPage, &xAmulet.xAmuletPage[xAmulet.selectAmuletPage], sizeof(xAmuletSetting.xEditPage));
            }
            
        }
        else if(isAmulet == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            if(xAmuletSetting.xEditPage.amuletCode != amuletNum)
            {
                for(int k=0;k<AMULETSOCKETMAX;k++)
                {
                    xAmuletSetting.amuletSocketJewelCodeTemp[xAmuletSetting.xEditPage.amuletCode][k] = xAmuletSetting.xEditPage.socketJewelCode[k];
                }
                
                xAmuletSetting.xEditPage.amuletCode = amuletNum;
                for(int k=0;k<AMULETSOCKETMAX;k++)
                    xAmuletSetting.xEditPage.socketJewelCode[k] = xAmuletSetting.amuletSocketJewelCodeTemp[xAmuletSetting.xEditPage.amuletCode][k];
            }
        }
                else if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].isOpen == false && touchCheck(&xAmuletSetting.xTouchAmuletBuy) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            
            
            
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].priceType == 0
                   && xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].priceValue > xSaveTemp.money.oriData)
                {
                    setPopup(POPUP_MONEYEMPTY, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                }
                else if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].priceType == 1
                   && xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].priceValue > xSaveTemp.cash.oriData)
                {
                    setPopup(POPUP_CASHEMPTY, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                }
                else
                    setPopup(POPUP_AMULETBUY, PLAY_PLAY, PLAY_PLAY, 0, DONT);

        }
                else if(touchCheck(&xAmuletSetting.xTouchReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    
                    for(int k=0;k<AMULETSOCKETMAX;k++)
                        xAmuletSetting.xEditPage.socketJewelCode[k] = DONT;
                }

        else
        {
            dragScrollKeyPrc(&xAmuletSetting.xDragScroll,2);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xAmuletSetting.xDragScroll.touchXposBefore != DONT)
        {
            dragScrollKeyPrc(&xAmuletSetting.xDragScroll,3);
        }
        else
        {
            bool isList = false;
            int listSlot = 0;
            
            for(int k=0;k<xAmuletSetting.totalList;k++)
            {
                if(touchCheck(&xAmuletSetting.xTouchList[k]) == TRUE)
                {
                    isList = true;
                    listSlot = k;
                    break;
                }
            }
            
            if(isList == true)
            {
                if(xAmuletSetting.state == AMULETSETTING_STATE_PLAY || (xAmuletSetting.state == AMULETSETTING_STATE_SELECTSOCKET && xJewel.xData[xAmuletSetting.listCode[listSlot]].size != xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].xSocket[xAmuletSetting.selectSocket].size))
                {
                    if(xJewel.xData[xAmuletSetting.listCode[listSlot]].haveNum-getAmuletSocketUse(xAmuletSetting.listCode[listSlot]) > 0)
                    {
                        //빈슬롯
                        for(int k=0;k<xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].totalSocket;k++)
                        {
                            if(xAmuletSetting.xEditPage.socketJewelCode[k] == DONT && xJewel.xData[xAmuletSetting.listCode[listSlot]].size == xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].xSocket[k].size)
                            {
                                xAmuletSetting.state = AMULETSETTING_STATE_SELECTSOCKET;
                                xAmuletSetting.selectSocket = k;
                                break;
                            }
                        }
                    }
                }
                else if(xAmuletSetting.state == AMULETSETTING_STATE_SELECTSOCKET)
                {
                    if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].isOpen == false)
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "구매하지 않은 아뮬렛입니다.");
                    }
                    else
                    {
                        if(xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].xSocket[xAmuletSetting.selectSocket].size == xJewel.xData[xAmuletSetting.listCode[listSlot]].size)
                        {
                            if(xJewel.xData[xAmuletSetting.listCode[listSlot]].haveNum-getAmuletSocketUse(xAmuletSetting.listCode[listSlot]) > 0)
                            {
                                playSnd(SND_MENU_OK);
                                xAmuletSetting.state = AMULETSETTING_STATE_PLAY;
                                xAmuletSetting.xEditPage.socketJewelCode[xAmuletSetting.selectSocket] = xAmuletSetting.listCode[listSlot];

                                //보석다음소켓
                                for(int k=xAmuletSetting.selectSocket+1;k<xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].totalSocket;k++)
                                {
                                    if(xAmuletSetting.xEditPage.socketJewelCode[k] == DONT)
                                    {
                                        xAmuletSetting.state = AMULETSETTING_STATE_SELECTSOCKET;
                                        xAmuletSetting.selectSocket = k;
                                        break;
                                    }
                                }
                                
                                if(xAmuletSetting.state == AMULETSETTING_STATE_PLAY)
                                {
                                    for(int k=0;k<xAmuletSetting.selectSocket;k++)
                                    {
                                        if(xAmuletSetting.xEditPage.socketJewelCode[k] == DONT)
                                        {
                                            xAmuletSetting.state = AMULETSETTING_STATE_SELECTSOCKET;
                                            xAmuletSetting.selectSocket = k;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        xAmuletSetting.xDragScroll.touchXpos = DONT;
        xAmuletSetting.xDragScroll.touchYpos = DONT;
        xAmuletSetting.xDragScroll.touchXposBefore = DONT;
        xAmuletSetting.xDragScroll.touchYposBefore = DONT;
    }
}




int getAmuletSocketUse(int jewelCode)
{
    int resultNum = 0;
    
    for(int k=0;k<xAmulet.xData[xAmuletSetting.xEditPage.amuletCode].totalSocket;k++)
    {
        if(xAmuletSetting.xEditPage.socketJewelCode[k] == jewelCode)
        {
            resultNum++;
        }
    }
    return resultNum;
}



void drawAmuletUi(int x,int y)
{

    subTemp[XPOS] = x;
    subTemp[YPOS] = y;
    
    if(xAmulet.isOpen == false)
        return;
    
    if(xAmulet.isNetLoad == false || xJewelQuest.isNetLoad == false)
    {
        xGame.isRotate = TRUE;
        xGame.rotateNum = 360-(gameCnt%120)*3;
        drawPacker(imgLoadingIcon0, x, y, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
        xGame.isRotate = FALSE;
        xAmulet.uiAnyCnt = 0;
        return;
    }
    
    int amuletCode;
    
    if(xWorldMap.isFriendMap == true)
    {
        amuletCode = xAmulet.xAmuletFriend.amuletCode;
    }
    else
    {
        amuletCode = xAmulet.xAmuletPage[xAmulet.selectAmuletPage].amuletCode;
    }
    
    
    
    int yy = 0;
    switch(++xAmulet.uiAnyCnt)
    {
        case 0:yy=-235;break;
        case 1:yy=-203;break;
        case 2:yy=-129;break;
        case 3:yy=-51;break;
        case 4:yy=0;break;
        case 5:yy=-4;break;
        case 6:yy=-11;break;
        case 7:yy=-15;break;
        case 8:yy=-14;break;
        case 9:yy=-11;break;
        case 10:yy=-7;break;
        case 11:yy=-3;break;
        case 12:yy=-1;break;
        case 13:yy=0;break;
        case 14:yy=-1;break;
        case 15:yy=-3;break;
        case 16:yy=-4;break;
        case 17:yy=-3;break;
        case 18:yy=-2;break;
        case 19:yy=-1;break;
        default:yy=0;break;
    }
    
    
    
    int scale = 0;
    switch(xAmulet.uiAnyCnt%61)
    {
        case 0:scale=200;break;
        case 1:scale=203;break;
        case 2:scale=207;break;
        case 3:scale=210;break;
        case 4:scale=213;break;
        case 5:scale=217;break;
        case 6:scale=220;break;
        case 7:scale=223;break;
        case 8:scale=227;break;
        case 9:scale=230;break;
        case 10:scale=233;break;
        case 11:scale=237;break;
        case 12:scale=240;break;
        case 13:scale=243;break;
        case 14:scale=247;break;
        case 15:scale=250;break;
        case 16:scale=253;break;
        case 17:scale=257;break;
        case 18:scale=260;break;
        case 19:scale=263;break;
        case 20:scale=267;break;
        case 21:scale=270;break;
        case 22:scale=273;break;
        case 23:scale=277;break;
        case 24:scale=280;break;
        case 25:scale=283;break;
        case 26:scale=287;break;
        case 27:scale=290;break;
        case 28:scale=293;break;
        case 29:scale=297;break;
        case 30:scale=300;break;
        case 31:scale=297;break;
        case 32:scale=293;break;
        case 33:scale=290;break;
        case 34:scale=287;break;
        case 35:scale=283;break;
        case 36:scale=280;break;
        case 37:scale=277;break;
        case 38:scale=273;break;
        case 39:scale=270;break;
        case 40:scale=267;break;
        case 41:scale=263;break;
        case 42:scale=260;break;
        case 43:scale=257;break;
        case 44:scale=253;break;
        case 45:scale=250;break;
        case 46:scale=247;break;
        case 47:scale=243;break;
        case 48:scale=240;break;
        case 49:scale=237;break;
        case 50:scale=233;break;
        case 51:scale=230;break;
        case 52:scale=227;break;
        case 53:scale=223;break;
        case 54:scale=220;break;
        case 55:scale=217;break;
        case 56:scale=213;break;
        case 57:scale=210;break;
        case 58:scale=207;break;
        case 59:scale=203;break;
        case 60:scale=200;break;
    }
    
    subTemp[YPOS] += yy;
    xGame.isReSizeDraw = true;
    xGame.reSize = scale;
    xGame.isBlend = true;
    xGame.blendType = BLEND_ADDP;
    
    drawAmuletBg(subTemp[XPOS], subTemp[YPOS],amuletCode);
    xGame.isBlend = false;
    xGame.isReSizeDraw = false;
    
    
    
    
    if(xWorldMap.isFriendMap == false)
        xDrawObjCenter.reSize = 30;
    else
        xDrawObjCenter.reSize = 40;
    
    
    if(xDrawObjCenter.reSize != 100)
    {
        xGame.fgameScaleCx =subTemp[XPOS];
        xGame.fgameScaleCy =lcdH-subTemp[YPOS];
        xGame.fgameScale = xDrawObjCenter.reSize*0.01f;
    }
    
    
    int totalBlinkEffList = 0;
    int blinkEffList[64];
    
    for(int k=0;k<xAmulet.xData[amuletCode].totalSocket;k++)
    {
        if(xWorldMap.isFriendMap == true)
        {
            if(xAmulet.xAmuletFriend.socketJewelCode[k] != DONT)
            {
                blinkEffList[totalBlinkEffList++] = k;
            }
        }
        else
        {
            if(xAmulet.xAmuletPage[xAmulet.selectAmuletPage].socketJewelCode[k] != DONT)
            {
                blinkEffList[totalBlinkEffList++] = k;
            }
        }
    }
    
    if(gameCnt%20 == 0)
    {
        if(totalBlinkEffList > 0)
        {
            int effSlot = blinkEffList[ranDom(0, totalBlinkEffList-1)];

            makeBlinkEffAmulet(subTemp[XPOS] + (xAmulet.xData[amuletCode].xSocket[effSlot].x*xDrawObjCenter.reSize/100), subTemp[YPOS] + (xAmulet.xData[amuletCode].xSocket[effSlot].y*xDrawObjCenter.reSize/100));
        }
    }
    
    drawAmuletIcon(subTemp[XPOS], subTemp[YPOS], amuletCode);
    for(int k=0;k<xAmulet.xData[amuletCode].totalSocket;k++)
    {
        int dx = subTemp[XPOS] + xAmulet.xData[amuletCode].xSocket[k].x;
        int dy = subTemp[YPOS] + xAmulet.xData[amuletCode].xSocket[k].y;
        
        if(xWorldMap.isFriendMap == true)
        {
            if(xAmulet.xAmuletFriend.socketJewelCode[k] != DONT)
                drawJewelIcon(dx, dy, xAmulet.xAmuletFriend.socketJewelCode[k]);
        }
        else
        {
            if(xAmulet.xAmuletPage[xAmulet.selectAmuletPage].socketJewelCode[k] != DONT)
                drawJewelIcon(dx, dy, xAmulet.xAmuletPage[xAmulet.selectAmuletPage].socketJewelCode[k]);
        }
    }
    
    xGame.fgameScale = 1.0f;
    xGame.fgameScaleCx =cx;
    xGame.fgameScaleCy =cy;
    
    xJewelUi.xTouchUi.wPos = 80;
    xJewelUi.xTouchUi.hPos = 80;
    xJewelUi.xTouchUi.xPos = x-xJewelUi.xTouchUi.wPos/2;
    xJewelUi.xTouchUi.yPos = y-xJewelUi.xTouchUi.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xJewelUi.xTouchUi.xPos, xJewelUi.xTouchUi.yPos, xJewelUi.xTouchUi.wPos, xJewelUi.xTouchUi.hPos);
    setAlpha(ALPHA_MAX);
    */
}



void drawAmuletBg(int x,int y,int code)
{
    sprintf(strTempS,"amuletbg%d.png",code);
    if(imgAmuletBg[code].texture == NULL)
    {
        loadImgDocuments(strTempS, &imgAmuletBg[code]);
    }
    drawImage(&imgAmuletBg[code], x, y, 0, 0, imgAmuletBg[code].w, imgAmuletBg[code].h, VH);
}


void drawAmuletIcon(int x,int y,int code)
{
    sprintf(strTempS,"amulet%d.png",code);
    if(imgAmuletIcon[code].texture == NULL)
    {
        loadImgDocuments(strTempS, &imgAmuletIcon[code]);
    }
    drawImage(&imgAmuletIcon[code], x, y, 0, 0, imgAmuletIcon[code].w, imgAmuletIcon[code].h, VH);
}



void drawAmuletUiIcon(int x,int y,int code,int open)
{
    sprintf(strTempS,"amuleticon%d.png",code);
    if(imgAmuletUiIcon[code].texture == NULL)
    {
        loadImgDocuments(strTempS, &imgAmuletUiIcon[code]);
    }
    drawImage(&imgAmuletUiIcon[code], x, y, imgAmuletUiIcon[code].w/2*open, 0, imgAmuletUiIcon[code].w/2, imgAmuletUiIcon[code].h, VH);
}

void drawAmuletSlot(int x,int y,int size,int type)
{
    int alpha = 0;
    
    switch(xAmuletSetting.selectSocketAnyCnt%31)
    {
    case 0:alpha=0;break;
    case 1:alpha=67;break;
    case 2:alpha=89;break;
    case 3:alpha=98;break;
    case 4:alpha=100;break;
    case 5:alpha=100;break;
    case 6:alpha=100;break;
    case 7:alpha=100;break;
    case 8:alpha=99;break;
    case 9:alpha=99;break;
    case 10:alpha=98;break;
    case 11:alpha=97;break;
    case 12:alpha=96;break;
    case 13:alpha=95;break;
    case 14:alpha=94;break;
    case 15:alpha=92;break;
    case 16:alpha=91;break;
    case 17:alpha=89;break;
    case 18:alpha=87;break;
    case 19:alpha=84;break;
    case 20:alpha=82;break;
    case 21:alpha=78;break;
    case 22:alpha=75;break;
    case 23:alpha=71;break;
    case 24:alpha=66;break;
    case 25:alpha=61;break;
    case 26:alpha=55;break;
    case 27:alpha=47;break;
    case 28:alpha=38;break;
    case 29:alpha=24;break;
    case 30:alpha=0;break;
    }
    if(type != 0)
        setAlpha(alpha*ALPHA_MAX/100);
    drawImage(&imgAmuletSlot[type][size], x, y, 0, 0, imgAmuletSlot[type][size].w, imgAmuletSlot[type][size].h, VH);
    setAlpha(ALPHA_MAX);
}









void refreshClubList()
{
    xClubList.totalList = 0;
    xClubList.state = CLUBLIST_STATE_NET;
    /////////////nets
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBLIST, TRUE);
    /////////////nete
}





void clubListFreeLoad(bool isLoad)
{
    
    if(isLoad == true)
    {
        loadImgDocuments("clublist0.png", &imgClubList[0]);
        
        loadImgDocuments("clublist1.png", &imgClubList[1]);
        loadImgDocuments("clublist2.png", &imgClubList[2]);
        loadImgDocuments("clublist3.png", &imgClubList[3]);
        loadImgDocuments("clublist4.png", &imgClubList[4]);
        loadImgDocuments("clublist5.png", &imgClubList[5]);
        loadImgDocuments("clublist6.png", &imgClubList[6]);
        loadImgDocuments("clublist7.png", &imgClubList[7]);
        loadImgDocuments("clublist8.png", &imgClubList[8]);
        
        
        loadImgDocuments("clubmake0.png", &imgClubMake[0]);
        loadImgDocuments("clubmake1.png", &imgClubMake[1]);
        
        
    }
    else
    {
        freeImg(&imgClubList[0]);
        freeImg(&imgClubList[1]);
        freeImg(&imgClubList[2]);
        freeImg(&imgClubList[3]);
        freeImg(&imgClubList[4]);
        freeImg(&imgClubList[5]);
        freeImg(&imgClubList[6]);
        freeImg(&imgClubList[7]);
        freeImg(&imgClubList[8]);
        
        freeImg(&imgClubMake[0]);
        freeImg(&imgClubMake[1]);
        
    }
}

void drawClubIcon(int x,int y,int code)
{
    
    sprintf(strTempS,"clubicon%d.png",code);
    if(imgClubIcon[code].texture == NULL)
    {
        loadImgDocuments(strTempS, &imgClubIcon[code]);
    }
    drawImage(&imgClubIcon[code], x, y, 0, 0, imgClubIcon[code].w, imgClubIcon[code].h, VH);
}

void drawClubItem(int x,int y,int code)
{
    
    sprintf(strTempS,"clubitem%d.png",code);
    if(imgClubItem[code].texture == NULL)
    {
        loadImgDocuments(strTempS, &imgClubItem[code]);
    }
    drawImage(&imgClubItem[code], x, y, 0, 0, imgClubItem[code].w, imgClubItem[code].h, VH);
}



void drawClubList()
{
    int px = cx;
    int py = cy;
 
    
    
    drawImage(&imgClubList[0], px, py, 0, 0, imgClubList[0].w, imgClubList[0].h, VH);
    
    subTemp[XPOS] = px+515;
    subTemp[YPOS] = py-270;
    
    xClubList.xTouchExit.wPos = 80;
    xClubList.xTouchExit.hPos = 80;
    xClubList.xTouchExit.xPos = subTemp[XPOS]-xClubList.xTouchExit.wPos/2;
    xClubList.xTouchExit.yPos = subTemp[YPOS]-xClubList.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubList.xTouchExit.xPos, xClubList.xTouchExit.yPos, xClubList.xTouchExit.wPos, xClubList.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    
    subTemp[XPOS] = px+420;
    subTemp[YPOS] = py+50;
    drawImage(&imgClubList[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubList[2].w, imgClubList[2].h, VH);
        
    setCommaNum(strTempS, xClub.makePrice);
    setFontSizeORI(20);
    int ww = getLabelWidth(strTempS,20, false);
    
    gSetColor(255, 255, 255);
    xGame.isReSizeDraw = true;
    xGame.reSize = 70;
    drawIcon(subTemp[XPOS]-8-(ww/2), subTemp[YPOS]+200+16, ICON_TYPE_GOLD);
    xGame.isReSizeDraw = false;
    gDrawString(subTemp[XPOS]+8-(ww/2), subTemp[YPOS]+200+16, strTempS, VL);
    setFontSize(11);
    
    
    
    
    
    
    xClubList.xTouchMake.wPos = 200;
    xClubList.xTouchMake.hPos = 80;
    xClubList.xTouchMake.xPos = subTemp[XPOS]-xClubList.xTouchMake.wPos/2;
    xClubList.xTouchMake.yPos = subTemp[YPOS]+200-xClubList.xTouchMake.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubList.xTouchMake.xPos, xClubList.xTouchMake.yPos, xClubList.xTouchMake.wPos, xClubList.xTouchMake.hPos);
    setAlpha(ALPHA_MAX);
     */

    subTemp[XPOS] = px-132;
    subTemp[YPOS] = py+44;
    drawImage(&imgClubList[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubList[1].w, imgClubList[1].h, VH);
    
    xClubList.xTouchRefresh.wPos = 50;
    xClubList.xTouchRefresh.hPos = 50;
    xClubList.xTouchRefresh.xPos = subTemp[XPOS]-214-xClubList.xTouchRefresh.wPos/2;
    xClubList.xTouchRefresh.yPos = subTemp[YPOS]-221-xClubList.xTouchRefresh.hPos/2;
    
    
    xClubList.xTouchSearch.wPos = 120;
    xClubList.xTouchSearch.hPos = 50;
    xClubList.xTouchSearch.xPos = subTemp[XPOS]+329-xClubList.xTouchSearch.wPos/2;
    xClubList.xTouchSearch.yPos = subTemp[YPOS]-221-xClubList.xTouchSearch.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubList.xTouchSearch.xPos, xClubList.xTouchSearch.yPos, xClubList.xTouchSearch.wPos, xClubList.xTouchSearch.hPos);
    fillRect(xClubList.xTouchRefresh.xPos, xClubList.xTouchRefresh.yPos, xClubList.xTouchRefresh.wPos, xClubList.xTouchRefresh.hPos);
    setAlpha(ALPHA_MAX);
    */

    
    
    
    int startScrollX = px-132;
    int startScrollY = py-100;
    
    //탭리스트
    xClubList.xDragScroll.totalNum = xClubList.totalList;
    xClubList.xDragScroll.posGab = 80;
    xClubList.xDragScroll.endPos = -(((xClubList.xDragScroll.totalNum-6)*xClubList.xDragScroll.posGab));
    
    if(xClubList.xDragScroll.totalNum < 6)
        xClubList.xDragScroll.endPos = 0;
    else
        xClubList.xDragScroll.endPos -= 60;
    
    
    int iMax = xClubList.totalList;
    dragScrollPrc(&xClubList.xDragScroll,1,FALSE);
    
    gSetClip(true, 0, py-145, lcdW, 430);
    
    for(int i=0;i<iMax;i++)
    {
        int pos = xClubList.xDragScroll.pos+(xClubList.xDragScroll.posGab*i);
        subTemp[XPOS] = startScrollX;
        subTemp[YPOS] = startScrollY+pos;
        
        if(subTemp[YPOS] < -xClubList.xDragScroll.posGab || subTemp[YPOS] > lcdH+xClubList.xDragScroll.posGab)
            continue;
        
        drawImage(&imgClubList[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubList[3].w, imgClubList[3].h, VH);
        drawClubIcon(subTemp[XPOS]-357, subTemp[YPOS], xClubList.xListSlot[i].clubIcon);
        
        gSetColor(255, 255, 255);
        setFontSizeORI(20);
        sprintf(strTempS, "LV%d %s",xClubList.xListSlot[i].clubLv,xClubList.xListSlot[i].strName);
        gDrawString(subTemp[XPOS]-311, subTemp[YPOS]-16, strTempS, VL);
        
        gSetColor(112, 29, 29);
        setFontSizeORI(15);
        
        
        gDrawString(subTemp[XPOS]-311, subTemp[YPOS]+14, xClubList.xListSlot[i].strJoinInfo, VL);
        setFontSize(11);
        
        setFontSizeORI(15);
        gSetColor(112, 29, 29);
        //방장닉네임
        drawImage(&imgClubList[4], subTemp[XPOS]+38, subTemp[YPOS]-19, 0, 0, imgClubList[4].w, imgClubList[4].h, VH);
        gDrawString(subTemp[XPOS]+38+15, subTemp[YPOS]-19, xClubList.xListSlot[i].strNickName, VL);
        //인원
        drawImage(&imgClubList[5], subTemp[XPOS]+165, subTemp[YPOS]-19, 0, 0, imgClubList[5].w, imgClubList[5].h, VH);
        sprintf(strTempS, "(%d/%d)",xClubList.xListSlot[i].memberNow,xClub.xData[xClubList.xListSlot[i].clubLv].memberMax);
        
        gDrawString(subTemp[XPOS]+165+15, subTemp[YPOS]-19, strTempS, VL);
        setFontSize(11);
        
        //즉시가입
        if(xClubList.xListSlot[i].joinType == 0)
            drawImage(&imgClubList[6], subTemp[XPOS]+310, subTemp[YPOS], 0, 0, imgClubList[6].w, imgClubList[6].h, VH);
        //조건가입
        else
            drawImage(&imgClubList[7], subTemp[XPOS]+310, subTemp[YPOS], 0, 0, imgClubList[7].w, imgClubList[7].h, VH);
        
    }
    
    gSetClip(false, 0, py-200, lcdW, 430);
    
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xClubList.xDragScroll.selectNum = (-xClubList.xDragScroll.pos/xClubList.xDragScroll.posGab);
    
    if(xClubList.xDragScroll.selectNum < 0)
        xClubList.xDragScroll.selectNum = 0;
    
    for(int i=0;i<6;i++)
    {
        subTemp[XPOS] = startScrollX;
        subTemp[YPOS] = startScrollY+(i*xClubList.xDragScroll.posGab);
        
        xClubList.xTouchSlot[i].wPos = 160;
        xClubList.xTouchSlot[i].hPos = 60;
        xClubList.xTouchSlot[i].xPos = subTemp[XPOS]+310 - xClubList.xTouchSlot[i].wPos/2;
        xClubList.xTouchSlot[i].yPos = subTemp[YPOS] +((xClubList.xDragScroll.posGab <= xClubList.xDragScroll.pos ? xClubList.xDragScroll.pos:(xClubList.xDragScroll.pos%xClubList.xDragScroll.posGab)))- xClubList.xTouchSlot[i].hPos/2;
        
        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xClubList.xTouchSlot[i].xPos, xClubList.xTouchSlot[i].yPos, xClubList.xTouchSlot[i].wPos, xClubList.xTouchSlot[i].hPos);
         setAlpha(ALPHA_MAX);
         */
    }
    
    
    
    switch(xClubList.state)
    {
    case CLUBLIST_STATE_SEARCH:
    case CLUBLIST_STATE_SEARCHNET:
        drawClubListSearch();
        break;
    case CLUBLIST_STATE_MAKE:
    case CLUBLIST_STATE_MAKENET:
        drawClubMake();
        break;
    }
    
    switch(xClubList.state)
    {
    case CLUBLIST_STATE_NET:
    case CLUBLIST_STATE_SEARCHNET:
    case CLUBLIST_STATE_MAKENET:
        xGame.isRotate = TRUE;
        xGame.rotateNum = 360-(gameCnt%120)*3;
        drawPacker(imgLoadingIcon0, cx, cy, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
        xGame.isRotate = FALSE;
        break;
    }
}

void drawClubListSearch()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    drawImage(&imgClubList[8], px, py, 0, 0, imgClubList[8].w, imgClubList[8].h, VH);
    
    subTemp[XPOS] = px+395;
    subTemp[YPOS] = py-110;
    xClubSearch.xTouchExit.wPos = 60;
    xClubSearch.xTouchExit.hPos = 60;
    xClubSearch.xTouchExit.xPos = subTemp[XPOS]-xClubSearch.xTouchExit.wPos/2;
    xClubSearch.xTouchExit.yPos = subTemp[YPOS]-xClubSearch.xTouchExit.hPos/2;
    
    subTemp[XPOS] = px-88;
    subTemp[YPOS] = py-27;
    xClubSearch.xTouchText.wPos = 600;
    xClubSearch.xTouchText.hPos = 50;
    xClubSearch.xTouchText.xPos = subTemp[XPOS]-xClubSearch.xTouchText.wPos/2;
    xClubSearch.xTouchText.yPos = subTemp[YPOS]-xClubSearch.xTouchText.hPos/2;
    
    int strByte = getStringByte(xClubSearch.strName);
    int kor = strByte/1000;
    int eng = strByte%1000;
    int korEng = kor+eng;
    //한글 1자~6자
    //영문 2자~8자
    gSetColor(255, 255, 255);
    setFontSizeORI(20);
    if(korEng == 0)
        gDrawString(subTemp[XPOS]-270, subTemp[YPOS], "클럽명을 입력해주세요", VL);
    else
        gDrawString(subTemp[XPOS]-270, subTemp[YPOS], xClubSearch.strName, VL);
        
    setFontSize(11);
    
    
    
    subTemp[XPOS] = px+305;
    subTemp[YPOS] = py-27;
    xClubSearch.xTouchSearch.wPos = 150;
    xClubSearch.xTouchSearch.hPos = 50;
    xClubSearch.xTouchSearch.xPos = subTemp[XPOS]-xClubSearch.xTouchSearch.wPos/2;
    xClubSearch.xTouchSearch.yPos = subTemp[YPOS]-xClubSearch.xTouchSearch.hPos/2;
    
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+70;
    if(xClubSearch.xSearchSlot.clubKey == DONT)
    {
    }
    else
    {
        drawImage(&imgClubList[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubList[3].w, imgClubList[3].h, VH);
        drawClubIcon(subTemp[XPOS]-357, subTemp[YPOS], xClubSearch.xSearchSlot.clubIcon);
        
        gSetColor(255, 255, 255);
        setFontSizeORI(20);
        sprintf(strTempS, "LV%d %s",xClubSearch.xSearchSlot.clubLv,xClubSearch.xSearchSlot.strName);
        gDrawString(subTemp[XPOS]-311, subTemp[YPOS]-16, strTempS, VL);
        
        gSetColor(112, 29, 29);
        setFontSizeORI(15);
        
        
        gDrawString(subTemp[XPOS]-311, subTemp[YPOS]+14, xClubSearch.xSearchSlot.strJoinInfo, VL);
        setFontSize(11);
        
        setFontSizeORI(15);
        gSetColor(112, 29, 29);
        //방장닉네임
        drawImage(&imgClubList[4], subTemp[XPOS]+38, subTemp[YPOS]-19, 0, 0, imgClubList[4].w, imgClubList[4].h, VH);
        gDrawString(subTemp[XPOS]+38+15, subTemp[YPOS]-19, xClubSearch.xSearchSlot.strNickName, VL);
        //인원
        drawImage(&imgClubList[5], subTemp[XPOS]+165, subTemp[YPOS]-19, 0, 0, imgClubList[5].w, imgClubList[5].h, VH);
        sprintf(strTempS, "(%d/%d)",xClubSearch.xSearchSlot.memberNow,xClub.xData[xClubSearch.xSearchSlot.clubLv].memberMax);
        
        gDrawString(subTemp[XPOS]+165+15, subTemp[YPOS]-19, strTempS, VL);
        setFontSize(11);
        
        //즉시가입
        if(xClubSearch.xSearchSlot.joinType == 0)
            drawImage(&imgClubList[6], subTemp[XPOS]+310, subTemp[YPOS], 0, 0, imgClubList[6].w, imgClubList[6].h, VH);
        //조건가입
        else
            drawImage(&imgClubList[7], subTemp[XPOS]+310, subTemp[YPOS], 0, 0, imgClubList[7].w, imgClubList[7].h, VH);
    }
    
    
    xClubSearch.xTouchJoin.wPos = 150;
    xClubSearch.xTouchJoin.hPos = 50;
    xClubSearch.xTouchJoin.xPos = subTemp[XPOS]+310-xClubSearch.xTouchJoin.wPos/2;
    xClubSearch.xTouchJoin.yPos = subTemp[YPOS]-xClubSearch.xTouchJoin.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubSearch.xTouchExit.xPos, xClubSearch.xTouchExit.yPos, xClubSearch.xTouchExit.wPos, xClubSearch.xTouchExit.hPos);
    fillRect(xClubSearch.xTouchText.xPos, xClubSearch.xTouchText.yPos, xClubSearch.xTouchText.wPos, xClubSearch.xTouchText.hPos);
    fillRect(xClubSearch.xTouchSearch.xPos, xClubSearch.xTouchSearch.yPos, xClubSearch.xTouchSearch.wPos, xClubSearch.xTouchSearch.hPos);
    fillRect(xClubSearch.xTouchJoin.xPos, xClubSearch.xTouchJoin.yPos, xClubSearch.xTouchJoin.wPos, xClubSearch.xTouchJoin.hPos);
    setAlpha(ALPHA_MAX);
     */
}

void drawClubMake()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    
    drawImage(&imgClubMake[0], px, py, 0, 0, imgClubMake[0].w, imgClubMake[0].h, VH);
    
    
    subTemp[XPOS] = px+315;
    subTemp[YPOS] = py-245;
    
    xClubMake.xTouchExit.wPos = 80;
    xClubMake.xTouchExit.hPos = 80;
    xClubMake.xTouchExit.xPos = subTemp[XPOS]-xClubMake.xTouchExit.wPos/2;
    xClubMake.xTouchExit.yPos = subTemp[YPOS]-xClubMake.xTouchExit.hPos/2;
    
    
    subTemp[XPOS] = px-3;
    subTemp[YPOS] = py-159;
    
    int strByte = getStringByte(xClubMake.strName);
    int kor = strByte/1000;
    int eng = strByte%1000;
    int korEng = kor+eng;
    //한글 1자~6자
    //영문 2자~8자
    gSetColor(255, 255, 255);
    setFontSizeORI(20);
    if(korEng == 0)
        gDrawString(subTemp[XPOS], subTemp[YPOS], "클럽명을 입력해주세요", VH);
    else
        gDrawString(subTemp[XPOS], subTemp[YPOS], xClubMake.strName, VH);
    
    setFontSize(11);
    
    xClubMake.xTouchName.wPos = 234;
    xClubMake.xTouchName.hPos = 50;
    xClubMake.xTouchName.xPos = subTemp[XPOS]-xClubMake.xTouchName.wPos/2;
    xClubMake.xTouchName.yPos = subTemp[YPOS]-xClubMake.xTouchName.hPos/2;
    
    
    xClubMake.totalIconList = 6;
    xClubMake.iconListCode[0] = 0;
    xClubMake.iconListCode[1] = 1;
    xClubMake.iconListCode[2] = 2;
    xClubMake.iconListCode[3] = 3;
    xClubMake.iconListCode[4] = 4;
    xClubMake.iconListCode[5] = 5;
    
    
    for(int k=0;k<xClubMake.totalIconList;k++)
    {
        subTemp[XPOS] = px-132+(k*73);
        subTemp[YPOS] = py-74;
        
        drawClubIcon(subTemp[XPOS], subTemp[YPOS], xClubMake.iconListCode[k]);
        
        
        
        
        
        
        if(xClubMake.selectIconSlot == k)
            drawImage(&imgClubMake[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubMake[1].w, imgClubMake[1].h, VH);
        
        
        
        xClubMake.xTouchIcon[k].wPos = 66;
        xClubMake.xTouchIcon[k].hPos = 66;
        xClubMake.xTouchIcon[k].xPos = subTemp[XPOS]-xClubMake.xTouchIcon[k].wPos/2;
        xClubMake.xTouchIcon[k].yPos = subTemp[YPOS]-xClubMake.xTouchIcon[k].hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xClubMake.xTouchIcon[k].xPos, xClubMake.xTouchIcon[k].yPos, xClubMake.xTouchIcon[k].wPos, xClubMake.xTouchIcon[k].hPos);
        setAlpha(ALPHA_MAX);
        */
    }
    
    
    
    
    
    
    for(int k=0;k<2;k++)
    {
        subTemp[XPOS] = px-48+(k*181);
        subTemp[YPOS] = py+18;
    
        if(xClubMake.selectJoinType == k)
            drawImage(&imgClubMake[1], subTemp[XPOS]-60, subTemp[YPOS]-10, 0, 0, imgClubMake[1].w, imgClubMake[1].h, VH);
        
        xClubMake.xTouchJoinType[k].wPos = 144;
        xClubMake.xTouchJoinType[k].hPos = 50;
        xClubMake.xTouchJoinType[k].xPos = subTemp[XPOS]-xClubMake.xTouchJoinType[k].wPos/2;
        xClubMake.xTouchJoinType[k].yPos = subTemp[YPOS]-xClubMake.xTouchJoinType[k].hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xClubMake.xTouchJoinType[k].xPos, xClubMake.xTouchJoinType[k].yPos, xClubMake.xTouchJoinType[k].wPos, xClubMake.xTouchJoinType[k].hPos);
        setAlpha(ALPHA_MAX);
         */
    }
    
    
    
    subTemp[XPOS] = px-6;
    subTemp[YPOS] = py+133;
    
    strByte = getStringByte(xClubMake.strJoinInfo);
    kor = strByte/1000;
    eng = strByte%1000;
    korEng = kor+eng;
    //한글 1자~6자
    //영문 2자~8자
    gSetColor(255, 255, 255);
    setFontSizeORI(20);
    if(korEng == 0)
        gDrawString(subTemp[XPOS], subTemp[YPOS], "클럽 소개 메세지를 입력해주세요", VH);
    else
        gDrawString(subTemp[XPOS], subTemp[YPOS], xClubMake.strJoinInfo, VH);
    
    setFontSize(11);
    
    xClubMake.xTouchJoinInfo.wPos = 570;
    xClubMake.xTouchJoinInfo.hPos = 50;
    xClubMake.xTouchJoinInfo.xPos = subTemp[XPOS]-xClubMake.xTouchJoinInfo.wPos/2;
    xClubMake.xTouchJoinInfo.yPos = subTemp[YPOS]-xClubMake.xTouchJoinInfo.hPos/2;
    
    
    
    subTemp[XPOS] = px-2;
    subTemp[YPOS] = py+244;
    setCommaNum(strTempS, xClub.makePrice);
    setFontSizeORI(20);
    int ww = getLabelWidth(strTempS,20, false);
    
    gSetColor(255, 255, 255);
    xGame.isReSizeDraw = true;
    xGame.reSize = 70;
    drawIcon(subTemp[XPOS]-8-(ww/2), subTemp[YPOS]+16, ICON_TYPE_GOLD);
    xGame.isReSizeDraw = false;
    gDrawString(subTemp[XPOS]+8-(ww/2), subTemp[YPOS]+16, strTempS, VL);
    setFontSize(11);
    
    xClubMake.xTouchMake.wPos = 190;
    xClubMake.xTouchMake.hPos = 70;
    xClubMake.xTouchMake.xPos = subTemp[XPOS]-xClubMake.xTouchMake.wPos/2;
    xClubMake.xTouchMake.yPos = subTemp[YPOS]-xClubMake.xTouchMake.hPos/2;
    
    
    
    
    
    
    
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubMake.xTouchMake.xPos, xClubMake.xTouchMake.yPos, xClubMake.xTouchMake.wPos, xClubMake.xTouchMake.hPos);
    fillRect(xClubMake.xTouchJoinInfo.xPos, xClubMake.xTouchJoinInfo.yPos, xClubMake.xTouchJoinInfo.wPos, xClubMake.xTouchJoinInfo.hPos);
    fillRect(xClubMake.xTouchExit.xPos, xClubMake.xTouchExit.yPos, xClubMake.xTouchExit.wPos, xClubMake.xTouchExit.hPos);
    fillRect(xClubMake.xTouchName.xPos, xClubMake.xTouchName.yPos, xClubMake.xTouchName.wPos, xClubMake.xTouchName.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    
    
    
    
    
}

void keyClubList(int type, int param1, int param2)
{
    if(xClubList.state == CLUBLIST_STATE_MAKE)
    {
        if(type == MH_KEY_PRESSEVENT)
        {
            
            bool isJoinType = false;
            int selectJoinType = 0;
            
            bool isIcon = false;
            int selectIcon = 0;
            
            
            for(int k=0;k<2;k++)
            {
                if(touchCheck(&xClubMake.xTouchJoinType[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    isJoinType = true;
                    selectJoinType = k;
                    break;
                }
            }
            
            for(int k=0;k<xClubMake.totalIconList;k++)
            {
                if(touchCheck(&xClubMake.xTouchIcon[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    isIcon = true;
                    selectIcon = k;
                    break;
                }
            }
            
            
            if(isIcon == true)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                xClubMake.selectIconSlot = selectIcon;
            }
            else if(isJoinType == true)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                xClubMake.selectJoinType = selectJoinType;
            }
            else if(touchCheck(&xClubMake.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                xClubList.state = CLUBLIST_STATE_PLAY;
            }
            else if(touchCheck(&xClubMake.xTouchName) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                setTextField(TEXTBOX_TYPE_CLUBMAKENAME, lcdW/2, lcdH+999, 200, 25);
            }
            else if(touchCheck(&xClubMake.xTouchJoinInfo) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                setTextField(TEXTBOX_TYPE_CLUBMAKEJOININFO, lcdW/2, lcdH+999, 200, 25);
            }
            else if(touchCheck(&xClubMake.xTouchMake) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                
                if(xSaveTemp.money.oriData < xClub.makePrice)
                {
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "골드가 부족합니다.");
                }
                else
                {
                    int strByte = getStringByte(xClubMake.strName);
                    int kor = strByte/1000;
                    int eng = strByte%1000;
                    int korEng = kor+eng;
                    
                    
                    int strByteJoin = getStringByte(xClubMake.strJoinInfo);
                    int korJoin = strByteJoin/1000;
                    int engJoin = strByteJoin%1000;
                    int korEngJoin = korJoin+engJoin;
                    
                    if(korEng == 0)
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "클럽명을 입력하지\n않으셨습니다.");
                    }
                    else if(korEngJoin == 0)
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "클럽 소개 메시지를\n입력해주세요.");
                    }
                    else
                    {
                        setPopup(POPUP_CLUBMAKE, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    }
                }
            }
        }
    }
    else if(xClubList.state == CLUBLIST_STATE_SEARCH)
    {
        if(type == MH_KEY_PRESSEVENT)
        {
            if(touchCheck(&xClubSearch.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                xClubList.state = CLUBLIST_STATE_PLAY;
            }
            else if(touchCheck(&xClubSearch.xTouchText) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                setTextField(TEXTBOX_TYPE_CLUBSEARCH, lcdW/2, lcdH+999, 200, 25);
            }
            else if(touchCheck(&xClubSearch.xTouchSearch) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                if(getStringByte(xClubSearch.strName) > 0)
                {
                    xClubSearch.xSearchSlot.clubKey = DONT;
                    /////////////////nets
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBSEARCH, TRUE);
                    /////////////////nets
                }
            }
            else if(touchCheck(&xClubSearch.xTouchJoin) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                if(xClubSearch.xSearchSlot.clubKey != DONT)
                {
                    if(xClubSearch.xSearchSlot.memberNow < xClub.xData[xClubSearch.xSearchSlot.clubLv].memberMax)
                    {
                        if(xClubSearch.xSearchSlot.joinType == 0)
                        {
                            xClubList.state = CLUBLIST_STATE_SEARCHNET;
                            /////////////////nets
                            xEventQueueNet.key[xEventQueueNet.totalNum] = xClubSearch.xSearchSlot.clubKey;
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBJOIN, TRUE);
                            /////////////////nete
                        }
                        else
                        {
                            xClubList.state = CLUBLIST_STATE_SEARCHNET;
                            /////////////////nets
                            xEventQueueNet.key[xEventQueueNet.totalNum] = xClubSearch.xSearchSlot.clubKey;
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBJOINAPPLY, TRUE);
                            /////////////////nete
                        }
                        
                    }
                    else
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "클럽 인원 제한이 초과 되었습니다.");
                    }
                }
            }
        }
    }
    else if(xClubList.state == CLUBLIST_STATE_PLAY)
    {
        if(type == MH_KEY_PRESSEVENT)
        {
            if(touchCheck(&xClubList.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                clubListFreeLoad(false);
                xWorldMap.state = WORLDMAP_STATE_PLAY;
            }
            else if(touchCheck(&xClubList.xTouchMake) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                xClubList.state = CLUBLIST_STATE_MAKE;
                
                memset(&xClubMake.strName, 0, sizeof(xClubMake.strName));
                sprintf(xClubMake.strJoinInfo, "안녕하세요.누구든지 환영합니다.");
            }
            else if(touchCheck(&xClubList.xTouchSearch) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                xClubList.state = CLUBLIST_STATE_SEARCH;
                memset(&xClubSearch.strName, 0, sizeof(xClubSearch.strName));
                xClubSearch.xSearchSlot.clubKey = DONT;
                
            }
            else if(touchCheck(&xClubList.xTouchRefresh) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                refreshClubList();
            }
            else
            {
                dragScrollKeyPrc(&xClubList.xDragScroll,2);
            }
        }
        else if(type == MH_KEY_RELEASEEVENT)
        {
            if(xClubList.xDragScroll.touchXposBefore != DONT)
            {
                dragScrollKeyPrc(&xClubList.xDragScroll,3);
            }
            else
            {
                bool isSelectSlot = false;
                int selectSlot = 0;
                
                for(int k=0;k<6;k++)
                {
                    if(touchCheck(&xClubList.xTouchSlot[k]) == TRUE)
                    {
                        isSelectSlot = true;
                        selectSlot = k;
                        break;
                    }
                }
                
                int selectTemp=0;
                
                if(isSelectSlot == true)
                {
                    selectTemp = selectSlot+xClubList.xDragScroll.selectNum;
                }
                
                if(selectTemp < 0 || selectTemp >= xClubList.totalList)
                    isSelectSlot = false;
                
                if(isSelectSlot == true)
                {
                    playSnd(SND_MENU_OK);
                    
                    xClubList.selectList = selectTemp;
                    
                    
                    if(xClubList.xListSlot[xClubList.selectList].memberNow < xClub.xData[xClubList.xListSlot[xClubList.selectList].clubLv].memberMax)
                    {
                        if(xClubList.xListSlot[xClubList.selectList].joinType == 0)
                        {
                            xClubList.state = CLUBLIST_STATE_NET;
                            /////////////////nets
                            xEventQueueNet.key[xEventQueueNet.totalNum] = xClubList.xListSlot[xClubList.selectList].clubKey;
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBJOIN, TRUE);
                            /////////////////nete
                        }
                        else
                        {
                            xClubList.state = CLUBLIST_STATE_NET;
                            /////////////////nets
                            xEventQueueNet.key[xEventQueueNet.totalNum] = xClubList.xListSlot[xClubList.selectList].clubKey;
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBJOINAPPLY, TRUE);
                            /////////////////nete
                        }
                    }
                    else
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "클럽 인원 제한이 초과 되었습니다.");
                    }
                }
            }
            xClubList.xDragScroll.touchXpos = DONT;
            xClubList.xDragScroll.touchYpos = DONT;
            xClubList.xDragScroll.touchXposBefore = DONT;
            xClubList.xDragScroll.touchYposBefore = DONT;
        }
    }
}






void clubLobbyFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        loadImgDocuments("clublobby0.png", &imgClubLobby[0]);
        loadImgDocuments("clublobby1.png", &imgClubLobby[1]);
        loadImgDocuments("clublobby2.png", &imgClubLobby[2]);
        loadImgDocuments("clublobby3.png", &imgClubLobby[3]);
        loadImgDocuments("clublobby4.png", &imgClubLobby[4]);
        loadImg("clubdonate.png", &imgClubLobby[5]);
        loadImgDocuments("clublobby6.png", &imgClubLobby[6]);
        loadImgDocuments("clublobby7.png", &imgClubLobby[7]);
        loadImgDocuments("clublobby8.png", &imgClubLobby[8]);
        loadImg("clubunreg.png", &imgClubLobby[9]);
        loadImg("edit.png",&imgClubLobby[10]);
        
        
        loadImgDocuments("clublist0.png", &imgClubList[0]);
        
        
        loadImgDocuments("clublobbytab0.png", &imgClubLobbyTab[0]);
        loadImgDocuments("clublobbytab1.png", &imgClubLobbyTab[1]);
        loadImgDocuments("clublobbytab2.png", &imgClubLobbyTab[2]);
        
        
        loadImgDocuments("masterui0.png", &imgMasterUi[0]);
        loadImgDocuments("masterui1.png", &imgMasterUi[1]);
        loadImgDocuments("masterui2.png", &imgMasterUi[2]);
        loadImgDocuments("masterui3.png", &imgMasterUi[3]);
        loadImgDocuments("masterui4.png", &imgMasterUi[4]);
        loadImgDocuments("masterui5.png", &imgMasterUi[5]);
        loadImgDocuments("masterui6.png", &imgMasterUi[6]);
        
        
        
        loadImgDocuments("clubbook0.png", &imgClubBook[0]);
        loadImgDocuments("clubbook1.png", &imgClubBook[1]);
        loadImgDocuments("clubbook2.png", &imgClubBook[2]);
        
        
        
        loadImgDocuments("clubmenu0.png", &imgClubMenu[0]);
        loadImgDocuments("clubmenu1.png", &imgClubMenu[1]);
        loadImgDocuments("clubmenu2.png", &imgClubMenu[2]);
        loadImgDocuments("clubmenu3.png", &imgClubMenu[3]);
        
        
    }
    else
    {
        freeImg(&imgClubLobby[0]);
        freeImg(&imgClubLobby[1]);
        freeImg(&imgClubLobby[2]);
        freeImg(&imgClubLobby[3]);
        freeImg(&imgClubLobby[4]);
        freeImg(&imgClubLobby[5]);
        freeImg(&imgClubLobby[6]);
        freeImg(&imgClubLobby[7]);
        freeImg(&imgClubLobby[8]);
        freeImg(&imgClubLobby[9]);
        freeImg(&imgClubLobby[10]);
        
        freeImg(&imgClubList[0]);
        
        freeImg(&imgClubLobbyTab[0]);
        freeImg(&imgClubLobbyTab[1]);
        freeImg(&imgClubLobbyTab[2]);
     
        freeImg(&imgMasterUi[0]);
        freeImg(&imgMasterUi[1]);
        freeImg(&imgMasterUi[2]);
        freeImg(&imgMasterUi[3]);
        freeImg(&imgMasterUi[4]);
        freeImg(&imgMasterUi[5]);
        freeImg(&imgMasterUi[6]);
        
        freeImg(&imgClubBook[0]);
        freeImg(&imgClubBook[1]);
        freeImg(&imgClubBook[2]);
        
        freeImg(&imgClubMenu[0]);
        freeImg(&imgClubMenu[1]);
        freeImg(&imgClubMenu[2]);
        freeImg(&imgClubMenu[3]);
    }
}

void drawClubLobby()
{
    int px = cx;
    int py = cy;
    
    
    if(xClubLobby.state == CLUBLOBBY_STATE_DATANET)
    {
        xGame.isRotate = TRUE;
        xGame.rotateNum = 360-(gameCnt%120)*3;
        drawPacker(imgLoadingIcon0, cx, cy, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
        xGame.isRotate = FALSE;
        return;
    }
    
    
    if(xClub.xMy.masterKey == xNetData.userNum)
        xClubLobby.isMaster = true;
    else
        xClubLobby.isMaster = false;
    
    
    drawImage(&imgClubList[0], px, py, 0, 0, imgClubList[0].w, imgClubList[0].h, VH);
    drawImage(&imgClubLobby[0], px, py-25, 0, 0, imgClubLobby[0].w, imgClubLobby[0].h, VH);
    
    
    
    
    for(int k=0;k<CLUBMENUMAX;k++)
    {
        subTemp[XPOS] = px-500+(k*112);
        subTemp[YPOS] = py+268;
        
        drawImage(&imgClubMenu[k], subTemp[XPOS], subTemp[YPOS], 0, imgClubMenu[k].h/2*(xClubLobby.selectMenu == k?1:0), imgClubMenu[k].w, imgClubMenu[k].h/2, VH);

        xClubLobby.xTouchClubMenu[k].wPos = imgClubMenu[k].w;
        xClubLobby.xTouchClubMenu[k].hPos = imgClubMenu[k].h/2;
        xClubLobby.xTouchClubMenu[k].xPos = subTemp[XPOS]-xClubLobby.xTouchClubMenu[k].wPos/2;
        xClubLobby.xTouchClubMenu[k].yPos = subTemp[YPOS]-xClubLobby.xTouchClubMenu[k].hPos/2;
        
        
        
        
        
    }
    
    
    
    subTemp[XPOS] = px-500+(1*112);
    subTemp[YPOS] = py+268;
    drawNewIcon(subTemp[XPOS]+50,subTemp[YPOS]-50);
    
    
    
    
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    
    xClubLobby.xTouchExit.wPos = 80;
    xClubLobby.xTouchExit.hPos = 80;
    xClubLobby.xTouchExit.xPos = subTemp[XPOS]-xClubLobby.xTouchExit.wPos/2;
    xClubLobby.xTouchExit.yPos = subTemp[YPOS]-xClubLobby.xTouchExit.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubLobby.xTouchExit.xPos, xClubLobby.xTouchExit.yPos, xClubLobby.xTouchExit.wPos, xClubLobby.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    
    
    subTemp[XPOS] = px-253;
    subTemp[YPOS] = py-215;
    if(xClubLobby.isMaster == true)
    {
        drawImage(&imgMasterUi[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMasterUi[0].w, imgMasterUi[0].h, VH);
        drawImage(&imgMasterUi[1], subTemp[XPOS]+47, subTemp[YPOS], 0, imgMasterUi[1].h/2*(xClub.xMy.joinType == 0?1:0), imgMasterUi[1].w, imgMasterUi[1].h/2, VH);
        drawImage(&imgMasterUi[2], subTemp[XPOS]+85, subTemp[YPOS], 0, imgMasterUi[2].h/2*(xClub.xMy.joinType == 1?1:0), imgMasterUi[2].w, imgMasterUi[2].h/2, VH);
        
        
        xClubLobby.xTouchJoinType[0].wPos = 30;
        xClubLobby.xTouchJoinType[0].hPos = 30;
        xClubLobby.xTouchJoinType[0].xPos = subTemp[XPOS]+47-xClubLobby.xTouchJoinType[0].wPos/2;
        xClubLobby.xTouchJoinType[0].yPos = subTemp[YPOS]-xClubLobby.xTouchJoinType[0].hPos/2;
        
        xClubLobby.xTouchJoinType[1].wPos = 30;
        xClubLobby.xTouchJoinType[1].hPos = 30;
        xClubLobby.xTouchJoinType[1].xPos = subTemp[XPOS]+85-xClubLobby.xTouchJoinType[1].wPos/2;
        xClubLobby.xTouchJoinType[1].yPos = subTemp[YPOS]-xClubLobby.xTouchJoinType[1].hPos/2;
    }
    
    subTemp[XPOS]=px+483;
    subTemp[YPOS]=py-208;
    drawImage(&imgClubLobby[9], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubLobby[9].w, imgClubLobby[9].h, VH);
    xClubLobby.xTouchUnReg.wPos = imgClubLobby[9].w;
    xClubLobby.xTouchUnReg.hPos = imgClubLobby[9].h;
    xClubLobby.xTouchUnReg.xPos = subTemp[XPOS]-xClubLobby.xTouchUnReg.wPos/2;
    xClubLobby.xTouchUnReg.yPos = subTemp[YPOS]-xClubLobby.xTouchUnReg.hPos/2;
    
    
    
    
    subTemp[XPOS] = px-453;
    subTemp[YPOS] = py-185;
    //클럽아이콘
    int gageW = xClub.xMy.clubExp*imgClubLobby[2].w/xClub.xData[xClub.xMy.clubLv].expMax;
    
    if(gageW > imgClubLobby[2].w)
        gageW = imgClubLobby[2].w;
    
    drawImage(&imgClubLobby[2], subTemp[XPOS], subTemp[YPOS], 0, 0, gageW, imgClubLobby[2].h, VL);
    
    
    char strTempPPPP[2][64];
    setCommaNum(strTempPPPP[0], xClub.xMy.clubExp);
    setCommaNum(strTempPPPP[1], xClub.xData[xClub.xMy.clubLv].expMax);
    sprintf(strTempS, "%s/%s",strTempPPPP[0],strTempPPPP[1]);
    
    gSetColor(255, 255, 255);
    setFontSizeORI(17);
    gDrawString(subTemp[XPOS]+152, subTemp[YPOS]-2, strTempS, VH);
    setFontSize(11);
    
    drawClubIcon(subTemp[XPOS]-47, subTemp[YPOS]-13, xClub.xMy.clubIcon);
    
    gSetColor(255, 255, 255);
    setFontSizeORI(18);
    sprintf(strTempS, "LV%d %s",xClub.xMy.clubLv,xClub.xMy.strName);
    gDrawString(subTemp[XPOS], subTemp[YPOS]-27, strTempS, VL);
    setFontSize(11);
    
    //클럽정보
    subTemp[XPOS] = px-430;
    subTemp[YPOS] = py-151;
    setFontSizeORI(17);
    gDrawString(subTemp[XPOS], subTemp[YPOS], xClub.xMy.strNickName, VL);
    sprintf(strTempS, "%d / %d",xClub.xMy.memberNow,xClub.xData[xClub.xMy.clubLv].memberMax);
    gDrawString(subTemp[XPOS]-32, subTemp[YPOS]+24, strTempS, VL);
    
    if(xClub.xMy.fashionWeekRank_LASTWEEK == DONT)
        sprintf(strTempS, "미등록");
    else
        sprintf(strTempS, "%d위(%.2f%%)",xClub.xMy.fashionWeekRank_LASTWEEK,xClub.xMy.fashionWeekRankPer_LASTWEEK);
    gDrawString(subTemp[XPOS], subTemp[YPOS]+(24*2), strTempS, VL);
    setCommaNum(strTempS, xClub.money);
    gDrawString(subTemp[XPOS]-16, subTemp[YPOS]+(24*3), strTempS, VL);
    setFontSize(11);
    
    
    subTemp[XPOS] = px-217;
    subTemp[YPOS] = py-81;
    drawImage(&imgClubLobby[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubLobby[5].w, imgClubLobby[5].h, VH);
    
    xClubLobby.xTouchClubDonate.wPos = imgClubLobby[5].w;
    xClubLobby.xTouchClubDonate.hPos = imgClubLobby[5].h;
    xClubLobby.xTouchClubDonate.xPos = subTemp[XPOS]-xClubLobby.xTouchClubDonate.wPos/2;
    xClubLobby.xTouchClubDonate.yPos = subTemp[YPOS]-xClubLobby.xTouchClubDonate.hPos/2;
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubLobby.xTouchUnReg.xPos, xClubLobby.xTouchUnReg.yPos, xClubLobby.xTouchUnReg.wPos, xClubLobby.xTouchUnReg.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    
    //공지,소개글 메뉴
    subTemp[XPOS] = px-160;
    subTemp[YPOS] = py-28;
    if(xClubLobby.isMaster == true)
    {
        drawImage(&imgMasterUi[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMasterUi[3].w, imgMasterUi[3].h, VH);
        
        xClubLobby.xTouchNoticeEdit.wPos = 80;
        xClubLobby.xTouchNoticeEdit.hPos = 30;
        xClubLobby.xTouchNoticeEdit.xPos = subTemp[XPOS]-xClubLobby.xTouchNoticeEdit.wPos/2;
        xClubLobby.xTouchNoticeEdit.yPos = subTemp[YPOS]-xClubLobby.xTouchNoticeEdit.hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xClubLobby.xTouchNoticeEdit.xPos, xClubLobby.xTouchNoticeEdit.yPos, xClubLobby.xTouchNoticeEdit.wPos, xClubLobby.xTouchNoticeEdit.hPos);
        setAlpha(ALPHA_MAX);
         */
    }
    
    for(int k=0;k<CLUBLOBBYNOTICETABMAX;k++)
    {
        subTemp[XPOS] = px-509+(k*88);
        subTemp[YPOS] = py-28;
        
        switch(k)
        {
        case 0:
            drawImage(&imgClubLobby[6], subTemp[XPOS], subTemp[YPOS], 0, imgClubLobby[6].h/2*(xClubLobby.selectNoticeTab==0?1:0), imgClubLobby[6].w, imgClubLobby[6].h/2, VH);
            break;
        case 1:
            drawImage(&imgClubLobby[7], subTemp[XPOS], subTemp[YPOS], 0, imgClubLobby[7].h/2*(xClubLobby.selectNoticeTab==1?1:0), imgClubLobby[7].w, imgClubLobby[7].h/2, VH);
            break;
        }

        xClubLobby.xTouchNotice[k].wPos = 60;
        xClubLobby.xTouchNotice[k].hPos = 30;
        xClubLobby.xTouchNotice[k].xPos = subTemp[XPOS]-xClubLobby.xTouchNotice[k].wPos/2;
        xClubLobby.xTouchNotice[k].yPos = subTemp[YPOS]-xClubLobby.xTouchNotice[k].hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xClubLobby.xTouchNotice[k].xPos, xClubLobby.xTouchNotice[k].yPos, xClubLobby.xTouchNotice[k].wPos, xClubLobby.xTouchNotice[k].hPos);
        setAlpha(ALPHA_MAX);
        */
    }
    

    
    
    //클럽공지
    subTemp[XPOS] = px-535;
    subTemp[YPOS] = py;
    setFontSizeORI(15);
    gSetColor(212, 155, 184);
    
    if(xClubLobby.selectNoticeTab == 0)
        setPopupStringLine(xClub.xMy.strNotice,26);
    else
        setPopupStringLine(xClub.xMy.strJoinInfo,26);
    
    int fontGab = 19;
    
    for(int li=0;li<xPopup.totalLine;li++)
    {
        gDrawString(subTemp[XPOS],subTemp[YPOS]+(fontGab*li), xPopup.strTextLine[li], VL);
    }
    setFontSize(11);
    
    
    
    //클럽활동내역
    xClubLobby.xDragScrollHistory.totalNum = xClubHistory.totalNum;
    xClubLobby.xDragScrollHistory.posGab = 19;
    
    
    
    xClubLobby.xDragScrollHistory.endPos = -(((xClubLobby.xDragScrollHistory.totalNum-5)*xClubLobby.xDragScrollHistory.posGab));
    
    if(xClubLobby.xDragScrollHistory.totalNum < 5)
        xClubLobby.xDragScrollHistory.endPos = 0;
    
    
    int iMax = xClubLobby.xDragScrollHistory.totalNum;
    dragScrollPrc(&xClubLobby.xDragScrollHistory,1,FALSE);
    
    
    xClubLobby.xTouchHistoryBg.wPos = 440;
    xClubLobby.xTouchHistoryBg.hPos = 250;
    xClubLobby.xTouchHistoryBg.xPos = 0;
    xClubLobby.xTouchHistoryBg.yPos = py+60;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubLobby.xTouchHistoryBg.xPos,xClubLobby.xTouchHistoryBg.yPos,xClubLobby.xTouchHistoryBg.wPos,xClubLobby.xTouchHistoryBg.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    

    if(0 >= xClubHistory.pageNum)
    {
        bool isPageLoad = false;
        for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
        {
            if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_CLUBHISTORYLIST)
            {
                isPageLoad = TRUE;
                break;
            }
        }
        
        if(isPageLoad == FALSE)
        {
            //////////////////////////////////////////////////////////////////////////////////////////
            xEventQueueNet.code[xEventQueueNet.totalNum] = xClubHistory.rowNum;
            xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xClubHistory.pageNum;
            xClubHistory.pageNum++;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBHISTORYLIST, TRUE);
            //////////////////////////////////////////////////////////////////////////////////////////
        }
    }
    
    gSetClip(true, 0, py+87, 440, 104);
    for(int i=0;i<iMax;i++)
    {
        int pos = xClubLobby.xDragScrollHistory.pos+(xClubLobby.xDragScrollHistory.posGab*i);
        subTemp[XPOS] = px-535;
        subTemp[YPOS] = py+102+pos;
        
        if(subTemp[YPOS] < -xClubLobby.xDragScrollHistory.posGab || subTemp[YPOS] > lcdH+xClubLobby.xDragScrollHistory.posGab)
            continue;

        if((i+1)/10 >= xClubHistory.pageNum)
        {
            bool isPageLoad = false;
            for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
            {
                if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_CLUBHISTORYLIST)
                {
                    isPageLoad = TRUE;
                    break;
                }
            }
            
            if(isPageLoad == FALSE)
            {
                //////////////////////////////////////////////////////////////////////////////////////////
                xEventQueueNet.code[xEventQueueNet.totalNum] = xClubHistory.rowNum;
                xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xClubHistory.pageNum;
                xClubHistory.pageNum++;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBHISTORYLIST, TRUE);
                //////////////////////////////////////////////////////////////////////////////////////////
            }
        }
                
        setFontSizeORI(15);
        gSetColor(255, 255, 255);
        setClubHistoryText(strTempS,i);
        gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
        setFontSize(11);
    }
    gSetClip(false, 0, py+80, 440, 100);
    
    
    //회원탭
    for(int k=0;k<3;k++)
    {
        subTemp[XPOS] = px-36+(126*k);
        subTemp[YPOS] = py-211;
        
        if(xClubLobby.isMaster == false && k==2)
            continue;
        
        
        if(xClubLobby.selectTab == k)
            drawImage(&imgClubLobbyTab[k], subTemp[XPOS], subTemp[YPOS], 0, imgClubLobbyTab[k].h/2, imgClubLobbyTab[k].w, imgClubLobbyTab[k].h/2, VH);
        else
            drawImage(&imgClubLobbyTab[k], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubLobbyTab[k].w, imgClubLobbyTab[k].h/2, VH);
        
        xClubLobby.xTouchTab[k].wPos = imgClubLobbyTab[k].w;
        xClubLobby.xTouchTab[k].hPos = imgClubLobbyTab[k].h/2;
        xClubLobby.xTouchTab[k].xPos = subTemp[XPOS]-xClubLobby.xTouchTab[k].wPos/2;
        xClubLobby.xTouchTab[k].yPos = subTemp[YPOS]-xClubLobby.xTouchTab[k].hPos/2;
    }
    
    if(xClubLobby.selectTab == CLUBLOBBYTAB_TYPE_MEMBER)
    {
        drawImage(&imgClubLobby[1], px+200, py-172, 0, 0, imgClubLobby[1].w, imgClubLobby[1].h/2, VH);
        xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum = xClub.totalMember;
        xClubLobby.xDragScroll[xClubLobby.selectTab].posGab = 72;
        xClubLobby.xDragScroll[xClubLobby.selectTab].endPos = -(((xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum-5)*xClubLobby.xDragScroll[xClubLobby.selectTab].posGab));
        if(xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum < 5)
            xClubLobby.xDragScroll[xClubLobby.selectTab].endPos = 0;
        else
            xClubLobby.xDragScroll[xClubLobby.selectTab].endPos -= 35;
    }
    else if(xClubLobby.selectTab == CLUBLOBBYTAB_TYPE_CLUBBOOK)
    {
        if(0 >= xClubBook.pageNum)
        {
            bool isPageLoad = false;
            for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
            {
                if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_CLUBBOOKLIST)
                {
                    isPageLoad = TRUE;
                    break;
                }
            }
            
            if(isPageLoad == FALSE)
            {
                xEventQueueNet.code[xEventQueueNet.totalNum] = xClubBook.rowNum;
                xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xClubBook.pageNum;
                xClubBook.pageNum++;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBBOOKLIST, TRUE);
                //////////////////////////////////////////////////////////////////////////////////////////
            }
        }
        
        
        drawImage(&imgClubBook[0], px+220, py-163, 0, 0, imgClubBook[0].w, imgClubBook[0].h, VH);
        xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum = xClubBook.totalNum;
        xClubLobby.xDragScroll[xClubLobby.selectTab].posGab = 94;
        xClubLobby.xDragScroll[xClubLobby.selectTab].endPos = -(((xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum-4)*xClubLobby.xDragScroll[xClubLobby.selectTab].posGab));
        if(xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum < 4)
            xClubLobby.xDragScroll[xClubLobby.selectTab].endPos = 0;
        else
            xClubLobby.xDragScroll[xClubLobby.selectTab].endPos -= 66;
        
        gSetColor(255, 255, 255);
        setFontSizeORI(18);
        gDrawString(px+168, py-165, "내용을 입력하세요(최대50자)", VH);
        setFontSize(11);
        
        
        xClubBook.xTouchText.wPos = 500;
        xClubBook.xTouchText.hPos = 40;
        xClubBook.xTouchText.xPos = px+168-xClubBook.xTouchText.wPos/2;
        xClubBook.xTouchText.yPos = py-165-xClubBook.xTouchText.hPos/2;
        
        
        xClubBook.xTouchSend.wPos = 90;
        xClubBook.xTouchSend.hPos = 40;
        xClubBook.xTouchSend.xPos = px+486-xClubBook.xTouchSend.wPos/2;
        xClubBook.xTouchSend.yPos = py-165-xClubBook.xTouchSend.hPos/2;
        
        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xClubBook.xTouchText.xPos, xClubBook.xTouchText.yPos, xClubBook.xTouchText.wPos, xClubBook.xTouchText.hPos);
        fillRect(xClubBook.xTouchSend.xPos, xClubBook.xTouchSend.yPos, xClubBook.xTouchSend.wPos, xClubBook.xTouchSend.hPos);
        setAlpha(ALPHA_MAX);
        */
    }
    else if(xClubLobby.selectTab == CLUBLOBBYTAB_TYPE_JOIN)
    {
        drawImage(&imgClubLobby[1], px+200, py-172, 0, imgClubLobby[1].h/2, imgClubLobby[1].w, imgClubLobby[1].h/2, VH);
        xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum = xClubJoinMember.totalNum;
        xClubLobby.xDragScroll[xClubLobby.selectTab].posGab = 72;
        xClubLobby.xDragScroll[xClubLobby.selectTab].endPos = -(((xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum-5)*xClubLobby.xDragScroll[xClubLobby.selectTab].posGab));
        if(xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum < 5)
            xClubLobby.xDragScroll[xClubLobby.selectTab].endPos = 0;
        else
            xClubLobby.xDragScroll[xClubLobby.selectTab].endPos -= 35;
    }
    
        
    iMax = xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum;
    dragScrollPrc(&xClubLobby.xDragScroll[xClubLobby.selectTab],1,FALSE);
        
    xClubLobby.xTouchListBg.wPos = 700;
    xClubLobby.xTouchListBg.hPos = 400;
    xClubLobby.xTouchListBg.xPos = px-90;
    xClubLobby.xTouchListBg.yPos = py-170;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xClubLobby.xTouchListBg.xPos,xClubLobby.xTouchListBg.yPos,xClubLobby.xTouchListBg.wPos,xClubLobby.xTouchListBg.hPos);
    setAlpha(ALPHA_MAX);
     */

        
    
    
    switch(xClubLobby.selectTab)
    {
    case CLUBLOBBYTAB_TYPE_MEMBER:
    case CLUBLOBBYTAB_TYPE_JOIN:
        gSetClip(true, px-100, py-160, 700, 340);
        break;
    case CLUBLOBBYTAB_TYPE_CLUBBOOK:
        gSetClip(true, px-100, py-144, 700, 324);
        break;
    }
    
    
    for(int i=0;i<iMax;i++)
    {
        int pos = xClubLobby.xDragScroll[xClubLobby.selectTab].pos+(xClubLobby.xDragScroll[xClubLobby.selectTab].posGab*i);
        
        
        switch(xClubLobby.selectTab)
        {
        case CLUBLOBBYTAB_TYPE_MEMBER:
        case CLUBLOBBYTAB_TYPE_JOIN:
            subTemp[XPOS] = px+224;
            subTemp[YPOS] = py-117+pos;
            break;
        case CLUBLOBBYTAB_TYPE_CLUBBOOK:
            subTemp[XPOS] = px+220;
            subTemp[YPOS] = py-92+pos;
            break;
        }
        
        
        
        if(subTemp[YPOS] < -xClubLobby.xDragScroll[xClubLobby.selectTab].posGab || subTemp[YPOS] > lcdH+xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)
            continue;
        
        
        int friendDataSlot = 0;
        int loginTime = 0;
        int day;
        int hh;
        int mm;
        switch(xClubLobby.selectTab)
        {
        case CLUBLOBBYTAB_TYPE_MEMBER:
            friendDataSlot = getFriendSlot(xClub.xMember[i].userKey);
            drawFriendProfile(subTemp[XPOS]-289, subTemp[YPOS]-2, xFriendData[friendDataSlot].userNum, 60);
            drawImage(&imgClubLobby[3], subTemp[XPOS], subTemp[YPOS]+3, 0, 0, imgClubLobby[3].w, imgClubLobby[3].h, VH);
                
            
            if(xClub.xMy.masterKey == xClub.xMember[i].userKey)
                drawImage(&imgClubLobby[8], subTemp[XPOS]-311, subTemp[YPOS]-27, 0, 0, imgClubLobby[8].w, imgClubLobby[8].h, VH);
            

            //레벨 닉네임
            gSetColor(255, 255, 255);
            setFontSizeORI(18);
            sprintf(strTempS, "LV%d %s",xFriendData[friendDataSlot].lv,xFriendData[friendDataSlot].strNickName);
            gDrawString(subTemp[XPOS]-180, subTemp[YPOS], strTempS, VH);
            setFontSize(11);
                
            //기여도
            gSetColor(242, 181, 213);
            setFontSizeORI(15);
            setCommaNum(strTempS, xClub.xMember[i].totalContribution);
            gDrawString(subTemp[XPOS]-12, subTemp[YPOS], strTempS, VH);
                
            //시간
            gSetColor(242, 181, 213);
            loginTime = xClub.xMember[i].loginTime;
            //시
            hh = loginTime/60/60;
            day = hh/24;
            //분
            mm = loginTime/60%60;
            
            if(day > 0)
                sprintf(strTempS, "%d일전",day);
            else if(hh > 0)
                sprintf(strTempS, "%d시간전",hh);
            else
                sprintf(strTempS, "%d분전",mm+1);
            gDrawString(subTemp[XPOS]+119, subTemp[YPOS], strTempS, VH);
            setFontSize(11);
            
            //버튼
            if(xClubLobby.isMaster == true)
            {
                if(xClub.xMember[i].userKey != xNetData.userNum)
                {
                    drawImage(&imgMasterUi[4], subTemp[XPOS]+220, subTemp[YPOS], 0, 0, imgMasterUi[4].w, imgMasterUi[4].h, VH);
                    drawImage(&imgMasterUi[5], subTemp[XPOS]+280, subTemp[YPOS], 0, 0, imgMasterUi[5].w, imgMasterUi[5].h, VH);
                }
            }
            break;
        case CLUBLOBBYTAB_TYPE_CLUBBOOK:
            if((i+1)/10 >= xClubBook.pageNum)
            {
                bool isPageLoad = false;
                for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
                {
                    if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_CLUBBOOKLIST)
                    {
                        isPageLoad = TRUE;
                        break;
                    }
                }
                
                if(isPageLoad == FALSE)
                {
                    xEventQueueNet.code[xEventQueueNet.totalNum] = xClubBook.rowNum;
                    xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xClubBook.pageNum;
                    xClubBook.pageNum++;
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBBOOKLIST, TRUE);
                    //////////////////////////////////////////////////////////////////////////////////////////
                }
            }
                
            friendDataSlot = getFriendSlot(xClubBook.xSlot[i].userKey);
            drawFriendProfile(subTemp[XPOS]-258, subTemp[YPOS], xFriendData[friendDataSlot].userNum, 70);
                
            //나일경우
            if(xFriendData[friendDataSlot].userNum == xNetData.userNum)
            {
                drawImage(&imgClubBook[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubBook[1].w, imgClubBook[1].h, VH);
                gSetColor(155, 212, 195);
            }
            //길드원
            else
            {
                drawImage(&imgClubBook[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubBook[2].w, imgClubBook[2].h, VH);
                gSetColor(212, 155, 184);
            }
            
            if(xClubLobby.isMaster == true || xFriendData[friendDataSlot].userNum == xNetData.userNum)
            {
                drawPacker(imgFriendDelBtn, subTemp[XPOS]+300, subTemp[YPOS]-30, 0, 0, imgW(imgFriendDelBtn), imgH(imgFriendDelBtn), VH);
            }
                
            setFontSizeORI(15);
            sprintf(strTempS, "%s(Lv.%d)",xFriendData[friendDataSlot].strNickName,xFriendData[friendDataSlot].lv);
            gDrawString(subTemp[XPOS]-205, subTemp[YPOS]-27, strTempS, VL);
            
            gDrawString(subTemp[XPOS]+275, subTemp[YPOS]-27, xClubBook.xSlot[i].strDate, VR);
            setFontSize(11);
            
            gSetColor(255, 255, 255);
            setFontSizeORI(18);
                
            setPopupStringLine(xClubBook.xSlot[i].strText,26);
            {
            int fontGab = 22;
            for(int li=0;li<xPopup.totalLine;li++)
            {
                gDrawString(subTemp[XPOS]-205,subTemp[YPOS]+10-((fontGab*(xPopup.totalLine-1))/2)+(fontGab*li), xPopup.strTextLine[li], VL);
            }
            }
            setFontSize(11);
            break;
        case CLUBLOBBYTAB_TYPE_JOIN:
            friendDataSlot = getFriendSlot(xClubJoinMember.xJoinMember[i].userKey);
            drawFriendProfile(subTemp[XPOS]-289, subTemp[YPOS]-2, xFriendData[friendDataSlot].userNum, 60);
            drawImage(&imgClubLobby[3], subTemp[XPOS], subTemp[YPOS]+3, 0, 0, imgClubLobby[3].w, imgClubLobby[3].h, VH);
                
            //레벨 닉네임
            gSetColor(255, 255, 255);
            setFontSizeORI(18);
            sprintf(strTempS, "LV%d %s",xFriendData[friendDataSlot].lv,xFriendData[friendDataSlot].strNickName);
            gDrawString(subTemp[XPOS]-180, subTemp[YPOS], strTempS, VH);
            setFontSize(11);
                
            //시간
            gSetColor(242, 181, 213);
            setFontSizeORI(18);
            gDrawString(subTemp[XPOS]+70, subTemp[YPOS], xClubJoinMember.xJoinMember[i].strJoinApplyTime, VH);
            setFontSize(11);
            drawImage(&imgMasterUi[6], subTemp[XPOS]+245, subTemp[YPOS], 0, 0, imgMasterUi[6].w, imgMasterUi[6].h, VH);
            break;
        }
    }
    gSetClip(false, px-100, py-140, 600, 336);
            
         
            
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xClubLobby.xDragScroll[xClubLobby.selectTab].selectNum = (-xClubLobby.xDragScroll[xClubLobby.selectTab].pos/xClubLobby.xDragScroll[xClubLobby.selectTab].posGab);
    
    if(xClubLobby.xDragScroll[xClubLobby.selectTab].selectNum < 0)
        xClubLobby.xDragScroll[xClubLobby.selectTab].selectNum = 0;
        
    for(int i=0;i<5;i++)
    {
        switch(xClubLobby.selectTab)
        {
        case CLUBLOBBYTAB_TYPE_MEMBER:
        case CLUBLOBBYTAB_TYPE_JOIN:
            subTemp[XPOS] = px+224;
            subTemp[YPOS] = py-117+(i*xClubLobby.xDragScroll[xClubLobby.selectTab].posGab);
            break;
        case CLUBLOBBYTAB_TYPE_CLUBBOOK:
            subTemp[XPOS] = px+220;
            subTemp[YPOS] = py-92+(i*xClubLobby.xDragScroll[xClubLobby.selectTab].posGab);
            break;
        }
        
        switch(xClubLobby.selectTab)
        {
        case CLUBLOBBYTAB_TYPE_MEMBER:
        case CLUBLOBBYTAB_TYPE_JOIN:
            xClubLobby.xTouchMemberPhoto[i].wPos = 60;
            xClubLobby.xTouchMemberPhoto[i].hPos = 60;
            xClubLobby.xTouchMemberPhoto[i].xPos = subTemp[XPOS]-289-xClubLobby.xTouchMemberPhoto[i].wPos/2;
            xClubLobby.xTouchMemberPhoto[i].yPos = subTemp[YPOS]+((xClubLobby.xDragScroll[xClubLobby.selectTab].posGab <= xClubLobby.xDragScroll[xClubLobby.selectTab].pos ? xClubLobby.xDragScroll[xClubLobby.selectTab].pos:(xClubLobby.xDragScroll[xClubLobby.selectTab].pos%xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)))- xClubLobby.xTouchMemberPhoto[i].hPos/2;
            break;
        case CLUBLOBBYTAB_TYPE_CLUBBOOK:
            xClubLobby.xTouchMemberPhoto[i].wPos = 60;
            xClubLobby.xTouchMemberPhoto[i].hPos = 60;
            xClubLobby.xTouchMemberPhoto[i].xPos = subTemp[XPOS]-258-xClubLobby.xTouchMemberPhoto[i].wPos/2;
            xClubLobby.xTouchMemberPhoto[i].yPos = subTemp[YPOS]+((xClubLobby.xDragScroll[xClubLobby.selectTab].posGab <= xClubLobby.xDragScroll[xClubLobby.selectTab].pos ? xClubLobby.xDragScroll[xClubLobby.selectTab].pos:(xClubLobby.xDragScroll[xClubLobby.selectTab].pos%xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)))- xClubLobby.xTouchMemberPhoto[i].hPos/2;
            break;
        }
        
        switch(xClubLobby.selectTab)
        {
        case CLUBLOBBYTAB_TYPE_MEMBER:
            xClubLobby.xTouchMemberBtn0[i].wPos = imgMasterUi[4].w;
            xClubLobby.xTouchMemberBtn0[i].hPos = imgMasterUi[4].h;
            xClubLobby.xTouchMemberBtn0[i].xPos = subTemp[XPOS]+220 - xClubLobby.xTouchMemberBtn0[i].wPos/2;
            xClubLobby.xTouchMemberBtn0[i].yPos = subTemp[YPOS] +((xClubLobby.xDragScroll[xClubLobby.selectTab].posGab <= xClubLobby.xDragScroll[xClubLobby.selectTab].pos ? xClubLobby.xDragScroll[xClubLobby.selectTab].pos:(xClubLobby.xDragScroll[xClubLobby.selectTab].pos%xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)))- xClubLobby.xTouchMemberBtn0[i].hPos/2;
            
            xClubLobby.xTouchMemberBtn1[i].wPos = imgMasterUi[5].w;
            xClubLobby.xTouchMemberBtn1[i].hPos = imgMasterUi[5].h;
            xClubLobby.xTouchMemberBtn1[i].xPos = subTemp[XPOS]+280 - xClubLobby.xTouchMemberBtn1[i].wPos/2;
            xClubLobby.xTouchMemberBtn1[i].yPos = subTemp[YPOS] +((xClubLobby.xDragScroll[xClubLobby.selectTab].posGab <= xClubLobby.xDragScroll[xClubLobby.selectTab].pos ? xClubLobby.xDragScroll[xClubLobby.selectTab].pos:(xClubLobby.xDragScroll[xClubLobby.selectTab].pos%xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)))- xClubLobby.xTouchMemberBtn1[i].hPos/2;
            break;
        case CLUBLOBBYTAB_TYPE_JOIN:
            xClubLobby.xTouchMemberBtn0[i].wPos = 50;
            xClubLobby.xTouchMemberBtn0[i].hPos = 50;
            xClubLobby.xTouchMemberBtn0[i].xPos = subTemp[XPOS]+245-30 - xClubLobby.xTouchMemberBtn0[i].wPos/2;
            xClubLobby.xTouchMemberBtn0[i].yPos = subTemp[YPOS] +((xClubLobby.xDragScroll[xClubLobby.selectTab].posGab <= xClubLobby.xDragScroll[xClubLobby.selectTab].pos ? xClubLobby.xDragScroll[xClubLobby.selectTab].pos:(xClubLobby.xDragScroll[xClubLobby.selectTab].pos%xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)))- xClubLobby.xTouchMemberBtn0[i].hPos/2;
            
            xClubLobby.xTouchMemberBtn1[i].wPos = 50;
            xClubLobby.xTouchMemberBtn1[i].hPos = 50;
            xClubLobby.xTouchMemberBtn1[i].xPos = subTemp[XPOS]+245+30 - xClubLobby.xTouchMemberBtn1[i].wPos/2;
            xClubLobby.xTouchMemberBtn1[i].yPos = subTemp[YPOS] +((xClubLobby.xDragScroll[xClubLobby.selectTab].posGab <= xClubLobby.xDragScroll[xClubLobby.selectTab].pos ? xClubLobby.xDragScroll[xClubLobby.selectTab].pos:(xClubLobby.xDragScroll[xClubLobby.selectTab].pos%xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)))- xClubLobby.xTouchMemberBtn1[i].hPos/2;
            break;
        case CLUBLOBBYTAB_TYPE_CLUBBOOK:
            xClubLobby.xTouchMemberBtn0[i].wPos = 40;
            xClubLobby.xTouchMemberBtn0[i].hPos = 40;
            xClubLobby.xTouchMemberBtn0[i].xPos = subTemp[XPOS]+300 - xClubLobby.xTouchMemberBtn0[i].wPos/2;
            xClubLobby.xTouchMemberBtn0[i].yPos = subTemp[YPOS]-30 +((xClubLobby.xDragScroll[xClubLobby.selectTab].posGab <= xClubLobby.xDragScroll[xClubLobby.selectTab].pos ? xClubLobby.xDragScroll[xClubLobby.selectTab].pos:(xClubLobby.xDragScroll[xClubLobby.selectTab].pos%xClubLobby.xDragScroll[xClubLobby.selectTab].posGab)))- xClubLobby.xTouchMemberBtn0[i].hPos/2;
            break;
        }

        /*
        gSetColor(255, 0, 0);
        setAlpha(100);
        fillRect(xClubLobby.xTouchMemberPhoto[i].xPos, xClubLobby.xTouchMemberPhoto[i].yPos, xClubLobby.xTouchMemberPhoto[i].wPos, xClubLobby.xTouchMemberPhoto[i].hPos);
        fillRect(xClubLobby.xTouchMemberBtn0[i].xPos, xClubLobby.xTouchMemberBtn0[i].yPos, xClubLobby.xTouchMemberBtn0[i].wPos, xClubLobby.xTouchMemberBtn0[i].hPos);
        fillRect(xClubLobby.xTouchMemberBtn1[i].xPos, xClubLobby.xTouchMemberBtn1[i].yPos, xClubLobby.xTouchMemberBtn1[i].wPos, xClubLobby.xTouchMemberBtn1[i].hPos);
        setAlpha(ALPHA_MAX);
        */
        
        subTemp[XPOS]=px-470;
        subTemp[YPOS]=py-173;
        
        drawImage(&imgClubLobby[10], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubLobby[10].w, imgClubLobby[10].h, VH);
        
        
        subTemp[XPOS]=px-527;
        subTemp[YPOS]=py-227;
        
        xClubLobby.xTouchChangeIcon.wPos=70;
        xClubLobby.xTouchChangeIcon.hPos=70;
        xClubLobby.xTouchChangeIcon.xPos=subTemp[XPOS]-imgClubLobby[10].w/2;
        xClubLobby.xTouchChangeIcon.yPos=subTemp[YPOS]-imgClubLobby[10].h/2;
   }
}


void keyClubLobby(int type, int param1, int param2)
{
    
    if(xClubLobby.selectMenu == CLUBLOBBY_MENU_FASHIONWEEK&&xClubLobby.state!=CLUBLOBBY_STATE_MODIFYTEXT)
    {
        if(xFashionWeek.isNet_Dress == true || xFashionWeek.isNet_FittingList == true || xFashionWeek.isNet_FittingUpdate == true || xFashionWeek.isNet_PangStart == true || xFashionWeek.isNet_Exp == true || xFashionWeek.isNet_Score == true)
        {
            
        }
        else
            keyFashionWeekLobby(type, param1, param2);
    }
    else if(xClubLobby.selectMenu == CLUBLOBBY_MENU_SHOP&&xClubLobby.state!=CLUBLOBBY_STATE_MODIFYTEXT)
        keyClubShop(type, param1, param2);
    else
    {
        if(xClubLobby.state == CLUBLOBBY_STATE_CHANGEICON&&xClubLobby.state!=CLUBLOBBY_STATE_MODIFYTEXT)
        {
            keyChangeClubIcon(type, param1, param2);
        }
        else if(xClubLobby.state == CLUBLOBBY_STATE_DONATION&&xClubLobby.state!=CLUBLOBBY_STATE_MODIFYTEXT)
        {
            keyClubDonation(type, param1, param2);
        }
        else if(xClubLobby.state == CLUBLOBBY_STATE_PLAY&&xClubLobby.state!=CLUBLOBBY_STATE_MODIFYTEXT)
        {
            if(type == MH_KEY_PRESSEVENT)
            {
                bool isTab = false;
                int selectTab = 0;
                for(int k=0;k<3;k++)
                {
                    if(touchCheck(&xClubLobby.xTouchTab[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        isTab = true;
                        selectTab = k;
                        break;
                    }
                }
                
                
                bool isJoinType = false;
                int selectJoinType = 0;
                for(int k=0;k<2;k++)
                {
                    if(touchCheck(&xClubLobby.xTouchJoinType[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        isJoinType = true;
                        selectJoinType = k;
                        break;
                    }
                }
                
                
                bool isNoticeTab = false;
                int selectNoticeTab = 0;
                for(int k=0;k<CLUBLOBBYNOTICETABMAX;k++)
                {
                    if(touchCheck(&xClubLobby.xTouchNotice[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        isNoticeTab = true;
                        selectNoticeTab = k;
                        break;
                    }
                }
                
                
                bool isClubMenu = false;
                int selectClubMenu = 0;
                for(int k=0;k<CLUBMENUMAX;k++)
                {
                    if(touchCheck(&xClubLobby.xTouchClubMenu[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        isClubMenu = true;
                        selectClubMenu = k;
                        break;
                    }
                }
                if(isClubMenu == true && xClubLobby.selectMenu != selectClubMenu)
                {
                    switch(selectClubMenu)
                    {
                    case CLUBLOBBY_MENU_MAIN:
                        xClubLobby.selectMenu = selectClubMenu;
                        break;
                    case CLUBLOBBY_MENU_FASHIONWEEK:
                            
                        if(xFashionWeek.isOpen == false)
                        {
                            setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            sprintf(xPopup.strText, "임시 잠금상태 입니다.");
                        }
                        else
                        {
                            xClubLobby.selectMenu = selectClubMenu;
                            initFashionWeekLobby();
                        }
                        break;
                    case CLUBLOBBY_MENU_SHOP:
                        if(xClubShop.OnOff==1)
                        {
//                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
//                        sprintf(xPopup.strText, "업데이트 예정 입니다.");
                            xClubLobby.selectMenu = selectClubMenu;
                            initClubShop();
                            clubShopFreeLoad(true);
                        }
                        else
                        {
                            setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            sprintf(xPopup.strText, "임시 잠금상태 입니다.");
                        }
                        break;
                    default:
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "업데이트 예정 입니다.");
                        break;
                    }

                    
                    
                    
                    
                    
                    
                }
                else if(xClubLobby.isMaster == true && isJoinType == true)
                {
                    if(xClub.xMy.joinType != selectJoinType)
                    {
                        playSnd(SND_MENU_OK);
                        xWorldMap.isKeyReturn = TRUE;
                        
                        xClub.xMy.joinType = selectJoinType;
                        /////////////////////////////////////////
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETCLUBJOINTYPE, TRUE);
                        /////////////////////////////////////////
                    }
                }
                else if(xClubLobby.isMaster == true && touchCheck(&xClubLobby.xTouchNoticeEdit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xClubLobby.state=CLUBLOBBY_STATE_MODIFYTEXT;
                    if(xClubLobby.selectNoticeTab == 0)
                        setTextField(TEXTBOX_TYPE_CLUBLOBBYNOTICE, lcdW/2, lcdH+999, 200, 25);
                    else if(xClubLobby.selectNoticeTab == 1)
                        setTextField(TEXTBOX_TYPE_CLUBLOBBYJOININFO, lcdW/2, lcdH+999, 200, 25);
                }
                else if(isNoticeTab == true)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    xClubLobby.selectNoticeTab = selectNoticeTab;
                }
                else if(isTab == true)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    if(xClubLobby.isMaster == false && selectTab==2)
                    {
                        
                    }
                    else
                    {
                    
                        xClubLobby.selectTab = selectTab;
                        
                        
                        switch(xClubLobby.selectTab)
                        {
                        case CLUBLOBBYTAB_TYPE_CLUBBOOK:
                            xClubBook.pageNum = 0;
                            xClubBook.rowNum = 0;
                            xClubBook.totalNum = 0;
                            break;
                        }
                    
                    }
                    
                    
                }
                else if(xClubLobby.selectTab == CLUBLOBBYTAB_TYPE_CLUBBOOK
                        && (touchCheck(&xClubBook.xTouchText) == TRUE || touchCheck(&xClubBook.xTouchSend) == TRUE)
                        && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    setTextField(TEXTBOX_TYPE_CLUBBOOK, lcdW/2, lcdH+999, 200, 25);
                }
                else if(touchCheck(&xClubLobby.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    
                    clubLobbyFreeLoad(false);
                    fashionWeekFreeLoad(false);
                    xWorldMap.state = WORLDMAP_STATE_PLAY;
                }
                else if(touchCheck(&xClubLobby.xTouchUnReg) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    
                    
                    if(xClub.xMy.memberNow > 1 && xClubLobby.isMaster == true)
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "클럽마스터는 탈퇴하실수 없습니다.\n위임후 탈퇴가 가능합니다.");
                    }
                    else
                    {
                        
                        setPopup(POPUP_CLUBUNREGYESNO, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    }
                }
                else if(touchCheck(&xClubLobby.xTouchClubDonate)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
                {
                    xClubLobby.state=CLUBLOBBY_STATE_DONATION;
                    initClubDonation();
                    clubDonationFreeLoad(true);
                }
                else if(touchCheck(&xClubLobby.xTouchChangeIcon)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
                {
                    xClubLobby.state = CLUBLOBBY_STATE_CHANGEICON;
                    initChangeClubIcon();
                    changeClubIconFreeLoad(true);
                }
                else
                {
                    if(touchType == USER_POINT_PRESS_EVENT)
                    {
                        xClubLobby.selectScroll = 0;
                        
                        if(touchCheck(&xClubLobby.xTouchHistoryBg) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                            xClubLobby.selectScroll = 1;
                        else if(touchCheck(&xClubLobby.xTouchListBg) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                            xClubLobby.selectScroll = 2;
                    }
                    
                    if(xClubLobby.selectScroll == 1)
                        dragScrollKeyPrc(&xClubLobby.xDragScrollHistory,2);
                    else if(xClubLobby.selectScroll == 2)
                        dragScrollKeyPrc(&xClubLobby.xDragScroll[xClubLobby.selectTab],2);
                }
            }
            else if(type == MH_KEY_RELEASEEVENT)
            {
                if(xClubLobby.selectScroll == 1 && xClubLobby.xDragScrollHistory.touchXposBefore != DONT)
                {
                    dragScrollKeyPrc(&xClubLobby.xDragScrollHistory,3);
                }
                else if(xClubLobby.selectScroll == 2 && xClubLobby.xDragScroll[xClubLobby.selectTab].touchXposBefore != DONT)
                {
                    dragScrollKeyPrc(&xClubLobby.xDragScroll[xClubLobby.selectTab],3);
                }
                else if(xClubLobby.selectScroll == 2)
                {
                    
                    bool isBtn0 = false;
                    int selectBtn0 = 0;
                    
                    for(int k=0;k<5;k++)
                    {
                        if(touchCheck(&xClubLobby.xTouchMemberBtn0[k]) == TRUE)
                        {
                            isBtn0 = true;
                            selectBtn0 = k;
                            break;
                        }
                    }
                    
                    int selectBtn0Temp=0;
                    if(isBtn0 == true)
                    {
                        selectBtn0Temp = selectBtn0+(xClubLobby.xDragScroll[xClubLobby.selectTab].selectNum);
                    }
                    
                    if(selectBtn0Temp < 0 || selectBtn0Temp >= xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum)
                        isBtn0 = false;
                    
                    
                    bool isBtn1 = false;
                    int selectBtn1 = 0;
                    
                    for(int k=0;k<5;k++)
                    {
                        if(touchCheck(&xClubLobby.xTouchMemberBtn1[k]) == TRUE)
                        {
                            isBtn1 = true;
                            selectBtn1 = k;
                            break;
                        }
                    }
                    
                    int selectBtn1Temp=0;
                    if(isBtn1 == true)
                    {
                        selectBtn1Temp = selectBtn1+(xClubLobby.xDragScroll[xClubLobby.selectTab].selectNum);
                    }
                    
                    if(selectBtn1Temp < 0 || selectBtn1Temp >= xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum)
                        isBtn1 = false;
                    
                    bool isPhoto = false;
                    int selectPhoto = 0;
                    
                    for(int k=0;k<5;k++)
                    {
                        if(touchCheck(&xClubLobby.xTouchMemberPhoto[k]) == TRUE)
                        {
                            isPhoto = true;
                            selectPhoto = k;
                            break;
                        }
                    }
                    
                    int selectPhotoTemp=0;
                    if(isPhoto == true)
                    {
                        selectPhotoTemp = selectPhoto+(xClubLobby.xDragScroll[xClubLobby.selectTab].selectNum);
                    }
                    
                    if(selectPhotoTemp < 0 || selectPhotoTemp >= xClubLobby.xDragScroll[xClubLobby.selectTab].totalNum)
                        isPhoto = false;
                    
                    
                    if(xClubLobby.selectTab == CLUBLOBBYTAB_TYPE_MEMBER)
                    {
                        
                        if(xClubLobby.isMaster == false)
                        {
                            isBtn0 = false;
                            isBtn1 = false;
                            
                        }
                        
                        if(isPhoto == true)
                        {
                            if(xClub.xMember[selectPhotoTemp].userKey != xNetData.userNum)
                            {
                                xWorldMap.isMiniProfile = TRUE;
                                xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
                                xMiniProfile.friendDataSlotNum = getFriendSlot(xClub.xMember[selectPhotoTemp].userKey);
                                mailFreeLoad(TRUE);
                                /////////////////////////////////////////
                                xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
                                /////////////////////////////////////////
                            }
                        }
                        else if(isBtn0 == true)
                        {
                            if(xClub.xMember[selectBtn0Temp].userKey != xNetData.userNum)
                            {
                                xClubLobby.selectSlot = selectBtn0Temp;
                                playSnd(SND_MENU_OK);
                                setPopup(POPUP_CLUBMASTERYESNO, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            }
                        }
                        else if(isBtn1 == true)
                        {
                            if(xClub.xMember[selectBtn1Temp].userKey != xNetData.userNum)
                            {
                                xClubLobby.selectSlot = selectBtn1Temp;
                                playSnd(SND_MENU_OK);
                                setPopup(POPUP_CLUBFORCEOUTYESNO, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            }
                        }
                    }
                    else if(xClubLobby.selectTab == CLUBLOBBYTAB_TYPE_CLUBBOOK)
                    {
                        if(isPhoto == true)
                        {
                            if(xClubBook.xSlot[selectPhotoTemp].userKey != xNetData.userNum)
                            {
                                
                                xWorldMap.isMiniProfile = TRUE;
                                xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
                                xMiniProfile.friendDataSlotNum = getFriendSlot(xClubBook.xSlot[selectPhotoTemp].userKey);
                                mailFreeLoad(TRUE);
                                /////////////////////////////////////////
                                xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
                                /////////////////////////////////////////
                            }
                        }
                        else if(isBtn0 == true)
                        {
                            playSnd(SND_MENU_OK);
                            if(xClubBook.xSlot[selectBtn0Temp].userKey == xNetData.userNum || xClubLobby.isMaster == true)
                            {
                            
                                xClubBook.selectSlot = selectBtn0Temp;
                                setPopup(POPUP_CLUBBOOKDEL, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            }
                        }
                    }
                    else if(xClubLobby.selectTab == CLUBLOBBYTAB_TYPE_JOIN)
                    {
                        if(xClubLobby.isMaster == false)
                        {
                            isBtn0 = false;
                            isBtn1 = false;
                            
                        }
                        
                        
                        if(isPhoto == true)
                        {
                            if(xClubJoinMember.xJoinMember[selectPhotoTemp].userKey != xNetData.userNum)
                            {
                                
                                
                                
                                xWorldMap.isMiniProfile = TRUE;
                                xMiniProfile.state = MINIPROFILE_STATE_PROFILE;
                                xMiniProfile.friendDataSlotNum = getFriendSlot(xClubJoinMember.xJoinMember[selectPhotoTemp].userKey);
                                mailFreeLoad(TRUE);
                                /////////////////////////////////////////
                                xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xMiniProfile.friendDataSlotNum].userNum;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MINIPROFILE, TRUE);
                                /////////////////////////////////////////
                            }
                        }
                        else if(isBtn0 == true)
                        {
                            playSnd(SND_MENU_OK);
                            xClubLobby.selectSlot = selectBtn0Temp;
                            
                            
                            if(xClub.xMy.memberNow>=xClub.xData[xClub.xMy.clubLv].memberMax)
                            {
                                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                                sprintf(xPopup.strText, "클럽인원 제한을 초과하였습니다.");
                            }
                            else
                            {
                                xClubLobby.state = CLUBLOBBY_STATE_NET;
                                /////////////////////////////////////////
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBJOINACCEPT, TRUE);
                                /////////////////////////////////////////
                            }
                        }
                        else if(isBtn1 == true)
                        {
                            playSnd(SND_MENU_OK);
                            xClubLobby.selectSlot = selectBtn1Temp;
                            xClubLobby.state = CLUBLOBBY_STATE_NET;
                            /////////////////////////////////////////
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBJOINDEL, TRUE);
                            /////////////////////////////////////////
                        }
                    }
                }
                
                xClubLobby.xDragScrollHistory.touchXpos = DONT;
                xClubLobby.xDragScrollHistory.touchYpos = DONT;
                xClubLobby.xDragScrollHistory.touchXposBefore = DONT;
                xClubLobby.xDragScrollHistory.touchYposBefore = DONT;
                
                xClubLobby.xDragScroll[xClubLobby.selectTab].touchXpos = DONT;
                xClubLobby.xDragScroll[xClubLobby.selectTab].touchYpos = DONT;
                xClubLobby.xDragScroll[xClubLobby.selectTab].touchXposBefore = DONT;
                xClubLobby.xDragScroll[xClubLobby.selectTab].touchYposBefore = DONT;
            }
        }
    }
}

void drawClubUi(int x,int y)
{
    xWorldMapUi.xTouchClubMenu.wPos = imgClubUi[0].w;
    xWorldMapUi.xTouchClubMenu.hPos = imgClubUi[0].h;
    xWorldMapUi.xTouchClubMenu.xPos = x-xWorldMapUi.xTouchClubMenu.wPos/2;
    xWorldMapUi.xTouchClubMenu.yPos = y -xWorldMapUi.xTouchClubMenu.hPos/2;
    
    drawImage(&imgClubUi[0], x, y, 0, 0, imgClubUi[0].w, imgClubUi[0].h, VH);
}



void setClubHistoryText(char * strTemp,int slot)
{    
    int friendDataSlot = getFriendSlot(xClubHistory.xSlot[slot].userKey);
    int friendDataSlot2 = getFriendSlot(xClubHistory.xSlot[slot].ToUserKey);
    
    int num = 0;
    if(xClubHistory.xSlot[slot].type == 12)
        num = 1;
    
    char strFlowTime[64];
    int loginTime = xClubHistory.xSlot[slot].writeTime;
    //시
    int hh = loginTime/60/60;
    int day = hh/24;
    //분
    int mm = loginTime/60%60;
    
    if(day > 0)
        sprintf(strFlowTime, "%d일전",day);
    else if(hh > 0)
        sprintf(strFlowTime, "%d시간전",hh);
    else
        sprintf(strFlowTime, "%d분전",mm+1);

    
    
    
    
    
    
    int itemType = xClubHistory.xSlot[slot].value / 1000;
    int itemListNum = xClubHistory.xSlot[slot].value % 1000;
    
    
    
    
    
    
    //클럽활동내역 메시지들
    switch(xClubHistory.xSlot[slot].type)
    {
    case 0:sprintf(strTemp, "%s 클럽이 개설되었습니다.(%s)",xClub.xMy.strName,strFlowTime);break;
    case 1:sprintf(strTemp, "%s님이 클럽에 가입하셨습니다.(%s)",xFriendData[friendDataSlot].strNickName,strFlowTime);break;
    case 2:sprintf(strTemp, "%s님이 출석하셨습니다.(%s)",xFriendData[friendDataSlot].strNickName,strFlowTime);break;
    case 3:sprintf(strTemp, "%s님이 %d점을 획득하셨습니다.(%s)",xFriendData[friendDataSlot].strNickName,xClubHistory.xSlot[slot].value,strFlowTime);break;
    case 4:sprintf(strTemp, "%s님이 기부하여 %d포인트 증가하였습니다.(%s)",xFriendData[friendDataSlot].strNickName,xClubHistory.xSlot[slot].value,strFlowTime);break;
    case 5:sprintf(strTemp, "%s님이 클럽에서 탈퇴하셨습니다.(%s)",xFriendData[friendDataSlot].strNickName,strFlowTime);break;
    case 6:sprintf(strTemp, "%s님이 클럽마스터에의해 강제탈퇴되셨습니다.(%s)",xFriendData[friendDataSlot].strNickName,strFlowTime);break;
    case 7:sprintf(strTemp, "%s님이 클럽마스터 권한을 위임받으셨습니다.(%s)",xFriendData[friendDataSlot].strNickName,strFlowTime);break;
    case 8:sprintf(strTemp, "클럽레벨 %d 달성했습니다.(%s)",xClubHistory.xSlot[slot].value,strFlowTime);break;
    case 9:sprintf(strTemp, "%s 의상 제작을 완료했습니다.(%s)",xFashionData[itemType][itemListNum].strName,strFlowTime);break;
    case 10:sprintf(strTemp, "%s님이 길드최고 점수 %d를 달성했습니다.(%s)",xFriendData[friendDataSlot].strNickName,xClubHistory.xSlot[slot].value,strFlowTime);break;
    case 11:sprintf(strTemp, "클럽마스터님이 %s 아이템을 구입하셨습니다.(%s)", xClubShop.xData[itemListNum].strName, strFlowTime);break;
    case 12:sprintf(strTemp, "클럽마스터님이 %s 아이템을 %s님에게 선물하셨습니다.(%s)", xClubShop.xData[itemListNum].strName, xFriendData[friendDataSlot2].strNickName, strFlowTime);break;
    case 13:sprintf(strTemp, "%s님이 %s 아이템을 사용하셨습니다.(%s)", xFriendData[friendDataSlot].strNickName, xClubShop.xData[itemListNum].strName,strFlowTime);break;
    case 14:sprintf(strTemp, "%s님이 %s 아이템을 사용하여 허니팡 횟수가 증가하였습니다.(%s)",xFriendData[friendDataSlot].strNickName, xClubShop.xData[itemListNum].strName,strFlowTime);break;
    case 15:sprintf(strTemp, "클럽마스터가 클럽명을 변경하셨습니다.(%s)",strFlowTime);break;
    case 16:sprintf(strTemp, "클럽마스터가 클럽아이콘을 변경하셨습니다.(%s)",strFlowTime);break;
   
    }
}

void changeClubIconFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        loadImg("changeiconmain.png", &imgChangeClubIcon[0]);
        loadImg("selecticon.png", &imgChangeClubIcon[1]);
        loadImg("iconslot.png", &imgChangeClubIcon[2]);
    }
    else
    {
        freeImg(&imgChangeClubIcon[0]);
        freeImg(&imgChangeClubIcon[1]);
        freeImg(&imgChangeClubIcon[2]);
    }
}

void initChangeClubIcon()
{
    xChangeClubIcon.sortCount=0;
    
    for(int k=0;k<CLUBICONMAX;k++)
    {
        if(xClub.xIcon[k].isOpen==true)
        {
            xChangeClubIcon.memberCode[xChangeClubIcon.sortCount++]=k;
        }
    }
    for(int i=0;i<CLUBICONMAX;i++)
    {
        xChangeClubIcon.touched[i]=false;
    }
    xChangeClubIcon.isSlot=false;
    xChangeClubIcon.indexingcount=0;
}

void drawChangeClubIcon()
{
    int px = cx;
    int py = cy;
    drawBgFillRect();
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py;
    
    drawImage(&imgChangeClubIcon[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgChangeClubIcon[0].w, imgChangeClubIcon[0].h, VH);
    
    int iconDataslot=0;
    int pos=0;
    xChangeClubIcon.totalData=xChangeClubIcon.sortCount;
    xChangeClubIcon.xDragScroll.totalNum=xChangeClubIcon.totalData/6;
    xChangeClubIcon.xDragScroll.posGab = imgChangeClubIcon[2].w+4;//간격
    xChangeClubIcon.xDragScroll.endPos = -(((xChangeClubIcon.xDragScroll.totalNum-6)*xChangeClubIcon.xDragScroll.posGab));//보정
    
    if(xChangeClubIcon.xDragScroll.totalNum<6)
    {
        xChangeClubIcon.xDragScroll.endPos=0;
    }
    
    dragScrollPrc(&xChangeClubIcon.xDragScroll, 1, FALSE);
    
    subTemp[XPOS]=px-230;
    subTemp[YPOS]=py-120;
    
    
    gSetClip(true, subTemp[XPOS], subTemp[YPOS], 472, 255);
    for(int i=0;i<xChangeClubIcon.totalData;i++)
    {
        pos=xChangeClubIcon.xDragScroll.pos+(xChangeClubIcon.xDragScroll.posGab*(i/6));
        subTemp[XPOS]=px-188+((i%6)*xChangeClubIcon.xDragScroll.posGab);
        subTemp[YPOS]=py-120+pos + imgChangeClubIcon[2].h/2;
        
        if(subTemp[YPOS]<-xChangeClubIcon.xDragScroll.posGab)
            continue;
        if(subTemp[YPOS]>lcdH+xChangeClubIcon.xDragScroll.posGab)
            continue;
        
        drawImage(&imgChangeClubIcon[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgChangeClubIcon[2].w, imgChangeClubIcon[2].h, VH);
        int Index=xChangeClubIcon.memberCode[i];
        iconDataslot=xClub.xIcon[i].index;
        drawClubIcon(subTemp[XPOS], subTemp[YPOS], iconDataslot);
        
        if(xChangeClubIcon.isSlot==TRUE)
        {
            if(i==xChangeClubIcon.selectedNum)
            {
//                gSetColor(0, 0, 255);
//                setAlpha(100);
                //fillRect(xChangeClubIcon.xTouchSlot[i].xPos, xChangeClubIcon.xTouchSlot[i].yPos, xChangeClubIcon.xTouchSlot[i].wPos, xChangeClubIcon.xTouchSlot[i].hPos);
//                setAlpha(ALPHA_MAX);
                
                drawImage(&imgChangeClubIcon[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgChangeClubIcon[1].w, imgChangeClubIcon[1].h, VH);
            }
        }

    }
    gSetClip(false, subTemp[XPOS], subTemp[YPOS], 472, 255);
    xChangeClubIcon.xDragScroll.selectNum = (-xChangeClubIcon.xDragScroll.pos/xChangeClubIcon.xDragScroll.posGab);
    if(xChangeClubIcon.xDragScroll.selectNum < 0)
        xChangeClubIcon.xDragScroll.selectNum = 0;

    for(int i=0;i<xChangeClubIcon.totalData;i++)
    {
        subTemp[XPOS]=px-188+((i%6)*xChangeClubIcon.xDragScroll.posGab);
        subTemp[YPOS]=py-120+ imgChangeClubIcon[2].h/2+(xChangeClubIcon.xDragScroll.posGab*(i/6));
        
        xChangeClubIcon.xTouchSlot[i].wPos=imgChangeClubIcon[2].w;
        xChangeClubIcon.xTouchSlot[i].hPos=imgChangeClubIcon[2].h;
        xChangeClubIcon.xTouchSlot[i].xPos=subTemp[XPOS]-xChangeClubIcon.xTouchSlot[i].wPos/2;
        xChangeClubIcon.xTouchSlot[i].yPos = subTemp[YPOS]+((xChangeClubIcon.xDragScroll.posGab <= xChangeClubIcon.xDragScroll.pos ? xChangeClubIcon.xDragScroll.pos:(xChangeClubIcon.xDragScroll.pos%xChangeClubIcon.xDragScroll.posGab))) - xChangeClubIcon.xTouchSlot[i].hPos/2;
        
//        gSetColor(0, 0, 255);
//        setAlpha(100);
//        fillRect(xChangeClubIcon.xTouchSlot[i].xPos, xChangeClubIcon.xTouchSlot[i].yPos, xChangeClubIcon.xTouchSlot[i].wPos, xChangeClubIcon.xTouchSlot[i].hPos);
//        setAlpha(ALPHA_MAX);
        
//        gSetColor(255, 255, 255);
//        setFontSizeORI(20);
//        setCommaNum(strTempS, i);
//        gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
//        setFontSize(11);
    }
    subTemp[XPOS]=px-20;
    subTemp[YPOS]=py+185;
    
    xChangeClubIcon.xTouchChange.wPos=150;
    xChangeClubIcon.xTouchChange.hPos=50;
    xChangeClubIcon.xTouchChange.xPos=subTemp[XPOS]-xChangeClubIcon.xTouchChange.wPos/2;
    xChangeClubIcon.xTouchChange.yPos=subTemp[YPOS]-xChangeClubIcon.xTouchChange.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xChangeClubIcon.xTouchChange.xPos, xChangeClubIcon.xTouchChange.yPos, xChangeClubIcon.xTouchChange.wPos, xChangeClubIcon.xTouchChange.hPos);
//    setAlpha(ALPHA_MAX);
    
    subTemp[XPOS]=px+225;
    subTemp[YPOS]=py-185;
    
    xChangeClubIcon.xTouchExit.wPos=50;
    xChangeClubIcon.xTouchExit.hPos=50;
    xChangeClubIcon.xTouchExit.xPos=subTemp[XPOS]-xChangeClubIcon.xTouchExit.wPos/2;
    xChangeClubIcon.xTouchExit.yPos=subTemp[YPOS]-xChangeClubIcon.xTouchExit.hPos/2;
    
//    setAlpha(100);
//    gSetColor(0, 255, 0);
//    fillRect(xChangeClubIcon.xTouchExit.xPos, xChangeClubIcon.xTouchExit.yPos, xChangeClubIcon.xTouchExit.wPos, xChangeClubIcon.xTouchExit.hPos);
//    setAlpha(ALPHA_MAX);
    
}
void keyChangeClubIcon(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xChangeClubIcon.xTouchChange)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
        {
            if(xChangeClubIcon.isSlot==true)
            {
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBICONUPDATE, TRUE);
                xClubLobby.state=CLUBLOBBY_STATE_PLAY;
            }
            
            else
            {
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText,"아이템이 선택되지 않았습니다.");
            }
        }
        
        
        else if(touchCheck(&xChangeClubIcon.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xClubLobby.state=CLUBLOBBY_STATE_PLAY;
        }
        else
        {
            dragScrollKeyPrc(&xChangeClubIcon.xDragScroll,2);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xChangeClubIcon.xDragScroll.touchYposBefore != DONT)
        {
            dragScrollKeyPrc(&xChangeClubIcon.xDragScroll,3);
        }
        else
        {
            int selectSlot = 0;
            
            for(int k=0;k<xChangeClubIcon.totalData;k++)
            {
                if(touchCheck(&xChangeClubIcon.xTouchSlot[k]) == TRUE)
                {
                    if(xChangeClubIcon.isSlot==false)
                    {
                        xChangeClubIcon.isSlot = true;
                        selectSlot = k;
                        break;
                    }
                    else
                    {
                        xChangeClubIcon.isSlot = false;
                        selectSlot = k;
                        break;
                    }
                }
                else
                {
                    xChangeClubIcon.isSlot=false;
                }
            }
            
            int selectSlotTemp=0;
            if(xChangeClubIcon.isSlot == true)
            {
                xChangeClubIcon.selectedNum=selectSlot+(xChangeClubIcon.xDragScroll.selectNum*2);
            }
            
            if(xChangeClubIcon.selectedNum < 0 || xChangeClubIcon.selectedNum >= xChangeClubIcon.totalData)
            {
                xChangeClubIcon.isSlot = false;
            }
        }
        xChangeClubIcon.xDragScroll.touchXpos = DONT;
        xChangeClubIcon.xDragScroll.touchYpos = DONT;
        xChangeClubIcon.xDragScroll.touchXposBefore = DONT;
        xChangeClubIcon.xDragScroll.touchYposBefore = DONT;
    }
}
void clubDonationFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        loadImg("clubdonatemain.png", &imgClubDonation[0]);//메인 UI
        loadImg("shopmoneyicon7.png", &imgClubDonation[1]);//골드 이미지
        loadImg("shoppremiumicon6.png", &imgClubDonation[2]);//캔디 이미지
    }
    else
    {
        freeImg(&imgClubDonation[0]);
        freeImg(&imgClubDonation[1]);
        freeImg(&imgClubDonation[2]);
    }
}

void initClubDonation()
{
    for(int i=0;i<2;i++)
    {
        xClub.xDonation[i].touched=false;
    }
}

void drawClubDonation()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py;
    
    xClub.xTouchDonationMainFrame.wPos=imgClubDonation[0].w;
    xClub.xTouchDonationMainFrame.hPos=imgClubDonation[0].h;
    xClub.xTouchDonationMainFrame.xPos=subTemp[XPOS]-xClub.xTouchDonationMainFrame.wPos/2;
    xClub.xTouchDonationMainFrame.yPos=subTemp[XPOS]-xClub.xTouchDonationMainFrame.hPos/2;
    
    drawImage(&imgClubDonation[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubDonation[0].w, imgClubDonation[0].h, VH);
    
    subTemp[XPOS]=px-96;
    subTemp[YPOS]=py+15;
    
    drawImage(&imgClubDonation[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubDonation[1].w, imgClubDonation[1].h, VH);
    
    gSetColor(242, 181, 213);
    setFontSizeORI(20);
    int calcMoney=xClub.xDonation[0].DonationWeath/10000;
    sprintf(strTempS,"%d만 골드",calcMoney);
    gDrawString(subTemp[XPOS], subTemp[YPOS]-78, strTempS, VH);
    setFontSize(11);
    
    gSetColor(255, 255, 255);
    setFontSizeORI(15);
    setCommaNum(strTempS, xSaveTemp.money.oriData);
    gDrawString(subTemp[XPOS]+58, subTemp[YPOS]+85, strTempS, VR);
    setFontSize(11);
    
    gSetColor(255, 255, 255);
    setFontSize(13);
    setCommaNum(strTempS, xClub.xDonation[0].maxDonationCount);
    sprintf(strTempB,"%d/%s",xClub.xDonation[0].donationCount,strTempS);
    gDrawString(subTemp[XPOS]+40, subTemp[YPOS]+115, strTempB, VH);
    setFontSize(11);
    
    xClub.xTouchDonateGold.wPos=187;
    xClub.xTouchDonateGold.hPos=203;
    xClub.xTouchDonateGold.xPos=subTemp[XPOS]-xClub.xTouchDonateGold.wPos/2;
    xClub.xTouchDonateGold.yPos=subTemp[YPOS]-xClub.xTouchDonateGold.hPos/2;
    
    subTemp[XPOS]=px+94;
    subTemp[YPOS]=py+15;
    drawImage(&imgClubDonation[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubDonation[2].w, imgClubDonation[2].h, VH);
    
    gSetColor(242, 181, 213);
    setFontSizeORI(20);
    sprintf(strTempS,"%d 캔디",xClub.xDonation[1].DonationWeath);
    gDrawString(subTemp[XPOS], subTemp[YPOS]-78, strTempS, VH);
    setFontSize(11);

    gSetColor(255, 255, 255);
    setFontSizeORI(15);
    setCommaNum(strTempS, xSaveTemp.tired.oriData);
    gDrawString(subTemp[XPOS]+50, subTemp[YPOS]+85, strTempS, VR);
    setFontSize(11);
    
    gSetColor(255, 255, 255);
    setFontSize(13);
    setCommaNum(strTempS, xClub.xDonation[1].maxDonationCount);
    sprintf(strTempB,"%d/%s",xClub.xDonation[1].donationCount,strTempS);
    gDrawString(subTemp[XPOS]+40, subTemp[YPOS]+115, strTempB, VH);
    setFontSize(11);

    xClub.xTouchDonateCandy.wPos=187;
    xClub.xTouchDonateCandy.hPos=203;
    xClub.xTouchDonateCandy.xPos=subTemp[XPOS]-xClub.xTouchDonateCandy.wPos/2;
    xClub.xTouchDonateCandy.yPos=subTemp[YPOS]-xClub.xTouchDonateCandy.hPos/2;
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py+180;
    
    xClub.xTouchDonation.wPos=150;
    xClub.xTouchDonation.hPos=50;
    xClub.xTouchDonation.xPos=subTemp[XPOS]-xClub.xTouchDonation.wPos/2;
    xClub.xTouchDonation.yPos=subTemp[YPOS]-xClub.xTouchDonation.hPos/2;
    
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py-115;
    
    sprintf(strTempS,"골드나 캔디로 기부시 %d포인트씩 획득합니다.",xClub.xDonation[0].point );
    setFontSizeORI(14);
    gSetColor(255, 255, 255);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);
//    setAlpha(100);
//    gSetColor(0, 255, 0);
//    fillRect(xClub.xTouchDonation.xPos, xClub.xTouchDonation.yPos, xClub.xTouchDonation.wPos, xClub.xTouchDonation.hPos);
//    setAlpha(ALPHA_MAX);
}

void keyClubDonation(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xClub.xTouchDonation)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
        {
            xClubLobby.state=CLUBLOBBY_STATE_PLAY;
        }

        if(touchCheck(&xClub.xTouchDonateGold)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
           {
               xClub.donationType=0;
               setPopup(POPUP_CLUBDONATIONGOLDCHECK, PLAY_PLAY, PLAY_PLAY, 0, DONT);
           }
        else if(touchCheck(&xClub.xTouchDonateCandy)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
        {
            xClub.donationType=1;
            setPopup(POPUP_CLUBDONATIONCANDYCHECK,PLAY_PLAY,PLAY_PLAY,0,DONT);
        }
        
        else if(touchCheck(&xClub.xTouchDonationMainFrame)==FALSE&&touchType==USER_POINT_PRESS_EVENT)
        {
            xClubLobby.state=CLUBLOBBY_STATE_PLAY;
            clubDonationFreeLoad(false);
        }
    }
}
void initFashionWeekLobby()
{
    //////////////////////////////////////////////////////////////////////////////////////////
    xFashionWeek.isNet_Dress = true;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKDRESSLIST, TRUE);
    //////////////////////////////////////////////////////////////////////////////////////////
    
    //////////////////////////////////////////////////////////////////////////////////////////
    xFashionWeek.isNet_FittingList = true;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKFITTINGLIST, TRUE);
    //////////////////////////////////////////////////////////////////////////////////////////
    
    //////////////////////////////////////////////////////////////////////////////////////////
    xFashionWeek.isNet_Ranking = true;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBRANKLIST, TRUE);
    //////////////////////////////////////////////////////////////////////////////////////////
    
    
    for(int k=0;k<FASHIONSTUDIOMAX;k++)
    {
        xFashionStudio.itemCode[k] = DONT;
    }
}

void fashionWeekFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        loadImgDocuments("fashionweek0.png", &imgFashionWeek[0]);
        loadImgDocuments("fashionweek1.png", &imgFashionWeek[1]);
        loadImgDocuments("fashionweek2.png", &imgFashionWeek[2]);
        loadImgDocuments("fashionweek3.png", &imgFashionWeek[3]);
        loadImgDocuments("fashionweek4.png", &imgFashionWeek[4]);
        loadImgDocuments("fashionweek5.png", &imgFashionWeek[5]);
        loadImgDocuments("fashionweek6.png", &imgFashionWeek[6]);
        loadImgDocuments("fashionweek7.png", &imgFashionWeek[7]);
        loadImgDocuments("fashionweek8.png", &imgFashionWeek[8]);
        loadImgDocuments("fashionweek9.png", &imgFashionWeek[9]);
        loadImgDocuments("fashionweek10.png", &imgFashionWeek[10]);
        loadImgDocuments("fashionweek11.png", &imgFashionWeek[11]);
        loadImgDocuments("fashionweek12.png", &imgFashionWeek[12]);
        loadImgDocuments("fashionweek13.png", &imgFashionWeek[13]);
        loadImgDocuments("fashionweek14.png", &imgFashionWeek[14]);
        loadImgDocuments("fashionweek15.png", &imgFashionWeek[15]);
        loadImgDocuments("fashionweek16.png", &imgFashionWeek[16]);
        loadImgDocuments("fashionweek17.png", &imgFashionWeek[17]);
        loadImgDocuments("fashionweek18.png", &imgFashionWeek[18]);
        loadImgDocuments("fashionweek19.png", &imgFashionWeek[19]);
        loadImgDocuments("fashionweek20.png", &imgFashionWeek[20]);
        loadImgDocuments("fashionweek21.png", &imgFashionWeek[21]);
        loadImgDocuments("fashionweek22.png", &imgFashionWeek[22]);
        loadImgDocuments("fashionweek23.png", &imgFashionWeek[23]);
        loadImgDocuments("fashionweek24.png", &imgFashionWeek[24]);
        loadImgDocuments("fashionweek25.png", &imgFashionWeek[25]);
        loadImgDocuments("fashionweek26.png", &imgFashionWeek[26]);
        loadImgDocuments("fashionweek27.png", &imgFashionWeek[27]);
        loadImgDocuments("fashionweek28.png", &imgFashionWeek[28]);
        
        
        
        loadImgDocuments("pangobj.png", &imgPangObj);
        
        
        loadImgDocuments("clubcosticon.png", &imgClubCostIcon);
        loadImgDocuments("clubpointicon.png", &imgClubPointIcon);
        loadImgDocuments("clubscoreicon.png", &imgClubScoreIcon);
        loadImgDocuments("clubfitting0.png", &imgClubFitting[0]);
        loadImgDocuments("clubfitting1.png", &imgClubFitting[1]);
        loadImgDocuments("clubfitting2.png", &imgClubFitting[2]);
        setPacker(PACKER_STATE_MODEL);
        
        loadImg("clubwealth.png",  &imgClubWealth);
        
    }
    else
    {
        freeImg(&imgFashionWeek[0]);
        freeImg(&imgFashionWeek[1]);
        freeImg(&imgFashionWeek[2]);
        freeImg(&imgFashionWeek[3]);
        freeImg(&imgFashionWeek[4]);
        freeImg(&imgFashionWeek[5]);
        freeImg(&imgFashionWeek[6]);
        freeImg(&imgFashionWeek[7]);
        freeImg(&imgFashionWeek[8]);
        freeImg(&imgFashionWeek[9]);
        freeImg(&imgFashionWeek[10]);
        freeImg(&imgFashionWeek[11]);
        freeImg(&imgFashionWeek[12]);
        freeImg(&imgFashionWeek[13]);
        freeImg(&imgFashionWeek[14]);
        freeImg(&imgFashionWeek[15]);
        freeImg(&imgFashionWeek[16]);
        freeImg(&imgFashionWeek[17]);
        freeImg(&imgFashionWeek[18]);
        freeImg(&imgFashionWeek[19]);
        freeImg(&imgFashionWeek[20]);
        freeImg(&imgFashionWeek[21]);
        freeImg(&imgFashionWeek[22]);
        freeImg(&imgFashionWeek[23]);
        freeImg(&imgFashionWeek[24]);
        freeImg(&imgFashionWeek[25]);
        freeImg(&imgFashionWeek[26]);
        freeImg(&imgFashionWeek[27]);
        freeImg(&imgFashionWeek[28]);

        
        freeImg(&imgPangObj);
        
        freeImg(&imgClubCostIcon);
        freeImg(&imgClubPointIcon);
        freeImg(&imgClubScoreIcon);
        freeImg(&imgClubFitting[0]);
        freeImg(&imgClubFitting[1]);
        freeImg(&imgClubFitting[2]);
        
        freeImg(&xPacker[PACKER_STATE_MODEL].img);
        
        
        freeImg(&imgClubWealth);
        
    }
    
}

void drawFashionWeekLobby()
{
    int px = cx;
    int py = cy;
    
    
    
    
    drawImage(&imgClubList[0], px, py, 0, 0, imgClubList[0].w, imgClubList[0].h, VH);
    
    for(int k=0;k<CLUBMENUMAX;k++)
    {
        subTemp[XPOS] = px-500+(k*112);
        subTemp[YPOS] = py+268;
        
        drawImage(&imgClubMenu[k], subTemp[XPOS], subTemp[YPOS], 0, imgClubMenu[k].h/2*(xClubLobby.selectMenu == k?1:0), imgClubMenu[k].w, imgClubMenu[k].h/2, VH);
        
        xClubLobby.xTouchClubMenu[k].wPos = imgClubMenu[k].w;
        xClubLobby.xTouchClubMenu[k].hPos = imgClubMenu[k].h/2;
        xClubLobby.xTouchClubMenu[k].xPos = subTemp[XPOS]-xClubLobby.xTouchClubMenu[k].wPos/2;
        xClubLobby.xTouchClubMenu[k].yPos = subTemp[YPOS]-xClubLobby.xTouchClubMenu[k].hPos/2;
    }
    
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    
    xClubLobby.xTouchExit.wPos = 80;
    xClubLobby.xTouchExit.hPos = 80;
    xClubLobby.xTouchExit.xPos = subTemp[XPOS]-xClubLobby.xTouchExit.wPos/2;
    xClubLobby.xTouchExit.yPos = subTemp[YPOS]-xClubLobby.xTouchExit.hPos/2;
    
    
    subTemp[XPOS] = px-235;
    subTemp[YPOS] = py-200;
    
    
    xFashionWeekLobby.xTouchGiftInfo.wPos = 100;
    xFashionWeekLobby.xTouchGiftInfo.hPos = 80;
    xFashionWeekLobby.xTouchGiftInfo.xPos = subTemp[XPOS]-xFashionWeekLobby.xTouchGiftInfo.wPos/2;
    xFashionWeekLobby.xTouchGiftInfo.yPos = subTemp[YPOS]-xFashionWeekLobby.xTouchGiftInfo.hPos/2;
    
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xFashionWeekLobby.xTouchGiftInfo.xPos, xFashionWeekLobby.xTouchGiftInfo.yPos, xFashionWeekLobby.xTouchGiftInfo.wPos, xFashionWeekLobby.xTouchGiftInfo.hPos);
    setAlpha(ALPHA_MAX);
     */

    
    ////////////랭킹
    drawImage(&imgFashionWeek[0], px-362, py-26, 0, 0, imgFashionWeek[0].w, imgFashionWeek[0].h, VH);
    //내 랭킹정보
    subTemp[XPOS] = px-361;
    subTemp[YPOS] = py-146;
    drawImage(&imgFashionWeek[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFashionWeek[1].w, imgFashionWeek[1].h, VH);
    drawClubIcon(subTemp[XPOS]-130, subTemp[YPOS], xClub.xMy.clubIcon);
    drawImage(&imgFashionWeek[3], subTemp[XPOS]-130, subTemp[YPOS]-30, 0, 0, imgFashionWeek[3].w, imgFashionWeek[3].h, VH);
    //내순위
    if(xClub.xMy.fashionWeekRank == DONT)
        sprintf(strTempS, "미등록");
    else
        sprintf(strTempS, "%d위",xClub.xMy.fashionWeekRank);
    gSetColor(255, 255, 255);
    setFontSizeORI(23);
    gDrawString(subTemp[XPOS]-60, subTemp[YPOS]-10, strTempS, VH);
    
    if(xClub.xMy.fashionWeekRank != DONT)
    {
        setFontSizeORI(17);
        sprintf(strTempS, "(%.2f%%)",xClub.xMy.fashionWeekRankPer);
        gDrawString(subTemp[XPOS]-60, subTemp[YPOS]+10, strTempS, VH);
    }
    
    
    setFontSize(11);
    //내레벨 클럽명
    setFontSizeORI(18);
    sprintf(strTempS, "Lv.%d %s",xClub.xMy.clubLv,xClub.xMy.strName);
    gDrawString(subTemp[XPOS]+48, subTemp[YPOS]-19, strTempS, VH);
    setFontSize(11);
    //내점수
    gSetColor(143, 49, 143);
    setFontSizeORI(25);
    setCommaNum(strTempS, xClub.xMy.fashionWeekScore);
    gDrawString(subTemp[XPOS]+48, subTemp[YPOS]+14, strTempS, VH);
    setFontSize(11);
    
    //상위100위
    xFashionWeekRank.xDragScroll.totalNum = xFashionWeekRank.totalNum;
    xFashionWeekRank.xDragScroll.posGab = 72;
    xFashionWeekRank.xDragScroll.endPos = -(((xFashionWeekRank.xDragScroll.totalNum-5)*xFashionWeekRank.xDragScroll.posGab));
    if(xFashionWeekRank.xDragScroll.totalNum < 5)
        xFashionWeekRank.xDragScroll.endPos = 0;
    else
        xFashionWeekRank.xDragScroll.endPos -= 64;
    
    int iMax = xFashionWeekRank.xDragScroll.totalNum;
    dragScrollPrc(&xFashionWeekRank.xDragScroll,1,FALSE);
    
    xFashionWeekRank.xTouchBg.wPos = imgFashionWeek[0].w;
    xFashionWeekRank.xTouchBg.hPos = imgFashionWeek[0].h;
    xFashionWeekRank.xTouchBg.xPos = px-362-xFashionWeekRank.xTouchBg.wPos/2;
    xFashionWeekRank.xTouchBg.yPos = py-26-xFashionWeekRank.xTouchBg.hPos/2;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xFashionWeekRank.xTouchBg.xPos,xFashionWeekRank.xTouchBg.yPos,xFashionWeekRank.xTouchBg.wPos,xFashionWeekRank.xTouchBg.hPos);
     setAlpha(ALPHA_MAX);
     */
    
    
    
    gSetClip(true, px-361-200, py-110, 400, 297);
    for(int i=0;i<iMax;i++)
    {
        int pos = xFashionWeekRank.xDragScroll.pos+(xFashionWeekRank.xDragScroll.posGab*i);
        subTemp[XPOS] = px-361;
        subTemp[YPOS] = py-74+pos;
        
        if(subTemp[YPOS] < -xFashionWeekRank.xDragScroll.posGab || subTemp[YPOS] > lcdH+xFashionWeekRank.xDragScroll.posGab)
            continue;
        
        drawImage(&imgFashionWeek[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFashionWeek[2].w, imgFashionWeek[2].h, VH);
        drawClubIcon(subTemp[XPOS]-130, subTemp[YPOS], xFashionWeekRank.xSlot[i].clubIcon);
        
        //순위
        sprintf(strTempS, "%d위",xFashionWeekRank.xSlot[i].fashionWeekRank);
        gSetColor(255, 255, 255);
        setFontSizeORI(23);
        gDrawString(subTemp[XPOS]-60, subTemp[YPOS], strTempS, VH);
        setFontSize(11);
        //레벨 클럽명
        setFontSizeORI(18);
        sprintf(strTempS, "Lv.%d %s",xFashionWeekRank.xSlot[i].clubLv,xFashionWeekRank.xSlot[i].strName);
        gDrawString(subTemp[XPOS]+48, subTemp[YPOS]-19, strTempS, VH);
        setFontSize(11);
        //점수
        gSetColor(143, 49, 73);
        setFontSizeORI(25);
        setCommaNum(strTempS, xFashionWeekRank.xSlot[i].fashionWeekScore);
        gDrawString(subTemp[XPOS]+48, subTemp[YPOS]+14, strTempS, VH);
        setFontSize(11);
    }
    gSetClip(false, px-100, py-140, 600, 336);
    
    
    if(xFashionWeek.isNet_Ranking == true)
    {
        drawLoadingIcon(px-361,py-20);
    }
    
    
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xFashionWeekRank.xDragScroll.selectNum = (-xFashionWeekRank.xDragScroll.pos/xFashionWeekRank.xDragScroll.posGab);
    if(xFashionWeekRank.xDragScroll.selectNum < 0)
        xFashionWeekRank.xDragScroll.selectNum = 0;
    
    for(int i=0;i<5;i++)
    {
        
        subTemp[XPOS] = px+224;
        subTemp[YPOS] = py-117+(i*xClubLobby.xDragScroll[xClubLobby.selectTab].posGab);
        
        xFashionWeekRank.xTouchSlot[i].wPos = 60;
        xFashionWeekRank.xTouchSlot[i].hPos = 60;
        xFashionWeekRank.xTouchSlot[i].xPos = subTemp[XPOS]-289-xFashionWeekRank.xTouchSlot[i].wPos/2;
        xFashionWeekRank.xTouchSlot[i].yPos = subTemp[YPOS]+((xFashionWeekRank.xDragScroll.posGab <= xFashionWeekRank.xDragScroll.pos ? xFashionWeekRank.xDragScroll.pos:(xFashionWeekRank.xDragScroll.pos%xFashionWeekRank.xDragScroll.posGab)))- xFashionWeekRank.xTouchSlot[i].hPos/2;

        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xFashionWeekRank.xTouchSlot[i].xPos, xFashionWeekRank.xTouchSlot[i].yPos, xFashionWeekRank.xTouchSlot[i].wPos, xFashionWeekRank.xTouchSlot[i].hPos);
         setAlpha(ALPHA_MAX);
         */

    }
    //////////모델
    drawImage(&imgFashionWeek[4], px, py+20, 0, 0, imgFashionWeek[4].w, imgFashionWeek[4].h, VH);
    
    
    
    XFITTINGLAYER xFTemp;
    
    
    memcpy(&xFTemp, &xClub.xMy.xF, sizeof(xClub.xMy.xF));
    
    if(xFashionWeekLobby.isPreview == true)
    {
        
    }
    else
    {
        for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
        {
            if(xFTemp.code[ff] != DONT)
            {
                setMapData(xFTemp.code[ff]);
                
                if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost < xFashionData[xMap.type][xMap.listNum].clubCostMax || xFashionWeekItem[xMap.type][xMap.listNum].isExp == false)
                {
                    xFTemp.code[ff] = DONT;
                }
            }
        }
    }
    drawFittingBody(px, py-25,&xFTemp,&xClub.xMy.xFace,TRUE,xClub.xMy.gender);
    
    
    //완성도
    subTemp[XPOS] = px+110;
    subTemp[YPOS] = py-206;
    drawImage(&imgFashionWeek[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFashionWeek[8].w, imgFashionWeek[8].h, VH);
    gSetColor(255, 255, 255);
    setFontSizeORI(18);
    
    int completeCnt = 0;
    for(int k=0;k<xFashionStudio.totalNum;k++)
    {
        setMapData(xFashionStudio.itemCode[k]);
        
        if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
        {
            if(xFashionWeekItem[xMap.type][xMap.listNum].isExp == true)
            {
                completeCnt++;
            }
        }
    }
    
    int completePer = 0;
    if(xFashionStudio.totalNum > 0)
        completePer = completeCnt*100/xFashionStudio.totalNum;
    
    
    sprintf(strTempS, "%d%%",completePer);
    gDrawString(subTemp[XPOS]+28, subTemp[YPOS]-1, strTempS, VH);
    setFontSize(11);
    
    
    
    //세팅하기
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+182;
    drawImage(&imgFashionWeek[9], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFashionWeek[9].w, imgFashionWeek[9].h, VH);
    xFashionWeekLobby.xTouchModelSetting.wPos = imgFashionWeek[9].w;
    xFashionWeekLobby.xTouchModelSetting.hPos = imgFashionWeek[9].h;
    xFashionWeekLobby.xTouchModelSetting.xPos = subTemp[XPOS]-xFashionWeekLobby.xTouchModelSetting.wPos/2;
    xFashionWeekLobby.xTouchModelSetting.yPos = subTemp[YPOS]-xFashionWeekLobby.xTouchModelSetting.hPos/2;
    
    
    //미리보기
    subTemp[XPOS] = px+126;
    subTemp[YPOS] = py+188;
    drawImage(&imgFashionWeek[10], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFashionWeek[10].w, imgFashionWeek[10].h, VH);
    
    
    if(xFashionWeekLobby.isPreview == true)
    {
        drawImage(&imgFashionWeek[12], subTemp[XPOS]+40, subTemp[YPOS], 0, 0, imgFashionWeek[12].w, imgFashionWeek[12].h, VH);
    }
    
    xFashionWeekLobby.xTouchPreview.wPos = imgFashionWeek[10].w;
    xFashionWeekLobby.xTouchPreview.hPos = imgFashionWeek[10].h;
    xFashionWeekLobby.xTouchPreview.xPos = subTemp[XPOS]-xFashionWeekLobby.xTouchPreview.wPos/2;
    xFashionWeekLobby.xTouchPreview.yPos = subTemp[YPOS]-xFashionWeekLobby.xTouchPreview.hPos/2;
    
    
    /////////패션스튜디오
    
    drawFashionStudio();
    
    
    gSetColor(255, 255, 255);
    setFontSizeORI(18);
    gDrawString(lcdW-20, lcdH-20, "클럽 패션쇼 랭킹은 매주 월요일 오전4시에 초기화 됩니다.", VR);
    setFontSize(11);
}

void keyFashionWeekLobby(int type, int param1, int param2)
{
    if(xFashionStudio.isInfo == true)
    {
        if(touchCheck(&xFashionStudio.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xFashionStudio.isInfo = false;
        }
    }
    
    else if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_GIFTINFO)
    {
        if(touchCheck(&xClubLobby.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_LOBBY;
        }
    }
    else if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_FITTING)
    {
        keyFitting_FASHIONWEEK(type, param1, param2);
    }
    else if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_SETTING)
    {
        keyFashionWeekSetting(type, param1, param2);
    }
    else if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_SELECTMODEL)
    {
        keyFashionWeekSelectModel(type, param1, param2);
    }
    else if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_SETTING_FITTING)
    {
        keyFitting_FASHIONWEEK_SELECTMODEL(type, param1, param2);
    }
    else
    {
        if(type == MH_KEY_PRESSEVENT)
        {
            bool isClubMenu = false;
            int selectClubMenu = 0;
            for(int k=0;k<CLUBMENUMAX;k++)
            {
                if(touchCheck(&xClubLobby.xTouchClubMenu[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    isClubMenu = true;
                    selectClubMenu = k;
                    break;
                }
            }
            
            
            bool isFashionStudio = false;
            int selectFashionStudio = 0;
            
            for(int k=0;k<FASHIONSTUDIOMAX;k++)
            {
                if(touchCheck(&xFashionWeekLobby.xTouchStudioSlot[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    isFashionStudio = true;
                    selectFashionStudio = k;
                    break;
                }
            }
            
            if(isClubMenu == true && xClubLobby.selectMenu != selectClubMenu)
            {
                switch(selectClubMenu)
                {
                case CLUBLOBBY_MENU_MAIN:
                    xClubLobby.selectMenu = selectClubMenu;
                        
                    xClubLobby.state = CLUBLOBBY_STATE_NET;
                    ////////////////////////////////////////////////////
                    xEventQueueNet.key[xEventQueueNet.totalNum] = xClub.xMy.clubKey;
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBMEMBER, TRUE);
                    ///////////////////////////////////////////////////
                    
                    ////////////////////////////////////////////////////
                    xEventQueueNet.key[xEventQueueNet.totalNum] = xClub.xMy.clubKey;
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBDATA, TRUE);
                    ///////////////////////////////////////////////////
                    break;
                case CLUBLOBBY_MENU_SHOP:
                    if(xClubShop.OnOff==1)
                    {
                    //                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    //                        sprintf(xPopup.strText, "업데이트 예정 입니다.");
                        xClubLobby.selectMenu = selectClubMenu;
                        initClubShop();
                        clubShopFreeLoad(true);
                    }
                    else
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "임시 잠금상태 입니다.");
                    }
                    break;
                default:
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "업데이트 예정 입니다.");
                    break;
                }
            }
            else if(touchCheck(&xClubLobby.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                clubLobbyFreeLoad(false);
                fashionWeekFreeLoad(false);
                xWorldMap.state = WORLDMAP_STATE_PLAY;
            }
            else if(isFashionStudio == true)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                xFashionStudio.selectInfoSlot = selectFashionStudio;
                
                
                if(xFashionStudio.itemCode[xFashionStudio.selectInfoSlot] != DONT)
                {
                    setMapData(xFashionStudio.itemCode[xFashionStudio.selectInfoSlot]);
                    if(xFashionStudio.selectInfoSlot >= xClub.xData[xClub.xMy.clubLv].layeredMax)
                    {
                        
                    }
                    else if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
                    {
                        //받음
                        if(xFashionWeekItem[xMap.type][xMap.listNum].isExp == true)
                        {
                            xFashionStudio.isInfo = true;
                        }
                        //안받음
                        else
                        {
                            if(xClubLobby.isMaster == true)
                            {
                                xFashionWeek.isNet_Exp = true;
                                //////////////////////////////////////////////////////////////////////////////////////////
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKEXP, TRUE);
                                //////////////////////////////////////////////////////////////////////////////////////////
                                xFashionWeekItem[xMap.type][xMap.listNum].isExp = true;

                                setFashionStudioSlot();
                                
                                xFashionWeek.isNet_Score = true;
                                //////////////////////////////////////////////////////////////////////////////////////////
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKSCOREUPDATE, TRUE);
                                //////////////////////////////////////////////////////////////////////////////////////////
                                
                                //////////////////////////////////////////////////////////////////////////////////////////
                                xFashionWeek.isNet_Ranking = true;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBRANKLIST, TRUE);
                                //////////////////////////////////////////////////////////////////////////////////////////
                                
                                
                                
                            }
                            else
                            {
                                //획득로직
                                xFashionStudio.isInfo = true;
                            }
                        }
                    }
                    else
                    {
                        xFashionStudio.isInfo = true;
                    }
                }
            }
            else if(touchCheck(&xFashionWeekLobby.xTouchModelSetting) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                
                if(xClubLobby.isMaster == false)
                {
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "클럽모델 피팅은\n클럽마스터 전용 기능입니다.");
                }
                else
                {
                    for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
                    {
                        xFitting.xF[0].code[ff] = DONT;
                        xFitting.xF[1].code[ff] = DONT;
                    }
                    
                    xFitting.gender = xClub.xMy.gender;
                    memcpy(&xFitting.xF[xFitting.gender],&xClub.xMy.xF,sizeof(xClub.xMy.xF));
                    memcpy(&xFitting.xFace,&xClub.xMy.xFace,sizeof(xClub.xMy.xFace));
                    
                    xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_FITTING;
                    xFitting.selectTabB = 0;
                    setFittingTabChange();
                }
            }
            else if(touchCheck(&xFashionWeekLobby.xTouchPreview) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = true;
                if(xFashionWeekLobby.isPreview == false)
                    xFashionWeekLobby.isPreview = true;
                else
                    xFashionWeekLobby.isPreview = false;
            }
            else if(touchCheck(&xFashionWeekLobby.xTouchGiftInfo) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = true;

                xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_GIFTINFO;
                
                
            }
            else if(touchCheck(&xFashionWeekLobby.xTouchStart) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                playSnd(SND_MENU_OK);
                xWorldMap.isKeyReturn = TRUE;
                
                xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_SETTING;
            }
            else
            {
                if(touchType == USER_POINT_PRESS_EVENT)
                {
                    xFashionWeekLobby.selectScroll = 0;
                    if(touchCheck(&xFashionWeekRank.xTouchBg) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                        xFashionWeekLobby.selectScroll = 1;
                }
                
                if(xFashionWeekLobby.selectScroll == 1)
                    dragScrollKeyPrc(&xFashionWeekRank.xDragScroll,2);
            }
        }
        else if(type == MH_KEY_RELEASEEVENT)
        {
            if(xFashionWeekLobby.selectScroll == 1 && xFashionWeekRank.xDragScroll.touchXposBefore != DONT)
            {
                dragScrollKeyPrc(&xFashionWeekRank.xDragScroll,3);
            }
            else if(xFashionWeekLobby.selectScroll == 1)
            {
                
                bool isSlot = false;
                int selectSlot = 0;
                
                for(int k=0;k<5;k++)
                {
                    if(touchCheck(&xFashionWeekRank.xTouchSlot[k]) == TRUE)
                    {
                        isSlot = true;
                        selectSlot = k;
                        break;
                    }
                }
                
                int selectSlotTemp=0;
                selectSlotTemp = selectSlot+(xFashionWeekRank.xDragScroll.selectNum);
                
                if(selectSlotTemp < 0 || selectSlotTemp >= xFashionWeekRank.xDragScroll.totalNum)
                    isSlot = false;
                
                if(isSlot == true)
                {
    //              playSnd(SND_MENU_OK);
                }
            }
            
            xFashionWeekRank.xDragScroll.touchXpos = DONT;
            xFashionWeekRank.xDragScroll.touchYpos = DONT;
            xFashionWeekRank.xDragScroll.touchXposBefore = DONT;
            xFashionWeekRank.xDragScroll.touchYposBefore = DONT;
        }
    }
}





void drawFitting_FASHIONWEEK()
{
    int px = cx;
    int py = cy;
    drawImage(&imgClubList[0], px, py, 0, 0, imgClubList[0].w, imgClubList[0].h, VH);
    //피팅창
    drawBgFillRect();
    drawImage(&imgFittingBg[0], px, py, 0, 0, imgFittingBg[0].w, imgFittingBg[0].h, VH);
    
    
    //카테고리탭
    int iMaxTabS;
    iMaxTabS = FITTINGTABMAX+2;
    subTemp[XPOS] = px-395;
    subTemp[YPOS] = py-275;
    
    
    for(int i=0;i<iMaxTabS;i++)
    {
        int h=0;
        if(i == xFitting.selectTabB)
        {
            h=-18;
            drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], imgW(imgMenu8)/2, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
            
            switch(i)
            {
            case 0:sprintf(strTempS, "헤어");break;
            case 1:sprintf(strTempS, "표정");break;
            case 2:sprintf(strTempS, "아우터");break;
            case 3:sprintf(strTempS, "상의");break;
            case 4:sprintf(strTempS, "하의");break;
            case 5:sprintf(strTempS, "원피스");break;
            case 6:sprintf(strTempS, "신발");break;
            case 7:sprintf(strTempS, "가방");break;
            case 8:sprintf(strTempS, "기타");break;
            }
            gDrawStringBold(subTemp[XPOS]+(i*76), subTemp[YPOS]+30, strTempS, VH, 255, 255, 255, 82, 49, 38);
        }
        else
        {
            h=0;
            drawPacker(imgMenu8, subTemp[XPOS]+(i*76), subTemp[YPOS], 0, imgH(imgMenu8)/2, imgW(imgMenu8)/2, imgH(imgMenu8)/2, VH);
        }
        
        switch(i)
        {
        case 0:
        case 1:
            drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*(i+8), imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
            break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
            drawPacker(imgFittingTabB, subTemp[XPOS]+(i*76), subTemp[YPOS]+6+h, imgW(imgFittingTabB)/(FITTINGTABMAX+5)*(i-2), imgH(imgFittingTabB)/2, imgW(imgFittingTabB)/(FITTINGTABMAX+5), imgH(imgFittingTabB)/2, VH);
            break;
        }
    }
    
    for(int i=0;i<iMaxTabS;i++)
    {
        xTouchFittingTabB[i].wPos = imgW(imgMenu8)/2-10;
        xTouchFittingTabB[i].hPos = imgH(imgMenu8);
        xTouchFittingTabB[i].xPos = subTemp[XPOS]+5+(i*76) - xTouchFittingTabB[i].wPos/2;
        xTouchFittingTabB[i].yPos = subTemp[YPOS] - xTouchFittingTabB[i].hPos/2;
    }
    
    
    
    //성별여
    subTemp[XPOS] = px+366-49;
    subTemp[YPOS] = py-185;
    
    xTouchGenderLeft.wPos = imgW(imgFittingMenu5)/2;
    xTouchGenderLeft.hPos = imgH(imgFittingMenu5)/2;
    xTouchGenderLeft.xPos = subTemp[XPOS]-xTouchGenderLeft.wPos/2;
    xTouchGenderLeft.yPos = subTemp[YPOS]-xTouchGenderLeft.hPos/2;
    //여
    drawImage(&imgClubFitting[0], subTemp[XPOS], subTemp[YPOS], 0, imgClubFitting[0].h/2*(xFitting.gender==0?1:0), imgClubFitting[0].w/2, imgClubFitting[0].h/2, VH);
    
    
    //성별남
    subTemp[XPOS] = px+366+49;
    subTemp[YPOS] = py-185;
    
    xTouchGenderRight.wPos = imgClubFitting[0].w/2;
    xTouchGenderRight.hPos = imgClubFitting[0].h/2;
    xTouchGenderRight.xPos = subTemp[XPOS]-xTouchGenderRight.wPos/2;
    xTouchGenderRight.yPos = subTemp[YPOS]-xTouchGenderRight.hPos/2;
    //남
    drawImage(&imgClubFitting[0], subTemp[XPOS], subTemp[YPOS], imgClubFitting[0].w/2, imgClubFitting[0].h/2*(xFitting.gender==1?1:0), imgClubFitting[0].w/2, imgClubFitting[0].h/2, VH);
    
    //피팅창
    subTemp[XPOS] = px+366;
    subTemp[YPOS] = py+32;
    
    drawImage(&imgFittingBg[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingBg[1].w, imgFittingBg[1].h, VH);
    drawPacker(imgCatalogSex, subTemp[XPOS]-94,subTemp[YPOS]-175, imgW(imgCatalogSex)/2*xFitting.gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
    
    //레이어드수파악
    xFitting.xF[xFitting.gender].layeredNum = 0;
    for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
    {
        if(xFitting.xF[xFitting.gender].code[ff] != DONT)
            xFitting.xF[xFitting.gender].layeredNum++;
    }
    
    drawFittingBody(subTemp[XPOS], subTemp[YPOS],&xFitting.xF[xFitting.gender],&xFitting.xFace,TRUE,xFitting.gender);
    
    //레이어드정보
    subTemp[XPOS] = px+366;
    subTemp[YPOS] = py+208;
    subTemp[WPOS] = imgW(imgFittingMenu2) * xFitting.xF[xFitting.gender].layeredNum / 999;
    
    drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*3, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
    drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4*2, subTemp[WPOS], imgH(imgFittingMenu2)/4, VL);
    drawPacker(imgFittingMenu2, subTemp[XPOS]-imgW(imgFittingMenu2)/2, subTemp[YPOS], 0, imgH(imgFittingMenu2)/4, imgW(imgFittingMenu2), imgH(imgFittingMenu2)/4, VL);
    
    gDrawStringBold(subTemp[XPOS]-60, subTemp[YPOS], "레이어드", VL, 255, 170, 21, 44, 27, 26);
    
    
    sprintf(strTempS, "%d/%d",xFitting.xF[xFitting.gender].layeredNum,xClub.xData[xClub.xMy.clubLv].layeredMax);
    gDrawStringBold(subTemp[XPOS]+84, subTemp[YPOS], strTempS, VR, 255, 170, 21, 44, 27, 26);
    
    
    
    
    
    
    
    //버튼
    subTemp[XPOS] = px+366;
    subTemp[YPOS] = py+268;
    //원래대로
    drawPacker(imgBtn2, subTemp[XPOS]-56, subTemp[YPOS], 0, imgH(imgBtn2)/2, imgW(imgBtn2), imgH(imgBtn2)/2, VH);
    setFontSize(14);
    gDrawStringBold(subTemp[XPOS]-2-56, subTemp[YPOS]-2-12, "모두", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
    gDrawStringBold(subTemp[XPOS]-2-56-2, subTemp[YPOS]-2+12, "벗기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 20, 79, 78);
    setFontSize(11);
    
    
    
    drawPacker(imgBtn1, subTemp[XPOS]+40, subTemp[YPOS], 0, imgH(imgBtn1)/2, imgW(imgBtn1), imgH(imgBtn1)/2, VH);
    setFontSize(14);
    gDrawStringBold(subTemp[XPOS]-4+40, subTemp[YPOS]-2, "적용하기", VH, ALPHA_MAX, ALPHA_MAX, ALPHA_MAX, 186, 70, 10);
    setFontSize(11);
    
    xTouchFittingReset.wPos = imgW(imgBtn2);
    xTouchFittingReset.hPos = imgH(imgBtn2)/2;
    xTouchFittingReset.xPos = subTemp[XPOS]-56-xTouchFittingReset.wPos/2;
    xTouchFittingReset.yPos = subTemp[YPOS]-xTouchFittingReset.hPos/2;
    
    xTouchFittingSave.wPos = imgW(imgBtn1);
    xTouchFittingSave.hPos = imgH(imgBtn1)/2;
    xTouchFittingSave.xPos = subTemp[XPOS]+40-xTouchFittingSave.wPos/2;
    xTouchFittingSave.yPos = subTemp[YPOS]-xTouchFittingSave.hPos/2;
    
    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xTouchFittingSave.xPos, xTouchFittingSave.yPos, xTouchFittingSave.wPos, xTouchFittingSave.hPos);
    setAlpha(ALPHA_MAX);
    */
    
    //세부메뉴
    subTemp[XPOS] = px-350;
    subTemp[YPOS] = py+76;
    
    xFitting.totalNumS = xFitting.totalSlot[xFitting.selectTabB];
    
    xDragScrollFittingS.totalNum = 1+(xFitting.totalNumS-1)/8;
    xDragScrollFittingS.posGab = 640;
    
    
    if(xFitting.totalNumS == 0)
    {
        
        xLinkInfo.total = 0;
        sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"피팅 가능한 의상이 없습니다.");
        sprintf(xLinkInfo.strTemp[xLinkInfo.total++],"의상 라이센스를 오픈 해주세요.");
        drawLinkInfo(px-280,py-10,0);
    }
    
    dragScrollPrc(&xDragScrollFittingS,0,FALSE);
    
    int totalLayer = 0;
    int layerInfo[20];
    M_Boolean isAdd = FALSE;
    
    int slotCode;
    int slotNum;
    int pos;
    
    for(int i=0;i<xFitting.totalNumS;i++)
    {
        slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
        setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
        
        isAdd = FALSE;
        for(int k=0;k<totalLayer;k++)
        {
            if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
            {
                isAdd = TRUE;
                break;
            }
            else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
            {
                isAdd = TRUE;
                for(int kk=totalLayer;kk>k;kk--)
                {
                    layerInfo[kk] = layerInfo[kk-1];
                }
                layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
                totalLayer++;
                break;
            }
        }
        
        if(isAdd == FALSE)
        {
            layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
        }
    }
    
    int setClipX = px-410;
    int setClipW = 600;
    int haveNum = 0;
    
    gSetClip(true,setClipX, 0, setClipW, lcdH);
    
    for(int page=-1;page<=1;page++)
    {
        if(xDragScrollFittingS.selectNum+page >= 0 && xDragScrollFittingS.selectNum+page < xDragScrollFittingS.totalNum)
        {
            for(int i=0;i<8;i++)
            {
                if(((xDragScrollFittingS.selectNum+page)*8)+i >= xFitting.totalNumS)
                    break;
                
                pos = xDragScrollFittingS.pos+(xDragScrollFittingS.posGab*page);
                subTemp[XPOS] = px-335+pos+((i%4)*150);
                subTemp[YPOS] = py-105+((i/4)*236);
                
                slotNum = ((xDragScrollFittingS.selectNum+page)*8)+i;
                slotCode = xFitting.xSlot[xFitting.selectTabB][slotNum].code;
                drawPacker(imgProductionMenuSlot0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot0), imgH(imgProductionMenuSlot0), VH);
                
                
                
                switch(xFitting.selectTabB)
                {
                case 0:	//헤어
                    //성별
                    drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xHairData[slotCode].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
                    //아이템명
                    drawHairF(subTemp[XPOS],subTemp[YPOS], slotCode,0,80);
                    xGame.isReSizeDraw = TRUE;
                    xGame.reSize = 80;
                    drawImage(&imgFittingBodyStaff[xFitting.gender][13], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingBodyStaff[xFitting.gender][13].w, imgFittingBodyStaff[xFitting.gender][13].h, VH);
                    xGame.isReSizeDraw = FALSE;
                    drawHairF(subTemp[XPOS],subTemp[YPOS], slotCode,1,80);
                    
                    gSetColor(44, 27, 26);
                    setLabelWidth(150);
                    gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xHairData[slotCode].strName, VH);
                    setLabelWidth(0);
                    
                    drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+133, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
                    drawImage(&imgClubScoreIcon, subTemp[XPOS]-66, subTemp[YPOS]+133, 0, 0, imgClubScoreIcon.w, imgClubScoreIcon.h, VL);
                    gSetColor(44, 27, 26);
                    sprintf(strTempS, "+%d",xHairData[slotCode].clubScore);
                    gDrawString(subTemp[XPOS]+66, subTemp[YPOS]+133, strTempS, VR);
                    
                        
                    if(xClub.xMy.clubLv < xHairData[slotCode].clubLv)
                    {
                        drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                        gSetColor(255, 255, 255);
                        setFontSizeORI(20);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-11, "클럽레벨", VH);
                        sprintf(strTempS, "%d이상",xHairData[slotCode].clubLv);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]+11, strTempS, VH);
                        setFontSize(11);
                    }
                    //여기 수정해야함(머리)
                    else if(xHairData[slotCode].isClubOpen == false)
                    {
                        drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                        setFontSizeORI(20);
                        //이 바로 밑이 가격이니 DB에서 받아서 바뀌는 식으로 바꿀 것
                        if(xHairData[slotCode].clubPrice==0)
                        {
                            sprintf(strTempS, "무료");
                        }
                        
                        else
                        {
                            setCommaNum(strTempS, xHairData[slotCode].clubPrice);
                        }
                        int ww = getLabelWidth(strTempS,20, false);
                        gSetColor(255, 255, 255);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-10, "구매", VH);
                        gDrawString(subTemp[XPOS]+10, subTemp[YPOS]+40, strTempS, VH);
                        drawImage(&imgClubPointIcon, subTemp[XPOS]+10-(ww/2)-20, subTemp[YPOS]+40, 0, 0, imgClubPointIcon.w, imgClubPointIcon.h, VH);
                        setFontSize(11);
                    }
                    
                    if(xFitting.xFace.hairNum == slotCode)
                    {
                        //착용중
                        drawImage(&imgClubFitting[2], subTemp[XPOS], subTemp[YPOS]+42, 0, 0, imgClubFitting[2].w, imgClubFitting[2].h, VH);
                    }
                    break;
                case 1:	//표정
                    //성별
                    drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFaceData[slotCode].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
                    
                    //아이템명
                    drawImage(&imgFittingBodyStaff[xFaceData[slotCode].gender][13], subTemp[XPOS], subTemp[YPOS]+10, 0, 0, imgFittingBodyStaff[xFaceData[slotCode].gender][13].w, imgFittingBodyStaff[xFaceData[slotCode].gender][13].h, VH);
                    
                    drawFaceF(subTemp[XPOS],subTemp[YPOS]+10, slotCode,FACE_TYPE_NORMAL,100);
                    
                    gSetColor(44, 27, 26);
                    setLabelWidth(150);
                    gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFaceData[slotCode].strName, VH);
                    setLabelWidth(0);
                    
                    drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+133, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
                    drawImage(&imgClubScoreIcon, subTemp[XPOS]-66, subTemp[YPOS]+133, 0, 0, imgClubScoreIcon.w, imgClubScoreIcon.h, VL);
                    gSetColor(44, 27, 26);
                    sprintf(strTempS, "+%d",xFaceData[slotCode].clubScore);
                    gDrawString(subTemp[XPOS]+66, subTemp[YPOS]+133, strTempS, VR);
                    
                    
                    if(xClub.xMy.clubLv < xFaceData[slotCode].clubLv)
                    {
                        drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                        gSetColor(255, 255, 255);
                        setFontSizeORI(20);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-11, "클럽레벨", VH);
                        sprintf(strTempS, "%d이상",xFaceData[slotCode].clubLv);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]+11, strTempS, VH);
                        setFontSize(11);
                    }
                    //여기 수정해야함(표정)
                    else if(xFaceData[slotCode].isClubOpen == false)
                    {
                        drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                        setFontSizeORI(20);
                        //금액 변경
                        if(xFaceData[slotCode].clubPrice==0)
                        {
                            sprintf(strTempS, "무료");
                        }
                        
                        else
                        {
                            setCommaNum(strTempS, xFaceData[slotCode].clubPrice);
                        }

                        int ww = getLabelWidth(strTempS,20, false);
                        gSetColor(255, 255, 255);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-10, "구매", VH);
                        gDrawString(subTemp[XPOS]+10, subTemp[YPOS]+40, strTempS, VH);
                        drawImage(&imgClubPointIcon, subTemp[XPOS]+10-(ww/2)-20, subTemp[YPOS]+40, 0, 0, imgClubPointIcon.w, imgClubPointIcon.h, VH);
                        setFontSize(11);
                    }
                    
                    if(xFitting.xFace.faceNum == slotCode)
                    {
                        //착용중
                        drawImage(&imgClubFitting[2], subTemp[XPOS], subTemp[YPOS]+42, 0, 0, imgClubFitting[2].w, imgClubFitting[2].h, VH);
                    }
                    break;
                default:
                    setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
                    //성별
                    drawPacker(imgCatalogSex, subTemp[XPOS]-65,subTemp[YPOS]-65, imgW(imgCatalogSex)/2*xFashionData[xMap.type][xMap.listNum].gender, 0, imgW(imgCatalogSex)/2, imgH(imgCatalogSex), TL);
                    //아이템명
                    drawFittingF(subTemp[XPOS],subTemp[YPOS],(xMap.type*1000)+xMap.listNum,60);
                    
                    
                    gSetColor(44, 27, 26);
                    setLabelWidth(150);
                    gDrawString(subTemp[XPOS], subTemp[YPOS]+82, xFashionData[xMap.type][xMap.listNum].strName, VH);
                    setLabelWidth(0);
                        
                    //레이어드번호
                    if(totalLayer > 1)
                    {
                        drawPacker(imgFittingMenu4, subTemp[XPOS], subTemp[YPOS]+52, 0, 0, imgW(imgFittingMenu4), imgH(imgFittingMenu4), VH);
                        for(int ll=0;ll<totalLayer;ll++)
                        {
                            if(layerInfo[ll] == xFashionData[xMap.type][xMap.listNum].layer)
                            {
                                switch(ll)
                                {
                                    case 0:	sprintf(strTempS, "레이어드A");break;
                                    case 1:	sprintf(strTempS, "레이어드B");break;
                                    case 2:	sprintf(strTempS, "레이어드C");break;
                                    case 3:	sprintf(strTempS, "레이어드D");break;
                                    case 4:sprintf(strTempS, "레이어드E");break;

                                }
                                
                                gSetColor(255, 255, 255);
                                gDrawString(subTemp[XPOS], subTemp[YPOS]+52, strTempS, VH);
                                break;
                            }
                        }
                    }
                        
                    if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
                    {
                        drawImage(&imgFashionWeek[21], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFashionWeek[21].w, imgFashionWeek[21].h, VH);
                    }
                    else if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost > 0)
                    {
                        int gageW = xFashionWeekItem[xMap.type][xMap.listNum].nowCost*imgFashionWeek[7].w/xFashionData[xMap.type][xMap.listNum].clubCostMax;
                        

                        drawImage(&imgFashionWeek[7], subTemp[XPOS]-36, subTemp[YPOS]+43, 0, 0, imgFashionWeek[7].w, imgFashionWeek[7].h/2, VL);
                        drawImage(&imgFashionWeek[7], subTemp[XPOS]-36, subTemp[YPOS]+43, 0, imgFashionWeek[7].h/2, gageW, imgFashionWeek[7].h/2, VL);
                    }

                    drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+111, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
                    drawImage(&imgClubScoreIcon, subTemp[XPOS]-66, subTemp[YPOS]+111, 0, 0, imgClubScoreIcon.w, imgClubScoreIcon.h, VL);
                    gSetColor(44, 27, 26);
                    sprintf(strTempS, "+%d",xFashionData[xMap.type][xMap.listNum].clubScore);
                    gDrawString(subTemp[XPOS]+66, subTemp[YPOS]+111, strTempS, VR);
                        
                        
                    drawPacker(imgInfoBar4, subTemp[XPOS], subTemp[YPOS]+133, 0, 0, imgW(imgInfoBar4), imgH(imgInfoBar4), VH);
                    drawImage(&imgClubCostIcon, subTemp[XPOS]-66, subTemp[YPOS]+133, 0, 0, imgClubScoreIcon.w, imgClubScoreIcon.h, VL);
                    gSetColor(44, 27, 26);
                    sprintf(strTempS, "%d",xFashionData[xMap.type][xMap.listNum].clubCostMax);
                    gDrawString(subTemp[XPOS]+66, subTemp[YPOS]+133, strTempS, VR);
                     
                    if(xClub.xMy.clubLv < xFashionData[xMap.type][xMap.listNum].clubLv)
                    {
                        drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                        gSetColor(255, 255, 255);
                        setFontSizeORI(20);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-11, "클럽레벨", VH);
                        sprintf(strTempS, "%d이상",xFashionData[xMap.type][xMap.listNum].clubLv);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]+11, strTempS, VH);
                        setFontSize(11);
                    }
                    //수정해야함 표정과 머리를 제외한 의상들....
                    else if(xFashionWeekItem[xMap.type][xMap.listNum].isOpen == false)
                    {
                        drawPacker(imgProductionMenuSlot3, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot3), imgH(imgProductionMenuSlot3), VH);
                        setFontSizeORI(20);
                        //금액 수정하는 부분
                        if(xFashionData[xMap.type][xMap.listNum].clubPrice==0)
                        {
                            sprintf(strTempS, "무료");
                        }
                        
                        else
                        {
                            setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].clubPrice);
                        }
                        int ww = getLabelWidth(strTempS,20, false);
                        gSetColor(255, 255, 255);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-10, "구매", VH);
                        gDrawString(subTemp[XPOS]+10, subTemp[YPOS]+40, strTempS, VH);
                        drawImage(&imgClubPointIcon, subTemp[XPOS]+10-(ww/2)-20, subTemp[YPOS]+40, 0, 0, imgClubPointIcon.w, imgClubPointIcon.h, VH);
                        setFontSize(11);
                    }
                    //장착중임
                    else if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == slotCode)
                    {
                        drawImage(&imgClubFitting[2], subTemp[XPOS], subTemp[YPOS]+42, 0, 0, imgClubFitting[2].w, imgClubFitting[2].h, VH);
                    }
                    else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
                    {
                        drawPacker(imgProductionMenuSlot2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgProductionMenuSlot2), imgH(imgProductionMenuSlot2), VH);
                        gSetColor(255, 0, 0);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-13, "피팅불가", VH);
                        gSetColor(255, 255, 255);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]+25, "현재 착용중인\n레이어드", VH);
                    }
                    break;
                }
                
                if(page == 0)
                {
                    xTouchFittingS[i].wPos = 150;
                    xTouchFittingS[i].hPos = 220;
                    xTouchFittingS[i].xPos = subTemp[XPOS] - xTouchFittingS[i].wPos/2;
                    xTouchFittingS[i].yPos = subTemp[YPOS]+50 - xTouchFittingS[i].hPos/2;
                    /*
                     gSetColor(255, 0, 0);
                     setAlpha(100);
                     fillRect(xTouchFittingS[0].xPos, xTouchFittingS[0].yPos, xTouchFittingS[0].wPos, xTouchFittingS[0].hPos);
                     setAlpha(ALPHA_MAX);
                     */
                }
            }
        }
    }
    gSetClip(false,0, 0, lcdW, lcdH);
    
    subTemp[XPOS] = px-108-335-3;
    subTemp[YPOS] = py+50;
    if(xDragScrollFittingS.selectNum > 0)
        drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
    
    xNoticeWorldMap.xTouchLeft.wPos = 80;
    xNoticeWorldMap.xTouchLeft.hPos = 80;
    xNoticeWorldMap.xTouchLeft.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchLeft.wPos/2;
    xNoticeWorldMap.xTouchLeft.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchLeft.hPos/2;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xNoticeWorldMap.xTouchLeft.xPos, xNoticeWorldMap.xTouchLeft.yPos, xNoticeWorldMap.xTouchLeft.wPos, xNoticeWorldMap.xTouchLeft.hPos);
     setAlpha(ALPHA_MAX);
     */
    
    
    
    subTemp[XPOS] = px-108+335;
    subTemp[YPOS] = py+50;
    if(xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
        drawPacker(imgWorldMapNotice2, subTemp[XPOS], subTemp[YPOS], imgW(imgWorldMapNotice2)/2, 0, imgW(imgWorldMapNotice2)/2, imgH(imgWorldMapNotice2), VH);
    
    xNoticeWorldMap.xTouchRight.wPos = 80;
    xNoticeWorldMap.xTouchRight.hPos = 80;
    xNoticeWorldMap.xTouchRight.xPos = subTemp[XPOS]-xNoticeWorldMap.xTouchRight.wPos/2;
    xNoticeWorldMap.xTouchRight.yPos = subTemp[YPOS]-xNoticeWorldMap.xTouchRight.hPos/2;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xNoticeWorldMap.xTouchRight.xPos, xNoticeWorldMap.xTouchRight.yPos, xNoticeWorldMap.xTouchRight.wPos, xNoticeWorldMap.xTouchRight.hPos);
     setAlpha(ALPHA_MAX);
     */
    
    subTemp[XPOS] = px+356;
    subTemp[YPOS] = py+25;
    
    xTouchFittingMenu[0].wPos = 200;
    xTouchFittingMenu[0].hPos = 300;
    xTouchFittingMenu[0].xPos = subTemp[XPOS]+50-xTouchFittingMenu[0].wPos/2;
    xTouchFittingMenu[0].yPos = subTemp[YPOS]-xTouchFittingMenu[0].hPos/2;
    
    //넣어입기 빼입기
    if(xFitting.isInOutMenu == TRUE)
    {
        if(++xFitting.inOutCnt > 150)
            xFitting.isInOutMenu = FALSE;
        
        drawPacker(imgFittingMenu0, subTemp[XPOS]-130+10, subTemp[YPOS], 0, 0, imgW(imgFittingMenu0), imgH(imgFittingMenu0), VH);
        
        drawPacker(imgPopupBtnS1, subTemp[XPOS]-130, subTemp[YPOS]-26, 0, imgH(imgPopupBtnS1)/2, imgW(imgPopupBtnS1), imgH(imgPopupBtnS1)/2, VH);
        gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]-26, "넣어입기", VH, 255, 255, 255, 21, 97, 96);
        drawPacker(imgPopupBtnS2, subTemp[XPOS]-130, subTemp[YPOS]+26, 0, imgH(imgPopupBtnS2)/2, imgW(imgPopupBtnS2), imgH(imgPopupBtnS2)/2, VH);
        gDrawStringBold(subTemp[XPOS]-130, subTemp[YPOS]+26, "빼입기", VH, 255, 255, 255, 77, 77, 77);
        
        
        xTouchFittingMenu[1].wPos = imgW(imgPopupBtnS1);
        xTouchFittingMenu[1].hPos = imgH(imgPopupBtnS1)/2;
        xTouchFittingMenu[1].xPos = subTemp[XPOS]-130-xTouchFittingMenu[1].wPos/2;
        xTouchFittingMenu[1].yPos = subTemp[YPOS]-26-xTouchFittingMenu[1].hPos/2;
        
        xTouchFittingMenu[2].wPos = imgW(imgPopupBtnS2);
        xTouchFittingMenu[2].hPos = imgH(imgPopupBtnS2)/2;
        xTouchFittingMenu[2].xPos = subTemp[XPOS]-130-xTouchFittingMenu[2].wPos/2;
        xTouchFittingMenu[2].yPos = subTemp[YPOS]+26-xTouchFittingMenu[2].hPos/2;
        
    }
    
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xTouchFittingMenu[0].xPos, xTouchFittingMenu[0].yPos, xTouchFittingMenu[0].wPos, xTouchFittingMenu[0].hPos);
     fillRect(xTouchFittingMenu[1].xPos, xTouchFittingMenu[1].yPos, xTouchFittingMenu[1].wPos, xTouchFittingMenu[1].hPos);
     fillRect(xTouchFittingMenu[2].xPos, xTouchFittingMenu[2].yPos, xTouchFittingMenu[2].wPos, xTouchFittingMenu[2].hPos);
     setAlpha(ALPHA_MAX);
     */
    
    subTemp[XPOS] = px+471;
    subTemp[YPOS] = py-282;
    
    drawPacker(imgBtn0, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgBtn0), imgH(imgBtn0)/2, VH);
    
    xTouchClr.wPos = imgW(imgBtn0);
    xTouchClr.hPos = imgH(imgBtn0)/2;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    
    
    subTemp[XPOS] = px+350;
    subTemp[YPOS] = py-270;
    
    drawImage(&imgClubWealth, subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubWealth.w, imgClubWealth.h, VH);
    gSetColor(255, 255, 255);
    setFontSizeORI(18);
    setCommaNum(strTempS, xClub.money);
    
    gDrawString(subTemp[XPOS]+55, subTemp[YPOS]-5, strTempS, VR);
    setFontSize(11);
}



void keyFitting_FASHIONWEEK(int type, int param1, int param2)
{
    if(touchType == USER_POINT_PRESS_EVENT)
    {
        bool isKeyEvent = FALSE;
        int keyEventNum = 0;
        for(int i=0;i<FITTINGTABMAX+2;i++)
        {
            if(touchCheck(&xTouchFittingTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isKeyEvent = TRUE;
                keyEventNum = i;
                break;
            }
        }
        
        if(isKeyEvent == TRUE)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFitting.selectTabB = keyEventNum;
            setFittingTabChange();
        }
        else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            
            //넣어입기
            xFitting.xF[xFitting.gender].isInFitting = TRUE;
            xFitting.isInOutMenu = FALSE;
            xWorldMap.isKeyReturn = TRUE;
        }
        else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            
            //빼입기
            xFitting.xF[xFitting.gender].isInFitting = FALSE;
            xFitting.isInOutMenu = FALSE;
            xWorldMap.isKeyReturn = TRUE;
        }
        else if(xFitting.isInOutMenu == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xFitting.isInOutMenu = FALSE;
            xFitting.inOutCnt = 0;
            xWorldMap.isKeyReturn = TRUE;
        }
        else if(touchCheck(&xTouchFittingMenu[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xFitting.isInOutMenu = xFitting.isInOutMenu == FALSE?TRUE:FALSE;
            xFitting.inOutCnt = 0;
            xWorldMap.isKeyReturn = TRUE;
        }
        else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_LOBBY;
        }
        else if(touchCheck(&xTouchGenderLeft) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFitting.gender = 0;
            setFittingTabChange();
            
            if(xFitting.gender == xClub.xMy.gender)
            {
                memcpy(&xFitting.xFace, &xClub.xMy.xFace, sizeof(xClub.xMy.xFace));
            }
            else
            {
                xFitting.xFace.hairNum = STAFF0_HAIRCODE;
                xFitting.xFace.faceNum = STAFF0_FACECODE;
            }
        }
        else if(touchCheck(&xTouchGenderRight) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFitting.gender = 1;
            setFittingTabChange();
            
            if(xFitting.gender == xClub.xMy.gender)
            {
                memcpy(&xFitting.xFace, &xClub.xMy.xFace, sizeof(xClub.xMy.xFace));
            }
            else
            {
                xFitting.xFace.hairNum = STAFF1_HAIRCODE;
                xFitting.xFace.faceNum = STAFF1_FACECODE;
            }
            
        }
        else if(touchCheck(&xTouchFittingReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            //실제 피팅 내용 쇼윈도에 적용하기
            for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
            {
                xFitting.xF[0].code[ff] = DONT;
                xFitting.xF[1].code[ff] = DONT;
            }
        }
        else if(touchCheck(&xTouchFittingSave) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;

            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_LOBBY;
            xClub.xMy.gender = xFitting.gender;
            memcpy(&xClub.xMy.xFace, &xFitting.xFace, sizeof(xFitting.xFace));
            memcpy(&xClub.xMy.xF, &xFitting.xF[xFitting.gender], sizeof(xFitting.xF[xFitting.gender]));
            
            //////////////////////////////////////////////////////////////////////////////////////////
            xFashionWeek.isNet_FittingUpdate = true;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKFITTINGUPDATE, TRUE);
            //////////////////////////////////////////////////////////////////////////////////////////
            
            setFashionStudioSlot();
            
            xFashionWeek.isNet_Score = true;
            //////////////////////////////////////////////////////////////////////////////////////////
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FASHIONWEEKSCOREUPDATE, TRUE);
            //////////////////////////////////////////////////////////////////////////////////////////
            
            
            //////////////////////////////////////////////////////////////////////////////////////////
            xFashionWeek.isNet_Ranking = true;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBRANKLIST, TRUE);
            //////////////////////////////////////////////////////////////////////////////////////////
            
            
        }
        else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollFittingS.selectNum > 0)
        {
            xDragScrollFittingS.speed = 320;
        }
        else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
        {
            xDragScrollFittingS.speed = -320;
        }
        else
        {
            if(xDragScrollFittingS.pos == 0 && xDragScrollFittingS.speed == 0)
            {
                bool isSelectCatalogS = FALSE;
                int selectCatalogSNum = 0;
                for(int i=0;i<8;i++)
                {
                    if(touchCheck(&xTouchFittingS[i]) == TRUE)
                    {
                        isSelectCatalogS = TRUE;
                        selectCatalogSNum = i;
                        break;
                    }
                }
                if(selectCatalogSNum+(xDragScrollFittingS.selectNum*8) >= xFitting.totalNumS)
                    isSelectCatalogS = FALSE;
                    
                int selectFittingTemp = selectCatalogSNum+(xDragScrollFittingS.selectNum*8);
                
                if(isSelectCatalogS == TRUE)
                {
                    playSnd(SND_FITTING);
                    int totalLayer = 0;
                    int layerInfo[20];
                    int slotCode;
                    M_Boolean isAdd = FALSE;
                    xFitting.selectSlot = selectFittingTemp;
                    
                    switch(xFitting.selectTabB)
                    {
                    case 0:	//헤어
                        slotCode = xFitting.xSlot[xFitting.selectTabB][xFitting.selectSlot].code;
                            
                        if(xFitting.xFace.hairNum != slotCode)
                        {
                            if(xClub.xMy.clubLv < xHairData[slotCode].clubLv)
                            {
                            }
                            else if(xHairData[slotCode].isClubOpen == false)
                            {
                                setPopup(POPUP_FASHIONWEEKHAIRBUY, PLAY_PLAY, PLAY_PLAY, 0, slotCode);
                            }
                            else
                                xFitting.xFace.hairNum = slotCode;
                        }
                        break;
                    case 1:	//표정
                        slotCode = xFitting.xSlot[xFitting.selectTabB][xFitting.selectSlot].code;
                            
                        if(xFitting.xFace.faceNum != slotCode)
                        {
                            if(xClub.xMy.clubLv < xFaceData[slotCode].clubLv)
                            {
                            }
                            else if(xFaceData[slotCode].isClubOpen == false)
                            {
                                setPopup(POPUP_FASHIONWEEKFACEBUY, PLAY_PLAY, PLAY_PLAY, 0, slotCode);
                            }
                            else
                                xFitting.xFace.faceNum = slotCode;
                        }
                        break;
                    default:
                        for(int i=0;i<xFitting.totalNumS;i++)
                        {
                            slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
                            setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
                            
                            isAdd = FALSE;
                            for(int k=0;k<totalLayer;k++)
                            {
                                if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
                                {
                                    isAdd = TRUE;
                                    break;
                                }
                                else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
                                {
                                    isAdd = TRUE;
                                    for(int kk=totalLayer;kk>k;kk--)
                                    {
                                        layerInfo[kk] = layerInfo[kk-1];
                                    }
                                    layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
                                    totalLayer++;
                                    break;
                                }
                            }
                            
                            if(isAdd == FALSE)
                            {
                                layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
                            }
                        }
                        
                        
                        setMapData(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
                        //실제적인 처리를 해주자
                        
                            
                        //선택된게 장착중일때는 바로 해제
                        if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code)
                        {
                            xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = DONT;
                            xFitting.selectSlot = DONT;
                        }
                        //선택된곳에 이미 다른레이어 존재
                        else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
                        {
                            
                        }
                        else if(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].isModelUse == TRUE)
                        {
                            
                        }
                        else if(xClub.xMy.clubLv < xFashionData[xMap.type][xMap.listNum].clubLv)
                        {
                        }
                        /*else if(true)
                        {
                            setPopup(POPUP_USERTEXT,PLAY_PLAY,PLAY_PLAY,0,DONT);
                            
                        }*/
                        
                            
                        else if(xFashionWeekItem[xMap.type][xMap.listNum].isOpen == false)
                        {
                            setPopup(POPUP_FASHIONWEEKFASHIONBUY, PLAY_PLAY, PLAY_PLAY, 0, xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code);
                        }
                        //선택이 되어있다면 무언가 있다면 변경
                        else if(xFitting.selectSlot == selectFittingTemp && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
                        {
                            xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
                            xFitting.selectSlot = DONT;
                        }
                        else if(xFitting.xF[xFitting.gender].layeredNum >= xClub.xData[xClub.xMy.clubLv].layeredMax)
                        {
                            setPopup(POPUP_FITTING_LAYEREDERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
                            xFitting.selectSlot = DONT;
                        }
                        //장착할려는 부위에 아무것도 없다면 바로 장착
                        else if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == DONT)
                        {
                            xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
                        }
                        //선택이 안되어있다면 그냥 선택으로만
                        else
                        {
                            xFitting.selectSlot = selectFittingTemp;
                        }
                        break;
                    }
                }
            }
        }
    }
}


void drawFashionWeekSetting()
{
    int px = cx;
    int py = cy;
    
    
    drawImage(&imgClubList[0], px, py, 0, 0, imgClubList[0].w, imgClubList[0].h, VH);
    
    
    
    for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
    {
        
        if(xFashionWeekModel[k].studioSlotNum != DONT)
        {
            if(xFashionStudio.itemCode[xFashionWeekModel[k].studioSlotNum] == DONT)
                xFashionWeekModel[k].studioSlotNum = DONT;
            else
            {
                setMapData(xFashionStudio.itemCode[xFashionWeekModel[k].studioSlotNum]);
                if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
                {
                    xFashionWeekModel[k].studioSlotNum = DONT;
                }
            }
        }
    }
    
    
    
    for(int k=0;k<CLUBMENUMAX;k++)
    {
        subTemp[XPOS] = px-500+(k*112);
        subTemp[YPOS] = py+268;
        
        drawImage(&imgClubMenu[k], subTemp[XPOS], subTemp[YPOS], 0, imgClubMenu[k].h/2*(xClubLobby.selectMenu == k?1:0), imgClubMenu[k].w, imgClubMenu[k].h/2, VH);
        
        xClubLobby.xTouchClubMenu[k].wPos = imgClubMenu[k].w;
        xClubLobby.xTouchClubMenu[k].hPos = imgClubMenu[k].h/2;
        xClubLobby.xTouchClubMenu[k].xPos = subTemp[XPOS]-xClubLobby.xTouchClubMenu[k].wPos/2;
        xClubLobby.xTouchClubMenu[k].yPos = subTemp[YPOS]-xClubLobby.xTouchClubMenu[k].hPos/2;
    }
    
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    
    xClubLobby.xTouchExit.wPos = 80;
    xClubLobby.xTouchExit.hPos = 80;
    xClubLobby.xTouchExit.xPos = subTemp[XPOS]-xClubLobby.xTouchExit.wPos/2;
    xClubLobby.xTouchExit.yPos = subTemp[YPOS]-xClubLobby.xTouchExit.hPos/2;
    
    for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
    {
        subTemp[XPOS] = px-450+(k*130);
        subTemp[YPOS] = py-42;
        //빈슬롯
        int invenModelSlot = DONT;
        if(xFashionWeekModel[k].modelKey == DONT)
            invenModelSlot = DONT;
        else
        {
            invenModelSlot = getModelKeyToSlotNum(xFashionWeekModel[k].modelKey);
        }
        
        int scoreBuff = 0;
        int timeBuff = 0;
        if(invenModelSlot == DONT)
        {
            drawImage(&imgFashionWeek[14] ,subTemp[XPOS], subTemp[YPOS]-10, 0, 0, imgFashionWeek[14].w, imgFashionWeek[14].h, VH);
        }
        else
        {
            int code = xInventoryModel[invenModelSlot].code;            
            XFACE xFaceTemp;
            xFaceTemp.hairNum = code+1000;
            xFaceTemp.faceNum = code+1000;
            xFaceTemp.faceType = FACE_TYPE_NORMAL;
            
            
            
            xGame.fgameScale = 0.8f;
            xGame.fgameScaleCx = subTemp[XPOS];
            xGame.fgameScaleCy = lcdH-(subTemp[YPOS]-10);
            drawFittingBody(subTemp[XPOS], subTemp[YPOS]-10,&xInventoryModel[invenModelSlot].xF,&xFaceTemp,TRUE,xModelData[code].sex);
            xGame.fgameScaleCx = cx;
            xGame.fgameScaleCy = cy;
            xGame.fgameScale = 1.0f;
            
            
            //피팅하기
            drawImage(&imgFashionWeek[24], subTemp[XPOS]+36, subTemp[YPOS]+80, 0, 0, imgFashionWeek[24].w, imgFashionWeek[24].h, VH);
            
            xFashionWeekSetting.xTouchFittingSlot[k].wPos = imgFashionWeek[24].w;
            xFashionWeekSetting.xTouchFittingSlot[k].hPos = imgFashionWeek[24].h;
            xFashionWeekSetting.xTouchFittingSlot[k].xPos = subTemp[XPOS]+36-xFashionWeekSetting.xTouchFittingSlot[k].wPos/2;
            xFashionWeekSetting.xTouchFittingSlot[k].yPos = subTemp[YPOS]+80-xFashionWeekSetting.xTouchFittingSlot[k].wPos/2;
            
            
            scoreBuff = getPangBuffScore(xFashionWeekModel[k].modelKey);
            timeBuff = getPangBuffTime(xFashionWeekModel[k].modelKey);
        }
        
        //캐릭터정보
        drawImage(&imgFashionWeek[23], subTemp[XPOS], subTemp[YPOS]+140, 0, 0, imgFashionWeek[23].w, imgFashionWeek[23].h, VH);
        setFontSizeORI(18);
        gSetColor(88, 64, 38);
        if(invenModelSlot == DONT)
            sprintf(strTempS, "없음");
        else
            sprintf(strTempS, "+%d%%",scoreBuff);
            
        gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+140-16, strTempS, VR);
        if(invenModelSlot == DONT)
            sprintf(strTempS, "없음");
        else
            sprintf(strTempS, "+%d초",timeBuff);
        
        gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+140+8, strTempS, VR);
        setFontSize(11);
        
        
        xFashionWeekSetting.xTouchModelSlot[k].wPos = imgFashionWeek[14].w;
        xFashionWeekSetting.xTouchModelSlot[k].hPos = imgFashionWeek[14].h;
        xFashionWeekSetting.xTouchModelSlot[k].xPos = subTemp[XPOS]-xFashionWeekSetting.xTouchModelSlot[k].wPos/2;
        xFashionWeekSetting.xTouchModelSlot[k].yPos = subTemp[YPOS]-10-xFashionWeekSetting.xTouchModelSlot[k].hPos/2;
        
        //팡타입슬롯
        drawImage(&imgFashionWeek[15] ,subTemp[XPOS], subTemp[YPOS]-177, 0, 0, imgFashionWeek[15].w, imgFashionWeek[15].h, VH);
        xGame.isReSizeDraw = true;
        xGame.reSize = 50;
        drawImage(&imgPangObj, subTemp[XPOS], subTemp[YPOS]-177, 0, imgPangObj.h/5*k, imgPangObj.w, imgPangObj.h/5, VH);
        xGame.isReSizeDraw = false;
        
        //의상슬롯
        drawImage(&imgFashionWeek[16] ,subTemp[XPOS], subTemp[YPOS]+206, 0, 0, imgFashionWeek[16].w, imgFashionWeek[16].h, VH);
        
        if(xFashionWeekModel[k].studioSlotNum != DONT)
        {
            if(xFashionStudio.itemCode[xFashionWeekModel[k].studioSlotNum] != DONT)
            {
                setMapData(xFashionStudio.itemCode[xFashionWeekModel[k].studioSlotNum]);
                drawFittingF(subTemp[XPOS],subTemp[YPOS]+206,(xMap.type*1000)+xMap.listNum,40);
            }
        }
        

        xFashionWeekSetting.xTouchItemSlot[k].wPos = imgFashionWeek[16].w;
        xFashionWeekSetting.xTouchItemSlot[k].hPos = imgFashionWeek[16].h;
        xFashionWeekSetting.xTouchItemSlot[k].xPos = subTemp[XPOS]-xFashionWeekSetting.xTouchItemSlot[k].wPos/2;
        xFashionWeekSetting.xTouchItemSlot[k].yPos = subTemp[YPOS]+206-xFashionWeekSetting.xTouchItemSlot[k].hPos/2;
    }
    
    /////////패션스튜디오
    drawFashionStudio();
    
    
    
    
    
    
    
    
    
    
}



void keyFashionWeekSetting(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        bool isClubMenu = false;
        int selectClubMenu = 0;
        for(int k=0;k<CLUBMENUMAX;k++)
        {
            if(touchCheck(&xClubLobby.xTouchClubMenu[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isClubMenu = true;
                selectClubMenu = k;
                break;
            }
        }
        
        bool isFashionStudio = false;
        int selectFashionStudio = 0;
        
        for(int k=0;k<FASHIONSTUDIOMAX;k++)
        {
            if(touchCheck(&xFashionWeekLobby.xTouchStudioSlot[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isFashionStudio = true;
                selectFashionStudio = k;
                break;
            }
        }
        
        
        bool isModelSlot = false;
        int selectModelSlot = 0;
        for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
        {
            if(touchCheck(&xFashionWeekSetting.xTouchModelSlot[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isModelSlot = true;
                selectModelSlot = k;
                break;
            }
        }
        
        bool isItemSlot = false;
        int selectItemSlot = 0;
        for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
        {
            if(touchCheck(&xFashionWeekSetting.xTouchItemSlot[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isItemSlot = true;
                selectItemSlot = k;
                break;
            }
        }
        
        
        bool isFittingSlot = false;
        int selectFittingSlot = 0;
        for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
        {
            if(touchCheck(&xFashionWeekSetting.xTouchFittingSlot[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isFittingSlot = true;
                selectFittingSlot = k;
                break;
            }
        }
        
        if(isFittingSlot == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekSetting.selectModelSlot = selectFittingSlot;
            int invelModelSlot = getModelKeyToSlotNum(xFashionWeekModel[xFashionWeekSetting.selectModelSlot].modelKey);
            
            if(invelModelSlot != DONT)
            {
                xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_SETTING_FITTING;
                xModel.inventoryNum = invelModelSlot;
                xModelFitting.inventoryNum = invelModelSlot;
                
                xFitting.gender = xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex;
                memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModelFitting.inventoryNum].xF,sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
                setFittingTabChange();

            }
            
            
        }
        else if(isModelSlot == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_SELECTMODEL;
            xFashionWeekSetting.selectModelSlot = selectModelSlot;
        }
        else if(isItemSlot == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekModel[selectItemSlot].studioSlotNum = DONT;
        }
        else if(isClubMenu == true && xClubLobby.selectMenu != selectClubMenu)
        {
            switch(selectClubMenu)
            {
            case CLUBLOBBY_MENU_MAIN:
                xClubLobby.selectMenu = selectClubMenu;
                break;
                case CLUBLOBBY_MENU_SHOP:
                if(xClubShop.OnOff==1)
                {
                    //                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    //                        sprintf(xPopup.strText, "업데이트 예정 입니다.");
                    xClubLobby.selectMenu = selectClubMenu;
                    initClubShop();
                    clubShopFreeLoad(true);
                }
                else
                {
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "임시 잠금상태 입니다.");
                }
                break;

            default:
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText, "업데이트 예정 입니다.");
                break;
            }
        }
        else if(touchCheck(&xClubLobby.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_LOBBY;
        }
        else if(isFashionStudio == true)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionStudio.selectInfoSlot = selectFashionStudio;
            if(xFashionStudio.itemCode[xFashionStudio.selectInfoSlot] != DONT)
            {
                setMapData(xFashionStudio.itemCode[xFashionStudio.selectInfoSlot]);
                if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost < xFashionData[xMap.type][xMap.listNum].clubCostMax)
                {
                    for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
                    {
                        if(xFashionWeekModel[k].studioSlotNum == DONT)
                        {
                            xFashionWeekModel[k].studioSlotNum = xFashionStudio.selectInfoSlot;
                            break;
                        }
                    }
                }
                else
                {
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "제작완료된 의상은\n장착하실수 없습니다.");
                }
            }
        }
        else if(touchCheck(&xFashionWeekLobby.xTouchStart) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            
            bool isSettingErr = false;
            for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
            {
                if(xFashionWeekModel[k].studioSlotNum == DONT)
                {
                    isSettingErr = true;
                    break;
                }
            }
            
            if(xClub.fashionWeekPlayCount <= 0)
            {
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText, "하루 가능한 횟수를 초과하였습니다.");
            }
            else if(isSettingErr == true)
            {
                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                sprintf(xPopup.strText, "비어있는 의상슬롯이 있습니다.");
            }
            else
            {
                xFashionWeek.isNet_PangStart = true;
                //////////////////////////////////////////////////////////////////////////////////////////
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_PANGSTART, TRUE);
                //////////////////////////////////////////////////////////////////////////////////////////
            }
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        
    }
}



void drawFashionWeekSelectModel()
{
    int px = cx;
    int py = cy-30;
    xModel.totalListNum = 0;
    
    for(int i=0;i<xModel.totalInventoryModel;i++)
    {
        M_Boolean isCheck = FALSE;
        for(int k=0;k<MODELMAINSLOTMAX;k++)
        {
            switch(xModelMainSlot[k].state)
            {
                case MODELMAINSLOT_STATE_WAIT:
                case MODELMAINSLOT_STATE_PLAY:
                    xModelMainSlot[k].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[k].modelKey);
                    if(xModelMainSlot[k].inventoryNum == i)
                        isCheck = TRUE;
                    break;
            }
            
        }
        if(isCheck == FALSE)
            xModel.listNumSlot[xModel.totalListNum++] = i;
    }
    
    gSetColor(0, 0, 0);
    fillRect(0, 0, lcdW, lcdH);
    drawPacker(imgModelBg0, px, py, 0, 0, imgW(imgModelBg0), imgH(imgModelBg0), VH);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py-222;
    
    //타이틀
    sprintf(strTempS, "배치하실 모델을 선택해 주세요");
    setFontSize(20);
    gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VH, 86, 255, 220, 33, 20, 20);
    setFontSize(11);
    
    //세부메뉴
    xModel.xDragScrollS.totalNum = xModel.totalListNum;
    xModel.xDragScrollS.posGab = 190;
    xModel.xDragScrollS.endPos = -(((xModel.xDragScrollS.totalNum-5)*xModel.xDragScrollS.posGab));
    if(xModel.xDragScrollS.totalNum < 5)
        xModel.xDragScrollS.endPos = 0;
    
    dragScrollPrc(&xModel.xDragScrollS,1,FALSE);
    int iMax = xModel.xDragScrollS.totalNum;
    
    int slotNum;
    int code;
    int upGrade;
    int pos;
    for(int i=0;i<iMax;i++)
    {
        pos = xModel.xDragScrollS.pos+(xModel.xDragScrollS.posGab*i);
        subTemp[XPOS] = px-380+pos;
        subTemp[YPOS] = py;
        
        if(subTemp[XPOS] < -xModel.xDragScrollS.posGab)
            continue;
        if(subTemp[XPOS] > lcdW+xModel.xDragScrollS.posGab)
            continue;
        
        slotNum = xModel.listNumSlot[i];
        code = xInventoryModel[slotNum].code;
        upGrade = xInventoryModel[slotNum].upGrade;
        
        XFACE xFaceTemp;
        xFaceTemp.hairNum = code+1000;
        xFaceTemp.faceNum = code+1000;
        xFaceTemp.faceType = FACE_TYPE_NORMAL;
        
        drawFittingBody(subTemp[XPOS], subTemp[YPOS]+25,&xInventoryModel[slotNum].xF,&xFaceTemp,TRUE,xModelData[xInventoryModel[slotNum].code].sex);
        
        //캐릭터정보
        drawImage(&imgFashionWeek[23], subTemp[XPOS], subTemp[YPOS]+230, 0, 0, imgFashionWeek[23].w, imgFashionWeek[23].h, VH);
        setFontSizeORI(18);
        gSetColor(88, 64, 38);
        
        sprintf(strTempS, "+%d%%",getPangBuffScore(xInventoryModel[slotNum].key));
        gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+230-16, strTempS, VR);
        sprintf(strTempS, "+%d초",getPangBuffTime(xInventoryModel[slotNum].key));
        gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+230+8, strTempS, VR);
        setFontSize(11);
        
        if(getModelMainSlot_FASHIONWEEK(xInventoryModel[slotNum].key) != DONT)
        {
            int fsInfoW = 0;
            int fsInfoH = 0;
            
            switch(gameCnt%29)
            {
            case 0:fsInfoW =0;fsInfoH =	0;break;
            case 1:fsInfoW =-0.026;fsInfoH =	0.024;break;
            case 2:fsInfoW =-0.116;fsInfoH =	0.105;break;
            case 3:fsInfoW =-0.294;fsInfoH =	0.265;break;
            case 4:fsInfoW =-0.6;fsInfoH =	0.541;break;
            case 5:fsInfoW =-1.12;fsInfoH =	1.01;break;
            case 6:fsInfoW =-2.087;fsInfoH =	1.883;break;
            case 7:fsInfoW =-7.291;fsInfoH =	6.575;break;
            case 8:fsInfoW =-12.493;fsInfoH =	11.267;break;
            case 9:fsInfoW =-13.46;fsInfoH =	12.139;break;
            case 10:fsInfoW =-13.978;fsInfoH =	12.606;break;
            case 11:fsInfoW =-14.288;fsInfoH =	12.886;break;
            case 12:fsInfoW =-14.468;fsInfoH =	13.048;break;
            case 13:fsInfoW =-14.561;fsInfoH =	13.132;break;
            case 14:fsInfoW =-14.592;fsInfoH =	13.16;break;
            case 15:fsInfoW =-14.566;fsInfoH =	13.137;break;
            case 16:fsInfoW =-14.475;fsInfoH =	13.054;break;
            case 17:fsInfoW =-14.298;fsInfoH =	12.895;break;
            case 18:fsInfoW =-13.992;fsInfoH =	12.619;break;
            case 19:fsInfoW =-13.473;fsInfoH =	12.15;break;
            case 20:fsInfoW =-12.504;fsInfoH =	11.277;break;
            case 21:fsInfoW =-7.302;fsInfoH =	6.585;break;
            case 22:fsInfoW =-2.098;fsInfoH =	1.892;break;
            case 23:fsInfoW =-1.132;fsInfoH =	1.021;break;
            case 24:fsInfoW =-0.611;fsInfoH =	0.551;break;
            case 25:fsInfoW =-0.301;fsInfoH =	0.272;break;
            case 26:fsInfoW =-0.12;fsInfoH =	0.108;break;
            case 27:fsInfoW =-0.027;fsInfoH =	0.025;break;
            case 28:fsInfoW =0;fsInfoH =	0;break;
            }
            drawPacker(imgTutoInfo7, subTemp[XPOS], subTemp[YPOS]-180+fsInfoH, 0, 0, imgW(imgTutoInfo7), imgH(imgTutoInfo7), VH);
            drawPacker(imgModelGuestSlot, subTemp[XPOS], subTemp[YPOS]-150, 0, 0, imgW(imgModelGuestSlot), imgH(imgModelGuestSlot), VH);
        }
        
        
        subTemp[YPOS] += 145;
        
        xGame.fgameScaleCx = subTemp[XPOS];
        xGame.fgameScaleCy = lcdH-subTemp[YPOS];
        xGame.fgameScale = 0.7f;
        
        
        switch(xModelData[code].grade)
        {
        case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
        case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
        case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
        case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
        }
        
        for(int k=0;k<xModelData[code].upGradeMax;k++)
        {
            if(upGrade > k)
                drawPacker(imgModelLv, subTemp[XPOS]-23+12+(24*k), subTemp[YPOS], imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
            else
                drawPacker(imgModelLv, subTemp[XPOS]-23+12+(24*k), subTemp[YPOS], 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
        }
        drawModelName(subTemp[XPOS]+25+12, subTemp[YPOS]+37,code);
        
        xGame.fgameScaleCx = cx;
        xGame.fgameScaleCy = cy;
        xGame.fgameScale = 1.0f;
    }
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    subTemp[XPOS] = px-380;
    subTemp[YPOS] = py+30;
    xModel.xDragScrollS.selectNum = (-xModel.xDragScrollS.pos/xModel.xDragScrollS.posGab);
    for(int i=0;i<=6;i++)
    {
        xModel.xTouchSelectSlot[i].wPos = xModel.xDragScrollS.posGab-4;
        xModel.xTouchSelectSlot[i].hPos = 420;
        xModel.xTouchSelectSlot[i].xPos = subTemp[XPOS]+(xModel.xDragScrollS.posGab*i)+(xModel.xDragScrollS.pos%xModel.xDragScrollS.posGab) - xModel.xTouchSelectSlot[i].wPos/2;
        xModel.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xModel.xTouchSelectSlot[i].hPos/2;
        
        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xModel.xTouchSelectSlot[i].xPos, xModel.xTouchSelectSlot[i].yPos, xModel.xTouchSelectSlot[i].wPos, xModel.xTouchSelectSlot[i].hPos);
         setAlpha(ALPHA_MAX);
         */
    }
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-232;
    
    xTouchClr.wPos = 80;
    xTouchClr.hPos = 80;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
     setAlpha(ALPHA_MAX);
     */
    
}

void keyFashionWeekSelectModel(int type, int param1, int param2)
{
    bool isKeyEvent = FALSE;
    int keyEventNum = 0;
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_SETTING;
        }
        else
        {
            dragScrollKeyPrc(&xModel.xDragScrollS,0);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xModel.xDragScrollS.touchXposBefore != DONT)
        {
            dragScrollKeyPrc(&xModel.xDragScrollS,1);
        }
        else
        {
            isKeyEvent = FALSE;
            keyEventNum = 0;
            
            for(int i=0;i<6;i++)
            {
                if(touchCheck(&xModel.xTouchSelectSlot[i]) == TRUE)
                {
                    isKeyEvent = TRUE;
                    keyEventNum = i;
                    break;
                }
            }
            
            xModel.selectListSlot = keyEventNum+xModel.xDragScrollS.selectNum;
            
            if(xModel.selectListSlot < 0 || xModel.selectListSlot >= xModel.xDragScrollS.totalNum)
                isKeyEvent = FALSE;
            if(isKeyEvent == TRUE)
            {
                
                if(getModelMainSlot_FASHIONWEEK(xInventoryModel[xModel.listNumSlot[xModel.selectListSlot]].key) != DONT)
                {
                    setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
                    sprintf(xPopup.strText, "이미 선택된 모델입니다.");
                }
                else
                {
                    xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_SETTING;
                    xFashionWeekModel[xFashionWeekSetting.selectModelSlot].modelKey = xInventoryModel[xModel.listNumSlot[xModel.selectListSlot]].key;
                }
            }
        }
        xModel.xDragScrollS.touchXpos = DONT;
        xModel.xDragScrollS.touchYpos = DONT;
        xModel.xDragScrollS.touchXposBefore = DONT;
        xModel.xDragScrollS.touchYposBefore = DONT;
    }
}






void keyFitting_FASHIONWEEK_SELECTMODEL(int type, int param1, int param2)
{
    bool isKeyEvent = TRUE;
    int keyEventNum = 0;
    if(touchType == USER_POINT_PRESS_EVENT)
    {
        isKeyEvent = FALSE;
        for(int i=0;i<FITTINGTABMAX;i++)
        {
            if(touchCheck(&xTouchFittingTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isKeyEvent = TRUE;
                keyEventNum = i;
                break;
            }
        }
        
        
        if(isKeyEvent == TRUE)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFitting.selectTabB = keyEventNum;
            setFittingTabChange();
        }
        else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            //넣어입기
            xFitting.xF[xFitting.gender].isInFitting = TRUE;
            xFitting.isInOutMenu = FALSE;
        }
        else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            //빼입기
            xFitting.xF[xFitting.gender].isInFitting = FALSE;
            xFitting.isInOutMenu = FALSE;
        }
        else if(xFitting.isInOutMenu == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFitting.isInOutMenu = FALSE;
            xFitting.inOutCnt = 0;
        }
        else if(touchCheck(&xTouchFittingMenu[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFitting.isInOutMenu  = xFitting.isInOutMenu == FALSE?TRUE:FALSE;
            xFitting.inOutCnt = 0;
        }
        else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_SETTING;
        }
        else if(touchCheck(&xTouchFittingReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            
            //실제 피팅 내용 쇼윈도에 적용하기
            for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
            {
                xFitting.xF[0].code[ff] = DONT;
                xFitting.xF[1].code[ff] = DONT;
            }
            
            //memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF,sizeof(xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF));
        }
        else if(touchCheck(&xTouchFittingSave) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            
            
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFashionWeekLobby.state = FASHIONWEEKLOBBY_STATE_SETTING;
            
            xModel.state = xModel.fittingInState;
            //실제 피팅 내용 쇼윈도에 적용하기
            memcpy(&xInventoryModel[xModelFitting.inventoryNum].xF,&xFitting.xF[xFitting.gender],sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
            /////////////////////////////////////////////////////////////////////
            int eslot = xModelFitting.inventoryNum;
            xEventQueueNet.action[xEventQueueNet.totalNum] = 1;//0:신규,1:업데이트,2삭제
            xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
            xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
            xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
            for(int f=0;f<16;f++)
            {
                xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
            }
            xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
            xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInventoryModel[eslot].xF.isInFitting==FALSE?0:1;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
            /////////////////////////////////////////////////////////////////////
        }
        else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollFittingS.selectNum > 0)
        {
            xDragScrollFittingS.speed = 320;
        }
        else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
        {
            xDragScrollFittingS.speed = -320;
        }
        else
        {
            if(xDragScrollFittingS.pos == 0 && xDragScrollFittingS.speed == 0)
            {							
                bool isSelectCatalogS = FALSE;
                int selectCatalogSNum = 0;
                for(int i=0;i<8;i++)
                {
                    if(touchCheck(&xTouchFittingS[i]) == TRUE)
                    {
                        isSelectCatalogS = TRUE;
                        selectCatalogSNum = i;
                        break;
                    }
                }
                if(selectCatalogSNum+(xDragScrollFittingS.selectNum*8) >= xFitting.totalNumS)
                    isSelectCatalogS = FALSE;
                
                int selectFittingTemp = selectCatalogSNum+(xDragScrollFittingS.selectNum*8);
                
                if(isSelectCatalogS == TRUE)
                {
                    playSnd(SND_FITTING);
                    int totalLayer = 0;
                    int layerInfo[20];
                    int slotCode;
                    M_Boolean isAdd = FALSE;
                    for(int i=0;i<xFitting.totalNumS;i++)
                    {
                        slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
                        setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
                        
                        isAdd = FALSE;
                        for(int k=0;k<totalLayer;k++)
                        {
                            if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
                            {
                                isAdd = TRUE;
                                break;
                            }
                            else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
                            {
                                isAdd = TRUE;
                                for(int kk=totalLayer;kk>k;kk--)
                                {
                                    layerInfo[kk] = layerInfo[kk-1];
                                }
                                layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
                                totalLayer++;
                                break;
                            }
                        }
                        
                        if(isAdd == FALSE)
                        {
                            layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
                        }
                    }
                    
                    xFitting.selectSlot = selectFittingTemp;
                    setMapData(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
                    //실제적인 처리를 해주자
                    
                    //선택된게 장착중일때는 바로 해제
                    if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code)
                    {
                        xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = DONT;
                        xFitting.selectSlot = DONT;
                    }
                    //선택된곳에 이미 다른레이어 존재
                    else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
                    {
                        
                    }
                    else if(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].isModelUse == TRUE)
                    {
                        
                    }
                    //선택이 되어있다면 무언가 있다면 변경
                    else if(xFitting.selectSlot == selectFittingTemp && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
                    {
                        xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
                        xFitting.selectSlot = DONT;
                    }
                    else if(xFitting.xF[xFitting.gender].layeredNum >= (xModelData[xInventoryModel[xModelFitting.inventoryNum].code].layeredNum+getModelLayered(xModelFitting.inventoryNum,0)))
                    {
                        setPopup(POPUP_FITTING_LAYEREDERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
                        xFitting.selectSlot = DONT;
                    }
                    //장착할려는 부위에 아무것도 없다면 바로 장착
                    else if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == DONT)
                    {
                        xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
                    }
                    //선택이 안되어있다면 그냥 선택으로만
                    else
                    {
                        xFitting.selectSlot = selectFittingTemp;
                    }
                }
            }
        }
    }
}




void setFashionStudioSlot()
{
    for(int k=0;k<FASHIONSTUDIOMAX;k++)
    {
        xFashionStudio.itemCode[k] = DONT;
    }
    
    xFashionStudio.totalNum = 0;
    for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
    {
        if(xClub.xMy.xF.code[ff] != DONT)
        {
            if(xFashionStudio.totalNum < FASHIONSTUDIOMAX)
            {
                xFashionStudio.itemCode[xFashionStudio.totalNum] = xClub.xMy.xF.code[ff];
                xFashionStudio.totalNum++;
            }
        }
    }
 
    for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
    {
        if(xFashionWeekModel[k].modelKey != DONT)
        {
            if(getModelKeyToSlotNum(xFashionWeekModel[k].modelKey) == DONT)
                xFashionWeekModel[k].modelKey = DONT;
        }

        
        if(xFashionWeekModel[k].studioSlotNum != DONT)
        {
            if(xFashionStudio.itemCode[xFashionWeekModel[k].studioSlotNum] == DONT)
                xFashionWeekModel[k].studioSlotNum = DONT;
        }
    }
    
    

    
    
    
    ////////////최종점수계산
    xFashionWeek.totalScore = 0;
    xFashionWeek.totalScore += xHairData[xClub.xMy.xFace.hairNum].clubScore;
    xFashionWeek.totalScore += xFaceData[xClub.xMy.xFace.faceNum].clubScore;
    
    int mainColor = 0;
    int colorCnt[12];
    for(int k=0;k<12;k++)
        colorCnt[k] = 0;
    
    
    int mainConcept = 0;
    int conceptCnt[9];
    for(int k=0;k<9;k++)
        conceptCnt[k] = 9;
    
    //메인컬러뽑기
    for(int k=0;k<xFashionStudio.totalNum;k++)
    {
        setMapData(xFashionStudio.itemCode[k]);
        if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
        {
            if(xFashionWeekItem[xMap.type][xMap.listNum].isExp == true)
            {
                colorCnt[xFashionData[xMap.type][xMap.listNum].color]++;
                conceptCnt[xFashionData[xMap.type][xMap.listNum].concept]++;
            }
        }
    }
    
    for(int k=0;k<12;k++)
    {
        if(colorCnt[mainColor] < colorCnt[k])
            mainColor = k;
    }
    
    for(int k=0;k<9;k++)
    {
        if(conceptCnt[mainConcept] < conceptCnt[k])
            mainConcept = k;
    }
    
    for(int k=0;k<xFashionStudio.totalNum;k++)
    {
        setMapData(xFashionStudio.itemCode[k]);
        if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
        {
            if(xFashionWeekItem[xMap.type][xMap.listNum].isExp == true)
            {
                float colorPer = getFashionColorPer(mainColor,xFashionData[xMap.type][xMap.listNum].color);
                float conceptPer = getFashionConceptPer(mainConcept, xFashionData[xMap.type][xMap.listNum].concept);
                float totalPer = (float)(colorPer+conceptPer)*0.5f;
                xFashionWeek.totalScore += xFashionData[xMap.type][xMap.listNum].clubScore*totalPer;
            }
        }
    }
}






void drawFashionStudioInfo()
{
    int px = cx;
    int py = cy;
    
    
    drawBgFillRect();
    drawImage(&imgFashionWeek[17], px, py, 0, 0, imgFashionWeek[17].w, imgFashionWeek[17].h, VH);
    
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+140;
    xFashionStudio.xTouchExit.wPos = 150;
    xFashionStudio.xTouchExit.hPos = 50;
    xFashionStudio.xTouchExit.xPos = subTemp[XPOS]-xFashionStudio.xTouchExit.wPos/2;
    xFashionStudio.xTouchExit.yPos = subTemp[YPOS]-xFashionStudio.xTouchExit.hPos/2;
    

    /*
    gSetColor(255, 0, 0);
    setAlpha(100);
    fillRect(xFashionStudio.xTouchExit.xPos, xFashionStudio.xTouchExit.yPos, xFashionStudio.xTouchExit.wPos, xFashionStudio.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
    */

    setMapData(xFashionStudio.itemCode[xFashionStudio.selectInfoSlot]);
    
    gSetColor(255, 255, 255);
    setFontSizeORI(23);
    gDrawString(px, py-142, xFashionData[xMap.type][xMap.listNum].strName, VH);
    
    drawFittingF(px,py-57, xFashionStudio.itemCode[xFashionStudio.selectInfoSlot], 50);
    
    setFontSizeORI(20);
    setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].clubScore);
    int ww = getLabelWidth(strTempS,20, false);
    gSetColor(255, 255, 255);
    gDrawString(px+4, py+8, strTempS, VH);
    drawImage(&imgClubScoreIcon, px+4-(ww/2)-20, py+8+1, 0, 0, imgClubScoreIcon.w, imgClubScoreIcon.h, VH);
    setFontSize(11);
    
    
    gSetColor(206, 186, 186);
    setFontSizeORI(18);
    char strTempPPPP[2][64];
    setCommaNum(strTempPPPP[0], xFashionWeekItem[xMap.type][xMap.listNum].nowCost);
    setCommaNum(strTempPPPP[1], xFashionData[xMap.type][xMap.listNum].clubCostMax);
    sprintf(strTempS, "진행도:%s/%s",strTempPPPP[0],strTempPPPP[1]);
    gDrawString(px, py+40, strTempS, VH);
    
    setCommaNum(strTempPPPP[0], xFashionData[xMap.type][xMap.listNum].clubExp);
    sprintf(strTempS, "클럽경험치:%s",strTempPPPP[0]);
    gDrawString(px, py+70, strTempS, VH);
    setFontSize(11);
}


void drawFashionStudio()
{
    int px = cx;
    int py = cy;
    
    drawImage(&imgFashionWeek[6], px+365, py-22, 0, 0, imgFashionWeek[6].w, imgFashionWeek[6].h, VH);
        for(int k=0;k<FASHIONSTUDIOMAX;k++)
    {
        subTemp[XPOS] = px+245+(83*(k%4));
        subTemp[YPOS] = py-148+(96*(k/4));
        
        if(xFashionStudio.itemCode[k] == DONT)
        {
            
        }
        else
        {
            setMapData(xFashionStudio.itemCode[k]);
            drawFittingF(subTemp[XPOS],subTemp[YPOS]+5,(xMap.type*1000)+xMap.listNum,40);
            
            
            if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_SETTING)
            {
                if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
                {
                    //받음
                    if(xFashionWeekItem[xMap.type][xMap.listNum].isExp == true)
                    {
                        drawImage(&imgFashionWeek[22], subTemp[XPOS], subTemp[YPOS]+43, 0, 0, imgFashionWeek[22].w, imgFashionWeek[22].h, VH);
                    }
                    else
                        drawImage(&imgFashionWeek[21], subTemp[XPOS], subTemp[YPOS]+43, 0, 0, imgFashionWeek[21].w, imgFashionWeek[21].h, VH);
                }
                else
                {
                    int gageW = xFashionWeekItem[xMap.type][xMap.listNum].nowCost*imgFashionWeek[7].w/xFashionData[xMap.type][xMap.listNum].clubCostMax;
                    drawImage(&imgFashionWeek[7], subTemp[XPOS]-36, subTemp[YPOS]+43, 0, 0, imgFashionWeek[7].w, imgFashionWeek[7].h/2, VL);
                    drawImage(&imgFashionWeek[7], subTemp[XPOS]-36, subTemp[YPOS]+43, 0, imgFashionWeek[7].h/2, gageW, imgFashionWeek[7].h/2, VL);
                }
                
                int totalSelectSlot = 0;
                int selectSlot[10];
                
                for(int z=0;z<FASHIONWEEKSETTINGMAX;z++)
                {
                    if(xFashionWeekModel[z].studioSlotNum == k)
                    {
                        selectSlot[totalSelectSlot++] = z;
                    }
                }
                
                for(int z=0;z<totalSelectSlot;z++)
                {
                    int dx = subTemp[XPOS]-23+(z*5);
                    int dy = subTemp[YPOS]+23;

                    xGame.isReSizeDraw = true;
                    xGame.reSize = 26;
                    drawImage(&imgPangObj, dx, dy, 0, imgPangObj.h/5*selectSlot[z], imgPangObj.w, imgPangObj.h/5, VH);
                    xGame.isReSizeDraw = false;
                }
            }
            else
            {
                if(xFashionWeekItem[xMap.type][xMap.listNum].nowCost >= xFashionData[xMap.type][xMap.listNum].clubCostMax)
                {
                    //받음
                    if(xFashionWeekItem[xMap.type][xMap.listNum].isExp == true)
                    {
                        drawImage(&imgFashionWeek[22], subTemp[XPOS], subTemp[YPOS]+43, 0, 0, imgFashionWeek[22].w, imgFashionWeek[22].h, VH);
                    }
                    //안받음
                    else
                    {
                        if(xClubLobby.isMaster == true)
                        {
                            drawImage(&imgFashionWeek[20], subTemp[XPOS], subTemp[YPOS]+5, 0, 0, imgFashionWeek[20].w, imgFashionWeek[20].h, VH);
                        }
                        else
                            drawImage(&imgFashionWeek[21], subTemp[XPOS], subTemp[YPOS]+43, 0, 0, imgFashionWeek[21].w, imgFashionWeek[21].h, VH);
                    }
                }
                else if(xFashionData[xMap.type][xMap.listNum].clubCostMax > 0)
                {
                    int gageW = xFashionWeekItem[xMap.type][xMap.listNum].nowCost*imgFashionWeek[7].w/xFashionData[xMap.type][xMap.listNum].clubCostMax;
                    drawImage(&imgFashionWeek[7], subTemp[XPOS]-36, subTemp[YPOS]+43, 0, 0, imgFashionWeek[7].w, imgFashionWeek[7].h/2, VL);
                    drawImage(&imgFashionWeek[7], subTemp[XPOS]-36, subTemp[YPOS]+43, 0, imgFashionWeek[7].h/2, gageW, imgFashionWeek[7].h/2, VL);
                }
            }
            
            
            
            
            drawImage(&imgClubScoreIcon, subTemp[XPOS]-24, subTemp[YPOS]-26, 0, 0, imgClubScoreIcon.w, imgClubScoreIcon.h, VH);
            setFontSizeORI(13);
            gSetColor(236, 172, 193);
            setCommaNum(strTempS, xFashionData[xMap.type][xMap.listNum].clubScore);
            gDrawString(subTemp[XPOS]-12, subTemp[YPOS]-26, strTempS, VL);
            setFontSize(11);
        }
        
        if(k >= xClub.xData[xClub.xMy.clubLv].layeredMax)
        {
            int nextLv = 0;
            for(int z=0;z<CLUBDATAMAX;z++)
            {
                if(k < xClub.xData[z].layeredMax)
                {
                    nextLv = z;
                    break;
                }
            }
            
            drawImage(&imgFashionWeek[19], subTemp[XPOS], subTemp[YPOS]+13, 0, 0, imgFashionWeek[19].w, imgFashionWeek[19].h, VH);
            
            sprintf(strTempS,"Lv.%d", nextLv);
            setFontSizeORI(14);
            gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-21, strTempS, VH, 255, 255, 255, 44, 27, 26);
            setFontSize(11);
        }
        
        
        xFashionWeekLobby.xTouchStudioSlot[k].wPos = 60;
        xFashionWeekLobby.xTouchStudioSlot[k].hPos = 70;
        xFashionWeekLobby.xTouchStudioSlot[k].xPos = subTemp[XPOS]-xFashionWeekLobby.xTouchStudioSlot[k].wPos/2;
        xFashionWeekLobby.xTouchStudioSlot[k].yPos = subTemp[YPOS]-xFashionWeekLobby.xTouchStudioSlot[k].hPos/2;
        
        /*
         gSetColor(255, 0, 0);
         setAlpha(100);
         fillRect(xFashionWeekLobby.xTouchStudioSlot[k].xPos, xFashionWeekLobby.xTouchStudioSlot[k].yPos, xFashionWeekLobby.xTouchStudioSlot[k].wPos, xFashionWeekLobby.xTouchStudioSlot[k].hPos);
         setAlpha(ALPHA_MAX);
         */
    }
    
    subTemp[XPOS] = px+369;
    subTemp[YPOS] = py+167;
    
    if(xFashionWeekLobby.state == FASHIONWEEKLOBBY_STATE_SETTING)
    {
        drawImage(&imgFashionWeek[25], px+268, py+110, 0, 0, imgFashionWeek[25].w, imgFashionWeek[25].h, VH);
        drawImage(&imgFashionWeek[26], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFashionWeek[26].w, imgFashionWeek[26].h, VH);
        
        setFontSizeORI(16);
        gSetColor(255, 255, 255);
        sprintf(strTempS, "%d/%d",xClub.fashionWeekPlayCount,xClub.fashionWeekPlayCountMax);
        gDrawString(subTemp[XPOS]+86, subTemp[YPOS]+16, strTempS, VH);
        setFontSize(11);
    }
    xFashionWeekLobby.xTouchStart.wPos = imgFashionWeek[26].w;
    xFashionWeekLobby.xTouchStart.hPos = imgFashionWeek[26].h;
    xFashionWeekLobby.xTouchStart.xPos = subTemp[XPOS]-xFashionWeekLobby.xTouchStart.wPos/2;
    xFashionWeekLobby.xTouchStart.yPos = subTemp[YPOS]-xFashionWeekLobby.xTouchStart.hPos/2;
    
    
    /*
     gSetColor(255, 0, 0);
     setAlpha(100);
     fillRect(xFashionWeekLobby.xTouchStart.xPos, xFashionWeekLobby.xTouchStart.yPos, xFashionWeekLobby.xTouchStart.wPos, xFashionWeekLobby.xTouchStart.hPos);
     setAlpha(ALPHA_MAX);
     */
}


void drawLoadingIcon(int x,int y)
{
    xGame.isRotate = TRUE;
    xGame.rotateNum = 360-(gameCnt%120)*3;
    drawPacker(imgLoadingIcon0, x, y, 0, 0, imgW(imgLoadingIcon0), imgH(imgLoadingIcon0), VH);
    xGame.isRotate = FALSE;
}


void drawFashionWeekGiftInfo()
{
    int px = cx;
    int py = cy;
    
    
    drawBgFillRect();
    
    drawImage(&imgFashionWeek[28], px, py, 0, 0, imgFashionWeek[28].w, imgFashionWeek[28].h, VH);
    
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+190;
    xClubLobby.xTouchExit.wPos = 180;
    xClubLobby.xTouchExit.hPos = 80;
    xClubLobby.xTouchExit.xPos = subTemp[XPOS]-xClubLobby.xTouchExit.wPos/2;
    xClubLobby.xTouchExit.yPos = subTemp[YPOS]-xClubLobby.xTouchExit.hPos/2;
    
    /*
    setAlpha(100);
    gSetColor(255, 0, 0);
    fillRect(xClubLobby.xTouchExit.xPos, xClubLobby.xTouchExit.yPos, xClubLobby.xTouchExit.wPos, xClubLobby.xTouchExit.hPos);
    setAlpha(ALPHA_MAX);
     */
    
    
    for(int i=0;i<12;i++)
    {
        subTemp[XPOS] = px-93+((i/6)*202);
        subTemp[YPOS] = py-95+((i%6)*44);
        
        xGame.isReSizeDraw = true;
        xGame.reSize = 60;
        drawIcon(subTemp[XPOS], subTemp[YPOS], ICON_TYPE_LOOK);
        xGame.isReSizeDraw = false;
        gSetColor(175, 150, 123);
        
        sprintf(strTempS, "%d",xFashionWeek.rankGiftLook[i]);
        gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+2, strTempS, VH);
        
    }
}



void initClubShop()
{
    //초기화
}

void clubShopFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        //이미지로딩
        loadImg("clubbgi.png", &imgClubShop[0]);//뒷 배경
        loadImg("clubshoptitle.png", &imgClubShop[1]);//제목
        loadImg("clubshopmain.png",&imgClubShop[2]);//메인 팝업
        loadImg("clubwealth.png",  &imgClubShop[3]);//재화 UI
        loadImg("productionmenuexiticon.png", &imgClubShop[4]);//닫기 버튼
        loadImg("clubshopslot.png", &imgClubShop[5]);//슬롯 이미지
        loadImg("clubshopprice.png", &imgClubShop[6]);//아이템의 가격 UI
    }
    else
    {
        //이미지해제
        freeImg(&imgClubShop[0]);
        freeImg(&imgClubShop[1]);
        freeImg(&imgClubShop[2]);
        freeImg(&imgClubShop[3]);
        freeImg(&imgClubShop[4]);
        freeImg(&imgClubShop[5]);
        freeImg(&imgClubShop[6]);
    }
    
}




void drawClubShop()
{
    int px = cx;
    int py = cy;
    
    drawImage(&imgClubShop[0], px, py, 0, 0, imgClubShop[0].w, imgClubShop[0].h, VH);
    
    subTemp[XPOS]=px-50;
    subTemp[YPOS]=py-282;
    drawImage(&imgClubShop[1],subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubShop[1].w, imgClubShop[1].h, VH);
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py-20;
    drawImage(&imgClubShop[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubShop[2].w, imgClubShop[2].h, VH);
    
    subTemp[XPOS] = px+360;
    subTemp[YPOS] = py-280;
    drawImage(&imgClubShop[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubShop[3].w, imgClubShop[3].h, VH);
    gSetColor(255, 255, 255);
    setFontSizeORI(18);
    
    setCommaNum(strTempS, xClub.money);
    
    gDrawString(subTemp[XPOS]+55, subTemp[YPOS]-5, strTempS, VR);
    setFontSize(11);

    
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    drawImage(&imgClubShop[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubShop[4].w, imgClubShop[4].h, VH);
    
    
    //밑의 버튼 4개
    for(int k=0;k<CLUBMENUMAX;k++)
    {
        subTemp[XPOS] = px-500+(k*112);
        subTemp[YPOS] = py+268;
        
        drawImage(&imgClubMenu[k], subTemp[XPOS], subTemp[YPOS], 0, imgClubMenu[k].h/2*(xClubLobby.selectMenu == k?1:0), imgClubMenu[k].w, imgClubMenu[k].h/2, VH);
        
        xClubLobby.xTouchClubMenu[k].wPos = imgClubMenu[k].w;
        xClubLobby.xTouchClubMenu[k].hPos = imgClubMenu[k].h/2;
        xClubLobby.xTouchClubMenu[k].xPos = subTemp[XPOS]-xClubLobby.xTouchClubMenu[k].wPos/2;
        xClubLobby.xTouchClubMenu[k].yPos = subTemp[YPOS]-xClubLobby.xTouchClubMenu[k].hPos/2;
    }
    
    
    //X자 위의 빨간 상자
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    xClubShop.xTouchExit.wPos = 80;
    xClubShop.xTouchExit.hPos = 80;
    xClubShop.xTouchExit.xPos = subTemp[XPOS]-xClubShop.xTouchExit.wPos/2;
    xClubShop.xTouchExit.yPos = subTemp[YPOS]-xClubShop.xTouchExit.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xClubShop.xTouchExit.xPos, xClubShop.xTouchExit.yPos, xClubShop.xTouchExit.wPos, xClubShop.xTouchExit.hPos);
//    setAlpha(ALPHA_MAX);
    
    
    ///test
    //데이터 추가
//    for(int k=0;k<10;k++)
//    {
//        sprintf(xClubShop.xData[xClubShop.totalData].strName,"%d번아이템",k);
//        xClubShop.xData[xClubShop.totalData++].coin = 1000*k;
//    }
    
   
    //세부메뉴
    xClubShop.xDragScroll.totalNum = xClubShop.totalData/2;//스크롤에 들어가는 총 슬롯수
    xClubShop.xDragScroll.posGab = 210;//간격
    xClubShop.xDragScroll.endPos = -(((xClubShop.xDragScroll.totalNum-4)*xClubShop.xDragScroll.posGab));//보정
    if(xClubShop.xDragScroll.totalNum < 4)//예외처리
        xClubShop.xDragScroll.endPos = 0;
    
    
    dragScrollPrc(&xClubShop.xDragScroll,1,FALSE);
    int iMax = xClubShop.totalData;
    int pos = 0;
//    gSetColor(0, 0, 255);
//    setAlpha(100);
//    fillRect(210, 90, 880, 420);
//    setAlpha(ALPHA_MAX);
    gSetClip(true, 210, 90, 880, 420);
    for(int i=0;i<iMax;i++)
    {
        pos = xClubShop.xDragScroll.pos+(xClubShop.xDragScroll.posGab*(i/2));
        subTemp[XPOS] = px-207+pos;
        subTemp[YPOS] = py-120+((i%2)*208);

        if(subTemp[XPOS] < -xClubShop.xDragScroll.posGab)
            continue;
        if(subTemp[XPOS] > lcdW+xClubShop.xDragScroll.posGab)
            continue;
        drawImage(&imgClubShop[5], subTemp[XPOS], subTemp[YPOS], imgClubShop[5].w/2, 0, imgClubShop[5].w/2, imgClubShop[5].h, VH);
        drawClubItem(subTemp[XPOS], subTemp[YPOS], i);
        if(xClub.xMy.clubLv<xClub.xIcon[i].clublv)
        {
            setAlpha(123);
            gSetColor(0, 0, 0);
            fillRect(subTemp[XPOS], subTemp[YPOS], imgClubShop[5].w/2, imgClubShop[5].h);
            setAlpha(ALPHA_MAX);
            
            gSetColor(255, 255, 255);
            setFontSizeORI(20);
            sprintf(strTempS,"LV.%d\n레벨제한",xClub.xIcon[i].clublv);
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
            setFontSize(11);
        }

        gSetColor(242, 181, 213);
        setFontSizeORI(18);
        gDrawString(subTemp[XPOS], subTemp[YPOS]-82, xClubShop.xData[i].strName, VH);
        drawImage(&imgClubShop[6], subTemp[XPOS], subTemp[YPOS]+85, 0, 0, imgClubShop[6].w, imgClubShop[6].h, VH);
        gSetColor(255, 255, 255);
        setFontSizeORI(15);
        setCommaNum(strTempS, xClubShop.xData[i].coin);
        gDrawString(subTemp[XPOS], subTemp[YPOS]+85, strTempS, VH);
        setFontSize(11);
    }
    gSetClip(false, 210, 90, 880, 420);
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xClubShop.xDragScroll.selectNum = (-xClubShop.xDragScroll.pos/xClubShop.xDragScroll.posGab);
    if(xClubShop.xDragScroll.selectNum < 0)
        xClubShop.xDragScroll.selectNum = 0;
    
    for(int i=0;i<iMax;i++)
    {
        subTemp[XPOS] = px-207+((i/2)*xClubShop.xDragScroll.posGab);
        subTemp[YPOS] = py-120+(i%2)*208;
        
        xClubShop.xTouchSlot[i].wPos = imgClubShop[5].w/2;
        xClubShop.xTouchSlot[i].hPos = imgClubShop[5].h;
        xClubShop.xTouchSlot[i].xPos = subTemp[XPOS]+((xClubShop.xDragScroll.posGab <= xClubShop.xDragScroll.pos ? xClubShop.xDragScroll.pos:(xClubShop.xDragScroll.pos%xClubShop.xDragScroll.posGab))) - xClubShop.xTouchSlot[i].wPos/2;
        xClubShop.xTouchSlot[i].yPos = subTemp[YPOS] - xClubShop.xTouchSlot[i].hPos/2;
       
//        gSetColor(255, 0, 0);
//        setAlpha(100);
//        fillRect(xClubShop.xTouchSlot[i].xPos, xClubShop.xTouchSlot[i].yPos, xClubShop.xTouchSlot[i].wPos, xClubShop.xTouchSlot[i].hPos);
//        setAlpha(ALPHA_MAX);
      
    }

    
    
    for(int i=0;i<3;i++)
    {
        subTemp[XPOS]=px-468;
        subTemp[YPOS]=py-175+(i*95);
        xClubShop.xTouchClubShopMenu[i].wPos=180;
        xClubShop.xTouchClubShopMenu[i].hPos=100;
        xClubShop.xTouchClubShopMenu[i].xPos=subTemp[XPOS]-xClubShop.xTouchClubShopMenu[i].wPos/2;
        xClubShop.xTouchClubShopMenu[i].yPos=subTemp[YPOS]-xClubShop.xTouchClubShopMenu[i].hPos/2;
    }
    for(int k=1;k<3;k++)
    {
        gSetColor(0, 0, 0);
        setAlpha(100);
        fillRect(xClubShop.xTouchClubShopMenu[k].xPos, xClubShop.xTouchClubShopMenu[k].yPos, xClubShop.xTouchClubShopMenu[k].wPos, xClubShop.xTouchClubShopMenu[k].hPos);
        setAlpha(ALPHA_MAX);
        
    }
}



void keyClubShop(int type, int param1, int param2)
{
    if(xClubShop.selectMenu==CLUBSTORAGE)
    {
        keyClubStorage(type, param1, param2);
        return;
    }
    
    else if(xClubShop.selectMenu==CLUBICONSHOP)
    {
        keyClubIconShop(type, param1, param2);
        return;
    }
    else
    {
        if(xClubShop.state==CLUBSHOP_STATE_CLUBNAMEMODIFY)
        {
            keyClubNameModify(type, param1, param2);
        }
        else if(xClubShop.state==CLUBSHOP_STATE_PLAY)
        {
            if(type == MH_KEY_PRESSEVENT)
            {
                if(touchCheck(&xClubShop.xTouchClubShopMenu[1])==TRUE&&touchType==USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    xClubShop.selectMenu=CLUBICONSHOP;
                    initClubIconShop();
                    clubIconShopFreeLoad(true);
                }
                
                else if(touchCheck(&xClubShop.xTouchClubShopMenu[2])==TRUE&&touchType==USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    xClubShop.selectMenu=CLUBSTORAGE;
                    xClubStorage.state=CLUBSTORAGE_STATE_PLAY;
                    initClubStorage();
                    clubStorageFreeLoad(true);
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBSTORAGEUPDATE, TRUE);
                }
                
                bool isClubMenu = false;
                int selectClubMenu = 0;
                for(int k=0;k<CLUBMENUMAX;k++)
                {
                    if(touchCheck(&xClubLobby.xTouchClubMenu[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        isClubMenu = true;
                        selectClubMenu = k;
                        break;
                    }
                }
                //좌하단 4개버튼 기능
                if(isClubMenu == true && xClubLobby.selectMenu != selectClubMenu)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    switch(selectClubMenu)
                    {
                        case CLUBLOBBY_MENU_MAIN:
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CMD_CLUBDONATIONCOUNT, TRUE);
                            xClubLobby.selectMenu = selectClubMenu;
                            break;
                        case CLUBLOBBY_MENU_FASHIONWEEK:
                            
                            if(xFashionWeek.isOpen == false)
                            {
                                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                                sprintf(xPopup.strText, "임시 잠금상태 입니다.");
                            }
                            else
                            {
                                xClubLobby.selectMenu = selectClubMenu;
                                initFashionWeekLobby();
                            }
                            break;
                        case CLUBLOBBY_MENU_SHOP:
                            //                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            //                    sprintf(xPopup.strText, "업데이트 예정 입니다.");
                            break;
                        default:
                            setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            sprintf(xPopup.strText, "업데이트 예정 입니다.");
                            break;
                    }
                }
                //빨간 Rect부분
                else if(touchCheck(&xClubShop.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    xClubShop.selectMenu=CLUBSHOP;
                    clubShopFreeLoad(false);
                    xWorldMap.state = WORLDMAP_STATE_PLAY;
                }
                else
                {
                    dragScrollKeyPrc(&xClubShop.xDragScroll,0);
                }
            }
            else if(type == MH_KEY_RELEASEEVENT)
            {
                if(xClubShop.xDragScroll.touchXposBefore != DONT)
                {
                    dragScrollKeyPrc(&xClubShop.xDragScroll,1);
                }
                else
                {
                    bool isSlot = false;
                    int selectSlot = 0;
                    
                    for(int k=0;k<xClubShop.totalData;k++)
                    {
                        if(touchCheck(&xClubShop.xTouchSlot[k]) == TRUE)
                        {
                            if(xClub.xMy.masterKey == xNetData.userNum)
                            {
                                isSlot = true;
                                selectSlot = k;
                                break;
                            }
                            else
                            {
                                setPopup(POPUP_CLUBSHOPNOTMASTER, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            }
                        }
                    }
                    
                    if(isSlot == true)
                    {
                        xClubShop.selectedNum = selectSlot+(xClubShop.xDragScroll.selectNum*2);
                    }
                    
                    if(xClubShop.selectedNum < 0 || xClubShop.selectedNum >= 10)
                        isSlot = false;
                    
                    
                    if(isSlot == true)
                    {
                        if(xClubShop.selectedNum == CLUBITEM_NAMEMODIFY)
                        {
                            clubnameModifyFreeLoad(true);
                            initClubNameModify();
                            xClubShop.state = CLUBSHOP_STATE_CLUBNAMEMODIFY;
                        }
                        else
                        {
                            setPopup(POPUP_CLUBSHOPITEMBUYCHECK, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        }
                    }
                }
                xClubShop.xDragScroll.touchXpos = DONT;
                xClubShop.xDragScroll.touchYpos = DONT;
                xClubShop.xDragScroll.touchXposBefore = DONT;
                xClubShop.xDragScroll.touchYposBefore = DONT;
            }
        }
    }
}

void clubnameModifyFreeLoad(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("clubnamemodify.png", &imgClubNameModify[0]);
    }
    else
    {
        freeImg(&imgClubNameModify[0]);
    }
}
void initClubNameModify()
{
    xClubNameModify.bTemp=false;
    xClubNameModify.state=CLUBNAME_STATE_START;
}

void drawClubNameModify()
{
    int px=cx;
    int py=cy;
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py;
    drawBgFillRect();
    
    drawImage(&imgClubNameModify[0],subTemp[XPOS],subTemp[YPOS],0,0,imgClubNameModify[0].w,imgClubNameModify[0].h,VH);
    
    xClubNameModify.xTouchMainFrame.wPos=imgClubNameModify[0].w;
    xClubNameModify.xTouchMainFrame.hPos=imgClubNameModify[0].h;
    xClubNameModify.xTouchMainFrame.xPos=subTemp[XPOS]-xClubNameModify.xTouchMainFrame.wPos/2;
    xClubNameModify.xTouchMainFrame.yPos=subTemp[YPOS]-xClubNameModify.xTouchMainFrame.hPos/2;
    
//    setAlpha(100);
//    gSetColor(0, 0, 255);
//    fillRect(xClubNameModify.xTouchMainFrame.xPos, xClubNameModify.xTouchMainFrame.yPos, xClubNameModify.xTouchMainFrame.wPos, xClubNameModify.xTouchMainFrame.hPos);
//    setAlpha(ALPHA_MAX);
    
    subTemp[XPOS]=px-2;
    subTemp[YPOS]=py+70;
    xClubNameModify.xTouchOK.wPos=150;
    xClubNameModify.xTouchOK.hPos=50;
    xClubNameModify.xTouchOK.xPos=subTemp[XPOS]-xClubNameModify.xTouchOK.wPos/2;
    xClubNameModify.xTouchOK.yPos=subTemp[YPOS]-xClubNameModify.xTouchOK.hPos/2;
    
    
//    setAlpha(100);
//    gSetColor(0, 0, 255);
//    fillRect(xClubNameModify.xTouchOK.xPos, xClubNameModify.xTouchOK.yPos, xClubNameModify.xTouchOK.wPos, xClubNameModify.xTouchOK.hPos);
//    setAlpha(ALPHA_MAX);
    
    int strByte=getStringByte(xClubNameModify.strName);
    int kor=strByte/1000;
    int eng=strByte%1000;
    int korEng=kor+eng;
    
    subTemp[XPOS]=px-15;
    subTemp[YPOS]=py-12;
    xClubNameModify.xTouchName.wPos=610;
    xClubNameModify.xTouchName.hPos=60;
    xClubNameModify.xTouchName.xPos=subTemp[XPOS]-xClubNameModify.xTouchName.wPos/2;
    xClubNameModify.xTouchName.yPos=subTemp[YPOS]-xClubNameModify.xTouchName.hPos/2;
//    setAlpha(100);
//    gSetColor(255, 255, 0);
//    fillRect(xClubNameModify.xTouchName.xPos, xClubNameModify.xTouchName.yPos, xClubNameModify.xTouchName.wPos, xClubNameModify.xTouchName.hPos);
//    setAlpha(ALPHA_MAX);

    gSetColor(255, 255, 255);
    setFontSizeORI(28);
    if(korEng==0)
    {
        xClubNameModify.state=CLUBNAME_STATE_START;
    }
    
    if(xClubNameModify.bTemp==false)
    {
        gSetColor(255, 255, 255);
    }
    else
    {
        gSetColor(255, 0, 0);
    }
    
    switch(xClubNameModify.state)
    {
        case CLUBNAME_STATE_START:
            sprintf(xClubNameModify.strName, "클럽명을 입력하세요.");
            break;
        case CLUBNAME_STATE_TOLEAKWORD:
            sprintf(xClubNameModify.strName,"클럽명은 최소 1자, 최대 6자로 지정할 수 있습니다.");
            break;
        case CLUBNAME_STATE_OVERLAPWORD:
            sprintf(xClubNameModify.strName, "중복된 클럽명입니다.");
            break;
    }
    gDrawString(subTemp[XPOS], subTemp[YPOS], xClubNameModify.strName, VH);
    
    setFontSize(11);
}

void keyClubNameModify(int type, int param1, int param2)
{
    if(xClubShop.state==CLUBSHOP_STATE_PLAY)
    {
        keyClubShop(type, param1, param2);
    }
    else if(xClubShop.state==CLUBSHOP_STATE_CLUBNAMEMODIFY)
    {
        if(type == MH_KEY_PRESSEVENT)
        {
            if(touchCheck(&xClubNameModify.xTouchName)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
            {
                xClubNameModify.state=CLUBNAME_STATE_OK;
                xClubNameModify.bTemp=false;
                setTextField(TEXTBOX_TYPE_CLUBNAMEMODIFY, xClubNameModify.xTouchName.xPos, xClubNameModify.xTouchName.yPos, xClubNameModify.xTouchName.wPos, xClubNameModify.xTouchName.hPos);
            }
            else if(touchCheck(&xClubNameModify.xTouchOK)==TRUE && touchType==USER_POINT_PRESS_EVENT)
            {
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBNAMEMODIFY, TRUE);
            }
            else if(touchCheck(&xClubNameModify.xTouchMainFrame)==FALSE&&touchType==USER_POINT_PRESS_EVENT)
            {
                xClubShop.state=CLUBSHOP_STATE_PLAY;
            }
        }
    }
}

void clubIconShopFreeLoad(bool isLoad)
{
    if(isLoad == true)
    {
        //이미지로딩
        loadImg("clubbgi.png", &imgClubIconShop[0]);//뒷 배경
        loadImg("clubshoptitle.png", &imgClubIconShop[1]);//제목
        loadImg("clubshopmain.png",&imgClubIconShop[2]);//메인 팝업
        loadImg("clubwealth.png",  &imgClubIconShop[3]);//재화 UI
        loadImg("productionmenuexiticon.png", &imgClubIconShop[4]);//닫기 버튼
        loadImg("clubshopslot.png", &imgClubIconShop[5]);//슬롯 이미지
        loadImg("clubshopprice.png", &imgClubIconShop[6]);//아이템의 가격 UI
    }
    else
    {
        //이미지해제
        freeImg(&imgClubIconShop[0]);
        freeImg(&imgClubIconShop[1]);
        freeImg(&imgClubIconShop[2]);
        freeImg(&imgClubIconShop[3]);
        freeImg(&imgClubIconShop[4]);
        freeImg(&imgClubIconShop[5]);
        freeImg(&imgClubIconShop[6]);
    }
}
void initClubIconShop()
{
    
}
void drawClubIconShop()
{
    int px = cx;
    int py = cy;
    
    drawImage(&imgClubIconShop[0], px, py, 0, 0, imgClubIconShop[0].w, imgClubIconShop[0].h, VH);
    
    subTemp[XPOS]=px-50;
    subTemp[YPOS]=py-282;
    drawImage(&imgClubIconShop[1],subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubIconShop[1].w, imgClubIconShop[1].h, VH);
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py-20;
    drawImage(&imgClubIconShop[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubIconShop[2].w, imgClubIconShop[2].h, VH);
    
    subTemp[XPOS] = px+360;
    subTemp[YPOS] = py-280;
    drawImage(&imgClubIconShop[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubIconShop[3].w, imgClubIconShop[3].h, VH);
    gSetColor(255, 255, 255);
    setFontSizeORI(18);
    
    setCommaNum(strTempS, xClub.money);
    
    gDrawString(subTemp[XPOS]+55, subTemp[YPOS]-5, strTempS, VR);
    setFontSize(11);
    
    
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    drawImage(&imgClubIconShop[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubIconShop[4].w, imgClubIconShop[4].h, VH);
    
    
    //밑의 버튼 4개
    for(int k=0;k<CLUBMENUMAX;k++)
    {
        subTemp[XPOS] = px-500+(k*112);
        subTemp[YPOS] = py+268;
        
        drawImage(&imgClubMenu[k], subTemp[XPOS], subTemp[YPOS], 0, imgClubMenu[k].h/2*(xClubLobby.selectMenu == k?1:0), imgClubMenu[k].w, imgClubMenu[k].h/2, VH);
        
        xClubLobby.xTouchClubMenu[k].wPos = imgClubMenu[k].w;
        xClubLobby.xTouchClubMenu[k].hPos = imgClubMenu[k].h/2;
        xClubLobby.xTouchClubMenu[k].xPos = subTemp[XPOS]-xClubLobby.xTouchClubMenu[k].wPos/2;
        xClubLobby.xTouchClubMenu[k].yPos = subTemp[YPOS]-xClubLobby.xTouchClubMenu[k].hPos/2;
    }
    
    
    //X자 위의 빨간 상자
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    xClubIconShop.xTouchExit.wPos = 80;
    xClubIconShop.xTouchExit.hPos = 80;
    xClubIconShop.xTouchExit.xPos = subTemp[XPOS]-xClubIconShop.xTouchExit.wPos/2;
    xClubIconShop.xTouchExit.yPos = subTemp[YPOS]-xClubIconShop.xTouchExit.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(255, 0, 0);
    //    fillRect(xClubShop.xTouchExit.xPos, xClubShop.xTouchExit.yPos, xClubShop.xTouchExit.wPos, xClubShop.xTouchExit.hPos);
    //    setAlpha(ALPHA_MAX);
    
    
    ///test
    //데이터 추가
    //    for(int k=0;k<10;k++)
    //    {
    //        sprintf(xClubShop.xData[xClubShop.totalData].strName,"%d번아이템",k);
    //        xClubShop.xData[xClubShop.totalData++].coin = 1000*k;
    //    }
    
    
    //세부메뉴
    xClubIconShop.xDragScroll.totalNum = (xClubIconShop.totalData+1)/2;//스크롤에 들어가는 총 슬롯수
    xClubIconShop.xDragScroll.posGab = 210;//간격
    xClubIconShop.xDragScroll.endPos = -(((xClubIconShop.xDragScroll.totalNum-4)*xClubIconShop.xDragScroll.posGab));//보정
    if(xClubIconShop.xDragScroll.totalNum < 4)//예외처리
        xClubIconShop.xDragScroll.endPos = 0;
    
    
    dragScrollPrc(&xClubIconShop.xDragScroll,1,FALSE);
    int iMax = xClubIconShop.totalData;
    int pos = 0;
    //    gSetColor(0, 0, 255);
    //    setAlpha(100);
    //    fillRect(210, 90, 880, 420);
    //    setAlpha(ALPHA_MAX);
    gSetClip(true, 210, 90, 880, 420);
    for(int i=0;i<iMax;i++)
    {
        pos = xClubIconShop.xDragScroll.pos+(xClubIconShop.xDragScroll.posGab*(i/2));
        subTemp[XPOS] = px-207+pos;
        subTemp[YPOS] = py-120+((i%2)*208);
        
        if(subTemp[XPOS] < -xClubIconShop.xDragScroll.posGab)
            continue;
        if(subTemp[XPOS] > lcdW+xClubIconShop.xDragScroll.posGab)
            continue;
        drawImage(&imgClubIconShop[5], subTemp[XPOS], subTemp[YPOS], imgClubIconShop[5].w/2, 0, imgClubIconShop[5].w/2, imgClubIconShop[5].h, VH);
//        gSetColor(242, 181, 213);
//        setFontSizeORI(18);
//        gDrawString(subTemp[XPOS], subTemp[YPOS]-82, xClubShop.xData[i].strName, VH);
        drawClubIcon(subTemp[XPOS], subTemp[YPOS], i);
        drawImage(&imgClubIconShop[6], subTemp[XPOS], subTemp[YPOS]+85, 0, 0, imgClubIconShop[6].w, imgClubIconShop[6].h, VH);
        gSetColor(255, 255, 255);
        setFontSizeORI(15);
        setCommaNum(strTempS, xClub.xIcon[i].coin);
        gDrawString(subTemp[XPOS], subTemp[YPOS]+85, strTempS, VH);
        setFontSize(11);
        if(xClub.xIcon[i].isOpen==false)
        {
            if(xClub.xMy.clubLv<xClub.xIcon[i].clublv)
            {
                setAlpha(123);
                gSetColor(0, 0, 0);
                fillRect(subTemp[XPOS]-imgClubIconShop[5].w/4, subTemp[YPOS]-imgClubIconShop[5].h/2, imgClubIconShop[5].w/2, imgClubIconShop[5].h);
                setAlpha(ALPHA_MAX);

                gSetColor(255, 255, 255);
                setFontSizeORI(20);
                sprintf(strTempS,"LV.%d\n레벨제한",xClub.xIcon[i].clublv);
                gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
                setFontSize(11);
            }
        }
        else
        {
            setAlpha(123);
            gSetColor(0, 0, 0);
            fillRect(subTemp[XPOS]-imgClubIconShop[5].w/4, subTemp[YPOS]-imgClubIconShop[5].h/2, imgClubIconShop[5].w/2, imgClubIconShop[5].h);
            setAlpha(ALPHA_MAX);
            
            gSetColor(255, 255, 255);
            setFontSizeORI(20);
            sprintf(strTempS,"구매 완료");
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
            setFontSize(11);
        }
    }
    gSetClip(false, 210, 90, 880, 420);
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xClubIconShop.xDragScroll.selectNum = (-xClubIconShop.xDragScroll.pos/xClubIconShop.xDragScroll.posGab);
    if(xClubIconShop.xDragScroll.selectNum < 0)
        xClubIconShop.xDragScroll.selectNum = 0;
    
    for(int i=0;i<iMax;i++)
    {
        subTemp[XPOS] = px-207+((i/2)*xClubIconShop.xDragScroll.posGab);
        subTemp[YPOS] = py-120+(i%2)*208;
        
        xClubIconShop.xTouchSlot[i].wPos = imgClubIconShop[5].w/2;
        xClubIconShop.xTouchSlot[i].hPos = imgClubIconShop[5].h;
        xClubIconShop.xTouchSlot[i].xPos = subTemp[XPOS]+((xClubIconShop.xDragScroll.posGab <= xClubIconShop.xDragScroll.pos ? xClubIconShop.xDragScroll.pos:(xClubIconShop.xDragScroll.pos%xClubIconShop.xDragScroll.posGab))) - xClubIconShop.xTouchSlot[i].wPos/2;
        xClubIconShop.xTouchSlot[i].yPos = subTemp[YPOS] - xClubIconShop.xTouchSlot[i].hPos/2;
        
        //        gSetColor(255, 0, 0);
        //        setAlpha(100);
        //        fillRect(xClubShop.xTouchSlot[i].xPos, xClubShop.xTouchSlot[i].yPos, xClubShop.xTouchSlot[i].wPos, xClubShop.xTouchSlot[i].hPos);
        //        setAlpha(ALPHA_MAX);
        
    }
    
    
    
    for(int i=0;i<3;i++)
    {
        subTemp[XPOS]=px-468;
        subTemp[YPOS]=py-175+(i*95);
        xClubShop.xTouchClubShopMenu[i].wPos=180;
        xClubShop.xTouchClubShopMenu[i].hPos=100;
        xClubShop.xTouchClubShopMenu[i].xPos=subTemp[XPOS]-xClubShop.xTouchClubShopMenu[i].wPos/2;
        xClubShop.xTouchClubShopMenu[i].yPos=subTemp[YPOS]-xClubShop.xTouchClubShopMenu[i].hPos/2;
    }
    gSetColor(0, 0, 0);
    setAlpha(100);
    fillRect(xClubShop.xTouchClubShopMenu[0].xPos, xClubShop.xTouchClubShopMenu[0].yPos, xClubShop.xTouchClubShopMenu[0].wPos, xClubShop.xTouchClubShopMenu[0].hPos);
    setAlpha(ALPHA_MAX);
    
    gSetColor(0, 0, 0);
    setAlpha(100);
    fillRect(xClubShop.xTouchClubShopMenu[2].xPos, xClubShop.xTouchClubShopMenu[2].yPos, xClubShop.xTouchClubShopMenu[2].wPos, xClubShop.xTouchClubShopMenu[2].hPos);
    setAlpha(ALPHA_MAX);

}
void keyClubIconShop(int type, int param1, int param2)
{
    if(xClubShop.selectMenu==CLUBSHOP)
    {
        keyClubShop(type, param1, param2);
        return;
    }
    
    else if(xClubShop.selectMenu==CLUBSTORAGE)
    {
        keyClubStorage(type, param1, param2);
        return;
    }
    
    if(type == MH_KEY_PRESSEVENT)
    {
        bool isClubMenu = false;
        int selectClubMenu = 0;
        for(int k=0;k<CLUBMENUMAX;k++)
        {
            if(touchCheck(&xClubLobby.xTouchClubMenu[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isClubMenu = true;
                selectClubMenu = k;
                break;
            }
        }
        
        if(touchCheck(&xClubShop.xTouchClubShopMenu[0])==TRUE&&touchType==USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xClubShop.selectMenu=CLUBSHOP;
            xClubShop.state=CLUBSHOP_STATE_PLAY;
            initClubShop();
            clubShopFreeLoad(true);
        }

        else if(touchCheck(&xClubShop.xTouchClubShopMenu[2])==TRUE&&touchType==USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xClubShop.selectMenu=CLUBSTORAGE;
            xClubStorage.state=CLUBSTORAGE_STATE_PLAY;
            initClubStorage();
            clubStorageFreeLoad(true);
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBSTORAGEUPDATE, TRUE);
        }
        
       
        //좌하단 4개버튼 기능
        else if(isClubMenu == true && xClubLobby.selectMenu != selectClubMenu)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            switch(selectClubMenu)
            {
                case CLUBLOBBY_MENU_MAIN:
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CMD_CLUBDONATIONCOUNT, TRUE);
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBICONLISTUPDATE, TRUE);
                    xClubLobby.selectMenu = selectClubMenu;
                    break;
                case CLUBLOBBY_MENU_FASHIONWEEK:
                    
                    if(xFashionWeek.isOpen == false)
                    {
                        setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                        sprintf(xPopup.strText, "임시 잠금상태 입니다.");
                    }
                    else
                    {
                        xClubLobby.selectMenu = selectClubMenu;
                        initFashionWeekLobby();
                    }
                    break;
                case CLUBLOBBY_MENU_SHOP:
                    //                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    //                    sprintf(xPopup.strText, "업데이트 예정 입니다.");
                    break;
                default:
                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    sprintf(xPopup.strText, "업데이트 예정 입니다.");
                    break;
            }
        }
        //빨간 Rect부분
        else if(touchCheck(&xClubShop.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xClubShop.selectMenu=CLUBICONSHOP;
            clubIconShopFreeLoad(false);
            xWorldMap.state = WORLDMAP_STATE_PLAY;
        }
        else
        {
            dragScrollKeyPrc(&xClubIconShop.xDragScroll,0);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xClubIconShop.xDragScroll.touchXposBefore != DONT)
        {
            dragScrollKeyPrc(&xClubIconShop.xDragScroll,1);
        }
        else
        {
            bool isSlot = false;
            int selectSlot = 0;
            
            for(int k=0;k<xClubIconShop.totalData;k++)
            {
                if(touchCheck(&xClubIconShop.xTouchSlot[k]) == TRUE&&touchCheck(&xClubShop.xTouchClubShopMenu[1])==FALSE)
                {
                    if(xClub.xMy.masterKey == xNetData.userNum)
                    {
                        isSlot = true;
                        selectSlot = k;
                        break;
                    }
                    else
                    {
                        setPopup(POPUP_CLUBICONBUYNOMASTER, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                    }
                }
            }
            
            if(isSlot == true)
            {
                xClubIconShop.selectedNum = selectSlot+(xClubIconShop.xDragScroll.selectNum*2);
            }
            
            if(xClubIconShop.selectedNum < 0 || xClubIconShop.selectedNum >= xClubIconShop.totalData)
                isSlot = false;
            
            
            if(isSlot == true)
            {
                if(xClub.xIcon[xClubIconShop.selectedNum].isOpen==false)
                {
                    setPopup(POPUP_CLUBICONBUYCHECK, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                }
            }
        }
        xClubIconShop.xDragScroll.touchXpos = DONT;
        xClubIconShop.xDragScroll.touchYpos = DONT;
        xClubIconShop.xDragScroll.touchXposBefore = DONT;
        xClubIconShop.xDragScroll.touchYposBefore = DONT;
        
    }

}

void clubStorageFreeLoad(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("clubbgi.png", &imgClubStorage[0]);//뒷 배경
        loadImg("clubshoptitle.png", &imgClubStorage[1]);//제목
        loadImg("clubshopmain.png",&imgClubStorage[2]);//메인 팝업
        loadImg("clubwealth.png",  &imgClubStorage[3]);//재화 UI
        loadImg("productionmenuexiticon.png", &imgClubStorage[4]);//닫기 버튼
        loadImg("clubshopslot.png", &imgClubStorage[5]);//슬롯 이미지
        loadImg("clubshopgiftbtn.png", &imgClubStorage[6]);//선물하기 버튼
    }
    else
    {
        freeImg(&imgClubStorage[0]);
        freeImg(&imgClubStorage[1]);
        freeImg(&imgClubStorage[2]);
        freeImg(&imgClubStorage[3]);
        freeImg(&imgClubStorage[4]);
        freeImg(&imgClubStorage[5]);
        freeImg(&imgClubStorage[6]);
    }
}

void initClubStorage()
{
    xClubStorage.isSlot=false;
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CLUBSTORAGEUPDATE, TRUE);
}

void drawClubStorage()
{
    int px = cx;
    int py = cy;
    
    drawImage(&imgClubStorage[0], px, py, 0, 0, imgClubStorage[0].w, imgClubStorage[0].h, VH);
    
    subTemp[XPOS]=px-50;
    subTemp[YPOS]=py-282;
    drawImage(&imgClubStorage[1],subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubStorage[1].w, imgClubStorage[1].h, VH);
    
    subTemp[XPOS]=px;
    subTemp[YPOS]=py-20;
    drawImage(&imgClubStorage[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubStorage[2].w, imgClubStorage[2].h, VH);
    
    
    subTemp[XPOS] = px+360;
    subTemp[YPOS] = py-280;
    drawImage(&imgClubStorage[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubStorage[3].w, imgClubStorage[3].h, VH);
    gSetColor(255, 255, 255);
    setFontSizeORI(18);
    
    setCommaNum(strTempS, xClub.money);
    
    gDrawString(subTemp[XPOS]+55, subTemp[YPOS]-5, strTempS, VR);
    setFontSize(11);
    
    
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    drawImage(&imgClubStorage[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubStorage[4].w, imgClubStorage[4].h, VH);
    
    
    //밑의 버튼 4개
    for(int k=0;k<CLUBMENUMAX;k++)
    {
        subTemp[XPOS] = px-500+(k*112);
        subTemp[YPOS] = py+268;
        
        drawImage(&imgClubMenu[k], subTemp[XPOS], subTemp[YPOS], 0, imgClubMenu[k].h/2*(xClubLobby.selectMenu == k?1:0), imgClubMenu[k].w, imgClubMenu[k].h/2, VH);
        
        xClubLobby.xTouchClubMenu[k].wPos = imgClubMenu[k].w;
        xClubLobby.xTouchClubMenu[k].hPos = imgClubMenu[k].h/2;
        xClubLobby.xTouchClubMenu[k].xPos = subTemp[XPOS]-xClubLobby.xTouchClubMenu[k].wPos/2;
        xClubLobby.xTouchClubMenu[k].yPos = subTemp[YPOS]-xClubLobby.xTouchClubMenu[k].hPos/2;
    }
    
    
    //X자 위의 빨간 상자
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py-280;
    xClubStorage.xTouchExit.wPos = 80;
    xClubStorage.xTouchExit.hPos = 80;
    xClubStorage.xTouchExit.xPos = subTemp[XPOS]-xClubShop.xTouchExit.wPos/2;
    xClubStorage.xTouchExit.yPos = subTemp[YPOS]-xClubShop.xTouchExit.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(255, 0, 0);
    //    fillRect(xClubShop.xTouchExit.xPos, xClubShop.xTouchExit.yPos, xClubShop.xTouchExit.wPos, xClubShop.xTouchExit.hPos);
    //    setAlpha(ALPHA_MAX);
    
    
    //세부메뉴
    xClubStorage.xDragScroll.totalNum = xClubStorage.totalData/2;//스크롤에 들어가는 총 슬롯수
    xClubStorage.xDragScroll.posGab = 210;//간격
    xClubStorage.xDragScroll.endPos = -(((xClubStorage.xDragScroll.totalNum-4)*xClubStorage.xDragScroll.posGab));//보정
    if(xClubStorage.xDragScroll.totalNum < 4)//예외처리
        xClubStorage.xDragScroll.endPos = 0;
    
    
    dragScrollPrc(&xClubStorage.xDragScroll,1,FALSE);
    int iMax = xClubStorage.totalData;
    int pos = 0;
    //    gSetColor(0, 0, 255);
    //    setAlpha(100);
    //    fillRect(210, 90, 880, 420);
    //    setAlpha(ALPHA_MAX);
    gSetClip(true, 210, 90, 880, 420);
    for(int i=0;i<iMax;i++)
    {
        pos = xClubStorage.xDragScroll.pos+(xClubShop.xDragScroll.posGab*(i/2));
        subTemp[XPOS] = px-207+pos;
        subTemp[YPOS] = py-120+((i%2)*208);
        
        if(subTemp[XPOS] < -xClubStorage.xDragScroll.posGab)
            continue;
        if(subTemp[XPOS] > lcdW+xClubStorage.xDragScroll.posGab)
            continue;
        drawImage(&imgClubStorage[5], subTemp[XPOS], subTemp[YPOS], imgClubStorage[5].w/2, 0, imgClubStorage[5].w/2, imgClubStorage[5].h, VH);
        drawClubItem(subTemp[XPOS], subTemp[YPOS], xClubStorage.xData[i].num);
        gSetColor(242, 181, 213);
        setFontSizeORI(18);
        gDrawString(subTemp[XPOS], subTemp[YPOS]-82, xClubStorage.xData[i].strName, VH);
        setFontSize(11);

        drawPacker(imgOrderNumBox, subTemp[XPOS]+80, subTemp[YPOS]-90, 0, 0, imgW(imgOrderNumBox), imgH(imgOrderNumBox), VH);
        gSetColor(255, 255, 255);
        sprintf(strTempS, "%d",xClubStorage.xData[i].count);
        gDrawString(subTemp[XPOS]+80-1, subTemp[YPOS]-90-2, strTempS, VH);

        drawImage(&imgClubStorage[6], subTemp[XPOS], subTemp[YPOS]+85, 0, 0, imgClubStorage[6].w, imgClubStorage[6].h, VH);
    }
    gSetClip(false, 210, 90, 880, 420);
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xClubStorage.xDragScroll.selectNum = (-xClubStorage.xDragScroll.pos/xClubStorage.xDragScroll.posGab);
    if(xClubStorage.xDragScroll.selectNum < 0)
        xClubStorage.xDragScroll.selectNum = 0;
    
    for(int i=0;i<iMax;i++)
    {
        subTemp[XPOS] = px-207+((i/2)*xClubStorage.xDragScroll.posGab);
        subTemp[YPOS] = py-120+(i%2)*208;
        
        xClubStorage.xTouchSlot[i].wPos = imgClubStorage[5].w/2;
        xClubStorage.xTouchSlot[i].hPos = imgClubStorage[5].h;
        xClubStorage.xTouchSlot[i].xPos = subTemp[XPOS]+((xClubStorage.xDragScroll.posGab <= xClubStorage.xDragScroll.pos ? xClubStorage.xDragScroll.pos:(xClubStorage.xDragScroll.pos%xClubStorage.xDragScroll.posGab))) - xClubStorage.xTouchSlot[i].wPos/2;
        xClubStorage.xTouchSlot[i].yPos = subTemp[YPOS] - xClubStorage.xTouchSlot[i].hPos/2;
        
//        gSetColor(0, 0, 255);
//        setAlpha(100);
//        fillRect(xClubShop.xTouchSlot[i].xPos, xClubShop.xTouchSlot[i].yPos, xClubShop.xTouchSlot[i].wPos, xClubShop.xTouchSlot[i].hPos);
//        setAlpha(ALPHA_MAX);
            xClubStorage.xTouchTakeGift[i].wPos=imgClubStorage[6].w;
            xClubStorage.xTouchTakeGift[i].hPos=imgClubStorage[6].h;
            xClubStorage.xTouchTakeGift[i].xPos = subTemp[XPOS]+((xClubStorage.xDragScroll.posGab <= xClubStorage.xDragScroll.pos ? xClubStorage.xDragScroll.pos:(xClubStorage.xDragScroll.pos%xClubStorage.xDragScroll.posGab))) - xClubStorage.xTouchTakeGift[i].wPos/2;
            xClubStorage.xTouchTakeGift[i].yPos = subTemp[YPOS]+85 - xClubStorage.xTouchTakeGift[i].hPos/2;
        
//        gSetColor(255, 0, 0);
//        setAlpha(100);
//        fillRect(xClubStorage.xTouchUsed[i].xPos, xClubStorage.xTouchUsed[i].yPos, xClubStorage.xTouchUsed[i].wPos, xClubStorage.xTouchUsed[i].hPos);
//        setAlpha(ALPHA_MAX);
    }
    for(int i=0;i<3;i++)
    {
        subTemp[XPOS]=px-468;
        subTemp[YPOS]=py-175+(i*95);
        xClubStorage.xTouchClubShopMenu[i].wPos=180;
        xClubStorage.xTouchClubShopMenu[i].hPos=100;
        xClubStorage.xTouchClubShopMenu[i].xPos=subTemp[XPOS]-xClubStorage.xTouchClubShopMenu[i].wPos/2;
        xClubStorage.xTouchClubShopMenu[i].yPos=subTemp[YPOS]-xClubStorage.xTouchClubShopMenu[i].hPos/2;
    }
    
    for(int k=0;k<2;k++)
    {
        gSetColor(0, 0, 0);
        setAlpha(100);
        fillRect(xClubStorage.xTouchClubShopMenu[k].xPos, xClubStorage.xTouchClubShopMenu[k].yPos, xClubStorage.xTouchClubShopMenu[k].wPos, xClubStorage.xTouchClubShopMenu[k].hPos);
        setAlpha(ALPHA_MAX);
    }
}

void keyClubStorage(int type, int param1, int param2)
{
    bool TakeGift = false;
    if(xClubShop.selectMenu==CLUBSHOP)
    {
        keyClubShop(type, param1, param2);
        return;
    }
    else if(xClubShop.selectMenu==CLUBICONSHOP)
    {
        keyClubIconShop(type, param1, param2);
        return;
    }
    
    else
    {
        if(xClubStorage.state==CLUBSTORAGE_STATE_TAKEGIFT)
        {
            keyClubShopGift(type, param1, param2);
        }
        else if(xClubStorage.state==CLUBSTORAGE_STATE_PLAY)
        {
            
            if(type == MH_KEY_PRESSEVENT)
            {
                bool isClubMenu = false;
                int selectClubMenu = 0;
                for(int k=0;k<CLUBMENUMAX;k++)
                {
                    if(touchCheck(&xClubLobby.xTouchClubMenu[k]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                    {
                        isClubMenu = true;
                        selectClubMenu = k;
                        break;
                    }
                }
                
                if(touchCheck(&xClubStorage.xTouchClubShopMenu[0])==TRUE&&touchType==USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    xClubShop.selectMenu=CLUBSHOP;
                    xClubShop.state=CLUBSHOP_STATE_PLAY;
                    clubShopFreeLoad(true);
                }
                
                else if(touchCheck(&xClubStorage.xTouchClubShopMenu[1])==TRUE&&touchType==USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    
                    xClubShop.selectMenu=CLUBICONSHOP;
                    initClubIconShop();
                    clubIconShopFreeLoad(true);
                }
                
                //좌하단 4개버튼 기능
                else if(isClubMenu == true && xClubLobby.selectMenu != selectClubMenu)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    switch(selectClubMenu)
                    {
                        case CLUBLOBBY_MENU_MAIN:
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_CMD_CLUBDONATIONCOUNT, TRUE);
                            xClubLobby.selectMenu = selectClubMenu;
                            
                            break;
                        case CLUBLOBBY_MENU_FASHIONWEEK:
                            
                            if(xFashionWeek.isOpen == false)
                            {
                                setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                                sprintf(xPopup.strText, "임시 잠금상태 입니다.");
                            }
                            else
                            {
                                xClubLobby.selectMenu = selectClubMenu;
                                initFashionWeekLobby();
                            }
                            break;
                        case CLUBLOBBY_MENU_SHOP:
                            //                    setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            //                    sprintf(xPopup.strText, "업데이트 예정 입니다.");
                            break;
                        default:
                            setPopup(POPUP_USERTEXT, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            sprintf(xPopup.strText, "업데이트 예정 입니다.");
                            break;
                    }
                }
                //빨간 Rect부분
                else if(touchCheck(&xClubStorage.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
                {
                    playSnd(SND_MENU_OK);
                    xWorldMap.isKeyReturn = TRUE;
                    xClubShop.selectMenu=CLUBSTORAGE;
                    clubStorageFreeLoad(false);
                    xWorldMap.state = WORLDMAP_STATE_PLAY;
                }
                else
                {
                    dragScrollKeyPrc(&xClubStorage.xDragScroll,0);
                }
            }
            else if(type == MH_KEY_RELEASEEVENT)
            {
                if(xClubStorage.xDragScroll.touchXposBefore != DONT)
                {
                    dragScrollKeyPrc(&xClubStorage.xDragScroll,1);
                }
                else
                {
                    int selectSlot = 0;
                    
                    for(int k=0;k<xClubStorage.totalData;k++)
                    {
                        if(touchCheck(&xClubStorage.xTouchSlot[k]) == TRUE&&touchCheck(&xClubStorage.xTouchTakeGift[k])==FALSE)
                        {
                            if(xClub.xMy.masterKey == xNetData.userNum)
                            {
                                if(xClubStorage.isSlot==false)
                                {
                                    xClubStorage.isSlot = true;
                                    selectSlot = k;
                                    break;
                                }
                                else
                                {
                                    xClubStorage.isSlot = false;
                                    selectSlot = k;
                                    break;
                                }
                            }
                            else
                            {
                                setPopup(POPUP_CLUBGIFTNOTMASTER, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            }
                        }
                        else
                        {
                            xClubStorage.isSlot=false;
                        }
                        if(touchCheck(&xClubStorage.xTouchTakeGift[k])==TRUE)
                        {
                            if(xClub.xMy.masterKey == xNetData.userNum)
                            {
                                TakeGift=true;
                                selectSlot=k;
                                break;
                            }
                            else
                            {
                                setPopup(POPUP_CLUBGIFTNOTMASTER, PLAY_PLAY, PLAY_PLAY, 0, DONT);
                            }
                        }
                    }
                    
                    
                    if(xClubStorage.isSlot == true)
                    {
                        if(xClubStorage.xData[xClubStorage.selectedNum].count!=0)
                        {
                            xClubStorage.selectedNum=selectSlot+(xClubStorage.xDragScroll.selectNum*2);
                            if(xClub.xMy.masterKey == xNetData.userNum)
                            {
                                xClubStorage.state=CLUBSTORAGE_STATE_TAKEGIFT;
                                initClubShopGift();
                                clubShopGiftFreeLoad(true);
                            }
                        }
                    }
                    
                    if(TakeGift==true)
                    {
                        //selectSlotTemp = selectSlot+(xClubStorage.xDragScroll.selectNum*2);
                        xClubStorage.selectedNum=selectSlot+(xClubStorage.xDragScroll.selectNum*2);

                        if(xClubStorage.xData[xClubStorage.selectedNum].count!=0)
                        {
                            xClubStorage.selectedNum=selectSlot+(xClubStorage.xDragScroll.selectNum*2);
                            
                            if(xClub.xMy.masterKey == xNetData.userNum)
                            {
                                xClubStorage.state=CLUBSTORAGE_STATE_TAKEGIFT;
                                initClubShopGift();
                                clubShopGiftFreeLoad(true);
                            }
                        }
                    }
                    if(xClubStorage.selectedNum < 0 || xClubStorage.selectedNum >= xClubStorage.totalData)
                    {
                        xClubStorage.isSlot = false;
                        TakeGift = false;
                    }
                }
                xClubStorage.xDragScroll.touchXpos = DONT;
                xClubStorage.xDragScroll.touchYpos = DONT;
                xClubStorage.xDragScroll.touchXposBefore = DONT;
                xClubStorage.xDragScroll.touchYposBefore = DONT;
            }
        }
    }
    
}

void clubShopGiftFreeLoad(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("clubshopgiftmain.png", &imgClubShopGift[0]);//선물하기 메인팝업
        loadImg("clubshopmember.png", &imgClubShopGift[1]);//멤버 슬롯
        loadImg("clubshopcheck.png", &imgClubShopGift[2]);//선택시 체크버튼
        loadImg("clubgiftoff.png",&imgClubShopGift[3]);//선물하기 꺼졌을때...
    }
    else
    {
        freeImg(&imgClubShopGift[0]);
        freeImg(&imgClubShopGift[1]);
        freeImg(&imgClubShopGift[2]);
        freeImg(&imgClubShopGift[3]);
    }
        
}
void initClubShopGift()
{
    //방장빼주세요
    xClubShopGift.sortCount=0;
//    for(int k=0;k<xClub.totalMember;k++)
//    {
//        if(xClub.xMy.masterKey != xClub.xMember[k].userKey)
//        {
//            xClubShopGift.memberCode[xClubShopGift.sortCount++] = k;
//        }
//    }
    for(int k=0;k<xClub.totalMember;k++)
    {
        xClubShopGift.memberCode[xClubShopGift.sortCount++] = k;
    }

    for(int i=0;i<CLUBMEMBERMAX;i++)
    {
       xClubShopGift.touched[i]=false;
    }

    xClubShopGift.giftCount=0;
}
void drawClubShopGift()
{
    int px=cx;
    int py=cy;
    
    drawBgFillRect();
    
    drawImage(&imgClubShopGift[0], px, py, 0, 0, imgClubShopGift[0].w, imgClubShopGift[0].h, VH);
    xClubShopGift.xTouchGiftMainframe.wPos=imgClubShopGift[0].w;
    xClubShopGift.xTouchGiftMainframe.hPos=imgClubShopGift[0].h;
    xClubShopGift.xTouchGiftMainframe.xPos=px-xClubShopGift.xTouchGiftMainframe.wPos/2;
    xClubShopGift.xTouchGiftMainframe.yPos=py-xClubShopGift.xTouchGiftMainframe.hPos/2;
//    setAlpha(100);
//    gSetColor(255,0,0);
//    fillRect(353, 145, 430, 330);
//    setAlpha(ALPHA_MAX);
    int friendDataSlot=0;
    int pos=0;
    xClubShopGift.totalData=xClubShopGift.sortCount;
    xClubShopGift.xDragScroll.totalNum = xClubShopGift.totalData;//스크롤에 들어가는 총 슬롯수
    xClubShopGift.xDragScroll.posGab = 80;//간격
    xClubShopGift.xDragScroll.endPos = -(((xClubShopGift.xDragScroll.totalNum-4)*xClubShopGift.xDragScroll.posGab));//보정
   

    if(xClubShopGift.xDragScroll.totalNum < 4)//예외처리
        xClubShopGift.xDragScroll.endPos = 0;
    
    dragScrollPrc(&xClubShopGift.xDragScroll,1,FALSE);
    gSetClip(true, 353, 145, 430, 330);
    for(int i=0;i<xClubShopGift.totalData;i++)
    {
        pos = xClubShopGift.xDragScroll.pos+(xClubShopGift.xDragScroll.posGab*i);
        subTemp[XPOS] = 571;
        subTemp[YPOS] = py-120+pos;
        
        
        if(subTemp[YPOS] < -xClubShopGift.xDragScroll.posGab)
            continue;
        if(subTemp[YPOS] > lcdH+xClubShopGift.xDragScroll.posGab)
            continue;
        
        int memberCode = xClubShopGift.memberCode[i];
        
        
        friendDataSlot=getFriendSlot(xClub.xMember[memberCode].userKey);
        
        drawFriendProfile(subTemp[XPOS]-168, subTemp[YPOS], xFriendData[friendDataSlot].userNum, 60);
        
        
        drawImage(&imgClubShopGift[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubShopGift[1].w, imgClubShopGift[1].h, VH);
        gSetColor(255, 238, 235);
        setFontSizeORI(22);
        sprintf(strTempS, "LV.%d %s",xFriendData[friendDataSlot].lv,xFriendData[friendDataSlot].strNickName);
        gDrawString(subTemp[XPOS]-50, subTemp[YPOS], strTempS, VH);
        setFontSize(11);
        
        
        
        
        if(xClubShopGift.touched[i]==TRUE)
        {
            drawImage(&imgClubShopGift[2], subTemp[XPOS]+175, subTemp[YPOS]-20, 0, 0, imgClubShopGift[2].w, imgClubShopGift[2].h, VH);
        }
    }
    gSetClip(false, 353, 145, 430, 330);
    
    //거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
    xClubShopGift.xDragScroll.selectNum = (-xClubShopGift.xDragScroll.pos/xClubShopGift.xDragScroll.posGab);
    if(xClubShopGift.xDragScroll.selectNum < 0)
        xClubShopGift.xDragScroll.selectNum = 0;
    
    for(int i=0;i<xClubShopGift.totalData;i++)
    {
        subTemp[XPOS] = 571;
        subTemp[YPOS] = py-120+(i*xClubShopGift.xDragScroll.posGab);
        
        xClubShopGift.xTouchSlot[i].wPos = imgClubShopGift[1].w;
        xClubShopGift.xTouchSlot[i].hPos = imgClubShopGift[1].h;
        xClubShopGift.xTouchSlot[i].xPos = subTemp[XPOS]-xClubShopGift.xTouchSlot[i].wPos/2;
        xClubShopGift.xTouchSlot[i].yPos = subTemp[YPOS]+((xClubShopGift.xDragScroll.posGab <= xClubShopGift.xDragScroll.pos ? xClubShopGift.xDragScroll.pos:(xClubShopGift.xDragScroll.pos%xClubShopGift.xDragScroll.posGab))) - xClubShopGift.xTouchSlot[i].hPos/2;
//        gSetColor(0, 0, 255);
//        setAlpha(100);
//        fillRect(xClubShopGift.xTouchSlot[i].xPos, xClubShopGift.xTouchSlot[i].yPos, xClubShopGift.xTouchSlot[i].wPos, xClubShopGift.xTouchSlot[i].hPos);
//        setAlpha(ALPHA_MAX);
    }
    
    xClubShopGift.xTouchCan.wPos=430;
    xClubShopGift.xTouchCan.hPos=330;
    xClubShopGift.xTouchCan.xPos=353;
    xClubShopGift.xTouchCan.yPos=145;
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xClubShopGift.xTouchCan.xPos, xClubShopGift.xTouchCan.yPos, xClubShopGift.xTouchCan.wPos, xClubShopGift.xTouchCan.hPos);
//    setAlpha(ALPHA_MAX);
    subTemp[XPOS]=px;
    subTemp[YPOS]=py+192;
    xClubShopGift.xTouchSend.wPos=imgClubShopGift[3].w;
    xClubShopGift.xTouchSend.hPos=imgClubShopGift[3].h;
    xClubShopGift.xTouchSend.xPos=subTemp[XPOS]-xClubShopGift.xTouchSend.wPos/2;
    xClubShopGift.xTouchSend.yPos=subTemp[YPOS]-xClubShopGift.xTouchSend.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xClubShopGift.xTouchSend.xPos, xClubShopGift.xTouchSend.yPos, xClubShopGift.xTouchSend.wPos, xClubShopGift.xTouchSend.hPos);
//    setAlpha(ALPHA_MAX);
    if(xClubShopGift.giftCount<=0)
    {
        drawImage(&imgClubShopGift[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgClubShopGift[3].w, imgClubShopGift[3].h, VH);
    }

    
    subTemp[XPOS]=px+152;
    subTemp[YPOS]=py+180;
    gSetColor(255, 235, 238);
    setFontSizeORI(18);
    sprintf(strTempS, "수량: %d", xClubShopGift.giftCount);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);
}

void keyClubShopGift(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xClubShopGift.xTouchGiftMainframe)==FALSE&&touchType==USER_POINT_PRESS_EVENT)
        {
            for(int i=0;i<CLUBMEMBERMAX;i++)
            {
                xClubShopGift.xTouchSlot[i].touched=false;
            }
            xClubShop.selectMenu=CLUBSTORAGE;
            xClubStorage.state=CLUBSTORAGE_STATE_PLAY;
            initClubStorage();
            clubShopGiftFreeLoad(false);
        }
        else if(touchCheck(&xClubShopGift.xTouchSend)==TRUE&&xClubShopGift.giftCount>0)
        {
            setPopup(POPUP_CLUBGIVEGIFTCHECK, PLAY_PLAY, PLAY_PLAY, 0, DONT);
        }
        else
        {
            dragScrollKeyPrc(&xClubShopGift.xDragScroll,2);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xClubShopGift.xDragScroll.touchYposBefore != DONT)
        {
            dragScrollKeyPrc(&xClubShopGift.xDragScroll,3);
        }
        else
        {
            bool isSlot = false;
            int selectSlot = 0;
            
            for(int k=0;k<xClubShopGift.totalData;k++)
            {
                if(touchCheck(&xClubShopGift.xTouchSlot[k]) == TRUE)
                {
                    isSlot = true;
                    selectSlot = k;
                    break;
                }
            }
            
            int selectSlotTemp=0;
            if(isSlot == true)
            {
                
                selectSlotTemp = selectSlot+(xClubShopGift.xDragScroll.selectNum);
            }
            
            if(selectSlotTemp < 0 || selectSlotTemp >= xClubShopGift.totalData)
                isSlot = false;
            
            
            if(isSlot == true)
            {
                if(touchCheck(&xClubShopGift.xTouchCan)==TRUE)
                {
                    if(xClubStorage.xData[xClubStorage.selectedNum].count>xClubShopGift.giftCount)
                    {
                        if(xClubShopGift.touched[selectSlotTemp]==false)
                        {
                            xClubShopGift.touched[selectSlotTemp]= true;
                            
                            xClubShopGift.giftCount++;
                        }
                        else
                        {
                            xClubShopGift.touched[selectSlotTemp]= false;
                            
                            xClubShopGift.giftCount--;
                            if(xClubShopGift.giftCount<0)
                            {
                                xClubShopGift.giftCount=0;
                            }
                        }
                    }
                    else if(xClubStorage.xData[xClubStorage.selectedNum].count==xClubShopGift.giftCount)
                    {
                        if(xClubShopGift.touched[selectSlotTemp]==true)
                        {
                            xClubShopGift.touched[selectSlotTemp]= false;
                            
                            xClubShopGift.giftCount--;
                            if(xClubShopGift.giftCount<0)
                            {
                                xClubShopGift.giftCount=0;
                            }
                        }
                    }
                }
            }
        }
        xClubShopGift.xDragScroll.touchXpos = DONT;
        xClubShopGift.xDragScroll.touchYpos = DONT;
        xClubShopGift.xDragScroll.touchXposBefore = DONT;
        xClubShopGift.xDragScroll.touchYposBefore = DONT;
    }
}

void CandyFormerFreeLoad(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("candyformer_main.png", &imgFormer[0]); //메인 프레임
        loadImg("candyformer_ok.png", &imgFormer[1]);   //팝업 닫기
        loadImg("candyformer_start.png", &imgFormer[2]); //타이머 시작
        loadImg("candyformer_getoff.png", &imgFormer[3]); //획득 불가
        loadImg("candyformer_geton.png", &imgFormer[4]); //획득 가능
        loadImg("candy_former0.png", &imgMerchin[0]);//팝업창에서의 생산기 이미지 4000번부터 4006번까지
        loadImg("candy_former1.png", &imgMerchin[1]);
        loadImg("candy_former2.png", &imgMerchin[2]);
        loadImg("candy_former3.png", &imgMerchin[3]);
        loadImg("candy_former4.png", &imgMerchin[4]);
        loadImg("candy_former5.png", &imgMerchin[5]);
        loadImg("candy_former6.png", &imgMerchin[6]);
    }
    else
    {
        freeImg(&imgFormer[0]);
        freeImg(&imgFormer[1]);
        freeImg(&imgFormer[2]);
        freeImg(&imgFormer[3]);
        freeImg(&imgFormer[4]);
    }
}

void initCandyFormer()
{
    xFormer.index = getFormerIndex(xMap.dataKey[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);
}
void drawCandyFormer()
{
    int px = cx;
    int py = cy;
    xFormer.xTouchStart.wPos=0;
    xFormer.xTouchStart.hPos=0;
    xFormer.xTouchStart.xPos=0;
    xFormer.xTouchStart.yPos=0;
    
    xFormer.xTouchTake.wPos=0;
    xFormer.xTouchTake.hPos=0;
    xFormer.xTouchTake.xPos=0;
    xFormer.xTouchTake.yPos=0;
    
    drawBgFillRect();
    drawImage(&imgFormer[0], px, py, 0, 0, imgFormer[0].w, imgFormer[0].h, VH);
    
    subTemp[XPOS] = px+82;
    subTemp[YPOS] = py-111;
    
    gDrawStringBold(subTemp[XPOS], subTemp[YPOS], "제작 완료까지 남은시간", VH, 233,217,193,57,48,47);
    int objindex=xFormer.xData[xFormer.index].index;
    if(objindex<0)
    {
        objindex=objindex*(-1);
    }
    
    int objindex1=objindex/1000;
    int objindex2=objindex%1000;
    
    subTemp[XPOS] = px+82+63;
    subTemp[YPOS] = py-75+20;
    
    drawTimeSprintf(strTempS,xFormer.EndTimer[xFormer.index],1);
    setFontSize(14);
    gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VR,251,51,23,17,11,11);
    setFontSize(11);
    
    int type=xObj.xObjData[objindex1][objindex2].specialType;
    int giftTypeImgNum;
    switch(type)
    {
        case 2:
            giftTypeImgNum=ICON_TYPE_GOLD;
            break;
        case 3:
            giftTypeImgNum=ICON_TYPE_LOOK;
            break;
        case 4:
            giftTypeImgNum=ICON_TYPE_CANDY;
            break;
        default:
            break;
    }
    
    int giftNum=xObj.xObjData[objindex1][objindex2].specialCount;

    subTemp[XPOS] = px+82+35;
    subTemp[YPOS] = py-26+25;
    setCommaNum(strTempS, giftNum);
    gSetColor(255, 255, 255);
    setFontSize(14);
    gDrawString(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VR);
    setFontSize(11);
    
    drawIcon(subTemp[XPOS]+20, subTemp[YPOS]-6, giftTypeImgNum);
    
   
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+175;
    drawImage(&imgFormer[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFormer[1].w, imgFormer[1].h, VH);
    
    xFormer.xTouchOK.wPos=imgFormer[1].w;
    xFormer.xTouchOK.hPos=imgFormer[1].h;
    xFormer.xTouchOK.xPos=subTemp[XPOS]-xFormer.xTouchOK.wPos/2;
    xFormer.xTouchOK.yPos=subTemp[YPOS]-xFormer.xTouchOK.hPos/2;
    
//    setAlpha(100);
//    gSetColor(0, 0, 255);
//    fillRect(xFormer.xTouchOK.xPos, xFormer.xTouchOK.yPos, xFormer.xTouchOK.wPos, xFormer.xTouchOK.hPos);
//    setAlpha(ALPHA_MAX);
    
    subTemp[XPOS] = px+82;
    subTemp[YPOS] = py+95;
    if(xFormer.xData[xFormer.index].state==0)
    {
        drawImage(&imgFormer[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFormer[2].w, imgFormer[2].h, VH);
        xFormer.xTouchStart.wPos=imgFormer[2].w;
        xFormer.xTouchStart.hPos=imgFormer[2].h;
        xFormer.xTouchStart.xPos=subTemp[XPOS]-xFormer.xTouchStart.wPos/2;
        xFormer.xTouchStart.yPos=subTemp[YPOS]-xFormer.xTouchStart.hPos/2;
    }
    else if(xFormer.xData[xFormer.index].state==1)
    {
        drawImage(&imgFormer[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFormer[3].w, imgFormer[3].h, VH);
    }
    
    else if(xFormer.xData[xFormer.index].state==2)
    {
        drawImage(&imgFormer[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFormer[4].w, imgFormer[4].h, VH);
        xFormer.xTouchTake.wPos=imgFormer[4].w;
        xFormer.xTouchTake.hPos=imgFormer[4].h;
        xFormer.xTouchTake.xPos=subTemp[XPOS]-xFormer.xTouchTake.wPos/2;
        xFormer.xTouchTake.yPos=subTemp[YPOS]-xFormer.xTouchTake.hPos/2;
    }
    
    
    
    
    
//    setAlpha(100);
//    gSetColor(0, 255, 0);
//    fillRect(xFormer.xTouchBtn.xPos, xFormer.xTouchBtn.yPos, xFormer.xTouchBtn.wPos, xFormer.xTouchBtn.hPos);
//    setAlpha(ALPHA_MAX);
    
    subTemp[XPOS]=px-125-15;
    subTemp[YPOS]=py-26;

    drawImage(&imgMerchin[objindex2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMerchin[objindex2].w, imgMerchin[objindex2].h, VH);
    xGame.fgameScale = 1.0f;
    xGame.fgameScaleCx =cx;
    xGame.fgameScaleCy =cy;
    
}

void keyCandyFormer(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xFormer.xTouchOK)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xWorldMap.state=WORLDMAP_STATE_PLAY;
            CandyFormerFreeLoad(false);
        }
        else if(touchCheck(&xFormer.xTouchStart)==TRUE&&touchType==USER_POINT_PRESS_EVENT&&xFormer.xData[xFormer.index].state==0)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            int objindex=xFormer.xData[xFormer.index].index;
            if(objindex<0)
            {
                objindex=objindex*(-1);
            }
            
            int objindex1=objindex/1000;
            int objindex2=objindex%1000;
            xFormer.xData[xFormer.index].endTime=xObj.xObjData[objindex1][objindex2].specialTime+xCalendar.nowTime;
            xEventQueueNet.key[xEventQueueNet.totalNum] = xFormer.xData[xFormer.index].key;
            xEventQueueNet.time[xEventQueueNet.totalNum]=xFormer.xData[xFormer.index].endTime;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FORMERSTART, TRUE);
        }
        else if(touchCheck(&xFormer.xTouchTake)==TRUE&&touchType==USER_POINT_PRESS_EVENT&&xFormer.xData[xFormer.index].state==2)
        {
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            int objindex=xFormer.xData[xFormer.index].index;
            if(objindex<0)
            {
                objindex=objindex*(-1);
            }
            
            int objindex1=objindex/1000;
            int objindex2=objindex%1000;
            int giftNum=xObj.xObjData[objindex1][objindex2].specialCount;
            int type=xObj.xObjData[objindex1][objindex2].specialType;
            int giftTypeImgNum;
            switch(type)
            {
                case 2:
                    giftTypeImgNum=ICON_TYPE_GOLD;
                    break;
                case 3:
                    giftTypeImgNum=ICON_TYPE_LOOK;
                    break;
                case 4:
                    giftTypeImgNum=ICON_TYPE_CANDY;
                    break;
                default:
                    break;
            }
            setBonus(xTouch.xPos, xTouch.yPos, giftTypeImgNum, giftNum);
            xEventQueueNet.formerType[xEventQueueNet.totalNum] = type;
            xEventQueueNet.result[xEventQueueNet.totalNum] = giftNum;
            xEventQueueNet.key[xEventQueueNet.totalNum] = xFormer.xData[xFormer.index].key;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_FORMERTAKEWEALTH, TRUE);
        }
    }
}

int getFormerIndex(int key)
{
    for(int k=0;k<xFormer.totalData;k++)
    {
        if(xFormer.xData[k].key == key)
            return k;
    }
    return DONT;
}

int getFormerIndex2(int index)
{
    for(int k=0;k<xFormer.totalData;k++)
    {
        if(xFormer.xData[k].index==index)
        {
            return k;
        }
        else if(xFormer.xData[k].index==(-index))
        {
            return k;
        }
    }
    return DONT;
}
void prcFormerTimer()
{
    for(int i=0;i<xFormer.totalData;i++)
    {
        if(xFormer.xData[i].state==1)
        {
            xFormer.EndTimer[i]=xFormer.xData[i].endTime;
            xFormer.EndTimer[i]-=xCalendar.nowTime;
            if(xFormer.EndTimer[i]<=0)
            {
                xFormer.EndTimer[i]=0;
                xFormer.xData[i].state=2;
            }
        }
        else if(xFormer.xData[i].state==0)
        {
            xFormer.EndTimer[i]=0;
        }
    }
}

void prcProductionSlotTimer()
{
    for(int k=0;k<xProduction_FP.totalData;k++)
    {
        for(int i=0;i<xProduction_FP.xData[k].totalSlot;i++)
        {
            if(xProduction_FP.xData[k].xSlot[i].state==2)
            {
                xProduction_FP.EndTimer[k][i] = xProduction_FP.xData[k].xSlot[i].endTime;
                xProduction_FP.EndTimer[k][i] -= xCalendar.nowTime;
                if(xProduction_FP.EndTimer[k][i]<=0)
                {
                    xProduction_FP.EndTimer[k][i]=0;
                    xProduction_FP.xData[k].xSlot[i].state=3;
                }
                else if(xProduction_FP.xData[k].xSlot[i].state==1||xProduction_FP.xData[k].xSlot[i].state==3)
                {
                    xProduction_FP.EndTimer[k][i]=0;
                }
            }
        }
    }
}

void prcGreenHouseSlotTimer()
{
    for(int k=0;k<xGreenHouse_FP.totalSlot;k++)
    {
        if(xGreenHouse_FP.xSlot[k].state==2)
        {
            xGreenHouse_FP.EndTimer[k] = xGreenHouse_FP.xSlot[k].endTime;
            xGreenHouse_FP.EndTimer[k] -= xCalendar.nowTime;
            
            if(xGreenHouse_FP.EndTimer[k]<=0)
            {
                xGreenHouse_FP.EndTimer[k]=0;
                xGreenHouse_FP.xSlot[k].state = 3;
            }
            else if(xGreenHouse_FP.xSlot[k].state==1||xGreenHouse_FP.xSlot[k].state==3)
            {
                xGreenHouse_FP.EndTimer[k]=0;
            }
        }
    }
}

void prcSpinningWheelSlotTimer()
{
    for(int k=0;k<xSpinning_FP.totalSlot;k++)
    {
        if(xSpinning_FP.xSlot[k].state==2)
        {
            xSpinning_FP.EndTimer[k] = xSpinning_FP.xSlot[k].endTime;
            xSpinning_FP.EndTimer[k] -= xCalendar.nowTime;
            if(xSpinning_FP.EndTimer[k]<=0)
            {
                xSpinning_FP.EndTimer[k]=0;
                xSpinning_FP.xSlot[k].state = 3;
            }
            else if(xSpinning_FP.xSlot[k].state==1||xSpinning_FP.xSlot[k].state==3)
            {
                xSpinning_FP.EndTimer[k]=0;
            }
        }
    }
}
///////////////////////////////////////////
//당근 획득 KBY
void prcCarrot()
{
    if(xSaveTemp.carrot.oriData<xChs.carrotMax)
    {
        if(xCalendar.nowTime - xCalcCarrot.time > -1)
        {
            xCalcCarrot.time = xCalendar.nowTime;
            xCalcCarrot.TimeTemp = xCalcCarrot.carrotComplete-xCalendar.nowTime;
//            log("KBY_TIME : %d", xCalcCarrot.TimeTemp);
            //1초씩 시간차감
            if(xCalendar.nowTime >= xCalcCarrot.carrotComplete && xCalcCarrot.isAdd == false)
            {
                xEventQueueNet.end_time[xEventQueueNet.totalNum]=xCalendar.nowTime;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETCARROT, TRUE);
                xCalcCarrot.isAdd = true;
                xCalcCarrot.carrotComplete = xCalendar.nowTime+xChs.carrotTime;
            }
        }
    }
    else
    {
        
    }
}

void initWorldMapRocket()
{
	xAutoSell.frame = 0;
	xAutoSell.state = ROCKET_STATE_WAIT;
	
	xAutoSell.xSmoke[0].isPlay = xAutoSell.xSmoke[1].isPlay = xAutoSell.xSmoke[2].isPlay = xAutoSell.xSmoke[3].isPlay = FALSE;
	xAutoSell.xFire.isPlay = FALSE;
	xAutoSell.xSmoke[0].alpha=0; xAutoSell.xSmoke[0].scale=0; xAutoSell.xSmoke[0].x=0; xAutoSell.xSmoke[0].rot=0;
	xAutoSell.xSmoke[1].alpha=0; xAutoSell.xSmoke[1].scale=0; xAutoSell.xSmoke[1].x=0; xAutoSell.xSmoke[1].rot=0;
	xAutoSell.xSmoke[2].alpha=0; xAutoSell.xSmoke[2].scale=0; xAutoSell.xSmoke[2].x=0; xAutoSell.xSmoke[2].rot=0;
	xAutoSell.xSmoke[3].alpha=0; xAutoSell.xSmoke[3].scale=0; xAutoSell.xSmoke[3].x=0; xAutoSell.xSmoke[3].rot=0;
	xAutoSell.xRocket.alpha = ALPHA_MAX;
}

void playWorldMapRocket()
{
	if(xAutoSell.state == ROCKET_STATE_WAIT)
	{
		xAutoSell.frame = 0;
		xAutoSell.state = ROCKET_STATE_MOVE;
		
		xAutoSell.xSmoke[0].isPlay = xAutoSell.xSmoke[1].isPlay = xAutoSell.xSmoke[2].isPlay = xAutoSell.xSmoke[3].isPlay = FALSE;
		xAutoSell.xFire.isPlay = FALSE;
		xAutoSell.xSmoke[0].alpha=0; xAutoSell.xSmoke[0].scale=0; xAutoSell.xSmoke[0].x=0; xAutoSell.xSmoke[0].rot=0;
		xAutoSell.xSmoke[1].alpha=0; xAutoSell.xSmoke[1].scale=0; xAutoSell.xSmoke[1].x=0; xAutoSell.xSmoke[1].rot=0;
		xAutoSell.xSmoke[2].alpha=0; xAutoSell.xSmoke[2].scale=0; xAutoSell.xSmoke[2].x=0; xAutoSell.xSmoke[2].rot=0;
		xAutoSell.xSmoke[3].alpha=0; xAutoSell.xSmoke[3].scale=0; xAutoSell.xSmoke[3].x=0; xAutoSell.xSmoke[3].rot=0;
		xAutoSell.xRocket.alpha = ALPHA_MAX;
	}
}

void prcWorldMapRocket()
{
	switch(xAutoSell.state)
	{
		case ROCKET_STATE_WAIT:
			xAutoSell.frame = 0;
			break;
		case ROCKET_STATE_MOVE:
			xAutoSell.xRocket.alpha = ALPHA_MAX;
			switch(xAutoSell.frame)
			{
				case 0: xAutoSell.xRocket.x=0;xAutoSell.xRocket.y=0;break;
				case 1: xAutoSell.xRocket.x=-3;xAutoSell.xRocket.y=0;break;
				case 2: xAutoSell.xRocket.x=3;xAutoSell.xRocket.y=0;break;
				case 3: xAutoSell.xRocket.x=-3;xAutoSell.xRocket.y=0;break;
				case 4: xAutoSell.xRocket.x=3;xAutoSell.xRocket.y=0;break;
				case 5: xAutoSell.xRocket.x=-3;xAutoSell.xRocket.y=-1;break;
				case 6: xAutoSell.xRocket.x=1;xAutoSell.xRocket.y=-1;break;
				case 7:	xAutoSell.xRocket.x=-1;xAutoSell.xRocket.y=-2;break;
				case 8:	xAutoSell.xRocket.x=1;xAutoSell.xRocket.y=-2;
					xAutoSell.xSmoke[0].isPlay = xAutoSell.xSmoke[1].isPlay = xAutoSell.xSmoke[2].isPlay = xAutoSell.xSmoke[3].isPlay = TRUE;
					xAutoSell.xSmoke[0].alpha=100*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=50; xAutoSell.xSmoke[0].x=0; xAutoSell.xSmoke[0].rot=0;
					xAutoSell.xSmoke[1].alpha=100*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=50; xAutoSell.xSmoke[1].x=0; xAutoSell.xSmoke[1].rot=0;
					xAutoSell.xSmoke[2].alpha=100*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=50; xAutoSell.xSmoke[2].x=0; xAutoSell.xSmoke[2].rot=0;
					xAutoSell.xSmoke[3].alpha=100*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=50; xAutoSell.xSmoke[3].x=0; xAutoSell.xSmoke[3].rot=0;
					break;
				case 9:	xAutoSell.xRocket.x=-1;xAutoSell.xRocket.y=-3;
					xAutoSell.xSmoke[0].alpha=95*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=58; xAutoSell.xSmoke[0].x=32; xAutoSell.xSmoke[0].rot=360-4;
					xAutoSell.xSmoke[1].alpha=95*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=58; xAutoSell.xSmoke[1].x=-23; xAutoSell.xSmoke[1].rot=3;
					xAutoSell.xSmoke[2].alpha=97*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=55; xAutoSell.xSmoke[2].x=21; xAutoSell.xSmoke[2].rot=360-3;
					xAutoSell.xSmoke[3].alpha=97*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=55; xAutoSell.xSmoke[3].x=-21; xAutoSell.xSmoke[3].rot=2;
					break;
				case 10: xAutoSell.xRocket.x=1;xAutoSell.xRocket.y=-3;
					xAutoSell.xFire.isPlay = TRUE;
					xAutoSell.xSmoke[0].alpha=90*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=65; xAutoSell.xSmoke[0].x=47; xAutoSell.xSmoke[0].rot=360-8;
					xAutoSell.xSmoke[1].alpha=90*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=65; xAutoSell.xSmoke[1].x=-35; xAutoSell.xSmoke[1].rot=7;
					xAutoSell.xSmoke[2].alpha=93*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=60; xAutoSell.xSmoke[2].x=31; xAutoSell.xSmoke[2].rot=360-6;
					xAutoSell.xSmoke[3].alpha=93*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=60; xAutoSell.xSmoke[3].x=-33; xAutoSell.xSmoke[3].rot=5;
					break;
				case 11:xAutoSell.xRocket.x=-1;xAutoSell.xRocket.y=-4;
					xAutoSell.xSmoke[0].alpha=85*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=73; xAutoSell.xSmoke[0].x=57; xAutoSell.xSmoke[0].rot=360-12;
					xAutoSell.xSmoke[1].alpha=85*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=73; xAutoSell.xSmoke[1].x=-43; xAutoSell.xSmoke[1].rot=10;
					xAutoSell.xSmoke[2].alpha=90*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=65; xAutoSell.xSmoke[2].x=39; xAutoSell.xSmoke[2].rot=360-8;
					xAutoSell.xSmoke[3].alpha=90*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=65; xAutoSell.xSmoke[3].x=-41; xAutoSell.xSmoke[3].rot=7;
					break;
				case 12:xAutoSell.xRocket.x=0;xAutoSell.xRocket.y=-5;
					xAutoSell.xSmoke[0].alpha=80*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=80; xAutoSell.xSmoke[0].x=66; xAutoSell.xSmoke[0].rot=360-17;
					xAutoSell.xSmoke[1].alpha=80*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=80; xAutoSell.xSmoke[1].x=-50; xAutoSell.xSmoke[1].rot=14;
					xAutoSell.xSmoke[2].alpha=87*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=70; xAutoSell.xSmoke[2].x=45; xAutoSell.xSmoke[2].rot=360-11;
					xAutoSell.xSmoke[3].alpha=87*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=70; xAutoSell.xSmoke[3].x=-48; xAutoSell.xSmoke[3].rot=9;
					break;
				case 13:xAutoSell.xRocket.y=-5;
					xAutoSell.xSmoke[0].alpha=75*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=88; xAutoSell.xSmoke[0].x=73; xAutoSell.xSmoke[0].rot=360-21;
					xAutoSell.xSmoke[1].alpha=75*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=88; xAutoSell.xSmoke[1].x=-55; xAutoSell.xSmoke[1].rot=17;
					xAutoSell.xSmoke[2].alpha=83*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=75; xAutoSell.xSmoke[2].x=50; xAutoSell.xSmoke[2].rot=360-14;
					xAutoSell.xSmoke[3].alpha=837*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=75; xAutoSell.xSmoke[3].x=-54; xAutoSell.xSmoke[3].rot=12;
					break;
				case 14:xAutoSell.xRocket.y=-5;
					xAutoSell.xSmoke[0].alpha=70*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=95; xAutoSell.xSmoke[0].x=78; xAutoSell.xSmoke[0].rot=360-25;
					xAutoSell.xSmoke[1].alpha=70*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=95; xAutoSell.xSmoke[1].x=-59; xAutoSell.xSmoke[1].rot=21;
					xAutoSell.xSmoke[2].alpha=80*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=80; xAutoSell.xSmoke[2].x=54; xAutoSell.xSmoke[2].rot=360-17;
					xAutoSell.xSmoke[3].alpha=80*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=80; xAutoSell.xSmoke[3].x=-59; xAutoSell.xSmoke[3].rot=14;
					break;
				case 15:xAutoSell.xRocket.y=-5;
					xAutoSell.xSmoke[0].alpha=65*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=103; xAutoSell.xSmoke[0].x=83; xAutoSell.xSmoke[0].rot=360-29;
					xAutoSell.xSmoke[1].alpha=65*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=103; xAutoSell.xSmoke[1].x=-63; xAutoSell.xSmoke[1].rot=24;
					xAutoSell.xSmoke[2].alpha=77*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=85; xAutoSell.xSmoke[2].x=58; xAutoSell.xSmoke[2].rot=360-19;
					xAutoSell.xSmoke[3].alpha=77*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=85; xAutoSell.xSmoke[3].x=-63; xAutoSell.xSmoke[3].rot=16;
					break;
				case 16:xAutoSell.xRocket.y=-6;
					xAutoSell.xSmoke[0].alpha=60*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=110; xAutoSell.xSmoke[0].x=87; xAutoSell.xSmoke[0].rot=360-33;
					xAutoSell.xSmoke[1].alpha=60*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=110; xAutoSell.xSmoke[1].x=-66; xAutoSell.xSmoke[1].rot=28;
					xAutoSell.xSmoke[2].alpha=73*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=90; xAutoSell.xSmoke[2].x=62; xAutoSell.xSmoke[2].rot=360-22;
					xAutoSell.xSmoke[3].alpha=73*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=90; xAutoSell.xSmoke[3].x=-67; xAutoSell.xSmoke[3].rot=18;
					break;
				case 17:xAutoSell.xRocket.y=-6;
					xAutoSell.xSmoke[0].alpha=55*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=118; xAutoSell.xSmoke[0].x=90; xAutoSell.xSmoke[0].rot=360-37;
					xAutoSell.xSmoke[1].alpha=55*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=118; xAutoSell.xSmoke[1].x=-69; xAutoSell.xSmoke[1].rot=31;
					xAutoSell.xSmoke[2].alpha=70*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=95; xAutoSell.xSmoke[2].x=65; xAutoSell.xSmoke[2].rot=360-25;
					xAutoSell.xSmoke[3].alpha=70*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=95; xAutoSell.xSmoke[3].x=-70; xAutoSell.xSmoke[3].rot=21;
					break;
				case 18:xAutoSell.xRocket.y=-6;
					xAutoSell.xSmoke[0].alpha=50*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=125; xAutoSell.xSmoke[0].x=93; xAutoSell.xSmoke[0].rot=360-42;
					xAutoSell.xSmoke[1].alpha=50*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=125; xAutoSell.xSmoke[1].x=-71; xAutoSell.xSmoke[1].rot=35;
					xAutoSell.xSmoke[2].alpha=67*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=100; xAutoSell.xSmoke[2].x=67; xAutoSell.xSmoke[2].rot=360-28;
					xAutoSell.xSmoke[3].alpha=67*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=100; xAutoSell.xSmoke[3].x=-73; xAutoSell.xSmoke[3].rot=23;
					break;
				case 19:xAutoSell.xRocket.y=-7;
					xAutoSell.xSmoke[0].alpha=45*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=133; xAutoSell.xSmoke[0].x=96; xAutoSell.xSmoke[0].rot=360-46;
					xAutoSell.xSmoke[1].alpha=45*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=133; xAutoSell.xSmoke[1].x=-73; xAutoSell.xSmoke[1].rot=38;
					xAutoSell.xSmoke[2].alpha=63*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=105; xAutoSell.xSmoke[2].x=70; xAutoSell.xSmoke[2].rot=360-30;
					xAutoSell.xSmoke[3].alpha=63*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=105; xAutoSell.xSmoke[3].x=-76; xAutoSell.xSmoke[3].rot=25;
					break;
				case 20:xAutoSell.xRocket.y=-7;
					xAutoSell.xSmoke[0].alpha=40*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=140; xAutoSell.xSmoke[0].x=98; xAutoSell.xSmoke[0].rot=360-50;
					xAutoSell.xSmoke[1].alpha=40*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=140; xAutoSell.xSmoke[1].x=-75; xAutoSell.xSmoke[1].rot=41;
					xAutoSell.xSmoke[2].alpha=60*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=110; xAutoSell.xSmoke[2].x=72; xAutoSell.xSmoke[2].rot=360-33;
					xAutoSell.xSmoke[3].alpha=60*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=110; xAutoSell.xSmoke[3].x=-79; xAutoSell.xSmoke[3].rot=28;
					break;
				case 21:xAutoSell.xRocket.y=-8;
					xAutoSell.xSmoke[0].alpha=35*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=148; xAutoSell.xSmoke[0].x=100; xAutoSell.xSmoke[0].rot=360-54;
					xAutoSell.xSmoke[1].alpha=35*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=148; xAutoSell.xSmoke[1].x=-76; xAutoSell.xSmoke[1].rot=45;
					xAutoSell.xSmoke[2].alpha=57*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=115; xAutoSell.xSmoke[2].x=74; xAutoSell.xSmoke[2].rot=360-36;
					xAutoSell.xSmoke[3].alpha=57*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=115; xAutoSell.xSmoke[3].x=-81; xAutoSell.xSmoke[3].rot=30;
					break;
				case 22:xAutoSell.xRocket.y=-8;
					xAutoSell.xSmoke[0].alpha=30*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=115; xAutoSell.xSmoke[0].x=101; xAutoSell.xSmoke[0].rot=360-58;
					xAutoSell.xSmoke[1].alpha=30*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=115; xAutoSell.xSmoke[1].x=-77; xAutoSell.xSmoke[1].rot=48;
					xAutoSell.xSmoke[2].alpha=53*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=120; xAutoSell.xSmoke[2].x=76; xAutoSell.xSmoke[2].rot=360-39;
					xAutoSell.xSmoke[3].alpha=53*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=120; xAutoSell.xSmoke[3].x=-83; xAutoSell.xSmoke[3].rot=32;
					break;
				case 23:xAutoSell.xRocket.y=-9;
					xAutoSell.xSmoke[0].alpha=25*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=163; xAutoSell.xSmoke[0].x=103; xAutoSell.xSmoke[0].rot=360-62;
					xAutoSell.xSmoke[1].alpha=25*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=163; xAutoSell.xSmoke[1].x=-78; xAutoSell.xSmoke[1].rot=52;
					xAutoSell.xSmoke[2].alpha=50*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=125; xAutoSell.xSmoke[2].x=77; xAutoSell.xSmoke[2].rot=360-42;
					xAutoSell.xSmoke[3].alpha=50*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=125; xAutoSell.xSmoke[3].x=-84; xAutoSell.xSmoke[3].rot=35;
					break;
				case 24:xAutoSell.xRocket.y=-10;
					xAutoSell.xSmoke[0].alpha=20*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=170; xAutoSell.xSmoke[0].x=103; xAutoSell.xSmoke[0].rot=360-66;
					xAutoSell.xSmoke[1].alpha=20*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=170; xAutoSell.xSmoke[1].x=-79; xAutoSell.xSmoke[1].rot=55;
					xAutoSell.xSmoke[2].alpha=47*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=130; xAutoSell.xSmoke[2].x=79; xAutoSell.xSmoke[2].rot=360-44;
					xAutoSell.xSmoke[3].alpha=47*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=130; xAutoSell.xSmoke[3].x=-86; xAutoSell.xSmoke[3].rot=37;
					break;
				case 25:xAutoSell.xRocket.y=-11;
					xAutoSell.xSmoke[0].alpha=15*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=178; xAutoSell.xSmoke[0].x=104; xAutoSell.xSmoke[0].rot=360-71;
					xAutoSell.xSmoke[1].alpha=15*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=178; xAutoSell.xSmoke[1].x=-79; xAutoSell.xSmoke[1].rot=59;
					xAutoSell.xSmoke[2].alpha=43*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=135; xAutoSell.xSmoke[2].x=80; xAutoSell.xSmoke[2].rot=360-47;
					xAutoSell.xSmoke[3].alpha=43*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=135; xAutoSell.xSmoke[3].x=-87; xAutoSell.xSmoke[3].rot=39;
					break;
				case 26:xAutoSell.xRocket.y=-13;
					xAutoSell.xSmoke[0].alpha=10*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=185; xAutoSell.xSmoke[0].x=105; xAutoSell.xSmoke[0].rot=360-75;
					xAutoSell.xSmoke[1].alpha=10*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=185; xAutoSell.xSmoke[1].x=-80; xAutoSell.xSmoke[1].rot=62;
					xAutoSell.xSmoke[2].alpha=40*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=140; xAutoSell.xSmoke[2].x=81; xAutoSell.xSmoke[2].rot=360-50;
					xAutoSell.xSmoke[3].alpha=40*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=140; xAutoSell.xSmoke[3].x=-89; xAutoSell.xSmoke[3].rot=41;
					break;
				case 27:xAutoSell.xRocket.y=-16;
					xAutoSell.xSmoke[0].alpha=5*ALPHA_MAX/100; xAutoSell.xSmoke[0].scale=193; xAutoSell.xSmoke[0].x=105; xAutoSell.xSmoke[0].rot=360-79;
					xAutoSell.xSmoke[1].alpha=5*ALPHA_MAX/100; xAutoSell.xSmoke[1].scale=193; xAutoSell.xSmoke[1].x=-80; xAutoSell.xSmoke[1].rot=66;
					xAutoSell.xSmoke[2].alpha=37*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=145; xAutoSell.xSmoke[2].x=82; xAutoSell.xSmoke[2].rot=360-53;
					xAutoSell.xSmoke[3].alpha=37*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=145; xAutoSell.xSmoke[3].x=-90; xAutoSell.xSmoke[3].rot=44;
					break;
				case 28:xAutoSell.xRocket.y=-19;
					xAutoSell.xSmoke[0].alpha=0; xAutoSell.xSmoke[0].scale=200; xAutoSell.xSmoke[0].x=105; xAutoSell.xSmoke[0].rot=360-83;
					xAutoSell.xSmoke[1].alpha=0; xAutoSell.xSmoke[1].scale=200; xAutoSell.xSmoke[1].x=-80; xAutoSell.xSmoke[1].rot=69;
					xAutoSell.xSmoke[2].alpha=33*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=150; xAutoSell.xSmoke[2].x=83; xAutoSell.xSmoke[2].rot=360-55;
					xAutoSell.xSmoke[3].alpha=33*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=150; xAutoSell.xSmoke[3].x=-91; xAutoSell.xSmoke[3].rot=46;
					break;
				case 29:xAutoSell.xRocket.y=-23;
					xAutoSell.xSmoke[0].isPlay = xAutoSell.xSmoke[1].isPlay = FALSE;
					xAutoSell.xSmoke[2].alpha=30*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=155; xAutoSell.xSmoke[2].x=84; xAutoSell.xSmoke[2].rot=360-58;
					xAutoSell.xSmoke[3].alpha=30*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=155; xAutoSell.xSmoke[3].x=-92; xAutoSell.xSmoke[3].rot=48;
					break;
				case 30:xAutoSell.xRocket.y=-28;
					xAutoSell.xSmoke[2].alpha=27*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=160; xAutoSell.xSmoke[2].x=85; xAutoSell.xSmoke[2].rot=360-61;
					xAutoSell.xSmoke[3].alpha=27*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=160; xAutoSell.xSmoke[3].x=-92; xAutoSell.xSmoke[3].rot=51;
					break;
				case 31:xAutoSell.xRocket.y=-33;
					xAutoSell.xSmoke[2].alpha=23*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=165; xAutoSell.xSmoke[2].x=85; xAutoSell.xSmoke[2].rot=360-64;
					xAutoSell.xSmoke[3].alpha=23*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=165; xAutoSell.xSmoke[3].x=-93; xAutoSell.xSmoke[3].rot=53;
					break;
				case 32:xAutoSell.xRocket.y=-38;
					xAutoSell.xSmoke[2].alpha=20*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=170; xAutoSell.xSmoke[2].x=86; xAutoSell.xSmoke[2].rot=360-66;
					xAutoSell.xSmoke[3].alpha=20*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=170; xAutoSell.xSmoke[3].x=-94; xAutoSell.xSmoke[3].rot=55;
					break;
				case 33:xAutoSell.xRocket.y=-44;
					xAutoSell.xSmoke[2].alpha=17*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=175; xAutoSell.xSmoke[2].x=86; xAutoSell.xSmoke[2].rot=360-69;
					xAutoSell.xSmoke[3].alpha=17*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=175; xAutoSell.xSmoke[3].x=-94; xAutoSell.xSmoke[3].rot=58;
					break;
				case 34:xAutoSell.xRocket.y=-51;
					xAutoSell.xSmoke[2].alpha=13*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=180; xAutoSell.xSmoke[2].x=86; xAutoSell.xSmoke[2].rot=360-72;
					xAutoSell.xSmoke[3].alpha=13*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=180; xAutoSell.xSmoke[3].x=-94; xAutoSell.xSmoke[3].rot=60;
					break;
				case 35:xAutoSell.xRocket.y=-57;
					xAutoSell.xSmoke[2].alpha=10*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=185; xAutoSell.xSmoke[2].x=87; xAutoSell.xSmoke[2].rot=360-75;
					xAutoSell.xSmoke[3].alpha=10*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=185; xAutoSell.xSmoke[3].x=-95; xAutoSell.xSmoke[3].rot=62;
					break;
				case 36:xAutoSell.xRocket.y=-65;
					xAutoSell.xSmoke[2].alpha=7*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=190; xAutoSell.xSmoke[2].x=87; xAutoSell.xSmoke[2].rot=360-77;
					xAutoSell.xSmoke[3].alpha=7*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=190; xAutoSell.xSmoke[3].x=-95; xAutoSell.xSmoke[3].rot=64;
					break;
				case 37:xAutoSell.xRocket.y=-72;
					xAutoSell.xSmoke[2].alpha=3*ALPHA_MAX/100; xAutoSell.xSmoke[2].scale=195; xAutoSell.xSmoke[2].x=87; xAutoSell.xSmoke[2].rot=360-80;
					xAutoSell.xSmoke[3].alpha=3*ALPHA_MAX/100; xAutoSell.xSmoke[3].scale=195; xAutoSell.xSmoke[3].x=-95; xAutoSell.xSmoke[3].rot=67;
					break;
				case 38:xAutoSell.xRocket.y=-80;
					xAutoSell.xSmoke[2].alpha=0; xAutoSell.xSmoke[2].scale=200; xAutoSell.xSmoke[2].x=87; xAutoSell.xSmoke[2].rot=360-83;
					xAutoSell.xSmoke[3].alpha=0; xAutoSell.xSmoke[3].scale=200; xAutoSell.xSmoke[3].x=-95; xAutoSell.xSmoke[3].rot=69;
					break;
				case 39:xAutoSell.xRocket.y=-88;
					xAutoSell.xSmoke[0].isPlay = xAutoSell.xSmoke[1].isPlay = xAutoSell.xSmoke[2].isPlay = xAutoSell.xSmoke[3].isPlay = FALSE;
					break;
				case 40:xAutoSell.xRocket.y=-97;break;
				case 41:xAutoSell.xRocket.y=-106;break;
				case 42:xAutoSell.xRocket.y=-115;break;
				case 43:xAutoSell.xRocket.y=-125;break;
				case 44:xAutoSell.xRocket.y=-134;break;
				case 45:xAutoSell.xRocket.y=-145;break;
				case 46:xAutoSell.xRocket.y=-155;break;
				case 47:xAutoSell.xRocket.y=-165;break;
				case 48:xAutoSell.xRocket.y=-176;break;
				case 49:xAutoSell.xRocket.y=-187;break;
				case 50:xAutoSell.xRocket.y=-198;break;
				case 51:xAutoSell.xRocket.y=-209;break;
				case 52:xAutoSell.xRocket.y=-221;break;
				case 53:xAutoSell.xRocket.y=-233;break;
				case 54:xAutoSell.xRocket.y=-245;break;
				case 55:xAutoSell.xRocket.y=-257;break;
				case 56:xAutoSell.xRocket.y=-270;break;
				case 57:xAutoSell.xRocket.y=-282;break;
				case 58:xAutoSell.xRocket.y=-295;break;
				case 59:xAutoSell.xRocket.y=-308;break;
				case 60:xAutoSell.xRocket.y=-321;break;
				case 61:xAutoSell.xRocket.y=-334;break;
				case 62:xAutoSell.xRocket.y=-348;break;
				case 63:xAutoSell.xRocket.y=-361;break;
				case 64:xAutoSell.xRocket.y=-375;break;
				case 65:xAutoSell.xRocket.y=-389;break;
				case 66:xAutoSell.xRocket.y=-403;break;
				case 67:xAutoSell.xRocket.y=-417;break;
				case 68:xAutoSell.xRocket.y=-432;break;
				case 69:xAutoSell.xRocket.y=-446;break;
				case 70:xAutoSell.xRocket.y=-461;break;
				case 71:xAutoSell.xRocket.y=-475;break;
				case 72:xAutoSell.xRocket.y=-490;break;
				case 73:xAutoSell.xRocket.y=-505;break;
				case 74:xAutoSell.xRocket.y=-520;break;
				case 75:xAutoSell.xRocket.y=-535;break;
				case 76:xAutoSell.xRocket.y=-551;break;
				case 77:xAutoSell.xRocket.y=-566;break;
				case 78:xAutoSell.xRocket.y=-582;break;
				case 79:xAutoSell.xRocket.y=-597;break;
				case 80:xAutoSell.xRocket.y=-613;break;
				case 81:xAutoSell.xRocket.y=-629;break;
				case 82:xAutoSell.xRocket.y=-645;break;
				case 83:xAutoSell.xRocket.y=-661;break;
				case 84:xAutoSell.xRocket.y=-677;break;
				case 85:xAutoSell.xRocket.y=-693;break;
				case 86:xAutoSell.xRocket.y=-710;break;
				case 87:xAutoSell.xRocket.y=-726;break;
				case 88:xAutoSell.xRocket.y=-743;break;
				case 89:xAutoSell.xRocket.y=-760;break;
				case 90:xAutoSell.xRocket.y=-776;break;
				case 91:xAutoSell.xRocket.y=-793;break;
				case 92:xAutoSell.xRocket.y=-810;break;
				case 93:xAutoSell.xRocket.y=-827;break;
				case 94:xAutoSell.xRocket.y=-845;break;
				case 95:xAutoSell.xRocket.y=-862;break;
				case 96:xAutoSell.xRocket.y=-879;break;
				case 97:xAutoSell.xRocket.y=-897;break;
				case 98:xAutoSell.xRocket.y=-914;break;
				case 99:xAutoSell.xRocket.y=-932;break;
				case 100:xAutoSell.xRocket.y=-950;break;
				case 101:xAutoSell.xRocket.y=-967;break;
				case 102:xAutoSell.xRocket.y=-985;break;
				case 103:xAutoSell.xRocket.y=-1003;break;
				case 104:xAutoSell.xRocket.y=-1021;break;
				case 105:xAutoSell.xRocket.y=-1040;break;
				case 106:xAutoSell.xRocket.y=-1058;break;
				case 107:xAutoSell.xRocket.y=-1076;break;
				case 108:xAutoSell.xRocket.y=-1095;break;
				case 109:xAutoSell.xRocket.y=-1113;break;
				case 110:xAutoSell.xRocket.y=-1132;break;
				case 111:xAutoSell.xRocket.y=-1150;break;
				case 112:xAutoSell.xRocket.y=-1169;break;
				case 113:xAutoSell.xRocket.y=-1188;break;
				case 114:xAutoSell.xRocket.y=-1207;break;
				case 115:xAutoSell.xRocket.y=-1226;break;
				case 116:xAutoSell.xRocket.y=-1245;break;
				case 117:xAutoSell.xRocket.y=-1265;break;
				case 118:xAutoSell.xRocket.y=-1284;break;
				case 119:xAutoSell.xRocket.y=-1304;break;
				case 120:
					xAutoSell.xFire.isPlay = FALSE;
					xAutoSell.xRocket.y = 0;
					xAutoSell.xRocket.x = 0;
					xAutoSell.state = ROCKET_STATE_BACK;
					xAutoSell.xRocket.alpha = 0;
					break;
			}
			break;
		case ROCKET_STATE_BACK:
			xAutoSell.xRocket.alpha += 15;
			if(xAutoSell.xRocket.alpha >= ALPHA_MAX)
				initWorldMapRocket();
			
			
	}
	
	xAutoSell.frame++;
}

void drawWorldMapRocket()
{
	int effX = 0;
	int effY = 0;
	subTemp[XPOS] = xMap.pointX-2-502;
	subTemp[YPOS] = xMap.pointY+722-435 + 200;
	drawImage(&imgWorldMapRocketBottom[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgWorldMapRocketBottom[0].w, imgWorldMapRocketBottom[0].h, BH);
	
	
	if(xAutoSell.state == ROCKET_STATE_MOVE)
	{
		effX = xAutoSell.xRocket.x;
		effY = xAutoSell.xRocket.y;
	}
	
	subTemp[XPOS] = xMap.pointX-2-502 + effX;
	subTemp[YPOS] = xMap.pointY+722-496 + 200 + effY;
	
	//불꽃
	if(xAutoSell.xFire.isPlay == TRUE)
	{
		xGame.isReSizeDraw = true;
		xGame.reSize = 300;
		xGame.isBlend = true;
		xGame.blendType = BLEND_ADDP;
		xGame.isRotate = true;
		xGame.rotateNum = 180;
		drawImage(&imgWorldMapRocketEFF[ROCKET_EFF_FIRE], subTemp[XPOS], subTemp[YPOS]+imgWorldMapRocketEFF[ROCKET_EFF_FIRE].h/2, (xAutoSell.frame%10)*(imgWorldMapRocketEFF[ROCKET_EFF_FIRE].w/10), 0, imgWorldMapRocketEFF[ROCKET_EFF_FIRE].w/10, imgWorldMapRocketEFF[ROCKET_EFF_FIRE].h, VH);
		xGame.isBlend = false;
		xGame.isReSizeDraw = false;
		xGame.isRotate = false;
	}
	
	//로켓
	setAlpha(xAutoSell.xRocket.alpha);
	drawImage(&imgWorldMapRocket[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgWorldMapRocket[0].w, imgWorldMapRocket[0].h, BH);
	setAlpha(ALPHA_MAX);
	//구름
	for(int i = 0; i < 4; i++)
	{
		if(xAutoSell.xSmoke[i].isPlay == TRUE)
		{
			xGame.isReSizeDraw = true;
			xGame.reSize = xAutoSell.xSmoke[i].scale;
			xGame.isRotate = true;
			xGame.rotateNum = xAutoSell.xSmoke[i].rot;
			setAlpha(xAutoSell.xSmoke[i].alpha);
				drawImage(&imgWorldMapRocketEFF[ROCKET_EFF_SMOKE], subTemp[XPOS]+xAutoSell.xSmoke[i].x, subTemp[YPOS], 0, 0, imgWorldMapRocketEFF[ROCKET_EFF_SMOKE].w, imgWorldMapRocketEFF[ROCKET_EFF_SMOKE].h, BH);
			setAlpha(ALPHA_MAX);
			xGame.isReSizeDraw = false;
			xGame.isRotate = false;
		}
	}
	
	subTemp[XPOS] = xMap.pointX-2-502;
	subTemp[YPOS] = xMap.pointY+722-496 + 200;
	
	xTouchRocket.xPos = xMap.pointX-2-502 - imgWorldMapRocket[0].w/2 -100;
	xTouchRocket.yPos = xMap.pointY+722-435 - imgWorldMapRocket[0].h - imgWorldMapRocketBottom[0].h + 100;
	xTouchRocket.wPos = imgWorldMapRocket[0].w + 200;
	xTouchRocket.hPos = imgWorldMapRocket[0].h + imgWorldMapRocketBottom[0].h + 200;
	
//	setAlpha(150);
//	gSetColor(255, 0, 0);
//	fillRect(xTouchRocket.xPos, xTouchRocket.yPos, xTouchRocket.wPos, xTouchRocket.hPos);
//	gSetColor(255, 255, 255);
//	setAlpha(ALPHA_MAX);
}

void drawWorldMapStorage()
{
	drawImage(&imgWorldMapStorage[0], xMap.pointX-2-684, xMap.pointY+722-350 + 180, 0, 0, imgWorldMapStorage[0].w, imgWorldMapStorage[0].h, BH);
}

void drawWorldMapVinylHouse()
{
//	drawImage(&imgWorldMapVinylHouse[0], xMap.pointX-2-417, xMap.pointY+722+696+170, 0, 0, imgWorldMapVinylHouse[0].w, imgWorldMapVinylHouse[0].h, BH);
}

void drawWorldMapAntenna()
{
	drawImage(&imgWorldMapAntenna[0], xMap.pointX-2+556, xMap.pointY+722-559+200, 0, 0, imgWorldMapAntenna[0].w, imgWorldMapAntenna[0].h, BH);
}

void prcProductTime()
{
	if(xCalendar.nowTime - xAutoProduct.time > 3)
	{
		xAutoProduct.time = xSave.autoProductTime = xCalendar.nowTime;
		prcAutoProduct();
		gameSave(SAVE_SLOT_GAME);
	}
}

void prcAutoProduct()
{
	int type = 0;
	int code = 0;
	int item_index[16];
	int item_count[16];
	int item_category[16];
	int totalNum = 0;
	int makeNum = 100;//LJW 의상제작이 너무 많아 /10 함 나중에 삭제할것!!!
//	xAutoProduct.gold = 0;
	
	for(int i = 0; i < 2; i++)
	{
		for(int j=0;j<PRODUCTIONMENUSLOTMAX;j++)
		{
			if(xProductionMenu.isOpen[i][j] == TRUE
			   && xProductionMenu.lv[i][j] <= xSaveTemp.lv.oriData
			   && xProductionMenu.slotCode[i][j] != DONT)
			{
				type = xProductionMenu.slotCode[i][j] / 1000;
				code = xProductionMenu.slotCode[i][j] % 1000;
				
				item_category[totalNum] = type;
				item_index[totalNum] = xProductionMenu.slotCode[i][j];
				item_count[totalNum] = xFashionData[type][code].makeNum.oriData/makeNum;
				if(item_count[totalNum] <= 0)
					item_count[totalNum] = 1;
				totalNum++;
//				xAutoProduct.gold += xFashionData[type][code].sellPrice.oriData;
			}
		}
	}
	
	if(totalNum <= 0)
		return;
	
	for(int i = 0; i < totalNum; i++)
	{
		for(int j = i+1; j < totalNum; j++)
		{
			if(item_index[i] == item_index[j])
			{
				item_count[i] += item_count[j];
				
				for(int k = j; k < totalNum; k++)
				{
					item_category[k] = item_category[k+1];
					item_index[k] = item_index[k+1];
					item_count[k] = item_count[k+1];
					
					item_category[k+1] = -1;
					item_index[k+1] = -1;
					item_count[k+1] = -1;
				}
				totalNum--;
				if(totalNum < 0)
					totalNum = 0;
			}
		}
	}
	
	for(int i = 0; i < totalNum; i++)
	{
		xEventQueueNet.item_category[xEventQueueNet.totalNum][i] = item_category[i];
		xEventQueueNet.item_index[xEventQueueNet.totalNum][i] = item_index[i];
		xEventQueueNet.item_count[xEventQueueNet.totalNum][i] = item_count[i];
	}
	xEventQueueNet.item_total[xEventQueueNet.totalNum] = totalNum;
	
	
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCT, TRUE);
	

	/////////////////////////////////////////////////
//	setMoney(xAutoProduct.gold);
//	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
	////////////////////////////////////////////////////////////	
	
}

void sleepAutoProduct()
{
	int type = 0;
	int code = 0;
	int item_index[16];
	int item_count[16];
	int item_category[16];
	int totalNum = 0;
	int totalCount = 0;
	int makeNum = 100;//LJW 의상제작이 너무 많아 /10 함 나중에 삭제할것!!!
	M_Int64 time = xCalendar.nowTime - xSave.autoProductTime;
	
	if(time > 86400)//3600*24
		time = 86400;
	
	for(int i = 0; i < 16; i++)
	{
		item_category[i] = -1;
		item_index[i] = -1;
		item_count[i] = -1;
	}
	
	for(int i = 0; i < 2; i++)
	{
		for(int j=0;j<PRODUCTIONMENUSLOTMAX;j++)
		{
			if(xProductionMenu.isOpen[i][j] == TRUE
			   && xProductionMenu.lv[i][j] <= xSaveTemp.lv.oriData
			   && xProductionMenu.slotCode[i][j] != DONT)
			{
				type = xProductionMenu.slotCode[i][j] / 1000;
				code = xProductionMenu.slotCode[i][j] % 1000;
				
				item_category[totalNum] = type;
				item_index[totalNum] = xProductionMenu.slotCode[i][j];
				item_count[totalNum] = (xFashionData[type][code].makeNum.oriData/makeNum);
				if(item_count[totalNum] <= 0)
					item_count[totalNum] = 1;
				item_count[totalNum] *= (time/xFashionData[type][code].makeTime.oriData/3);
				
				totalCount += item_count[totalNum];
				
				totalNum++;
				//				xAutoProduct.gold += xFashionData[type][code].sellPrice.oriData;
			}
		}
	}
	
	if(totalNum <= 0)
		return;
	
	for(int i = 0; i < totalNum; i++)
	{
		for(int j = i+1; j < totalNum; j++)
		{
			if(item_index[i] == item_index[j])
			{
				item_count[i] += item_count[j];
				
				for(int k = j; k < totalNum; k++)
				{
					item_category[k] = item_category[k+1];
					item_index[k] = item_index[k+1];
					item_count[k] = item_count[k+1];
					
					item_category[k+1] = -1;
					item_index[k+1] = -1;
					item_count[k+1] = -1;
				}
				totalNum--;
				if(totalNum < 0)
					totalNum = 0;
			}
		}
	}
	
	if(totalNum <= 0)
		return;
	
	for(int i = 0; i < totalNum; i++)
	{
		xEventQueueNet.item_category[xEventQueueNet.totalNum][i] = item_category[i];
		xEventQueueNet.item_index[xEventQueueNet.totalNum][i] = item_index[i];
		xEventQueueNet.item_count[xEventQueueNet.totalNum][i] = item_count[i];
	}
	xEventQueueNet.item_total[xEventQueueNet.totalNum] = totalNum;
	
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCT, TRUE);
	
	/////////////////////////////////////////////////
	//	setMoney(xAutoProduct.gold);
	//	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
	////////////////////////////////////////////////////////////
	
	xAutoProduct.sleepCount = totalCount;
	
	
	xAutoProduct.isSleep = TRUE;
}

int getSellMaxNum(int code)
{
	for(int i = 0; i < 1024; i++)
	{
		if(xSell.xSlot[i].code == code)
		{
			return xSell.xSlot[i].maxNum;
		}
	}
	
	return DONT;
	
}

void prcSellTime()
{
	if(xCalendar.nowTime - xAutoSell.time > 2)
	{
		xAutoSell.time = xSave.autoSellTime = xCalendar.nowTime;
		prcAutoSell();
		gameSave(SAVE_SLOT_GAME);
	}
}

void prcAutoSell()
{
	int type = 0;
	int code = 0;
	int item_index[16];
	int item_count[16];
	int item_category[16];
	int totalNum = 0;
	int makeNum = 10;//LJW 의상제작이 너무 많아 /10 함 나중에 삭제할것!!!
	int gold = 0;
	//	xAutoProduct.gold = 0;
	
	for(int i=0;i<3;i++)
	{
		type = xSellSlotSave.code[i] / 1000;
		code = xSellSlotSave.code[i] % 1000;
		
		if(xSellSlotSave.code[i] != DONT && xInventoryFashion.haveNum[type][code] > 0)
		{
			item_category[totalNum] = type;
			item_index[totalNum] = xSellSlotSave.code[i];
			item_count[totalNum] = xFashionData[type][code].makeNum.oriData/makeNum*2;
			
			if(item_count[totalNum] <= 0)
				item_count[totalNum] = 4;
			
			if(item_count[totalNum] > xInventoryFashion.haveNum[type][code])
				item_count[totalNum] = xInventoryFashion.haveNum[type][code];
			
			
			gold += xFashionData[type][code].sellPrice.oriData * item_count[totalNum];
			
			totalNum++;
		}
	}
	
	
	if(totalNum <= 0)
		return;
	
	for(int i = 0; i < totalNum; i++)
	{
		xEventQueueNet.item_category[xEventQueueNet.totalNum][i] = item_category[i];
		xEventQueueNet.item_index[xEventQueueNet.totalNum][i] = item_index[i];
		xEventQueueNet.item_count[xEventQueueNet.totalNum][i] = -item_count[i];
	}
	xEventQueueNet.item_total[xEventQueueNet.totalNum] = totalNum;
	
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCT, TRUE);
	
	
	/////////////////////////////////////////////////
	setMoney(gold);
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
	////////////////////////////////////////////////////////////
	
//	subTemp[XPOS] = cx-502;
//	subTemp[YPOS] = cy-496;
//	setBonus(subTemp[XPOS], subTemp[YPOS], ICON_TYPE_GOLD, gold);
	
	subTemp[XPOS] = lcdW - 100;
	subTemp[YPOS] = 150;
	setBonus(subTemp[XPOS], subTemp[YPOS], ICON_TYPE_GOLD, gold);
	
	playWorldMapRocket();
	
}

void sleepAutoSell()
{
	int type = 0;
	int code = 0;
	int item_index[16];
	int item_count[16];
	int item_category[16];
	int totalNum = 0;
	int makeNum = 100;//LJW 의상제작이 너무 많아 /10 함 나중에 삭제할것!!!
	M_Int64 time = xCalendar.nowTime - xSave.autoProductTime;
	int gold = 0;
	
	if(time > 86400)//3600*24
		time = 86400;
	
	for(int i = 0; i < 16; i++)
	{
		item_category[i] = -1;
		item_index[i] = -1;
		item_count[i] = -1;
	}
	
	for(int i=0;i<3;i++)
	{
		type = xSellSlotSave.code[i] / 1000;
		code = xSellSlotSave.code[i] % 1000;
		
		if(xSellSlotSave.code[i] != DONT && xInventoryFashion.haveNum[type][code] > 0)
		{
			item_category[totalNum] = type;
			item_index[totalNum] = xSellSlotSave.code[i];
			item_count[totalNum] = xFashionData[type][code].makeNum.oriData/makeNum*2;
			
			item_count[totalNum] *= (time/xFashionData[type][code].makeTime.oriData/3);
			
			if(item_count[totalNum] <= 0)
				item_count[totalNum] = 2;
			
			if(item_count[totalNum] > xInventoryFashion.haveNum[type][code])
				item_count[totalNum] = xInventoryFashion.haveNum[type][code];
			
			gold += xFashionData[type][code].sellPrice.oriData * item_count[totalNum];
			
			totalNum++;
		}
	}
	
	
	if(totalNum <= 0)
		return;
	
	
	
	for(int i = 0; i < totalNum; i++)
	{
		xEventQueueNet.item_category[xEventQueueNet.totalNum][i] = item_category[i];
		xEventQueueNet.item_index[xEventQueueNet.totalNum][i] = item_index[i];
		xEventQueueNet.item_count[xEventQueueNet.totalNum][i] = -item_count[i];
	}
	xEventQueueNet.item_total[xEventQueueNet.totalNum] = totalNum;
	
	
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_AUTOPRODUCT, TRUE);
	
	/////////////////////////////////////////////////
	setMoney(gold);
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GAMEINFO, TRUE);
	////////////////////////////////////////////////////////////
	
	xAutoSell.isSleep = TRUE;
	
	xAutoSell.gold = gold;
	
}

void LuluPangLobbyFreeLoad(bool isLoad)
{
	if(isLoad==true)
	{
		setPacker(PACKER_STATE_FASHIONSHOW);
		loadImg("lulupang_lobby_bg.png", &imgLuluPangLobby[0]);//뒷배경
		loadImg("lulupang_lobby_rankingbar.png", &imgLuluPangLobby[1]);//랭킹바
		loadImg("lulupang_lobby_ranktab.png",&imgLuluPangLobby[2]);//랭킹탭
		loadImg("productionmenuexiticon.png", &imgLuluPangLobby[3]);//닫기 버튼
		loadImgDocuments("fashionweek14.png", &imgLuluPangLobby[4]);//비어있는 모델 슬롯
		loadImg("lulupang_lobby_model_grade.png", &imgLuluPangLobby[5]);//모델등급별 테두리
		loadImg("lulupang_lobby_startbtn.png",&imgLuluPangLobby[6]);//시작 버튼
		loadImg("lulupang_bestscore.png",&imgLuluPangLobby[7]);//루루팡 최고점수
		loadImgDocuments("fashionweek23.png", &imgFashionWeek[23]);//추가시간, 추가점수 슬롯
		loadImgDocuments("fashionweek24.png", &imgFashionWeek[24]);//피팅하기 버튼
	}
	else
	{
		freeImg(&xPacker[PACKER_STATE_FASHIONSHOW].img);
		freeImg(&imgLuluPangLobby[0]);
		freeImg(&imgLuluPangLobby[1]);
		freeImg(&imgLuluPangLobby[2]);
		freeImg(&imgLuluPangLobby[3]);
		freeImg(&imgLuluPangLobby[4]);
		freeImg(&imgLuluPangLobby[5]);
		freeImg(&imgLuluPangLobby[6]);
		freeImg(&imgLuluPangLobby[7]);
		freeImg(&imgFashionWeek[23]);
		freeImg(&imgFashionWeek[24]);
	}
}

void initLuluPangLobby()
{
	xLuluPangLobby.isThisWeek=true;
	xLuluPangLobby.type=0;
	xLuluPang.TiredCost=10;
//	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETLULUPANGRANKINFO, TRUE);
}

void drawLuluPangLobby()
{
	int px = cx;
	int py = cy;
	
	
	drawImage(&imgLuluPangLobby[0], px, py, 0, 0, imgLuluPangLobby[0].w, imgLuluPangLobby[0].h, VH);
	
	subTemp[XPOS]=px-300;
	subTemp[YPOS]=py-115;
	drawFriendProfile(subTemp[XPOS]-114, subTemp[YPOS], xNetData.userNum, 60);
	drawImage(&imgLuluPangLobby[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgLuluPangLobby[1].w, imgLuluPangLobby[1].h/5, VH);
	setFontSizeORI(18);
	sprintf(strTempS,"Lv %d %s",xSaveTemp.lv.oriData, xSaveTemp.strNickName);
	gSetColor(200, 88, 0);
	gDrawString(subTemp[XPOS]-75, subTemp[YPOS]-5, strTempS, BL);
	setFontSizeORI(14);
	if(xLuluPang.myRank<=0)
	{
		gDrawStringBold(subTemp[XPOS]-189, subTemp[YPOS]-2, "미참여", VH, 86,	255,220 , 33, 20, 20);
	}
	else
	{
		sprintf(strTempS, "%d위",xLuluPang.myRank);
		gDrawStringBold(subTemp[XPOS]-189, subTemp[YPOS]-2, strTempS, VH, 86,	255,220 , 33, 20, 20);
	}
	setFontSizeORI(24);
	if(xLuluPang.score[xLuluPangLobby.type]>0)
	{
		setCommaNum(strTempB, xLuluPang.score[xLuluPangLobby.type]);
		sprintf(strTempS,"%s",strTempB);
	}
	else
	{
		sprintf(strTempS,"0");
	}
	gDrawStringBold(subTemp[XPOS]-75, subTemp[YPOS]-5, strTempS, TL, 255, 255, 255, 33, 20, 20);
	drawImage(&imgLuluPangLobby[7], subTemp[XPOS]+150, subTemp[YPOS]-2, 0, 0, imgLuluPangLobby[7].w, imgLuluPangLobby[7].h, BH);
	setFontSizeORI(18);
	if(xLuluPang.HighScore>0)
	{
		setCommaNum(strTempB, xLuluPang.HighScore);
		sprintf(strTempS,"%s",strTempB);
	}
	else
	{
		sprintf(strTempS,"0");
	}
	gSetColor(159, 105, 59);
	gDrawString(subTemp[XPOS]+150, subTemp[YPOS]-2, strTempS, TH);
	setFontSize(11);
	if(xLuluPangLobby.isThisWeek==true)
	{
		subTemp[XPOS]=px-280;
		subTemp[YPOS]=py-192;
		drawImage(&imgLuluPangLobby[2], subTemp[XPOS], subTemp[YPOS], 0, 51, 67, 70, VH);
		
		subTemp[XPOS]=px-218;
		subTemp[YPOS]=py-184;
		drawImage(&imgLuluPangLobby[2], subTemp[XPOS], subTemp[YPOS], 68, 0, 67, 50, VH);
	}
	
	else
	{
		subTemp[XPOS]=px-280;
		subTemp[YPOS]=py-184;
		drawImage(&imgLuluPangLobby[2], subTemp[XPOS], subTemp[YPOS], 0, 0, 67, 50, VH);
		
		subTemp[XPOS]=px-218;
		subTemp[YPOS]=py-192;
		drawImage(&imgLuluPangLobby[2], subTemp[XPOS], subTemp[YPOS], 68, 51, 67, 70, VH);
	}
	
	subTemp[XPOS]=px-280;
	subTemp[YPOS]=py-192;
	
	xLuluPangLobby.xTouchThisWeek.wPos = 70;
	xLuluPangLobby.xTouchThisWeek.hPos = 70;
	xLuluPangLobby.xTouchThisWeek.xPos = subTemp[XPOS]-xLuluPangLobby.xTouchThisWeek.wPos/2;
	xLuluPangLobby.xTouchThisWeek.yPos = subTemp[YPOS]-xLuluPangLobby.xTouchThisWeek.hPos/2;
	
	subTemp[XPOS]=px-218;
	subTemp[YPOS]=py-192;
	
	xLuluPangLobby.xTouchLastWeek.wPos = 70;
	xLuluPangLobby.xTouchLastWeek.hPos = 70;
	xLuluPangLobby.xTouchLastWeek.xPos = subTemp[XPOS]-xLuluPangLobby.xTouchLastWeek.wPos/2;
	xLuluPangLobby.xTouchLastWeek.yPos = subTemp[YPOS]-xLuluPangLobby.xTouchLastWeek.hPos/2;
	
	subTemp[XPOS]=px-110;
	subTemp[YPOS]=py-220;
	
	xLuluPangLobby.xTouchReward.wPos = 100;
	xLuluPangLobby.xTouchReward.hPos = 70;
	xLuluPangLobby.xTouchReward.xPos = subTemp[XPOS]-xLuluPangLobby.xTouchReward.wPos/2;
	xLuluPangLobby.xTouchReward.yPos = subTemp[YPOS]-xLuluPangLobby.xTouchReward.hPos/2;
	
	//    gSetColor(0, 0, 255);
	//    setAlpha(100);
	//    fillRect(xLuluPangLobby.xTouchReward.xPos, xLuluPangLobby.xTouchReward.yPos, xLuluPangLobby.xTouchReward.wPos, xLuluPangLobby.xTouchReward.hPos);
	//    setAlpha(ALPHA_MAX);
	subTemp[XPOS] = px+525;
	subTemp[YPOS] = py-280;
	drawImage(&imgLuluPangLobby[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgLuluPangLobby[3].w, imgLuluPangLobby[3].h, VH);
	
	xLuluPangLobby.xTouchExit.wPos = 80;
	xLuluPangLobby.xTouchExit.hPos = 80;
	xLuluPangLobby.xTouchExit.xPos = subTemp[XPOS]-xLuluPangLobby.xTouchExit.wPos/2;
	xLuluPangLobby.xTouchExit.yPos = subTemp[YPOS]-xLuluPangLobby.xTouchExit.hPos/2;
	
	subTemp[XPOS]=px+275;
	subTemp[YPOS]=py+258;
	
	drawImage(&imgLuluPangLobby[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgLuluPangLobby[6].w, imgLuluPangLobby[6].h, VH);
	
	xLuluPangLobby.xTouchStart.wPos = 220;
	xLuluPangLobby.xTouchStart.hPos = 65;
	xLuluPangLobby.xTouchStart.xPos = subTemp[XPOS]-xLuluPangLobby.xTouchStart.wPos/2;
	xLuluPangLobby.xTouchStart.yPos = subTemp[YPOS]-xLuluPangLobby.xTouchStart.hPos/2;
	
	
	int pos=0;
	xLuluPangLobby.xDragScroll.totalNum=xLuluPangRank.totalNum;
	xLuluPangLobby.xDragScroll.posGab= imgLuluPangLobby[1].h/5;
	xLuluPangLobby.xDragScroll.endPos=-(((xLuluPangLobby.xDragScroll.totalNum-4)*xLuluPangLobby.xDragScroll.posGab));
	
	if(xLuluPangLobby.xDragScroll.totalNum<4)
		xLuluPangLobby.xDragScroll.endPos=0;
	else
		xLuluPangLobby.xDragScroll.endPos+=5;
	dragScrollPrc(&xLuluPangLobby.xDragScroll, 1, FALSE);
	
	gSetClip(true, 0, py-70, lcdW, 430);
	for(int k=0;k<xLuluPangLobby.xDragScroll.totalNum;k++)
	{
		pos=xLuluPangLobby.xDragScroll.pos+(xLuluPangLobby.xDragScroll.posGab*k);
		subTemp[XPOS] = px-300;
		subTemp[YPOS] = py-18+pos;
		
		if(subTemp[YPOS]<-xLuluPangLobby.xDragScroll.posGab)
			continue;
		if(subTemp[YPOS]>lcdH+xLuluPangLobby.xDragScroll.posGab)
			continue;
		
		
		drawFriendProfile(subTemp[XPOS]-114, subTemp[YPOS], xLuluPangRank.Slot[k].usernum, 60);
		
		switch (xLuluPangRank.Slot[k].rank)
		{
			case 1:
				drawImage(&imgLuluPangLobby[1], subTemp[XPOS], subTemp[YPOS], 0, imgLuluPangLobby[1].h*1/5, imgLuluPangLobby[1].w, imgLuluPangLobby[1].h/5, VH);
				break;
			case 2:
				drawImage(&imgLuluPangLobby[1], subTemp[XPOS], subTemp[YPOS], 0, imgLuluPangLobby[1].h*2/5, imgLuluPangLobby[1].w, imgLuluPangLobby[1].h/5, VH);
				break;
			case 3:
				drawImage(&imgLuluPangLobby[1], subTemp[XPOS], subTemp[YPOS], 0, imgLuluPangLobby[1].h*3/5, imgLuluPangLobby[1].w, imgLuluPangLobby[1].h/5, VH);
				break;
			default:
				drawImage(&imgLuluPangLobby[1], subTemp[XPOS], subTemp[YPOS], 0, imgLuluPangLobby[1].h*4/5, imgLuluPangLobby[1].w, imgLuluPangLobby[1].h/5, VH);
				break;
		}
		if(xLuluPangRank.Slot[k].rank >= 3)
			drawNumPacker(imgFsRankNum, subTemp[XPOS]-195, subTemp[YPOS]-3, xLuluPangRank.Slot[k].rank, -4, VH);
		
		drawImage(&imgLuluPangLobby[7], subTemp[XPOS]+150, subTemp[YPOS]-2, 0, 0, imgLuluPangLobby[7].w, imgLuluPangLobby[7].h, BH);
		
		setFontSizeORI(18);
		sprintf(strTempS,"Lv %d %s",xLuluPangRank.Slot[k].LV, xLuluPangRank.Slot[k].strUserNick);
		gSetColor(200, 88, 0);
		gDrawString(subTemp[XPOS]-75, subTemp[YPOS]-5, strTempS, BL);
		
		setFontSizeORI(24);
		setCommaNum(strTempB, xLuluPangRank.Slot[k].Score);
		sprintf(strTempS, "%s", strTempB);
		gDrawStringBold(subTemp[XPOS]-75, subTemp[YPOS]-5, strTempS, TL, 255, 255, 255, 51, 38, 24);
		
		setFontSizeORI(18);
		setCommaNum(strTempB, xLuluPangRank.Slot[k].BestScore);
		sprintf(strTempS,"%s",strTempB);
		gSetColor(159, 105, 59);
		gDrawString(subTemp[XPOS]+150, subTemp[YPOS]-2, strTempS, TH);
		
		setFontSize(11);
		
	}
	gSetClip(false, 0, py-70, lcdW, 430);
	
	subTemp[XPOS]=px-308;
	subTemp[YPOS]=py+120;
	xLuluPangLobby.xTouchRankArea.wPos=471;
	xLuluPangLobby.xTouchRankArea.hPos=380;
	xLuluPangLobby.xTouchRankArea.xPos=subTemp[XPOS]-xLuluPangLobby.xTouchRankArea.wPos/2;
	xLuluPangLobby.xTouchRankArea.yPos=subTemp[YPOS]-xLuluPangLobby.xTouchRankArea.hPos/2;
	
	//    gSetColor(255, 0, 0);
	//    setAlpha(100);
	//    fillRect(xLuluPangLobby.xTouchRankArea.xPos, xLuluPangLobby.xTouchRankArea.yPos, xLuluPangLobby.xTouchRankArea.wPos, xLuluPangLobby.xTouchRankArea.hPos);
	//    setAlpha(ALPHA_MAX);
	
	for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
	{
		subTemp[XPOS]=px+17+(120*k);
		subTemp[YPOS]=py+50;
		
		int invenModelSlot = DONT;
		if(xLuluPangModel[k].modelKey==DONT)
		{
			invenModelSlot=DONT;
		}
		else
		{
			invenModelSlot = getModelKeyToSlotNum(xLuluPangModel[k].modelKey);
		}
		
		int scoreBuff = 0;
		int timeBuff = 0;
		
		if(invenModelSlot == DONT)
		{
			drawImage(&imgLuluPangLobby[4], subTemp[XPOS]-2, subTemp[YPOS]-25, 0, 0, imgLuluPangLobby[4].w, imgLuluPangLobby[4].h, VH);
		}
		else
		{
			int code = xInventoryModel[invenModelSlot].code;
			XFACE xFaceTemp;
			xFaceTemp.hairNum = code+1000;
			xFaceTemp.faceNum = code+1000;
			xFaceTemp.faceType= FACE_TYPE_NORMAL;
			switch(xModelData[code].grade)
			{
				case 0:
					drawImage(&imgLuluPangLobby[5], subTemp[XPOS], subTemp[YPOS], 357, 0, 115, 304, VH);
					break;
				case 1:
					drawImage(&imgLuluPangLobby[5], subTemp[XPOS], subTemp[YPOS], 235, 0, 115, 304, VH);
					break;
				case 2:
					drawImage(&imgLuluPangLobby[5], subTemp[XPOS], subTemp[YPOS], 116, 0, 115, 304, VH);
					break;
				case 3:
					drawImage(&imgLuluPangLobby[5], subTemp[XPOS], subTemp[YPOS], 0, 0, 115, 304, VH);
					break;
					//                case 4:
					//                    break;
				default:
					break;
			}
			
			drawImage(&imgFashionWeek[23], subTemp[XPOS]+3, subTemp[YPOS]+140-15, 0, 0, imgFashionWeek[23].w, imgFashionWeek[23].h, VH);
			
			xGame.fgameScale=0.7f;
			xGame.fgameScaleCx = subTemp[XPOS];
			xGame.fgameScaleCy = lcdH-(subTemp[YPOS]-10);
			drawFittingBody(subTemp[XPOS]-2, subTemp[YPOS]-25,&xInventoryModel[invenModelSlot].xF,&xFaceTemp,TRUE,xModelData[code].sex);
			xGame.fgameScaleCx = cx;
			xGame.fgameScaleCy = cy;
			xGame.fgameScale = 1.0f;
			
			drawImage(&imgFashionWeek[24], subTemp[XPOS]+36, subTemp[YPOS]+70, 0, 0, imgFashionWeek[24].w, imgFashionWeek[24].h, VH);
			
			xLuluPangLobby.xTouchFittingSlot[k].wPos = imgFashionWeek[24].w;
			xLuluPangLobby.xTouchFittingSlot[k].hPos = imgFashionWeek[24].h;
			xLuluPangLobby.xTouchFittingSlot[k].xPos = subTemp[XPOS]+36-xLuluPangLobby.xTouchFittingSlot[k].wPos/2;
			xLuluPangLobby.xTouchFittingSlot[k].yPos = subTemp[YPOS]+70-xLuluPangLobby.xTouchFittingSlot[k].hPos/2;
			scoreBuff = getPangBuffScore_LuluPang(xLuluPangModel[k].modelKey);
			timeBuff = getPangBuffTime_LuluPang(xLuluPangModel[k].modelKey);
		}
		
		setFontSizeORI(18);
		gSetColor(88, 64, 38);
		if(invenModelSlot == DONT)
			sprintf(strTempS, "없음");
		else
			sprintf(strTempS, "+%d",scoreBuff);
		
		gDrawString(subTemp[XPOS]+43, subTemp[YPOS]+140-30, strTempS, VR);
		if(invenModelSlot == DONT)
			sprintf(strTempS, "없음");
		else
			sprintf(strTempS, "+%d초",timeBuff);
		
		gDrawString(subTemp[XPOS]+43, subTemp[YPOS]+140-6, strTempS, VR);
		setFontSize(11);
		
		xLuluPangLobby.xTouchSelectSlot[k].wPos=115;
		xLuluPangLobby.xTouchSelectSlot[k].hPos=310;
		xLuluPangLobby.xTouchSelectSlot[k].xPos=subTemp[XPOS]-xLuluPangLobby.xTouchSelectSlot[k].wPos/2;
		xLuluPangLobby.xTouchSelectSlot[k].yPos=subTemp[YPOS]-xLuluPangLobby.xTouchSelectSlot[k].hPos/2;
		
		//        gSetColor(0., 0, 255);
		//        setAlpha(100);
		//        fillRect(xLuluPangLobby.xTouchSelectSlot[k].xPos, xLuluPangLobby.xTouchSelectSlot[k].yPos, xLuluPangLobby.xTouchSelectSlot[k].wPos, xLuluPangLobby.xTouchSelectSlot[k].hPos);
		//        setAlpha(ALPHA_MAX);
	}
}

void keyLuluPangLobby(int type, int param1, int param2)
{
	if(xLuluPangLobby.state == LULUPANG_LOBBY_STATE_SETTINGMODEL)
	{
		keyLuluPangSelectModel(type, param1, param2);
	}
	else if(xLuluPangLobby.state == LULUPANG_LOBBY_STATE_SETTINGFITTING)
	{
		keyLuluPangSettingFitting(type, param1, param2);
	}
	else
	{
		if(type==MH_KEY_PRESSEVENT)
		{
			bool isModelSlot = false;
			int selectModelSlot=0;
			for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
			{
				if(touchCheck(&xLuluPangLobby.xTouchSelectSlot[k])==TRUE&& xLuluPangLobby.state != LULUPANG_LOBBY_STATE_RESULTBONUS&&touchType==USER_POINT_PRESS_EVENT)
				{
					isModelSlot=true;
					selectModelSlot=k;
					break;
				}
			}
			
			bool isFittingSlot = false;
			int selectFittingSlot = 0;
			for(int k=0;k<FASHIONWEEKSETTINGMAX;k++)
			{
				if(touchCheck(&xLuluPangLobby.xTouchFittingSlot[k])==TRUE && xLuluPangLobby.state != LULUPANG_LOBBY_STATE_RESULTBONUS&&touchType==USER_POINT_PRESS_EVENT)
				{
					isFittingSlot=true;
					selectFittingSlot=k;
					break;
				}
			}
			if(touchCheck(&xLuluPangLobby.xTouchExit)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				xLuluPangLobby.state=LULUPANG_LOBBY_STATE_MAIN;
				LuluPangLobbyFreeLoad(false);
				xWorldMap.state=WORLDMAP_STATE_PLAY;
			}
			
			else if(touchCheck(&xLuluPangLobby.xTouchThisWeek)==TRUE&& xLuluPangLobby.state != LULUPANG_LOBBY_STATE_RESULTBONUS&&touchType==USER_POINT_PRESS_EVENT)
			{
				xLuluPangLobby.isThisWeek=true;
				xLuluPangLobby.type=0;
//				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETLULUPANGRANKINFO, TRUE);
			}
			
			else if(touchCheck(&xLuluPangLobby.xTouchLastWeek)==TRUE&& xLuluPangLobby.state != LULUPANG_LOBBY_STATE_RESULTBONUS&&touchType==USER_POINT_PRESS_EVENT)
			{
				xLuluPangLobby.isThisWeek=false;
				xLuluPangLobby.type=1;
//				addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETLULUPANGRANKINFO, TRUE);
			}
			
			else if(touchCheck(&xLuluPangLobby.xTouchStart)==TRUE&& xLuluPangLobby.state != LULUPANG_LOBBY_STATE_RESULTBONUS&&touchType==USER_POINT_PRESS_EVENT)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				if(xSaveTemp.tired.oriData<xLuluPang.TiredCost)
				{
					setPopup(POPUP_TIREDEMPTY, playState, playState, 0, DONT);
				}
				else
				{
					setTired(-10);
					xLuluPang.state=LULUPANG_STATE_PLAY;
					
					initPang_Solo();
					loadPang_SoloImg();
				}
			}
			
			else if(touchCheck(&xTouchOk)==TRUE && touchType == USER_POINT_PRESS_EVENT&& xLuluPangLobby.state == LULUPANG_LOBBY_STATE_RESULTBONUS)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				xLuluPangLobby.state=LULUPANG_LOBBY_STATE_MAIN;
			}
			else if(touchCheck(&xLuluPangLobby.xTouchReward)==TRUE&&touchType == USER_POINT_PRESS_EVENT&&xLuluPangLobby.state != LULUPANG_LOBBY_STATE_RESULTBONUS)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				xLuluPangLobby.state=LULUPANG_LOBBY_STATE_RESULTBONUS;
			}
			else
			{
				if(touchCheck(&xLuluPangLobby.xTouchRankArea)==TRUE&& xLuluPangLobby.state != LULUPANG_LOBBY_STATE_RESULTBONUS)
				{
					dragScrollKeyPrc(&xLuluPangLobby.xDragScroll, 2);
				}
			}
			
			if(isModelSlot==true)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				LuluPangSelectModelFreeLoad(true);
				xLuluPangLobby.state = LULUPANG_LOBBY_STATE_SETTINGMODEL;
				xLuluPangLobby.selectModelSlot = selectModelSlot;
			}
			
			if(isFittingSlot==true)
			{
				playSnd(SND_MENU_OK);
				xWorldMap.isKeyReturn = TRUE;
				xLuluPangLobby.selectModelSlot=selectFittingSlot;
				int invenModelSlot = getModelKeyToSlotNum(xLuluPangModel[xLuluPangLobby.selectModelSlot].modelKey);
				
				if(invenModelSlot!=DONT)
				{
					xLuluPangLobby.state = LULUPANG_LOBBY_STATE_SETTINGFITTING;
					xModel.inventoryNum = invenModelSlot;
					xModelFitting.inventoryNum = invenModelSlot;
					
					xFitting.gender = xModelData[xInventoryModel[xModelFitting.inventoryNum].code].sex;
					memcpy(&xFitting.xF[xFitting.gender], &xInventoryModel[xModelFitting.inventoryNum].xF, sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
					setFittingTabChange();
				}
			}
		}
		else if(type == MH_KEY_RELEASEEVENT)
		{
			if(xLuluPangLobby.xDragScroll.touchYposBefore!=DONT&&LULUPANG_LOBBY_STATE_RESULTBONUS)
			{
				dragScrollKeyPrc(&xLuluPangLobby.xDragScroll, 3);
			}
		}
	}
}

void drawNoticeLuluPang()
{
	int px = cx;
	int py = cy;
	drawPacker(imgFsNoticeBg0, px, py, 0, 0, imgW(imgFsNoticeBg0), imgH(imgFsNoticeBg0), VH);
	
	drawPacker(imgFsNoticeBg1, px, py, 0, 0, imgW(imgFsNoticeBg1), imgH(imgFsNoticeBg1), VH);
	for(int i=0;i<12;i++)
	{
		subTemp[XPOS] = px-93+((i/6)*202);
		subTemp[YPOS] = py-95+((i%6)*44);
		drawPacker(imgFsNoticeBg2, subTemp[XPOS], subTemp[YPOS], 0, 0, imgW(imgFsNoticeBg2), imgH(imgFsNoticeBg2), VH);
		gSetColor(175, 150, 123);
		sprintf(strTempS, "%d",xFashionShow.rankGiftLookWorld[i]);
		gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+2, strTempS, VH);
	}
	
	drawBtn(px, py+205, BTN_OK_CONFIRM);
}

void LuluPangSelectModelFreeLoad(bool isLoad)
{
	if(isLoad==true)
	{
		modelImgLoad(TRUE);
	}
	else
	{
		modelImgLoad(FALSE);
	}
}

void drawLuluPangSelectModel()
{
	int px=cx;
	int py=cy;
	
	xModel.totalListNum = 0;
	
	for(int i=0;i<xModel.totalInventoryModel;i++)
	{
		M_Boolean isCheck = FALSE;
		for(int k=0;k<MODELMAINSLOTMAX;k++)
		{
			switch(xModelMainSlot[k].state)
			{
				case MODELMAINSLOT_STATE_WAIT:
				case MODELMAINSLOT_STATE_PLAY:
					xModelMainSlot[k].inventoryNum = getModelKeyToSlotNum(xModelMainSlot[k].modelKey);
					if(xModelMainSlot[k].inventoryNum == i)
						isCheck = TRUE;
					break;
			}
			
		}
		if(isCheck == FALSE)
			xModel.listNumSlot[xModel.totalListNum++] = i;
	}
	
	gSetColor(0, 0, 0);
	fillRect(0, 0, lcdW, lcdH);
	drawPacker(imgModelBg0, px, py, 0, 0, imgW(imgModelBg0), imgH(imgModelBg0), VH);
	
	subTemp[XPOS] = px;
	subTemp[YPOS] = py-222;
	
	//타이틀
	sprintf(strTempS, "배치하실 모델을 선택해 주세요");
	setFontSize(20);
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-6, strTempS, VH, 86, 255, 220, 33, 20, 20);
	setFontSize(11);
	
	//세부메뉴
	xModel.xDragScrollS.totalNum = xModel.totalListNum;
	xModel.xDragScrollS.posGab = 190;
	xModel.xDragScrollS.endPos = -(((xModel.xDragScrollS.totalNum-5)*xModel.xDragScrollS.posGab));
	if(xModel.xDragScrollS.totalNum < 5)
		xModel.xDragScrollS.endPos = 0;
	
	dragScrollPrc(&xModel.xDragScrollS,1,FALSE);
	int iMax = xModel.xDragScrollS.totalNum;
	
	int slotNum;
	int code;
	int upGrade;
	int pos;
	for(int i=0;i<iMax;i++)
	{
		pos = xModel.xDragScrollS.pos+(xModel.xDragScrollS.posGab*i);
		subTemp[XPOS] = px-380+pos;
		subTemp[YPOS] = py;
		
		if(subTemp[XPOS] < -xModel.xDragScrollS.posGab)
			continue;
		if(subTemp[XPOS] > lcdW+xModel.xDragScrollS.posGab)
			continue;
		
		slotNum = xModel.listNumSlot[i];
		code = xInventoryModel[slotNum].code;
		upGrade = xInventoryModel[slotNum].upGrade;
		
		XFACE xFaceTemp;
		xFaceTemp.hairNum = code+1000;
		xFaceTemp.faceNum = code+1000;
		xFaceTemp.faceType = FACE_TYPE_NORMAL;
		
		drawFittingBody(subTemp[XPOS], subTemp[YPOS]+25,&xInventoryModel[slotNum].xF,&xFaceTemp,TRUE,xModelData[xInventoryModel[slotNum].code].sex);
		
		//캐릭터정보
		drawImage(&imgFashionWeek[23], subTemp[XPOS], subTemp[YPOS]+230, 0, 0, imgFashionWeek[23].w, imgFashionWeek[23].h, VH);
		setFontSizeORI(18);
		gSetColor(88, 64, 38);
		
		sprintf(strTempS, "+%d",getPangBuffScore_LuluPang(xInventoryModel[slotNum].key));
		gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+230-16, strTempS, VR);
		sprintf(strTempS, "+%d초",getPangBuffTime_LuluPang(xInventoryModel[slotNum].key));
		gDrawString(subTemp[XPOS]+33, subTemp[YPOS]+230+8, strTempS, VR);
		setFontSize(11);
		
		if(getModelMainSlot_LULUPANG(xInventoryModel[slotNum].key) != DONT)
		{
			int fsInfoW = 0;
			int fsInfoH = 0;
			
			switch(gameCnt%29)
			{
				case 0:fsInfoW =0;fsInfoH =	0;break;
				case 1:fsInfoW =-0.026;fsInfoH =	0.024;break;
				case 2:fsInfoW =-0.116;fsInfoH =	0.105;break;
				case 3:fsInfoW =-0.294;fsInfoH =	0.265;break;
				case 4:fsInfoW =-0.6;fsInfoH =	0.541;break;
				case 5:fsInfoW =-1.12;fsInfoH =	1.01;break;
				case 6:fsInfoW =-2.087;fsInfoH =	1.883;break;
				case 7:fsInfoW =-7.291;fsInfoH =	6.575;break;
				case 8:fsInfoW =-12.493;fsInfoH =	11.267;break;
				case 9:fsInfoW =-13.46;fsInfoH =	12.139;break;
				case 10:fsInfoW =-13.978;fsInfoH =	12.606;break;
				case 11:fsInfoW =-14.288;fsInfoH =	12.886;break;
				case 12:fsInfoW =-14.468;fsInfoH =	13.048;break;
				case 13:fsInfoW =-14.561;fsInfoH =	13.132;break;
				case 14:fsInfoW =-14.592;fsInfoH =	13.16;break;
				case 15:fsInfoW =-14.566;fsInfoH =	13.137;break;
				case 16:fsInfoW =-14.475;fsInfoH =	13.054;break;
				case 17:fsInfoW =-14.298;fsInfoH =	12.895;break;
				case 18:fsInfoW =-13.992;fsInfoH =	12.619;break;
				case 19:fsInfoW =-13.473;fsInfoH =	12.15;break;
				case 20:fsInfoW =-12.504;fsInfoH =	11.277;break;
				case 21:fsInfoW =-7.302;fsInfoH =	6.585;break;
				case 22:fsInfoW =-2.098;fsInfoH =	1.892;break;
				case 23:fsInfoW =-1.132;fsInfoH =	1.021;break;
				case 24:fsInfoW =-0.611;fsInfoH =	0.551;break;
				case 25:fsInfoW =-0.301;fsInfoH =	0.272;break;
				case 26:fsInfoW =-0.12;fsInfoH =	0.108;break;
				case 27:fsInfoW =-0.027;fsInfoH =	0.025;break;
				case 28:fsInfoW =0;fsInfoH =	0;break;
			}
			drawPacker(imgTutoInfo7, subTemp[XPOS], subTemp[YPOS]-180+fsInfoH, 0, 0, imgW(imgTutoInfo7), imgH(imgTutoInfo7), VH);
			drawPacker(imgModelGuestSlot, subTemp[XPOS], subTemp[YPOS]-150, 0, 0, imgW(imgModelGuestSlot), imgH(imgModelGuestSlot), VH);
		}
		
		
		subTemp[YPOS] += 145;
		
		xGame.fgameScaleCx = subTemp[XPOS];
		xGame.fgameScaleCy = lcdH-subTemp[YPOS];
		xGame.fgameScale = 0.7f;
		
		
		switch(xModelData[code].grade)
		{
			case 0:drawPacker(imgNewModelRank0, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank0), imgH(imgNewModelRank0), VH);break;
			case 1:drawPacker(imgNewModelRank1, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank1), imgH(imgNewModelRank1), VH);break;
			case 2:drawPacker(imgNewModelRank2, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank2), imgH(imgNewModelRank2), VH);break;
			case 3:drawPacker(imgNewModelRank3, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
			default: drawPacker(imgNewModelRank3, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank3), imgH(imgNewModelRank3), VH);break;
//			case 4:drawPacker(imgNewModelRank4, subTemp[XPOS]-60-12, subTemp[YPOS]+5, 0, 0, imgW(imgNewModelRank4), imgH(imgNewModelRank4), VH);break;
		}
		
		for(int k=0;k<xModelData[code].upGradeMax;k++)
		{
			if(upGrade > k)
				drawPacker(imgModelLv, subTemp[XPOS]-23+12+(24*k), subTemp[YPOS], imgW(imgModelLv)/2, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
			else
				drawPacker(imgModelLv, subTemp[XPOS]-23+12+(24*k), subTemp[YPOS], 0, 0, imgW(imgModelLv)/2, imgH(imgModelLv), VH);
		}
		drawModelName(subTemp[XPOS]+25+12, subTemp[YPOS]+37,code);
		
		xGame.fgameScaleCx = cx;
		xGame.fgameScaleCy = cy;
		xGame.fgameScale = 1.0f;
	}
	
	//거리별 스크롤 방식에서 셀럭트넘은 첫 시작 값으로 취급한다
	subTemp[XPOS] = px-380;
	subTemp[YPOS] = py+30;
	xModel.xDragScrollS.selectNum = (-xModel.xDragScrollS.pos/xModel.xDragScrollS.posGab);
	for(int i=0;i<=6;i++)
	{
		xModel.xTouchSelectSlot[i].wPos = xModel.xDragScrollS.posGab-4;
		xModel.xTouchSelectSlot[i].hPos = 420;
		xModel.xTouchSelectSlot[i].xPos = subTemp[XPOS]+(xModel.xDragScrollS.posGab*i)+(xModel.xDragScrollS.pos%xModel.xDragScrollS.posGab) - xModel.xTouchSelectSlot[i].wPos/2;
		xModel.xTouchSelectSlot[i].yPos = subTemp[YPOS] - xModel.xTouchSelectSlot[i].hPos/2;
		
		/*
		 gSetColor(255, 0, 0);
		 setAlpha(100);
		 fillRect(xModel.xTouchSelectSlot[i].xPos, xModel.xTouchSelectSlot[i].yPos, xModel.xTouchSelectSlot[i].wPos, xModel.xTouchSelectSlot[i].hPos);
		 setAlpha(ALPHA_MAX);
		 */
	}
	
	subTemp[XPOS] = lcdW-40;
	subTemp[YPOS] = py-232;
	
	xTouchClr.wPos = 80;
	xTouchClr.hPos = 80;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	/*
	 gSetColor(255, 0, 0);
	 setAlpha(100);
	 fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	 setAlpha(ALPHA_MAX);
	 */
	
}
void keyLuluPangSelectModel(int type, int param1, int param2)
{
	bool isKeyEvent = FALSE;
	int keyEventNum = 0;
	if(type == MH_KEY_PRESSEVENT)
	{
		if(touchCheck(&xTouchClr)==TRUE && touchType ==USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			LuluPangLobbyFreeLoad(true);
			LuluPangSelectModelFreeLoad(false);
			xLuluPangLobby.state = LULUPANG_LOBBY_STATE_MAIN;
		}
		else
		{
			dragScrollKeyPrc(&xModel.xDragScrollS, 0);
		}
	}
	else if(type == MH_KEY_RELEASEEVENT)
	{
		if(xModel.xDragScrollS.touchXposBefore!=DONT)
		{
			dragScrollKeyPrc(&xModel.xDragScrollS, 1);
		}
		else
		{
			isKeyEvent = FALSE;
			keyEventNum = 0;
			
			for(int k=0;k<6;k++)
			{
				if(touchCheck(&xModel.xTouchSelectSlot[k]) == TRUE)
				{
					isKeyEvent = TRUE;
					keyEventNum = k;
					break;
				}
			}
			
			xModel.selectListSlot = keyEventNum + xModel.xDragScrollS.selectNum;
			
			if(xModel.selectListSlot<0 || xModel.selectListSlot >= xModel.xDragScrollS.totalNum)
			{
				isKeyEvent = FALSE;
			}
			if(isKeyEvent == TRUE)
			{
				if(getModelMainSlot_LULUPANG(xInventoryModel[xModel.listNumSlot[xModel.selectListSlot]].key) != DONT)
				{
					setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
					sprintf(xPopup.strText, "이미 선택된 모델입니다.");
				}
				
				else
				{
					LuluPangLobbyFreeLoad(true);
					LuluPangSelectModelFreeLoad(false);
					xLuluPangLobby.state = LULUPANG_LOBBY_STATE_MAIN;
					xLuluPangModel[xLuluPangLobby.selectModelSlot].modelKey = xInventoryModel[xModel.listNumSlot[xModel.selectListSlot]].key;
					
				}
			}
		}
		xModel.xDragScrollS.touchXpos = DONT;
		xModel.xDragScrollS.touchYpos = DONT;
		xModel.xDragScrollS.touchXposBefore = DONT;
		xModel.xDragScrollS.touchYposBefore = DONT;
	}
}

void keyLuluPangSettingFitting(int type, int param1, int param2)
{
	bool isKeyEvent = TRUE;
	int keyEventNum = 0;
	if(touchType == USER_POINT_PRESS_EVENT)
	{
		isKeyEvent = FALSE;
		for(int i=0;i<FITTINGTABMAX;i++)
		{
			if(touchCheck(&xTouchFittingTabB[i]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				isKeyEvent = TRUE;
				keyEventNum = i;
				break;
			}
		}
		
		
		if(isKeyEvent == TRUE)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			xFitting.selectTabB = keyEventNum;
			setFittingTabChange();
		}
		else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[1]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			//넣어입기
			xFitting.xF[xFitting.gender].isInFitting = TRUE;
			xFitting.isInOutMenu = FALSE;
		}
		else if(xFitting.isInOutMenu == TRUE && touchCheck(&xTouchFittingMenu[2]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			//빼입기
			xFitting.xF[xFitting.gender].isInFitting = FALSE;
			xFitting.isInOutMenu = FALSE;
		}
		else if(xFitting.isInOutMenu == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			xFitting.isInOutMenu = FALSE;
			xFitting.inOutCnt = 0;
		}
		else if(touchCheck(&xTouchFittingMenu[0]) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			xFitting.isInOutMenu  = xFitting.isInOutMenu == FALSE?TRUE:FALSE;
			xFitting.inOutCnt = 0;
		}
		else if(touchCheck(&xTouchClr) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			xLuluPangLobby.state = LULUPANG_LOBBY_STATE_MAIN;
		}
		else if(touchCheck(&xTouchFittingReset) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			
			//실제 피팅 내용 쇼윈도에 적용하기
			for(int ff=0;ff<SPRIT_IMGLAYERMAX;ff++)
			{
				xFitting.xF[0].code[ff] = DONT;
				xFitting.xF[1].code[ff] = DONT;
			}
			
			//memcpy(&xFitting.xF[xFitting.gender],&xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF,sizeof(xInventoryModel[xModel.modelListSlot[xModelFitting.modelListNum]].xF));
		}
		else if(touchCheck(&xTouchFittingSave) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			
			
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			xLuluPangLobby.state = LULUPANG_LOBBY_STATE_MAIN;
			
			xModel.state = xModel.fittingInState;
			//실제 피팅 내용 쇼윈도에 적용하기
			memcpy(&xInventoryModel[xModelFitting.inventoryNum].xF,&xFitting.xF[xFitting.gender],sizeof(xInventoryModel[xModelFitting.inventoryNum].xF));
			/////////////////////////////////////////////////////////////////////
			int eslot = xModelFitting.inventoryNum;
			xEventQueueNet.action[xEventQueueNet.totalNum] = 1;//0:신규,1:업데이트,2삭제
			xEventQueueNet.code[xEventQueueNet.totalNum] = xInventoryModel[eslot].code;
			xEventQueueNet.haveNum[xEventQueueNet.totalNum] = xInventoryModel[eslot].upGrade;
			xEventQueueNet.key[xEventQueueNet.totalNum] = xInventoryModel[eslot].key;
			for(int f=0;f<16;f++)
			{
				xEventQueueNet.layer[xEventQueueNet.totalNum][f] = xInventoryModel[eslot].xF.code[f];
			}
			xEventQueueNet.open[xEventQueueNet.totalNum] = 0;//0:미출연1:출연
			xEventQueueNet.mapX[xEventQueueNet.totalNum] = xInventoryModel[eslot].xF.isInFitting==FALSE?0:1;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SETMODEL, TRUE);
			/////////////////////////////////////////////////////////////////////
		}
		else if(touchCheck(&xNoticeWorldMap.xTouchLeft) == TRUE && xDragScrollFittingS.selectNum > 0)
		{
			xDragScrollFittingS.speed = 320;
		}
		else if(touchCheck(&xNoticeWorldMap.xTouchRight) == TRUE && xDragScrollFittingS.selectNum < xDragScrollFittingS.totalNum-1)
		{
			xDragScrollFittingS.speed = -320;
		}
		else
		{
			if(xDragScrollFittingS.pos == 0 && xDragScrollFittingS.speed == 0)
			{
				bool isSelectCatalogS = FALSE;
				int selectCatalogSNum = 0;
				for(int i=0;i<8;i++)
				{
					if(touchCheck(&xTouchFittingS[i]) == TRUE)
					{
						isSelectCatalogS = TRUE;
						selectCatalogSNum = i;
						break;
					}
				}
				if(selectCatalogSNum+(xDragScrollFittingS.selectNum*8) >= xFitting.totalNumS)
					isSelectCatalogS = FALSE;
				
				int selectFittingTemp = selectCatalogSNum+(xDragScrollFittingS.selectNum*8);
				
				if(isSelectCatalogS == TRUE)
				{
					playSnd(SND_FITTING);
					int totalLayer = 0;
					int layerInfo[20];
					int slotCode;
					M_Boolean isAdd = FALSE;
					for(int i=0;i<xFitting.totalNumS;i++)
					{
						slotCode = xFitting.xSlot[xFitting.selectTabB][i].code;
						setMapData(slotCode);	//xMap.rever,xMap.type,xMap.listNum 구하기
						
						isAdd = FALSE;
						for(int k=0;k<totalLayer;k++)
						{
							if(xFashionData[xMap.type][xMap.listNum].layer == layerInfo[k])
							{
								isAdd = TRUE;
								break;
							}
							else if(xFashionData[xMap.type][xMap.listNum].layer < layerInfo[k])
							{
								isAdd = TRUE;
								for(int kk=totalLayer;kk>k;kk--)
								{
									layerInfo[kk] = layerInfo[kk-1];
								}
								layerInfo[k] = xFashionData[xMap.type][xMap.listNum].layer;
								totalLayer++;
								break;
							}
						}
						
						if(isAdd == FALSE)
						{
							layerInfo[totalLayer++] = xFashionData[xMap.type][xMap.listNum].layer;
						}
					}
					
					xFitting.selectSlot = selectFittingTemp;
					setMapData(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code);	//xMap.rever,xMap.type,xMap.listNum 구하기
					//실제적인 처리를 해주자
					
					//선택된게 장착중일때는 바로 해제
					if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code)
					{
						xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = DONT;
						xFitting.selectSlot = DONT;
					}
					//선택된곳에 이미 다른레이어 존재
					else if(totalLayer > 1 && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
					{
						
					}
					else if(xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].isModelUse == TRUE)
					{
						
					}
					//선택이 되어있다면 무언가 있다면 변경
					else if(xFitting.selectSlot == selectFittingTemp && xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] != DONT)
					{
						xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
						xFitting.selectSlot = DONT;
					}
					else if(xFitting.xF[xFitting.gender].layeredNum >= (xModelData[xInventoryModel[xModelFitting.inventoryNum].code].layeredNum+getModelLayered(xModelFitting.inventoryNum,0)))
					{
						setPopup(POPUP_FITTING_LAYEREDERR, PLAY_PLAY, PLAY_PLAY,0, DONT);
						xFitting.selectSlot = DONT;
					}
					//장착할려는 부위에 아무것도 없다면 바로 장착
					else if(xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] == DONT)
					{
						xFitting.xF[xFitting.gender].code[xFashionData[xMap.type][xMap.listNum].layer] = xFitting.xSlot[xFitting.selectTabB][selectFittingTemp].code;
					}
					//선택이 안되어있다면 그냥 선택으로만
					else
					{
						xFitting.selectSlot = selectFittingTemp;
					}
				}
			}
		}
	}
	
}

bool isDressChange()
{
	bool isChange = false;
	
	for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
	{
		if(xMyCharacter.xF.code[i] != xFitting_FP.xModel.xF.code[i])
		{
			isChange = true;
			break;
		}
	}
	
	return isChange;
}


void setFittingSlot_FP(int tab)
{
	//	int index = 0;
	
	for(int i = 0; i < FASHIONDATATYPEMAX; i++)
	{
		xFashionList_FP.xSlotS[i].code = DONT;
		xFashionList_FP.xSlotS[i].layer = DONT;
		memset(xFashionList_FP.xSlotS[i].strName,0x00,sizeof(xFashionList_FP.xSlotS[i].strName));
	}
	
	////////////////////////////////////////////////////
	xEventQueueNet.typeNum[xEventQueueNet.totalNum] = tab;
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETDRESSROOMINFO, TRUE);
	///////////////////////////////////////////////////
	
	xFitting_FP.totalNum = 0;
}

void initFitting_FP()
{
	int index = 0;
	
	for(int i = 0; i < FASHIONDATATYPEMAX; i++)
	{
		xFashionList_FP.xSlotS[i].code = DONT;
		xFashionList_FP.xSlotS[i].layer = DONT;
		memset(xFashionList_FP.xSlotS[i].strName,0x00,sizeof(xFashionList_FP.xSlotS[i].strName));
	}
	
	xFitting_FP.totalNum = 0;
	
	xFitting_FP.hairNum = xMyCharacter.xFace.hairNum;
	xFitting_FP.faceNum = xMyCharacter.xFace.faceNum;
	xFitting_FP.pos = 0;
	
	for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
		xFitting_FP.xModel.xF.code[i] = DONT;
	
	for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
		xFitting_FP.xModel.xF.code[i] = xMyCharacter.xF.code[i];
	
	////////////////////////////////////////////////////
	xEventQueueNet.typeNum[xEventQueueNet.totalNum] = -1;
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETDRESSROOMINFO, TRUE);
	///////////////////////////////////////////////////
}
void loadFittingImg_FP(int imgType, int imgListNum)
{
	sprintf(strTempS, "dr%d.png", xFashionList_FP.xSlot[imgType][imgListNum].code);
	loadImgDocuments(strTempS, &imgFittingItem_FP[imgType][imgListNum]);
}
void fittingFreeLoad_FP(bool isLoad)
{
	int type = 0;
	int code = 0;
	int layer = 0;
	int num = 0;
	
	if(isLoad==true)
	{
		loadImg("fitting_base.png", &imgFitting[0]);
		loadImg("fitting_title.png", &imgFitting[1]);
		loadImg("fittinglist_base.png", &imgFitting[2]);
		loadImg("fittinglist_name.png", &imgFitting[3]);
		loadImg("fittinglist_slot.png", &imgFitting[4]);
		loadImg("fittinglist_tap.png", &imgFitting[5]);
		loadImg("fitting_slot_select.png", &imgFitting[6]);
		loadImg("fitting_btn_info.png", &imgFitting[7]);
		loadImg("fitting_eff_light.png", &imgFitting[8]);
		loadImg("fitting_eff_shadow.png", &imgFitting[9]);
		loadImg("fitting_btn_arrow.png", &imgFitting[10]);
		loadImg("fitting_btn_shop.png", &imgFitting[11]);
		loadImg("fitting_frame_buff.png", &imgFitting[12]);
		loadImg("fitting_place.png", &imgFitting[13]);
		loadImg("fitting_scroll.png", &imgFitting[14]);
		loadImg("fitting_info_base.png", &imgFitting[15]);
		loadImg("productionexiticon.png", &imgFitting[16]);
		loadImg("fitting_char_base.png", &imgFitting[17]);
		loadImg("fitting_btn_rollback.png", &imgFitting[18]);
		loadImg("fitting_btn_save.png", &imgFitting[19]);
		for(int k=0;k<FASHIONDATATYPEMAX;k++)
		{
			for(int i=0;i<xFashionList_FP.totalSlotNum[k];i++)
			{
				loadFittingImg_FP(k, i);
			}
		}
		
		type = xFitting_FP.faceNum%1000;
		sprintf(strTempS, "face_%d_11.png", type);
		loadImgDocuments(strTempS, &xFitting_FP.imgFace);
		
		
		
		type = xFitting_FP.hairNum/1000;
		code = xFitting_FP.hairNum%1000;
		layer = xHairMakeUp.xData[type][code].layerNum;
		for(int k=0; k < 15; k++)
		{
			if(xLayer.xData[layer].xData[0][k] != -1)
			{
				sprintf(strTempS, "hair_%d_%d.png", xFitting_FP.hairNum, xLayer.xData[layer].xData[0][k]);
				loadImgDocuments(strTempS, &xFitting_FP.imgHair[ACT_FRONT][k]);
			}
			
			if(xLayer.xData[layer].xData[1][k] != -1)
			{
				sprintf(strTempS, "b_hair_%d_%d.png", xFitting_FP.hairNum, xLayer.xData[layer].xData[1][k]);
				loadImgDocuments(strTempS, &xFitting_FP.imgHair[ACT_BACK][k]);
			}
		}
	}
	else
	{
		freeImg(&imgFitting[0]);
		freeImg(&imgFitting[1]);
		freeImg(&imgFitting[2]);
		freeImg(&imgFitting[3]);
		freeImg(&imgFitting[4]);
		freeImg(&imgFitting[5]);
		freeImg(&imgFitting[6]);
		freeImg(&imgFitting[7]);
		freeImg(&imgFitting[8]);
		freeImg(&imgFitting[9]);
		freeImg(&imgFitting[10]);
		freeImg(&imgFitting[11]);
		freeImg(&imgFitting[12]);
		freeImg(&imgFitting[13]);
		freeImg(&imgFitting[14]);
		freeImg(&imgFitting[15]);
		freeImg(&imgFitting[16]);
		freeImg(&imgFitting[17]);
		freeImg(&imgFitting[18]);
		freeImg(&imgFitting[19]);
		for(int k=0;k<FASHIONDATATYPEMAX;k++)
		{
			for(int i=0;i<xFashionList_FP.totalSlotNum[k];i++)
			{
				freeImg(&imgFittingItem_FP[k][i]);
			}
		}
		
		type = xFitting_FP.hairNum/1000;
		code = xFitting_FP.hairNum%1000;
		
		layer = xHairMakeUp.xData[type][code].layerNum;
		
		for(int k=0; k < 15; k++)
		{
			if(xLayer.xData[layer].xData[0][k] != -1)
			{
				freeImg(&xFitting_FP.imgHair[0][k]);
			}
			
			if(xLayer.xData[layer].xData[1][k] != -1)
			{
				freeImg(&xFitting_FP.imgHair[1][k]);
			}
		}
		freeImg(&xFitting_FP.imgFace);
	}
}

void drawFitting_FP()
{
	int px = cx;
	int py = cy;
	int pos = ACT_FRONT;
	int type = 0;
	int code = 0;
	int layer = 0;
	drawBgFillRect();
	
	subTemp[XPOS] = px;
	subTemp[YPOS] = py+50;
	
	drawImage(&imgFitting[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[0].w, imgFitting[0].h, VH);
	
	subTemp[XPOS] = lcdW-40;
	subTemp[YPOS] = py-180;
	
	drawImage(&imgFitting[16], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[16].w/2, imgFitting[16].h, VH);
	
	xTouchClr.wPos = imgFitting[16].w/2;
	xTouchClr.hPos = imgFitting[16].h;
	xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
	xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
	
	//    setAlpha(100);
	//    gSetColor(255, 0, 0);
	//    fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
	//    setAlpha(255);
	
	subTemp[XPOS] = px-454;
	subTemp[YPOS] = py-220;
	
	drawImage(&imgFitting[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[1].w, imgFitting[1].h, VH);
	
	subTemp[XPOS] = px+350;
	subTemp[YPOS] = py+85;
	drawImage(&imgFitting[17], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[17].w, imgFitting[17].h, VH);
	
	//롤백버튼
	subTemp[XPOS] = px+350 - imgFitting[17].w/2 + 10;
	subTemp[YPOS] = py+85 - imgFitting[17].h/2 + 10;
	if(xFitting_FP.isChange == false)
		drawImage(&imgFitting[18], subTemp[XPOS], subTemp[YPOS], imgFitting[18].w*2/3, 0, imgFitting[18].w/3, imgFitting[18].h, TL);
	else if(xFitting_FP.isRollBack == false)
		drawImage(&imgFitting[18], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[18].w/3, imgFitting[18].h, TL);
	else if(xFitting_FP.isRollBack == true)
		drawImage(&imgFitting[18], subTemp[XPOS], subTemp[YPOS], imgFitting[18].w/3, 0, imgFitting[18].w/3, imgFitting[18].h, TL);
	xFitting_FP.xTouchRollBack.hPos = imgFitting[18].h;
	xFitting_FP.xTouchRollBack.wPos = imgFitting[18].w/3;
	xFitting_FP.xTouchRollBack.xPos = subTemp[XPOS];
	xFitting_FP.xTouchRollBack.yPos = subTemp[YPOS];
	
	//저장버튼
	subTemp[XPOS] = px+350 + imgFitting[17].w/2 -10 - imgFitting[19].w/3;
	subTemp[YPOS] = py+85 - imgFitting[17].h/2 + 10;
	if(xFitting_FP.isChange == false)
		drawImage(&imgFitting[19], subTemp[XPOS], subTemp[YPOS], imgFitting[19].w*2/3, 0, imgFitting[19].w/3, imgFitting[19].h, TL);
	else if(xFitting_FP.isSave == false)
		drawImage(&imgFitting[19], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[19].w/3, imgFitting[19].h, TL);
	else if(xFitting_FP.isSave == true)
		drawImage(&imgFitting[19], subTemp[XPOS], subTemp[YPOS], imgFitting[19].w*1/3, 0, imgFitting[19].w/3, imgFitting[19].h, TL);
	xFitting_FP.xTouchSave.hPos = imgFitting[19].h;
	xFitting_FP.xTouchSave.wPos = imgFitting[19].w/3;
	xFitting_FP.xTouchSave.xPos = subTemp[XPOS];
	xFitting_FP.xTouchSave.yPos = subTemp[YPOS];
	
	
	
	
	subTemp[XPOS] = px+350;
	subTemp[YPOS] = py+30;
	
	drawImage(&imgFitting[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[8].w, imgFitting[8].h, VH);
	
	//버프정보창
	subTemp[XPOS] = px+353;
	subTemp[YPOS] = py+230;
	
	drawImage(&imgFitting[12], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[12].w, imgFitting[12].h, VH);
	
	subTemp[XPOS] = px+353;
	subTemp[YPOS] = py+195;
	
	setFontSizeORI(16);
	sprintf(strTempS,"버프 정보");
	gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 255, 255, 255, 101, 48, 150);
	setFontSize(11);
	
	subTemp[XPOS] = px+260;
	subTemp[YPOS] = py+223;
	
	setFontSizeORI(15);
	sprintf(strTempS, "제작 시간 단축");
	gSetColor(101, 48, 150);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
	setFontSize(11);
	
	subTemp[XPOS] = px+260;
	subTemp[YPOS] = py+240;
	
	setFontSizeORI(15);
	sprintf(strTempS, "획득 골드 증가");
	gSetColor(101, 48, 150);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
	setFontSize(11);
	
	subTemp[XPOS] = px+260;
	subTemp[YPOS] = py+258;
	
	setFontSizeORI(15);
	sprintf(strTempS, "획득 경험치 증가");
	gSetColor(101, 48, 150);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
	setFontSize(11);
	
	subTemp[XPOS] = px+380;
	subTemp[YPOS] = py+223;
	
	setFontSizeORI(15);
	sprintf(strTempS, "100.0%%");
	gSetColor(252, 106, 177);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
	setFontSize(11);
	
	subTemp[XPOS] = px+380;
	subTemp[YPOS] = py+240;
	
	setFontSizeORI(15);
	sprintf(strTempS, "100.0%%");
	gSetColor(252, 106, 177);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
	setFontSize(11);
	
	subTemp[XPOS] = px+380;
	subTemp[YPOS] = py+258;
	
	setFontSizeORI(15);
	sprintf(strTempS, "100.0%%");
	gSetColor(252, 106, 177);
	gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
	setFontSize(11);
	
	subTemp[XPOS] = px-170;
	subTemp[YPOS] = py+85;
	drawImage(&imgFitting[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[2].w, imgFitting[2].h, VH);
	
	subTemp[XPOS] = px+125;
	subTemp[YPOS] = py-150;
	if(xFitting_FP.isinfo==false)
	{
		drawImage(&imgFitting[7], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[7].w/2, imgFitting[7].h, VH);
	}
	else
	{
		drawImage(&imgFitting[7], subTemp[XPOS], subTemp[YPOS], imgFitting[7].w/2, 0, imgFitting[7].w/2, imgFitting[7].h, VH);
	}
	xFitting_FP.xTouchInfo.wPos = imgFitting[7].w/2;
	xFitting_FP.xTouchInfo.hPos = imgFitting[7].h;
	xFitting_FP.xTouchInfo.xPos = subTemp[XPOS]-xFitting_FP.xTouchInfo.wPos/2;
	xFitting_FP.xTouchInfo.yPos = subTemp[YPOS]-xFitting_FP.xTouchInfo.hPos/2;
	
	//    setAlpha(100);
	//    gSetColor(255, 0, 0);
	//    fillRect(xFitting_FP.xTouchInfo.xPos, xFitting_FP.xTouchInfo.yPos, xFitting_FP.xTouchInfo.wPos, xFitting_FP.xTouchInfo.hPos);
	//    setAlpha(255);
	
	
	subTemp[XPOS] = px+280;
	subTemp[YPOS] = py-155;
	
	drawImage(&imgFitting[13],subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[13].w, imgFitting[13].h, VH);
	
	xFitting_FP.maxPlace = FITTING_FP_PLACEMAX;
	xFitting_FP.nowPlace = xFitting_FP.maxPlace;
	
	sprintf(strTempS, "%d/%d", xFitting_FP.nowPlace, xFitting_FP.maxPlace);
	setFontSizeORI(15);
	gSetColor(255, 255, 255);
	gDrawString(subTemp[XPOS]-6, subTemp[YPOS]+2, strTempS, VH);
	setFontSize(11);
	
	subTemp[XPOS] = px+410;
	subTemp[YPOS] = py-155;
	
	drawImage(&imgFitting[11],subTemp[XPOS], subTemp[YPOS],0 ,0, imgFitting[11].w/2, imgFitting[11].h, VH);
	
	xFitting_FP.xTouchShop.wPos = imgFitting[11].w/2;
	xFitting_FP.xTouchShop.hPos = imgFitting[11].h;
	xFitting_FP.xTouchShop.xPos = subTemp[XPOS]-xFitting_FP.xTouchShop.wPos/2;
	xFitting_FP.xTouchShop.yPos = subTemp[YPOS]-xFitting_FP.xTouchShop.hPos/2;
	
	//    setAlpha(100);
	//    gSetColor(255, 0, 0);
	//    fillRect(xFitting_FP.xTouchShop.xPos, xFitting_FP.xTouchShop.yPos, xFitting_FP.xTouchShop.wPos, xFitting_FP.xTouchShop.hPos);
	//    setAlpha(255);
	
	subTemp[XPOS] = px+241;
	subTemp[YPOS] = py+60;
	if(xFitting_FP.isTouchLeftArrow==false)
	{
		drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[10].w/4, imgFitting[10].h, VH);
	}
	else
	{
		drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], (imgFitting[10].w/4), 0, imgFitting[10].w/4, imgFitting[10].h, VH);
	}
	xFitting_FP.xTouchLeftArrow.wPos = imgFitting[10].w/4;
	xFitting_FP.xTouchLeftArrow.hPos = imgFitting[10].h;
	xFitting_FP.xTouchLeftArrow.xPos = subTemp[XPOS] - xFitting_FP.xTouchLeftArrow.wPos/2;
	xFitting_FP.xTouchLeftArrow.yPos = subTemp[YPOS] - xFitting_FP.xTouchLeftArrow.hPos/2;
	
	//    setAlpha(100);
	//    gSetColor(255, 0, 0);
	//    fillRect(xFitting_FP.xTouchLeftArrow.xPos, xFitting_FP.xTouchLeftArrow.yPos, xFitting_FP.xTouchLeftArrow.wPos, xFitting_FP.xTouchLeftArrow.hPos);
	//    setAlpha(ALPHA_MAX);
	
	subTemp[XPOS] = px+458;
	subTemp[YPOS] = py+60;
	xGame.isReverse = true;
	if(xFitting_FP.isTouchRightArrow==false)
	{
		drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[10].w/4, imgFitting[10].h, VH);
		//        drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], (imgFitting[10].w/4)*2, 0, imgFitting[10].w/4, imgFitting[10].h, VH);
		
	}
	else
	{
		//        drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], (imgFitting[10].w/4)*3, 0, imgFitting[10].w/4, imgFitting[10].h, VH);
		drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], (imgFitting[10].w/4), 0, imgFitting[10].w/4, imgFitting[10].h, VH);
	}
	xFitting_FP.xTouchRightArrow.wPos = imgFitting[10].w/4;
	xFitting_FP.xTouchRightArrow.hPos = imgFitting[10].h;
	xFitting_FP.xTouchRightArrow.xPos = subTemp[XPOS] - xFitting_FP.xTouchRightArrow.wPos/2;
	xFitting_FP.xTouchRightArrow.yPos = subTemp[YPOS] - xFitting_FP.xTouchRightArrow.hPos/2;
	xGame.isReverse=false;
	//    setAlpha(100);
	//    gSetColor(255, 0, 0);
	//    fillRect(xFitting_FP.xTouchRightArrow.xPos, xFitting_FP.xTouchRightArrow.yPos, xFitting_FP.xTouchRightArrow.wPos, xFitting_FP.xTouchRightArrow.hPos);
	//    setAlpha(ALPHA_MAX);
	
	int iMaxTabS = FITTING_FP_TAPMAX;
	
	subTemp[XPOS] = px-445;
	subTemp[YPOS] = py-140;
	
	for(int i=-1;i<iMaxTabS-1;i++)
	{
		switch (i)
		{
			case 0:
				sprintf(strTempS, "의상");
				break;
			case 1:
				sprintf(strTempS,"모자");
				break;
			case 2:
				sprintf(strTempS,"신발");
				break;
			case 3:
				sprintf(strTempS,"가방");
				break;
			case 4:
				sprintf(strTempS,"악세서리");
				break;
			case -1:
				sprintf(strTempS,"전체");
				break;
			default:
				break;
		}
		
		
		if(i==xFitting_FP.selectTabB)
		{
			drawImage(&imgFitting[5],subTemp[XPOS]+((i+1)*(imgFitting[5].w/2)) , subTemp[YPOS], 0, 0, imgFitting[5].w/2, imgFitting[5].h, VH);
			setFontSizeORI(18);
			gDrawStringBold(subTemp[XPOS]+((i+1)*(imgFitting[5].w/2)), subTemp[YPOS]+5, strTempS, VH, 255, 157, 212, 101, 48, 150);
			setFontSize(11);
			
		}
		else
		{
			drawImage(&imgFitting[5],subTemp[XPOS]+((i+1)*(imgFitting[5].w/2)) , subTemp[YPOS], imgFitting[5].w/2, 0, imgFitting[5].w/2, imgFitting[5].h, VH);
			gSetColor(101, 48, 150);
			setFontSizeORI(16);
			gDrawString(subTemp[XPOS]+((i+1)*(imgFitting[5].w/2)), subTemp[YPOS]+5, strTempS, VH);
			setFontSize(11);
		}
		xFitting_FP.xTouchSelectTap[i+1].wPos = imgFitting[5].w/2;
		xFitting_FP.xTouchSelectTap[i+1].hPos = imgFitting[5].h;
		xFitting_FP.xTouchSelectTap[i+1].xPos = subTemp[XPOS]+((i+1)*(imgFitting[5].w/2))-xFitting_FP.xTouchSelectTap[i].wPos/2;
		xFitting_FP.xTouchSelectTap[i+1].yPos = subTemp[YPOS]-xFitting_FP.xTouchSelectTap[i].hPos/2;
		
		//슬롯개수 넣기
		//        xFitting_FP.totalNum = xFashionList_FP.totalSlotNum[xFitting_FP.selectTabB];
		//        setAlpha(100);
		//        gSetColor(0,255, 0);
		//        fillRect(xFitting_FP.xTouchSelectTap[i].xPos , xFitting_FP.xTouchSelectTap[i].yPos , xFitting_FP.xTouchSelectTap[i].wPos, xFitting_FP.xTouchSelectTap[i].hPos);
		//        setAlpha(ALPHA_MAX);
		
	}
	
	
	xFitting_FP.xDragScrollFittingList.totalNum = 1+(xFitting_FP.totalNum-1)/4;
	//    xFitting_FP.totalSlot[0] = 7;
	//    xFitting_FP.xDragScrollFittingList.totalNum = 1+(xFitting_FP.totalSlot[0]-1)/4;
	xFitting_FP.xDragScrollFittingList.posGab = 170;
	xFitting_FP.xDragScrollFittingList.endPos = -(((xFitting_FP.xDragScrollFittingList.totalNum-2)*xFitting_FP.xDragScrollFittingList.posGab));
	
	if(xFitting_FP.xDragScrollFittingList.totalNum<=2)
		xFitting_FP.xDragScrollFittingList.endPos = 0;
	
	else
		xFitting_FP.xDragScrollFittingList.endPos+=40;
	
	int iMax=xFitting_FP.totalNum;
	
	//    int iMax=xFitting_FP.totalSlot[0];
	int slotCode = 0;
	
	dragScrollPrc(&xFitting_FP.xDragScrollFittingList, 1, FALSE);
	gSetClip(true, px-507, py-120, imgFitting[2].w, imgFitting[2].h);
	//    setAlpha(100);
	//    gSetColor(0,255, 0);
	//    fillRect(px-507, py-120, imgFitting[2].w, imgFitting[2].h);
	//    setAlpha(ALPHA_MAX);
	for(int k=0;k<iMax;k++)
	{
		subTemp[XPOS] = px-410+((k%4)*160);
		subTemp[YPOS] = py-30+((k/4)*xFitting_FP.xDragScrollFittingList.posGab)+xFitting_FP.xDragScrollFittingList.pos;
		if(subTemp[YPOS]>50&&subTemp[YPOS]<lcdH+50)
		{
			drawImage(&imgFitting[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[4].w, imgFitting[4].h, VH);
			
			slotCode = xFashionList_FP.xSlotS[k].code;
			setMapData(slotCode);
			drawImage(&imgFittingItem_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingItem_FP[xMap.type][xMap.listNum].w, imgFittingItem_FP[xMap.type][xMap.listNum].h, VH);
			if(xFitting_FP.isinfo==true)
			{
				drawImage(&imgFitting[15], subTemp[XPOS]-1, subTemp[YPOS]-2, 0, 0, imgFitting[15].w, imgFitting[15].h, VH);
				
				sprintf(strTempS, "제작시간 단축");
				setFontSizeORI(15);
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS], strTempS, VH, 101, 48, 150, 255, 255, 255);
				setFontSize(11);
				
				sprintf(strTempS,"100.0%%");
				setFontSizeORI(15);
				gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+20, strTempS, VH, 252, 106, 177, 255, 255, 255);
				setFontSize(11);
			}
			
			for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
			{
				if(xFitting_FP.xModel.xF.code[i] == xFashionList_FP.xSlotS[k].code)
				{
					drawImage(&imgFitting[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFitting[6].w, imgFitting[6].h, VH);
					break;
				}
			}
			
			drawImage(&imgFitting[3], subTemp[XPOS], subTemp[YPOS]+70, 0, 0, imgFitting[3].w, imgFitting[3].h, VH);
			sprintf(strTempS, "%s", xFashionList_FP.xSlotS[k].strName);
			
			int sizeStr=strlen(strTempS);
			
			
			if(sizeStr>27)
			{
				setFontSizeORI(12);
			}
			else
			{
				setFontSizeORI(14);
			}
			gSetColor(101, 48, 150);
			gDrawString(subTemp[XPOS], subTemp[YPOS]+70, strTempS, VH);
			setFontSize(11);
			
		}
	}
	gSetClip(false, px-507, py-120, imgFitting[2].w, imgFitting[2].h);
	
	
	
	xFitting_FP.xDragScrollFittingList.selectNum = (-xFitting_FP.xDragScrollFittingList.pos/xFitting_FP.xDragScrollFittingList.posGab);
	
	if(xFitting_FP.xDragScrollFittingList.selectNum<0)
		xFitting_FP.xDragScrollFittingList.selectNum=0;
	for(int k=0;k<xFitting_FP.totalNum;k++)
	{
		subTemp[XPOS] = px-410+((k%4)*160);
		subTemp[YPOS] = py-30+((k/4)*xFitting_FP.xDragScrollFittingList.posGab)+xFitting_FP.xDragScrollFittingList.pos;
		//        if(subTemp[YPOS]>50&&subTemp[YPOS]<lcdH+50)
		//        {
		//            xFitting_FP.xTouchSlot[k].wPos = imgFitting[4].w;
		//            xFitting_FP.xTouchSlot[k].hPos = imgFitting[4].h;
		//            xFitting_FP.xTouchSlot[k].xPos = subTemp[XPOS] - xFitting_FP.xTouchSlot[k].wPos/2;
		//            xFitting_FP.xTouchSlot[k].yPos = subTemp[YPOS] - xFitting_FP.xTouchSlot[k].hPos/2;
		//        }
		xFitting_FP.xTouchSlot[k].wPos = imgFitting[4].w;
		xFitting_FP.xTouchSlot[k].hPos = imgFitting[4].h;
		xFitting_FP.xTouchSlot[k].xPos = subTemp[XPOS] - xFitting_FP.xTouchSlot[k].wPos/2;
		xFitting_FP.xTouchSlot[k].yPos = subTemp[YPOS] - xFitting_FP.xTouchSlot[k].hPos/2;
	}
	
	subTemp[XPOS] = px+155;
	subTemp[YPOS] = py-102;
	
	setFastScroll(subTemp[XPOS], subTemp[YPOS], imgFitting[14].w, imgFitting[14].h, &xFitting_FP.xDragScrollFittingList);
	
	int xx = xFastScroll.x+xFastScroll.w/2;
	int yy = xFastScroll.y;
	
	int nowPos = -xFastScroll.xDragScroll->pos;
	int endPos = -xFastScroll.xDragScroll->endPos;
	
	
	if(endPos != 0)
		yy+=nowPos * xFastScroll.h/endPos;
	
	xFastScroll.xTouchBar.xPos = xFastScroll.x;
	xFastScroll.xTouchBar.yPos = xFastScroll.y;
	xFastScroll.xTouchBar.wPos = xFastScroll.w;
	xFastScroll.xTouchBar.hPos = xFastScroll.h;
	
	//    gSetColor(255, 0, 0);
	//    setAlpha(100);
	//    fillRect(xFastScroll.xTouchBar.xPos, xFastScroll.xTouchBar.yPos, xFastScroll.xTouchBar.wPos,xFastScroll.xTouchBar.hPos);
	//    setAlpha(ALPHA_MAX);
	int reSize = xFitting_FP.xDragScrollFittingList.totalNum-1;
	if(reSize<=0)
		reSize = 1;
	//    int temp = (imgFitting[14].h/xFitting_FP.xDragScrollFittingList.totalNum)/2;
	int temp = (imgFitting[14].h/reSize)/2;
	if(yy<=xFastScroll.y)
		yy=xFastScroll.y+temp;
	else if(yy>=xFastScroll.y+xFastScroll.h)
		yy=xFastScroll.y+xFastScroll.h-temp;
	
	xGame.isReSizeDrawXY=true;
	xGame.reSizeX = 100;
	xGame.reSizeY = 100/reSize;
	drawImage(&imgFitting[14], xx, yy, 0, 0, imgFitting[14].w, imgFitting[14].h, VH);
	xGame.isReSizeDrawXY=false;
	
	switch(xFitting_FP.pos)
	{
		case 0:
		case 1:
			pos = ACT_FRONT;
			break;
		case 2:
		case 3:
			pos = ACT_BACK;
			break;
		default:
			pos = ACT_FRONT;
			break;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//의상 레이어에 마네킹바디 넣기
	setNpcBodyBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos], pos);
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//의상 레이어에 의상 넣기
	setSpritFBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos],&xFitting_FP.xModel.xF,pos);
	
	//헤어셋팅
	for(int k=0; k < 15; k++)
	{
		if(xLayer.xData[xHairMakeUp.xData[xFitting_FP.hairNum/1000][xFitting_FP.hairNum%1000].layerNum].xData[ACT_FRONT][k] != -1)
		{
			type = xFitting_FP.hairNum/1000;
			code = xFitting_FP.hairNum%1000;
			layer = xHairMakeUp.xData[type][code].layerNum;
			
			if(xLayer.xData[layer].xData[ACT_FRONT][k] != -1)
			{
				xSpritNpc[NPC_ACT_FITTINGROOM][ACT_FRONT].imgLayer[xLayer.xData[layer].xData[ACT_FRONT][k]][ACT_FRONT] = &xFitting_FP.imgHair[ACT_FRONT][k];
			}
			
			if(xLayer.xData[layer].xData[ACT_BACK][k] != -1)
			{
				xSpritNpc[NPC_ACT_FITTINGROOM][ACT_BACK].imgLayer[xLayer.xData[layer].xData[ACT_BACK][k]][ACT_BACK] = &xFitting_FP.imgHair[ACT_BACK][k];
			}
		}
	}
	
	//얼굴셋팅
	for(int k=0; k < 15; k++)
	{
		if(xLayer.xData[xHairMakeUp.xData[xFitting_FP.faceNum/1000][xFitting_FP.faceNum%1000].layerNum].xData[ACT_FRONT][k] != -1)
		{
			type = xFitting_FP.faceNum/1000;
			code = xFitting_FP.faceNum%1000;
			layer = xHairMakeUp.xData[type][code].layerNum;
			
			if(xLayer.xData[layer].xData[ACT_FRONT][k] != -1)
			{
				xSpritNpc[NPC_ACT_FITTINGROOM][ACT_FRONT].imgLayer[xLayer.xData[layer].xData[ACT_FRONT][k]][ACT_FRONT] = &xFitting_FP.imgFace;
			}
			
			if(xLayer.xData[layer].xData[ACT_BACK][k] != -1)
			{
				xSpritNpc[NPC_ACT_FITTINGROOM][ACT_BACK].imgLayer[xLayer.xData[layer].xData[ACT_BACK][k]][ACT_BACK] = &xFitting_FP.imgFace;
			}
		}
	}
	
	xSpritNpc[NPC_ACT_FITTINGROOM][pos].nowDelay = xFitting_FP.xModel.nowDelay;
	xSpritNpc[NPC_ACT_FITTINGROOM][pos].nowFrame = xFitting_FP.xModel.nowFrame;
	prcSprit(&xSpritNpc[NPC_ACT_FITTINGROOM][pos], &xFitting_FP.xModel.nowDelay, &xFitting_FP.xModel.nowFrame);
	subTemp[XPOS] = px+355;
	subTemp[YPOS] = py;
	switch(xFitting_FP.pos)
	{
		case 1:
		case 3:
			reverseSpritBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos],subTemp[XPOS],subTemp[YPOS],pos,&xFitting_FP.xModel.xFace);
			break;
		default:
			drawSpritBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos],subTemp[XPOS],subTemp[YPOS],pos,&xFitting_FP.xModel.xFace);
			break;
	}
	
	
}

void keyFitting_FP(int type, int param1, int param2, int touchId)
{
	bool isKeyEvent;
	int keyEventNum;
	if(type == MH_KEY_PRESSEVENT)
	{
		isKeyEvent = FALSE;
		
		for(int k=0;k<FITTING_FP_TAPMAX;k++)
		{
			if(touchCheck(&xFitting_FP.xTouchSelectTap[k])==TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				isKeyEvent = TRUE;
				keyEventNum = k-1;
			}
		}
		if(isKeyEvent == TRUE)
		{
			playSnd(SND_MENU_OK);
			//xWorldMap.isKeyReturn = TRUE;
			
			if(xFitting_FP.selectTabB != keyEventNum)
			{
				xFitting_FP.selectTabB = keyEventNum;
				
				setFittingSlot_FP(xFitting_FP.selectTabB);
				
				xFitting_FP.xDragScrollFittingList.touchXpos = DONT;
				xFitting_FP.xDragScrollFittingList.touchYpos = DONT;
				xFitting_FP.xDragScrollFittingList.touchXposBefore = DONT;
				xFitting_FP.xDragScrollFittingList.touchYposBefore = DONT;
				xFitting_FP.xDragScrollFittingList.selectNum = 0;
				xFitting_FP.xDragScrollFittingList.pos = 0;
				xFitting_FP.xDragScrollFittingList.speed = 0;
			}
		}
		else if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			xWorldMap.isKeyReturn = TRUE;
			fittingFreeLoad_FP(false);
			xWorldMap.state = WORLDMAP_STATE_PLAY;
		}
		
		else if(touchCheck(&xFitting_FP.xTouchInfo)==TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			playSnd(SND_MENU_OK);
			if(xFitting_FP.isinfo==false)
			{
				xFitting_FP.isinfo=true;
			}
			else
			{
				xFitting_FP.isinfo=false;
			}
		}
		
		else if(touchCheck(&xFitting_FP.xTouchLeftArrow)==TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			xFitting_FP.isTouchLeftArrow=true;
		}
		
		else if(touchCheck(&xFitting_FP.xTouchRightArrow)==TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			xFitting_FP.isTouchRightArrow=true;
		}
		else if(touchCheck(&xFitting_FP.xTouchRollBack)==TRUE && xFitting_FP.isChange == true && touchType == USER_POINT_PRESS_EVENT)
		{
			xFitting_FP.isRollBack=true;
		}
		else if(touchCheck(&xFitting_FP.xTouchSave)==TRUE && xFitting_FP.isChange == true && touchType == USER_POINT_PRESS_EVENT)
		{
			xFitting_FP.isSave=true;
		}
		else if(keyFastScroll_FP(type, param1, param2, touchId, 0)==true || xTouch.xPos>cx+155)
		{
			
		}
		else
		{
			dragScrollKeyPrc(&xFitting_FP.xDragScrollFittingList, 2);
		}
	}
	else if(type == MH_KEY_RELEASEEVENT)
	{
		if(xFitting_FP.xDragScrollFittingList.touchYposBefore != DONT)
		{
			dragScrollKeyPrc(&xFitting_FP.xDragScrollFittingList, 3);
		}
		
		else if(touchCheck(&xFitting_FP.xTouchLeftArrow)==TRUE && xFitting_FP.isTouchLeftArrow == true && touchType == USER_POINT_RELEASE_EVENT)
		{
			xFitting_FP.pos--;
			if(xFitting_FP.pos < 0)
				xFitting_FP.pos = 3;
		}
		
		else if(touchCheck(&xFitting_FP.xTouchRightArrow)==TRUE && xFitting_FP.isTouchRightArrow == true && touchType == USER_POINT_RELEASE_EVENT)
		{
			xFitting_FP.pos++;
			if(xFitting_FP.pos > 3)
				xFitting_FP.pos = 0;
		}
		
		else if(touchCheck(&xFitting_FP.xTouchRollBack)==TRUE && xFitting_FP.isRollBack == true && touchType == USER_POINT_RELEASE_EVENT)
		{
			for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
			{
				xFitting_FP.xModel.xF.code[i] = xMyCharacter.xF.code[i];
			}
		}
		
		else if(touchCheck(&xFitting_FP.xTouchSave)==TRUE && xFitting_FP.isSave == true && touchType == USER_POINT_RELEASE_EVENT)
		{
			for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
			{
				xEventQueueNet.item_index[xEventQueueNet.totalNum][i] = xFitting_FP.xModel.xF.code[i];
			}
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_UPDATEMYDRESS, TRUE);
		}
		
		else
		{
			for(int k=0;k<xFitting_FP.totalNum;k++)
			{
				if(touchCheck(&xFitting_FP.xTouchSlot[k])==TRUE)
				{
					xFitting_FP.selectSlot = k;
					//지정된 부위에 선택한 의상넣기
					
					if(xFitting_FP.xModel.xF.code[xFashionList_FP.xSlotS[xFitting_FP.selectSlot].code/1000] == xFashionList_FP.xSlotS[xFitting_FP.selectSlot].code)
						xFitting_FP.xModel.xF.code[xFashionList_FP.xSlotS[xFitting_FP.selectSlot].code/1000] = DONT;
					else
						xFitting_FP.xModel.xF.code[xFashionList_FP.xSlotS[xFitting_FP.selectSlot].code/1000] = xFashionList_FP.xSlotS[xFitting_FP.selectSlot].code;
					break;
				}
			}
		}
		xFitting_FP.xDragScrollFittingList.touchXpos = DONT;
		xFitting_FP.xDragScrollFittingList.touchYpos = DONT;
		xFitting_FP.xDragScrollFittingList.touchXposBefore = DONT;
		xFitting_FP.xDragScrollFittingList.touchYposBefore = DONT;
		xFitting_FP.isTouchLeftArrow = false;
		xFitting_FP.isTouchRightArrow = false;
		xFitting_FP.isRollBack = false;
		xFitting_FP.isSave = false;
	}
}

void friendListFreeLoad_FP(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("fashionplanet_frame_base.png", &imgfriendList[0]);
        loadImg("friendList_title.png", &imgfriendList[1]);
        loadImg("productionexiticon.png", &imgfriendList[2]);
        loadImg("friendList_btn_tab.png", &imgfriendList[3]);
        loadImg("friendList_bar_search.png", &imgfriendList[4]);
        loadImg("friendList_btn_search.png", &imgfriendList[5]);
        loadImg("production_slot_arrow.png", &imgfriendList[6]);
        loadImg("friendList_slot_base.png", &imgfriendList[7]);
        loadImg("friendList_Num.png", &imgfriendList[8]);
        loadImg("friendList_btn_recommend.png", &imgfriendList[9]);
        loadImg("friendList_btn_favorite.png", &imgfriendList[10]);
        loadImg("friendList_btn_delete.png", &imgfriendList[11]);
        loadImg("friendList_slot_follower.png", &imgfriendList[12]);
        loadImg("friendList_btn_plus.png", &imgfriendList[13]);
        loadImg("friendList_btn_edit.png", &imgfriendList[14]);
        loadImg("friendList_btn_visit.png", &imgfriendList[15]);
        loadImg("friendList_slot_Help.png", &imgfriendList[16]);
        loadImg("friendSearch_base.png", &imgfriendList[17]);
        loadImg("friendSearch_nouser.png", &imgfriendList[18]);
    }
	
    else
    {
        freeImg(&imgfriendList[0]);
        freeImg(&imgfriendList[1]);
        freeImg(&imgfriendList[2]);
        freeImg(&imgfriendList[3]);
        freeImg(&imgfriendList[4]);
        freeImg(&imgfriendList[5]);
        freeImg(&imgfriendList[6]);
        freeImg(&imgfriendList[7]);
        freeImg(&imgfriendList[8]);
        freeImg(&imgfriendList[9]);
        freeImg(&imgfriendList[10]);
        freeImg(&imgfriendList[11]);
        freeImg(&imgfriendList[12]);
        freeImg(&imgfriendList[13]);
        freeImg(&imgfriendList[14]);
        freeImg(&imgfriendList[15]);
        freeImg(&imgfriendList[16]);
        freeImg(&imgfriendList[17]);
        freeImg(&imgfriendList[18]);
		
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////친구행성 Draw KBY
void drawfriendList_FP()
{
    int px = cx;
    int py = cy+47;
	
    drawBgFillRect();

    drawImage(&imgfriendList[0], px, py, 0, 0, imgfriendList[0].w, imgfriendList[0].h, VH);
	
    subTemp[XPOS] = px-446;
    subTemp[YPOS] = py-265;
    
    drawImage(&imgfriendList[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[1].w, imgfriendList[1].h, VH);
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-180-47;
    if(xFriend_FP.isTouchClr==false)
    {
        drawImage(&imgfriendList[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[2].w/2, imgfriendList[2].h, VH);
    }
    
    else
    {
        drawImage(&imgfriendList[2], subTemp[XPOS], subTemp[YPOS], imgfriendList[2].w/2, 0, imgfriendList[2].w/2, imgfriendList[2].h, VH);
    }
    xTouchClr.wPos = imgfriendList[2].w/2;
    xTouchClr.hPos = imgfriendList[2].h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    
    subTemp[XPOS] = px-255;
    subTemp[YPOS] = py-293;
    if(xFriend_FP.selectTabB==0)
    {
        drawImage(&imgfriendList[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[3].w/4, imgfriendList[3].h, VH);
    
        drawImage(&imgfriendList[3], subTemp[XPOS]+110, subTemp[YPOS], imgfriendList[3].w/4, 0, imgfriendList[3].w/4, imgfriendList[3].h, VH);
    }
    else
    {
        drawImage(&imgfriendList[3], subTemp[XPOS], subTemp[YPOS], imgfriendList[3].w/2, 0, imgfriendList[3].w/4, imgfriendList[3].h, VH);
        
        drawImage(&imgfriendList[3], subTemp[XPOS]+110, subTemp[YPOS], imgfriendList[3].w/4*3, 0, imgfriendList[3].w/4, imgfriendList[3].h, VH);
    }
    xFriend_FP.xTouchTab[0].wPos = imgfriendList[3].w/4;
    xFriend_FP.xTouchTab[0].hPos = imgfriendList[3].h;
    xFriend_FP.xTouchTab[0].xPos = subTemp[XPOS] - xFriend_FP.xTouchTab[0].wPos/2;
    xFriend_FP.xTouchTab[0].yPos = subTemp[YPOS] - xFriend_FP.xTouchTab[0].hPos/2;
    
    xFriend_FP.xTouchTab[1].wPos = imgfriendList[3].w/4;
    xFriend_FP.xTouchTab[1].hPos = imgfriendList[3].h;
    xFriend_FP.xTouchTab[1].xPos = subTemp[XPOS]+110 - xFriend_FP.xTouchTab[1].wPos/2;
    xFriend_FP.xTouchTab[1].yPos = subTemp[YPOS] - xFriend_FP.xTouchTab[1].hPos/2;
    
//    setAlpha(100);
//    gSetColor(0, 0, 255);
//    fillRect(xFriend_FP.xTouchTab[0].xPos, xFriend_FP.xTouchTab[0].yPos, xFriend_FP.xTouchTab[0].wPos, xFriend_FP.xTouchTab[0].hPos);
//    setAlpha(ALPHA_MAX);
//
//
//    setAlpha(100);
//    gSetColor(0, 255, 0);
//    fillRect(xFriend_FP.xTouchTab[1].xPos, xFriend_FP.xTouchTab[1].yPos, xFriend_FP.xTouchTab[1].wPos, xFriend_FP.xTouchTab[1].hPos);
//    setAlpha(ALPHA_MAX);
    
//    subTemp[XPOS] = px+205;
//    subTemp[YPOS] = py-155-47;
//    
//    drawImage(&imgfriendList[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[4].w, imgfriendList[4].h, VH);
    
    if(xFriend_FP.selectTabB==0)
    {
        subTemp[XPOS] = px+235;
        subTemp[YPOS] = py-155-47;
        if(xFriend_FP.isTouchSearch==false)
        {
            drawImage(&imgfriendList[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[5].w/2, imgfriendList[5].h, VH);
        }
        else
        {
            drawImage(&imgfriendList[5], subTemp[XPOS], subTemp[YPOS], imgfriendList[5].w/2, 0, imgfriendList[5].w/2, imgfriendList[5].h, VH);
        }
        xFriend_FP.xTouchSearch.wPos = imgfriendList[5].w/2+20;
        xFriend_FP.xTouchSearch.hPos = imgfriendList[5].h+20;
        xFriend_FP.xTouchSearch.xPos = subTemp[XPOS] - xFriend_FP.xTouchSearch.wPos/2;
        xFriend_FP.xTouchSearch.yPos = subTemp[YPOS] - xFriend_FP.xTouchSearch.hPos/2;
        
//        setAlpha(100);
//        gSetColor(0, 0, 255);
//        fillRect(xFriend_FP.xTouchSearch.xPos, xFriend_FP.xTouchSearch.yPos, xFriend_FP.xTouchSearch.wPos, xFriend_FP.xTouchSearch.hPos);
//        setAlpha(ALPHA_MAX);
        
        subTemp[XPOS] = px+310;
        subTemp[YPOS] = py-155-47;
        if(xFriend_FP.isTouchEdit==false)
        {
            drawImage(&imgfriendList[14], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[14].w/2, imgfriendList[14].h, VH);
        }
        else
        {
            drawImage(&imgfriendList[14], subTemp[XPOS], subTemp[YPOS], imgfriendList[14].w/2, 0, imgfriendList[14].w/2, imgfriendList[14].h, VH);
        }
        xFriend_FP.xTouchEdit.wPos = imgfriendList[14].w/2;
        xFriend_FP.xTouchEdit.hPos = imgfriendList[14].h;
        xFriend_FP.xTouchEdit.xPos = subTemp[XPOS] - xFriend_FP.xTouchEdit.wPos/2;
        xFriend_FP.xTouchEdit.yPos = subTemp[YPOS] - xFriend_FP.xTouchEdit.hPos/2;
        
        subTemp[XPOS] = px+415;
        subTemp[YPOS] = py-162-47;
        
        if(xFriend_FP.isTouchRecommend==false)
        {
            drawImage(&imgfriendList[9], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[9].w/2, imgfriendList[9].h, VH);
        }
        else
        {
            drawImage(&imgfriendList[9], subTemp[XPOS], subTemp[YPOS], imgfriendList[9].w/2, 0, imgfriendList[9].w/2, imgfriendList[9].h, VH);
        }
        
        xFriend_FP.xTouchRecommend.wPos = imgfriendList[9].w/2+20;
        xFriend_FP.xTouchRecommend.hPos = imgfriendList[9].h+20;
        xFriend_FP.xTouchRecommend.xPos = subTemp[XPOS]-xFriend_FP.xTouchRecommend.wPos/2;
        xFriend_FP.xTouchRecommend.yPos = subTemp[YPOS]-xFriend_FP.xTouchRecommend.hPos/2;
    }
    
  
    int iMax =0;
    switch(xFriend_FP.selectTabB)
    {
        case 0:
            xDragScrollFriendSlot.totalNum = 1+(xFriend.totalNumList-1)/10;
            iMax = xFriend.totalNumList;
            break;
        case 1:
            xDragScrollFriendSlot.totalNum = 1+(xFriend.totalNumListFollow-1)/10;
            iMax = xFriend.totalNumListFollow;
            break;
    }
    if(xFriend_FP.isTouchRecommend==true)
    {
        xDragScrollFriendSlot.totalNum = 1+(xFriend.totalNumListRanDom-1)/10;
        iMax = xFriend.totalNumListRanDom;
    }
    xDragScrollFriendSlot.posGab = 1280;
    
    
    dragScrollPrc(&xDragScrollFriendSlot, 0, FALSE);
    if(xFriend_FP.isTouchRecommend==false)
    {
        if(iMax==0)
        {
            isSubTemp[13]=FALSE;
            for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
            {
                if (xEventQueueNet.type[ee]==NETQUEUE_TYPE_GETFRIENDLIST)
                {
                    isSubTemp[13] = TRUE;
                    break;
                }
            }
            if(isSubTemp[13]==FALSE)
            {
                switch(xFriend_FP.selectTabB)
                {
                    case 0:
                        if(0 == xFriend.nowPageNumList)
                        {
                            xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumList;
                            xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumList;
                            xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//0:친구리스트1:팔로잉
                            ++xFriend.nowPageNumList;
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
                        }
                        break;
                    case 1:
                        if(0 == xFriend.nowPageNumListFollow)
                        {
                            xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumListFollow;
                            xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumListFollow;
                            xEventQueueNet.action[xEventQueueNet.totalNum] = 1;		//0:친구리스트1:팔로잉
                            ++xFriend.nowPageNumListFollow;
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
                        }
                        break;
                }
                
            }
        }
    }
    int pos;
    int slotNum;
    gSetClip(true, px-480, py-120-47, 960, lcdH);
    for(int page =-1;page<=1;page++)
    {
        if(xDragScrollFriendSlot.selectNum+page>=0&&xDragScrollFriendSlot.selectNum+page<xDragScrollFriendSlot.totalNum)
        {
            for(int i=0;i<10;i++)
            {
                if(xFriend_FP.selectTabB==0)
                {
                    if(xFriend_FP.isTouchRecommend==true)
                    {
                        if(((xDragScrollFriendSlot.selectNum+page)*10)+i>=xFriend.totalNumListRanDom)
                            break;
                        
                        pos = xDragScrollFriendSlot.pos+((xDragScrollFriendSlot.posGab)*page);
                        subTemp[XPOS] = px-392+pos+(((i/2)%5)*190);
                        subTemp[YPOS] = py-65+((i%2)*200);

                        slotNum = ((xDragScrollFriendSlot.selectNum+page)*10)+i;
                        
                        drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].userNum, 130);
                        
                        drawImage(&imgfriendList[7], subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgfriendList[7].w, imgfriendList[7].h, VH);
                        
                        sprintf(strTempS, "%s", xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].strNickName);
                        setFontSizeORI(18);
                        gSetColor(101, 48, 150);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-85, strTempS, VH);
                        setFontSize(11);
                        
                        drawNum(&imgfriendList[8], subTemp[XPOS], subTemp[YPOS]+57, xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].lv, 0, VH);

                        if(xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].isPM==false)
                        {
                            if(xFriend_FP.isTouchJoin[slotNum]==false)
                            {
                                drawImage(&imgfriendList[13], subTemp[XPOS]-60, subTemp[YPOS]+62, 0, 0, imgfriendList[13].w/2, imgfriendList[13].h, VH);
                            }
                            else
                            {
                                drawImage(&imgfriendList[13], subTemp[XPOS]-60, subTemp[YPOS]+62, imgfriendList[13].w/2, 0, imgfriendList[13].w/2, imgfriendList[13].h, VH);
                            }
                            
                            xFriend_FP.xTouchJoin[slotNum].wPos = imgfriendList[13].w/2+20;
                            xFriend_FP.xTouchJoin[slotNum].hPos = imgfriendList[13].h+20;
                            xFriend_FP.xTouchJoin[slotNum].xPos = subTemp[XPOS]-60-xFriend_FP.xTouchJoin[slotNum].wPos/2;
                            xFriend_FP.xTouchJoin[slotNum].yPos = subTemp[YPOS]+62-xFriend_FP.xTouchJoin[slotNum].hPos/2;
                            
                            
                            //                        setAlpha(100);
                            //                        gSetColor(255, 0, 0);
                            //                        fillRect(xFriend_FP.xTouchJoin[slotNum].xPos, xFriend_FP.xTouchJoin[slotNum].yPos, xFriend_FP.xTouchJoin[slotNum].wPos, xFriend_FP.xTouchJoin[slotNum].hPos);
                            //                        setAlpha(ALPHA_MAX);
                            
                            
                            
                            drawImage(&imgfriendList[10], subTemp[XPOS]-57, subTemp[YPOS]-45, imgfriendList[10].w/3*2, 0, imgfriendList[10].w/3, imgfriendList[10].h, VH);
                            
                            
                            //                setAlpha(100);
                            //                gSetColor(255, 0, 0);
                            //                fillRect(xFriend_FP.xTouchFavorite.xPos, xFriend_FP.xTouchFavorite.yPos, xFriend_FP.xTouchFavorite.wPos, xFriend_FP.xTouchFavorite.hPos);
                            //                setAlpha(ALPHA_MAX);
                            
                        }
                        
                        if(xFriend_FP.isTouchVisit[slotNum]==false)
                        {
                            drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, 0, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                        }
                        else
                        {
                            drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, imgfriendList[15].w/2, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                        }
                    }
                    else
                    {
                        if(((xDragScrollFriendSlot.selectNum+page)*10)+i>=xFriend.totalNumList)
                            break;
                        
                        pos = xDragScrollFriendSlot.pos+((xDragScrollFriendSlot.posGab)*page);
                        subTemp[XPOS] = px-392+pos+(((i/2)%5)*190);
                        subTemp[YPOS] = py-65+((i%2)*200);
                        
                        //                if(subTemp[XPOS]<-xDragScrollFriendSlot.posGab||subTemp[XPOS]>lcdW+xDragScrollFriendSlot.posGab)
                        //                    continue;
                        
                        
                        
                        slotNum = ((xDragScrollFriendSlot.selectNum+page)*10)+i;
                        
                        drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xFriend.dataSlotNumList[slotNum]].userNum, 130);
                        
                        drawImage(&imgfriendList[7], subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgfriendList[7].w, imgfriendList[7].h, VH);
                        
                        sprintf(strTempS, "%s", xFriendData[xFriend.dataSlotNumList[slotNum]].strNickName);
                        setFontSizeORI(18);
                        gSetColor(101, 48, 150);
                        gDrawString(subTemp[XPOS], subTemp[YPOS]-85, strTempS, VH);
                        setFontSize(11);
                        
                        
                        
                        drawNum(&imgfriendList[8], subTemp[XPOS], subTemp[YPOS]+57, xFriendData[xFriend.dataSlotNumList[slotNum]].lv, 0, VH);
                        
                        if(xFriendData[xFriend.dataSlotNumList[slotNum]].socialCount>0)
                        {
                            drawImage(&imgfriendList[16], subTemp[XPOS]+53, subTemp[YPOS]-45, 0, 0, imgfriendList[16].w, imgfriendList[16].h, VH);
                        }
                        
                        if(xFriendData[xFriend.dataSlotNumList[slotNum]].isPM==false)
                        {
                            if(xFriendData[xFriend.dataSlotNumList[slotNum]].isBookMark==true)
                            {
                                drawImage(&imgfriendList[10], subTemp[XPOS]-57, subTemp[YPOS]-45, 0, 0, imgfriendList[10].w/3, imgfriendList[10].h, VH);
                            }
                            
                            else if(xFriendData[xFriend.dataSlotNumList[slotNum]].isBookMark==false)
                            {
                                drawImage(&imgfriendList[10], subTemp[XPOS]-57, subTemp[YPOS]-45, imgfriendList[10].w/3, 0, imgfriendList[10].w/3, imgfriendList[10].h, VH);
                            }
                            
                            xFriend_FP.xTouchFavorite[slotNum].wPos = imgfriendList[10].w/3;
                            xFriend_FP.xTouchFavorite[slotNum].hPos = imgfriendList[10].h;
                            xFriend_FP.xTouchFavorite[slotNum].xPos = subTemp[XPOS]-55-xFriend_FP.xTouchFavorite[slotNum].wPos/2;
                            xFriend_FP.xTouchFavorite[slotNum].yPos = subTemp[YPOS]-45-xFriend_FP.xTouchFavorite[slotNum].hPos/2;
                            
                            //                setAlpha(100);
                            //                gSetColor(255, 0, 0);
                            //                fillRect(xFriend_FP.xTouchFavorite.xPos, xFriend_FP.xTouchFavorite.yPos, xFriend_FP.xTouchFavorite.wPos, xFriend_FP.xTouchFavorite.hPos);
                            //                setAlpha(ALPHA_MAX);
                            if(xFriendData[xFriend.dataSlotNumList[slotNum]].friendState==1)
                            {
                                drawImage(&imgfriendList[12], subTemp[XPOS]-57, subTemp[YPOS]+62, 0, 0, imgfriendList[12].w, imgfriendList[12].h, VH);
                            }
                            
                            if(xFriend_FP.isTouchEdit==false)
                            {
                                if(xFriend_FP.isTouchVisit[slotNum]==false)
                                {
                                    drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, 0, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                                }
                                else
                                {
                                    drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, imgfriendList[15].w/2, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                                }
                                xFriend_FP.xTouchVisit[slotNum].wPos = imgfriendList[15].w/2+20;
                                xFriend_FP.xTouchVisit[slotNum].hPos = imgfriendList[15].h;
                                xFriend_FP.xTouchVisit[slotNum].xPos = subTemp[XPOS]+60 - xFriend_FP.xTouchVisit[slotNum].wPos/2;
                                xFriend_FP.xTouchVisit[slotNum].yPos = subTemp[YPOS]+62 - xFriend_FP.xTouchVisit[slotNum].hPos/2;
                                
                                //                            setAlpha(100);
                                //                            gSetColor(255, 0, 0);
                                //                            fillRect(xFriend_FP.xTouchVisit[slotNum].xPos, xFriend_FP.xTouchVisit[slotNum].yPos, xFriend_FP.xTouchVisit[slotNum].wPos, xFriend_FP.xTouchVisit[slotNum].hPos);
                                //                            setAlpha(ALPHA_MAX);
                                
                            }
                            else
                            {
                                drawImage(&imgfriendList[11], subTemp[XPOS]+60, subTemp[YPOS]+62, 0, 0, imgfriendList[11].w/2, imgfriendList[11].h, VH);
                                
                                xFriend_FP.xTouchDel[slotNum].wPos = imgfriendList[11].w/2+20;
                                xFriend_FP.xTouchDel[slotNum].hPos = imgfriendList[11].h+20;
                                xFriend_FP.xTouchDel[slotNum].xPos = subTemp[XPOS]+60-xFriend_FP.xTouchDel[slotNum].wPos/2;
                                xFriend_FP.xTouchDel[slotNum].yPos = subTemp[YPOS]+62-xFriend_FP.xTouchDel[slotNum].hPos/2;
                                
                                //                            setAlpha(100);
                                //                            gSetColor(255, 0, 0);
                                //                            fillRect(xFriend_FP.xTouchDel[slotNum].xPos, xFriend_FP.xTouchDel[slotNum].yPos, xFriend_FP.xTouchDel[slotNum].wPos, xFriend_FP.xTouchDel[slotNum].hPos);
                                //                            setAlpha(ALPHA_MAX);
                            }
                        }
                        else
                        {
                            if(xFriend_FP.isTouchVisit[slotNum]==false)
                            {
                                drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, 0, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                            }
                            else
                            {
                                drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, imgfriendList[15].w/2, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                            }
                            xFriend_FP.xTouchVisit[slotNum].wPos = imgfriendList[15].w/2+20;
                            xFriend_FP.xTouchVisit[slotNum].hPos = imgfriendList[15].h;
                            xFriend_FP.xTouchVisit[slotNum].xPos = subTemp[XPOS]+60 - xFriend_FP.xTouchVisit[slotNum].wPos/2;
                            xFriend_FP.xTouchVisit[slotNum].yPos = subTemp[YPOS]+62 - xFriend_FP.xTouchVisit[slotNum].hPos/2;
                            
                            //                        setAlpha(100);
                            //                        gSetColor(255, 0, 0);
                            //                        fillRect(xFriend_FP.xTouchVisit[slotNum].xPos, xFriend_FP.xTouchVisit[slotNum].yPos, xFriend_FP.xTouchVisit[slotNum].wPos, xFriend_FP.xTouchVisit[slotNum].hPos);
                            //                        setAlpha(ALPHA_MAX);
                            
                        }
                        
                        if((i+1)/10 >= xFriend.nowPageNumList)
                        {
                            isSubTemp[13] = FALSE;
                            for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
                            {
                                if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFRIENDLIST)
                                {
                                    isSubTemp[13] = TRUE;
                                    break;
                                }
                            }
                            if(isSubTemp[13] == FALSE)
                            {
                                //////////////////////////////////////////////////////////////////////////////////////////
                                xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumList;
                                xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumList;
                                xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//0:친구리스트1:팔로잉
                                ++xFriend.nowPageNumList;
                                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
                                //////////////////////////////////////////////////////////////////////////////////////////
                            }
                        }
                    }
                }
                
                
                else
                {
                    if(((xDragScrollFriendSlot.selectNum+page)*10)+i>=xFriend.totalNumListFollow)
                        break;
                    
                    pos = xDragScrollFriendSlot.pos+((xDragScrollFriendSlot.posGab)*page);
                    subTemp[XPOS] = px-392+pos+(((i/2)%5)*190);
                    subTemp[YPOS] = py-65+((i%2)*200);
                    
                    //                if(subTemp[XPOS]<-xDragScrollFriendSlot.posGab||subTemp[XPOS]>lcdW+xDragScrollFriendSlot.posGab)
                    //                    continue;
                    
                    slotNum = ((xDragScrollFriendSlot.selectNum+page)*10)+i;
                    
                    drawFriendProfile(subTemp[XPOS], subTemp[YPOS], xFriendData[xFriend.dataSlotNumListFollow[slotNum]].userNum, 130);
                    
                    drawImage(&imgfriendList[7], subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgfriendList[7].w, imgfriendList[7].h, VH);
                    
                    sprintf(strTempS, "%s", xFriendData[xFriend.dataSlotNumListFollow[slotNum]].strNickName);
                    setFontSizeORI(18);
                    gSetColor(101, 48, 150);
                    gDrawString(subTemp[XPOS], subTemp[YPOS]-85, strTempS, VH);
                    setFontSize(11);
                    
                    drawNum(&imgfriendList[8], subTemp[XPOS], subTemp[YPOS]+57, xFriendData[xFriend.dataSlotNumListFollow[slotNum]].lv, 0, VH);
                    
                    if(xFriendData[xFriend.dataSlotNumListFollow[slotNum]].isPM==false)
                    {
                        if(xFriend_FP.isTouchJoin[slotNum]==false)
                        {
                            drawImage(&imgfriendList[13], subTemp[XPOS]-60, subTemp[YPOS]+62, 0, 0, imgfriendList[13].w/2, imgfriendList[13].h, VH);
                        }
                        else
                        {
                            drawImage(&imgfriendList[13], subTemp[XPOS]-60, subTemp[YPOS]+62, imgfriendList[13].w/2, 0, imgfriendList[13].w/2, imgfriendList[13].h, VH);
                        }
                        
                        xFriend_FP.xTouchJoin[slotNum].wPos = imgfriendList[13].w/2+20;
                        xFriend_FP.xTouchJoin[slotNum].hPos = imgfriendList[13].h+20;
                        xFriend_FP.xTouchJoin[slotNum].xPos = subTemp[XPOS]-60-xFriend_FP.xTouchJoin[slotNum].wPos/2;
                        xFriend_FP.xTouchJoin[slotNum].yPos = subTemp[YPOS]+62-xFriend_FP.xTouchJoin[slotNum].hPos/2;
                        
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xFriend_FP.xTouchJoin[slotNum].xPos, xFriend_FP.xTouchJoin[slotNum].yPos, xFriend_FP.xTouchJoin[slotNum].wPos, xFriend_FP.xTouchJoin[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        
                        
                        
                        drawImage(&imgfriendList[10], subTemp[XPOS]-57, subTemp[YPOS]-45, imgfriendList[10].w/3*2, 0, imgfriendList[10].w/3, imgfriendList[10].h, VH);
                        
                        
                        //                setAlpha(100);
                        //                gSetColor(255, 0, 0);
                        //                fillRect(xFriend_FP.xTouchFavorite.xPos, xFriend_FP.xTouchFavorite.yPos, xFriend_FP.xTouchFavorite.wPos, xFriend_FP.xTouchFavorite.hPos);
                        //                setAlpha(ALPHA_MAX);
                        
                    }
                    
                    if(xFriend_FP.isTouchVisit[slotNum]==false)
                    {
                        drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, 0, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                    }
                    else
                    {
                        drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, imgfriendList[15].w/2, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                    }
                    
                    if((i+1)/10 >= xFriend.nowPageNumListFollow)
                    {
                        isSubTemp[13] = FALSE;
                        for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
                        {
                            if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_GETFRIENDLIST)
                            {
                                isSubTemp[13] = TRUE;
                                break;
                            }
                        }
                        if(isSubTemp[13] == FALSE)
                        {
                            //////////////////////////////////////////////////////////////////////////////////////////
                            xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumListFollow;
                            xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumListFollow;
                            xEventQueueNet.action[xEventQueueNet.totalNum] = 1;		//0:친구리스트1:팔로잉
                            ++xFriend.nowPageNumListFollow;
                            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
                            //////////////////////////////////////////////////////////////////////////////////////////
                        }
                    }
                }
            }
        }
    }

    gSetClip(false, 0, 0, false, false);
    
//    gSetColor(0,255,0);
//    setAlpha(100);
//    fillRect(px-480, py-120-47, 960, lcdH);
//    setAlpha(ALPHA_MAX);
    
    subTemp[XPOS] = px-520;
    subTemp[YPOS] = py+80-47;
    if(xDragScrollFriendSlot.selectNum<=0)
    {
        drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*2, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
    }
    else
    {
        if(xFriend_FP.isTouchLeftArrow==true)
        {
            drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*4, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
        }
        else
        {
            drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
        }
    }
    
    xFriend_FP.xTouchLeftArrow.wPos = 80;
    xFriend_FP.xTouchLeftArrow.hPos = 230;
    xFriend_FP.xTouchLeftArrow.xPos = subTemp[XPOS] - xFriend_FP.xTouchLeftArrow.wPos/2;
    xFriend_FP.xTouchLeftArrow.yPos = subTemp[YPOS] - xFriend_FP.xTouchLeftArrow.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(0, 0, 255);
    //    fillRect(xFriend_FP.xTouchLeftArrow.xPos, xFriend_FP.xTouchLeftArrow.yPos, xFriend_FP.xTouchLeftArrow.wPos, xFriend_FP.xTouchLeftArrow.hPos);
    //    setAlpha(ALPHA_MAX);
    
    subTemp[XPOS] = px+525;
    subTemp[YPOS] = py+80-47;
    
    if(xDragScrollFriendSlot.selectNum>=xDragScrollFriendSlot.totalNum-1)
    {
        drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*3, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
    }
    else
    {
        if(xFriend_FP.isTouchRightArrow==false)
        {
            drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
        }
        else
        {
            drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*5, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
        }
    }
    
    xFriend_FP.xTouchRightArrow.wPos = 80;
    xFriend_FP.xTouchRightArrow.hPos = 230;
    xFriend_FP.xTouchRightArrow.xPos = subTemp[XPOS] - xFriend_FP.xTouchRightArrow.wPos/2;
    xFriend_FP.xTouchRightArrow.yPos = subTemp[YPOS] - xFriend_FP.xTouchRightArrow.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(0, 0, 255);
    //    fillRect(xFriend_FP.xTouchRightArrow.xPos, xFriend_FP.xTouchRightArrow.yPos, xFriend_FP.xTouchRightArrow.wPos, xFriend_FP.xTouchRightArrow.hPos);
    //    setAlpha(ALPHA_MAX);


}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////친구행성 입력 이벤트 처리 KBY
void keyfriendList_FP(int type, int param1, int param2)
{
    bool isBookMark = false;
    int selectSlot = -1;
    if(touchType == USER_POINT_PRESS_EVENT)
    {
        for(int k=0;k<FRIENDSLOTMAX;k++)
        {
            if(touchCheck(&xFriend_FP.xTouchFavorite[k])==TRUE)
            {
                isBookMark=true;
                selectSlot = k;
                break;
            }
            
            else if(touchCheck(&xFriend_FP.xTouchJoin[k])==TRUE)
            {
                if(xFriend_FP.selectTabB==1)
                {
                    if(k<xFriend.totalNumListFollow)
                    {
                        xFriend_FP.isTouchJoin[k]=true;
                        break;
                    }
                }
                
            }
            
            else if(touchCheck(&xFriend_FP.xTouchVisit[k])==TRUE&&xFriend_FP.isTouchEdit==false)
            {
                if(xFriend_FP.selectTabB==0)
                {
                    if(k<xFriend.totalNumList)
                    {
                        xFriend_FP.isTouchVisit[k]=true;
                        break;
                    }
                }
                else
                {
                    if(k<xFriend.totalNumListFollow)
                    {
                        xFriend_FP.isTouchVisit[k]=true;
                        break;
                    }
                }
            }
            else if(touchCheck(&xFriend_FP.xTouchDel[k])==TRUE)
            {
                if(xFriend_FP.selectTabB==0&&xFriend_FP.isTouchEdit==true)
                {
                    if(k<xFriend.totalNumList)
                    {
                        xFriendData[xFriend.dataSlotNumList[k]].isAdd = FALSE;
                        xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriend.dataSlotNumList[k]].userNum;
                        addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_DELFRIEND, FALSE);
                        
                        for(int s=k;s<xFriend.totalNumList;s++)
                        {
                            xFriend.dataSlotNumList[s]=xFriend.dataSlotNumList[s+1];
                        }
                        xFriend.totalNumList--;
                        break;

                    }
                }
            }
        }
        for(int k=0;k<2;k++)
        {
            if(touchCheck(&xFriend_FP.xTouchTab[k])==TRUE)
            {
                xFriend_FP.selectTabB=k;
                break;
            }
        }
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xFriend_FP.isTouchClr=true;
        }
        
        else if(touchCheck(&xFriend_FP.xTouchLeftArrow)==TRUE && xDragScrollFriendSlot.selectNum>0)
        {
            xFriend_FP.isTouchLeftArrow=true;
            xFriend_FP.isTouchRightArrow = false;
        }
        
        else if(touchCheck(&xFriend_FP.xTouchRightArrow)==TRUE && xDragScrollFriendSlot.selectNum<xDragScrollFriendSlot.totalNum-1)
        {
            xFriend_FP.isTouchLeftArrow=false;
            xFriend_FP.isTouchRightArrow=true;
        }
        
        else if(touchCheck(&xFriend_FP.xTouchEdit)==TRUE)
        {
            if(xFriend_FP.isTouchEdit==true)
            {
                xFriend_FP.isTouchEdit=false;
            }
            else if(xFriend_FP.isTouchEdit==false)
            {
                xFriend_FP.isTouchEdit=true;
            }
        }
        else if(touchCheck(&xFriend_FP.xTouchRecommend)==TRUE)
        {
            if(xFriend_FP.isTouchRecommend==true)
            {
                xFriend_FP.isTouchRecommend=false;
            }
            else if(xFriend_FP.isTouchRecommend==false)
            {
                xFriend_FP.isTouchRecommend=true;
                xEventQueueNet.action[xEventQueueNet.totalNum] = 0;	//0:추천검색1:직접검색
                sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s","randomuser");
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDSEARCH, TRUE);
            }
        }
        
        else if(touchCheck(&xFriend_FP.xTouchSearch)==TRUE)
        {
            xFriend_FP.isTouchSearch=true;
        }
        
        if(isBookMark==true)
        {
            if(xFriend_FP.selectTabB==0)
            {
                if(xFriendData[xFriend.dataSlotNumList[selectSlot]].isBookMark==false)
                {
                    xFriendData[xFriend.dataSlotNumList[selectSlot]].isBookMark=true;
                    xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
                }
                else
                {
                    xFriendData[xFriend.dataSlotNumList[selectSlot]].isBookMark=false;
                    xEventQueueNet.action[xEventQueueNet.totalNum] = 0;
                }
                xEventQueueNet.friendNum[xEventQueueNet.totalNum]=xFriendData[xFriend.dataSlotNumList[selectSlot]].userNum;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BOOKMARK, TRUE);
            }
            else
            {
                if(xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].friendState==1)
                {
                    if(xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].isBookMark==false)
                    {
                        xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].isBookMark=true;
                        xEventQueueNet.action[xEventQueueNet.totalNum]=1;
                    }
                    else
                    {
                        xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].isBookMark=false;
                        xEventQueueNet.action[xEventQueueNet.totalNum]=0;
                    }
                    xEventQueueNet.friendNum[xEventQueueNet.totalNum]=xFriendData[xFriend.dataSlotNumListFollow[selectSlot]].userNum;
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BOOKMARK, TRUE);
                }
            }
        }
    }
    else if(touchType == USER_POINT_RELEASE_EVENT)
    {
        for(int k=0;k<FRIENDSLOTMAX;k++)
        {
            if(touchCheck(&xFriend_FP.xTouchVisit[k])==TRUE&&xFriend_FP.isTouchEdit==false)
            {
                if(xFriend_FP.selectTabB==0)
                {
                    if(k<xFriend.totalNumList)
                    {
                        xFriend_FP.isTouchVisit[k]=false;
                        xFriend.selectSlot = k;
                        xFriendMap.selectDataSlotNum = xFriend.dataSlotNumList[xFriend.selectSlot];
                        xWorldMap.isFriendMap=TRUE;
                        xFriendMap.isPlay=TRUE;
                        xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
                        xFriendMap.type = 0;
                        xFriendMap.anyCnt=0;
                        break;
                    }
                }
                else
                {
                    if(k<xFriend.totalNumListFollow)
                    {
                        xFriend_FP.isTouchVisit[k]=false;
                        xFriend.selectSlot = k;
                        xFriendMap.selectDataSlotNum = xFriend.dataSlotNumListFollow[xFriend.selectSlot];
                        xWorldMap.isFriendMap=TRUE;
                        xFriendMap.isPlay=TRUE;
                        xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
                        xFriendMap.type = 0;
                        xFriendMap.anyCnt=0;
                        
                        break;
                    }
                }
            }
            
            else if(touchCheck(&xFriend_FP.xTouchJoin[k])==TRUE)
            {
                xFriend_FP.isTouchJoin[k]=false;
                xEventQueueNet.friendNum[xEventQueueNet.totalNum]=xFriendData[xFriend.dataSlotNumListFollow[k]].userNum;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIEND, FALSE);
                xFriendData[xFriend.dataSlotNumListFollow[k]].isAdd=TRUE;
            }

        }
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xFriend_FP.isTouchClr=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            friendListFreeLoad_FP(false);
            xWorldMap.state=WORLDMAP_STATE_PLAY;
        }
        else if(touchCheck(&xFriend_FP.xTouchSearch)==TRUE&&touchType==USER_POINT_RELEASE_EVENT)
        {
            xFriend_FP.isTouchSearch=false;
            xFriend_FP.isTouchSearchClr=false;
            xFriend_FP.isTouchSearchLeftArrow=false;
            xFriend_FP.isTouchSearchRightArrow=false;
            xFriend_FP.isTouchPopUpSearch = false;
            for(int k=0;k<FRIENDSLOTMAX;k++)
            {
                xFriend_FP.isTouchVisit[k]=false;
                xFriend_FP.isTouchJoin[k]=false;
                xFriend_FP.isTouchDel[k]=false;
            }
            
            xFriend_FP.SearchState = FRIENDSEARCH_FP_STATE_PLAY;
            xFriend_FP.state = FRIEND_FP_STATE_SEARCH;
            
        }
        
        else if(touchCheck(&xFriend_FP.xTouchLeftArrow)==TRUE && xDragScrollFriendSlot.selectNum>0)
        {
            xDragScrollFriendSlot.speed=640;
            xFriend_FP.isTouchLeftArrow=false;
            xFriend_FP.isTouchRightArrow = false;
        }
        
        else if(touchCheck(&xFriend_FP.xTouchRightArrow)==TRUE && xDragScrollFriendSlot.selectNum<xDragScrollFriendSlot.totalNum-1)
        {
            xDragScrollFriendSlot.speed = -640;
            xFriend_FP.isTouchLeftArrow=false;
            xFriend_FP.isTouchRightArrow=false;
        }
        
        xDragScrollFriendSlot.touchXpos=DONT;
        xDragScrollFriendSlot.touchXposBefore=DONT;
        xDragScrollFriendSlot.touchYpos=DONT;
        xDragScrollFriendSlot.touchYposBefore=DONT;
        xFriend_FP.isTouchSearch=false;
        xFriend_FP.isTouchSearchClr=false;
        xFriend_FP.isTouchSearchLeftArrow=false;
        xFriend_FP.isTouchSearchRightArrow=false;
        xFriend_FP.isTouchPopUpSearch = false;
        xFriend_FP.isTouchClr=false;
        xFriend_FP.isTouchLeftArrow=false;
        xFriend_FP.isTouchRightArrow=false;
        for(int k=0;k<FRIENDSLOTMAX;k++)
        {
            xFriend_FP.isTouchVisit[k]=false;
            xFriend_FP.isTouchJoin[k]=false;
            xFriend_FP.isTouchDel[k]=false;
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////친구검색 Draw KBY
void drawfriendSearch_FP()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py;
    
    drawImage(&imgfriendList[17], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[17].w, imgfriendList[17].h, VH);
    
    subTemp[XPOS] = lcdW-178;
    subTemp[YPOS] = py-130;
    
    if(xFriend_FP.isTouchSearchClr==false)
    {
        drawImage(&imgfriendList[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[2].w/2, imgfriendList[2].h, VH);
    }
    else
    {
        drawImage(&imgfriendList[2], subTemp[XPOS], subTemp[YPOS], imgfriendList[2].w/2, 0, imgfriendList[2].w/2, imgfriendList[2].h, VH);
    }
    xTouchClr.wPos = imgfriendList[2].w/2;
    xTouchClr.hPos = imgfriendList[2].h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    
    subTemp[XPOS] = px+310;
    subTemp[YPOS] = py-105;

    if(xFriend_FP.isTouchPopUpSearch==false)
    {
        drawImage(&imgfriendList[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[5].w/2, imgfriendList[5].h, VH);
    }
    
    else
    {
        drawImage(&imgfriendList[5], subTemp[XPOS], subTemp[YPOS], imgfriendList[5].w/2, 0, imgfriendList[5].w/2, imgfriendList[5].h, VH);
    }
    
    xFriend_FP.xTouchSearch.wPos = imgfriendList[5].w/2+20;
    xFriend_FP.xTouchSearch.hPos = imgfriendList[5].h+20;
    xFriend_FP.xTouchSearch.xPos = subTemp[XPOS]-xFriend_FP.xTouchSearch.wPos/2;
    xFriend_FP.xTouchSearch.yPos = subTemp[YPOS]-xFriend_FP.xTouchSearch.hPos/2;
    
//    setAlpha(100);
//    gSetColor(0, 255, 0);
////    fillRect(xFriend_FP.xTouchSearch.xPos, xFriend_FP.xTouchSearch.yPos, xFriend_FP.xTouchSearch.wPos, xFriend_FP.xTouchSearch.hPos);
//    fillRect(xFriend_FP.xTouchSearch.xPos, xFriend_FP.xTouchSearch.yPos, 83, 68);
//    setAlpha(ALPHA_MAX);
    

    if(xFriend_FP.SearchState==FRIENDSEARCH_FP_STATE_PLAY)
    {
        subTemp[XPOS] = px;
        subTemp[YPOS] = py+30;
        
        drawImage(&imgfriendList[18], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[18].w, imgfriendList[18].h, VH);
        
        subTemp[XPOS] = px;
        subTemp[YPOS] = py+80;

        gSetColor(101, 48, 150);
        setFontSizeORI(18);
        sprintf(strTempS, "검색어를 입력해주세요.");
        gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
        setFontSize(11);
    }
    
    else if(xFriend_FP.SearchState==FRIENDSEARCH_FP_STATE_NOTUSER)
    {
        subTemp[XPOS] = px;
        subTemp[YPOS] = py+30;
        
        drawImage(&imgfriendList[18], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[18].w, imgfriendList[18].h, VH);
        
        subTemp[XPOS] = px;
        subTemp[YPOS] = py+80;
        
        gSetColor(101, 48, 150);
        setFontSizeORI(18);
        sprintf(strTempS, "검색 결과가 없습니다.");
        gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
        setFontSize(11);

    }
    else if(xFriend_FP.SearchState==FRIENDSEARCH_FP_STATE_RESULT)
    {
        xFriend_FP.xDragScrollFriendResult.totalNum = 1+(xFriend.totalNumListRanDom-1)/4;
        
        xFriend_FP.xDragScrollFriendResult.posGab = 1280;
        int iMax = xFriend_FP.xDragScrollFriendResult.totalNum;
        
        dragScrollPrc(&xFriend_FP.xDragScrollFriendResult, 0, FALSE);
        
        int pos;
        int slotNum;
        gSetClip(true, px-330, py-75, 670, 220);
        for(int page =-1;page<=1;page++)
        {
            if(xFriend_FP.xDragScrollFriendResult.selectNum+page>=0&&xFriend_FP.xDragScrollFriendResult.selectNum+page<xFriend_FP.xDragScrollFriendResult.totalNum)
            {
                for(int i=0;i<4;i++)
                {
                    if(((xFriend_FP.xDragScrollFriendResult.selectNum+page)*4)+i>=xFriend.totalNumListRanDom)
                    {
                        break;
                    }
                    
                    pos = xFriend_FP.xDragScrollFriendResult.pos+((xFriend_FP.xDragScrollFriendResult.posGab)*page);
                    subTemp[XPOS] = px-230+pos+((i%4)*190);
                    subTemp[YPOS] = py+50;
                    
                    slotNum = ((xFriend_FP.xDragScrollFriendResult.selectNum+page)*4)+i;
                    
                    drawFriendProfile(subTemp[XPOS], subTemp[YPOS]-5, xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].userNum, 130);
                    
                    drawImage(&imgfriendList[7], subTemp[XPOS], subTemp[YPOS]-5, 0, 0, imgfriendList[7].w, imgfriendList[7].h, VH);
                    
                    sprintf(strTempS, "%s", xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].strNickName);

                    setFontSizeORI(18);
                    gSetColor(101, 48, 150);
                    gDrawString(subTemp[XPOS], subTemp[YPOS]-85, strTempS, VH);
                    setFontSize(11);
                    
                    drawNum(&imgfriendList[8], subTemp[XPOS], subTemp[YPOS]+57, xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].lv, 0, VH);
                    
                    if(xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].isAdd==true)
                    {
                        if(xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].isPM==false)
                        {
                            if(xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].friendState==1)
                            {
                                drawImage(&imgfriendList[12], subTemp[XPOS]-57, subTemp[YPOS]+62, 0, 0, imgfriendList[12].w, imgfriendList[12].h, VH);
                            }
                            
                            if(xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].isBookMark==true)
                            {
                                drawImage(&imgfriendList[10], subTemp[XPOS]-57, subTemp[YPOS]-45, 0, 0, imgfriendList[10].w/3, imgfriendList[10].h, VH);
                            }
                            
                            else if(xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].isBookMark==false)
                            {
                                drawImage(&imgfriendList[10], subTemp[XPOS]-57, subTemp[YPOS]-45, imgfriendList[10].w/3, 0, imgfriendList[10].w/3, imgfriendList[10].h, VH);
                            }
                        }
                    }
                    else
                    {
                        if(xFriendData[xFriend.dataSlotNumListRanDom[slotNum]].isPM==false)
                        {
                            if(xFriend_FP.isTouchSearchJoin[slotNum]==false)
                            {
                                drawImage(&imgfriendList[13], subTemp[XPOS]-60, subTemp[YPOS]+62, 0, 0, imgfriendList[13].w/2, imgfriendList[13].h, VH);
                            }
                            else
                            {
                                drawImage(&imgfriendList[13], subTemp[XPOS]-60, subTemp[YPOS]+62, imgfriendList[13].w/2, 0, imgfriendList[13].w/2, imgfriendList[13].h, VH);
                            }
                            xFriend_FP.xTouchJoin[slotNum].wPos = imgfriendList[13].w/2+20;
                            xFriend_FP.xTouchJoin[slotNum].hPos = imgfriendList[13].h+20;
                            xFriend_FP.xTouchJoin[slotNum].xPos = subTemp[XPOS]-60-xFriend_FP.xTouchJoin[slotNum].wPos/2;
                            xFriend_FP.xTouchJoin[slotNum].yPos = subTemp[YPOS]+62-xFriend_FP.xTouchJoin[slotNum].hPos/2;
                            
                            
//                            setAlpha(100);
//                            gSetColor(255, 0, 0);
//                            fillRect(xFriend_FP.xTouchJoin[slotNum].xPos, xFriend_FP.xTouchJoin[slotNum].yPos, xFriend_FP.xTouchJoin[slotNum].wPos, xFriend_FP.xTouchJoin[slotNum].hPos);
//                            setAlpha(ALPHA_MAX);
                            
                            
                            
                            drawImage(&imgfriendList[10], subTemp[XPOS]-57, subTemp[YPOS]-45, imgfriendList[10].w/3*2, 0, imgfriendList[10].w/3, imgfriendList[10].h, VH);
                        }
                    }
                    if(xFriend_FP.isTouchSearchVisit[slotNum]==false)
                    {
                        drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, 0, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                    }
                    
                    else
                    {
                        drawImage(&imgfriendList[15], subTemp[XPOS]+60, subTemp[YPOS]+62, imgfriendList[15].w/2, 0, imgfriendList[15].w/2, imgfriendList[15].h, VH);
                    }
                    xFriend_FP.xTouchVisit[slotNum].wPos = imgfriendList[15].w/2+20;
                    xFriend_FP.xTouchVisit[slotNum].hPos = imgfriendList[15].h;
                    xFriend_FP.xTouchVisit[slotNum].xPos = subTemp[XPOS]+60 - xFriend_FP.xTouchVisit[slotNum].wPos/2;
                    xFriend_FP.xTouchVisit[slotNum].yPos = subTemp[YPOS]+62 - xFriend_FP.xTouchVisit[slotNum].hPos/2;
                    
//                    setAlpha(100);
//                    gSetColor(255, 0, 0);
//                    fillRect(xFriend_FP.xTouchVisit[slotNum].xPos, xFriend_FP.xTouchVisit[slotNum].yPos, xFriend_FP.xTouchVisit[slotNum].wPos, xFriend_FP.xTouchVisit[slotNum].hPos);
//                    setAlpha(ALPHA_MAX);

                }
            }
        }
        gSetClip(false, 0, 0, false, false);
        
        subTemp[XPOS] = px-350;
        subTemp[YPOS] = py+40;
        if(xFriend_FP.xDragScrollFriendResult.selectNum<=0)
        {
            drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*2, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
        }
        else
        {
            if(xFriend_FP.isTouchSearchLeftArrow==true)
            {
                drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*4, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
            }
            else
            {
                drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
            }
        }
        
        xFriend_FP.xTouchLeftArrow.wPos = 80;
        xFriend_FP.xTouchLeftArrow.hPos = 230;
        xFriend_FP.xTouchLeftArrow.xPos = subTemp[XPOS] - xFriend_FP.xTouchLeftArrow.wPos/2;
        xFriend_FP.xTouchLeftArrow.yPos = subTemp[YPOS] - xFriend_FP.xTouchLeftArrow.hPos/2;
        
//        setAlpha(100);
//        gSetColor(0, 0, 255);
//        fillRect(xFriend_FP.xTouchLeftArrow.xPos, xFriend_FP.xTouchLeftArrow.yPos, xFriend_FP.xTouchLeftArrow.wPos, xFriend_FP.xTouchLeftArrow.hPos);
//        setAlpha(ALPHA_MAX);
        
        subTemp[XPOS] = px+375;
        subTemp[YPOS] = py+40;
        
        if(xFriend_FP.xDragScrollFriendResult.selectNum>=xFriend_FP.xDragScrollFriendResult.totalNum-1)
        {
            drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*3, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
        }
        else
        {
            if(xFriend_FP.isTouchSearchRightArrow==false)
            {
                drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
            }
            else
            {
                drawImage(&imgfriendList[6], subTemp[XPOS], subTemp[YPOS], imgfriendList[6].w/6*5, 0, imgfriendList[6].w/6, imgfriendList[6].h, VH);
            }
        }
        
        xFriend_FP.xTouchRightArrow.wPos = 80;
        xFriend_FP.xTouchRightArrow.hPos = 230;
        xFriend_FP.xTouchRightArrow.xPos = subTemp[XPOS] - xFriend_FP.xTouchRightArrow.wPos/2;
        xFriend_FP.xTouchRightArrow.yPos = subTemp[YPOS] - xFriend_FP.xTouchRightArrow.hPos/2;
        
//        setAlpha(100);
//        gSetColor(0, 0, 255);
//        fillRect(xFriend_FP.xTouchRightArrow.xPos, xFriend_FP.xTouchRightArrow.yPos, xFriend_FP.xTouchRightArrow.wPos, xFriend_FP.xTouchRightArrow.hPos);
//        setAlpha(ALPHA_MAX);


    }
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(px-330, py-75,  685,  220);
//    setAlpha(ALPHA_MAX);
    
    int strByte=getStringByte(xFriend_FP.strName);
    int kor=strByte/1000;
    int eng=strByte%1000;
    int korEng=kor+eng;
    
    subTemp[XPOS]=px-65;
    subTemp[YPOS]=py-125;
    
    xFriend_FP.xTouchSearchBar.wPos = 340;
    xFriend_FP.xTouchSearchBar.hPos = 40;
    xFriend_FP.xTouchSearchBar.xPos = subTemp[XPOS];
    xFriend_FP.xTouchSearchBar.yPos = subTemp[YPOS];
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect( xFriend_FP.xTouchSearchBar.xPos,  xFriend_FP.xTouchSearchBar.yPos,  xFriend_FP.xTouchSearchBar.wPos,  xFriend_FP.xTouchSearchBar.hPos);
//    setAlpha(ALPHA_MAX);
    
    if(korEng==0)
    {
        xFriend_FP.SearchState=FRIENDSEARCH_FP_STATE_PLAY;
    }
    switch (xFriend_FP.SearchState)
    {
        case FRIENDSEARCH_FP_STATE_PLAY:
        case FRIENDSEARCH_FP_STATE_NOTUSER:
            sprintf(xFriend_FP.strName, "검색할 닉네임을 입력해주세요");
            break;
        default:
            break;
    }
    gSetColor(204, 169, 219);
    setFontSizeORI(18);
    gDrawString(subTemp[XPOS]+5, subTemp[YPOS]+20, xFriend_FP.strName, VL);
    setFontSize(11);
    
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////친구검색 입력 이벤트 처리 KBY
void keyfriendSearch_FP(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        for(int k=0;k<xFriend.totalNumListRanDom;k++)
        {
            if(touchCheck(&xFriend_FP.xTouchJoin[k])==TRUE&&touchType==USER_POINT_PRESS_EVENT&&touchCheck(&xFriend_FP.xTouchRightArrow)==FALSE&&touchCheck(&xFriend_FP.xTouchLeftArrow)==FALSE)
            {
                if(k<xFriend.totalNumListRanDom)
                {
                    xFriend_FP.isTouchSearchJoin[k]=true;
                    break;
                }
            }
            else if(touchCheck(&xFriend_FP.xTouchVisit[k])==TRUE&&touchType==USER_POINT_PRESS_EVENT&&touchCheck(&xFriend_FP.xTouchRightArrow)==FALSE&&touchCheck(&xFriend_FP.xTouchLeftArrow)==FALSE)
            {
                if(k<xFriend.totalNumListRanDom)
                {
                    xFriend_FP.isTouchSearchVisit[k]=true;
                    break;
                }
            }
            
        }
        if(touchCheck(&xTouchClr)==TRUE && xTextField.state!=TEXTFIELD_STATE_PLAY && touchType == USER_POINT_PRESS_EVENT)
        {
            xFriend_FP.isTouchSearchClr=true;
        }
        else if(touchCheck(&xFriend_FP.xTouchSearchBar)==TRUE&&touchType == USER_POINT_PRESS_EVENT)
        {
            xFriend_FP.SearchState=FRIENDSEARCH_FP_STATE_OK;
            setTextField(TEXTBOX_TYPE_FRIENDID_FP, xFriend_FP.xTouchSearchBar.xPos, xFriend_FP.xTouchSearchBar.yPos, xFriend_FP.xTouchSearchBar.wPos, xFriend_FP.xTouchSearchBar.hPos);
        }
        
        else if(touchCheck(&xFriend_FP.xTouchSearch)==TRUE&&touchType==USER_POINT_PRESS_EVENT)
        {
            xFriend_FP.isTouchPopUpSearch=true;
        }
        
        else if(touchCheck(&xFriend_FP.xTouchLeftArrow)==TRUE && xFriend_FP.xDragScrollFriendResult.selectNum>0)
        {
            xFriend_FP.isTouchSearchLeftArrow=true;
            xFriend_FP.isTouchSearchRightArrow = false;
        }
        
        else if(touchCheck(&xFriend_FP.xTouchRightArrow)==TRUE && xFriend_FP.xDragScrollFriendResult.selectNum<xFriend_FP.xDragScrollFriendResult.totalNum-1)
        {
            xFriend_FP.isTouchSearchLeftArrow=false;
            xFriend_FP.isTouchSearchRightArrow=true;
        }

    }
    else if(type==MH_KEY_RELEASEEVENT)
    {
        for(int k=0;k<xFriend.totalNumListRanDom;k++)
        {
            if(touchCheck(&xFriend_FP.xTouchJoin[k])==TRUE  && xTextField.state!=TEXTFIELD_STATE_PLAY && touchType==USER_POINT_RELEASE_EVENT&&touchCheck(&xFriend_FP.xTouchRightArrow)==FALSE&&touchCheck(&xFriend_FP.xTouchLeftArrow)==FALSE)
            {
                if(k<xFriend.totalNumListRanDom)
                {
                    xFriend_FP.isTouchSearchJoin[k]=false;
                    xEventQueueNet.friendNum[xEventQueueNet.totalNum]=xFriendData[xFriend.dataSlotNumListRanDom[k]].userNum;
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_ADDFRIEND, FALSE);
                    xFriendData[xFriend.dataSlotNumListFollow[k]].isAdd=TRUE;
                    break;
                }
            }
            else if(touchCheck(&xFriend_FP.xTouchVisit[k])==TRUE  && xTextField.state!=TEXTFIELD_STATE_PLAY && touchType==USER_POINT_RELEASE_EVENT&&touchCheck(&xFriend_FP.xTouchRightArrow)==FALSE&&touchCheck(&xFriend_FP.xTouchLeftArrow)==FALSE)
            {
                if(k<xFriend.totalNumListRanDom)
                {
                    xFriend_FP.isTouchSearchVisit[k]=false;
                    xFriend.selectSlot = k;
                    xFriendMap.selectDataSlotNum = xFriend.dataSlotNumListRanDom[xFriend.selectSlot];
                    xWorldMap.isFriendMap=TRUE;
                    xFriendMap.isPlay=TRUE;
                    xFriendMap.state = FRIENDMAP_STATE_LOADING0_START;
                    xFriendMap.type = 0;
                    xFriendMap.anyCnt=0;
                    break;
                }
            }
            
        }

        if(touchCheck(&xTouchClr)==TRUE && xTextField.state!=TEXTFIELD_STATE_PLAY && touchType == USER_POINT_RELEASE_EVENT)
        {
            xFriend_FP.isTouchSearchClr=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xFriend_FP.state = FRIEND_FP_STATE_PLAY;
            xFriend.totalNumList=0;
            xFriend.nowPageNumList=0;
            xEventQueueNet.code[xEventQueueNet.totalNum] = xFriend.nowRowNumList;
            xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xFriend.nowPageNumList;
            xEventQueueNet.action[xEventQueueNet.totalNum] = 0;		//0:친구리스트1:팔로잉
            ++xFriend.nowPageNumList;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDLIST, TRUE);
        }
        else if(touchCheck(&xFriend_FP.xTouchSearch)==TRUE&&touchType==USER_POINT_RELEASE_EVENT)
        {
            xFriend_FP.isTouchPopUpSearch=false;
            xEventQueueNet.action[xEventQueueNet.totalNum] = 1;
            sprintf(xEventQueueNet.strNickName[xEventQueueNet.totalNum], "%s",xFriend_FP.strName);
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETFRIENDSEARCH, TRUE);
        }
        
        else if(touchCheck(&xFriend_FP.xTouchLeftArrow)==TRUE && xFriend_FP.xDragScrollFriendResult.selectNum>0)
        {
            xFriend_FP.xDragScrollFriendResult.speed=640;
            xFriend_FP.isTouchSearchLeftArrow=false;
            xFriend_FP.isTouchSearchRightArrow = false;
        }
        
        else if(touchCheck(&xFriend_FP.xTouchRightArrow)==TRUE && xFriend_FP.xDragScrollFriendResult.selectNum<xFriend_FP.xDragScrollFriendResult.totalNum-1)
        {
            xFriend_FP.xDragScrollFriendResult.speed = -640;
            xFriend_FP.isTouchSearchLeftArrow=false;
            xFriend_FP.isTouchSearchRightArrow=false;
        }
        xFriend_FP.xDragScrollFriendResult.touchXpos=DONT;
        xFriend_FP.xDragScrollFriendResult.touchXposBefore=DONT;
        xFriend_FP.xDragScrollFriendResult.touchYpos=DONT;
        xFriend_FP.xDragScrollFriendResult.touchYposBefore=DONT;
        xFriend_FP.isTouchSearchBar=false;
        xFriend_FP.isTouchSearch=false;
        xFriend_FP.isTouchSearchClr=false;
        xFriend_FP.isTouchSearchLeftArrow=false;
        xFriend_FP.isTouchSearchRightArrow=false;
        xFriend_FP.isTouchPopUpSearch = false;
        for(int k=0;k<FRIENDSLOTMAX;k++)
        {
            xFriend_FP.isTouchVisit[k]=false;
            xFriend_FP.isTouchJoin[k]=false;
            xFriend_FP.isTouchDel[k]=false;
        }

    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////온실 KBY
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////온실 이미지 로드 및 메모리 해제 KBY
void greenHouseFreeLoad_FP(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("productionbase.png", &imgGreenHouse[0]);
        loadImg("productionexiticon.png", &imgGreenHouse[1]);
        loadImg("greenhouse_title.png", &imgGreenHouse[2]);
        loadImg("production_left.png",&imgGreenHouse[3]);
        loadImg("production_main.png",&imgGreenHouse[4]);
        loadImg("production_right.png",&imgGreenHouse[5]);
        loadImg("production_arrow.png",&imgGreenHouse[6]);
        loadImg("production_slot_arrow.png", &imgGreenHouse[7]);
        loadImg("production_slot_open.png", &imgGreenHouse[8]);
        loadImg("production_close.png", &imgGreenHouse[9]);
        loadImg("production_text_complete.png", &imgGreenHouse[10]);
        loadImg("greenhouse_name.png", &imgGreenHouse[11]);
        loadImg("greenhouse_flower.png", &imgGreenHouse[12]);
        loadImg("production_shadow.png", &imgGreenHouse[13]);
        loadImg("production_text_complete.png", &imgGreenHouse[14]);
        loadImg("greenhouse_slot.png", &imgGreenHouse[15]);
        loadImg("production_close.png", &imgGreenHouse[16]);
        loadImg("production_slot_open.png", &imgGreenHouse[17]);
        loadImg("production_text.png", &imgGreenHouse[18]);
        loadImg("greenhouse_slot_ground.png", &imgGreenHouse[19]);
        loadImg("greenhouse_btn_fast.png", &imgGreenHouse[20]);
        loadImg("greenhouse_btn_upgrade.png", &imgGreenHouse[21]);
        loadImg("greenhouse_popup_base.png", & imgGreenHouse[22]);
        loadImg("popup_base.png", &imgGreenHouse[23]);
        loadImg("default_btn_yesno.png", &imgGreenHouse[24]);
        for(int k=0;k<xGreenHouse_MaterialData_FP.totalNum;k++)
        {
            for(int i=0;i<4;i++)
            {
                if(i==0)
                {
                    sprintf(strTempS, "flower5_0.png");
                }
                else
                {
                    sprintf(strTempS, "flower%d_%d.png", k, i);
                }
                loadImg(strTempS, &imgFlower[k][i]);
            }
        }
        for(int k=0;k<GREENHOUSESLOT_LV_MAX;k++)
        {
            sprintf(strTempS, "greenhouse_slot_lv%d.png",k);
            loadImg(strTempS, &imgSlotLv[k]);
        }
    }
    else
    {
        freeImg(&imgGreenHouse[0]);
        freeImg(&imgGreenHouse[1]);
        freeImg(&imgGreenHouse[2]);
        freeImg(&imgGreenHouse[3]);
        freeImg(&imgGreenHouse[4]);
        freeImg(&imgGreenHouse[5]);
        freeImg(&imgGreenHouse[6]);
        freeImg(&imgGreenHouse[7]);
        freeImg(&imgGreenHouse[8]);
        freeImg(&imgGreenHouse[9]);
        freeImg(&imgGreenHouse[10]);
        freeImg(&imgGreenHouse[11]);
        freeImg(&imgGreenHouse[12]);
        freeImg(&imgGreenHouse[13]);
        freeImg(&imgGreenHouse[14]);
        freeImg(&imgGreenHouse[15]);
        freeImg(&imgGreenHouse[16]);
        freeImg(&imgGreenHouse[17]);
        freeImg(&imgGreenHouse[18]);
        freeImg(&imgGreenHouse[19]);
        freeImg(&imgGreenHouse[20]);
        freeImg(&imgGreenHouse[21]);
        freeImg(&imgGreenHouse[22]);
        freeImg(&imgGreenHouse[23]);
        freeImg(&imgGreenHouse[24]);
        for(int k=0;k<xGreenHouse_MaterialData_FP.totalNum;k++)
        {
            for(int i=0;i<4;i++)
            {
                freeImg(&imgFlower[k][i]);
            }
        }
        
        for(int k=0;k<GREENHOUSESLOT_LV_MAX;k++)
        {
            freeImg(&imgSlotLv[k]);
        }

    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////온실 init KBY
void initGreenHouse_FP()
{
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GREENHOUSEINFOUPDATE, TRUE);
    
    xGreenHouse_FP.state = GREENHOUSE_STATE_MAIN;
    xGreenHouse_FP.selectSlot = -1;
    xGreenHouse_FP.selectProduct = -1;
    
    
    xGreenHouse_FP.isTouchClr=false;
    xGreenHouse_FP.isTouchLeftBtn=false;
    xGreenHouse_FP.isTouchRightBtn=false;
    xGreenHouse_FP.isTouchLeftArrow=false;
    xGreenHouse_FP.isTouchRightArrow=false;
    xGreenHouse_FP.isTouchMaterial=false;
    xGreenHouse_FP.isTouchProduct=false;
    xGreenHouse_FP.isTouchPopupClr=false;
    xGreenHouse_FP.isTouchYes=false;
    xGreenHouse_FP.isTouchNo=false;
    xGreenHouse_FP.isTouchOpen=false;
    for(int k=0;k<MATERIALSLOTMAX;k++)
    {
        xGreenHouse_FP.isTouchUpgrade[k] = false;
        xGreenHouse_FP.isTouchFast[k] = false;
        xGreenHouse_FP.AnyCnt[k]=0;
        xGreenHouse_FP.imgNum[k] = 0;
    }
    
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////온실 Draw KBY
void drawGreenHouse_FP()
{
    int px = cx;
    int py = cy;
    int pos;
    
    drawBgFillRect();
    
    drawImage(&imgGreenHouse[0], px, py+50, 0, 0, imgGreenHouse[0].w, imgGreenHouse[0].h, VH);
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-180;
    
    if(xGreenHouse_FP.isTouchClr==false)
    {
        drawImage(&imgGreenHouse[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[1].w/2, imgGreenHouse[1].h, VH);
    }
    else
    {
        drawImage(&imgGreenHouse[1], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[1].w/2, 0, imgGreenHouse[1].w/2, imgGreenHouse[1].h, VH);
    }
    xTouchClr.wPos = imgGreenHouse[1].w;
    xTouchClr.hPos = imgGreenHouse[1].h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;

    subTemp[XPOS] = px-456;
    subTemp[YPOS] = py-220;
    
    drawImage(&imgGreenHouse[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[2].w, imgGreenHouse[2].h, VH);
    
    subTemp[XPOS] = px+2;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgGreenHouse[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[4].w, imgGreenHouse[4].h, VH);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py-90;
    
    drawImage(&imgGreenHouse[11], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[11].w, imgGreenHouse[11].h, VH);
    
    int slotCode;
    int slotNum;
    int totalNum = xGreenHouse_MaterialData_FP.totalNum;
//    int totalNum = 18;
    xGreenHouse_FP.xDragScrollGreenHouseS.totalNum = 1+(xGreenHouse_MaterialData_FP.totalNum-1)/8;
//    xGreenHouse_FP.xDragScrollGreenHouseS.totalNum = 1+(18-1)/8;
    xGreenHouse_FP.xDragScrollGreenHouseS.posGab = 1280;
    
    dragScrollPrc(&xGreenHouse_FP.xDragScrollGreenHouseS, 0, FALSE);
    
    gSetClip(true, px-430, 0, 860, lcdH);
    
    for(int page=-1;page<=1;page++)
    {
        if(xGreenHouse_FP.xDragScrollGreenHouseS.selectNum+page>=0&&xGreenHouse_FP.xDragScrollGreenHouseS.selectNum+page<xGreenHouse_FP.xDragScrollGreenHouseS.totalNum)
        {
            for(int i=0;i<8;i++)
            {
                if(((xGreenHouse_FP.xDragScrollGreenHouseS.selectNum+page)*8)+i>=totalNum)
                    break;
                
                pos = xGreenHouse_FP.xDragScrollGreenHouseS.pos+(xGreenHouse_FP.xDragScrollGreenHouseS.posGab*page);
                
                subTemp[XPOS] = px-415+pos+((i%8)*105)+45;
                subTemp[YPOS] = py-28;
                
                drawImage(&imgGreenHouse[13], subTemp[XPOS]-5, subTemp[YPOS]+35, 0, 0, imgGreenHouse[13].w, imgGreenHouse[13].h, VH);
                
                slotNum = ((xGreenHouse_FP.xDragScrollGreenHouseS.selectNum+page)*8)+i;
                slotCode = xGreenHouse_MaterialData_FP.xSlot[slotNum].code;
                
                xGreenHouse_FP.xTouchList[slotNum].wPos = 90;
                xGreenHouse_FP.xTouchList[slotNum].hPos = 100;
                xGreenHouse_FP.xTouchList[slotNum].xPos = subTemp[XPOS]-xGreenHouse_FP.xTouchList[slotNum].wPos/2;
                xGreenHouse_FP.xTouchList[slotNum].yPos = subTemp[YPOS]-xGreenHouse_FP.xTouchList[slotNum].hPos/2;
                
//                gSetColor(255, 0, 0);
//                setAlpha(100);
//                fillRect(xGreenHouse_FP.xTouchList[slotNum].xPos, xGreenHouse_FP.xTouchList[slotNum].yPos, xGreenHouse_FP.xTouchList[slotNum].wPos, xGreenHouse_FP.xTouchList[slotNum].hPos);
//                setAlpha(ALPHA_MAX);

                
                drawImage(&imgGreenHouse[12], subTemp[XPOS], subTemp[YPOS], ((imgGreenHouse[12].w/8)*slotCode), 0, imgGreenHouse[12].w/8, imgGreenHouse[12].h, VH);
            }
        }
    }
    gSetClip(false, 0, 0, lcdW, lcdH);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py+150;
    
    int maxSlot = 12;
    
    int Temp;
    int Temp2;
    int Temp3;
    
    xGreenHouse_FP.xDragScrollGreenHouseB.totalNum = 1+(maxSlot-1)/6;
    xGreenHouse_FP.xDragScrollGreenHouseB.posGab = 1280;
    
    dragScrollPrc(&xGreenHouse_FP.xDragScrollGreenHouseB, 0, FALSE);
    
    gSetClip(true, px-440, py, 880, lcdH);
    for(int page=-1;page<=1;page++)
    {
        if(xGreenHouse_FP.xDragScrollGreenHouseB.selectNum+page>=0&&xGreenHouse_FP.xDragScrollGreenHouseB.selectNum+page<xGreenHouse_FP.xDragScrollGreenHouseB.totalNum)
        {
            for(int i=0;i<6;i++)
            {
                if(((xGreenHouse_FP.xDragScrollGreenHouseB.selectNum+page)*6)+i>=maxSlot)
                    break;
                
                pos = xGreenHouse_FP.xDragScrollGreenHouseB.pos+(xGreenHouse_FP.xDragScrollGreenHouseB.posGab*page);
                
                subTemp[XPOS] = px-370+pos+((i%6)*147);
                subTemp[YPOS] = py+135;
                
                slotNum = ((xGreenHouse_FP.xDragScrollGreenHouseB.selectNum+page)*6)+i;
                slotCode = xGreenHouse_MaterialData_FP.xSlot[slotNum].code;
                
                switch (xGreenHouse_FP.xSlot[slotNum].state)
                {
                    case -1:
                        drawImage(&imgGreenHouse[15], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[15].w/3, 0, imgGreenHouse[15].w/3, imgGreenHouse[15].h, VH);
                        drawImage(&imgGreenHouse[16], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[16].w/2, 0, imgGreenHouse[16].w/2, imgGreenHouse[16].h, VH);
                        break;
                    case 0:
                        drawImage(&imgGreenHouse[15], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[15].w/3, 0, imgGreenHouse[15].w/3, imgGreenHouse[15].h, VH);
                        if(xGreenHouse_FP.isTouchOpen==false)
                        {
                            drawImage(&imgGreenHouse[17], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[17].w/2, imgGreenHouse[17].h, VH);
                        }
                        else
                        {
                            drawImage(&imgGreenHouse[17], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[17].w/2, 0, imgGreenHouse[17].w/2, imgGreenHouse[17].h, VH);
                        }
                        
                        xGreenHouse_FP.xTouchOpen.wPos = imgGreenHouse[17].w/2+10;
                        xGreenHouse_FP.xTouchOpen.hPos = imgGreenHouse[17].h+10;
                        xGreenHouse_FP.xTouchOpen.xPos = subTemp[XPOS]-xGreenHouse_FP.xTouchOpen.wPos/2;
                        xGreenHouse_FP.xTouchOpen.yPos = subTemp[YPOS]-xGreenHouse_FP.xTouchOpen.hPos/2;
                        break;
                        //1부터 업그레이드 버튼 / 즉시 완료 버튼
                    case 1:
                        drawImage(&imgGreenHouse[15], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[15].w/3, imgGreenHouse[15].h, VH);
                        drawImage(&imgGreenHouse[19], subTemp[XPOS], subTemp[YPOS]-8, 0, 0, imgGreenHouse[19].w, imgGreenHouse[19].h, VH);
                        drawImage(&imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade], subTemp[XPOS]+10, subTemp[YPOS]-15, 0, 0, imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade].w, imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade].h, VH);
                        if(xGreenHouse_FP.isTouchUpgrade[slotNum]==false)
                        {
                            drawImage(&imgGreenHouse[21], subTemp[XPOS]+30, subTemp[YPOS]+110, 0, 0, imgGreenHouse[21].w/2, imgGreenHouse[21].h, VH);
                        }
                        else
                        {
                            drawImage(&imgGreenHouse[21], subTemp[XPOS]+30, subTemp[YPOS]+110, imgGreenHouse[21].w/2, 0, imgGreenHouse[21].w/2, imgGreenHouse[21].h, VH);
                        }
                        
                        xGreenHouse_FP.xTouchUpgrade[slotNum].wPos = imgGreenHouse[21].w/2+10;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].hPos = imgGreenHouse[21].h+20;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].xPos = subTemp[XPOS]+30-xGreenHouse_FP.xTouchUpgrade[slotNum].wPos/2;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].yPos = subTemp[YPOS]+110-xGreenHouse_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchUpgrade[slotNum].xPos, xGreenHouse_FP.xTouchUpgrade[slotNum].yPos, xGreenHouse_FP.xTouchUpgrade[slotNum].wPos, xGreenHouse_FP.xTouchUpgrade[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        
                        if(xGreenHouse_FP.isTouchFast[slotNum]==false)
                        {
                            drawImage(&imgGreenHouse[20], subTemp[XPOS]-35, subTemp[YPOS]+110, 0, 0, imgGreenHouse[20].w/2, imgGreenHouse[20].h, VH);
                        }
                        else
                        {
                            drawImage(&imgGreenHouse[20], subTemp[XPOS]-35, subTemp[YPOS]+110, imgGreenHouse[20].w/2, 0, imgGreenHouse[20].w/2, imgGreenHouse[20].h, VH);
                        }
                        
                        xGreenHouse_FP.xTouchFast[slotNum].wPos = imgGreenHouse[20].w/2+10;
                        xGreenHouse_FP.xTouchFast[slotNum].hPos = imgGreenHouse[20].h+20;
                        xGreenHouse_FP.xTouchFast[slotNum].xPos = subTemp[XPOS]-40-xGreenHouse_FP.xTouchUpgrade[slotNum].wPos/2;
                        xGreenHouse_FP.xTouchFast[slotNum].yPos = subTemp[YPOS]+110-xGreenHouse_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchFast[slotNum].xPos, xGreenHouse_FP.xTouchFast[slotNum].yPos, xGreenHouse_FP.xTouchFast[slotNum].wPos, xGreenHouse_FP.xTouchFast[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        break;
                    case 2:
                        drawImage(&imgGreenHouse[15], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[15].w/3, imgGreenHouse[15].h, VH);
                        drawImage(&imgGreenHouse[19], subTemp[XPOS], subTemp[YPOS]-8, 0, 0, imgGreenHouse[19].w, imgGreenHouse[19].h, VH);
                        
//                        drawImage(&imgFlower[xGreenHouse_FP.xSlot[slotCode].MaterialCode][xGreenHouse_FP.imgNum[slotNum]], subTemp[XPOS], subTemp[YPOS]-20, 0, 0, imgFlower[xGreenHouse_FP.xSlot[slotCode].MaterialCode][xGreenHouse_FP.imgNum[slotNum]].w, imgFlower[xGreenHouse_FP.xSlot[slotCode].MaterialCode][xGreenHouse_FP.imgNum[slotNum]].h, VH);
                        
                        Temp = xGreenHouse_FP.xSlot[slotNum].endTime-xGreenHouse_MaterialData_FP.xSlot[slotNum].makeTime;
                        Temp2 = -(Temp-xCalendar.nowTime);
                        Temp3 = (Temp2*100)/xGreenHouse_MaterialData_FP.xSlot[slotNum].makeTime;
                        if(Temp3>0 && Temp3<33)
                        {
                            xGreenHouse_FP.imgNum[slotNum]=0;
                        }
                        else if(Temp3>32 && Temp3<66)
                        {
                            xGreenHouse_FP.imgNum[slotNum]=1;
                        }
                        else if(Temp3>65)
                        {
                            xGreenHouse_FP.imgNum[slotNum]=2;
                        }
                        log("KBY_NUM : %d", Temp3);
                        
                        drawImage(&imgFlower[xGreenHouse_FP.xSlot[slotCode].MaterialCode][xGreenHouse_FP.imgNum[slotNum]], subTemp[XPOS], subTemp[YPOS]-20, 0, 0, imgFlower[xGreenHouse_FP.xSlot[slotCode].MaterialCode][xGreenHouse_FP.imgNum[slotNum]].w, imgFlower[xGreenHouse_FP.xSlot[slotCode].MaterialCode][xGreenHouse_FP.imgNum[slotNum]].h, VH);
                        
                        drawImage(&imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade], subTemp[XPOS]+10, subTemp[YPOS]-15, 0, 0, imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade].w, imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade].h, VH);
                        
//                        for(int prcI=0;prcI<xGame.prcCnt;prcI++)
//                        {
//                            if(xGreenHouse_FP.AnyCnt[slotNum]++ > 15)
//                            {
//                                xGreenHouse_FP.AnyCnt[slotNum]=0;
//                                xGreenHouse_FP.imgNum[slotNum]++;
//                                if(xGreenHouse_FP.imgNum[slotNum]>3)
//                                {
//                                    xGreenHouse_FP.imgNum[slotNum]=0;
//                                }
//                            }
//                        }
                        
                                               
                        drawTimeSprintf(strTempS, xGreenHouse_FP.EndTimer[slotNum], 1);
                        setFontSizeORI(16);
                        gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-60, strTempS, VH, 101, 48, 150, 255, 255, 255);
                        setFontSize(11);
                        
                        if(xGreenHouse_FP.isTouchUpgrade[slotNum]==false)
                        {
                            drawImage(&imgGreenHouse[21], subTemp[XPOS]+30, subTemp[YPOS]+110, 0, 0, imgGreenHouse[21].w/2, imgGreenHouse[21].h, VH);
                        }
                        else
                        {
                            drawImage(&imgGreenHouse[21], subTemp[XPOS]+30, subTemp[YPOS]+110, imgGreenHouse[21].w/2, 0, imgGreenHouse[21].w/2, imgGreenHouse[21].h, VH);
                        }
                        
                        xGreenHouse_FP.xTouchUpgrade[slotNum].wPos = imgGreenHouse[21].w/2+10;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].hPos = imgGreenHouse[21].h+20;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].xPos = subTemp[XPOS]+30-xGreenHouse_FP.xTouchUpgrade[slotNum].wPos/2;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].yPos = subTemp[YPOS]+110-xGreenHouse_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchUpgrade[slotNum].xPos, xGreenHouse_FP.xTouchUpgrade[slotNum].yPos, xGreenHouse_FP.xTouchUpgrade[slotNum].wPos, xGreenHouse_FP.xTouchUpgrade[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        
                        if(xGreenHouse_FP.isTouchFast[slotNum]==false)
                        {
                            drawImage(&imgGreenHouse[20], subTemp[XPOS]-35, subTemp[YPOS]+110, 0, 0, imgGreenHouse[20].w/2, imgGreenHouse[20].h, VH);
                        }
                        else
                        {
                            drawImage(&imgGreenHouse[20], subTemp[XPOS]-35, subTemp[YPOS]+110, imgGreenHouse[20].w/2, 0, imgGreenHouse[20].w/2, imgGreenHouse[20].h, VH);
                        }
                        
                        xGreenHouse_FP.xTouchFast[slotNum].wPos = imgGreenHouse[20].w/2+10;
                        xGreenHouse_FP.xTouchFast[slotNum].hPos = imgGreenHouse[20].h+20;
                        xGreenHouse_FP.xTouchFast[slotNum].xPos = subTemp[XPOS]-40-xGreenHouse_FP.xTouchUpgrade[slotNum].wPos/2;
                        xGreenHouse_FP.xTouchFast[slotNum].yPos = subTemp[YPOS]+110-xGreenHouse_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchFast[slotNum].xPos, xGreenHouse_FP.xTouchFast[slotNum].yPos, xGreenHouse_FP.xTouchFast[slotNum].wPos, xGreenHouse_FP.xTouchFast[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        
                        break;
                    case 3:
                        drawImage(&imgGreenHouse[15], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[15].w/3, imgGreenHouse[15].h, VH);
                        drawImage(&imgGreenHouse[15], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[15].w/3*2, 0, imgGreenHouse[15].w/3, imgGreenHouse[15].h, VH);
                        
                        drawImage(&imgGreenHouse[19], subTemp[XPOS], subTemp[YPOS]-8, 0, 0, imgGreenHouse[19].w, imgGreenHouse[19].h, VH);
                        
                        drawImage(&imgFlower[xGreenHouse_FP.xSlot[slotNum].MaterialCode][3], subTemp[XPOS], subTemp[YPOS]-20, 0, 0, imgFlower[xGreenHouse_FP.xSlot[slotNum].MaterialCode][3].w, imgFlower[xGreenHouse_FP.xSlot[slotNum].MaterialCode][3].h, VH);
                        
                        drawImage(&imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade], subTemp[XPOS]+10, subTemp[YPOS]-15, 0, 0, imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade].w, imgSlotLv[xGreenHouse_FP.xSlot[slotNum].Upgrade].h, VH);
                        
                        drawImage(&imgGreenHouse[14], subTemp[XPOS]+3, subTemp[YPOS]+50, 0, 0, imgGreenHouse[14].w, imgGreenHouse[14].h, VH);
                        if(xGreenHouse_FP.isTouchUpgrade[slotNum]==false)
                        {
                            drawImage(&imgGreenHouse[21], subTemp[XPOS]+30, subTemp[YPOS]+110, 0, 0, imgGreenHouse[21].w/2, imgGreenHouse[21].h, VH);
                        }
                        else
                        {
                            drawImage(&imgGreenHouse[21], subTemp[XPOS]+30, subTemp[YPOS]+110, imgGreenHouse[21].w/2, 0, imgGreenHouse[21].w/2, imgGreenHouse[21].h, VH);
                        }
                        
                        xGreenHouse_FP.xTouchUpgrade[slotNum].wPos = imgGreenHouse[21].w/2+10;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].hPos = imgGreenHouse[21].h+20;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].xPos = subTemp[XPOS]+30-xGreenHouse_FP.xTouchUpgrade[slotNum].wPos/2;
                        xGreenHouse_FP.xTouchUpgrade[slotNum].yPos = subTemp[YPOS]+110-xGreenHouse_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchUpgrade[slotNum].xPos, xGreenHouse_FP.xTouchUpgrade[slotNum].yPos, xGreenHouse_FP.xTouchUpgrade[slotNum].wPos, xGreenHouse_FP.xTouchUpgrade[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        
                        if(xGreenHouse_FP.isTouchFast[slotNum]==false)
                        {
                            drawImage(&imgGreenHouse[20], subTemp[XPOS]-35, subTemp[YPOS]+110, 0, 0, imgGreenHouse[20].w/2, imgGreenHouse[20].h, VH);
                        }
                        else
                        {
                            drawImage(&imgGreenHouse[20], subTemp[XPOS]-35, subTemp[YPOS]+110, imgGreenHouse[20].w/2, 0, imgGreenHouse[20].w/2, imgGreenHouse[20].h, VH);
                        }
                        
                        xGreenHouse_FP.xTouchFast[slotNum].wPos = imgGreenHouse[20].w/2+10;
                        xGreenHouse_FP.xTouchFast[slotNum].hPos = imgGreenHouse[20].h+20;
                        xGreenHouse_FP.xTouchFast[slotNum].xPos = subTemp[XPOS]-40-xGreenHouse_FP.xTouchUpgrade[slotNum].wPos/2;
                        xGreenHouse_FP.xTouchFast[slotNum].yPos = subTemp[YPOS]+110-xGreenHouse_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchFast[slotNum].xPos, xGreenHouse_FP.xTouchFast[slotNum].yPos, xGreenHouse_FP.xTouchFast[slotNum].wPos, xGreenHouse_FP.xTouchFast[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        break;
                    default:
                        break;
                }
                
                xGreenHouse_FP.xTouchSlot[slotNum].wPos = imgGreenHouse[15].w/3+10;
                xGreenHouse_FP.xTouchSlot[slotNum].hPos = imgGreenHouse[15].h+10;
                xGreenHouse_FP.xTouchSlot[slotNum].xPos = subTemp[XPOS] - xGreenHouse_FP.xTouchSlot[slotNum].wPos/2;
                xGreenHouse_FP.xTouchSlot[slotNum].yPos = subTemp[YPOS] - xGreenHouse_FP.xTouchSlot[slotNum].hPos/2;
                
                
                
//                gSetColor(255, 0, 0);
//                setAlpha(100);
//                fillRect(xGreenHouse_FP.xTouchSlot[slotNum].xPos, xGreenHouse_FP.xTouchSlot[slotNum].yPos, xGreenHouse_FP.xTouchSlot[slotNum].wPos, xGreenHouse_FP.xTouchSlot[slotNum].hPos);
//                setAlpha(ALPHA_MAX);
            }
        }
    }
    gSetClip(false, 0, 0, lcdW, lcdH);

    //꽃부분 화살표
    subTemp[XPOS] = px-448;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgGreenHouse[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[3].w, imgGreenHouse[3].h, VH);
    
    if(xGreenHouse_FP.xDragScrollGreenHouseS.selectNum<=0)
    {
        drawImage(&imgGreenHouse[6], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[6].w/6*2, 0, imgGreenHouse[6].w/6, imgGreenHouse[6].h, VH);
    }
    else
    {
        if(xGreenHouse_FP.isTouchLeftBtn==false)
        {
            drawImage(&imgGreenHouse[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[6].w/6, imgGreenHouse[6].h, VH);
        }
        
        else
        {
            drawImage(&imgGreenHouse[6], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[6].w/6*4, 0, imgGreenHouse[6].w/6, imgGreenHouse[6].h, VH);
        }
    }
    xGreenHouse_FP.xTouchLeftBtn.wPos = imgGreenHouse[3].w+20;
    xGreenHouse_FP.xTouchLeftBtn.hPos = imgGreenHouse[3].h;
    xGreenHouse_FP.xTouchLeftBtn.xPos = subTemp[XPOS] - xGreenHouse_FP.xTouchLeftBtn.wPos/2;
    xGreenHouse_FP.xTouchLeftBtn.yPos = subTemp[YPOS] - xGreenHouse_FP.xTouchLeftBtn.hPos/2;
    
    subTemp[XPOS] = px+450;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgGreenHouse[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[5].w, imgGreenHouse[5].h, VH);
    
    if(xGreenHouse_FP.xDragScrollGreenHouseS.selectNum>=xGreenHouse_FP.xDragScrollGreenHouseS.totalNum-1)
    {
        drawImage(&imgGreenHouse[6], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[6].w/6*3, 0, imgGreenHouse[6].w/6, imgGreenHouse[6].h, VH);
    }
    else
    {
        if(xGreenHouse_FP.isTouchRightBtn==false)
        {
            drawImage(&imgGreenHouse[6], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[6].w/6, 0, imgGreenHouse[6].w/6, imgGreenHouse[6].h, VH);
        }
        else
        {
            drawImage(&imgGreenHouse[6], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[6].w/6*5, 0, imgGreenHouse[6].w/6, imgGreenHouse[6].h, VH);
        }
    }
    
    xGreenHouse_FP.xTouchRightBtn.wPos = imgGreenHouse[5].w+20;
    xGreenHouse_FP.xTouchRightBtn.hPos = imgGreenHouse[5].h;
    xGreenHouse_FP.xTouchRightBtn.xPos = subTemp[XPOS] - xGreenHouse_FP.xTouchRightBtn.wPos/2;
    xGreenHouse_FP.xTouchRightBtn.yPos = subTemp[YPOS] - xGreenHouse_FP.xTouchRightBtn.hPos/2;
    
    //슬롯 화살표
    subTemp[XPOS] = px-458;
    subTemp[YPOS] = py+135;
    
    if(xGreenHouse_FP.xDragScrollGreenHouseB.selectNum<=0)
    {
        drawImage(&imgGreenHouse[7], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[7].w/6*2, 0, imgGreenHouse[7].w/6, imgGreenHouse[7].h, VH);
    }
    else
    {
        if(xGreenHouse_FP.isTouchLeftArrow==true)
        {
            drawImage(&imgGreenHouse[7], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[7].w/6*4, 0, imgGreenHouse[7].w/6, imgGreenHouse[7].h, VH);
        }
        else
        {
            drawImage(&imgGreenHouse[7], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[7].w/6, imgGreenHouse[7].h, VH);
        }
    }
    
    xGreenHouse_FP.xTouchLeftArrow.wPos = 80;
    xGreenHouse_FP.xTouchLeftArrow.hPos = 230;
    xGreenHouse_FP.xTouchLeftArrow.xPos = subTemp[XPOS] - xProduction_FP.xTouchLeftArrow.wPos/2;
    xGreenHouse_FP.xTouchLeftArrow.yPos = subTemp[YPOS] - xProduction_FP.xTouchLeftArrow.hPos/2;
    
    subTemp[XPOS] = px+460;
    subTemp[YPOS] = py+135;
    
    if(xGreenHouse_FP.xDragScrollGreenHouseB.selectNum>=xGreenHouse_FP.xDragScrollGreenHouseB.totalNum-1)
    {
        drawImage(&imgGreenHouse[7], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[7].w/6*3, 0, imgGreenHouse[7].w/6, imgGreenHouse[7].h, VH);
    }
    else
    {
        if(xGreenHouse_FP.isTouchRightArrow==false)
        {
            drawImage(&imgGreenHouse[7], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[7].w/6, 0, imgGreenHouse[7].w/6, imgGreenHouse[7].h, VH);
        }
        else
        {
            drawImage(&imgGreenHouse[7], subTemp[XPOS], subTemp[YPOS], imgGreenHouse[7].w/6*5, 0, imgGreenHouse[7].w/6, imgGreenHouse[7].h, VH);
        }
    }

    xGreenHouse_FP.xTouchRightArrow.wPos = 80;
    xGreenHouse_FP.xTouchRightArrow.hPos = 230;
    xGreenHouse_FP.xTouchRightArrow.xPos = subTemp[XPOS] - xProduction_FP.xTouchRightArrow.wPos/2;
    xGreenHouse_FP.xTouchRightArrow.yPos = subTemp[YPOS] - xProduction_FP.xTouchRightArrow.hPos/2;
    
    if(xGreenHouse_FP.isTouchProduct==true)
    {
        slotCode = xGreenHouse_MaterialData_FP.xSlot[xGreenHouse_FP.selectProduct].code;
        
        subTemp[XPOS] = xTouch.xPos;
        subTemp[YPOS] = xTouch.yPos;
        
        drawImage(&imgGreenHouse[12], subTemp[XPOS], subTemp[YPOS], ((imgGreenHouse[12].w/8)*slotCode), 0, imgGreenHouse[12].w/8, imgGreenHouse[12].h, VH);

        
        if(xTouch.xPos+imgGreenHouse[22].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgGreenHouse[22].w/2-40;
            subTemp[YPOS] = xTouch.yPos;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgGreenHouse[22].w/2+40;
            subTemp[YPOS] = xTouch.yPos;
        }
        
        drawImage(&imgGreenHouse[22], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[22].w, imgGreenHouse[22].h, VH);
        
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////온실 입력 이벤트 처리 KBY
void keyGreenHouse_FP(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        for (int k=0; k<xGreenHouse_FP.totalSlot; k++)
        {
            if(touchCheck(&xGreenHouse_FP.xTouchUpgrade[k])==TRUE && xGreenHouse_FP.isTouchProduct==false && touchType == USER_POINT_PRESS_EVENT)
            {
                xGreenHouse_FP.isTouchUpgrade[k] = true;
                break;
            }
            
            else if(touchCheck(&xGreenHouse_FP.xTouchFast[k])==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xSlot[k].state==2 && touchType == USER_POINT_PRESS_EVENT)
            {
                xGreenHouse_FP.isTouchFast[k] = true;
                break;
            }
            
            else if(touchCheck(&xGreenHouse_FP.xTouchSlot[k])==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xSlot[k].state==2 && touchType == USER_POINT_PRESS_EVENT)
            {
                xGreenHouse_FP.selectSlot = k;
                xWorldMap.isKeyReturn = TRUE;
                xGreenHouse_FP.isTouchYes = false;
                xGreenHouse_FP.isTouchNo = false;
                xGreenHouse_FP.state = GREENHOUSE_STATE_CANCLEPOPUP;
                break;
            }
            
            else if(touchCheck(&xGreenHouse_FP.xTouchSlot[k])==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xSlot[k].state==3 && touchType == USER_POINT_PRESS_EVENT)
            {
                xGreenHouse_FP.selectSlot=k;
                xEventQueueNet.action[xEventQueueNet.totalNum]=3;
                xEventQueueNet.slotNum[xEventQueueNet.totalNum]=xGreenHouse_FP.selectSlot;
                xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum]=-1;
                xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum]=0;
                xEventQueueNet.time[xEventQueueNet.totalNum]=0;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GREENHOUSESLOTINFOUPDATE, TRUE);
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GREENHOUSEINFOUPDATE, TRUE);
                break;
            }
        }
        
        for(int k=0;k<xGreenHouse_MaterialData_FP.totalNum;k++)
        {
            if(touchCheck(&xGreenHouse_FP.xTouchList[k])==TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                xGreenHouse_FP.isTouchProduct = true;
                xGreenHouse_FP.selectProduct = k;
                break;
            }
        }
        if(touchCheck(&xTouchClr)==TRUE && xGreenHouse_FP.isTouchProduct==false && touchType == USER_POINT_PRESS_EVENT)
        {
            xGreenHouse_FP.isTouchClr=true;
        }
        else if(touchCheck(&xGreenHouse_FP.xTouchOpen)==TRUE && xGreenHouse_FP.isTouchProduct==false && touchType == USER_POINT_PRESS_EVENT)
        {
            xGreenHouse_FP.isTouchOpen=true;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchLeftBtn)==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseS.selectNum>0)
        {
            xGreenHouse_FP.isTouchLeftBtn=true;
            xGreenHouse_FP.isTouchRightBtn=false;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchRightBtn)== TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseS.selectNum<xGreenHouse_FP.xDragScrollGreenHouseS.totalNum-1)
        {
            xGreenHouse_FP.isTouchLeftBtn=false;
            xGreenHouse_FP.isTouchRightBtn=true;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchLeftArrow)==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseB.selectNum>0)
        {
            xGreenHouse_FP.isTouchLeftArrow=true;
            xGreenHouse_FP.isTouchRightArrow=false;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchRightArrow)==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseB.selectNum<xGreenHouse_FP.xDragScrollGreenHouseB.totalNum-1)
        {
            xGreenHouse_FP.isTouchLeftArrow=false;
            xGreenHouse_FP.isTouchRightArrow=true;
        }
    }
    
    else if(type == MH_KEY_RELEASEEVENT)
    {
        bool isRelease = false;
        
        for (int k=0; k<xGreenHouse_FP.totalSlot; k++)
        {
            if(touchCheck(&xGreenHouse_FP.xTouchUpgrade[k])==TRUE && xGreenHouse_FP.isTouchProduct==false && touchType == USER_POINT_RELEASE_EVENT)
            {
                xGreenHouse_FP.isTouchUpgrade[k] = false;
                xGreenHouse_FP.selectSlot = k;
                setPopup(POPUP_GREENHOUSESLOTUPGRADE, playState, playState, 0, DONT);
                break;
            }
            
            else if(touchCheck(&xGreenHouse_FP.xTouchFast[k])==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xSlot[k].state==2 && touchType == USER_POINT_RELEASE_EVENT)
            {
                xGreenHouse_FP.isTouchFast[k] = false;
                xGreenHouse_FP.selectSlot = k;
                setPopup(POPUP_GREENHOUSESLOTFASTOK, playState, playState, 0, DONT);
                break;
            }

        }
        
        for(int k=0;k<12;k++)
        {
            if(touchCheck(&xGreenHouse_FP.xTouchSlot[k])==TRUE && xGreenHouse_FP.isTouchProduct==true && touchType==USER_POINT_RELEASE_EVENT)
            {
                if(xGreenHouse_FP.xSlot[k].state==1)
                {
                    isRelease = true;
                    xGreenHouse_FP.selectSlot = k;
                    break;
                }
            }
        }
        
        if(isRelease==true)
        {
            xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].MaterialCode = xGreenHouse_MaterialData_FP.xSlot[xGreenHouse_FP.selectProduct].code;
            xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].endTime = xGreenHouse_MaterialData_FP.xSlot[xGreenHouse_FP.selectProduct].makeTime+xCalendar.nowTime;
            xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].itemCnt = xGreenHouse_MaterialData_FP.xSlot[xGreenHouse_FP.selectProduct].cnt;
            
            xEventQueueNet.action[xEventQueueNet.totalNum]=0;
            xEventQueueNet.slotNum[xEventQueueNet.totalNum]= xGreenHouse_FP.selectSlot;
            xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum]= xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].MaterialCode;
            xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum]= xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].itemCnt;
            xEventQueueNet.time[xEventQueueNet.totalNum]=xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].endTime;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GREENHOUSESLOTINFOUPDATE, TRUE);
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GREENHOUSEINFOUPDATE, TRUE);
            xGreenHouse_FP.imgNum[xGreenHouse_FP.selectSlot]=-1;
            xGreenHouse_FP.selectProduct=DONT;
            xGreenHouse_FP.isTouchProduct=false;
            
        }
        
        
        else if(touchCheck(&xTouchClr)==TRUE && xGreenHouse_FP.isTouchProduct==false && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.isTouchClr=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            greenHouseFreeLoad_FP(false);
            xWorldMap.state=WORLDMAP_STATE_PLAY;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchOpen)==TRUE && xGreenHouse_FP.isTouchProduct==false && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.isTouchOpen=false;
            setPopup(POPUP_GREENHOUSESLOTOPEN, playState, playState, 0, DONT);
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchLeftBtn)==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseS.selectNum>0 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.xDragScrollGreenHouseS.speed = 640;
            xGreenHouse_FP.isTouchLeftBtn=false;
            xGreenHouse_FP.isTouchRightBtn=false;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchRightBtn)==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseS.selectNum<xGreenHouse_FP.xDragScrollGreenHouseS.totalNum-1 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.xDragScrollGreenHouseS.speed = -640;
            xGreenHouse_FP.isTouchLeftBtn=false;
            xGreenHouse_FP.isTouchRightBtn=false;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchLeftArrow)==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseB.selectNum>0 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.xDragScrollGreenHouseB.speed=640;
            xGreenHouse_FP.isTouchLeftArrow=false;
            xGreenHouse_FP.isTouchRightArrow=false;
        }
        
        else if(touchCheck(&xGreenHouse_FP.xTouchRightArrow)==TRUE && xGreenHouse_FP.isTouchProduct==false && xGreenHouse_FP.xDragScrollGreenHouseB.selectNum<xGreenHouse_FP.xDragScrollGreenHouseB.totalNum-1 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.xDragScrollGreenHouseB.speed=-640;
            xGreenHouse_FP.isTouchLeftArrow=false;
            xGreenHouse_FP.isTouchRightArrow=false;
        }
        
        else
        {
            xGreenHouse_FP.selectProduct=DONT;
            xGreenHouse_FP.isTouchProduct=false;
        }


    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////온실 제작 취소 팝업창 Draw KBY
void drawGreenHouseSlotCanclePopup_FP()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    int slotCode = xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].MaterialCode;
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py;
    
    drawImage(&imgGreenHouse[23], subTemp[XPOS], subTemp[YPOS], 0, 0, imgGreenHouse[23].w, imgGreenHouse[23].h, VH);
    
    if(xGreenHouse_FP.isTouchPopupClr==false)
    {
        drawImage(&imgGreenHouse[1], subTemp[XPOS]+243, subTemp[YPOS]-140, 0, 0, imgGreenHouse[1].w/2, imgGreenHouse[1].h, VH);
    }
    else
    {
        drawImage(&imgGreenHouse[1], subTemp[XPOS]+243, subTemp[YPOS]-140, imgGreenHouse[1].w/2, 0, imgGreenHouse[1].w/2, imgGreenHouse[1].h, VH);
    }

    xTouchClr.wPos = imgGreenHouse[1].w/2;
    xTouchClr.hPos = imgGreenHouse[1].h;
    xTouchClr.xPos = subTemp[XPOS]+243-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-140-xTouchClr.hPos/2;
    
    drawImage(&imgGreenHouse[15], subTemp[XPOS]-160, subTemp[YPOS]-30, 0, 0, imgGreenHouse[15].w/3, imgGreenHouse[15].h, VH);
    drawImage(&imgGreenHouse[19], subTemp[XPOS]-160, subTemp[YPOS]-38, 0, 0, imgGreenHouse[19].w, imgGreenHouse[19].h, VH);
    drawImage(&imgSlotLv[xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].Upgrade], subTemp[XPOS]-150, subTemp[YPOS]-45, 0, 0, imgSlotLv[xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].Upgrade].w, imgSlotLv[xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].Upgrade].h, VH);
    
    drawImage(&imgFlower[xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].MaterialCode][xGreenHouse_FP.imgNum[xGreenHouse_FP.selectSlot]], subTemp[XPOS]-160, subTemp[YPOS]-50, 0, 0, imgFlower[xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].MaterialCode][xGreenHouse_FP.imgNum[xGreenHouse_FP.selectSlot]].w, imgFlower[xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].MaterialCode][xGreenHouse_FP.imgNum[xGreenHouse_FP.selectSlot]].h, VH);
    
    
    drawTimeSprintf(strTempS, xGreenHouse_FP.EndTimer[xGreenHouse_FP.selectSlot], 1);
    setFontSizeORI(16);
    gDrawStringBold(subTemp[XPOS]-160, subTemp[YPOS]-90, strTempS, VH, 101, 48, 150, 255, 255, 255);
    setFontSize(11);
    
    sprintf(strTempS, "%s", xGreenHouse_MaterialData_FP.xSlot[xGreenHouse_FP.xSlot[xGreenHouse_FP.selectSlot].MaterialCode].strName);
    gSetColor(101, 48, 150);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]+50, subTemp[YPOS]-80, strTempS, VH);
    setFontSize(11);

    sprintf(strTempS, "제작을 취소하시겠습니까?");
    gSetColor(101, 48, 150);
    setFontSizeORI(16);
    gDrawString(subTemp[XPOS]+70, subTemp[YPOS]-10, strTempS, VH);
    setFontSize(11);
    
    sprintf(strTempS, "제작을 취소하면 사용된 재료는 사라져요!");
    gSetColor(101, 48, 150);
    setFontSizeORI(14);
    gDrawString(subTemp[XPOS]+70, subTemp[YPOS]+10, strTempS, VH);
    setFontSize(11);

    if(xGreenHouse_FP.isTouchYes==false)
    {
        drawImage(&imgGreenHouse[24], subTemp[XPOS]-85, subTemp[YPOS]+100, 0, imgGreenHouse[24].h/2, imgGreenHouse[24].w/2, imgGreenHouse[24].h/2, VH);
    }
    else
    {
        drawImage(&imgGreenHouse[24], subTemp[XPOS]-85, subTemp[YPOS]+100, imgGreenHouse[24].w/2, imgGreenHouse[24].h/2, imgGreenHouse[24].w/2, imgGreenHouse[24].h/2, VH);
    }
    sprintf(strTempS, "네");
    gSetColor(36, 50, 128);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]-85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    
    xGreenHouse_FP.xTouchYes.wPos = imgGreenHouse[24].w/2;
    xGreenHouse_FP.xTouchYes.hPos = imgGreenHouse[24].h/2;
    xGreenHouse_FP.xTouchYes.xPos = subTemp[XPOS]-85-xGreenHouse_FP.xTouchYes.wPos/2;
    xGreenHouse_FP.xTouchYes.yPos = subTemp[YPOS]+100-xGreenHouse_FP.xTouchYes.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xGreenHouse_FP.xTouchYes.xPos, xGreenHouse_FP.xTouchYes.yPos, xGreenHouse_FP.xTouchYes.wPos, xGreenHouse_FP.xTouchYes.hPos);
//    setAlpha(ALPHA_MAX);
    
    
    
    
    if(xGreenHouse_FP.isTouchNo==false)
    {
        drawImage(&imgGreenHouse[24], subTemp[XPOS]+85, subTemp[YPOS]+100, 0, 0, imgGreenHouse[24].w/2, imgGreenHouse[24].h/2, VH);
    }
    else
    {
        drawImage(&imgGreenHouse[24], subTemp[XPOS]+85, subTemp[YPOS]+100, imgGreenHouse[24].w/2, 0, imgGreenHouse[24].w/2, imgGreenHouse[24].h/2, VH);
    }
    sprintf(strTempS, "아니오");
    gSetColor(106, 21, 97);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]+85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    
    xGreenHouse_FP.xTouchNo.wPos = imgGreenHouse[24].w/2;
    xGreenHouse_FP.xTouchNo.hPos = imgGreenHouse[24].h/2;
    xGreenHouse_FP.xTouchNo.xPos = subTemp[XPOS]+85-xGreenHouse_FP.xTouchNo.wPos/2;
    xGreenHouse_FP.xTouchNo.yPos = subTemp[YPOS]+100-xGreenHouse_FP.xTouchNo.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xGreenHouse_FP.xTouchNo.xPos, xGreenHouse_FP.xTouchNo.yPos, xGreenHouse_FP.xTouchNo.wPos, xGreenHouse_FP.xTouchNo.hPos);
//    setAlpha(ALPHA_MAX);

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////온실 제작취소 팝업창 입력 이벤트 처리 KBY

void keyGreenHouseSlotCanclePopup_FP(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xGreenHouse_FP.isTouchPopupClr = true;
        }
        else if(touchCheck(&xGreenHouse_FP.xTouchNo)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xGreenHouse_FP.isTouchNo=true;
            xGreenHouse_FP.isTouchYes=false;
        }
        else if(touchCheck(&xGreenHouse_FP.xTouchYes)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xGreenHouse_FP.isTouchNo=false;
            xGreenHouse_FP.isTouchYes=true;
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.isTouchPopupClr = false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xGreenHouse_FP.state = GREENHOUSE_STATE_MAIN;
        }
        else if(touchCheck(&xGreenHouse_FP.xTouchNo)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.isTouchNo=false;
            xGreenHouse_FP.isTouchYes=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xGreenHouse_FP.state = GREENHOUSE_STATE_MAIN;
        }
        else if(touchCheck(&xGreenHouse_FP.xTouchYes)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xGreenHouse_FP.isTouchNo=false;
            xGreenHouse_FP.isTouchYes=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xEventQueueNet.action[xEventQueueNet.totalNum]=1;
            xEventQueueNet.slotNum[xEventQueueNet.totalNum]=xGreenHouse_FP.selectSlot;
            xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum]=-1;
            xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum]=0;
            xEventQueueNet.time[xEventQueueNet.totalNum]=0;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GREENHOUSESLOTINFOUPDATE, TRUE);
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GREENHOUSEINFOUPDATE, TRUE);
            xGreenHouse_FP.state=GREENHOUSE_STATE_MAIN;
        }
        else
        {
            xGreenHouse_FP.isTouchPopupClr = false;
            xGreenHouse_FP.isTouchNo=false;
            xGreenHouse_FP.isTouchYes=false;
        }

    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////물레 KBY
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////물레 이미지 로드 및 메모리 해제 KBY
void spinningWheelFreeLoad_FP(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("productionbase.png", &imgSpinningWheel[0]);
        loadImg("productionexiticon.png", &imgSpinningWheel[1]);
        loadImg("wheel_title.png", &imgSpinningWheel[2]);
        loadImg("production_left.png",&imgSpinningWheel[3]);
        loadImg("production_main.png",&imgSpinningWheel[4]);
        loadImg("production_right.png",&imgSpinningWheel[5]);
        loadImg("production_arrow.png",&imgSpinningWheel[6]);
        loadImg("production_slot_arrow.png", &imgSpinningWheel[7]);
        loadImg("production_slot_open.png", &imgSpinningWheel[8]);
        loadImg("production_close.png", &imgSpinningWheel[9]);
        loadImg("production_text_complete.png", &imgSpinningWheel[10]);
        loadImg("wheel_name.png", &imgSpinningWheel[11]);
        loadImg("wheel_slot.png", &imgSpinningWheel[12]);
        loadImg("production_shadow.png", &imgSpinningWheel[13]);
        loadImg("production_text_complete.png", &imgSpinningWheel[14]);
        loadImg("wheel_string.png", &imgSpinningWheel[15]);
        loadImg("wheel_slot_string_0.png", &imgSpinningWheel[16]);
        loadImg("wheel_slot_string_1.png", &imgSpinningWheel[17]);
        loadImg("wheel_slot_string_2.png", &imgSpinningWheel[18]);
        loadImg("greenhouse_btn_fast.png", &imgSpinningWheel[19]);
        loadImg("greenhouse_btn_upgrade.png", &imgSpinningWheel[20]);
        loadImg("greenhouse_popup_base.png", & imgSpinningWheel[21]);
        loadImg("popup_base.png", &imgSpinningWheel[22]);
        loadImg("default_btn_yesno.png", &imgSpinningWheel[23]);
        loadImg("wheel_complete.png", &imgSpinningWheel[24]);
        loadImg("wheel_star.png", &imgSpinningWheel[25]);
    }
    else
    {
        freeImg(&imgSpinningWheel[0]);
        freeImg(&imgSpinningWheel[1]);
        freeImg(&imgSpinningWheel[2]);
        freeImg(&imgSpinningWheel[3]);
        freeImg(&imgSpinningWheel[4]);
        freeImg(&imgSpinningWheel[5]);
        freeImg(&imgSpinningWheel[6]);
        freeImg(&imgSpinningWheel[7]);
        freeImg(&imgSpinningWheel[8]);
        freeImg(&imgSpinningWheel[9]);
        freeImg(&imgSpinningWheel[10]);
        freeImg(&imgSpinningWheel[11]);
        freeImg(&imgSpinningWheel[12]);
        freeImg(&imgSpinningWheel[13]);
        freeImg(&imgSpinningWheel[14]);
        freeImg(&imgSpinningWheel[15]);
        freeImg(&imgSpinningWheel[16]);
        freeImg(&imgSpinningWheel[17]);
        freeImg(&imgSpinningWheel[18]);
        freeImg(&imgSpinningWheel[19]);
        freeImg(&imgSpinningWheel[20]);
        freeImg(&imgSpinningWheel[21]);
        freeImg(&imgSpinningWheel[22]);
        freeImg(&imgSpinningWheel[23]);
        freeImg(&imgSpinningWheel[24]);
        freeImg(&imgSpinningWheel[25]);
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////물레 init KBY
void initSpinningWheel_FP()
{
    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SPINNINGWHEELINFOUPDATE, TRUE);
    xSpinning_FP.state = SPINNINGWHEEL_STATE_MAIN;
    xSpinning_FP.selectSlot = -1;
    xSpinning_FP.selectProduct = -1;
   
    
    xSpinning_FP.isTouchClr=false;
    xSpinning_FP.isTouchLeftBtn=false;
    xSpinning_FP.isTouchRightBtn=false;
    xSpinning_FP.isTouchLeftArrow=false;
    xSpinning_FP.isTouchRightArrow=false;
    xSpinning_FP.isTouchMaterial=false;
    xSpinning_FP.isTouchProduct=false;
    xSpinning_FP.isTouchPopupClr=false;
    xSpinning_FP.isTouchYes=false;
    xSpinning_FP.isTouchNo=false;
    xSpinning_FP.isTouchOpen=false;
    for(int k=0;k<MATERIALSLOTMAX;k++)
    {
        xSpinning_FP.isTouchUpgrade[k] = false;
        xSpinning_FP.isTouchFast[k] = false;
        xSpinning_FP.AnyCnt[k] = 0;
        xSpinning_FP.imgNum[k] = 16;
        xSpinning_FP.StarAnyCnt[k] = 0;
    }

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////물레 draw KBY
void drawSpinningWheel_FP()
{
    int px = cx;
    int py = cy;
    
    int pos;
    
    drawBgFillRect();
    
    drawImage(&imgSpinningWheel[0], px, py+50, 0, 0, imgSpinningWheel[0].w, imgSpinningWheel[0].h, VH);
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-180;
    
    if(xSpinning_FP.isTouchClr==false)
    {
        drawImage(&imgSpinningWheel[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[1].w/2, imgSpinningWheel[1].h, VH);
    }
    else
    {
        drawImage(&imgSpinningWheel[1], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[1].w/2, 0, imgSpinningWheel[1].w/2, imgSpinningWheel[1].h, VH);
    }
    xTouchClr.wPos = imgSpinningWheel[1].w;
    xTouchClr.hPos = imgSpinningWheel[1].h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    
    subTemp[XPOS] = px-456;
    subTemp[YPOS] = py-220;
    
    drawImage(&imgSpinningWheel[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[2].w, imgSpinningWheel[2].h, VH);
    
    subTemp[XPOS] = px+2;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgSpinningWheel[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[4].w, imgSpinningWheel[4].h, VH);
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py-90;
    
    drawImage(&imgSpinningWheel[11], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[11].w, imgSpinningWheel[11].h, VH);
    
    
    int slotCode;
    int slotNum;
    //데이터 없어서 임시....
    int totalNum = xGreenHouse_MaterialData_FP.totalNum;
    
    xSpinning_FP.xDragScrollSpinningS.totalNum = 1+(xGreenHouse_MaterialData_FP.totalNum-1)/8;
    xSpinning_FP.xDragScrollSpinningS.posGab = 1280;
    
    dragScrollPrc(&xSpinning_FP.xDragScrollSpinningS, 0, FALSE);
    
    gSetClip(true, px-430, 0, 860, lcdH);
    
    for(int page=-1;page<=1;page++)
    {
        if(xSpinning_FP.xDragScrollSpinningS.selectNum+page>=0&&xSpinning_FP.xDragScrollSpinningS.selectNum+page<xSpinning_FP.xDragScrollSpinningS.selectNum+page<xSpinning_FP.xDragScrollSpinningS.totalNum)
        {
            for(int i=0;i<8;i++)
            {
                if(((xSpinning_FP.xDragScrollSpinningS.selectNum+page)*8)+i>=totalNum)
                    break;
                
                pos = xSpinning_FP.xDragScrollSpinningS.pos+(xSpinning_FP.xDragScrollSpinningS.posGab*page);
                
                subTemp[XPOS] = px-420+pos+((i%8)*105)+45;
                subTemp[YPOS] = py-20;
                
                drawImage(&imgSpinningWheel[13], subTemp[XPOS], subTemp[YPOS]+25, 0, 0, imgSpinningWheel[13].w, imgSpinningWheel[13].h, VH);
                
                slotNum = ((xSpinning_FP.xDragScrollSpinningS.selectNum+page)*8)+i;
                //임시
                slotCode = xGreenHouse_MaterialData_FP.xSlot[slotNum].code;
                
                xSpinning_FP.xTouchList[slotNum].wPos = 90;
                xSpinning_FP.xTouchList[slotNum].hPos = 100;
                xSpinning_FP.xTouchList[slotNum].xPos = subTemp[XPOS]-xSpinning_FP.xTouchList[slotNum].wPos/2;
                xSpinning_FP.xTouchList[slotNum].yPos = subTemp[YPOS]-xSpinning_FP.xTouchList[slotNum].hPos/2;
                
                drawImage(&imgSpinningWheel[15], subTemp[XPOS], subTemp[YPOS], ((imgSpinningWheel[15].w/10)*slotCode), 0, imgSpinningWheel[15].w/10, imgSpinningWheel[15].h, VH);
            }
        }
    }
    gSetClip(false, 0, 0, lcdW, lcdH);
    
    int maxSlot = 12;
    
    xSpinning_FP.xDragScrollSpinningB.totalNum = 1+(maxSlot-1)/6;
    xSpinning_FP.xDragScrollSpinningB.posGab = 1280;
    
    dragScrollPrc(&xSpinning_FP.xDragScrollSpinningB, 0, FALSE);
    
    gSetClip(true, px-440, py, 880, lcdH);
    for(int page=-1;page<=1;page++)
    {
        if(xSpinning_FP.xDragScrollSpinningB.selectNum+page>=0&&xSpinning_FP.xDragScrollSpinningB.selectNum+page<xSpinning_FP.xDragScrollSpinningB.totalNum)
        {
            for(int i=0;i<6;i++)
            {
                if(((xSpinning_FP.xDragScrollSpinningB.selectNum+page)*6)+i>=maxSlot)
                    break;
                
                pos = xSpinning_FP.xDragScrollSpinningB.pos+(xSpinning_FP.xDragScrollSpinningB.posGab*page);
                subTemp[XPOS] = px-370+pos+((i%6)*147);
                subTemp[YPOS] = py+135;
                
                slotNum = ((xSpinning_FP.xDragScrollSpinningB.selectNum+page)*6)+i;
                //임시
                slotCode = xGreenHouse_MaterialData_FP.xSlot[xSpinning_FP.xSlot[slotNum].MaterialCode].code;
                
                switch(xSpinning_FP.xSlot[slotNum].state)
                {
                    case -1:
                        drawImage(&imgSpinningWheel[12], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[12].w/2, 0, imgSpinningWheel[12].w/2, imgSpinningWheel[12].h, VH);
                        drawImage(&imgSpinningWheel[9], subTemp[XPOS]+20, subTemp[YPOS]-20, imgSpinningWheel[9].w/2, 0, imgSpinningWheel[9].w/2, imgSpinningWheel[9].h, VH);
                        break;
                    case 0:
                        drawImage(&imgSpinningWheel[12], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[12].w/2, 0, imgSpinningWheel[12].w/2, imgSpinningWheel[12].h, VH);
                        if(xSpinning_FP.isTouchOpen==false)
                        {
                            drawImage(&imgSpinningWheel[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[8].w/2, imgSpinningWheel[8].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[8], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[8].w/2, 0, imgSpinningWheel[8].w/2, imgSpinningWheel[8].h, VH);
                        }
                        
                        xSpinning_FP.xTouchOpen.wPos = imgSpinningWheel[8].w/2+10;
                        xSpinning_FP.xTouchOpen.hPos = imgSpinningWheel[8].h+10;
                        xSpinning_FP.xTouchOpen.xPos = subTemp[XPOS]-xSpinning_FP.xTouchOpen.wPos/2;
                        xSpinning_FP.xTouchOpen.yPos = subTemp[YPOS]-xSpinning_FP.xTouchOpen.hPos/2;
                        break;
                    case 1:
                        drawImage(&imgSpinningWheel[12], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[12].w/2, imgSpinningWheel[12].h, VH);
                        
                        sprintf(strTempS, "Lv.%d", xSpinning_FP.xSlot[slotNum].Upgrade);
                        gSetColor(101, 48, 150);
                        setFontSizeORI(16);
                        gDrawString(subTemp[XPOS]-5, subTemp[YPOS]+75, strTempS, VH);
                        setFontSize(11);

                        
                        if(xSpinning_FP.isTouchUpgrade[slotNum]==false)
                        {
                            drawImage(&imgSpinningWheel[20], subTemp[XPOS]+30, subTemp[YPOS]+120, 0, 0, imgSpinningWheel[20].w/2, imgSpinningWheel[20].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[20], subTemp[XPOS]+30, subTemp[YPOS]+120, imgSpinningWheel[20].w/2, 0, imgSpinningWheel[20].w/2, imgSpinningWheel[20].h, VH);
                        }
                        
                        xSpinning_FP.xTouchUpgrade[slotNum].wPos = imgSpinningWheel[20].w/2+10;
                        xSpinning_FP.xTouchUpgrade[slotNum].hPos = imgSpinningWheel[20].h+20;
                        xSpinning_FP.xTouchUpgrade[slotNum].xPos = subTemp[XPOS]+30-xSpinning_FP.xTouchUpgrade[slotNum].wPos/2;
                        xSpinning_FP.xTouchUpgrade[slotNum].yPos = subTemp[YPOS]+120-xSpinning_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchUpgrade[slotNum].xPos, xGreenHouse_FP.xTouchUpgrade[slotNum].yPos, xGreenHouse_FP.xTouchUpgrade[slotNum].wPos, xGreenHouse_FP.xTouchUpgrade[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);
                        
                        if(xSpinning_FP.isTouchFast[slotNum]==false)
                        {
                            drawImage(&imgSpinningWheel[19], subTemp[XPOS]-35, subTemp[YPOS]+120, 0, 0, imgSpinningWheel[19].w/2, imgSpinningWheel[19].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[19], subTemp[XPOS]-35, subTemp[YPOS]+120, imgSpinningWheel[19].w/2, 0, imgSpinningWheel[19].w/2, imgSpinningWheel[19].h, VH);
                        }
                        
                        xSpinning_FP.xTouchFast[slotNum].wPos = imgSpinningWheel[19].w/2+10;
                        xSpinning_FP.xTouchFast[slotNum].hPos = imgSpinningWheel[19].h+20;
                        xSpinning_FP.xTouchFast[slotNum].xPos = subTemp[XPOS]-40-xSpinning_FP.xTouchUpgrade[slotNum].wPos/2;
                        xSpinning_FP.xTouchFast[slotNum].yPos = subTemp[YPOS]+120-xSpinning_FP.xTouchUpgrade[slotNum].hPos/2;
                        
//                        setAlpha(100);
//                        gSetColor(255, 0, 0);
//                        fillRect(xGreenHouse_FP.xTouchFast[slotNum].xPos, xGreenHouse_FP.xTouchFast[slotNum].yPos, xGreenHouse_FP.xTouchFast[slotNum].wPos, xGreenHouse_FP.xTouchFast[slotNum].hPos);
//                        setAlpha(ALPHA_MAX);

                        break;
                    case 2:
                        drawImage(&imgSpinningWheel[12], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[12].w/2, imgSpinningWheel[12].h, VH);
                        
                        drawImage(&imgSpinningWheel[xSpinning_FP.imgNum[slotNum]], subTemp[XPOS]+20, subTemp[YPOS]-20, ((imgSpinningWheel[xSpinning_FP.imgNum[slotNum]].w/10)*slotCode), 0, imgSpinningWheel[xSpinning_FP.imgNum[slotNum]].w/10, imgSpinningWheel[xSpinning_FP.imgNum[slotNum]].h, VH);
                        
                        for(int prcI=0;prcI<xGame.prcCnt;prcI++)
                        {
                            if(xSpinning_FP.AnyCnt[slotNum]++ > 15)
                            {
                                xSpinning_FP.AnyCnt[slotNum]=0;
                                xSpinning_FP.imgNum[slotNum]++;
                                if(xSpinning_FP.imgNum[slotNum]>18)
                                {
                                    xSpinning_FP.imgNum[slotNum]=16;
                                }
                            }
                            
//                            if(xSpinning_FP.StarAnyCnt[slotNum]++ > 7)
//                            {
//                                xSpinning_FP.StarAnyCnt[slotNum]=0;
//                            }
                        }
                        
                        if(xSpinning_FP.StarAnyCnt[slotNum]%2==0)
                        {
                            drawImage(&imgSpinningWheel[25], subTemp[XPOS]-3, subTemp[YPOS]-80, 0, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
                            
                            drawImage(&imgSpinningWheel[25], subTemp[XPOS]+58, subTemp[YPOS]+40, (imgSpinningWheel[25].w/4)*3, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[25], subTemp[XPOS]-3, subTemp[YPOS]-80, imgSpinningWheel[25].w/4, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
                            
                            drawImage(&imgSpinningWheel[25], subTemp[XPOS]+58, subTemp[YPOS]+40, (imgSpinningWheel[25].w/4)*2, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
                        }
                        
                        
                        drawTimeSprintf(strTempS, xSpinning_FP.EndTimer[slotNum], 1);
                        gSetColor(101, 48, 150);
                        setFontSizeORI(16);
                        gDrawString(subTemp[XPOS]+15, subTemp[YPOS]+10, strTempS, VH);
                        setFontSize(11);
                        
                        sprintf(strTempS, "Lv.%d", xSpinning_FP.xSlot[slotNum].Upgrade);
                        gSetColor(101, 48, 150);
                        setFontSizeORI(16);
                        gDrawString(subTemp[XPOS]-5, subTemp[YPOS]+75, strTempS, VH);
                        setFontSize(11);
                        
                        if(xSpinning_FP.isTouchUpgrade[slotNum]==false)
                        {
                            drawImage(&imgSpinningWheel[20], subTemp[XPOS]+30, subTemp[YPOS]+120, 0, 0, imgSpinningWheel[20].w/2, imgSpinningWheel[20].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[20], subTemp[XPOS]+30, subTemp[YPOS]+120, imgSpinningWheel[20].w/2, 0, imgSpinningWheel[20].w/2, imgSpinningWheel[20].h, VH);
                        }
                        
                        xSpinning_FP.xTouchUpgrade[slotNum].wPos = imgSpinningWheel[20].w/2+10;
                        xSpinning_FP.xTouchUpgrade[slotNum].hPos = imgSpinningWheel[20].h+20;
                        xSpinning_FP.xTouchUpgrade[slotNum].xPos = subTemp[XPOS]+30-xSpinning_FP.xTouchUpgrade[slotNum].wPos/2;
                        xSpinning_FP.xTouchUpgrade[slotNum].yPos = subTemp[YPOS]+120-xSpinning_FP.xTouchUpgrade[slotNum].hPos/2;
                        
                        //                        setAlpha(100);
                        //                        gSetColor(255, 0, 0);
                        //                        fillRect(xGreenHouse_FP.xTouchUpgrade[slotNum].xPos, xGreenHouse_FP.xTouchUpgrade[slotNum].yPos, xGreenHouse_FP.xTouchUpgrade[slotNum].wPos, xGreenHouse_FP.xTouchUpgrade[slotNum].hPos);
                        //                        setAlpha(ALPHA_MAX);
                        
                        if(xSpinning_FP.isTouchFast[slotNum]==false)
                        {
                            drawImage(&imgSpinningWheel[19], subTemp[XPOS]-35, subTemp[YPOS]+120, 0, 0, imgSpinningWheel[19].w/2, imgSpinningWheel[19].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[19], subTemp[XPOS]-35, subTemp[YPOS]+120, imgSpinningWheel[19].w/2, 0, imgSpinningWheel[19].w/2, imgSpinningWheel[19].h, VH);
                        }
                        
                        xSpinning_FP.xTouchFast[slotNum].wPos = imgSpinningWheel[19].w/2+10;
                        xSpinning_FP.xTouchFast[slotNum].hPos = imgSpinningWheel[19].h+20;
                        xSpinning_FP.xTouchFast[slotNum].xPos = subTemp[XPOS]-40-xSpinning_FP.xTouchUpgrade[slotNum].wPos/2;
                        xSpinning_FP.xTouchFast[slotNum].yPos = subTemp[YPOS]+120-xSpinning_FP.xTouchUpgrade[slotNum].hPos/2;
                        break;
                    case 3:
                        drawImage(&imgSpinningWheel[12], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[12].w/2, imgSpinningWheel[12].h, VH);
                        drawImage(&imgSpinningWheel[18], subTemp[XPOS]+20, subTemp[YPOS]-20, ((imgSpinningWheel[18].w/10)*slotCode), 0, imgSpinningWheel[18].w/10, imgSpinningWheel[18].h, VH);
                        
                        drawImage(&imgSpinningWheel[24], subTemp[XPOS]+20, subTemp[YPOS]-20, 0, 0, imgSpinningWheel[24].w, imgSpinningWheel[24].h, VH);
                        
                        drawImage(&imgSpinningWheel[14], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[14].w, imgSpinningWheel[14].h, VH);
                        
                        drawImage(&imgSpinningWheel[25], subTemp[XPOS]-3, subTemp[YPOS]-80, 0, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
                        
                        drawImage(&imgSpinningWheel[25], subTemp[XPOS]+58, subTemp[YPOS]+40, (imgSpinningWheel[25].w/4)*2, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
                        sprintf(strTempS, "Lv.%d", xSpinning_FP.xSlot[slotNum].Upgrade);
                        gSetColor(101, 48, 150);
                        setFontSizeORI(16);
                        gDrawString(subTemp[XPOS]-5, subTemp[YPOS]+75, strTempS, VH);
                        setFontSize(11);

                        if(xSpinning_FP.isTouchUpgrade[slotNum]==false)
                        {
                            drawImage(&imgSpinningWheel[20], subTemp[XPOS]+30, subTemp[YPOS]+120, 0, 0, imgSpinningWheel[20].w/2, imgSpinningWheel[20].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[20], subTemp[XPOS]+30, subTemp[YPOS]+120, imgSpinningWheel[20].w/2, 0, imgSpinningWheel[20].w/2, imgSpinningWheel[20].h, VH);
                        }
                        
                        xSpinning_FP.xTouchUpgrade[slotNum].wPos = imgSpinningWheel[20].w/2+10;
                        xSpinning_FP.xTouchUpgrade[slotNum].hPos = imgSpinningWheel[20].h+20;
                        xSpinning_FP.xTouchUpgrade[slotNum].xPos = subTemp[XPOS]+30-xSpinning_FP.xTouchUpgrade[slotNum].wPos/2;
                        xSpinning_FP.xTouchUpgrade[slotNum].yPos = subTemp[YPOS]+120-xSpinning_FP.xTouchUpgrade[slotNum].hPos/2;
                        
                        //                        setAlpha(100);
                        //                        gSetColor(255, 0, 0);
                        //                        fillRect(xGreenHouse_FP.xTouchUpgrade[slotNum].xPos, xGreenHouse_FP.xTouchUpgrade[slotNum].yPos, xGreenHouse_FP.xTouchUpgrade[slotNum].wPos, xGreenHouse_FP.xTouchUpgrade[slotNum].hPos);
                        //                        setAlpha(ALPHA_MAX);
                        
                        if(xSpinning_FP.isTouchFast[slotNum]==false)
                        {
                            drawImage(&imgSpinningWheel[19], subTemp[XPOS]-35, subTemp[YPOS]+120, 0, 0, imgSpinningWheel[19].w/2, imgSpinningWheel[19].h, VH);
                        }
                        else
                        {
                            drawImage(&imgSpinningWheel[19], subTemp[XPOS]-35, subTemp[YPOS]+120, imgSpinningWheel[19].w/2, 0, imgSpinningWheel[19].w/2, imgSpinningWheel[19].h, VH);
                        }
                        
                        xSpinning_FP.xTouchFast[slotNum].wPos = imgSpinningWheel[19].w/2+10;
                        xSpinning_FP.xTouchFast[slotNum].hPos = imgSpinningWheel[19].h+20;
                        xSpinning_FP.xTouchFast[slotNum].xPos = subTemp[XPOS]-40-xSpinning_FP.xTouchUpgrade[slotNum].wPos/2;
                        xSpinning_FP.xTouchFast[slotNum].yPos = subTemp[YPOS]+120-xSpinning_FP.xTouchUpgrade[slotNum].hPos/2;
                        break;
                        
                }
                
                xSpinning_FP.xTouchSlot[slotNum].wPos=imgSpinningWheel[12].w/2;
                xSpinning_FP.xTouchSlot[slotNum].hPos=imgSpinningWheel[12].h;
                xSpinning_FP.xTouchSlot[slotNum].xPos=subTemp[XPOS] - xSpinning_FP.xTouchSlot[slotNum].wPos/2;
                xSpinning_FP.xTouchSlot[slotNum].yPos=subTemp[YPOS] - xSpinning_FP.xTouchSlot[slotNum].hPos/2;
                
//                gSetColor(255, 0, 0);
//                setAlpha(100);
//                fillRect(xSpinning_FP.xTouchSlot[slotNum].xPos, xSpinning_FP.xTouchSlot[slotNum].yPos, xSpinning_FP.xTouchSlot[slotNum].wPos, xSpinning_FP.xTouchSlot[slotNum].hPos);
//                setAlpha(ALPHA_MAX);

            }
        }
    }
    gSetClip(false, 0, 0, lcdW, lcdH);
    
    //꽃부분 화살표
    subTemp[XPOS] = px-448;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgSpinningWheel[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[3].w, imgSpinningWheel[3].h, VH);
    
    if(xSpinning_FP.xDragScrollSpinningS.selectNum<=0)
    {
        drawImage(&imgSpinningWheel[6], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[6].w/6*2, 0, imgSpinningWheel[6].w/6, imgSpinningWheel[6].h, VH);
    }
    else
    {
        if(xSpinning_FP.isTouchLeftBtn==false)
        {
            drawImage(&imgSpinningWheel[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[6].w/6, imgSpinningWheel[6].h, VH);
        }
        
        else
        {
            drawImage(&imgSpinningWheel[6], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[6].w/6*4, 0, imgSpinningWheel[6].w/6, imgGreenHouse[6].h, VH);
        }
    }
    xSpinning_FP.xTouchLeftBtn.wPos = imgSpinningWheel[3].w+20;
    xSpinning_FP.xTouchLeftBtn.hPos = imgSpinningWheel[3].h;
    xSpinning_FP.xTouchLeftBtn.xPos = subTemp[XPOS] - xSpinning_FP.xTouchLeftBtn.wPos/2;
    xSpinning_FP.xTouchLeftBtn.yPos = subTemp[YPOS] - xSpinning_FP.xTouchLeftBtn.hPos/2;

    
    subTemp[XPOS] = px+450;
    subTemp[YPOS] = py-30;
    
    drawImage(&imgSpinningWheel[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[5].w, imgSpinningWheel[5].h, VH);
    
    if(xSpinning_FP.xDragScrollSpinningS.selectNum>=xSpinning_FP.xDragScrollSpinningS.totalNum-1)
    {
        drawImage(&imgSpinningWheel[6], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[6].w/6*3, 0, imgSpinningWheel[6].w/6, imgSpinningWheel[6].h, VH);
    }
    else
    {
        if(xSpinning_FP.isTouchRightBtn==false)
        {
            drawImage(&imgSpinningWheel[6], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[6].w/6, 0, imgSpinningWheel[6].w/6, imgSpinningWheel[6].h, VH);
        }
        else
        {
            drawImage(&imgSpinningWheel[6], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[6].w/6*5, 0, imgSpinningWheel[6].w/6, imgSpinningWheel[6].h, VH);
        }
    }
    
    xSpinning_FP.xTouchRightBtn.wPos = imgSpinningWheel[5].w+20;
    xSpinning_FP.xTouchRightBtn.hPos = imgSpinningWheel[5].h;
    xSpinning_FP.xTouchRightBtn.xPos = subTemp[XPOS] - xSpinning_FP.xTouchRightBtn.wPos/2;
    xSpinning_FP.xTouchRightBtn.yPos = subTemp[YPOS] - xSpinning_FP.xTouchRightBtn.hPos/2;
   
    //슬롯 화살표
    subTemp[XPOS] = px-458;
    subTemp[YPOS] = py+135;
    
    if(xSpinning_FP.xDragScrollSpinningB.selectNum<=0)
    {
        drawImage(&imgSpinningWheel[7], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[7].w/6*2, 0, imgSpinningWheel[7].w/6, imgSpinningWheel[7].h, VH);
    }
    else
    {
        if(xSpinning_FP.isTouchLeftArrow==true)
        {
            drawImage(&imgSpinningWheel[7], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[7].w/6*4, 0, imgSpinningWheel[7].w/6, imgSpinningWheel[7].h, VH);
        }
        else
        {
            drawImage(&imgSpinningWheel[7], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[7].w/6, imgSpinningWheel[7].h, VH);
        }
    }
    
    xSpinning_FP.xTouchLeftArrow.wPos = 80;
    xSpinning_FP.xTouchLeftArrow.hPos = 230;
    xSpinning_FP.xTouchLeftArrow.xPos = subTemp[XPOS] - xSpinning_FP.xTouchLeftArrow.wPos/2;
    xSpinning_FP.xTouchLeftArrow.yPos = subTemp[YPOS] - xSpinning_FP.xTouchLeftArrow.hPos/2;
    
    subTemp[XPOS] = px+460;
    subTemp[YPOS] = py+135;
    
    if(xSpinning_FP.xDragScrollSpinningB.selectNum>=xSpinning_FP.xDragScrollSpinningB.totalNum-1)
    {
        drawImage(&imgSpinningWheel[7], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[7].w/6*3, 0, imgSpinningWheel[7].w/6, imgSpinningWheel[7].h, VH);
    }
    else
    {
        if(xSpinning_FP.isTouchRightArrow==false)
        {
            drawImage(&imgSpinningWheel[7], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[7].w/6, 0, imgSpinningWheel[7].w/6, imgSpinningWheel[7].h, VH);
        }
        else
        {
            drawImage(&imgSpinningWheel[7], subTemp[XPOS], subTemp[YPOS], imgSpinningWheel[7].w/6*5, 0, imgSpinningWheel[7].w/6, imgSpinningWheel[7].h, VH);
        }
    }
    
    xSpinning_FP.xTouchRightArrow.wPos = 80;
    xSpinning_FP.xTouchRightArrow.hPos = 230;
    xSpinning_FP.xTouchRightArrow.xPos = subTemp[XPOS] - xSpinning_FP.xTouchRightArrow.wPos/2;
    xSpinning_FP.xTouchRightArrow.yPos = subTemp[YPOS] - xSpinning_FP.xTouchRightArrow.hPos/2;
    
    if(xSpinning_FP.isTouchProduct==true)
    {
        slotCode = xGreenHouse_MaterialData_FP.xSlot[xSpinning_FP.selectProduct].code;
        
        subTemp[XPOS] = xTouch.xPos;
        subTemp[YPOS] = xTouch.yPos;
        
        drawImage(&imgSpinningWheel[15], subTemp[XPOS], subTemp[YPOS], ((imgSpinningWheel[15].w/10)*slotCode), 0, imgSpinningWheel[15].w/10, imgSpinningWheel[15].h, VH);
        
        
        if(xTouch.xPos+imgSpinningWheel[21].w/2+40>=885)
        {
            subTemp[XPOS] = xTouch.xPos-imgSpinningWheel[21].w/2-40;
            subTemp[YPOS] = xTouch.yPos;
        }
        else
        {
            subTemp[XPOS] = xTouch.xPos+imgSpinningWheel[21].w/2+40;
            subTemp[YPOS] = xTouch.yPos;
        }
        
        drawImage(&imgSpinningWheel[21], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[21].w, imgSpinningWheel[21].h, VH);

    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////물레 입력 이벤트 처리 KBY
void keySpinningWheel_FP(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        for(int k=0;k<xSpinning_FP.totalSlot;k++)
        {
            if(touchCheck(&xSpinning_FP.xTouchUpgrade[k])==TRUE && xSpinning_FP.isTouchProduct==false && touchType == USER_POINT_PRESS_EVENT)
            {
                xSpinning_FP.isTouchUpgrade[k]=true;
                break;
            }
            else if(touchCheck(&xSpinning_FP.xTouchFast[k])==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xSlot[k].state ==2 && touchType == USER_POINT_PRESS_EVENT)
            {
                xSpinning_FP.isTouchFast[k]=true;
                break;
            }
            else if(touchCheck(&xSpinning_FP.xTouchSlot[k])==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xSlot[k].state ==2 && touchType == USER_POINT_PRESS_EVENT)
            {
                xSpinning_FP.selectSlot = k;
                xSpinning_FP.isTouchYes=false;
                xSpinning_FP.isTouchNo=false;
                xWorldMap.isKeyReturn = TRUE;
                xSpinning_FP.state = SPINNINGWHEEL_STATE_CANCLEPOPUP;
                break;
            }
            else if(touchCheck(&xSpinning_FP.xTouchSlot[k])==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xSlot[k].state ==3 && touchType == USER_POINT_PRESS_EVENT)
            {
                xSpinning_FP.selectSlot=k;
                xEventQueueNet.action[xEventQueueNet.totalNum]=3;
                xEventQueueNet.slotNum[xEventQueueNet.totalNum]=xSpinning_FP.selectSlot;
                xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum]=-1;
                xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum]=0;
                xEventQueueNet.time[xEventQueueNet.totalNum]=0;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SPINNINGWHEELSLOTINFOUPDATE, TRUE);
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SPINNINGWHEELINFOUPDATE, TRUE);
            }
        }
        //임시
        for(int k=0;k<xGreenHouse_MaterialData_FP.totalNum;k++)
        {
            if(touchCheck(&xSpinning_FP.xTouchList[k])==TRUE &&touchType == USER_POINT_PRESS_EVENT)
            {
                xSpinning_FP.isTouchProduct = true;
                xSpinning_FP.selectProduct = k;
                break;
            }
        }
        
        if(touchCheck(&xTouchClr)==TRUE && xSpinning_FP.isTouchProduct==false && touchType == USER_POINT_PRESS_EVENT)
        {
            xSpinning_FP.isTouchClr=true;
        }
        else if(touchCheck(&xSpinning_FP.xTouchOpen)==TRUE && xSpinning_FP.isTouchProduct==false && touchType == USER_POINT_PRESS_EVENT)
        {
            xSpinning_FP.isTouchOpen=true;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchLeftBtn)==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningS.selectNum>0)
        {
            xSpinning_FP.isTouchLeftBtn=true;
            xSpinning_FP.isTouchRightBtn=false;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchRightBtn)== TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningS.selectNum<xSpinning_FP.xDragScrollSpinningS.totalNum-1)
        {
            xSpinning_FP.isTouchLeftBtn=false;
            xSpinning_FP.isTouchRightBtn=true;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchLeftArrow)==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningB.selectNum>0)
        {
            xSpinning_FP.isTouchLeftArrow=true;
            xSpinning_FP.isTouchRightArrow=false;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchRightArrow)==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningB.selectNum<xSpinning_FP.xDragScrollSpinningB.totalNum-1)
        {
            xSpinning_FP.isTouchLeftArrow=false;
            xSpinning_FP.isTouchRightArrow=true;
        }

    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        bool isRelease = false;
        
        for (int k=0; k<xSpinning_FP.totalSlot; k++)
        {
            if(touchCheck(&xSpinning_FP.xTouchUpgrade[k])==TRUE && xSpinning_FP.isTouchProduct==false && touchType == USER_POINT_RELEASE_EVENT)
            {
                xSpinning_FP.isTouchUpgrade[k] = false;
                xSpinning_FP.selectSlot = k;
                setPopup(POPUP_SPINNINGWHEELSLOTUPGRADE, playState, playState, 0, DONT);
                break;
            }
            
            else if(touchCheck(&xSpinning_FP.xTouchFast[k])==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xSlot[k].state==2 && touchType == USER_POINT_RELEASE_EVENT)
            {
                xSpinning_FP.isTouchFast[k] = false;
                xSpinning_FP.selectSlot = k;
                setPopup(POPUP_SPINNINGWHEELSLOTFASTOK, playState, playState, 0, DONT);
                break;
            }
            
        }
        
        for(int k=0;k<12;k++)
        {
            if(touchCheck(&xSpinning_FP.xTouchSlot[k])==TRUE && xSpinning_FP.isTouchProduct==true && touchType==USER_POINT_RELEASE_EVENT)
            {
                if(xSpinning_FP.xSlot[k].state==1)
                {
                    isRelease = true;
                    xSpinning_FP.selectSlot = k;
                    break;
                }
            }
        }
        
        if(isRelease==true)
        {
            xSpinning_FP.xSlot[xSpinning_FP.selectSlot].MaterialCode = xGreenHouse_MaterialData_FP.xSlot[xSpinning_FP.selectProduct].code;
            xSpinning_FP.xSlot[xSpinning_FP.selectSlot].endTime = xGreenHouse_MaterialData_FP.xSlot[xSpinning_FP.selectProduct].makeTime+xCalendar.nowTime;
            xSpinning_FP.xSlot[xSpinning_FP.selectSlot].itemCnt = xGreenHouse_MaterialData_FP.xSlot[xSpinning_FP.selectProduct].cnt;
            
            xEventQueueNet.action[xEventQueueNet.totalNum]=0;
            xEventQueueNet.slotNum[xEventQueueNet.totalNum]= xSpinning_FP.selectSlot;
            xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum]= xSpinning_FP.xSlot[xSpinning_FP.selectSlot].MaterialCode;
            xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum]= xSpinning_FP.xSlot[xSpinning_FP.selectSlot].itemCnt;
            xEventQueueNet.time[xEventQueueNet.totalNum]=xSpinning_FP.xSlot[xSpinning_FP.selectSlot].endTime;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SPINNINGWHEELSLOTINFOUPDATE, TRUE);
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SPINNINGWHEELINFOUPDATE, TRUE);
            
            xSpinning_FP.selectProduct=DONT;
            xSpinning_FP.isTouchProduct=false;
            
        }
        
        else if(touchCheck(&xTouchClr)==TRUE && xSpinning_FP.isTouchProduct==false && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.isTouchClr=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            spinningWheelFreeLoad_FP(false);
            xWorldMap.state=WORLDMAP_STATE_PLAY;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchOpen)==TRUE && xSpinning_FP.isTouchProduct==false && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.isTouchOpen=false;
            setPopup(POPUP_SPINNINGWHEELSLOTOPEN, playState, playState, 0, DONT);
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchLeftBtn)==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningS.selectNum>0 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.xDragScrollSpinningS.speed = 640;
            xSpinning_FP.isTouchLeftBtn=false;
            xSpinning_FP.isTouchRightBtn=false;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchRightBtn)==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningS.selectNum<xSpinning_FP.xDragScrollSpinningS.totalNum-1 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.xDragScrollSpinningS.speed = -640;
            xSpinning_FP.isTouchLeftBtn=false;
            xSpinning_FP.isTouchRightBtn=false;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchLeftArrow)==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningB.selectNum>0 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.xDragScrollSpinningB.speed=640;
            xSpinning_FP.isTouchLeftArrow=false;
            xSpinning_FP.isTouchRightArrow=false;
        }
        
        else if(touchCheck(&xSpinning_FP.xTouchRightArrow)==TRUE && xSpinning_FP.isTouchProduct==false && xSpinning_FP.xDragScrollSpinningB.selectNum<xSpinning_FP.xDragScrollSpinningB.totalNum-1 && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.xDragScrollSpinningB.speed=-640;
            xSpinning_FP.isTouchLeftArrow=false;
            xSpinning_FP.isTouchRightArrow=false;
        }

        else
        {
            xSpinning_FP.selectProduct=DONT;
            xSpinning_FP.isTouchProduct=false;
        }
        

    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////물레 제작취소 팝업창 draw KBY
void drawSpinningWheelSlotCanclePopup_FP()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    int slotCode = xSpinning_FP.xSlot[xSpinning_FP.selectSlot].MaterialCode;
    
    subTemp[XPOS] = px;
    subTemp[YPOS] = py;
    
    drawImage(&imgSpinningWheel[22], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSpinningWheel[22].w, imgSpinningWheel[22].h, VH);
    
    if(xSpinning_FP.isTouchPopupClr==false)
    {
        drawImage(&imgSpinningWheel[1], subTemp[XPOS]+243, subTemp[YPOS]-140, 0, 0, imgSpinningWheel[1].w/2, imgSpinningWheel[1].h, VH);
    }
    else
    {
        drawImage(&imgSpinningWheel[1], subTemp[XPOS]+243, subTemp[YPOS]-140, imgSpinningWheel[1].w/2, 0, imgSpinningWheel[1].w/2, imgSpinningWheel[1].h, VH);
    }
    
    xTouchClr.wPos = imgSpinningWheel[1].w/2;
    xTouchClr.hPos = imgSpinningWheel[1].h;
    xTouchClr.xPos = subTemp[XPOS]+243-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-140-xTouchClr.hPos/2;
    
    
    drawImage(&imgSpinningWheel[12], subTemp[XPOS]-160, subTemp[YPOS]-30, 0, 0, imgSpinningWheel[12].w/2, imgSpinningWheel[12].h, VH);
    
    drawImage(&imgSpinningWheel[xSpinning_FP.imgNum[xSpinning_FP.selectSlot]], subTemp[XPOS]-140, subTemp[YPOS]-50, ((imgSpinningWheel[xSpinning_FP.imgNum[xSpinning_FP.selectSlot]].w/10)*slotCode), 0, imgSpinningWheel[xSpinning_FP.imgNum[xSpinning_FP.selectSlot]].w/10, imgSpinningWheel[xSpinning_FP.imgNum[xSpinning_FP.selectSlot]].h, VH);
    
    if(xSpinning_FP.StarAnyCnt[xSpinning_FP.selectSlot]%2==0)
    {
        drawImage(&imgSpinningWheel[25], subTemp[XPOS]-163, subTemp[YPOS]-110, 0, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
        
        drawImage(&imgSpinningWheel[25], subTemp[XPOS]-102, subTemp[YPOS]+10, (imgSpinningWheel[25].w/4)*3, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
    }
    else
    {
        drawImage(&imgSpinningWheel[25], subTemp[XPOS]-163, subTemp[YPOS]-110, imgSpinningWheel[25].w/4, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
        
        drawImage(&imgSpinningWheel[25], subTemp[XPOS]-102, subTemp[YPOS]+10, (imgSpinningWheel[25].w/4)*2, 0, imgSpinningWheel[25].w/4, imgSpinningWheel[25].h, VH);
    }

   
    drawTimeSprintf(strTempS, xSpinning_FP.EndTimer[xSpinning_FP.selectSlot], 1);
    setFontSizeORI(16);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS]-140, subTemp[YPOS]-30, strTempS, VH);
    setFontSize(11);
    
    sprintf(strTempS, "%s", xGreenHouse_MaterialData_FP.xSlot[xSpinning_FP.xSlot[xSpinning_FP.selectSlot].MaterialCode].strName);
    gSetColor(101, 48, 150);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]+50, subTemp[YPOS]-80, strTempS, VH);
    setFontSize(11);
    
    sprintf(strTempS, "제작을 취소하시겠습니까?");
    gSetColor(101, 48, 150);
    setFontSizeORI(16);
    gDrawString(subTemp[XPOS]+70, subTemp[YPOS]-10, strTempS, VH);
    setFontSize(11);
    
    sprintf(strTempS, "제작을 취소하면 사용된 재료는 사라져요!");
    gSetColor(101, 48, 150);
    setFontSizeORI(14);
    gDrawString(subTemp[XPOS]+70, subTemp[YPOS]+10, strTempS, VH);
    setFontSize(11);
    
    if(xSpinning_FP.isTouchYes==false)
    {
        drawImage(&imgSpinningWheel[23], subTemp[XPOS]-85, subTemp[YPOS]+100, 0, imgSpinningWheel[23].h/2, imgSpinningWheel[23].w/2, imgSpinningWheel[23].h/2, VH);
    }
    else
    {
        drawImage(&imgSpinningWheel[23], subTemp[XPOS]-85, subTemp[YPOS]+100, imgSpinningWheel[23].w/2, imgSpinningWheel[23].h/2, imgSpinningWheel[23].w/2, imgSpinningWheel[23].h/2, VH);
    }
    sprintf(strTempS, "네");
    gSetColor(36, 50, 128);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]-85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    
    xSpinning_FP.xTouchYes.wPos = imgSpinningWheel[23].w/2;
    xSpinning_FP.xTouchYes.hPos = imgSpinningWheel[23].h/2;
    xSpinning_FP.xTouchYes.xPos = subTemp[XPOS]-85-xSpinning_FP.xTouchYes.wPos/2;
    xSpinning_FP.xTouchYes.yPos = subTemp[YPOS]+100-xSpinning_FP.xTouchYes.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(255, 0, 0);
    //    fillRect(xGreenHouse_FP.xTouchYes.xPos, xGreenHouse_FP.xTouchYes.yPos, xGreenHouse_FP.xTouchYes.wPos, xGreenHouse_FP.xTouchYes.hPos);
    //    setAlpha(ALPHA_MAX);
    
    
    
    
    if(xSpinning_FP.isTouchNo==false)
    {
        drawImage(&imgSpinningWheel[23], subTemp[XPOS]+85, subTemp[YPOS]+100, 0, 0, imgSpinningWheel[23].w/2, imgSpinningWheel[23].h/2, VH);
    }
    else
    {
        drawImage(&imgSpinningWheel[23], subTemp[XPOS]+85, subTemp[YPOS]+100, imgSpinningWheel[23].w/2, 0, imgSpinningWheel[23].w/2, imgSpinningWheel[23].h/2, VH);
    }
    sprintf(strTempS, "아니오");
    gSetColor(106, 21, 97);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]+85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    
    xSpinning_FP.xTouchNo.wPos = imgSpinningWheel[23].w/2;
    xSpinning_FP.xTouchNo.hPos = imgSpinningWheel[23].h/2;
    xSpinning_FP.xTouchNo.xPos = subTemp[XPOS]+85-xSpinning_FP.xTouchNo.wPos/2;
    xSpinning_FP.xTouchNo.yPos = subTemp[YPOS]+100-xSpinning_FP.xTouchNo.hPos/2;
    
    //    setAlpha(100);
    //    gSetColor(255, 0, 0);
    //    fillRect(xGreenHouse_FP.xTouchNo.xPos, xGreenHouse_FP.xTouchNo.yPos, xGreenHouse_FP.xTouchNo.wPos, xGreenHouse_FP.xTouchNo.hPos);
    //    setAlpha(ALPHA_MAX);
    
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////물레 제작취소 팝업창 입력 이벤트 처리 KBY
void keySpinningWheelSlotCanclePopup_FP(int type, int param1, int param2)
{
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xSpinning_FP.isTouchPopupClr = true;
        }
        else if(touchCheck(&xSpinning_FP.xTouchNo)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xSpinning_FP.isTouchNo=true;
            xSpinning_FP.isTouchYes=false;
        }
        else if(touchCheck(&xSpinning_FP.xTouchYes)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xSpinning_FP.isTouchNo=false;
            xSpinning_FP.isTouchYes=true;
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.isTouchPopupClr = false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xSpinning_FP.state = SPINNINGWHEEL_STATE_MAIN;
        }
        else if(touchCheck(&xSpinning_FP.xTouchNo)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.isTouchNo=false;
            xSpinning_FP.isTouchYes=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xSpinning_FP.state = SPINNINGWHEEL_STATE_MAIN;
        }
        else if(touchCheck(&xSpinning_FP.xTouchYes)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xSpinning_FP.isTouchNo=false;
            xSpinning_FP.isTouchYes=false;
            playSnd(SND_MENU_OK);
            xWorldMap.isKeyReturn = TRUE;
            xEventQueueNet.action[xEventQueueNet.totalNum]=1;
            xEventQueueNet.slotNum[xEventQueueNet.totalNum]=xSpinning_FP.selectSlot;
            xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum]=-1;
            xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum]=0;
            xEventQueueNet.time[xEventQueueNet.totalNum]=0;
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SPINNINGWHEELSLOTINFOUPDATE, TRUE);
            addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SPINNINGWHEELINFOUPDATE, TRUE);
            xSpinning_FP.state=SPINNINGWHEEL_STATE_MAIN;
        }
        
        else
        {
            xSpinning_FP.isTouchNo=false;
            xSpinning_FP.isTouchYes=false;
            xSpinning_FP.isTouchPopupClr = false;
        }
        
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////상점 KBY 2018.2.23

void setShop_FP(int selectTabB, int selectTabS)
{
    xShop_FP.selectTabB = selectTabB;
    xShop_FP.selectTabS = selectTabS;
    shopFreeload_FP(true);
    initShop_FP();
    xWorldMap.state = WORLDMAP_STATE_SHOP_FP;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////상점 이미지 로드 및 메모리 해제 KBY
void shopFreeload_FP(bool isLoad)
{
    
    int type = 0;
    int code = 0;
    int layer = 0;
    int num = 0;
    
    if(isLoad==true)
    {
        loadImg("fitting_base.png", &imgShop[0]);
        loadImg("productionexiticon.png", &imgShop[1]);
        loadImg("shop_title.png", &imgShop[2]);
        loadImg("shop_base.png", &imgShop[3]);
        loadImg("shop_tab_sideoff.png", &imgShop[4]);
        loadImg("shop_tab_sideon.png", &imgShop[5]);
        loadImg("shop_tab_dressoff.png", &imgShop[6]);
        loadImg("shop_tab_dresson.png", &imgShop[7]);
        loadImg("shop_slot.png", &imgShop[8]);
        loadImg("shop_new.png", &imgShop[9]);
        loadImg("shop_icon_wealth.png", &imgShop[10]);
        loadImg("shop_scroll.png", &imgShop[11]);
        loadImg("fitting_info_base.png", &imgShop[12]);
        loadImg("fitting_btn_info.png", &imgShop[13]);
        loadImg("fitting_info_base.png", &imgShop[14]);
        loadImg("shop_tab_interioroff.png", &imgShop[15]);
        loadImg("shop_tab_interioron.png", &imgShop[16]);
        loadImg("shop_tab_cashoff.png", &imgShop[17]);
        loadImg("shop_tab_cashon.png", &imgShop[18]);
        loadImg("popup_base.png", &imgShop[19]);
        loadImg("default_btn_yesno.png", &imgShop[20]);
        loadImg("shop_btn_preview.png", &imgShop[21]);
        loadImg("shop_preview_base.png", &imgShop[22]);
        loadImg("fitting_btn_arrow.png", &imgShop[23]);
        loadImg("fitting_eff_shadow.png", &imgShop[24]);
        loadImg("fitting_eff_light.png", &imgShop[25]);
        loadImg("production_close.png", &imgShop[26]);
        loadImg("hotdeal6.png", &imgShop[27]);
        for(int k=0;k<FASHIONDATATYPEMAX;k++)
        {
            for(int i=0;i<xFashionList_FP.totalSlotNum[k];i++)
            {
                loadFittingImg_FP(k, i);
            }
        }

        type = xFitting_FP.faceNum%1000;
        sprintf(strTempS, "face_%d_11.png", type);
        loadImgDocuments(strTempS, &xFitting_FP.imgFace);
        
        
        
        type = xFitting_FP.hairNum/1000;
        code = xFitting_FP.hairNum%1000;
        layer = xHairMakeUp.xData[type][code].layerNum;
        for(int k=0; k < 15; k++)
        {
            if(xLayer.xData[layer].xData[0][k] != -1)
            {
                sprintf(strTempS, "hair_%d_%d.png", xFitting_FP.hairNum, xLayer.xData[layer].xData[0][k]);
                loadImgDocuments(strTempS, &xFitting_FP.imgHair[ACT_FRONT][k]);
            }
            
            if(xLayer.xData[layer].xData[1][k] != -1)
            {
                sprintf(strTempS, "b_hair_%d_%d.png", xFitting_FP.hairNum, xLayer.xData[layer].xData[1][k]);
                loadImgDocuments(strTempS, &xFitting_FP.imgHair[ACT_BACK][k]);
            }
        }

    }
    
    else
    {
        freeImg(&imgShop[0]);
        freeImg(&imgShop[1]);
        freeImg(&imgShop[2]);
        freeImg(&imgShop[3]);
        freeImg(&imgShop[4]);
        freeImg(&imgShop[5]);
        freeImg(&imgShop[6]);
        freeImg(&imgShop[7]);
        freeImg(&imgShop[8]);
        freeImg(&imgShop[9]);
        freeImg(&imgShop[10]);
        freeImg(&imgShop[11]);
        freeImg(&imgShop[12]);
        freeImg(&imgShop[13]);
        freeImg(&imgShop[14]);
        freeImg(&imgShop[15]);
        freeImg(&imgShop[16]);
        freeImg(&imgShop[17]);
        freeImg(&imgShop[18]);
        freeImg(&imgShop[19]);
        freeImg(&imgShop[20]);
        freeImg(&imgShop[21]);
        freeImg(&imgShop[22]);
//        freeImg(&imgShop[23]);
        freeImg(&imgShop[24]);
        freeImg(&imgShop[25]);
        freeImg(&imgShop[26]);
        freeImg(&imgShop[27]);
        
        for(int k=0;k<FASHIONDATATYPEMAX;k++)
        {
            for(int i=0;i<xFashionList_FP.totalSlotNum[k];i++)
            {
                freeImg(&imgFittingItem_FP[k][i]);
            }
        }
        
        type = xFitting_FP.hairNum/1000;
        code = xFitting_FP.hairNum%1000;
        
        layer = xHairMakeUp.xData[type][code].layerNum;
        
        for(int k=0; k < 15; k++)
        {
            if(xLayer.xData[layer].xData[0][k] != -1)
            {
                freeImg(&xFitting_FP.imgHair[0][k]);
            }
            
            if(xLayer.xData[layer].xData[1][k] != -1)
            {
                freeImg(&xFitting_FP.imgHair[1][k]);
            }
        }
        freeImg(&xFitting_FP.imgFace);

        
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////상점 init KBY

void initShop_FP()
{
    xShop_FP.isTouchInfo=false;
    xShop_FP.isTouchClr=false;
    xShop_FP.isTouchPopUpClr=false;
    xShop_FP.isTouchYes=false;
    xShop_FP.isTouchNo=false;
    xShop_FP.isTouchPreviewClr=false;
    xShop_FP.isTouchLeftArrow=false;
    xShop_FP.isTouchRightArrow=false;
//    xShop_FP.selectTabB=0;
//    xShop_FP.selectTabS=0;
    xShop_FP.state = SHOP_STATE_MAIN;
    xShop_FP.state2 = SHOPPOPUP_STATE_MAIN;
    xShop_FP.xDragScrollShopList.touchXpos = DONT;
    xShop_FP.xDragScrollShopList.touchYpos = DONT;
    xShop_FP.xDragScrollShopList.touchXposBefore = DONT;
    xShop_FP.xDragScrollShopList.touchYposBefore = DONT;
    xShop_FP.xDragScrollShopList.selectNum = 0;
    xShop_FP.xDragScrollShopList.pos = 0;
    xShop_FP.xDragScrollShopList.speed = 0;
    xFashionList_FP.parsingTotalNum=0;
    for(int i=0;i<FASHIONDATATYPEMAX;i++)
    {
        xFashionList_FP.parsingSlotTotalNum[i] = 0;
    }
    int index = 0;
    
    
    
    xFitting_FP.hairNum = xMyCharacter.xFace.hairNum;
    xFitting_FP.faceNum = xMyCharacter.xFace.faceNum;
    xFitting_FP.pos = 0;
    
    for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
        xFitting_FP.xModel.xF.code[i] = DONT;
    
    for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
        xFitting_FP.xModel.xF.code[i] = xMyCharacter.xF.code[i];
    
    
    for(int k=0;k<FASHIONDATATYPEMAX;k++)
    {
        for(int i=0;i<xFashionList_FP.totalSlotNum[k];i++)
        {
//            xFashionList_FP.xSlotS[index].code = xFashionList_FP.xSlot[k][i].code;
//            sprintf(xFashionList_FP.xSlotS[index].strName, "%s", xFashionList_FP.xSlot[k][i].strName);
            if(xFashionList_FP.xSlot[k][i].SellOnOff==0 && xFashionList_FP.xSlot[k][i].isOpen==false)
            {
                memcpy(&xFashionList_FP.xSlotS[index], &xFashionList_FP.xSlot[k][i], sizeof(xFashionList_FP.xSlot[k][i]));
                memcpy(&xFashionList_FP.xSlotTemp[k][i], &xFashionList_FP.xSlot[k][i], sizeof(xFashionList_FP.xSlot[k][i]));
                xFashionList_FP.parsingTotalNum++;//나중에 바뀔꺼임....fitting에서 가지고 있는 총 수량 체크하는거 생기면 바뀜...
                xFashionList_FP.parsingSlotTotalNum[k]++;
            }
            index++;
        }
    }
    
    
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////상점 draw KBY
void drawShop_FP()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    drawImage(&imgShop[0], px, py+50, 0, 0, imgShop[0].w, imgShop[0].h, VH);
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-180;
    
    if(xShop_FP.isTouchClr==false)
    {
        drawImage(&imgShop[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[1].w/2, imgShop[1].h, VH);
    }
    else
    {
        drawImage(&imgShop[1], subTemp[XPOS], subTemp[YPOS], imgShop[1].w/2, 0, imgShop[1].w/2, imgShop[1].h, VH);
    }
    xTouchClr.wPos = imgShop[1].w;
    xTouchClr.hPos = imgShop[1].h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
//    setAlpha(255);

    subTemp[XPOS] = px-456;
    subTemp[YPOS] = py-220;
    
    drawImage(&imgShop[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[2].w, imgShop[2].h, VH);
    
    subTemp[XPOS] = px+40;
    subTemp[YPOS] = py+85;
    drawImage(&imgShop[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[3].w, imgShop[3].h, VH);

    subTemp[XPOS] = px+440;
    subTemp[YPOS] = py-150;
    if(xShop_FP.selectTabB==0||xShop_FP.selectTabB==1)
    {
        if(xShop_FP.isTouchInfo==false)
        {
            drawImage(&imgShop[13], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[13].w/2, imgShop[13].h, VH);
        }
        else
        {
            drawImage(&imgShop[13], subTemp[XPOS], subTemp[YPOS], imgShop[13].w/2, 0, imgShop[13].w/2, imgShop[13].h, VH);
        }
        xShop_FP.xTouchInfo.wPos = imgShop[13].w/2;
        xShop_FP.xTouchInfo.hPos = imgShop[13].h;
        xShop_FP.xTouchInfo.xPos = subTemp[XPOS]-xShop_FP.xTouchInfo.wPos/2;
        xShop_FP.xTouchInfo.yPos = subTemp[YPOS]-xShop_FP.xTouchInfo.hPos/2;
    }
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xShop_FP.xTouchInfo.xPos, xShop_FP.xTouchInfo.yPos, xShop_FP.xTouchInfo.wPos, xShop_FP.xTouchInfo.hPos);
//    setAlpha(255);
    
    int iMaxTabB = SHOPSELECTTABBMAX;
    
//    subTemp[XPOS] = px-495;
//    subTemp[YPOS] = py+46;
//    
//    drawImage(&imgShop[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[4].w, imgShop[4].h, VH);
    
    subTemp[XPOS] = px-495;
    subTemp[YPOS] = py-73;
    
    
    
    for(int i=0;i<iMaxTabB;i++)
    {
        if(i==xShop_FP.selectTabB)
        {
            drawImage(&imgShop[5], subTemp[XPOS], subTemp[YPOS]+i*(imgShop[5].h/5), 0, i*imgShop[5].h/5, imgShop[5].w, imgShop[5].h/5, VH);
        }
        else
        {
            drawImage(&imgShop[4], subTemp[XPOS], subTemp[YPOS]+i*(imgShop[4].h/5), 0, i*imgShop[4].h/5, imgShop[4].w, imgShop[4].h/5, VH);
        }
        xShop_FP.xTouchTabB[i].wPos = imgShop[5].w;
        xShop_FP.xTouchTabB[i].hPos = imgShop[5].h/5;
        xShop_FP.xTouchTabB[i].xPos = subTemp[XPOS]-xShop_FP.xTouchTabB[i].wPos/2;
        xShop_FP.xTouchTabB[i].yPos = subTemp[YPOS]+(i*(imgShop[5].h/5))-xShop_FP.xTouchTabB[i].hPos/2;
        
//        setAlpha(100);
//        gSetColor(0,255, 0);
//        fillRect(xShop_FP.xTouchTabB[i].xPos , xShop_FP.xTouchTabB[i].yPos , xShop_FP.xTouchTabB[i].wPos, xShop_FP.xTouchTabB[i].hPos);
//        setAlpha(ALPHA_MAX);

    }
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(subTemp[XPOS], subTemp[YPOS], imgShop[4].w, imgShop[4].h/SHOPSELECTTABBMAX);
//    setAlpha(ALPHA_MAX);
    
//    subTemp[XPOS] = px-144;
//    subTemp[YPOS] = py-142;
//    
//    drawImage(&imgShop[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[6].w, imgShop[6].h, VH);
    switch(xShop_FP.selectTabB)
    {
        case 0:
            xShop_FP.totalTabS = 6;
            break;
        case 1:
            xShop_FP.totalTabS = 7;
            break;
        case 4:
            xShop_FP.totalTabS = 4;
            break;
        default:
            break;
    }

    int iMaxTabS = xShop_FP.totalTabS;
    subTemp[XPOS] = px-144-285+48;
    subTemp[YPOS] = py-142;
    
    for(int i=0;i<iMaxTabS;i++)
    {
        switch (xShop_FP.selectTabB)
        {
            case 0:
                if(i==xShop_FP.selectTabS)
                {
                    drawImage(&imgShop[7], subTemp[XPOS]+i*(imgShop[7].w/xShop_FP.totalTabS), subTemp[YPOS], i*(imgShop[6].w/xShop_FP.totalTabS), 0, imgShop[7].w/xShop_FP.totalTabS, imgShop[7].h, VH);
                }
                else
                {
                    drawImage(&imgShop[6], subTemp[XPOS]+i*(imgShop[6].w/xShop_FP.totalTabS), subTemp[YPOS], i*(imgShop[6].w/xShop_FP.totalTabS), 0, imgShop[6].w/xShop_FP.totalTabS, imgShop[6].h, VH);
                }
                break;
            case 1:
                if(i==xShop_FP.selectTabS)
                {
                    drawImage(&imgShop[16], subTemp[XPOS]+i*(imgShop[16].w/xShop_FP.totalTabS), subTemp[YPOS], i*(imgShop[16].w/xShop_FP.totalTabS), 0, imgShop[16].w/xShop_FP.totalTabS, imgShop[16].h, VH);
                }
                else
                {
                    drawImage(&imgShop[15], subTemp[XPOS]+i*(imgShop[15].w/xShop_FP.totalTabS), subTemp[YPOS], i*(imgShop[15].w/xShop_FP.totalTabS), 0, imgShop[15].w/xShop_FP.totalTabS, imgShop[15].h, VH);
                }
                break;
            case 4:
                if(i==xShop_FP.selectTabS)
                {
                    drawImage(&imgShop[18], subTemp[XPOS]+i*(imgShop[18].w/xShop_FP.totalTabS), subTemp[YPOS], i*(imgShop[18].w/xShop_FP.totalTabS), 0, imgShop[18].w/xShop_FP.totalTabS, imgShop[18].h, VH);
                }
                else
                {
                    drawImage(&imgShop[17], subTemp[XPOS]+i*(imgShop[17].w/xShop_FP.totalTabS), subTemp[YPOS], i*(imgShop[17].w/xShop_FP.totalTabS), 0, imgShop[17].w/xShop_FP.totalTabS, imgShop[17].h, VH);
                }
                break;

            default:
                break;
        }
        
        xShop_FP.xTouchTabS[i].wPos = imgShop[7].w/6;
        xShop_FP.xTouchTabS[i].hPos = imgShop[7].h;
        xShop_FP.xTouchTabS[i].xPos = subTemp[XPOS]+(i*(imgShop[7].w/6))-xShop_FP.xTouchTabS[i].wPos/2;
        xShop_FP.xTouchTabS[i].yPos = subTemp[YPOS]-xShop_FP.xTouchTabS[i].hPos/2;
        
//        setAlpha(100);
//        gSetColor(0,0, 255);
//        fillRect(xShop_FP.xTouchTabS[i].xPos , xShop_FP.xTouchTabS[i].yPos , xShop_FP.xTouchTabS[i].wPos, xShop_FP.xTouchTabS[i].hPos);
//        setAlpha(ALPHA_MAX);
    }
//
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(subTemp[XPOS], subTemp[YPOS], imgShop[6].w/SHOPSELECTTABSMAX, imgShop[6].h);
//    setAlpha(ALPHA_MAX);

    switch (xShop_FP.selectTabB)
    {
        //의상
        case 0:
            {
                if(xShop_FP.selectTabS ==0)
                {
                    xShop_FP.totalNum = xFashionList_FP.parsingTotalNum;
                }
                else
                {
                    xShop_FP.totalNum = xFashionList_FP.parsingSlotTotalNum[xShop_FP.selectTabS-1];
                }
            }
            break;
        //인테리어
        case 1:
            {
                if(xShop_FP.selectTabS == 0)
                {
                    //전체 개수
                    xShop_FP.totalNum = xInterior.totalNum;
                }
                else
                {
                    //각탭별 총합
//                    xShop_FP.totalNum = ;
                }
            }
            break;
        //캐쉬샵
        case 4:
            {
                if(xShop_FP.selectTabS==0)
                {
                    //전체 개수
//                    xShop_FP.totalNum = ;
                }
                else
                {
                    //각탭별 총합
//                    xShop_FP.totalNum = ;
                }
            }
            break;
        default:
            break;
    }
    xShop_FP.xDragScrollShopList.totalNum = xShop_FP.totalNum;
    
    xShop_FP.xDragScrollShopList.posGab = 160;
    xShop_FP.xDragScrollShopList.endPos = -(((((xShop_FP.totalNum+1)/2)-6)*xShop_FP.xDragScrollShopList.posGab));
    
    if(((xShop_FP.xDragScrollShopList.totalNum+1)/2)<6)
    {
        xShop_FP.xDragScrollShopList.endPos=0;
    }
    int iMax=xShop_FP.totalNum;
    int pos = 0;
    int slotCode = 0;
    
    dragScrollPrc(&xShop_FP.xDragScrollShopList, 1, FALSE);
    
    subTemp[XPOS] = px-452;
    subTemp[YPOS] = py-121;

//    gSetColor(255, 0, 0);
//    setAlpha(100);
//    fillRect(subTemp[XPOS], subTemp[YPOS], imgShop[3].w, imgShop[3].h);
//    setAlpha(ALPHA_MAX);
    
    gSetClip(true, subTemp[XPOS], subTemp[YPOS], imgShop[3].w, imgShop[3].h);
    
    for(int i=0;i<iMax;i++)
    {
        pos = xShop_FP.xDragScrollShopList.pos+(xShop_FP.xDragScrollShopList.posGab*(i/2));
        subTemp[XPOS] = px-350+pos;
        subTemp[YPOS] = py-16+((i%2)*195);
        //케이스문으로 2번 묶을것...1번은 selectTabB, 나머지 1번은 selectTabS
        switch (xShop_FP.selectTabB)
        {
            //의상
            case 0:
                switch (xShop_FP.selectTabS)
                {
                    //전체
                    case 0:
                        {
                            slotCode = xFashionList_FP.xSlotS[i].code;
                            setMapData(slotCode);
                            drawImage(&imgShop[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[8].w, imgShop[8].h, VH);
                            drawImage(&imgFittingItem_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS]-20, 0, 0, imgFittingItem_FP[xMap.type][xMap.listNum].w, imgFittingItem_FP[xMap.type][xMap.listNum].h, VH);
                            sprintf(strTempS, "%s", xFashionList_FP.xSlotS[i].strName);
                            
                            int sizeStr = strlen(strTempS);
                            
                            if(sizeStr>27)
                            {
                                setFontSizeORI(12);
                            }
                            else
                            {
                                setFontSizeORI(14);
                            }
                            gSetColor(101, 48, 150);
                            gDrawString(subTemp[XPOS], subTemp[YPOS]-80, strTempS, VH);
                            setFontSize(11);
                            

                            if(xSaveTemp.lv.oriData<xFashionList_FP.xSlotS[i].lv)
                            {
                                drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                
                                sprintf(strTempS, "레벨 %d이상\n구매가능",xFashionList_FP.xSlotS[i].lv);
                                setFontSizeORI(16);
                                gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-30, strTempS, VH, 101, 48, 150, 255, 255, 255);
                                setFontSize(11);
                                
                                drawImage(&imgShop[26], subTemp[XPOS]-55, subTemp[YPOS]-83, 0, 0, imgShop[26].w/2, imgShop[26].h, VH);
                            }
                            else
                            {

                                if(xShop_FP.isTouchInfo==true)
                                {
                                    drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                }
                                
                                if(xFashionList_FP.xSlotS[i].isNew==1)
                                {
                                    drawImage(&imgShop[9], subTemp[XPOS]-52, subTemp[YPOS]-90, 0, 0, imgShop[9].w, imgShop[9].h, VH);
                                }

                            }

                            
                            drawImage(&imgShop[10], subTemp[XPOS]-40, subTemp[YPOS]+60, (imgShop[10].w/3)*xFashionList_FP.xSlotS[i].priceType, 0, imgShop[10].w/3, imgShop[10].h, VH);
                            if(xFashionList_FP.xSlotS[i].sale>0)
                            {
                                int saleprice = xFashionList_FP.xSlotS[i].price*(100-xFashionList_FP.xSlotS[i].sale)/100;
                                
                                if(saleprice<=0)
                                {
                                    saleprice=1;
                                }
                                sprintf(strTempS, "%d%% 할인중", xFashionList_FP.xSlotS[i].sale);
                                setFontSizeORI(18);
                                gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+20, strTempS, VH, 255, 13, 0, 255, 255, 255);
                                setFontSize(11);

                                setCommaNum(strTempS, xFashionList_FP.xSlotS[i].price);
                                setFontSizeORI(18);
                                gSetColor(163, 137, 141);
                                gDrawString(subTemp[XPOS]+45, subTemp[YPOS]+60, strTempS, VR);
                                setFontSize(11);
                                
                                drawImage(&imgShop[27], subTemp[XPOS]+20, subTemp[YPOS]+60, 0, 0, imgShop[27].w, imgShop[27].h, VH);
                                
                                setCommaNum(strTempS, saleprice);
                                setFontSizeORI(18);
                                gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]+40, strTempS, VR, 101, 48, 150, 255, 255, 255);
                                setFontSize(11);

                            }
                            else
                            {
                                setCommaNum(strTempS, xFashionList_FP.xSlotS[i].price);
                                setFontSizeORI(18);
                                gSetColor(101, 48, 150);
                                gDrawString(subTemp[XPOS]+45, subTemp[YPOS]+60, strTempS, VR);
                                setFontSize(11);
                            }
                        }
                        break;
                        //나머지
                    default:
                        {
                            slotCode = xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].code;
                            setMapData(slotCode);
                            drawImage(&imgShop[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[8].w, imgShop[8].h, VH);
                            drawImage(&imgFittingItem_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS]-20, 0, 0, imgFittingItem_FP[xMap.type][xMap.listNum].w, imgFittingItem_FP[xMap.type][xMap.listNum].h, VH);
                            
                            
                            
                            sprintf(strTempS, "%s", xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].strName);
                            
                            int sizeStr = strlen(strTempS);
                            
                            if(sizeStr>27)
                            {
                                setFontSizeORI(12);
                            }
                            else
                            {
                                setFontSizeORI(14);
                            }
                            gSetColor(101, 48, 150);
                            gDrawString(subTemp[XPOS], subTemp[YPOS]-80, strTempS, VH);
                            setFontSize(11);
                            
                            if(xSaveTemp.lv.oriData<xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].lv)
                            {
                                drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                
                                sprintf(strTempS, "레벨 %d이상\n구매가능",xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].lv);
                                setFontSizeORI(16);
                                gDrawStringBold(subTemp[XPOS], subTemp[YPOS]-30, strTempS, VH, 101, 48, 150, 255, 255, 255);
                                setFontSize(11);
                                
                                drawImage(&imgShop[26], subTemp[XPOS]-55, subTemp[YPOS]-83, 0, 0, imgShop[26].w/2, imgShop[26].h, VH);
                            }
                            else
                            {
                                
                                if(xShop_FP.isTouchInfo==true)
                                {
                                    drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                }
                                
                                if(xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].isNew==1)
                                {
                                    drawImage(&imgShop[9], subTemp[XPOS]-52, subTemp[YPOS]-90, 0, 0, imgShop[9].w, imgShop[9].h, VH);
                                }
                                
                            }
                            
                            drawImage(&imgShop[10], subTemp[XPOS]-40, subTemp[YPOS]+60, (imgShop[10].w/3)*xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].priceType, 0, imgShop[10].w/3, imgShop[10].h, VH);
                            
                            if(xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].sale>0)
                            {
                                int saleprice = xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].price*(100-xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].sale)/100;
                                
                                if(saleprice<=0)
                                {
                                    saleprice=1;
                                }
                                sprintf(strTempS, "%d%% 할인중", xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].sale);
                                setFontSizeORI(18);
                                gDrawStringBold(subTemp[XPOS], subTemp[YPOS]+20, strTempS, VH, 255, 13, 0, 255, 255, 255);
                                setFontSize(11);
                                
                                setCommaNum(strTempS, xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].price);
                                setFontSizeORI(18);
                                gSetColor(163, 137, 141);
                                gDrawString(subTemp[XPOS]+45, subTemp[YPOS]+60, strTempS, VR);
                                setFontSize(11);
                                
                                drawImage(&imgShop[27], subTemp[XPOS]+20, subTemp[YPOS]+60, 0, 0, imgShop[27].w, imgShop[27].h, VH);
                                
                                setCommaNum(strTempS, saleprice);
                                setFontSizeORI(18);
                                gDrawStringBold(subTemp[XPOS]+45, subTemp[YPOS]+40, strTempS, VR, 101, 48, 150, 255, 255, 255);
                                setFontSize(11);
                                
                            }
                            else
                            {
                                setCommaNum(strTempS, xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].price);
                                setFontSizeORI(18);
                                gSetColor(101, 48, 150);
                                gDrawString(subTemp[XPOS]+45, subTemp[YPOS]+60, strTempS, VR);
                                setFontSize(11);
                            }
                        }
                        break;
                }
                break;
            //인테리어
            case 1:
                {
                    switch (xShop_FP.selectTabS)
                    {
                        //전체
                        case 0:
                            {
                                drawImage(&imgShop[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[8].w, imgShop[8].h, VH);
                                
                                if(xShop_FP.isTouchInfo)
                                {
                                    drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                }
                            }
                            break;
                        //각 탭
                        default:
                            {
                                drawImage(&imgShop[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[8].w, imgShop[8].h, VH);
                                
                                if(xShop_FP.isTouchInfo)
                                {
                                    drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                }

                            }
                            break;
                    }
                }
                break;
            //캐쉬샵
            case 4:
                {
                    switch(xShop_FP.selectTabS)
                    {
                        //전체
                        case 0:
                            {
                                drawImage(&imgShop[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[8].w, imgShop[8].h, VH);
                                
                                if(xShop_FP.isTouchInfo)
                                {
                                    drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                }

                            }
                            break;
                        //나ㅓ지
                        default:
                            {
                                drawImage(&imgShop[8], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[8].w, imgShop[8].h, VH);
                                
                                if(xShop_FP.isTouchInfo)
                                {
                                    drawImage(&imgShop[12], subTemp[XPOS]-1, subTemp[YPOS]-30, 0, 0, imgShop[12].w, imgShop[12].h, VH);
                                }
                            }
                            break;
                    }
                }
                break;
            default:
                break;
        }
    }
    
    gSetClip(false, subTemp[XPOS], subTemp[YPOS], imgShop[3].w, imgShop[3].h);
    
    for(int i=0;i<xShop_FP.totalNum;i++)
    {
        pos = xShop_FP.xDragScrollShopList.pos+(xShop_FP.xDragScrollShopList.posGab*(i/2));
        //        subTemp[XPOS] = px-360+((i%6)*160);
        subTemp[XPOS] = px-350+pos;
        //        subTemp[YPOS] = py+10+((i/6)*xShop_FP.xDragScrollShopList.posGab)+xShop_FP.xDragScrollShopList.pos;
        subTemp[YPOS] = py-16+((i%2)*195);
        
        xShop_FP.xTouchSlot[i].wPos = imgShop[8].w;
        xShop_FP.xTouchSlot[i].hPos = imgShop[8].h-30;
        xShop_FP.xTouchSlot[i].xPos = subTemp[XPOS] - xShop_FP.xTouchSlot[i].wPos/2;
        xShop_FP.xTouchSlot[i].yPos = subTemp[YPOS] - xShop_FP.xTouchSlot[i].hPos/2;
        
//        setAlpha(100);
//        gSetColor(255, 0, 0);
//        fillRect(xShop_FP.xTouchSlot[i].xPos, xShop_FP.xTouchSlot[i].yPos, xShop_FP.xTouchSlot[i].wPos, xShop_FP.xTouchSlot[i].hPos);
//        setAlpha(ALPHA_MAX);
    }
    
    setFastScroll(cx-420, lcdH-50, imgShop[11].w, imgShop[11].h+10, &xShop_FP.xDragScrollShopList);
    
    int xx = xFastScroll.x;
    int yy = xFastScroll.y+xFastScroll.h/2;
    
    int nowPos = -xFastScroll.xDragScroll->pos;
    int endPos = -xFastScroll.xDragScroll->endPos;
    
    
    if(endPos != 0)
        xx+=nowPos * xFastScroll.w/endPos;
    
    xFastScroll.xTouchBar.xPos = xFastScroll.x;
    xFastScroll.xTouchBar.yPos = xFastScroll.y;
    xFastScroll.xTouchBar.wPos = xFastScroll.w;
    xFastScroll.xTouchBar.hPos = xFastScroll.h;
    
    int reSize = ((xShop_FP.xDragScrollShopList.totalNum-1)/6)+1;
    
    if(reSize<=0)
    {
        reSize=1;
    }
    
    int temp = (imgShop[11].w/reSize)/2;
    
    if(xx<=xFastScroll.x+temp)
    {
        xx=xFastScroll.x+temp;
    }
    
    else if(xx>=xFastScroll.x+xFastScroll.w-temp)
    {
        xx=xFastScroll.x+xFastScroll.w-temp;
    }
    
    gSetColor(0, 255, 0);
    setAlpha(100);
    fillRect(xFastScroll.x, xFastScroll.y, xFastScroll.w, xFastScroll.h);
    setAlpha(ALPHA_MAX);
    
    xGame.isReSizeDrawXY = true;
    xGame.reSizeX = 100/reSize;
    xGame.reSizeY = 100;
    
    drawImage(&imgShop[11], xx, yy, 0, 0, imgShop[11].w, imgShop[11].h, VH);

    xGame.isReSizeDrawXY = false;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////상점 입력 이벤트 처리 KBY
void keyShop_FP(int type, int param1, int param2, int touchId)
{
    bool isKeyEvent1;
    bool isKeyEvent2;
    int keyEventNum1;
    int keyEventNum2;
    
    
    if(type == MH_KEY_PRESSEVENT)
    {
        isKeyEvent1=FALSE;
        isKeyEvent2=FALSE;
        keyEventNum1=-1;
        keyEventNum2=-1;
        for(int j=0;j<SHOPSELECTTABBMAX;j++)
        {
            if(touchCheck(&xShop_FP.xTouchTabB[j])==TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isKeyEvent1=TRUE;
                keyEventNum1 = j;
                break;
            }
        }
        
        for(int i=0;i<SHOPSELECTTABSMAX;i++)
        {
            if(touchCheck(&xShop_FP.xTouchTabS[i])==TRUE && touchType == USER_POINT_PRESS_EVENT)
            {
                isKeyEvent2 = TRUE;
                keyEventNum2 = i;
                break;
            }
        }
        
        
        if(isKeyEvent1==TRUE)
        {
            playSnd(SND_MENU_OK);
            xShop_FP.selectTabS = 0;
            if(xShop_FP.selectTabB != keyEventNum1)
            {
                xShop_FP.selectTabB = keyEventNum1;
                

                //스크롤 초기화
                xShop_FP.xDragScrollShopList.touchXpos = DONT;
                xShop_FP.xDragScrollShopList.touchYpos = DONT;
                xShop_FP.xDragScrollShopList.touchXposBefore = DONT;
                xShop_FP.xDragScrollShopList.touchYposBefore = DONT;
                xShop_FP.xDragScrollShopList.selectNum = 0;
                xShop_FP.xDragScrollShopList.pos = 0;
                xShop_FP.xDragScrollShopList.speed = 0;
            }
        }
        
        if(isKeyEvent2==TRUE)
        {
            playSnd(SND_MENU_OK);
            if(xShop_FP.selectTabS != keyEventNum2)
            {
                xShop_FP.selectTabS = keyEventNum2;
                //스크롤 초기화
                
                xShop_FP.xDragScrollShopList.touchXpos = DONT;
                xShop_FP.xDragScrollShopList.touchYpos = DONT;
                xShop_FP.xDragScrollShopList.touchXposBefore = DONT;
                xShop_FP.xDragScrollShopList.touchYposBefore = DONT;
                xShop_FP.xDragScrollShopList.selectNum = 0;
                xShop_FP.xDragScrollShopList.pos = 0;
                xShop_FP.xDragScrollShopList.speed = 0;

            }

        }
        
        
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchClr=true;
        }
        
        else if(touchCheck(&xShop_FP.xTouchInfo)==TRUE  && touchType == USER_POINT_PRESS_EVENT)
        {
            if(xShop_FP.selectTabB==0||xShop_FP.selectTabB==1)
            {
                playSnd(SND_MENU_OK);
                if(xShop_FP.isTouchInfo==false)
                {
                    xShop_FP.isTouchInfo=true;
                }
                else
                {
                    xShop_FP.isTouchInfo=false;
                }
            }

        }
        
        else if(keyFastScroll(type, param1, param2, touchId, 0)==true||xTouch.yPos > lcdH-40)
        {
            
        }
        
        else
        {
            dragScrollKeyPrc(&xShop_FP.xDragScrollShopList, 0);
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(xShop_FP.xDragScrollShopList.touchXposBefore!=DONT)
        {
            dragScrollKeyPrc(&xShop_FP.xDragScrollShopList, 1);
        }
        
        else if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xShop_FP.isTouchClr=false;
            playSnd(SND_MENU_OK);
//            xWorldMap.isKeyReturn=TRUE;
            shopFreeload_FP(false);
            xWorldMap.state = WORLDMAP_STATE_PLAY;
        }
        
        else
        {
            //수정사항 있음 KBY 2018.2.27
            for(int i=0;i<xShop_FP.totalNum;i++)
            {
                if(touchCheck(&xShop_FP.xTouchSlot[i])==TRUE)
                {
                    switch (xShop_FP.selectTabB)
                    {
                        //의상
                        case 0:
                            switch (xShop_FP.selectTabS)
                            {
                                //전체
                                case 0:
                                    if (xSaveTemp.lv.oriData>=xFashionList_FP.xSlotS[i].lv)
                                    {
                                        xShop_FP.selectSlot = i;
                                        xShop_FP.isTouchNo=false;
                                        xShop_FP.isTouchYes=false;
                                        xShop_FP.isTouchPopUpClr=false;
                                        xShop_FP.state = SHOP_STATE_DRESSPOPUP;
                                        xShop_FP.state2 = SHOPPOPUP_STATE_MAIN;
                                    }
                                    else
                                    {
                                        setPopup(POPUP_SHOPLACKLV, playState, playState, 0, DONT);
                                    }
                                    break;
                                //나머지 탭
                                default:
                                    {
                                        if(xSaveTemp.lv.oriData>=xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][i].lv)
                                        {
                                            xShop_FP.selectSlot = i;
                                            xShop_FP.isTouchNo=false;
                                            xShop_FP.isTouchYes=false;
                                            xShop_FP.isTouchPopUpClr=false;
                                            xShop_FP.state = SHOP_STATE_DRESSPOPUP;
                                            xShop_FP.state2 = SHOPPOPUP_STATE_MAIN;
                                        }
                                        else
                                        {
                                            setPopup(POPUP_SHOPLACKLV, playState, playState, 0, DONT);
                                        }
                                    }
                                    break;
                            }
                            break;
                        //인테리어
                        case 1:
                            {
                                switch (xShop_FP.selectTabS)
                                {
                                    //전체
                                    case 0:
                                        //조건 달고....
                                        {
                                            xShop_FP.selectSlot = i;
                                            xShop_FP.isTouchNo=false;
                                            xShop_FP.isTouchYes=false;
                                            xShop_FP.isTouchPopUpClr=false;
                                            xShop_FP.state = SHOP_STATE_POPUP;
                                            xShop_FP.state2 = SHOPPOPUP_STATE_MAIN;
                                        }
                                        break;
                                    //나머지 탭
                                    default:
                                        //조건 달고....
                                        {
                                            xShop_FP.selectSlot = i;
                                            xShop_FP.isTouchNo=false;
                                            xShop_FP.isTouchYes=false;
                                            xShop_FP.isTouchPopUpClr=false;
                                            //DRESSPOPUP과 POPUP의 차이는 프리뷰 기능이 있고 없고의 차이....KBY 2017.2.27
                                            xShop_FP.state = SHOP_STATE_POPUP;
                                            xShop_FP.state2 = SHOPPOPUP_STATE_MAIN;
                                        }
                                        break;
                                }
                            }
                        default:
                            break;
                    }
                    break;
                }
            }
        }
        
        
        xShop_FP.xDragScrollShopList.touchXpos = DONT;
        xShop_FP.xDragScrollShopList.touchYpos = DONT;
        xShop_FP.xDragScrollShopList.touchXposBefore = DONT;
        xShop_FP.xDragScrollShopList.touchYposBefore = DONT;
        xShop_FP.isTouchClr = false;
        
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////의상 구매 팝업 Draw KBY
void drawDressShop_PopUp_FP()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    int slotCode;
    
    if(xShop_FP.selectTabS==0)
    {
        slotCode = xFashionList_FP.xSlotS[xShop_FP.selectSlot].code;
    }
    else
    {
        slotCode = xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][xShop_FP.selectSlot].code;
    }
    
    subTemp[XPOS] = px+12;
    subTemp[YPOS] = py+35;
    
    drawImage(&imgShop[19], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[19].w, imgShop[19].h, VH);
    if(xShop_FP.isTouchPopUpClr==false)
    {
        drawImage(&imgShop[1], subTemp[XPOS]+243, subTemp[YPOS]-140, 0, 0, imgShop[1].w/2, imgShop[1].h, VH);
    }
    else
    {
        drawImage(&imgShop[1], subTemp[XPOS]+243, subTemp[YPOS]-140, imgShop[1].w/2, 0, imgShop[1].w/2, imgShop[1].h, VH);
    }
    
    xTouchClr.wPos = imgShop[1].w/2;
    xTouchClr.hPos = imgShop[1].h;
    xTouchClr.xPos = subTemp[XPOS]+243-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-140-xTouchClr.hPos/2;
    
    drawImage(&imgShop[21], subTemp[XPOS]-130, subTemp[YPOS]-30, 0, 0, imgShop[21].w, imgShop[21].h, VH);
    
    xShop_FP.xTouchPreview.wPos = imgShop[21].w;
    xShop_FP.xTouchPreview.hPos = imgShop[21].h;
    xShop_FP.xTouchPreview.xPos = subTemp[XPOS]-130-xShop_FP.xTouchPreview.wPos/2;
    xShop_FP.xTouchPreview.yPos = subTemp[YPOS]-30-xShop_FP.xTouchPreview.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xShop_FP.xTouchPreview.xPos, xShop_FP.xTouchPreview.yPos, xShop_FP.xTouchPreview.wPos, xShop_FP.xTouchPreview.hPos);
//    setAlpha(ALPHA_MAX);
    
    setMapData(slotCode);
    
    drawImage(&imgFittingItem_FP[xMap.type][xMap.listNum], subTemp[XPOS]-130, subTemp[YPOS]-30, 0, 0, imgFittingItem_FP[xMap.type][xMap.listNum].w, imgFittingItem_FP[xMap.type][xMap.listNum].h, VH);
    
    sprintf(strTempS, "%s", xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].strName);
    setFontSizeORI(20);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS]+50, subTemp[YPOS]-80, strTempS, VH);
    setFontSize(11);
    
    drawImage(&imgShop[10], subTemp[XPOS]+10, subTemp[YPOS]-50, (imgShop[10].w/3)*xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].priceType, 0, imgShop[10].w/3, imgShop[10].h, VH);
    if(xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].sale>0)
    {
        int salePrice = xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].price*(100-xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].sale)/100;
        
        if(salePrice<=0)
        {
            salePrice=1;
        }
        
        sprintf(strTempS, "%d%% 할인중", xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].sale);
        setFontSizeORI(18);
        gDrawStringBold(subTemp[XPOS]-135, subTemp[YPOS]+15, strTempS, VH, 255, 13, 0, 255, 255, 255);
        setFontSize(11);
        
        setCommaNum(strTempS, xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].price);
        setFontSizeORI(18);
        gSetColor(163, 137, 141);
        gDrawString(subTemp[XPOS]+100, subTemp[YPOS]-30, strTempS, VR);
        setFontSize(11);
        
        drawImage(&imgShop[27], subTemp[XPOS]+80, subTemp[YPOS]-30, 0, 0, imgShop[27].w, imgShop[27].h, VH);
        
        setCommaNum(strTempS, salePrice);
//        setCommaNum(strTempS, 30000);
        setFontSizeORI(18);
        gDrawStringBold(subTemp[XPOS]+100, subTemp[YPOS]-50, strTempS, VR, 101, 48, 150, 255, 255, 255);
        setFontSize(11);

    }
    else
    {
        setCommaNum(strTempS, xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].price);
//        setCommaNum(strTempS, 30000);
        setFontSizeORI(18);
        gSetColor(101, 48, 150);
        gDrawString(subTemp[XPOS]+80, subTemp[YPOS]-50, strTempS, VH);
        setFontSize(11);
    }
    
    sprintf(strTempS, "구매하시겠습니까?");
    setFontSizeORI(16);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS]+60, subTemp[YPOS], strTempS, VH);
    setFontSize(11);
    
    if(xShop_FP.isTouchYes==false)
    {
        drawImage(&imgShop[20], subTemp[XPOS]+85, subTemp[YPOS]+100, 0, imgShop[20].h/2, imgShop[20].w/2, imgShop[20].h/2, VH);
    }
    else
    {
        drawImage(&imgShop[20], subTemp[XPOS]+85, subTemp[YPOS]+100, imgShop[20].w/2, imgShop[20].h/2, imgShop[20].w/2, imgShop[20].h/2, VH);
    }
    sprintf(strTempS, "구매하기");
    gSetColor(36, 50, 128);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]+85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    
    xShop_FP.xTouchYes.wPos = imgShop[20].w/2;
    xShop_FP.xTouchYes.hPos = imgShop[20].h/2;
    xShop_FP.xTouchYes.xPos = subTemp[XPOS]+85-xShop_FP.xTouchYes.wPos/2;
    xShop_FP.xTouchYes.yPos = subTemp[YPOS]+100-xShop_FP.xTouchYes.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xShop_FP.xTouchYes.xPos, xShop_FP.xTouchYes.yPos, xShop_FP.xTouchYes.wPos, xShop_FP.xTouchYes.hPos);
//    setAlpha(ALPHA_MAX);
    
    
    
    
    if(xShop_FP.isTouchNo==false)
    {
        drawImage(&imgShop[20], subTemp[XPOS]-85, subTemp[YPOS]+100, 0, 0, imgShop[20].w/2, imgShop[20].h/2, VH);
    }
    else
    {
        drawImage(&imgShop[20], subTemp[XPOS]-85, subTemp[YPOS]+100, imgShop[20].w/2, 0, imgShop[20].w/2, imgShop[20].h/2, VH);
    }
    sprintf(strTempS, "취소");
    gSetColor(106, 21, 97);
    setFontSizeORI(20);
    gDrawString(subTemp[XPOS]-85, subTemp[YPOS]+100, strTempS, VH);
    setFontSize(11);
    
    xShop_FP.xTouchNo.wPos = imgShop[20].w/2;
    xShop_FP.xTouchNo.hPos = imgShop[20].h/2;
    xShop_FP.xTouchNo.xPos = subTemp[XPOS]-85-xShop_FP.xTouchNo.wPos/2;
    xShop_FP.xTouchNo.yPos = subTemp[YPOS]+100-xShop_FP.xTouchNo.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xShop_FP.xTouchNo.xPos, xShop_FP.xTouchNo.yPos, xShop_FP.xTouchNo.wPos, xShop_FP.xTouchNo.hPos);
//    setAlpha(ALPHA_MAX);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////의상 구매 팝업 입력 이벤트 처리 KBY
void keyDressShopPopUp_FP(int type, int param1, int param2)
{
    int slotCode;
    bool BuyEvent=FALSE;
    if(type == MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchPopUpClr=true;
        }
        else if(touchCheck(&xShop_FP.xTouchYes)==TRUE && USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchYes=true;
        }
        else if(touchCheck(&xShop_FP.xTouchNo)==TRUE && USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchNo=true;
        }
        else if(touchCheck(&xShop_FP.xTouchPreview)==TRUE && USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchPopUpClr=false;
            xShop_FP.isTouchYes=false;
            xShop_FP.isTouchNo=false;
            xShop_FP.state2 = SHOPPOPUP_STATE_POPUP;
        }
    }
    else if(type == MH_KEY_RELEASEEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xShop_FP.isTouchPopUpClr=false;
            xShop_FP.isTouchYes=false;
            xShop_FP.isTouchNo=false;
            xShop_FP.state=SHOP_STATE_MAIN;
        }
        else if(touchCheck(&xShop_FP.xTouchNo)==TRUE && touchType==USER_POINT_RELEASE_EVENT)
        {
            xShop_FP.isTouchPopUpClr=false;
            xShop_FP.isTouchYes=false;
            xShop_FP.isTouchNo=false;
            xShop_FP.state=SHOP_STATE_MAIN;
        }
        else if(touchCheck(&xShop_FP.xTouchYes)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            //구매 프로토콜 쏘고 그 이후 처리는 상점 메인으로....
            if(xShop_FP.selectTabS==0)
            {
                slotCode = xFashionList_FP.xSlotS[xShop_FP.selectSlot].code;
            }
            else
            {
                slotCode = xFashionList_FP.xSlotTemp[xShop_FP.selectTabS-1][xShop_FP.selectSlot].code;
                
            }
            setMapData(slotCode);
            switch (xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].priceType)
            {
                case 0:
                    if(xSaveTemp.money.oriData<xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].price)
                    {
                        setPopup(POPUP_MONEYEMPTY, playState, playState, 0, DONT);
                    }
                    else
                    {
                        BuyEvent=TRUE;
                    }
                    break;
                case 1:
                    if(xSaveTemp.cash.oriData<xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].price)
                    {
                        setPopup(POPUP_CASHEMPTY, playState, playState, 0, DONT);
                    }
                    else
                    {
                        BuyEvent=TRUE;
                    }
                    break;

                default:
                    break;
            }
            if(BuyEvent==TRUE)
            {
                xEventQueueNet.code[xEventQueueNet.totalNum] = slotCode;
                addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_BUYDRESSCHAR, TRUE);
                xShop_FP.isTouchPopUpClr=false;
                xShop_FP.isTouchYes=false;
                xShop_FP.isTouchNo=false;
                xShop_FP.state=SHOP_STATE_MAIN;
            }
        }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////의상 구매 프리뷰 Draw KBY
void drawDressShopPreview_FP()
{
    int px = cx;
    int py = cy;
    int pos = ACT_FRONT;
    int type = 0;
    int code = 0;
    int layer = 0;
    
    drawBgFillRect();
    
    subTemp[XPOS] = px+20;
    subTemp[YPOS] = py+35;
    
    drawImage(&imgShop[22], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[22].w, imgShop[22].h, VH);
    
    drawImage(&imgShop[25], subTemp[XPOS], subTemp[YPOS]-25, 0, 0, imgShop[25].w, imgShop[25].h, VH);
    
    drawImage(&imgShop[24], subTemp[XPOS], subTemp[YPOS]+80, 0, 0, imgShop[24].w, imgShop[24].h, VH);
    if(xShop_FP.isTouchPreviewClr==false)
    {
        drawImage(&imgShop[1], subTemp[XPOS]+110, subTemp[YPOS]-140, 0, 0, imgShop[1].w/2, imgShop[1].h, VH);
    }
    else
    {
        drawImage(&imgShop[1], subTemp[XPOS]+110, subTemp[YPOS]-140, imgShop[1].w/2, 0, imgShop[1].w/2, imgShop[1].h, VH);
    }
    
    xTouchClr.wPos = imgShop[1].w/2;
    xTouchClr.hPos = imgShop[1].h;
    xTouchClr.xPos = subTemp[XPOS]+110-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-140-xTouchClr.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xTouchClr.xPos, xTouchClr.yPos, xTouchClr.wPos, xTouchClr.hPos);
//    setAlpha(255);
    
    subTemp[XPOS] = px-90;
    subTemp[YPOS] = py+30;
    if(xShop_FP.isTouchLeftArrow==false)
    {
        drawImage(&imgShop[23], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[23].w/4, imgShop[23].h, VH);
    }
    else
    {
        drawImage(&imgShop[23], subTemp[XPOS], subTemp[YPOS], (imgShop[23].w/4), 0, imgShop[23].w/4, imgShop[23].h, VH);
    }
    xShop_FP.xTouchLeftArrow.wPos = imgShop[23].w/4;
    xShop_FP.xTouchLeftArrow.hPos = imgShop[23].h;
    xShop_FP.xTouchLeftArrow.xPos = subTemp[XPOS] - xShop_FP.xTouchLeftArrow.wPos/2;
    xShop_FP.xTouchLeftArrow.yPos = subTemp[YPOS] - xShop_FP.xTouchLeftArrow.hPos/2;
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(xShop_FP.xTouchLeftArrow.xPos, xShop_FP.xTouchLeftArrow.yPos, xShop_FP.xTouchLeftArrow.wPos, xShop_FP.xTouchLeftArrow.hPos);
//    setAlpha(ALPHA_MAX);
    
    subTemp[XPOS] = px+130;
    subTemp[YPOS] = py+30;
    xGame.isReverse = true;
    if(xShop_FP.isTouchRightArrow==false)
    {
        drawImage(&imgShop[23], subTemp[XPOS], subTemp[YPOS], 0, 0, imgShop[23].w/4, imgShop[23].h, VH);
        //        drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], (imgFitting[10].w/4)*2, 0, imgFitting[10].w/4, imgFitting[10].h, VH);
        
    }
    else
    {
        //        drawImage(&imgFitting[10], subTemp[XPOS], subTemp[YPOS], (imgFitting[10].w/4)*3, 0, imgFitting[10].w/4, imgFitting[10].h, VH);
        drawImage(&imgShop[23], subTemp[XPOS], subTemp[YPOS], (imgShop[23].w/4), 0, imgShop[23].w/4, imgShop[23].h, VH);
    }
    xShop_FP.xTouchRightArrow.wPos = imgShop[23].w/4;
    xShop_FP.xTouchRightArrow.hPos = imgShop[23].h;
    xShop_FP.xTouchRightArrow.xPos = subTemp[XPOS] - xShop_FP.xTouchRightArrow.wPos/2;
    xShop_FP.xTouchRightArrow.yPos = subTemp[YPOS] - xShop_FP.xTouchRightArrow.hPos/2;
    xGame.isReverse=false;

    subTemp[XPOS]=px+20;
    subTemp[YPOS]=py+170;
    sprintf(strTempS, "%s", xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].strName);
    setFontSizeORI(20);
    gSetColor(101, 48, 150);
    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
    setFontSize(11);
    
    switch(xShop_FP.pos)
    {
        case 0:
        case 1:
            pos = ACT_FRONT;
            break;
        case 2:
        case 3:
            pos = ACT_BACK;
            break;
        default:
            pos= ACT_FRONT;
            break;
    }
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //의상 레이어에 마네킹바디 넣기
    setNpcBodyBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos], pos);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    xFitting_FP.xModel.xF.code[xMap.type] = xFashionList_FP.xSlotTemp[xMap.type][xMap.listNum].code;
    //의상 레이어에 의상 넣기
    setSpritFBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos],&xFitting_FP.xModel.xF,pos);
    
    //헤어셋팅
    for(int k=0; k < 15; k++)
    {
        if(xLayer.xData[xHairMakeUp.xData[xFitting_FP.hairNum/1000][xFitting_FP.hairNum%1000].layerNum].xData[ACT_FRONT][k] != -1)
        {
            type = xFitting_FP.hairNum/1000;
            code = xFitting_FP.hairNum%1000;
            layer = xHairMakeUp.xData[type][code].layerNum;
            
            if(xLayer.xData[layer].xData[ACT_FRONT][k] != -1)
            {
                xSpritNpc[NPC_ACT_FITTINGROOM][ACT_FRONT].imgLayer[xLayer.xData[layer].xData[ACT_FRONT][k]][ACT_FRONT] = &xFitting_FP.imgHair[ACT_FRONT][k];
            }
            
            if(xLayer.xData[layer].xData[ACT_BACK][k] != -1)
            {
                xSpritNpc[NPC_ACT_FITTINGROOM][ACT_BACK].imgLayer[xLayer.xData[layer].xData[ACT_BACK][k]][ACT_BACK] = &xFitting_FP.imgHair[ACT_BACK][k];
            }
        }
    }
    
    //얼굴셋팅
    for(int k=0; k < 15; k++)
    {
        if(xLayer.xData[xHairMakeUp.xData[xFitting_FP.faceNum/1000][xFitting_FP.faceNum%1000].layerNum].xData[ACT_FRONT][k] != -1)
        {
            type = xFitting_FP.faceNum/1000;
            code = xFitting_FP.faceNum%1000;
            layer = xHairMakeUp.xData[type][code].layerNum;
            
            if(xLayer.xData[layer].xData[ACT_FRONT][k] != -1)
            {
                xSpritNpc[NPC_ACT_FITTINGROOM][ACT_FRONT].imgLayer[xLayer.xData[layer].xData[ACT_FRONT][k]][ACT_FRONT] = &xFitting_FP.imgFace;
            }
            
            if(xLayer.xData[layer].xData[ACT_BACK][k] != -1)
            {
                xSpritNpc[NPC_ACT_FITTINGROOM][ACT_BACK].imgLayer[xLayer.xData[layer].xData[ACT_BACK][k]][ACT_BACK] = &xFitting_FP.imgFace;
            }
        }
    }
    
    xSpritNpc[NPC_ACT_FITTINGROOM][pos].nowDelay = xFitting_FP.xModel.nowDelay;
    xSpritNpc[NPC_ACT_FITTINGROOM][pos].nowFrame = xFitting_FP.xModel.nowFrame;
    prcSprit(&xSpritNpc[NPC_ACT_FITTINGROOM][pos], &xFitting_FP.xModel.nowDelay, &xFitting_FP.xModel.nowFrame);
    subTemp[XPOS] = px+20;
    subTemp[YPOS] = py-20;
    switch(xShop_FP.pos)
    {
        case 1:
        case 3:
            reverseSpritBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos],subTemp[XPOS],subTemp[YPOS],pos,&xFitting_FP.xModel.xFace);
            break;
        default:
            drawSpritBig_FP(&xSpritNpc[NPC_ACT_FITTINGROOM][pos],subTemp[XPOS],subTemp[YPOS],pos,&xFitting_FP.xModel.xFace);
            break;
    }
    

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////의상 구매 프리뷰 입력 이벤트 처리 KBY

void keyDressShopPreview_FP(int type, int param1, int param2)
{
    if(type==MH_KEY_PRESSEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchPreviewClr=true;
        }
        
        else if(touchCheck(&xShop_FP.xTouchLeftArrow)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchLeftArrow = true;
        }
        else if(touchCheck(&xShop_FP.xTouchRightArrow)==TRUE && touchType == USER_POINT_PRESS_EVENT)
        {
            xShop_FP.isTouchRightArrow = true;
        }
    }
    else if(type==MH_KEY_RELEASEEVENT)
    {
        if(touchCheck(&xTouchClr)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xShop_FP.isTouchPreviewClr=false;
            xShop_FP.isTouchLeftArrow=false;
            xShop_FP.isTouchRightArrow=false;
            
            for(int i = 0; i < SPRIT_IMGLAYERMAX; i++)
            {
                xFitting_FP.xModel.xF.code[i] = xMyCharacter.xF.code[i];
            }

            xShop_FP.state2 = SHOPPOPUP_STATE_MAIN;
        }
        
        else if(touchCheck(&xShop_FP.xTouchLeftArrow)==TRUE && touchType == USER_POINT_RELEASE_EVENT)
        {
            xShop_FP.isTouchLeftArrow=false;
            xShop_FP.pos--;
            if (xShop_FP.pos<0)
            {
                xShop_FP.pos=3;
            }
        }
        
        else if(touchCheck(&xShop_FP.xTouchRightArrow)==TRUE && touchType==USER_POINT_RELEASE_EVENT)
        {
            xShop_FP.isTouchRightArrow=false;
            xShop_FP.pos++;
            if (xShop_FP.pos>3)
            {
                xShop_FP.pos=0;
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////우편함 이미지 로드 KBY

void mailFreeLoad_FP(bool isLoad)
{
    if(isLoad==true)
    {
        loadImg("productionexiticon.png", &imgMail[0]);
        loadImg("fitting_base.png", &imgMail[1]);
        loadImg("mail_title.png", &imgMail[2]);
        loadImg("mail_frame_base.png", &imgMail[3]);
        loadImg("mail_tab_on.png", &imgMail[4]);
        loadImg("mail_tab_off.png", &imgMail[5]);
        loadImg("mail_box_text.png", &imgMail[6]);
        loadImg("mail_icon_alert.png", &imgMail[7]);
        loadImg("mail_slot.png", &imgMail[8]);
        loadImg("selectcheck.png", &imgMail[9]);
        loadImg("checkbox.png", &imgMail[10]);
        loadImg("friendList_btn_delete.png", &imgMail[11]);
        loadImg("production_close.png", &imgMail[12]);
        ////////////////////////////////////////////////////////////////////////////////////
        //이미지 로드 수정 사항 KBY 2018.2.26
        loadImg("default_btn.png", &imgBtn);
    }
    else
    {
        freeImg(&imgMail[0]);
        freeImg(&imgMail[1]);
        freeImg(&imgMail[2]);
        freeImg(&imgMail[3]);
        freeImg(&imgMail[4]);
        freeImg(&imgMail[5]);
        freeImg(&imgMail[6]);
        freeImg(&imgMail[7]);
        freeImg(&imgMail[8]);
        freeImg(&imgMail[9]);
        freeImg(&imgMail[10]);
        freeImg(&imgMail[11]);
        freeImg(&imgMail[12]);
        freeImg(&imgBtn);
    }
}

void drawMail_FP()
{
    int px = cx;
    int py = cy;
    
    drawBgFillRect();
    
    drawImage(&imgMail[1], px, py+50, 0, 0, imgMail[1].w, imgMail[1].h, VH);
    
    subTemp[XPOS] = lcdW-40;
    subTemp[YPOS] = py-180;
    
    drawImage(&imgMail[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[0].w/2, imgMail[0].h, VH);
    
    xTouchClr.wPos = imgMail[0].w;
    xTouchClr.hPos = imgMail[0].h;
    xTouchClr.xPos = subTemp[XPOS]-xTouchClr.wPos/2;
    xTouchClr.yPos = subTemp[YPOS]-xTouchClr.hPos/2;
    
    subTemp[XPOS] = px-448;
    subTemp[YPOS] = py-220;
    
    drawImage(&imgMail[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[2].w, imgMail[2].h, VH);
    
    subTemp[XPOS] = px+30;
    subTemp[YPOS] = py+80;
    
    drawImage(&imgMail[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[3].w, imgMail[3].h, VH);
    
    
    subTemp[XPOS] = px-465;
    subTemp[YPOS] = py-80;
    
//    xWorldMap.isFriendMap = TRUE;
    if(xWorldMap.isFriendMap == FALSE)
    {
        for(int i=0;i<3;i++)
        {
            if(i==xMail.selectTab)
            {
                drawImage(&imgMail[4], subTemp[XPOS], subTemp[YPOS]+i*(imgMail[4].h/3), 0, i*(imgMail[4].h/3), imgMail[4].w, imgMail[4].h/3, VH);
            }
            else
            {
                drawImage(&imgMail[5], subTemp[XPOS], subTemp[YPOS]+i*(imgMail[5].h/3), 0, i*(imgMail[5].h/3), imgMail[5].w, imgMail[5].h/3, VH);
            }
            
            xMail.xTouchTab[i].wPos = imgMail[4].w;
            xMail.xTouchTab[i].hPos = imgMail[4].h/3;
            xMail.xTouchTab[i].xPos = subTemp[XPOS]-xMail.xTouchTab[i].wPos/2;
            xMail.xTouchTab[i].yPos = subTemp[YPOS]+(i*(imgMail[4].h/3))-xMail.xTouchTab[i].hPos/2;
            
            //        setAlpha(100);
            //        gSetColor(0,255, 0);
            //        fillRect(xMail_FP.xTouchTab[i].xPos , xMail_FP.xTouchTab[i].yPos , xMail_FP.xTouchTab[i].wPos, xMail_FP.xTouchTab[i].hPos);
            //        setAlpha(ALPHA_MAX);
            
        }
    }
    else
    {
        drawImage(&imgMail[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[5].w, imgMail[5].h/3, VH);
    }
    
    if(xWorldMap.isFriendMap==FALSE)
    {
        switch (xMail.selectTab)
        {
            case 0:
            case 1:
                subTemp[XPOS] = px-330;
                subTemp[YPOS] = py-158;
                
                setFontSizeORI(16);
                gSetColor(101, 48, 150);
                gDrawString(subTemp[XPOS], subTemp[YPOS], "비밀글", VH);
                setFontSize(11);
                
                subTemp[XPOS] = px-375;
                subTemp[YPOS] = py-160;
                
                drawImage(&imgMail[10], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[10].w, imgMail[10].h, VH);
                
                xMail.xTouchSecret.wPos = imgMail[10].w+10;
                xMail.xTouchSecret.hPos = imgMail[10].h+10;
                xMail.xTouchSecret.xPos = subTemp[XPOS]-xMail.xTouchSecret.wPos/2;
                xMail.xTouchSecret.yPos = subTemp[YPOS]-xMail.xTouchSecret.hPos/2;
                
                //            xMail_FP.isSecret=true;
                if(xMail.isSecret==true)
                {
                    drawImage(&imgMail[9], subTemp[XPOS]+7, subTemp[YPOS]-10, 0, 0, imgMail[9].w, imgMail[9].h, VH);
                }
                
                //            setAlpha(100);
                //            gSetColor(255, 0, 0);
                //            fillRect(xMail_FP.xTouchSecret.xPos , xMail_FP.xTouchSecret.yPos , xMail_FP.xTouchSecret.wPos, xMail_FP.xTouchSecret.hPos);
                //            setAlpha(ALPHA_MAX);
                
                subTemp[XPOS] = px+55;
                subTemp[YPOS] = py-160;
                drawImage(&imgMail[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[6].w, imgMail[6].h, VH);
                
                xMail.xTouchTextBox.wPos = imgMail[6].w;
                xMail.xTouchTextBox.hPos = imgMail[6].h;
                xMail.xTouchTextBox.xPos = subTemp[XPOS]-xMail.xTouchTextBox.wPos/2;
                xMail.xTouchTextBox.yPos = subTemp[YPOS]-xMail.xTouchTextBox.hPos/2;
                
                //            setAlpha(100);
                //            gSetColor(255, 0, 0);
                //            fillRect(xMail_FP.xTouchTextBox.xPos , xMail_FP.xTouchTextBox.yPos , xMail_FP.xTouchTextBox.wPos, xMail_FP.xTouchTextBox.hPos);
                //            setAlpha(ALPHA_MAX);
                
                subTemp[XPOS] = px-280;
                subTemp[YPOS] = py-160;
                setFontSizeORI(18);
                gSetColor(204, 169, 219);
                //빌드 에러로 인한 수정 KBY 2018.2.26
                if(strlen(xMail.strTextBox)>0)
                {
                    gDrawString(subTemp[XPOS], subTemp[YPOS], xMail.strTextBox, VL);
                }
                else
                {
                    sprintf(strTempS, "내용을 입력해주세요.");
                    gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
                }
                
                
                
                subTemp[XPOS] = lcdW-165;
                subTemp[YPOS] = py-160;
                
                drawImage(&imgBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgBtn.w/2, imgBtn.h/2, VH);
                
                xMail.xTouchSendBtn.wPos = imgBtn.w/2;
                xMail.xTouchSendBtn.hPos = imgBtn.h/2;
                xMail.xTouchSendBtn.xPos = subTemp[XPOS]-xMail.xTouchSendBtn.wPos/2;
                xMail.xTouchSendBtn.yPos = subTemp[YPOS]-xMail.xTouchSendBtn.hPos/2;
                
                //            setAlpha(100);
                //            gSetColor(255, 0, 0);
                //            fillRect(xMail_FP.xTouchSendBtn.xPos , xMail_FP.xTouchSendBtn.yPos , xMail_FP.xTouchSendBtn.wPos, xMail_FP.xTouchSendBtn.hPos);
                //            setAlpha(ALPHA_MAX);
                
                setFontSizeORI(20);
                gSetColor(101, 48, 150);
                gDrawString(subTemp[XPOS], subTemp[YPOS], "전송", VH);
                setFontSize(11);
                break;
            case 2:
                subTemp[XPOS] = px+340;
                subTemp[YPOS] = py-160;
                
                gSetColor(101, 48, 150);
                setFontSizeORI(16);
                sprintf(strTempS, "*선물함이 가득 차면 가장 오래된 선물부터 삭제됩니다.");
                gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VR);
            default:
                break;
        }
    }
    else
    {
        subTemp[XPOS] = px-330;
        subTemp[YPOS] = py-158;
        
        setFontSizeORI(16);
        gSetColor(101, 48, 150);
        gDrawString(subTemp[XPOS], subTemp[YPOS], "비밀글", VH);
        setFontSize(11);
        
        subTemp[XPOS] = px-375;
        subTemp[YPOS] = py-160;
        
        drawImage(&imgMail[10], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[10].w, imgMail[10].h, VH);
        
        xMail.xTouchSecret.wPos = imgMail[10].w+10;
        xMail.xTouchSecret.hPos = imgMail[10].h+10;
        xMail.xTouchSecret.xPos = subTemp[XPOS]-xMail.xTouchSecret.wPos/2;
        xMail.xTouchSecret.yPos = subTemp[YPOS]-xMail.xTouchSecret.hPos/2;
        
        //            xMail_FP.isSecret=true;
        if(xMail.isSecret==true)
        {
            drawImage(&imgMail[9], subTemp[XPOS]+7, subTemp[YPOS]-10, 0, 0, imgMail[9].w, imgMail[9].h, VH);
        }
        
        //            setAlpha(100);
        //            gSetColor(255, 0, 0);
        //            fillRect(xMail_FP.xTouchSecret.xPos , xMail_FP.xTouchSecret.yPos , xMail_FP.xTouchSecret.wPos, xMail_FP.xTouchSecret.hPos);
        //            setAlpha(ALPHA_MAX);
        
        subTemp[XPOS] = px+55;
        subTemp[YPOS] = py-160;
        drawImage(&imgMail[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgMail[6].w, imgMail[6].h, VH);
        
        xMail.xTouchTextBox.wPos = imgMail[6].w;
        xMail.xTouchTextBox.hPos = imgMail[6].h;
        xMail.xTouchTextBox.xPos = subTemp[XPOS]-xMail.xTouchTextBox.wPos/2;
        xMail.xTouchTextBox.yPos = subTemp[YPOS]-xMail.xTouchTextBox.hPos/2;
        
        //            setAlpha(100);
        //            gSetColor(255, 0, 0);
        //            fillRect(xMail_FP.xTouchTextBox.xPos , xMail_FP.xTouchTextBox.yPos , xMail_FP.xTouchTextBox.wPos, xMail_FP.xTouchTextBox.hPos);
        //            setAlpha(ALPHA_MAX);
        
        subTemp[XPOS] = px-280;
        subTemp[YPOS] = py-160;
        setFontSizeORI(18);
        gSetColor(204, 169, 219);
        //빌드 에러로 인한 수정 KBY 2018.2.26
        if(strlen(xMail.strTextBox)>0)
        {
            gDrawString(subTemp[XPOS], subTemp[YPOS],  xMail.strTextBox, VL);
        }
        else
        {
            sprintf(strTempS, "내용을 입력해주세요.");
            gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VL);
        }
        
        
        
        subTemp[XPOS] = lcdW-165;
        subTemp[YPOS] = py-160;
        
        drawImage(&imgBtn, subTemp[XPOS], subTemp[YPOS], 0, 0, imgBtn.w/2, imgBtn.h/2, VH);
        
        xMail.xTouchSendBtn.wPos = imgBtn.w/2;
        xMail.xTouchSendBtn.hPos = imgBtn.h/2;
        xMail.xTouchSendBtn.xPos = subTemp[XPOS]-xMail.xTouchSendBtn.wPos/2;
        xMail.xTouchSendBtn.yPos = subTemp[YPOS]-xMail.xTouchSendBtn.hPos/2;
        
        //            setAlpha(100);
        //            gSetColor(255, 0, 0);
        //            fillRect(xMail_FP.xTouchSendBtn.xPos , xMail_FP.xTouchSendBtn.yPos , xMail_FP.xTouchSendBtn.wPos, xMail_FP.xTouchSendBtn.hPos);
        //            setAlpha(ALPHA_MAX);
        
        setFontSizeORI(20);
        gSetColor(101, 48, 150);
        gDrawString(subTemp[XPOS], subTemp[YPOS], "전송", VH);
        setFontSize(11);
    }
    
//    setAlpha(100);
//    gSetColor(255, 0, 0);
//    fillRect(px-423 , py-128, imgMail[3].w, imgMail[3].h);
//    setAlpha(ALPHA_MAX);
    xMail.xDragScrollSlot.totalNum = xMail.totalMailSlot;
    xMail.xDragScrollSlot.posGab = 130;
    
    if(0>=xMail.pageNum)
    {
        isSubTemp[13]=FALSE;
        for(int ee=0;ee<xEventQueueNet.totalNum;ee++)
        {
            if(xEventQueueNet.type[ee] == NETQUEUE_TYPE_MAILLIST || xEventQueueNet.type[ee] == NETQUEUE_TYPE_GIFTLIST)
            {
                isSubTemp[13] = TRUE;
                break;
            }
        }
        
        if(isSubTemp[13] == FALSE)
        {
            //////////////////////////////////////////////////////////////////////////////////////////
            switch(xMail.selectTab)
            {
                case 0:
                case 2:
                    if(xWorldMap.isFriendMap == FALSE)
                        xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xNetData.userNum;
                    else
                        xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xFriendData[xFriendMap.selectDataSlotNum].userNum;
                    break;
                case 1:
                    xEventQueueNet.friendNum[xEventQueueNet.totalNum] = xMail.pmUserId;
                    break;
            }
            
            xEventQueueNet.code[xEventQueueNet.totalNum] = xMail.rowNum;
            xEventQueueNet.slotNum[xEventQueueNet.totalNum] = xMail.pageNum;
            xMail.pageNum++;
            switch(xMail.selectTab)
            {
                case 0:
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
                    break;
                case 1:
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_MAILLIST, TRUE);
                    break;
                case 2:
                    addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GIFTLIST, TRUE);
                    break;
            }
            //////////////////////////////////////////////////////////////////////////////////////////
        }

    }
    
    xMail.xDragScrollSlot.endPos=-(((xMail.xDragScrollSlot.totalNum-3)*xMail.xDragScrollSlot.posGab));
    if(xMail.xDragScrollSlot.totalNum<=3)
        xMail.xDragScrollSlot.endPos=0;
    else
        xMail.xDragScrollSlot.endPos +=110;
    
    int iMax = xMail.xDragScrollSlot.totalNum;
    int pos = 0;
    dragScrollPrc(&xMail.xDragScrollSlot, 1, FALSE);
    gSetClip(true, px-423, py-128, imgMail[3].w, imgMail[3].h);
    subTemp[XPOS] = px+40;
    subTemp[YPOS] = py-40;
    for(int i=0;i<iMax;i++)
    {
        pos = xMail.xDragScrollSlot.pos+(xMail.xDragScrollSlot.posGab*i);
        if(subTemp[YPOS]+pos < -xMail.xDragScrollSlot.posGab||subTemp[YPOS]+pos>lcdW+xMail.xDragScrollSlot.posGab)
            continue;
        
        switch (xMail.selectTab)
        {
            case 0:
            case 1:
                if(xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum == xNetData.userNum)
                {
                    drawImage(&imgMail[8], subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgMail[8].w, imgMail[8].h, VH);
                    drawFriendProfile(subTemp[XPOS]-345, subTemp[YPOS]+pos, xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum, 100);
//                    drawPacker(imgMailSlotBg1, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgMailSlotBg1), imgH(imgMailSlotBg1), VH);
                   
                    
                    gSetColor(101, 48, 150);
                    setFontSizeORI(18);
                    sprintf(strTempS, "%s(Lv.%d)",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName,xFriendData[xMail.xMailSlot[i].friendDataSlotNum].lv);
                    if(xMail.xMailSlot[i].isSecret == TRUE)
//                        drawPacker(imgSecret1, subTemp[XPOS]-205-106-13, subTemp[YPOS]+pos-48, 0, 0, imgW(imgSecret1), imgH(imgSecret1), VH);
                        drawImage(&imgMail[12], subTemp[XPOS]+380, subTemp[YPOS]+pos-45, 0, 0, imgMail[12].w/2, imgMail[12].h, VH);
                    gDrawString(subTemp[XPOS]-165-106, subTemp[YPOS]+pos-38, strTempS, VL);
                    
                    gSetColor(101, 48, 150);
                    setLabelWidth(510);
                    gDrawString(subTemp[XPOS]-170-100, subTemp[YPOS]+pos-18, xMail.xMailSlot[i].strText, TL);
                    setLabelWidth(0);
                    setFontSize(11);
                    
                    setFontSizeORI(14);
                    gDrawString(subTemp[XPOS]-170-100, subTemp[YPOS]+pos+48, xMail.xMailSlot[i].strTime, VL);
                    
                    setFontSize(11);
                    
//                    drawPacker(imgFriendDelBtn, subTemp[XPOS]+330, subTemp[YPOS]+pos-56, 0, 0, imgW(imgFriendDelBtn), imgH(imgFriendDelBtn), VH);
                    drawImage(&imgMail[11], subTemp[XPOS]+380, subTemp[YPOS]+pos+33, 0, 0, imgMail[11].w/2, imgMail[11].h, VH);
                }
                else
                {
                    drawImage(&imgMail[8], subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgMail[8].w, imgMail[8].h, VH);
                    drawFriendProfile(subTemp[XPOS]-345, subTemp[YPOS]+pos, xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum, 100);
//                    drawPacker(imgMailSlotBg0, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgMailSlotBg0), imgH(imgMailSlotBg0), VH);
                    
                    gSetColor(101, 48, 150);
                    setFontSizeORI(18);
                    sprintf(strTempS, "%s(Lv.%d)",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName,xFriendData[xMail.xMailSlot[i].friendDataSlotNum].lv);
                    if(xMail.xMailSlot[i].isSecret == TRUE)
//                        drawPacker(imgSecret1, subTemp[XPOS]-205-13, subTemp[YPOS]+pos-48, 0, 0, imgW(imgSecret1), imgH(imgSecret1), VH);
                        drawImage(&imgMail[12], subTemp[XPOS]+380, subTemp[YPOS]+pos-45, 0, 0, imgMail[12].w/2, imgMail[12].h, VH);
                    
                    gDrawString(subTemp[XPOS]-165-106, subTemp[YPOS]+pos-38, strTempS, VL);
                   
                    
                    gSetColor(101, 48, 150);
                    setLabelWidth(510);
                    gDrawString(subTemp[XPOS]-170-100, subTemp[YPOS]+pos-18, xMail.xMailSlot[i].strText, TL);
                    setLabelWidth(0);
                    setFontSize(11);
                    
                    
                    setFontSizeORI(14);
                    gDrawString(subTemp[XPOS]-170-100, subTemp[YPOS]+pos+48, xMail.xMailSlot[i].strTime, VL);
                    
                    setFontSize(11);
                    
                    if((xWorldMap.isFriendMap == FALSE && xMail.selectTab == 0) || xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum == xNetData.userNum)
//                        drawPacker(imgFriendDelBtn, subTemp[XPOS]+330, subTemp[YPOS]+pos-56, 0, 0, imgW(imgFriendDelBtn), imgH(imgFriendDelBtn), VH);
                        drawImage(&imgMail[11], subTemp[XPOS]+380, subTemp[YPOS]+pos+33, 0, 0, imgMail[11].w/2, imgMail[11].h, VH);
                }
                break;
            case 2:
                drawImage(&imgMail[8], subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgMail[8].w, imgMail[8].h, VH);
                drawFriendProfile(subTemp[XPOS]-345, subTemp[YPOS]+pos, xFriendData[xMail.xMailSlot[i].friendDataSlotNum].userNum, 100);
//                drawPacker(imgMailSlotBg0, subTemp[XPOS], subTemp[YPOS]+pos, 0, 0, imgW(imgMailSlotBg0), imgH(imgMailSlotBg0), VH);
                
                gSetColor(101, 48, 150);
                setFontSizeORI(18);
                sprintf(strTempS, "%s(Lv.%d)",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName,xFriendData[xMail.xMailSlot[i].friendDataSlotNum].lv);
                gDrawString(subTemp[XPOS]-224, subTemp[YPOS]+pos-48, strTempS, VL);
                gDrawString(subTemp[XPOS]+310, subTemp[YPOS]+pos-48, xMail.xMailSlot[i].strTime, VR);
                setFontSize(11);
                
                
                if(xMail.xMailSlot[i].type == 0)
                {
                    gSetColor(101, 48, 150);
                    setFontSizeORI(18);
                    setLabelWidth(560);
                    sprintf(strTempS, "%s님이 보낸 선물입니다.",xFriendData[xMail.xMailSlot[i].friendDataSlotNum].strNickName);
                    gDrawString(subTemp[XPOS]-210, subTemp[YPOS]+pos-10, strTempS, VL);
                    setLabelWidth(0);
                    setFontSize(11);
                }
                else
                {
                    gSetColor(101, 48, 150);
                    setFontSizeORI(18);
                    setLabelWidth(560);
                    gDrawString(subTemp[XPOS]-210, subTemp[YPOS]+pos-10, xMail.xMailSlot[i].strText, VL);
                    setLabelWidth(0);
                    setFontSize(11);
                }
                
                
                
                switch(xMail.xMailSlot[i].giftType)
                {
                case 0:	//의상 아이템
                    setMapData(xMail.xMailSlot[i].giftValue.oriData);
                    sprintf(strTempS, "첨부선물 : %s(의상)",xFashionData[xMap.type][xMap.listNum].strName);
                    break;
                case 1:	//헤어
                    setMapData(xMail.xMailSlot[i].giftValue.oriData);
                    sprintf(strTempS, "첨부선물 : %s(헤어)",xObj.xObjData[xMap.type][xMap.listNum].strName);
                    break;
                case 2:	//표정
                    setCommaNum(strTempB, xMail.xMailSlot[i].giftValue.oriData);
                    sprintf(strTempS, "첨부선물 : %s(표정)",strTempB);
                    break;
                case 3:	//인테리어
                    sprintf(strTempS, "첨부선물 : %s",xMail.xMailSlot[i].giftValue.oriData);
                    break;
                case 4:	//골드(추가)
                    setCommaNum(strTempB, xMail.xMailSlot[i].giftValue.oriData);
                    sprintf(strTempS, "첨부선물 : %s골드", strTempB);
                    break;
                case 5:	//캐시
                    setCommaNum(strTempB, xMail.xMailSlot[i].giftValue.oriData);
                    sprintf(strTempS, "첨부선물 : %s 크리스탈", strTempB);
                    break;
                case 6:	//당근
                    setCommaNum(strTempB, xMail.xMailSlot[i].giftValue.oriData);
                    sprintf(strTempS, "첨부선물 : 당근 %s개", strTempB);
                    break;
                case 7:	//경험치
                    setCommaNum(strTempB, xMail.xMailSlot[i].giftValue.oriData);
                    sprintf(strTempS, "첨부선물 : 경험치 %s", strTempB);
                    break;
                case 8:	//판매용 의상
                    setMapData(xMail.xMailSlot[i].giftValue.oriData);
//                    sprintf(strTempS, "첨부선물 : %s(판매용)", xCatalog_FP.xSlot[xMap.type][xMap.listNum].strName);
                    break;
                case 9:	//재료(온실/물레)
                    setMapData(xMail.xMailSlot[i].giftValue.oriData);
//                    sprintf(strTempS, "첨부선물 : %s(재료)", );
                    break;
                default:
                    break;
                }
                
                gDrawString(subTemp[XPOS]-210, subTemp[YPOS]+pos-31+60, strTempS, VL);
                
                if(xMail.xMailSlot[i].isRecvOk == FALSE)
                {
                    
                    if(xWorldMap.isFriendMap == FALSE)
                    {
                        if(i == 0)
                        {
                            if(xSave.giftLastKey != xMail.giftLastKey)
                            {
                                xSave.giftLastKey = xMail.giftLastKey;
                                gameSave(SAVE_SLOT_GAME);
                            }
                        }
                    }
                    drawPacker(imgMailGiftBtn, subTemp[XPOS]+273, subTemp[YPOS]+pos+6, 0, 0, imgW(imgMailGiftBtn), imgH(imgMailGiftBtn), VH);
                }
                else
                {
                    if(xWorldMap.isFriendMap == FALSE)
                    {
                        if(i == 0)
                        {
                            if(xSave.giftLastKey != 0 || xMail.giftLastKey != 0)
                            {
                                xMail.giftLastKey = 0;
                                xSave.giftLastKey = 0;
                                gameSave(SAVE_SLOT_GAME);
                            }
                        }
                    }
                }
                
                
                break;
            default:
                break;
        }
    }
    gSetClip(false, 0, 0, lcdW, lcdH);
}
void startSendMachine_FP()
{
	FreeLoadSendMachine_FP(true);
	xWorldMap.state = WORLDMAP_STATE_SENDMACHINE_FP;
	xSendMachine_FP.state = SENDMACHINE_STATE_WAIT;
	xSendMachine_FP.stateSub = SENDMACHINE_SUBSTATE_INFO;
	xSendMachine_FP.btnType = SENDMACHINE_BTNTYPE_NONE;
	
	xSendMachine_FP.xData[0].state = SENDMACHINE_STATE_WAIT;
	
	xSendMachine_FP.xData[0].bkey = getProductionIndex(xMap.dataKey[xMap.nowFloor][MAP_TYPE_OBJ][xSelectTileOne.tileNumX][xSelectTileOne.tileNumY]);
	
	
	xSendMachine_FP.xDragScrollS.touchXpos=DONT;
	xSendMachine_FP.xDragScrollS.touchYpos=DONT;
	xSendMachine_FP.xDragScrollS.touchXposBefore=DONT;
	xSendMachine_FP.xDragScrollS.touchYposBefore=DONT;
	xSendMachine_FP.xDragScrollS.selectNum=0;
	xSendMachine_FP.xDragScrollS.pos=0;
	xSendMachine_FP.xDragScrollS.speed=0;
	
	xSendMachine_FP.xDragScrollB.touchXpos=DONT;
	xSendMachine_FP.xDragScrollB.touchYpos=DONT;
	xSendMachine_FP.xDragScrollB.touchXposBefore=DONT;
	xSendMachine_FP.xDragScrollB.touchYposBefore=DONT;
	xSendMachine_FP.xDragScrollB.selectNum=0;
	xSendMachine_FP.xDragScrollB.pos=0;
	xSendMachine_FP.xDragScrollB.speed=0;
	
	xSendMachine_FP.selectNum = DONT;
	
	xSendMachine_FP.anyCnt = 0;
	xSendMachine_FP.gameCnt = 0;
	xSendMachine_FP.endCnt = 0;
	
	for(int i = 0; i < 16; i++)
	{
		xSendMachine_FP.xSlot[i].itemNum = DONT;
		xSendMachine_FP.xSlot[i].itemCnt = 0;
		xSendMachine_FP.xSlot[i].startTime = 0;
		xSendMachine_FP.xSlot[i].endTime = 0;
		xSendMachine_FP.xSlot[i].key = 0;
	}
	
	xSendMachine_FP.xSendSlot.itemNum = DONT;
	xSendMachine_FP.xSendSlot.itemCnt = 0;
	xSendMachine_FP.xSendSlot.startTime = 0;
	xSendMachine_FP.xSendSlot.endTime = 0;
	xSendMachine_FP.xSendSlot.key = 0;
	
	xSendMachine_FP.isSendEnd = false;
	
	//전송기 정보
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMACHINEINFO, TRUE);
	
	//전송기 슬롯정보
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMACHINESLOTINFO, TRUE);
	
	//현재 보유중인 의상번호 및 의상개수
	addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_GETDRESSINFO, TRUE);
	
	
}

void endSendMachine_FP()
{
	FreeLoadSendMachine_FP(false);
	xWorldMap.state = WORLDMAP_STATE_PLAY;
}

void keySendMachine_FP(M_Int32 type,M_Int32 param1,M_Int32 param2)
{
	if(type == MH_KEY_PRESSEVENT)
	{
		for(int k=0;k<xSendMachine_FP.dressSlotTotal;k++)
		{
			if(touchCheck(&xSendMachine_FP.xTouchStorage[k])==TRUE && touchType == USER_POINT_PRESS_EVENT)
			{
				xSendMachine_FP.selectNum = k;
				break;
			}
		}
		
		if(touchCheck(&xSendMachine_FP.xTouchExit) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			//나가기
			setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_EXIT);
		}
		else if(touchCheck(&xSendMachine_FP.xTouchUpgrade) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			//업그레이드 버튼
			setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_UPGRADE);
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_LEFT]) == TRUE && xSendMachine_FP.xDragScrollS.selectNum > 0 && touchType == USER_POINT_PRESS_EVENT)
		{
			//보유의상 리스트 왼쪽 화살표 버튼
			setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_STORAGEL);
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_RIGHT]) == TRUE && xSendMachine_FP.xDragScrollS.selectNum < xSendMachine_FP.xDragScrollS.totalNum-1
				&& touchType == USER_POINT_PRESS_EVENT)
		{
			//보유의상 리스트 오른쪽 화살표 버튼
			setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_STORAGER);
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT]) == TRUE && xSendMachine_FP.xDragScrollB.selectNum > 0 && touchType == USER_POINT_PRESS_EVENT)
		{
			//대기슬롯 리스트 왼쪽 화살표 버튼
			setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_SLOTL);
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT]) == TRUE && xSendMachine_FP.xDragScrollB.selectNum < xSendMachine_FP.xDragScrollB.totalNum-1
				&& touchType == USER_POINT_PRESS_EVENT)
		{
			//대기슬롯 리스트 오른쪽 화살표 버튼
			setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_SLOTR);
		}
		else if(touchCheck(&xSendMachine_FP.xTouchOpenSlot) == TRUE && touchType == USER_POINT_PRESS_EVENT)
		{
			//대기슬롯 오픈 버튼
			setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_LOCK);
		}
		else
			dragScrollKeyPrc(&xSaleShop.xDragScroll,0);
		
	}
	else if(type == MH_KEY_RELEASEEVENT)
	{
		if(touchCheck(&xSendMachine_FP.xTouchExit) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
		{
			//나가기
			playSnd(SND_MENU_OK);
			endSendMachine_FP();
			xWorldMap.isKeyReturn = TRUE;
		}
		else if(touchCheck(&xSendMachine_FP.xTouchUpgrade) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
		{
			//업그레이드 팝업호출
			playSnd(SND_MENU_OK);
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_LEFT]) == TRUE && xSendMachine_FP.xDragScrollS.selectNum > 0 && touchType == USER_POINT_RELEASE_EVENT)
		{
			//보유의상 리스트 왼쪽 화살표 버튼
			playSnd(SND_MENU_OK);
			xSendMachine_FP.xDragScrollS.speed = 640;
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_RIGHT]) == TRUE &&
				xSendMachine_FP.xDragScrollS.selectNum < xSendMachine_FP.xDragScrollS.totalNum-1 && touchType == USER_POINT_RELEASE_EVENT)
		{
			//보유의상 리스트 오른쪽 화살표 버튼
			playSnd(SND_MENU_OK);
			xSendMachine_FP.xDragScrollS.speed = -640;
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT]) == TRUE && xSendMachine_FP.xDragScrollB.selectNum > 0 && touchType == USER_POINT_RELEASE_EVENT)
		{
			//대기슬롯 리스트 왼쪽 화살표 버튼
			playSnd(SND_MENU_OK);
			xSendMachine_FP.xDragScrollB.speed = 640;
		}
		else if(touchCheck(&xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT]) == TRUE &&
				xSendMachine_FP.xDragScrollB.selectNum < xSendMachine_FP.xDragScrollB.totalNum-1 && touchType == USER_POINT_RELEASE_EVENT)
		{
			//대기슬롯 리스트 오른쪽 화살표 버튼
			playSnd(SND_MENU_OK);
			xSendMachine_FP.xDragScrollB.speed = -640;
		}
		else if(touchCheck(&xSendMachine_FP.xTouchOpenSlot) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
		{
			//대기슬롯추가 팝업호출
			playSnd(SND_MENU_OK);
			
			if(xSendMachine_FP.xData[0].totalSlot >= SENDMACHINE_SLOTMAX)
			{
				
				setPopup(POPUP_USERTEXT, playState, playState, 0, DONT);
				sprintf(xPopup.strText, "전송기\n슬롯을 더이상 확장할 수 없습니다.");
				xWorldMap.isKeyReturn = FALSE;
			}
			else
			{
				setPopup(POPUP_SENDMACHINESLOTOPEN, PLAY_PLAY, PLAY_PLAY, 0, DONT);
			}
		}
		else if(touchCheck(&xSendMachine_FP.xTouchSlot) == TRUE && touchType == USER_POINT_RELEASE_EVENT)
		{
			//대기슬롯에 판매의상 넣기
			setSlotDress(xSendMachine_FP.selectNum, 1+xSendMachine_FP.xData[0].lv);
		}
		xSendMachine_FP.selectNum = DONT;
		setSendMachineBtnType_FP(SENDMACHINE_BTNTYPE_NONE);
	}
}

void prcSendMachine_FP()
{
	xSendMachine_FP.anyCnt++;
	if(xSendMachine_FP.anyCnt > 10000 || isPlaySendMachine() == false)
		xSendMachine_FP.anyCnt = 0;
	
	switch(xSendMachine_FP.state)
	{
		case SENDMACHINE_STATE_WAIT:
			xSendMachine_FP.gameCnt = 0;
			break;
		case SENDMACHINE_STATE_START:
			xSendMachine_FP.gameCnt++;
			if(xSendMachine_FP.gameCnt >= 40)
				xSendMachine_FP.state = SENDMACHINE_STATE_LOOP;
			break;
		case SENDMACHINE_STATE_LOOP:
			xSendMachine_FP.gameCnt++;
			if(xSendMachine_FP.gameCnt > 114)
				xSendMachine_FP.gameCnt = 40;
			break;
	}
	
	if(xSendMachine_FP.isSendEnd == true)
	{
		xSendMachine_FP.endCnt++;
		if(xSendMachine_FP.endCnt > 20)
		{
			xSendMachine_FP.endCnt = 0;
			xSendMachine_FP.isSendEnd = false;
		}
	}
	
	
	//	if(isPlaySendMachine() == false && xSendMachine_FP.xSendSlot.itemNum == DONT)
	//		xSendMachine_FP.gameCnt = 0;
	//	else
	//	{
	//		xSendMachine_FP.gameCnt++;
	//		if(xSendMachine_FP.gameCnt > 114)
	//			xSendMachine_FP.gameCnt = 40;
	//	}
	
	//	if(xSendMachine_FP.xSendSlot.itemNum != DONT && xSendMachine_FP.gameCnt == 29)
	//	{
	//		//0번대기슬롯 의상이 전송슬롯에 도착했을때
	//		for(int i = 0; i < xSendMachine_FP.xData[0].totalSlot-1; i++)
	//		{
	//			xSendMachine_FP.xSlot[i].key = xSendMachine_FP.xSlot[i+1].key;
	//			xSendMachine_FP.xSlot[i].itemNum = xSendMachine_FP.xSlot[i+1].itemNum;
	//			xSendMachine_FP.xSlot[i].itemCnt = xSendMachine_FP.xSlot[i+1].itemCnt;
	//			xSendMachine_FP.xSlot[i].startTime = xSendMachine_FP.xSlot[i+1].startTime;
	//			xSendMachine_FP.xSlot[i].endTime = xSendMachine_FP.xSlot[i+1].endTime;
	//
	//			xSendMachine_FP.xSlot[i+1].key = 0;
	//			xSendMachine_FP.xSlot[i+1].itemNum = DONT;
	//			xSendMachine_FP.xSlot[i+1].itemCnt = 0;
	//			xSendMachine_FP.xSlot[i+1].startTime = 0;
	//			xSendMachine_FP.xSlot[i+1].endTime = 0;
	//
	//		}
	//	}
	
	//전송완료
	if(xSendMachine_FP.xSendSlot.itemNum != DONT && xCalendar.nowTime >= xSendMachine_FP.xSendSlot.endTime && xSendMachine_FP.xSendSlot.key != 0)
	{
		//전송기 전송완료 요청
		xEventQueueNet.typeNum[xEventQueueNet.totalNum] = 1;
		xEventQueueNet.bkey[xEventQueueNet.totalNum] = xSendMachine_FP.xData[0].bkey;
		xEventQueueNet.idx[xEventQueueNet.totalNum] = xSendMachine_FP.xSendSlot.key;
		xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = xSendMachine_FP.xSendSlot.itemNum;
		xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum] = xSendMachine_FP.xSendSlot.itemCnt;
		xEventQueueNet.start_time[xEventQueueNet.totalNum] = xSendMachine_FP.xSendSlot.startTime;
		xEventQueueNet.end_time[xEventQueueNet.totalNum] = xSendMachine_FP.xSendSlot.endTime;
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMACHINESLOTUPDATE, TRUE);
		
		//전송기 슬롯정보
		xEventQueueNet.bkey[xEventQueueNet.totalNum] = xSendMachine_FP.xData[0].bkey;
		addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMACHINESLOTINFO, TRUE);
		
		xSendMachine_FP.xSendSlot.itemNum = DONT;
		
		xSendMachine_FP.stateSub = SENDMACHINE_SUBSTATE_END;
	}
}

void drawSendMachine_FP()
{
	int px = cx;
	int py = cy;
	
	int pos;
	int slotCode;
	int slotNum;
	int temp;
	int totalnum;
	int SendMachineIndex = 0;
	int x = 0;
	int y = 0;
	int alpha = 0;
	int rotate = 0;
	int scale = 0;
	
	drawBgFillRect();
	
	//BG
	subTemp[XPOS] = 0;
	subTemp[YPOS] = lcdH - imgSendMachine_BG.h;
	drawImage(&imgSendMachine_BG, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_BG.w, imgSendMachine_BG.h, TL);
	
	//타이틀
	subTemp[XPOS] = 0;
	subTemp[YPOS] = lcdH - imgSendMachine_BG.h - imgSendMachine_Title.h/4 - 10;
	
	drawImage(&imgSendMachine_Title, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Title.w, imgSendMachine_Title.h, TL);
	sprintf(strTempS,"전송기 LV.%d",xSendMachine_FP.xData[0].lv+1);
	gDrawString(subTemp[XPOS]+imgSendMachine_Title.w/2, subTemp[YPOS]+imgSendMachine_Title.h-32, strTempS, VH);
	
	
	//Exit버튼
	subTemp[XPOS] = lcdW-40;
	subTemp[YPOS] = py-180;
	
	if(xSendMachine_FP.btnType == SENDMACHINE_BTNTYPE_EXIT)
		drawImage(&imgSendMachine_BtnExit, subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnExit.w/2, 0, imgSendMachine_BtnExit.w/2, imgSendMachine_BtnExit.h, VH);
	else
		drawImage(&imgSendMachine_BtnExit, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_BtnExit.w/2, imgSendMachine_BtnExit.h, VH);
	
	xSendMachine_FP.xTouchExit.wPos = imgSendMachine_BtnExit.w;
	xSendMachine_FP.xTouchExit.hPos = imgSendMachine_BtnExit.h;
	xSendMachine_FP.xTouchExit.xPos = subTemp[XPOS]-xSendMachine_FP.xTouchExit.wPos/2;
	xSendMachine_FP.xTouchExit.yPos = subTemp[YPOS]-xSendMachine_FP.xTouchExit.hPos/2;
	
	//업그레이드버튼
	subTemp[XPOS] = imgSendMachine_BG.w - 230;
	subTemp[YPOS] = lcdH - imgSendMachine_BG.h + 23 + (65 - imgSendMachine_BtnUpgrade.h)/2;
	
	if(xSendMachine_FP.btnType == SENDMACHINE_BTNTYPE_UPGRADE)
		drawImage(&imgSendMachine_BtnUpgrade, subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnUpgrade.w/2, 0, imgSendMachine_BtnUpgrade.w/2, imgSendMachine_BtnUpgrade.h, TL);
	else
		drawImage(&imgSendMachine_BtnUpgrade, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_BtnUpgrade.w/2, imgSendMachine_BtnUpgrade.h, TL);
	
	xSendMachine_FP.xTouchUpgrade.wPos = imgSendMachine_BtnUpgrade.w/2;
	xSendMachine_FP.xTouchUpgrade.hPos = imgSendMachine_BtnUpgrade.h;
	xSendMachine_FP.xTouchUpgrade.xPos = subTemp[XPOS];
	xSendMachine_FP.xTouchUpgrade.yPos = subTemp[YPOS];
	
	
	//보유의상리스트
	subTemp[XPOS] = px-448-imgSendMachine_Storage[0].w/2;
	subTemp[YPOS] = py-30-imgSendMachine_Storage[0].h/2;
	drawImage(&imgSendMachine_Storage[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Storage[0].w, imgSendMachine_Storage[0].h, TL);
	
	subTemp[XPOS] = px+2-imgSendMachine_Storage[1].w/2;
	subTemp[YPOS] = py-30-imgSendMachine_Storage[1].h/2;
	drawImage(&imgSendMachine_Storage[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Storage[1].w, imgSendMachine_Storage[1].h, TL);
	
	subTemp[XPOS] = px+450-imgSendMachine_Storage[2].w/2;
	subTemp[YPOS] = py-30-imgSendMachine_Storage[2].h/2;
	drawImage(&imgSendMachine_Storage[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Storage[2].w, imgSendMachine_Storage[2].h, TL);
	
	subTemp[XPOS] = px-imgSendMachine_StorageTitle.w/2;
	subTemp[YPOS] = py-90-imgSendMachine_StorageTitle.h/2;
	drawImage(&imgSendMachine_StorageTitle, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_StorageTitle.w, imgSendMachine_StorageTitle.h, TL);
	
	
	
	subTemp[XPOS] = px-448;
	subTemp[YPOS] = py-30;
	if(xSendMachine_FP.xDragScrollS.selectNum == 0)
		drawImage(&imgSendMachine_BtnArrow[0], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[0].w*2/6, 0, imgSendMachine_BtnArrow[0].w/6, imgSendMachine_BtnArrow[0].h, VH);
	else if(xSendMachine_FP.btnType == SENDMACHINE_BTNTYPE_STORAGEL)
		drawImage(&imgSendMachine_BtnArrow[0], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[0].w*4/6, 0, imgSendMachine_BtnArrow[0].w/6, imgSendMachine_BtnArrow[0].h, VH);
	else
		drawImage(&imgSendMachine_BtnArrow[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_BtnArrow[0].w/6, imgSendMachine_BtnArrow[0].h, VH);
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_LEFT].wPos = imgSendMachine_Storage[0].w+40;
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_LEFT].hPos = imgSendMachine_Storage[0].h;
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_LEFT].xPos = px-448-imgSendMachine_Storage[0].w/2-20;
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_LEFT].yPos = py-30-imgSendMachine_Storage[0].h/2;
	
	subTemp[XPOS] = px+450;
	subTemp[YPOS] = py-30;
	if(xSendMachine_FP.xDragScrollS.selectNum == xSendMachine_FP.xDragScrollS.totalNum-1)
		drawImage(&imgSendMachine_BtnArrow[0], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[0].w*3/6, 0, imgSendMachine_BtnArrow[0].w/6, imgSendMachine_BtnArrow[0].h, VH);
	else if(xSendMachine_FP.btnType == SENDMACHINE_BTNTYPE_STORAGER)
		drawImage(&imgSendMachine_BtnArrow[0], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[0].w*5/6, 0, imgSendMachine_BtnArrow[0].w/6, imgSendMachine_BtnArrow[0].h, VH);
	else
		drawImage(&imgSendMachine_BtnArrow[0], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[0].w/6, 0, imgSendMachine_BtnArrow[0].w/6, imgSendMachine_BtnArrow[0].h, VH);
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_RIGHT].wPos = imgSendMachine_Storage[2].w+40;
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_RIGHT].hPos = imgSendMachine_Storage[2].h;
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_RIGHT].xPos = px+450-imgSendMachine_Storage[2].w/2-20;
	xSendMachine_FP.xTouchArrow[0][SENDMACHINE_BTNDIR_RIGHT].yPos = py-30-imgSendMachine_Storage[2].h/2;
	
	//    setAlpha(100);
	//    gSetColor(0, 0, 255);
	//    fillRect(xProduction_FP.xTouchLeftBtn.xPos, xProduction_FP.xTouchLeftBtn.yPos, xProduction_FP.xTouchLeftBtn.wPos, xProduction_FP.xTouchLeftBtn.hPos);
	//    setAlpha(ALPHA_MAX);
	
	totalnum = xSendMachine_FP.dressSlotTotal;
	xSendMachine_FP.xDragScrollS.totalNum = 1+(xSendMachine_FP.dressSlotTotal-1)/8;
	xSendMachine_FP.xDragScrollS.posGab = 1280;
	dragScrollPrc(&xSendMachine_FP.xDragScrollS, 0, FALSE);
	
	gSetClip(true, px-430, 0, 860, lcdH);
	//    gSetColor(0,255,0);
	//    setAlpha(100);
	//    fillRect(px-430, 0, 860, lcdH);
	//    setAlpha(ALPHA_MAX);
	for(int page =-1;page<=xSendMachine_FP.xDragScrollS.totalNum;page++)
	{
		if(xSendMachine_FP.xDragScrollS.selectNum+page>=0 && xSendMachine_FP.xDragScrollS.selectNum+page<xSendMachine_FP.xDragScrollS.totalNum)
		{
			for(int i=0;i<8;i++)
			{
				if(((xSendMachine_FP.xDragScrollS.selectNum+page)*8)+i>=totalnum)
					break;
				
				pos = xSendMachine_FP.xDragScrollS.pos+(xSendMachine_FP.xDragScrollS.posGab*page);
				subTemp[XPOS] = px-420+pos+((i%8)*105);
				subTemp[YPOS] = py-80;
				
				//그림자
				drawImage(&imgSendMachine_Storage[3], subTemp[XPOS]+45, subTemp[YPOS]+80, 0, 0, imgSendMachine_Storage[3].w, imgSendMachine_Storage[3].h, VH);
				
				
				
				slotNum = ((xSendMachine_FP.xDragScrollS.selectNum+page)*8)+i;
				//                slotCode = xCatalog_FP.xSlot[0][slotNum].code;
				slotCode = xSendMachine_FP.xDress[slotNum].itemNum;
				
				xSendMachine_FP.xTouchStorage[slotNum].wPos = 90;
				xSendMachine_FP.xTouchStorage[slotNum].hPos = 100;
				xSendMachine_FP.xTouchStorage[slotNum].xPos = subTemp[XPOS];
				xSendMachine_FP.xTouchStorage[slotNum].yPos = subTemp[YPOS];
				/*
				 gSetColor(255, 0, 0);
				 setAlpha(100);
				 fillRect(xSendMachine_FP.xTouchStorage[slotNum].xPos, xSendMachine_FP.xTouchStorage[slotNum].yPos, xSendMachine_FP.xTouchStorage[slotNum].wPos, xSendMachine_FP.xTouchStorage[slotNum].hPos);
				 setAlpha(ALPHA_MAX);
				 */
				setMapData(slotCode);
				loadFashionFImg_FP(xMap.type, xMap.listNum);
				
				//보유의상
				xGame.fgameScale = 0.6f;
				xGame.fgameScaleCx = subTemp[XPOS]+110;
				xGame.fgameScaleCy = subTemp[YPOS];
				drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS]-20, 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
				
				xGame.fgameScaleCx=cx;
				xGame.fgameScaleCy=cy;
				xGame.fgameScale = 1.0f;
				
				//보유의사개수
				subTemp[XPOS]+=50;
				subTemp[YPOS]+=70;
				drawNum(&imgSendMachine_Num, subTemp[XPOS], subTemp[YPOS], xSendMachine_FP.xDress[slotNum].itemCnt,0,VL);
				
				//                gSetColor(255, 0, 0);
				//                setAlpha(100);
				//                fillRect(subTemp[XPOS], subTemp[YPOS], 90, 100);
				//                setAlpha(ALPHA_MAX);
				
				
				
				//                gSetColor(0, 0, 0);
				//                sprintf(strTempS,"%d",i);
				//                gDrawString(subTemp[XPOS], subTemp[YPOS], strTempS, VH);
				
				
			}
		}
	}
	gSetClip(false, 0, 0, lcdW, lcdH);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//전송슬롯
	if(xSendMachine_FP.gameCnt <= 39)
	{
		switch(xSendMachine_FP.gameCnt)
		{
			case 30:xGame.reSize=100;break;
			case 31:xGame.reSize=103;break;
			case 32:xGame.reSize=105;break;
			case 33:xGame.reSize=105;break;
			case 34:xGame.reSize=105;break;
			case 35:xGame.reSize=104;break;
			case 36:xGame.reSize=103;break;
			case 37:xGame.reSize=103;break;
			case 38:xGame.reSize=102;break;
			case 39:xGame.reSize=102;break;
			default:xGame.reSize=100;break;
		}
	}
	else
	{
		switch(xSendMachine_FP.gameCnt)
		{
			case 0: xGame.reSize=101; break;
			case 12: xGame.reSize=102; break;
			case 13: xGame.reSize=103; break;
			case 14: xGame.reSize=103; break;
			case 15: xGame.reSize=102; break;
			case 16: xGame.reSize=102; break;
			case 17: xGame.reSize=101; break;
			case 23: xGame.reSize=102; break;
			case 24: xGame.reSize=103; break;
			case 25: xGame.reSize=103; break;
			case 26: xGame.reSize=102; break;
			case 27: xGame.reSize=102; break;
			case 28: xGame.reSize=101; break;
			case 36: xGame.reSize=102; break;
			case 37: xGame.reSize=103; break;
			case 38: xGame.reSize=103; break;
			case 39: xGame.reSize=102; break;
			case 40: xGame.reSize=102; break;
			case 41: xGame.reSize=101; break;
			case 47: xGame.reSize=102; break;
			case 48: xGame.reSize=103; break;
			case 49: xGame.reSize=103; break;
			case 50: xGame.reSize=102; break;
			case 51: xGame.reSize=102; break;
			case 52: xGame.reSize=101; break;
			case 63: xGame.reSize=102; break;
			case 64: xGame.reSize=103; break;
			case 65: xGame.reSize=103; break;
			case 66: xGame.reSize=102; break;
			case 67: xGame.reSize=102; break;
			case 68: xGame.reSize=101; break;
			default:xGame.reSize=100; break;
		}
	}
	xGame.isReSizeDraw = true;
	subTemp[XPOS] = px-440+imgSendMachine_Display.w/2;
	subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-15;
	drawImage(&imgSendMachine_Slot[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Slot[0].w, imgSendMachine_Slot[0].h, VH);
	xGame.reSize=100;
	xGame.isReSizeDraw = false;
	
	//전송디스플레이
	subTemp[XPOS] = px-440;
	subTemp[YPOS] = py+215;
	drawImage(&imgSendMachine_Display, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Display.w, imgSendMachine_Display.h, TL);
	
	//전송디스플레이화살표
	subTemp[YPOS] = py+215+21;
	switch(xSendMachine_FP.anyCnt%29)
	{
		case 0:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w+0; setAlpha(0*ALPHA_MAX/100);	break;
		case 1:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-3; setAlpha(100*ALPHA_MAX/100);	break;
		case 2:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-7; setAlpha(100*ALPHA_MAX/100);	break;
		case 3:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-10; setAlpha(100*ALPHA_MAX/100);	break;
		case 4:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-13; setAlpha(100*ALPHA_MAX/100);	break;
		case 5:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-16; setAlpha(100*ALPHA_MAX/100);	break;
		case 6:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-20; setAlpha(50*ALPHA_MAX/100);	break;
		case 7:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-23; setAlpha(0*ALPHA_MAX/100);	break;
		case 8:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-26; setAlpha(100*ALPHA_MAX/100);	break;
		case 9:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-29; setAlpha(100*ALPHA_MAX/100);	break;
		case 10:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-33; setAlpha(100*ALPHA_MAX/100);	break;
		case 11:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-36; setAlpha(100*ALPHA_MAX/100);	break;
		case 12:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-39; setAlpha(100*ALPHA_MAX/100);	break;
		case 13:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-42; setAlpha(50*ALPHA_MAX/100);	break;
		case 14:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-46; setAlpha(0*ALPHA_MAX/100);	break;
		case 15:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-49; setAlpha(100*ALPHA_MAX/100);	break;
		case 16:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-52; setAlpha(100*ALPHA_MAX/100);	break;
		case 17:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-56; setAlpha(100*ALPHA_MAX/100);	break;
		case 18:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-59; setAlpha(100*ALPHA_MAX/100);	break;
		case 19:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-62; setAlpha(100*ALPHA_MAX/100);	break;
		case 20:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-65; setAlpha(50*ALPHA_MAX/100);	break;
		case 21:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-69; setAlpha(0*ALPHA_MAX/100);	break;
		case 22:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-72; setAlpha(100*ALPHA_MAX/100);	break;
		case 23:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-75; setAlpha(100*ALPHA_MAX/100);	break;
		case 24:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-78; setAlpha(100*ALPHA_MAX/100);	break;
		case 25:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-82; setAlpha(100*ALPHA_MAX/100);	break;
		case 26:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-85; setAlpha(100*ALPHA_MAX/100);	break;
		case 27:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-88; setAlpha(50*ALPHA_MAX/100);	break;
		case 28:	subTemp[XPOS] = px-440+96+140-imgSendMachine_DisplayArrow.w-92; setAlpha(0*ALPHA_MAX/100);	break;
	}
	drawImage(&imgSendMachine_DisplayArrow, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_DisplayArrow.w, imgSendMachine_DisplayArrow.h, VL);
	setAlpha(ALPHA_MAX);
	
	//전송컨트롤러
	subTemp[XPOS] = px-440+48;
	subTemp[YPOS] = py+215;
	switch(xSendMachine_FP.anyCnt%22)
	{
		case 1:subTemp[YPOS]+=1;break;
		case 2:subTemp[YPOS]+=2;break;
		case 3:subTemp[YPOS]+=-2;break;
		case 4:subTemp[YPOS]+=-4;break;
		case 5:subTemp[YPOS]+=-5;break;
		case 6:subTemp[YPOS]+=-4;break;
		case 7:subTemp[YPOS]+=-4;break;
		case 8:subTemp[YPOS]+=-4;break;
		case 9:subTemp[YPOS]+=-4;break;
		case 10:subTemp[YPOS]+=-3;break;
		case 11:subTemp[YPOS]+=-3;break;
		case 12:subTemp[YPOS]+=-2;break;
		case 14:subTemp[YPOS]+= 2;break;
		case 15:subTemp[YPOS]+= 2;break;
		case 16:subTemp[YPOS]+= 1;break;
		case 17:subTemp[YPOS]+= -1;break;
		case 19:subTemp[YPOS]+= 1;break;
		case 20:subTemp[YPOS]+= 1;break;
	}
	drawImage(&imgSendMachine_Controler, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Controler.w, imgSendMachine_Controler.h, VH);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//대기슬롯
	totalnum = xSendMachine_FP.xData[SendMachineIndex].totalSlot;
	xSendMachine_FP.xDragScrollB.totalNum = 1+(totalnum-1)/3;
	xSendMachine_FP.xDragScrollB.posGab = 1280;
	dragScrollPrc(&xSendMachine_FP.xDragScrollB, 0, FALSE);
	
	xSendMachine_FP.xTouchOpenSlot.wPos = DONT;
	xSendMachine_FP.xTouchOpenSlot.hPos = DONT;
	xSendMachine_FP.xTouchOpenSlot.xPos = DONT;
	xSendMachine_FP.xTouchOpenSlot.yPos = DONT;
	
	gSetClip(true, px-94, 0, 505, lcdH);
	//    gSetColor(0,255,0);
	//    setAlpha(100);
	//    fillRect(px-430, 0, 860, lcdH);
	//    setAlpha(ALPHA_MAX);
	xSendMachine_FP.xTouchSlot.wPos = 505;
	xSendMachine_FP.xTouchSlot.hPos = 195;
	xSendMachine_FP.xTouchSlot.xPos = 475;
	xSendMachine_FP.xTouchSlot.yPos = 342;
	//    gSetColor(2550,0,0);
	//    setAlpha(100);
	//    fillRect(xSendMachine_FP.xTouchSlot.xPos, xSendMachine_FP.xTouchSlot.yPos, xSendMachine_FP.xTouchSlot.wPos, xSendMachine_FP.xTouchSlot.hPos);
	//    setAlpha(ALPHA_MAX);
	
	for(int page =-1;page<=xSendMachine_FP.xDragScrollB.totalNum;page++)
	{
		if(xSendMachine_FP.xDragScrollB.selectNum+page>=0 && xSendMachine_FP.xDragScrollB.selectNum+page<xSendMachine_FP.xDragScrollB.totalNum)
		{
			for(int i=0;i<3;i++)
			{
				if(((xSendMachine_FP.xDragScrollB.selectNum+page)*3)+i>=totalnum)
					break;
				
				pos = xSendMachine_FP.xDragScrollB.pos+(xSendMachine_FP.xDragScrollB.posGab*page);
				subTemp[XPOS] = px-94+pos+((i%3)*180);
				subTemp[YPOS] = py+56;
				
				slotNum = ((xSendMachine_FP.xDragScrollB.selectNum+page)*3)+i;
				//                slotCode = xCatalog_FP.xSlot[0][slotNum].code;
				slotCode = xSendMachine_FP.xSlot[slotNum].itemNum;
				
				//슬롯
				if(slotNum == totalnum-1 && xSendMachine_FP.xData[0].totalSlot < SENDMACHINE_SLOTMAX)
				{
					drawImage(&imgSendMachine_Slot[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Slot[2].w, imgSendMachine_Slot[2].h, TL);
					if(xSendMachine_FP.btnType == SENDMACHINE_BTNTYPE_LOCK)
						drawImage(&imgSendMachine_Lock, subTemp[XPOS]+imgSendMachine_Slot[2].w/2, subTemp[YPOS]+imgSendMachine_Slot[2].h/2, 0, 0, imgSendMachine_Lock.w/2, imgSendMachine_Lock.h, VH);
					else
						drawImage(&imgSendMachine_Lock, subTemp[XPOS]+imgSendMachine_Slot[2].w/2, subTemp[YPOS]+imgSendMachine_Slot[2].h/2, imgSendMachine_Lock.w/2, 0, imgSendMachine_Lock.w/2, imgSendMachine_Lock.h, VH);
					
					xSendMachine_FP.xTouchOpenSlot.wPos = imgSendMachine_Slot[1].w;
					xSendMachine_FP.xTouchOpenSlot.hPos = imgSendMachine_Slot[1].h;
					xSendMachine_FP.xTouchOpenSlot.xPos = subTemp[XPOS];
					xSendMachine_FP.xTouchOpenSlot.yPos = subTemp[YPOS];
				}
				else
				{
					drawImage(&imgSendMachine_Slot[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Slot[0].w, imgSendMachine_Slot[0].h, TL);
					//의상
					if(slotCode != DONT)
					{
						setMapData(slotCode);
						loadFashionFImg_FP(xMap.type, xMap.listNum);
						//						xGame.fgameScale = 0.9f;
						//						xGame.fgameScaleCx = subTemp[XPOS]+88;
						//						xGame.fgameScaleCy = subTemp[YPOS]-70;
						drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS]+imgSendMachine_Slot[0].w/2, subTemp[YPOS]+imgSendMachine_Slot[0].h/2, 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
						//						xGame.fgameScaleCx=cx;
						//						xGame.fgameScaleCy=cy;
						//						xGame.fgameScale = 1.0f;
						
						//의상개수
						drawNum(&imgSendMachine_Num, subTemp[XPOS]+imgSendMachine_Slot[0].w*3/4, subTemp[YPOS]+imgSendMachine_Slot[0].h*3/4, xSendMachine_FP.xSlot[slotNum].itemCnt,0,VL);
						
						drawImage(&imgSendMachine_Slot[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Slot[1].w, imgSendMachine_Slot[1].h, TL);
					}
				}
				
				//				 gSetColor(255, 0, 0);
				//				 setAlpha(100);
				//				 fillRect(xSendMachine_FP.xTouchStorage[slotNum].xPos, xSendMachine_FP.xTouchStorage[slotNum].yPos, xSendMachine_FP.xTouchStorage[slotNum].wPos, xSendMachine_FP.xTouchStorage[slotNum].hPos);
				//				 setAlpha(ALPHA_MAX);
			}
		}
	}
	gSetClip(false, 0, 0, lcdW, lcdH);
	
	//대기슬롯 왼쪽 화살표
	subTemp[XPOS] = px-117;
	subTemp[YPOS] = py+56+imgSendMachine_Slot[0].h/2;
	if(xSendMachine_FP.xDragScrollB.selectNum == 0)
		drawImage(&imgSendMachine_BtnArrow[1], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[1].w*2/6, 0, imgSendMachine_BtnArrow[1].w/6, imgSendMachine_BtnArrow[1].h, VH);
	else if(xSendMachine_FP.btnType == SENDMACHINE_BTNTYPE_SLOTL)
		drawImage(&imgSendMachine_BtnArrow[1], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[1].w*4/6, 0, imgSendMachine_BtnArrow[1].w/6, imgSendMachine_BtnArrow[1].h, VH);
	else
		drawImage(&imgSendMachine_BtnArrow[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_BtnArrow[1].w/6, imgSendMachine_BtnArrow[1].h, VH);
	
	subTemp[XPOS] = px-130;
	subTemp[YPOS] = py+56+imgSendMachine_Slot[0].h/2;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].wPos = imgSendMachine_BtnArrow[1].w/6+40;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].hPos = imgSendMachine_BtnArrow[1].h+40;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].xPos = subTemp[XPOS]-imgSendMachine_BtnArrow[1].w/6/2-20;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].yPos = subTemp[YPOS]-imgSendMachine_BtnArrow[1].h/2-20;
	//	gSetColor(255, 0, 0);
	//	setAlpha(100);
	//	fillRect(xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].xPos, xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].yPos, xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].wPos, xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_LEFT].hPos);
	//	setAlpha(ALPHA_MAX);
	
	//대기슬롯 오른쪽 화살표
	subTemp[XPOS] = px+430;//445
	subTemp[YPOS] = py+56+imgSendMachine_Slot[0].h/2;
	if(xSendMachine_FP.xDragScrollB.selectNum == xSendMachine_FP.xDragScrollB.totalNum-1)
		drawImage(&imgSendMachine_BtnArrow[1], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[1].w*3/6, 0, imgSendMachine_BtnArrow[1].w/6, imgSendMachine_BtnArrow[1].h, VH);
	else if(xSendMachine_FP.btnType == SENDMACHINE_BTNTYPE_SLOTR)
		drawImage(&imgSendMachine_BtnArrow[1], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[1].w*5/6, 0, imgSendMachine_BtnArrow[1].w/6, imgSendMachine_BtnArrow[1].h, VH);
	else
		drawImage(&imgSendMachine_BtnArrow[1], subTemp[XPOS], subTemp[YPOS], imgSendMachine_BtnArrow[1].w/6, 0, imgSendMachine_BtnArrow[1].w/6, imgSendMachine_BtnArrow[1].h, VH);
	subTemp[XPOS] = px+445;
	subTemp[YPOS] = py+56+imgSendMachine_Slot[0].h/2;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].wPos = imgSendMachine_BtnArrow[1].w/6+40;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].hPos = imgSendMachine_BtnArrow[1].h+40;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].xPos = subTemp[XPOS]-imgSendMachine_BtnArrow[1].w/6/2-20;
	xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].yPos = subTemp[YPOS]-imgSendMachine_BtnArrow[1].h/2-20;
	
	//	gSetColor(255, 0, 0);
	//	setAlpha(100);
	//	fillRect(xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].xPos, xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].yPos, xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].wPos, xSendMachine_FP.xTouchArrow[1][SENDMACHINE_BTNDIR_RIGHT].hPos);
	//	setAlpha(ALPHA_MAX);
	
	//레일
	subTemp[XPOS] = px-125;
	subTemp[YPOS] = py+215;
	drawImage(&imgSendMachine_Rail, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Rail.w, imgSendMachine_Rail.h, TL);
	
	//레일토끼
	for(int i = 0; i < 6; i++)
	{
		xGame.isRotate = true;
		switch(xSendMachine_FP.anyCnt%24)
		{
			case 0:x=0;y=0;rotate=0;break;
			case 1:x=0;y=0;rotate=1;break;
			case 2:x=-1;y=0;rotate=4;break;
			case 3:x=-1;y=0;rotate=8;break;
			case 4:x=-2;y=-1;rotate=12;break;
			case 5:x=-2;y=-1;rotate=16;break;
			case 6:x=-3;y=-1;rotate=19;break;
			case 7:x=-3;y=-1;rotate=20;break;
			case 8:x=-2;y=-1;rotate=18;break;
			case 9:x=-2;y=-1;rotate=12;break;
			case 10:x=-1;y=-1;rotate=3;break;
			case 11:x=1;y=0;rotate=-7;break;
			case 12:x=2;y=-1;rotate=-17;break;
			case 13:x=3;y=-1;rotate=-25;break;
			case 14:x=4;y=-1;rotate=-32;break;
			case 15:x=4;y=-1;rotate=-34;break;
			case 16:x=4;y=-1;rotate=-32;break;
			case 17:x=4;y=-1;rotate=-29;break;
			case 18:x=3;y=-1;rotate=-23;break;
			case 19:x=2;y=0;rotate=-17;break;
			case 20:x=1;y=0;rotate=-11;break;
			case 21:x=1;y=0;rotate=-5;break;
			case 22:x=0;y=0;rotate=-1;break;
			case 23:x=0;y=0;rotate=0;break;
		}
		xGame.rotateNum = 360 + rotate;
		subTemp[XPOS] = px-125+41+(90*i)+x;
		subTemp[YPOS] = py+215-22+y;
		drawImage(&imgSendMachine_RailRabbit, subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_RailRabbit.w, imgSendMachine_RailRabbit.h, TL);
		xGame.isRotate = false;
	}
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//전송슬롯에 의상넣기
	slotCode = xSendMachine_FP.xSendSlot.itemNum;
	if(slotCode != DONT)
	{
		switch(xSendMachine_FP.gameCnt)
		{
			case 0:x=283;y=0;break;
			case 1:x=272;y=-9;break;
			case 2:x=253;y=-22;break;
			case 3:x=231;y=-33;break;
			case 4:x=208;y=-40;break;
			case 5:x=187;y=-45;break;
			case 6:x=167;y=-47;break;
			case 7:x=148;y=-49;break;
			case 8:x=131;y=-49;break;
			case 9:x=115;y=-48;break;
			case 10:x=101;y=-47;break;
			case 11:x=87;y=-45;break;
			case 12:x=75;y=-42;break;
			case 13:x=65;y=-40;break;
			case 14:x=55;y=-37;break;
			case 15:x=46;y=-34;break;
			case 16:x=38;y=-31;break;
			case 17:x=31;y=-27;break;
			case 18:x=25;y=-24;break;
			case 19:x=20;y=-21;break;
			case 20:x=16;y=-18;break;
			case 21:x=12;y=-14;break;
			case 22:x=9;y=-12;break;
			case 23:x=6;y=-9;break;
			case 24:x=5;y=-7;break;
			case 25:x=3;y=-5;break;
			case 26:x=2;y=-3;break;
			case 27:x=1;y=-2;break;
			case 28:x=0;y=-1;break;
			default:x=0;y=0;break;
		}
		setMapData(slotCode);
		loadFashionFImg_FP(xMap.type, xMap.listNum);
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2+x;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-15+y;
		drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], subTemp[XPOS], subTemp[YPOS], 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
	}
	
	//전송슬롯 하이라이트
	if(xSendMachine_FP.gameCnt <= 39)
	{
		switch(xSendMachine_FP.gameCnt)
		{
			case 30:xGame.reSize=100;break;
			case 31:xGame.reSize=103;break;
			case 32:xGame.reSize=105;break;
			case 33:xGame.reSize=105;break;
			case 34:xGame.reSize=105;break;
			case 35:xGame.reSize=104;break;
			case 36:xGame.reSize=103;break;
			case 37:xGame.reSize=103;break;
			case 38:xGame.reSize=102;break;
			case 39:xGame.reSize=102;break;
			default:xGame.reSize=100;break;
		}
	}
	else
	{
		switch(xSendMachine_FP.gameCnt)
		{
			case 0: xGame.reSize=101; break;
			case 12: xGame.reSize=102; break;
			case 13: xGame.reSize=103; break;
			case 14: xGame.reSize=103; break;
			case 15: xGame.reSize=102; break;
			case 16: xGame.reSize=102; break;
			case 17: xGame.reSize=101; break;
			case 23: xGame.reSize=102; break;
			case 24: xGame.reSize=103; break;
			case 25: xGame.reSize=103; break;
			case 26: xGame.reSize=102; break;
			case 27: xGame.reSize=102; break;
			case 28: xGame.reSize=101; break;
			case 36: xGame.reSize=102; break;
			case 37: xGame.reSize=103; break;
			case 38: xGame.reSize=103; break;
			case 39: xGame.reSize=102; break;
			case 40: xGame.reSize=102; break;
			case 41: xGame.reSize=101; break;
			case 47: xGame.reSize=102; break;
			case 48: xGame.reSize=103; break;
			case 49: xGame.reSize=103; break;
			case 50: xGame.reSize=102; break;
			case 51: xGame.reSize=102; break;
			case 52: xGame.reSize=101; break;
			case 63: xGame.reSize=102; break;
			case 64: xGame.reSize=103; break;
			case 65: xGame.reSize=103; break;
			case 66: xGame.reSize=102; break;
			case 67: xGame.reSize=102; break;
			case 68: xGame.reSize=101; break;
			default:xGame.reSize=100; break;
		}
	}
	xGame.isReSizeDraw = true;
	subTemp[XPOS] = px-440+imgSendMachine_Display.w/2;
	subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-15;
	drawImage(&imgSendMachine_Slot[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Slot[1].w, imgSendMachine_Slot[1].h, VH);
	xGame.reSize=100;
	xGame.isReSizeDraw = false;
	
	//지퍼
	switch(xSendMachine_FP.gameCnt)
	{
		case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:
		case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:
		case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:setAlpha(0);break;
		case 30:setAlpha(10*ALPHA_MAX/100);break;
		case 31:setAlpha(20*ALPHA_MAX/100);break;
		case 32:setAlpha(30*ALPHA_MAX/100);break;
		case 33:setAlpha(40*ALPHA_MAX/100);break;
		case 34:setAlpha(50*ALPHA_MAX/100);break;
		case 35:setAlpha(60*ALPHA_MAX/100);break;
		case 36:setAlpha(70*ALPHA_MAX/100);break;
		case 37:setAlpha(80*ALPHA_MAX/100);break;
		case 38:setAlpha(90*ALPHA_MAX/100);break;
		default:setAlpha(ALPHA_MAX);break;
	}
	subTemp[XPOS] = px-440+imgSendMachine_Display.w/2;
	subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h;
	drawImage(&imgSendMachine_Sticker[0], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Sticker[0].w, imgSendMachine_Sticker[0].h, VH);
	setAlpha(ALPHA_MAX);
	
	//운송장
	if(xSendMachine_FP.gameCnt >= 43)
	{
		switch((xSendMachine_FP.gameCnt-43))
		{
			case 0:alpha=0;y=-63;break;
			case 1:alpha=3;y=-63;break;
			case 2:alpha=10;y=-62;break;
			case 3:alpha=22;y=-61;break;
			case 4:alpha=35;y=-59;break;
			case 5:alpha=50;y=-56;break;
			case 6:alpha=65;y=-52;break;
			case 7:alpha=78;y=-47;break;
			case 8:alpha=90;y=-39;break;
			case 9:alpha=97;y=-28;break;
			case 10:alpha=100;y=0;break;
			case 11:alpha=100;y=-1;break;
			case 12:alpha=100;y=-2;break;
			case 13:alpha=100;y=-1;break;
			case 14:alpha=100;y=0;break;
			default:alpha=100;y=0;break;
		}
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2+17;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2+10+y;
		setAlpha(alpha*ALPHA_MAX/100);
		drawImage(&imgSendMachine_Sticker[1], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Sticker[1].w, imgSendMachine_Sticker[1].h, VH);
		setAlpha(ALPHA_MAX);
	}
	
	//세탁표
	if(xSendMachine_FP.gameCnt >= 59)
	{
		switch(xSendMachine_FP.gameCnt-59)
		{
			case 0:alpha=0;scale=166;break;
			case 1:alpha=26;scale=162;break;
			case 2:alpha=74;scale=142;break;
			case 3:alpha=100;scale=90;break;
			case 4:alpha=100;scale=98;break;
			case 5:alpha=100;scale=105;break;
			case 6:alpha=100;scale=103;break;
			case 7:alpha=100;scale=100;break;
			default:alpha=100;scale=100;break;
		}
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2-45;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2+20;
		setAlpha(alpha*ALPHA_MAX/100);
		xGame.isReSizeDraw = true;
		xGame.reSize = scale;
		drawImage(&imgSendMachine_Sticker[2], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Sticker[2].w, imgSendMachine_Sticker[2].h, VH);
		xGame.reSize = 100;
		xGame.isReSizeDraw = false;
		setAlpha(ALPHA_MAX);
	}
	
	//네모스티커
	if(xSendMachine_FP.gameCnt >= 70)
	{
		switch(xSendMachine_FP.gameCnt-70)
		{
			case 0:alpha=0;scale=113;x=31;y=30;rotate=214;break;
			case 1:alpha=10;scale=112;x=30;y=29;rotate=192;break;
			case 2:alpha=35;scale=108;x=27;y=26;rotate=139;break;
			case 3:alpha=65;scale=105;x=23;y=22;rotate=75;break;
			case 4:alpha=90;scale=101;x=15;y=14;rotate=22;break;
			case 5:alpha=100;scale=100;x=0;y=0;rotate=0;break;
			case 6:alpha=100;scale=103;x=0;y=0;rotate=0;break;
			case 7:alpha=100;scale=105;x=0;y=0;rotate=0;break;
			case 8:alpha=100;scale=102;x=0;y=0;rotate=0;break;
			case 9:alpha=100;scale=98;x=0;y=0;rotate=0;break;
			case 10:alpha=100;scale=99;x=0;y=0;rotate=0;break;
			case 11:alpha=100;scale=100;x=0;y=0;rotate=0;break;
			default:alpha=100;scale=100;x=0;y=0;rotate=0;break;
				
		}
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2+15+imgSendMachine_Sticker[3].w/2+x;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-35+y;
		setAlpha(alpha*ALPHA_MAX/100);
		xGame.isReSizeDraw = true;
		xGame.isRotate = true;
		xGame.rotateNum = rotate;
		xGame.reSize = scale;
		drawImage(&imgSendMachine_Sticker[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Sticker[3].w, imgSendMachine_Sticker[3].h, VH);
		xGame.reSize = 100;
		xGame.rotateNum = 0;
		xGame.isRotate = false;
		xGame.isReSizeDraw = false;
		setAlpha(ALPHA_MAX);
	}
	
	//원형스티커
	if(xSendMachine_FP.gameCnt >= 83)
	{
		switch(xSendMachine_FP.gameCnt-83)
		{
			case 0:alpha=0;scale=300;break;
			case 1:alpha=22;scale=248;break;
			case 2:alpha=64;scale=152;break;
			case 3:alpha=100;scale=100;break;
			case 4:alpha=100;scale=101;break;
			case 5:alpha=100;scale=104;break;
			case 6:alpha=100;scale=105;break;
			case 7:alpha=100;scale=104;break;
			case 8:alpha=100;scale=101;break;
			case 9:alpha=100;scale=100;break;
			default:alpha=100;scale=100;break;
		}
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2-40;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-30;
		setAlpha(alpha*ALPHA_MAX/100);
		xGame.isReSizeDraw = true;
		xGame.reSize = scale;
		drawImage(&imgSendMachine_Sticker[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Sticker[4].w, imgSendMachine_Sticker[4].h, VH);
		xGame.reSize = 100;
		xGame.isReSizeDraw = false;
		setAlpha(ALPHA_MAX);
	}
	
	//별스티커
	if(xSendMachine_FP.gameCnt >= 86)
	{
		switch(xSendMachine_FP.gameCnt-86)
		{
			case 0:alpha=0;x=-19;rotate=301;break;
			case 1:alpha=4;x=-18;rotate=185;break;
			case 2:alpha=12;x=-18;rotate=131;break;
			case 3:alpha=21;x=-17;rotate=95;break;
			case 4:alpha=30;x=-13;rotate=68;break;
			case 5:alpha=40;x=-9;rotate=49;break;
			case 6:alpha=50;x=-5;rotate=33;break;
			case 7:alpha=60;x=-3;rotate=22;break;
			case 8:alpha=70;x=-1;rotate=13;break;
			case 9:alpha=79;x=0;rotate=7;break;
			case 10:alpha=88;x=0;rotate=3;break;
			case 11:alpha=96;x=0;rotate=1;break;
			case 12:alpha=100;x=0;rotate=0;break;
			default:alpha=100;x=0;rotate=0;break;
				
		}
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2-40+18+x;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-30-13;
		setAlpha(alpha*ALPHA_MAX/100);
		
		xGame.isRotate = true;
		xGame.rotateNum = rotate;
		drawImage(&imgSendMachine_Sticker[5], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Sticker[5].w, imgSendMachine_Sticker[5].h, VH);
		xGame.rotateNum = 0;
		xGame.isRotate = false;
		setAlpha(ALPHA_MAX);
	}
	
	//태그
	if(xSendMachine_FP.gameCnt >= 98)
	{
		switch(xSendMachine_FP.gameCnt-98)
		{
			case 0:alpha=0;x=1;y=0;rotate=0;break;
			case 1:alpha=13;x=2;y=2;rotate=3;break;
			case 2:alpha=42;x=5;y=6;rotate=10;break;
			case 3:alpha=75;x=8;y=11;rotate=17;break;
			case 4:alpha=100;x=8;y=13;rotate=20;break;
			case 5:alpha=100;x=8;y=11;rotate=15;break;
			case 6:alpha=100;x=5;y=4;rotate=5;break;
			case 7:alpha=100;x=-1;y=-1;rotate=-5;break;
			case 8:alpha=100;x=-4;y=-4;rotate=-10;break;
			case 9:alpha=100;x=-3;y=-4;rotate=-8;break;
			case 10:alpha=100;x=0;y=-1;rotate=-3;break;
			case 11:alpha=100;x=2;y=2;rotate=3;break;
			case 12:alpha=100;x=3;y=3;rotate=5;break;
			case 13:alpha=100;x=3;y=3;rotate=4;break;
			case 14:alpha=100;x=2;y=2;rotate=3;break;
			case 15:alpha=100;x=1;y=0;rotate=1;break;
			case 16:alpha=100;x=0;y=0;rotate=0;break;
			default:alpha=100;x=0;y=0;rotate=0;break;
		}
		
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2+58+imgSendMachine_Sticker[6].w/2+x;
		subTemp[YPOS] = py+215+2-imgSendMachine_Sticker[6].h+y;
		setAlpha(alpha*ALPHA_MAX/100);
		
		xGame.isRotate = true;
		xGame.rotateNum = rotate;
		drawImage(&imgSendMachine_Sticker[6], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Sticker[6].w, imgSendMachine_Sticker[6].h, VH);
		xGame.rotateNum = 0;
		xGame.isRotate = false;
		setAlpha(ALPHA_MAX);
	}
	
	if(xSendMachine_FP.isSendEnd == true)
	{
		//흰색판때기
		switch(xSendMachine_FP.endCnt)
		{
			case 0:alpha=97;scale=100;break;
			case 1:alpha=87;scale=121;break;
			case 2:alpha=78;scale=131;break;
			case 3:alpha=68;scale=137;break;
			case 4:alpha=58;scale=141;break;
			case 5:alpha=49;scale=144;break;
			case 6:alpha=39;scale=147;break;
			case 7:alpha=29;scale=148;break;
			case 8:alpha=19;scale=149;break;
			case 9:alpha=10;scale=150;break;
			case 10:alpha=0;scale=150;break;
		}
		
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-15;
		setAlpha(alpha*ALPHA_MAX/100);
		xGame.isReSizeDraw = true;
		xGame.reSize = scale;
		drawImage(&imgSendMachine_Slot[3], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Slot[3].w, imgSendMachine_Slot[3].h, VH);
		xGame.reSize = 100;
		xGame.isReSizeDraw = false;
		setAlpha(ALPHA_MAX);
		
		//경험치 동전
		switch(xSendMachine_FP.endCnt)
		{
			case 0:alpha=100;y=0;break;
			case 1:alpha=100;y=-15;break;
			case 2:alpha=100;y=-21;break;
			case 3:alpha=100;y=-26;break;
			case 4:alpha=100;y=-30;break;
			case 5:alpha=100;y=-33;break;
			case 6:alpha=93;y=-35;break;
			case 7:alpha=87;y=-37;break;
			case 8:alpha=80;y=-39;break;
			case 9:alpha=73;y=-41;break;
			case 10:alpha=67;y=-42;break;
			case 11:alpha=60;y=-43;break;
			case 12:alpha=53;y=-44;break;
			case 13:alpha=47;y=-45;break;
			case 14:alpha=40;y=-46;break;
			case 15:alpha=33;y=-47;break;
			case 16:alpha=27;y=-47;break;
			case 17:alpha=20;y=-47;break;
			case 18:alpha=13;y=-47;break;
			case 19:alpha=7;y=-47;break;
			case 20:alpha=0;y=-47;break;
		}
		
		subTemp[XPOS] = px-440+imgSendMachine_Display.w/2;
		subTemp[YPOS] = py+215-imgSendMachine_Slot[0].h/2-15+y;
		setAlpha(alpha*ALPHA_MAX/100);
		drawImage(&imgSendMachine_Slot[4], subTemp[XPOS], subTemp[YPOS], 0, 0, imgSendMachine_Slot[4].w, imgSendMachine_Slot[4].h, VH);
		setAlpha(ALPHA_MAX);
	}
	
	
	
	//선택한 의상
	if(xSendMachine_FP.selectNum != DONT)
	{
		slotCode = xSendMachine_FP.xDress[xSendMachine_FP.selectNum].itemNum;
		setMapData(slotCode);
		loadFashionFImg_FP(xMap.type, xMap.listNum);
		xGame.isReSizeDraw = true;
		xGame.reSize = 60;
		
		drawImage(&imgFittingF_FP[xMap.type][xMap.listNum], xTouch.xPos, xTouch.yPos, 0, 0, imgFittingF_FP[xMap.type][xMap.listNum].w, imgFittingF_FP[xMap.type][xMap.listNum].h, VH);
		
		xGame.isReSizeDraw = false;
	}
}

void FreeLoadSendMachine_FP(bool isLoad)
{
	if(isLoad == true)
	{
		loadImg("production_close.png", &imgSendMachine_Lock);
		
		loadImg("sendmachine_sticker0.png", &imgSendMachine_Sticker[0]);
		loadImg("sendmachine_sticker1.png", &imgSendMachine_Sticker[1]);
		loadImg("sendmachine_sticker2.png", &imgSendMachine_Sticker[2]);
		loadImg("sendmachine_sticker3.png", &imgSendMachine_Sticker[3]);
		loadImg("sendmachine_sticker4.png", &imgSendMachine_Sticker[4]);
		loadImg("sendmachine_sticker5.png", &imgSendMachine_Sticker[5]);
		loadImg("sendmachine_sticker6.png", &imgSendMachine_Sticker[6]);
		
		loadImg("sendmachine_num.png", &imgSendMachine_Num);
		
		loadImg("sendmachine_slot1.png", &imgSendMachine_Slot[0]);
		loadImg("sendmachine_slot3.png", &imgSendMachine_Slot[1]);
		loadImg("sendmachine_slot2.png", &imgSendMachine_Slot[2]);
		loadImg("sendmachine_slot4.png", &imgSendMachine_Slot[3]);
		loadImg("sendmachine_slot5.png", &imgSendMachine_Slot[4]);
		
		
		loadImg("sendmachine_rail.png", &imgSendMachine_Rail);
		loadImg("sendmachine_railrabbit.png", &imgSendMachine_RailRabbit);
		loadImg("production_btn_upgrade.png", &imgSendMachine_BtnUpgrade);
		
		
		loadImg("sendmachine_controler.png", &imgSendMachine_Controler);
		loadImg("sendmachine_display.png", &imgSendMachine_Display);
		loadImg("sendmachine_arrow.png", &imgSendMachine_DisplayArrow);
		
		loadImg("sendmachine_storagetitle.png", &imgSendMachine_StorageTitle);
		loadImg("sendmachine_title.png", &imgSendMachine_Title);
		
		loadImg("productionbase.png", &imgSendMachine_BG);
		loadImg("productionexiticon.png", &imgSendMachine_BtnExit);
		
		loadImg("production_left.png", &imgSendMachine_Storage[0]);
		loadImg("production_main.png", &imgSendMachine_Storage[1]);
		loadImg("production_right.png", &imgSendMachine_Storage[2]);
		loadImg("production_shadow.png", &imgSendMachine_Storage[3]);
		
		loadImg("production_arrow.png", &imgSendMachine_BtnArrow[0]);
		loadImg("production_slot_arrow.png", &imgSendMachine_BtnArrow[1]);
	}
	else
	{
		freeImg(&imgSendMachine_Lock);
		
		freeImg(&imgSendMachine_Sticker[0]);
		freeImg(&imgSendMachine_Sticker[1]);
		freeImg(&imgSendMachine_Sticker[2]);
		freeImg(&imgSendMachine_Sticker[3]);
		freeImg(&imgSendMachine_Sticker[4]);
		freeImg(&imgSendMachine_Sticker[5]);
		freeImg(&imgSendMachine_Sticker[6]);
		
		freeImg(&imgSendMachine_Num);
		
		freeImg(&imgSendMachine_Slot[0]);
		freeImg(&imgSendMachine_Slot[1]);
		freeImg(&imgSendMachine_Slot[2]);
		freeImg(&imgSendMachine_Slot[3]);
		freeImg(&imgSendMachine_Slot[4]);
		freeImg(&imgSendMachine_Slot[5]);
		
		
		freeImg(&imgSendMachine_Rail);
		freeImg(&imgSendMachine_RailRabbit);
		freeImg(&imgSendMachine_BtnUpgrade);
		
		
		freeImg(&imgSendMachine_Controler);
		freeImg(&imgSendMachine_Display);
		freeImg(&imgSendMachine_DisplayArrow);
		
		freeImg(&imgSendMachine_StorageTitle);
		freeImg(&imgSendMachine_Title);
		
		freeImg(&imgSendMachine_BG);
		freeImg(&imgSendMachine_BtnExit);
		
		freeImg(&imgSendMachine_Storage[0]);
		freeImg(&imgSendMachine_Storage[1]);
		freeImg(&imgSendMachine_Storage[2]);
		
		freeImg(&imgSendMachine_BtnArrow[0]);
		freeImg(&imgSendMachine_BtnArrow[1]);
	}
	
}

void setSendMachineBtnType_FP(int btnType)
{
	xSendMachine_FP.btnType = btnType;
}

void setSlotDress(int dressNum, int dressCnt)
{
	for(int i = 0; i < xSendMachine_FP.xData[0].totalSlot; i++)
	{
		if(xSendMachine_FP.xSlot[i].itemNum == DONT)
		{
			xSendMachine_FP.xSlot[i].itemNum = dressNum;
			xSendMachine_FP.xSlot[i].itemCnt = dressCnt;
			//슬롯업데이트 패킷 보내기
			xSendMachine_FP.xSlot[i].startTime = xCalendar.nowTime;
			xSendMachine_FP.xSlot[i].endTime = xCalendar.nowTime + 10;
			
			//			if(i == 0)
			//			{
			//				//전송슬롯에 넣기
			//				xSendMachine_FP.xSendSlot.itemNum = xSendMachine_FP.xSlot[i].itemNum;
			//				xSendMachine_FP.xSendSlot.itemCnt = xSendMachine_FP.xSlot[i].itemCnt;
			//				xSendMachine_FP.xSendSlot.key = xSendMachine_FP.xSlot[i].key;
			//				xSendMachine_FP.xSendSlot.startTime = xSendMachine_FP.xSlot[i].startTime;
			//				xSendMachine_FP.xSendSlot.endTime = xSendMachine_FP.xSlot[i].endTime;
			//			}
			
			//전송기 슬롯 등록 요청
			xEventQueueNet.typeNum[xEventQueueNet.totalNum] = 0;
			xEventQueueNet.bkey[xEventQueueNet.totalNum] = xSendMachine_FP.xData[0].bkey;
			xEventQueueNet.idx[xEventQueueNet.totalNum] = xSendMachine_FP.xSlot[i].key;
			xEventQueueNet.ITEM_INDEX[xEventQueueNet.totalNum] = xSendMachine_FP.xSlot[i].itemNum;
			xEventQueueNet.ITEM_COUNT[xEventQueueNet.totalNum] = xSendMachine_FP.xSlot[i].itemCnt;
			xEventQueueNet.start_time[xEventQueueNet.totalNum] = xSendMachine_FP.xSlot[i].startTime;
			xEventQueueNet.end_time[xEventQueueNet.totalNum] = xSendMachine_FP.xSlot[i].endTime;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMACHINESLOTUPDATE, TRUE);
			
			//전송기 슬롯정보
			xEventQueueNet.bkey[xEventQueueNet.totalNum] = xSendMachine_FP.xData[0].bkey;
			addEventQueueNet(xTouch.xPos, xTouch.yPos, NETQUEUE_TYPE_SENDMACHINESLOTINFO, TRUE);
			
			xSendMachine_FP.stateSub = SENDMACHINE_SUBSTATE_ADD;
			break;
		}
	}
}

bool isPlaySendMachine()
{
	bool isPlay = false;
	if(xSendMachine_FP.xSendSlot.itemNum != DONT)
		isPlay = true;
	return isPlay;
}

void setSendMachineGameCnt(int cnt)
{
	xSendMachine_FP.gameCnt = cnt;
}



//타일 넘버를 알았을때 그려지는 좌표 알아내는법
//int mapXpos,mapYpos;
//
//xInterior.buildMapTileYpos == x
//xInterior.buildMapTileYpos == y
//
//
//mapXpos = xMap.pointX + (((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) - ((xInterior.buildMapTileXpos-(xMap.nowFloor*5))+1)) * (TILEW / 2));
//if ((xInterior.buildMapTileYpos + (xInterior.buildMapTileXpos+1)) % 2 == 1)
//mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))+1) / 2) * TILEH) + (TILEH / 2);
//else
//mapYpos = xMap.pointY+ ((((xInterior.buildMapTileYpos-(xMap.nowFloor*5)) + (xInterior.buildMapTileXpos-(xMap.nowFloor*5))+1) / 2) * TILEH);
//
//
//
//게임좌표
//mapXpos
//mapYpos
//
//유아이좌표
//getWorldMapPos(mapXpos,cx);
//getWorldMapPos(mapYpos,cy);



